declare namespace PokeRogue {
  export interface UserInfo {
      username: string;
      lastSessionSlot: integer;
  }
  export declare let loggedInUser: UserInfo;
  export declare const clientSessionId: string;
  export declare function initLoggedInUser(): void;
  export declare function updateUserInfo(): Promise<[boolean, integer]>;
  
}

declare namespace PokeRogue {
  import Phaser from "phaser";
  //import UI from "./ui/ui";
  //import { MovePhase } from "./phases";
  //import Pokemon, { PlayerPokemon, EnemyPokemon } from "./field/pokemon";
  //import PokemonSpecies, { PokemonSpeciesFilter } from "./data/pokemon-species";
  //import { Constructor } from "#app/utils";
  //import { Modifier, ModifierBar, PersistentModifier, PokemonHeldItemModifier, ModifierPredicate } from "./modifier/modifier";
  //import { Phase } from "./phase";
  //import { Arena, ArenaBase } from "./field/arena";
  //import { GameData } from "./system/game-data";
  //import AbilityBar from "./ui/ability-bar";
  //import Battle, { BattleType } from "./battle";
  //import { GameMode } from "./game-mode";
  //import FieldSpritePipeline from "./pipelines/field-sprite";
  //import SpritePipeline from "./pipelines/sprite";
  //import PartyExpBar from "./ui/party-exp-bar";
  //import { TrainerSlot } from "./data/trainer-config";
  //import Trainer from "./field/trainer";
  //import TrainerData from "./system/trainer-data";
  //import PokeballTray from "./ui/pokeball-tray";
  //import { Achv } from "./system/achv";
  //import { Voucher } from "./system/voucher";
  //import { Gender } from "./data/gender";
  import UIPlugin from "phaser3-rex-plugins/templates/ui/ui-plugin";
  //import PokemonData from "./system/pokemon-data";
  //import { Nature } from "./data/nature";
  //import { SpeciesFormChangeTrigger } from "./data/pokemon-forms";
  //import CharSprite from "./ui/char-sprite";
  //import DamageNumberHandler from "./field/damage-number-handler";
  //import PokemonInfoContainer from "./ui/pokemon-info-container";
  //import { SceneBase } from "./scene-base";
  //import CandyBar from "./ui/candy-bar";
  //import { Variant } from "./data/variant";
  //import { InputsController } from "./inputs-controller";
  //import { UiInputs } from "./ui-inputs";
  //import ArenaFlyout from "./ui/arena-flyout";
  //import { EaseType } from "#enums/ease-type";
  //import { Biome } from "#enums/biome";
  //import { ExpNotification } from "#enums/exp-notification";
  //import { MoneyFormat } from "#enums/money-format";
  //import { UiTheme } from "#enums/ui-theme";
  //import { TimedEventManager } from "#app/timed-event-manager.js";
  export declare const bypassLogin: boolean;
  export declare const startingWave: number;
  export declare let starterColors: StarterColors;
  interface StarterColors {
      [key: string]: [string, string];
  }
  export interface PokeballCounts {
      [pb: string]: integer;
  }
  export type AnySound = Phaser.Sound.WebAudioSound | Phaser.Sound.HTML5AudioSound | Phaser.Sound.NoAudioSound;
  export interface InfoToggle {
      toggleInfo(force?: boolean): void;
      isActive(): boolean;
  }
  export class BattleScene extends PokeRogue.SceneBase {
      rexUI: UIPlugin;
      inputController: PokeRogue.InputsController;
      uiInputs: PokeRogue.UiInputs;
      sessionPlayTime: integer;
      lastSavePlayTime: integer;
      masterVolume: number;
      bgmVolume: number;
      seVolume: number;
      gameSpeed: integer;
      damageNumbersMode: integer;
      reroll: boolean;
      showMovesetFlyout: boolean;
      showArenaFlyout: boolean;
      showTimeOfDayWidget: boolean;
      timeOfDayAnimation: PokeRogue.enums.EaseType;
      showLevelUpStats: boolean;
      enableTutorials: boolean;
      enableMoveInfo: boolean;
      enableRetries: boolean;
      /**
       * Determines the condition for a notification should be shown for Candy Upgrades
       * - 0 = 'Off'
       * - 1 = 'Passives Only'
       * - 2 = 'On'
       */
      candyUpgradeNotification: integer;
      /**
       * Determines what type of notification is used for Candy Upgrades
       * - 0 = 'Icon'
       * - 1 = 'Animation'
       */
      candyUpgradeDisplay: integer;
      moneyFormat: PokeRogue.enums.MoneyFormat;
      uiTheme: PokeRogue.enums.UiTheme;
      windowType: integer;
      experimentalSprites: boolean;
      musicPreference: integer;
      moveAnimations: boolean;
      expGainsSpeed: integer;
      skipSeenDialogues: boolean;
      /**
         * Defines the experience gain display mode.
         *
         * @remarks
         * The `expParty` can have several modes:
         * - `0` - Default: The normal experience gain display, nothing changed.
         * - `1` - Level Up Notification: Displays the level up in the small frame instead of a message.
         * - `2` - Skip: No level up frame nor message.
         *
         * Modes `1` and `2` are still compatible with stats display, level up, new move, etc.
         * @default 0 - Uses the default normal experience gain display.
         */
      expParty: PokeRogue.enums.ExpNotification;
      hpBarSpeed: integer;
      fusionPaletteSwaps: boolean;
      enableTouchControls: boolean;
      enableVibration: boolean;
      showBgmBar: boolean;
      /**
       * Determines the selected battle style.
       * - 0 = 'Switch'
       * - 1 = 'Set' - The option to switch the active pokemon at the start of a battle will not display.
       */
      battleStyle: integer;
      /**
      * Defines whether or not to show type effectiveness hints
      * - true: No hints
      * - false: Show hints for moves
       */
      typeHints: boolean;
      disableMenu: boolean;
      gameData: PokeRogue.system.GameData;
      sessionSlotId: integer;
      phaseQueue: PokeRogue.Phase[];
      conditionalQueue: Array<[() => boolean, Phase]>;
      public phaseQueuePrepend;
      public phaseQueuePrependSpliceIndex;
      public nextCommandPhaseQueue;
      public currentPhase;
      public standbyPhase;
      field: Phaser.GameObjects.Container;
      fieldUI: Phaser.GameObjects.Container;
      charSprite: PokeRogue.ui.CharSprite;
      pbTray: PokeRogue.ui.PokeballTray;
      pbTrayEnemy: PokeRogue.ui.PokeballTray;
      abilityBar: PokeRogue.ui.AbilityBar;
      partyExpBar: PokeRogue.ui.PartyExpBar;
      candyBar: PokeRogue.ui.CandyBar;
      arenaBg: Phaser.GameObjects.Sprite;
      arenaBgTransition: Phaser.GameObjects.Sprite;
      arenaPlayer: PokeRogue.field.ArenaBase;
      arenaPlayerTransition: PokeRogue.field.ArenaBase;
      arenaEnemy: PokeRogue.field.ArenaBase;
      arenaNextEnemy: PokeRogue.field.ArenaBase;
      arena: PokeRogue.field.Arena;
      gameMode: PokeRogue.GameMode;
      score: integer;
      lockModifierTiers: boolean;
      trainer: Phaser.GameObjects.Sprite;
      lastEnemyTrainer: PokeRogue.field.Trainer;
      currentBattle: PokeRogue.Battle;
      pokeballCounts: PokeballCounts;
      money: integer;
      pokemonInfoContainer: PokeRogue.ui.PokemonInfoContainer;
      public party;
      /** Combined Biome and Wave count text */
      public biomeWaveText;
      public moneyText;
      public scoreText;
      public luckLabelText;
      public luckText;
      public modifierBar;
      public enemyModifierBar;
      arenaFlyout: PokeRogue.ui.ArenaFlyout;
      public fieldOverlay;
      public shopOverlay;
      modifiers: PokeRogue.modifier.PersistentModifier[];
      public enemyModifiers;
      uiContainer: Phaser.GameObjects.Container;
      ui: PokeRogue.ui.UI;
      seed: string;
      waveSeed: string;
      waveCycleOffset: integer;
      offsetGym: boolean;
      damageNumberHandler: PokeRogue.field.DamageNumberHandler;
      public spriteSparkleHandler;
      fieldSpritePipeline: PokeRogue.pipelines.FieldSpritePipeline;
      spritePipeline: PokeRogue.pipelines.SpritePipeline;
      public bgm;
      public bgmResumeTimer;
      public bgmCache;
      public playTimeTimer;
      rngCounter: integer;
      rngSeedOverride: string;
      rngOffset: integer;
      inputMethod: string;
      public infoToggles;
      eventManager: PokeRogue.TimedEventManager;
      /**
       * Allows subscribers to listen for events
       *
       * Current Events:
       * - {@linkcode BattleSceneEventType.MOVE_USED} {@linkcode MoveUsedEvent}
       * - {@linkcode BattleSceneEventType.TURN_INIT} {@linkcode TurnInitEvent}
       * - {@linkcode BattleSceneEventType.TURN_END} {@linkcode TurnEndEvent}
       * - {@linkcode BattleSceneEventType.NEW_ARENA} {@linkcode NewArenaEvent}
       */
      readonly eventTarget: EventTarget;
      constructor();
      loadPokemonAtlas(key: string, atlasPath: string, experimental?: boolean): void;
      preload(): Promise<void>;
      create(): void;
      update(): void;
      launchBattle(): void;
      initSession(): void;
      initExpSprites(): Promise<void>;
      initVariantData(): Promise<void>;
      cachedFetch(url: string, init?: RequestInit): Promise<Response>;
      initStarterColors(): Promise<void>;
      hasExpSprite(key: string): boolean;
      getParty(): PlayerPokemon[];
      getPlayerPokemon(): PlayerPokemon;
      /**
       * Returns an array of PlayerPokemon of length 1 or 2 depending on if double battles or not
       * @returns array of {@linkcode PlayerPokemon}
       */
      getPlayerField(): PlayerPokemon[];
      getEnemyParty(): EnemyPokemon[];
      getEnemyPokemon(): EnemyPokemon;
      /**
       * Returns an array of EnemyPokemon of length 1 or 2 depending on if double battles or not
       * @returns array of {@linkcode EnemyPokemon}
       */
      getEnemyField(): EnemyPokemon[];
      getField(activeOnly?: boolean): Pokemon[];
      /**
       * Returns the ModifierBar of this scene, which is declared public and therefore not accessible elsewhere
       * @returns {ModifierBar}
       */
      getModifierBar(): ModifierBar;
      addInfoToggle(infoToggle: InfoToggle): void;
      getInfoToggles(activeOnly?: boolean): InfoToggle[];
      getPokemonById(pokemonId: integer): Pokemon;
      addPlayerPokemon(species: PokeRogue.data.PokemonSpecies, level: integer, abilityIndex: integer, formIndex: integer, gender?: Gender, shiny?: boolean, variant?: Variant, ivs?: integer[], nature?: Nature, dataSource?: Pokemon | PokemonData, postProcess?: (playerPokemon: PokeRogue.field.PlayerPokemon) => void): PlayerPokemon;
      addEnemyPokemon(species: PokeRogue.data.PokemonSpecies, level: integer, trainerSlot: PokeRogue.data.TrainerSlot, boss?: boolean, dataSource?: PokemonData, postProcess?: (enemyPokemon: PokeRogue.field.EnemyPokemon) => void): EnemyPokemon;
      addPokemonIcon(pokemon: PokeRogue.field.Pokemon, x: number, y: number, originX?: number, originY?: number, ignoreOverride?: boolean): Phaser.GameObjects.Container;
      setSeed(seed: string): void;
      randBattleSeedInt(range: integer, min?: integer): integer;
      reset(clearScene?: boolean, clearData?: boolean, reloadI18n?: boolean): void;
      newBattle(waveIndex?: integer, battleType?: BattleType, trainerData?: TrainerData, double?: boolean): Battle;
      newArena(biome: PokeRogue.enums.Biome): Arena;
      updateFieldScale(): Promise<void>;
      setFieldScale(scale: number, instant?: boolean): Promise<void>;
      getSpeciesFormIndex(species: PokeRogue.data.PokemonSpecies, gender?: Gender, nature?: Nature, ignoreArena?: boolean): integer;
      public getGeneratedOffsetGym;
      public getGeneratedWaveCycleOffset;
      getEncounterBossSegments(waveIndex: integer, level: integer, species?: PokemonSpecies, forceBoss?: boolean): integer;
      trySpreadPokerus(): void;
      resetSeed(waveIndex?: integer): void;
      executeWithSeedOffset(func: Function, offset: integer, seedOverride?: string): void;
      addFieldSprite(x: number, y: number, texture: string | Phaser.Textures.Texture, frame?: string | number, terrainColorRatio?: number): Phaser.GameObjects.Sprite;
      addPokemonSprite(pokemon: PokeRogue.field.Pokemon, x: number, y: number, texture: string | Phaser.Textures.Texture, frame?: string | number, hasShadow?: boolean, ignoreOverride?: boolean): Phaser.GameObjects.Sprite;
      initPokemonSprite(sprite: Phaser.GameObjects.Sprite, pokemon?: Pokemon, hasShadow?: boolean, ignoreOverride?: boolean): Phaser.GameObjects.Sprite;
      moveBelowOverlay<T extends Phaser.GameObjects.GameObject>(gameObject: T): void;
      processInfoButton(pressed: boolean): void;
      showFieldOverlay(duration: integer): Promise<void>;
      hideFieldOverlay(duration: integer): Promise<void>;
      showShopOverlay(duration: integer): Promise<void>;
      hideShopOverlay(duration: integer): Promise<void>;
      showEnemyModifierBar(): void;
      hideEnemyModifierBar(): void;
      updateBiomeWaveText(): void;
      updateMoneyText(forceVisible?: boolean): void;
      animateMoneyChanged(positiveChange: boolean): void;
      updateScoreText(): void;
      updateAndShowText(duration: integer): void;
      hideLuckText(duration: integer): void;
      updateUIPositions(): void;
      /**
       * Pushes all {@linkcode Phaser.GameObjects.Text} objects in the top right to the bottom of the canvas
       */
      sendTextToBack(): void;
      addFaintedEnemyScore(enemy: PokeRogue.field.EnemyPokemon): void;
      getMaxExpLevel(ignoreLevelCap?: boolean): integer;
      randomSpecies(waveIndex: integer, level: integer, fromArenaPool?: boolean, speciesFilter?: PokemonSpeciesFilter, filterAllEvolutions?: boolean): PokemonSpecies;
      generateRandomBiome(waveIndex: integer): Biome;
      isBgmPlaying(): boolean;
      playBgm(bgmName?: string, fadeOut?: boolean): void;
      pauseBgm(): boolean;
      resumeBgm(): boolean;
      updateSoundVolume(): void;
      fadeOutBgm(duration?: integer, destroy?: boolean): boolean;
      playSound(sound: string | AnySound, config?: object): AnySound;
      playSoundWithoutBgm(soundName: string, pauseDuration?: integer): AnySound;
      getBgmLoopPoint(bgmName: string): number;
      toggleInvert(invert: boolean): void;
      getCurrentPhase(): Phase;
      getStandbyPhase(): Phase;
      /**
       * Adds a phase to the conditional queue and ensures it is executed only when the specified condition is met.
       *
       * This method allows deferring the execution of a phase until certain conditions are met, which is useful for handling
       * situations like abilities and entry hazards that depend on specific game states.
       *
       * @param {Phase} phase - The phase to be added to the conditional queue.
       * @param {() => boolean} condition - A function that returns a boolean indicating whether the phase should be executed.
       *
       */
      pushConditionalPhase(phase: PokeRogue.Phase, condition: () => boolean): void;
      pushPhase(phase: PokeRogue.Phase, defer?: boolean): void;
      unshiftPhase(phase: PokeRogue.Phase): void;
      clearPhaseQueue(): void;
      setPhaseQueueSplice(): void;
      clearPhaseQueueSplice(): void;
      shiftPhase(): void;
      overridePhase(phase: PokeRogue.Phase): boolean;
      findPhase(phaseFilter: (phase: PokeRogue.Phase) => boolean): Phase;
      tryReplacePhase(phaseFilter: (phase: PokeRogue.Phase) => boolean, phase: PokeRogue.Phase): boolean;
      tryRemovePhase(phaseFilter: (phase: PokeRogue.Phase) => boolean): boolean;
      pushMovePhase(movePhase: PokeRogue.MovePhase, priorityOverride?: integer): void;
      queueMessage(message: string, callbackDelay?: integer, prompt?: boolean, promptDelay?: integer, defer?: boolean): void;
      populatePhaseQueue(): void;
      addMoney(amount: integer): void;
      getWaveMoneyAmount(moneyMultiplier: number): integer;
      addModifier(modifier: PokeRogue.modifier.Modifier, ignoreUpdate?: boolean, playSound?: boolean, virtual?: boolean, instant?: boolean): Promise<boolean>;
      addEnemyModifier(modifier: PokeRogue.modifier.PersistentModifier, ignoreUpdate?: boolean, instant?: boolean): Promise<void>;
      /**
       * Try to transfer a held item to another pokemon.
       * If the recepient already has the maximum amount allowed for this item, the transfer is cancelled.
       * The quantity to transfer is automatically capped at how much the recepient can take before reaching the maximum stack size for the item.
       * A transfer that moves a quantity smaller than what is specified in the transferQuantity parameter is still considered successful.
       * @param itemModifier {@linkcode PokemonHeldItemModifier} item to transfer (represents the whole stack)
       * @param target {@linkcode Pokemon} pokemon recepient in this transfer
       * @param playSound {boolean}
       * @param transferQuantity {@linkcode integer} how many items of the stack to transfer. Optional, defaults to 1
       * @param instant {boolean}
       * @param ignoreUpdate {boolean}
       * @returns true if the transfer was successful
       */
      tryTransferHeldItemModifier(itemModifier: PokeRogue.modifier.PokemonHeldItemModifier, target: PokeRogue.field.Pokemon, playSound: boolean, transferQuantity?: integer, instant?: boolean, ignoreUpdate?: boolean): Promise<boolean>;
      removePartyMemberModifiers(partyMemberIndex: integer): Promise<void>;
      generateEnemyModifiers(): Promise<void>;
      /**
        * Removes all modifiers from enemy of PersistentModifier type
        */
      clearEnemyModifiers(): void;
      /**
        * Removes all modifiers from enemy of PokemonHeldItemModifier type
        */
      clearEnemyHeldItemModifiers(): void;
      setModifiersVisible(visible: boolean): void;
      updateModifiers(player?: boolean, instant?: boolean): Promise<void>;
      updatePartyForModifiers(party: PokeRogue.field.Pokemon[], instant?: boolean): Promise<void>;
      removeModifier(modifier: PokeRogue.modifier.PersistentModifier, enemy?: boolean): boolean;
      /**
       * Get all of the modifiers that match `modifierType`
       * @param modifierType The type of modifier to apply; must extend {@linkcode PersistentModifier}
       * @param player Whether to search the player (`true`) or the enemy (`false`); Defaults to `true`
       * @returns the list of all modifiers that matched `modifierType`.
       */
      getModifiers<T extends PokeRogue.modifier.PersistentModifier>(modifierType: PokeRogue.Constructor<T>, player?: boolean): T[];
      findModifiers(modifierFilter: PokeRogue.modifier.ModifierPredicate, player?: boolean): PersistentModifier[];
      findModifier(modifierFilter: PokeRogue.modifier.ModifierPredicate, player?: boolean): PersistentModifier;
      applyShuffledModifiers(scene: BattleScene, modifierType: PokeRogue.Constructor<Modifier>, player?: boolean, ...args: any[]): PersistentModifier[];
      applyModifiers(modifierType: PokeRogue.Constructor<Modifier>, player?: boolean, ...args: any[]): PersistentModifier[];
      applyModifiersInternal(modifiers: PokeRogue.modifier.PersistentModifier[], player: boolean, args: any[]): PersistentModifier[];
      applyModifier(modifierType: PokeRogue.Constructor<Modifier>, player?: boolean, ...args: any[]): PersistentModifier;
      triggerPokemonFormChange(pokemon: PokeRogue.field.Pokemon, formChangeTriggerType: PokeRogue.Constructor<SpeciesFormChangeTrigger>, delayed?: boolean, modal?: boolean): boolean;
      validateAchvs(achvType: PokeRogue.Constructor<Achv>, ...args: unknown[]): void;
      validateAchv(achv: PokeRogue.system.Achv, args?: any[]): boolean;
      validateVoucher(voucher: PokeRogue.system.Voucher, args?: any[]): boolean;
      updateGameInfo(): void;
  }
  export {};
  
}

declare namespace PokeRogue {
  //import BattleScene from "./battle-scene";
  //import { EnemyPokemon, PlayerPokemon, QueuedMove } from "./field/pokemon";
  //import { Command } from "./ui/command-ui-handler";
  //import Trainer from "./field/trainer";
  //import { GameMode } from "./game-mode";
  //import { PokemonHeldItemModifier } from "./modifier/modifier";
  //import { PokeballType } from "./data/pokeball";
  //import { BattleSpec } from "#enums/battle-spec";
  //import { Moves } from "#enums/moves";
  export declare enum BattleType {
      WILD = 0,
      TRAINER = 1,
      CLEAR = 2
  }
  export declare enum BattlerIndex {
      ATTACKER = -1,
      PLAYER = 0,
      PLAYER_2 = 1,
      ENEMY = 2,
      ENEMY_2 = 3
  }
  export interface TurnCommand {
      command: PokeRogue.ui.Command;
      cursor?: integer;
      move?: QueuedMove;
      targets?: BattlerIndex[];
      skip?: boolean;
      args?: any[];
  }
  interface TurnCommands {
      [key: integer]: TurnCommand;
  }
  export class Battle {
      protected gameMode: PokeRogue.GameMode;
      waveIndex: integer;
      battleType: BattleType;
      battleSpec: PokeRogue.enums.BattleSpec;
      trainer: PokeRogue.field.Trainer;
      enemyLevels: integer[];
      enemyParty: PokeRogue.field.EnemyPokemon[];
      seenEnemyPartyMemberIds: Set<integer>;
      double: boolean;
      started: boolean;
      enemySwitchCounter: integer;
      turn: integer;
      turnCommands: TurnCommands;
      playerParticipantIds: Set<integer>;
      battleScore: integer;
      postBattleLoot: PokeRogue.modifier.PokemonHeldItemModifier[];
      escapeAttempts: integer;
      lastMove: PokeRogue.enums.Moves;
      battleSeed: string;
      public battleSeedState;
      moneyScattered: number;
      lastUsedPokeball: PokeRogue.data.PokeballType;
      playerFaints: number;
      enemyFaints: number;
      public rngCounter;
      constructor(gameMode: PokeRogue.GameMode, waveIndex: integer, battleType: BattleType, trainer: PokeRogue.field.Trainer, double: boolean);
      public initBattleSpec;
      public getLevelForWave;
      randSeedGaussForLevel(value: number): number;
      getBattlerCount(): integer;
      incrementTurn(scene: PokeRogue.BattleScene): void;
      addParticipant(playerPokemon: PokeRogue.field.PlayerPokemon): void;
      removeFaintedParticipant(playerPokemon: PokeRogue.field.PlayerPokemon): void;
      addPostBattleLoot(enemyPokemon: PokeRogue.field.EnemyPokemon): void;
      pickUpScatteredMoney(scene: PokeRogue.BattleScene): void;
      addBattleScore(scene: PokeRogue.BattleScene): void;
      getBgmOverride(scene: PokeRogue.BattleScene): string;
      randSeedInt(scene: PokeRogue.BattleScene, range: integer, min?: integer): integer;
  }
  export declare class FixedBattle extends Battle {
      constructor(scene: PokeRogue.BattleScene, waveIndex: integer, config: FixedBattleConfig);
  }
  type GetTrainerFunc = (scene: PokeRogue.BattleScene) => Trainer;
  type GetEnemyPartyFunc = (scene: PokeRogue.BattleScene) => EnemyPokemon[];
  export declare class FixedBattleConfig {
      battleType: BattleType;
      double: boolean;
      getTrainer: GetTrainerFunc;
      getEnemyParty: GetEnemyPartyFunc;
      seedOffsetWaveIndex: integer;
      setBattleType(battleType: BattleType): FixedBattleConfig;
      setDouble(double: boolean): FixedBattleConfig;
      setGetTrainerFunc(getTrainerFunc: GetTrainerFunc): FixedBattleConfig;
      setGetEnemyPartyFunc(getEnemyPartyFunc: GetEnemyPartyFunc): FixedBattleConfig;
      setSeedOffsetWave(seedOffsetWaveIndex: integer): FixedBattleConfig;
  }
  export interface FixedBattleConfigs {
      [key: integer]: FixedBattleConfig;
  }
  /**
   * Youngster/Lass on 5
   * Rival on 8, 55, 95, 145, 195
   * Evil team grunts on 35, 62, 64, 66, 112, 114
   * Evil leader on 115, 165
   * E4 on 182, 184, 186, 188
   * Champion on 190
   */
  export declare const classicFixedBattles: FixedBattleConfigs;
  export {};
  
}

declare namespace PokeRogue.configs.inputs {
  //import { Button } from "#enums/buttons";
  //import { SettingKeyboard } from "#app/system/settings/settings-keyboard";
  declare const cfg_keyboard_qwerty: {
      padID: string;
      padType: string;
      deviceMapping: {
          KEY_A: number;
          KEY_B: number;
          KEY_C: number;
          KEY_D: number;
          KEY_E: number;
          KEY_F: number;
          KEY_G: number;
          KEY_H: number;
          KEY_I: number;
          KEY_J: number;
          KEY_K: number;
          KEY_L: number;
          KEY_M: number;
          KEY_N: number;
          KEY_O: number;
          KEY_P: number;
          KEY_Q: number;
          KEY_R: number;
          KEY_S: number;
          KEY_T: number;
          KEY_U: number;
          KEY_V: number;
          KEY_W: number;
          KEY_X: number;
          KEY_Y: number;
          KEY_Z: number;
          KEY_0: number;
          KEY_1: number;
          KEY_2: number;
          KEY_3: number;
          KEY_4: number;
          KEY_5: number;
          KEY_6: number;
          KEY_7: number;
          KEY_8: number;
          KEY_9: number;
          KEY_CTRL: number;
          KEY_DEL: number;
          KEY_END: number;
          KEY_ENTER: number;
          KEY_ESC: number;
          KEY_F1: number;
          KEY_F2: number;
          KEY_F3: number;
          KEY_F4: number;
          KEY_F5: number;
          KEY_F6: number;
          KEY_F7: number;
          KEY_F8: number;
          KEY_F9: number;
          KEY_F10: number;
          KEY_F11: number;
          KEY_F12: number;
          KEY_HOME: number;
          KEY_INSERT: number;
          KEY_PAGE_DOWN: number;
          KEY_PAGE_UP: number;
          KEY_PLUS: number;
          KEY_MINUS: number;
          KEY_QUOTATION: number;
          KEY_SHIFT: number;
          KEY_SPACE: number;
          KEY_TAB: number;
          KEY_TILDE: number;
          KEY_ARROW_UP: number;
          KEY_ARROW_DOWN: number;
          KEY_ARROW_LEFT: number;
          KEY_ARROW_RIGHT: number;
          KEY_LEFT_BRACKET: number;
          KEY_RIGHT_BRACKET: number;
          KEY_SEMICOLON: number;
          KEY_BACKSPACE: number;
          KEY_ALT: number;
      };
      icons: {
          KEY_A: string;
          KEY_B: string;
          KEY_C: string;
          KEY_D: string;
          KEY_E: string;
          KEY_F: string;
          KEY_G: string;
          KEY_H: string;
          KEY_I: string;
          KEY_J: string;
          KEY_K: string;
          KEY_L: string;
          KEY_M: string;
          KEY_N: string;
          KEY_O: string;
          KEY_P: string;
          KEY_Q: string;
          KEY_R: string;
          KEY_S: string;
          KEY_T: string;
          KEY_U: string;
          KEY_V: string;
          KEY_W: string;
          KEY_X: string;
          KEY_Y: string;
          KEY_Z: string;
          KEY_0: string;
          KEY_1: string;
          KEY_2: string;
          KEY_3: string;
          KEY_4: string;
          KEY_5: string;
          KEY_6: string;
          KEY_7: string;
          KEY_8: string;
          KEY_9: string;
          KEY_F1: string;
          KEY_F2: string;
          KEY_F3: string;
          KEY_F4: string;
          KEY_F5: string;
          KEY_F6: string;
          KEY_F7: string;
          KEY_F8: string;
          KEY_F9: string;
          KEY_F10: string;
          KEY_F11: string;
          KEY_F12: string;
          KEY_PAGE_DOWN: string;
          KEY_PAGE_UP: string;
          KEY_CTRL: string;
          KEY_DEL: string;
          KEY_END: string;
          KEY_ENTER: string;
          KEY_ESC: string;
          KEY_HOME: string;
          KEY_INSERT: string;
          KEY_PLUS: string;
          KEY_MINUS: string;
          KEY_QUOTATION: string;
          KEY_SHIFT: string;
          KEY_SPACE: string;
          KEY_TAB: string;
          KEY_TILDE: string;
          KEY_ARROW_UP: string;
          KEY_ARROW_DOWN: string;
          KEY_ARROW_LEFT: string;
          KEY_ARROW_RIGHT: string;
          KEY_LEFT_BRACKET: string;
          KEY_RIGHT_BRACKET: string;
          KEY_SEMICOLON: string;
          KEY_BACKSPACE: string;
          KEY_ALT: string;
      };
      settings: {
          BUTTON_UP: PokeRogue.enums.Button;
          BUTTON_DOWN: PokeRogue.enums.Button;
          BUTTON_LEFT: PokeRogue.enums.Button;
          BUTTON_RIGHT: PokeRogue.enums.Button;
          BUTTON_SUBMIT: PokeRogue.enums.Button;
          BUTTON_ACTION: PokeRogue.enums.Button;
          BUTTON_CANCEL: PokeRogue.enums.Button;
          BUTTON_MENU: PokeRogue.enums.Button;
          BUTTON_STATS: PokeRogue.enums.Button;
          BUTTON_CYCLE_SHINY: PokeRogue.enums.Button;
          BUTTON_CYCLE_FORM: PokeRogue.enums.Button;
          BUTTON_CYCLE_GENDER: PokeRogue.enums.Button;
          BUTTON_CYCLE_ABILITY: PokeRogue.enums.Button;
          BUTTON_CYCLE_NATURE: PokeRogue.enums.Button;
          BUTTON_CYCLE_VARIANT: PokeRogue.enums.Button;
          BUTTON_SPEED_UP: PokeRogue.enums.Button;
          BUTTON_SLOW_DOWN: PokeRogue.enums.Button;
          ALT_BUTTON_UP: PokeRogue.enums.Button;
          ALT_BUTTON_DOWN: PokeRogue.enums.Button;
          ALT_BUTTON_LEFT: PokeRogue.enums.Button;
          ALT_BUTTON_RIGHT: PokeRogue.enums.Button;
          ALT_BUTTON_SUBMIT: PokeRogue.enums.Button;
          ALT_BUTTON_ACTION: PokeRogue.enums.Button;
          ALT_BUTTON_CANCEL: PokeRogue.enums.Button;
          ALT_BUTTON_MENU: PokeRogue.enums.Button;
          ALT_BUTTON_STATS: PokeRogue.enums.Button;
          ALT_BUTTON_CYCLE_SHINY: PokeRogue.enums.Button;
          ALT_BUTTON_CYCLE_FORM: PokeRogue.enums.Button;
          ALT_BUTTON_CYCLE_GENDER: PokeRogue.enums.Button;
          ALT_BUTTON_CYCLE_ABILITY: PokeRogue.enums.Button;
          ALT_BUTTON_CYCLE_NATURE: PokeRogue.enums.Button;
          ALT_BUTTON_CYCLE_VARIANT: PokeRogue.enums.Button;
          ALT_BUTTON_SPEED_UP: PokeRogue.enums.Button;
          ALT_BUTTON_SLOW_DOWN: PokeRogue.enums.Button;
      };
      default: {
          KEY_ARROW_UP: PokeRogue.system.settings.SettingKeyboard;
          KEY_ARROW_DOWN: PokeRogue.system.settings.SettingKeyboard;
          KEY_ARROW_LEFT: PokeRogue.system.settings.SettingKeyboard;
          KEY_ARROW_RIGHT: PokeRogue.system.settings.SettingKeyboard;
          KEY_ENTER: PokeRogue.system.settings.SettingKeyboard;
          KEY_SPACE: PokeRogue.system.settings.SettingKeyboard;
          KEY_BACKSPACE: PokeRogue.system.settings.SettingKeyboard;
          KEY_ESC: PokeRogue.system.settings.SettingKeyboard;
          KEY_C: PokeRogue.system.settings.SettingKeyboard;
          KEY_R: PokeRogue.system.settings.SettingKeyboard;
          KEY_F: PokeRogue.system.settings.SettingKeyboard;
          KEY_G: PokeRogue.system.settings.SettingKeyboard;
          KEY_E: PokeRogue.system.settings.SettingKeyboard;
          KEY_N: PokeRogue.system.settings.SettingKeyboard;
          KEY_V: PokeRogue.system.settings.SettingKeyboard;
          KEY_PLUS: number;
          KEY_MINUS: number;
          KEY_A: PokeRogue.system.settings.SettingKeyboard;
          KEY_B: number;
          KEY_D: PokeRogue.system.settings.SettingKeyboard;
          KEY_H: number;
          KEY_I: number;
          KEY_J: number;
          KEY_K: number;
          KEY_L: number;
          KEY_M: PokeRogue.system.settings.SettingKeyboard;
          KEY_O: number;
          KEY_P: number;
          KEY_Q: number;
          KEY_S: PokeRogue.system.settings.SettingKeyboard;
          KEY_T: PokeRogue.system.settings.SettingKeyboard;
          KEY_U: number;
          KEY_W: PokeRogue.system.settings.SettingKeyboard;
          KEY_X: PokeRogue.system.settings.SettingKeyboard;
          KEY_Y: PokeRogue.system.settings.SettingKeyboard;
          KEY_Z: PokeRogue.system.settings.SettingKeyboard;
          KEY_0: number;
          KEY_1: number;
          KEY_2: number;
          KEY_3: number;
          KEY_4: number;
          KEY_5: number;
          KEY_6: number;
          KEY_7: number;
          KEY_8: number;
          KEY_9: number;
          KEY_CTRL: number;
          KEY_DEL: number;
          KEY_END: number;
          KEY_F1: number;
          KEY_F2: number;
          KEY_F3: number;
          KEY_F4: number;
          KEY_F5: number;
          KEY_F6: number;
          KEY_F7: number;
          KEY_F8: number;
          KEY_F9: number;
          KEY_F10: number;
          KEY_F11: number;
          KEY_F12: number;
          KEY_HOME: number;
          KEY_INSERT: number;
          KEY_PAGE_DOWN: PokeRogue.system.settings.SettingKeyboard;
          KEY_PAGE_UP: PokeRogue.system.settings.SettingKeyboard;
          KEY_QUOTATION: number;
          KEY_SHIFT: PokeRogue.system.settings.SettingKeyboard;
          KEY_TAB: number;
          KEY_TILDE: number;
          KEY_LEFT_BRACKET: number;
          KEY_RIGHT_BRACKET: number;
          KEY_SEMICOLON: number;
          KEY_ALT: number;
      };
      blacklist: string[];
  };

}

declare namespace PokeRogue.configs.inputs {
  /**
   * Retrieves the key associated with the specified keycode from the mapping.
   *
   * @param config - The configuration object containing the mapping.
   * @param keycode - The keycode to search for.
   * @returns The key associated with the specified keycode.
   */
  export declare function getKeyWithKeycode(config: any, keycode: any): string;
  /**
   * Retrieves the setting name associated with the specified keycode.
   *
   * @param config - The configuration object containing custom settings.
   * @param keycode - The keycode to search for.
   * @returns The setting name associated with the specified keycode.
   */
  export declare function getSettingNameWithKeycode(config: any, keycode: any): any;
  /**
   * Retrieves the icon associated with the specified keycode.
   *
   * @param config - The configuration object containing icons.
   * @param keycode - The keycode to search for.
   * @returns The icon associated with the specified keycode.
   */
  export declare function getIconWithKeycode(config: any, keycode: any): any;
  /**
   * Retrieves the button associated with the specified keycode.
   *
   * @param config - The configuration object containing settings.
   * @param keycode - The keycode to search for.
   * @returns The button associated with the specified keycode.
   */
  export declare function getButtonWithKeycode(config: any, keycode: any): any;
  /**
   * Retrieves the key associated with the specified setting name.
   *
   * @param config - The configuration object containing custom settings.
   * @param settingName - The setting name to search for.
   * @returns The key associated with the specified setting name.
   */
  export declare function getKeyWithSettingName(config: any, settingName: any): string;
  /**
   * Retrieves the setting name associated with the specified key.
   *
   * @param config - The configuration object containing custom settings.
   * @param key - The key to search for.
   * @returns The setting name associated with the specified key.
   */
  export declare function getSettingNameWithKey(config: any, key: any): any;
  /**
   * Retrieves the icon associated with the specified key.
   *
   * @param config - The configuration object containing icons.
   * @param key - The key to search for.
   * @returns The icon associated with the specified key.
   */
  export declare function getIconWithKey(config: any, key: any): any;
  /**
   * Retrieves the icon associated with the specified setting name.
   *
   * @param config - The configuration object containing icons.
   * @param settingName - The setting name to search for.
   * @returns The icon associated with the specified setting name.
   */
  export declare function getIconWithSettingName(config: any, settingName: any): any;
  export declare function getIconForLatestInput(configs: any, source: any, devices: any, settingName: any): any;
  export declare function assign(config: any, settingNameTarget: any, keycode: any): boolean;
  export declare function swap(config: any, settingNameTarget: any, keycode: any): boolean;
  /**
   * Deletes the binding of the specified setting name.
   *
   * @param config - The configuration object containing custom settings.
   * @param settingName - The setting name to delete.
   */
  export declare function deleteBind(config: any, settingName: any): boolean;
  export declare function canIAssignThisKey(config: any, key: any): boolean;
  export declare function canIOverrideThisSetting(config: any, settingName: any): boolean;
  export declare function canIDeleteThisKey(config: any, key: any): boolean;
  
}

declare namespace PokeRogue.configs.inputs {
  //import { SettingGamepad } from "../../system/settings/settings-gamepad";
  //import { Button } from "#enums/buttons";
  /**
   * Dualshock mapping
   */
  declare const pad_dualshock: {
      padID: string;
      padType: string;
      deviceMapping: {
          RC_S: number;
          RC_E: number;
          RC_W: number;
          RC_N: number;
          START: number;
          SELECT: number;
          LB: number;
          RB: number;
          LT: number;
          RT: number;
          LS: number;
          RS: number;
          LC_N: number;
          LC_S: number;
          LC_W: number;
          LC_E: number;
          TOUCH: number;
      };
      icons: {
          RC_S: string;
          RC_E: string;
          RC_W: string;
          RC_N: string;
          START: string;
          SELECT: string;
          LB: string;
          RB: string;
          LT: string;
          RT: string;
          LS: string;
          RS: string;
          LC_N: string;
          LC_S: string;
          LC_W: string;
          LC_E: string;
          TOUCH: string;
      };
      settings: {
          BUTTON_UP: PokeRogue.enums.Button;
          BUTTON_DOWN: PokeRogue.enums.Button;
          BUTTON_LEFT: PokeRogue.enums.Button;
          BUTTON_RIGHT: PokeRogue.enums.Button;
          BUTTON_ACTION: PokeRogue.enums.Button;
          BUTTON_CANCEL: PokeRogue.enums.Button;
          BUTTON_CYCLE_NATURE: PokeRogue.enums.Button;
          BUTTON_CYCLE_VARIANT: PokeRogue.enums.Button;
          BUTTON_MENU: PokeRogue.enums.Button;
          BUTTON_STATS: PokeRogue.enums.Button;
          BUTTON_CYCLE_FORM: PokeRogue.enums.Button;
          BUTTON_CYCLE_SHINY: PokeRogue.enums.Button;
          BUTTON_CYCLE_GENDER: PokeRogue.enums.Button;
          BUTTON_CYCLE_ABILITY: PokeRogue.enums.Button;
          BUTTON_SPEED_UP: PokeRogue.enums.Button;
          BUTTON_SLOW_DOWN: PokeRogue.enums.Button;
          BUTTON_SUBMIT: PokeRogue.enums.Button;
      };
      default: {
          LC_N: PokeRogue.system.settings.SettingGamepad;
          LC_S: PokeRogue.system.settings.SettingGamepad;
          LC_W: PokeRogue.system.settings.SettingGamepad;
          LC_E: PokeRogue.system.settings.SettingGamepad;
          RC_S: PokeRogue.system.settings.SettingGamepad;
          RC_E: PokeRogue.system.settings.SettingGamepad;
          RC_W: PokeRogue.system.settings.SettingGamepad;
          RC_N: PokeRogue.system.settings.SettingGamepad;
          START: PokeRogue.system.settings.SettingGamepad;
          SELECT: PokeRogue.system.settings.SettingGamepad;
          LB: PokeRogue.system.settings.SettingGamepad;
          RB: PokeRogue.system.settings.SettingGamepad;
          LT: PokeRogue.system.settings.SettingGamepad;
          RT: PokeRogue.system.settings.SettingGamepad;
          LS: PokeRogue.system.settings.SettingGamepad;
          RS: PokeRogue.system.settings.SettingGamepad;
          TOUCH: PokeRogue.system.settings.SettingGamepad;
      };
  };

}

declare namespace PokeRogue.configs.inputs {
  //import { SettingGamepad } from "../../system/settings/settings-gamepad";
  //import { Button } from "#enums/buttons";
  /**
   * Generic pad mapping
   */
  declare const pad_generic: {
      padID: string;
      padType: string;
      deviceMapping: {
          RC_S: number;
          RC_E: number;
          RC_W: number;
          RC_N: number;
          START: number;
          SELECT: number;
          LB: number;
          RB: number;
          LT: number;
          RT: number;
          LS: number;
          RS: number;
          LC_N: number;
          LC_S: number;
          LC_W: number;
          LC_E: number;
      };
      icons: {
          RC_S: string;
          RC_E: string;
          RC_W: string;
          RC_N: string;
          START: string;
          SELECT: string;
          LB: string;
          RB: string;
          LT: string;
          RT: string;
          LS: string;
          RS: string;
          LC_N: string;
          LC_S: string;
          LC_W: string;
          LC_E: string;
      };
      settings: {
          BUTTON_UP: PokeRogue.enums.Button;
          BUTTON_DOWN: PokeRogue.enums.Button;
          BUTTON_LEFT: PokeRogue.enums.Button;
          BUTTON_RIGHT: PokeRogue.enums.Button;
          BUTTON_ACTION: PokeRogue.enums.Button;
          BUTTON_CANCEL: PokeRogue.enums.Button;
          BUTTON_CYCLE_NATURE: PokeRogue.enums.Button;
          BUTTON_CYCLE_VARIANT: PokeRogue.enums.Button;
          BUTTON_MENU: PokeRogue.enums.Button;
          BUTTON_STATS: PokeRogue.enums.Button;
          BUTTON_CYCLE_FORM: PokeRogue.enums.Button;
          BUTTON_CYCLE_SHINY: PokeRogue.enums.Button;
          BUTTON_CYCLE_GENDER: PokeRogue.enums.Button;
          BUTTON_CYCLE_ABILITY: PokeRogue.enums.Button;
          BUTTON_SPEED_UP: PokeRogue.enums.Button;
          BUTTON_SLOW_DOWN: PokeRogue.enums.Button;
      };
      default: {
          LC_N: PokeRogue.system.settings.SettingGamepad;
          LC_S: PokeRogue.system.settings.SettingGamepad;
          LC_W: PokeRogue.system.settings.SettingGamepad;
          LC_E: PokeRogue.system.settings.SettingGamepad;
          RC_S: PokeRogue.system.settings.SettingGamepad;
          RC_E: PokeRogue.system.settings.SettingGamepad;
          RC_W: PokeRogue.system.settings.SettingGamepad;
          RC_N: PokeRogue.system.settings.SettingGamepad;
          START: PokeRogue.system.settings.SettingGamepad;
          SELECT: PokeRogue.system.settings.SettingGamepad;
          LB: PokeRogue.system.settings.SettingGamepad;
          RB: PokeRogue.system.settings.SettingGamepad;
          LT: PokeRogue.system.settings.SettingGamepad;
          RT: PokeRogue.system.settings.SettingGamepad;
          LS: PokeRogue.system.settings.SettingGamepad;
          RS: PokeRogue.system.settings.SettingGamepad;
      };
      blacklist: string[];
  };

}

declare namespace PokeRogue.configs.inputs {
  //import { SettingGamepad } from "#app/system/settings/settings-gamepad.js";
  //import { Button } from "#enums/buttons";
  /**
   * Nintendo Pro Controller mapping
   */
  declare const pad_procon: {
      padID: string;
      padType: string;
      deviceMapping: {
          RC_S: number;
          RC_E: number;
          RC_W: number;
          RC_N: number;
          START: number;
          SELECT: number;
          LB: number;
          RB: number;
          LT: number;
          RT: number;
          LS: number;
          RS: number;
          LC_N: number;
          LC_S: number;
          LC_W: number;
          LC_E: number;
          MENU: number;
      };
      icons: {
          RC_S: string;
          RC_E: string;
          RC_W: string;
          RC_N: string;
          START: string;
          SELECT: string;
          LB: string;
          RB: string;
          LT: string;
          RT: string;
          LS: string;
          RS: string;
          LC_N: string;
          LC_S: string;
          LC_W: string;
          LC_E: string;
      };
      settings: {
          BUTTON_UP: PokeRogue.enums.Button;
          BUTTON_DOWN: PokeRogue.enums.Button;
          BUTTON_LEFT: PokeRogue.enums.Button;
          BUTTON_RIGHT: PokeRogue.enums.Button;
          BUTTON_ACTION: PokeRogue.enums.Button;
          BUTTON_CANCEL: PokeRogue.enums.Button;
          BUTTON_CYCLE_NATURE: PokeRogue.enums.Button;
          BUTTON_CYCLE_VARIANT: PokeRogue.enums.Button;
          BUTTON_MENU: PokeRogue.enums.Button;
          BUTTON_STATS: PokeRogue.enums.Button;
          BUTTON_CYCLE_FORM: PokeRogue.enums.Button;
          BUTTON_CYCLE_SHINY: PokeRogue.enums.Button;
          BUTTON_CYCLE_GENDER: PokeRogue.enums.Button;
          BUTTON_CYCLE_ABILITY: PokeRogue.enums.Button;
          BUTTON_SPEED_UP: PokeRogue.enums.Button;
          BUTTON_SLOW_DOWN: PokeRogue.enums.Button;
      };
      default: {
          LC_N: PokeRogue.system.settings.SettingGamepad;
          LC_S: PokeRogue.system.settings.SettingGamepad;
          LC_W: PokeRogue.system.settings.SettingGamepad;
          LC_E: PokeRogue.system.settings.SettingGamepad;
          RC_S: PokeRogue.system.settings.SettingGamepad;
          RC_E: PokeRogue.system.settings.SettingGamepad;
          RC_W: PokeRogue.system.settings.SettingGamepad;
          RC_N: PokeRogue.system.settings.SettingGamepad;
          START: PokeRogue.system.settings.SettingGamepad;
          SELECT: PokeRogue.system.settings.SettingGamepad;
          LB: PokeRogue.system.settings.SettingGamepad;
          RB: PokeRogue.system.settings.SettingGamepad;
          LT: PokeRogue.system.settings.SettingGamepad;
          RT: PokeRogue.system.settings.SettingGamepad;
          LS: PokeRogue.system.settings.SettingGamepad;
          RS: PokeRogue.system.settings.SettingGamepad;
      };
  };

}

declare namespace PokeRogue.configs.inputs {
  //import { SettingGamepad } from "../../system/settings/settings-gamepad";
  //import { Button } from "#enums/buttons";
  /**
   * 081f-e401 - UnlicensedSNES
   */
  declare const pad_unlicensedSNES: {
      padID: string;
      padType: string;
      deviceMapping: {
          RC_S: number;
          RC_E: number;
          RC_W: number;
          RC_N: number;
          START: number;
          SELECT: number;
          LB: number;
          RB: number;
          LC_N: number;
          LC_S: number;
          LC_W: number;
          LC_E: number;
      };
      icons: {
          RC_S: string;
          RC_E: string;
          RC_W: string;
          RC_N: string;
          START: string;
          SELECT: string;
          LB: string;
          RB: string;
          LC_N: string;
          LC_S: string;
          LC_W: string;
          LC_E: string;
      };
      settings: {
          BUTTON_UP: PokeRogue.enums.Button;
          BUTTON_DOWN: PokeRogue.enums.Button;
          BUTTON_LEFT: PokeRogue.enums.Button;
          BUTTON_RIGHT: PokeRogue.enums.Button;
          BUTTON_ACTION: PokeRogue.enums.Button;
          BUTTON_CANCEL: PokeRogue.enums.Button;
          BUTTON_CYCLE_NATURE: PokeRogue.enums.Button;
          BUTTON_CYCLE_VARIANT: PokeRogue.enums.Button;
          BUTTON_MENU: PokeRogue.enums.Button;
          BUTTON_STATS: PokeRogue.enums.Button;
          BUTTON_CYCLE_FORM: PokeRogue.enums.Button;
          BUTTON_CYCLE_SHINY: PokeRogue.enums.Button;
          BUTTON_CYCLE_GENDER: PokeRogue.enums.Button;
          BUTTON_CYCLE_ABILITY: PokeRogue.enums.Button;
          BUTTON_SPEED_UP: PokeRogue.enums.Button;
          BUTTON_SLOW_DOWN: PokeRogue.enums.Button;
      };
      default: {
          LC_N: PokeRogue.system.settings.SettingGamepad;
          LC_S: PokeRogue.system.settings.SettingGamepad;
          LC_W: PokeRogue.system.settings.SettingGamepad;
          LC_E: PokeRogue.system.settings.SettingGamepad;
          RC_S: PokeRogue.system.settings.SettingGamepad;
          RC_E: PokeRogue.system.settings.SettingGamepad;
          RC_W: PokeRogue.system.settings.SettingGamepad;
          RC_N: PokeRogue.system.settings.SettingGamepad;
          START: PokeRogue.system.settings.SettingGamepad;
          SELECT: PokeRogue.system.settings.SettingGamepad;
          LB: PokeRogue.system.settings.SettingGamepad;
          RB: PokeRogue.system.settings.SettingGamepad;
          LT: number;
          RT: number;
          LS: number;
          RS: number;
      };
  };

}

declare namespace PokeRogue.configs.inputs {
  //import { SettingGamepad } from "../../system/settings/settings-gamepad";
  //import { Button } from "#enums/buttons";
  /**
   * Generic pad mapping
   */
  declare const pad_xbox360: {
      padID: string;
      padType: string;
      deviceMapping: {
          RC_S: number;
          RC_E: number;
          RC_W: number;
          RC_N: number;
          START: number;
          SELECT: number;
          LB: number;
          RB: number;
          LT: number;
          RT: number;
          LS: number;
          RS: number;
          LC_N: number;
          LC_S: number;
          LC_W: number;
          LC_E: number;
      };
      icons: {
          RC_S: string;
          RC_E: string;
          RC_W: string;
          RC_N: string;
          START: string;
          SELECT: string;
          LB: string;
          RB: string;
          LT: string;
          RT: string;
          LS: string;
          RS: string;
          LC_N: string;
          LC_S: string;
          LC_W: string;
          LC_E: string;
      };
      settings: {
          BUTTON_UP: PokeRogue.enums.Button;
          BUTTON_DOWN: PokeRogue.enums.Button;
          BUTTON_LEFT: PokeRogue.enums.Button;
          BUTTON_RIGHT: PokeRogue.enums.Button;
          BUTTON_ACTION: PokeRogue.enums.Button;
          BUTTON_CANCEL: PokeRogue.enums.Button;
          BUTTON_CYCLE_NATURE: PokeRogue.enums.Button;
          BUTTON_CYCLE_VARIANT: PokeRogue.enums.Button;
          BUTTON_MENU: PokeRogue.enums.Button;
          BUTTON_STATS: PokeRogue.enums.Button;
          BUTTON_CYCLE_FORM: PokeRogue.enums.Button;
          BUTTON_CYCLE_SHINY: PokeRogue.enums.Button;
          BUTTON_CYCLE_GENDER: PokeRogue.enums.Button;
          BUTTON_CYCLE_ABILITY: PokeRogue.enums.Button;
          BUTTON_SPEED_UP: PokeRogue.enums.Button;
          BUTTON_SLOW_DOWN: PokeRogue.enums.Button;
      };
      default: {
          LC_N: PokeRogue.system.settings.SettingGamepad;
          LC_S: PokeRogue.system.settings.SettingGamepad;
          LC_W: PokeRogue.system.settings.SettingGamepad;
          LC_E: PokeRogue.system.settings.SettingGamepad;
          RC_S: PokeRogue.system.settings.SettingGamepad;
          RC_E: PokeRogue.system.settings.SettingGamepad;
          RC_W: PokeRogue.system.settings.SettingGamepad;
          RC_N: PokeRogue.system.settings.SettingGamepad;
          START: PokeRogue.system.settings.SettingGamepad;
          SELECT: PokeRogue.system.settings.SettingGamepad;
          LB: PokeRogue.system.settings.SettingGamepad;
          RB: PokeRogue.system.settings.SettingGamepad;
          LT: PokeRogue.system.settings.SettingGamepad;
          RT: PokeRogue.system.settings.SettingGamepad;
          LS: PokeRogue.system.settings.SettingGamepad;
          RS: PokeRogue.system.settings.SettingGamepad;
      };
  };

}

declare namespace PokeRogue.data {
  //import Pokemon, { HitResult, PokemonMove } from "../field/pokemon";
  //import { Type } from "./type";
  //import { Constructor } from "#app/utils";
  //import * as Utils from "../utils";
  //import { BattleStat } from "./battle-stat";
  //import { Weather, WeatherType } from "./weather";
  //import { BattlerTag } from "./battler-tags";
  //import { StatusEffect } from "./status-effect";
  //import Move, { MoveCategory } from "./move";
  //import { Stat } from "./pokemon-stat";
  //import { PokemonHeldItemModifier } from "../modifier/modifier";
  //import { TerrainType } from "./terrain";
  //import { Localizable } from "#app/interfaces/locales.js";
  //import { BattlerIndex } from "#app/battle";
  //import { Abilities } from "#enums/abilities";
  //import { ArenaTagType } from "#enums/arena-tag-type";
  //import { BattlerTagType } from "#enums/battler-tag-type";
  //import { Moves } from "#enums/moves";
  export declare class Ability implements Localizable {
      id: PokeRogue.enums.Abilities;
      public nameAppend;
      name: string;
      description: string;
      generation: integer;
      isBypassFaint: boolean;
      isIgnorable: boolean;
      attrs: AbAttr[];
      conditions: AbAttrCondition[];
      constructor(id: PokeRogue.enums.Abilities, generation: integer);
      localize(): void;
      /**
       * Get all ability attributes that match `attrType`
       * @param attrType any attribute that extends {@linkcode AbAttr}
       * @returns Array of attributes that match `attrType`, Empty Array if none match.
       */
      getAttrs<T extends AbAttr>(attrType: PokeRogue.Constructor<T>): T[];
      /**
       * Check if an ability has an attribute that matches `attrType`
       * @param attrType any attribute that extends {@linkcode AbAttr}
       * @returns true if the ability has attribute `attrType`
       */
      hasAttr<T extends AbAttr>(attrType: PokeRogue.Constructor<T>): boolean;
      attr<T extends PokeRogue.Constructor<AbAttr>>(AttrType: T, ...args: ConstructorParameters<T>): Ability;
      conditionalAttr<T extends PokeRogue.Constructor<AbAttr>>(condition: AbAttrCondition, AttrType: T, ...args: ConstructorParameters<T>): Ability;
      bypassFaint(): Ability;
      ignorable(): Ability;
      condition(condition: AbAttrCondition): Ability;
      partial(): this;
      unimplemented(): this;
  }
  type AbAttrCondition = (pokemon: PokeRogue.field.Pokemon) => boolean;
  type PokemonAttackCondition = (user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: PokeRogue.data.Move) => boolean;
  type PokemonDefendCondition = (target: PokeRogue.field.Pokemon, user: PokeRogue.field.Pokemon, move: PokeRogue.data.Move) => boolean;
  type PokemonStatChangeCondition = (target: PokeRogue.field.Pokemon, statsChanged: PokeRogue.data.BattleStat[], levels: integer) => boolean;
  export declare abstract class AbAttr {
      showAbility: boolean;
      public extraCondition;
      constructor(showAbility?: boolean);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean | Promise<boolean>;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
      getCondition(): AbAttrCondition | null;
      addCondition(condition: AbAttrCondition): AbAttr;
  }
  export declare class BlockRecoilDamageAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): never;
  }
  export declare class DoubleBattleChanceAbAttr extends AbAttr {
      constructor();
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class PostBattleInitAbAttr extends AbAttr {
      applyPostBattleInit(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PostBattleInitFormChangeAbAttr extends PostBattleInitAbAttr {
      public formFunc;
      constructor(formFunc: ((p: PokeRogue.field.Pokemon) => integer));
      applyPostBattleInit(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  export declare class PostBattleInitStatChangeAbAttr extends PostBattleInitAbAttr {
      public stats;
      public levels;
      public selfTarget;
      constructor(stats: PokeRogue.data.BattleStat | BattleStat[], levels: integer, selfTarget?: boolean);
      applyPostBattleInit(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  type PreDefendAbAttrCondition = (pokemon: PokeRogue.field.Pokemon, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move) => boolean;
  export declare class PreDefendAbAttr extends AbAttr {
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PreDefendFormChangeAbAttr extends PreDefendAbAttr {
      public formFunc;
      constructor(formFunc: ((p: PokeRogue.field.Pokemon) => integer));
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class PreDefendFullHpEndureAbAttr extends PreDefendAbAttr {
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class BlockItemTheftAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class StabBoostAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class ReceivedMoveDamageMultiplierAbAttr extends PreDefendAbAttr {
      protected condition: PokemonDefendCondition;
      public damageMultiplier;
      constructor(condition: PokemonDefendCondition, damageMultiplier: number);
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class ReceivedTypeDamageMultiplierAbAttr extends ReceivedMoveDamageMultiplierAbAttr {
      constructor(moveType: PokeRogue.data.Type, damageMultiplier: number);
  }
  export declare class PreDefendMoveDamageToOneAbAttr extends ReceivedMoveDamageMultiplierAbAttr {
      constructor(condition: PokemonDefendCondition);
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * Determines whether a Pokemon is immune to a move because of an ability.
   * @extends PreDefendAbAttr
   * @see {@linkcode applyPreDefend}
   * @see {@linkcode getCondition}
   */
  export declare class TypeImmunityAbAttr extends PreDefendAbAttr {
      public immuneType;
      public condition;
      constructor(immuneType: PokeRogue.data.Type, condition?: AbAttrCondition);
      /**
       * Applies immunity if this ability grants immunity to the type of the given move.
       * @param pokemon {@linkcode Pokemon} the defending Pokemon
       * @param passive N/A
       * @param attacker {@linkcode Pokemon} the attacking Pokemon
       * @param move {@linkcode Move} the attacking move
       * @param cancelled N/A
       * @param args [0] {@linkcode Utils.NumberHolder} gets set to 0 if move is immuned by an ability.
       * @param args [1] {@linkcode Utils.NumberHolder} type of move being defended against in case it has changed from default type
       */
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      getCondition(): AbAttrCondition;
  }
  export declare class TypeImmunityHealAbAttr extends TypeImmunityAbAttr {
      constructor(immuneType: PokeRogue.data.Type);
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class NonSuperEffectiveImmunityAbAttr extends TypeImmunityAbAttr {
      constructor(condition?: AbAttrCondition);
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class PostDefendAbAttr extends AbAttr {
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PostDefendDisguiseAbAttr extends PostDefendAbAttr {
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostDefendFormChangeAbAttr extends PostDefendAbAttr {
      public formFunc;
      constructor(formFunc: ((p: PokeRogue.field.Pokemon) => integer));
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class FieldPriorityMoveImmunityAbAttr extends PreDefendAbAttr {
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class PostStatChangeAbAttr extends AbAttr {
      applyPostStatChange(pokemon: PokeRogue.field.Pokemon, statsChanged: PokeRogue.data.BattleStat[], levelChanged: integer, selfTarget: boolean, args: any[]): boolean | Promise<boolean>;
  }
  export declare class MoveImmunityAbAttr extends PreDefendAbAttr {
      public immuneCondition;
      constructor(immuneCondition: PreDefendAbAttrCondition);
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  /**
   * Reduces the accuracy of status moves used against the Pokémon with this ability to 50%.
   * Used by Wonder Skin.
   *
   * @extends PreDefendAbAttr
   */
  export declare class WonderSkinAbAttr extends PreDefendAbAttr {
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class MoveImmunityStatChangeAbAttr extends MoveImmunityAbAttr {
      public stat;
      public levels;
      constructor(immuneCondition: PreDefendAbAttrCondition, stat: PokeRogue.data.BattleStat, levels: integer);
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * Class for abilities that make drain moves deal damage to user instead of healing them.
   * @extends PostDefendAbAttr
   * @see {@linkcode applyPostDefend}
   */
  export declare class ReverseDrainAbAttr extends PostDefendAbAttr {
      /**
       * Determines if a damage and draining move was used to check if this ability should stop the healing.
       * Examples include: Absorb, Draining Kiss, Bitter Blade, etc.
       * Also displays a message to show this ability was activated.
       * @param pokemon {@linkcode Pokemon} with this ability
       * @param passive N/A
       * @param attacker {@linkcode Pokemon} that is attacking this Pokemon
       * @param move {@linkcode PokemonMove} that is being used
       * @param hitResult N/A
       * @args N/A
       * @returns true if healing should be reversed on a healing move, false otherwise.
       */
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostDefendStatChangeAbAttr extends PostDefendAbAttr {
      public condition;
      public stat;
      public levels;
      public selfTarget;
      public allOthers;
      constructor(condition: PokemonDefendCondition, stat: PokeRogue.data.BattleStat, levels: integer, selfTarget?: boolean, allOthers?: boolean);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostDefendHpGatedStatChangeAbAttr extends PostDefendAbAttr {
      public condition;
      public hpGate;
      public stats;
      public levels;
      public selfTarget;
      constructor(condition: PokemonDefendCondition, hpGate: number, stats: PokeRogue.data.BattleStat[], levels: integer, selfTarget?: boolean);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostDefendApplyArenaTrapTagAbAttr extends PostDefendAbAttr {
      public condition;
      public tagType;
      constructor(condition: PokemonDefendCondition, tagType: PokeRogue.enums.ArenaTagType);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostDefendApplyBattlerTagAbAttr extends PostDefendAbAttr {
      public condition;
      public tagType;
      constructor(condition: PokemonDefendCondition, tagType: PokeRogue.enums.BattlerTagType);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostDefendTypeChangeAbAttr extends PostDefendAbAttr {
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class PostDefendTerrainChangeAbAttr extends PostDefendAbAttr {
      public terrainType;
      constructor(terrainType: PokeRogue.data.TerrainType);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostDefendContactApplyStatusEffectAbAttr extends PostDefendAbAttr {
      public chance;
      public effects;
      constructor(chance: integer, ...effects: PokeRogue.data.StatusEffect[]);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class EffectSporeAbAttr extends PostDefendContactApplyStatusEffectAbAttr {
      constructor();
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostDefendContactApplyTagChanceAbAttr extends PostDefendAbAttr {
      public chance;
      public tagType;
      public turnCount;
      constructor(chance: integer, tagType: PokeRogue.enums.BattlerTagType, turnCount?: integer);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostDefendCritStatChangeAbAttr extends PostDefendAbAttr {
      public stat;
      public levels;
      constructor(stat: PokeRogue.data.BattleStat, levels: integer);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
      getCondition(): AbAttrCondition;
  }
  export declare class PostDefendContactDamageAbAttr extends PostDefendAbAttr {
      public damageRatio;
      constructor(damageRatio: integer);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  /**
   * @description: This ability applies the Perish Song tag to the attacking pokemon
   * and the defending pokemon if the move makes physical contact and neither pokemon
   * already has the Perish Song tag.
   * @class PostDefendPerishSongAbAttr
   * @extends {PostDefendAbAttr}
   */
  export declare class PostDefendPerishSongAbAttr extends PostDefendAbAttr {
      public turns;
      constructor(turns: integer);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class PostDefendWeatherChangeAbAttr extends PostDefendAbAttr {
      public weatherType;
      constructor(weatherType: PokeRogue.data.WeatherType);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostDefendAbilitySwapAbAttr extends PostDefendAbAttr {
      constructor();
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class PostDefendAbilityGiveAbAttr extends PostDefendAbAttr {
      public ability;
      constructor(ability: PokeRogue.enums.Abilities);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class PostDefendMoveDisableAbAttr extends PostDefendAbAttr {
      public chance;
      public attacker;
      public move;
      constructor(chance: integer);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class PostStatChangeStatChangeAbAttr extends PostStatChangeAbAttr {
      public condition;
      public statsToChange;
      public levels;
      constructor(condition: PokemonStatChangeCondition, statsToChange: PokeRogue.data.BattleStat[], levels: integer);
      applyPostStatChange(pokemon: PokeRogue.field.Pokemon, statsChanged: PokeRogue.data.BattleStat[], levelsChanged: integer, selfTarget: boolean, args: any[]): boolean;
  }
  export declare class PreAttackAbAttr extends AbAttr {
      applyPreAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * Modifies moves additional effects with multipliers, ie. Sheer Force, Serene Grace.
   * @extends AbAttr
   * @see {@linkcode apply}
   */
  export declare class MoveEffectChanceMultiplierAbAttr extends AbAttr {
      public chanceMultiplier;
      constructor(chanceMultiplier?: number);
      /**
       * @param args [0]: {@linkcode Utils.NumberHolder} Move additional effect chance. Has to be higher than or equal to 0.
       *             [1]: {@linkcode Moves } Move used by the ability user.
       */
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * Sets incoming moves additional effect chance to zero, ignoring all effects from moves. ie. Shield Dust.
   * @extends PreDefendAbAttr
   * @see {@linkcode applyPreDefend}
   */
  export declare class IgnoreMoveEffectsAbAttr extends PreDefendAbAttr {
      /**
       * @param args [0]: {@linkcode Utils.NumberHolder} Move additional effect chance.
       */
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class VariableMovePowerAbAttr extends PreAttackAbAttr {
      applyPreAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, args: any[]): boolean;
  }
  export declare class FieldPreventExplosiveMovesAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * Multiplies a BattleStat if the checked Pokemon lacks this ability.
   * If this ability cannot stack, a BooleanHolder can be used to prevent this from stacking.
   * @see {@link applyFieldBattleStatMultiplierAbAttrs}
   * @see {@link applyFieldBattleStat}
   * @see {@link Utils.BooleanHolder}
   */
  export declare class FieldMultiplyBattleStatAbAttr extends AbAttr {
      public stat;
      public multiplier;
      public canStack;
      constructor(stat: PokeRogue.data.Stat, multiplier: number, canStack?: boolean);
      /**
       * applyFieldBattleStat: Tries to multiply a Pokemon's BattleStat
       * @param pokemon {@linkcode Pokemon} the Pokemon using this ability
       * @param passive {@linkcode boolean} unused
       * @param stat {@linkcode Stat} the type of the checked stat
       * @param statValue {@linkcode Utils.NumberHolder} the value of the checked stat
       * @param checkedPokemon {@linkcode Pokemon} the Pokemon this ability is targeting
       * @param hasApplied {@linkcode Utils.BooleanHolder} whether or not another multiplier has been applied to this stat
       * @param args {any[]} unused
       * @returns true if this changed the checked stat, false otherwise.
       */
      applyFieldBattleStat(pokemon: PokeRogue.field.Pokemon, passive: boolean, stat: PokeRogue.data.Stat, statValue: Utils.NumberHolder, checkedPokemon: PokeRogue.field.Pokemon, hasApplied: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class MoveTypeChangeAttr extends PreAttackAbAttr {
      public newType;
      public powerMultiplier;
      public condition?;
      constructor(newType: PokeRogue.data.Type, powerMultiplier: number, condition?: PokemonAttackCondition);
      applyPreAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, args: any[]): boolean;
  }
  /** Ability attribute for changing a pokemon's type before using a move */
  export declare class PokemonTypeChangeAbAttr extends PreAttackAbAttr {
      public moveType;
      constructor();
      applyPreAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  /**
   * Class for abilities that convert single-strike moves to two-strike moves (i.e. Parental Bond).
   * @param damageMultiplier the damage multiplier for the second strike, relative to the first.
   */
  export declare class AddSecondStrikeAbAttr extends PreAttackAbAttr {
      public damageMultiplier;
      constructor(damageMultiplier: number);
      /**
       * Determines whether this attribute can apply to a given move.
       * @param {Move} move the move to which this attribute may apply
       * @param numTargets the number of {@linkcode Pokemon} targeted by this move
       * @returns true if the attribute can apply to the move, false otherwise
       */
      canApplyPreAttack(move: PokeRogue.data.Move, numTargets: integer): boolean;
      /**
       * If conditions are met, this doubles the move's hit count (via args[1])
       * or multiplies the damage of secondary strikes (via args[2])
       * @param {Pokemon} pokemon the Pokemon using the move
       * @param passive n/a
       * @param defender n/a
       * @param {Move} move the move used by the ability source
       * @param args\[0\] the number of Pokemon this move is targeting
       * @param {Utils.IntegerHolder} args\[1\] the number of strikes with this move
       * @param {Utils.NumberHolder} args\[2\] the damage multiplier for the current strike
       * @returns
       */
      applyPreAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, args: any[]): boolean;
  }
  /**
   * Class for abilities that boost the damage of moves
   * For abilities that boost the base power of moves, see VariableMovePowerAbAttr
   * @param damageMultiplier the amount to multiply the damage by
   * @param condition the condition for this ability to be applied
   */
  export declare class DamageBoostAbAttr extends PreAttackAbAttr {
      public damageMultiplier;
      public condition;
      constructor(damageMultiplier: number, condition: PokemonAttackCondition);
      /**
       *
       * @param pokemon the attacker pokemon
       * @param passive N/A
       * @param defender the target pokemon
       * @param move the move used by the attacker pokemon
       * @param args Utils.NumberHolder as damage
       * @returns true if the function succeeds
       */
      applyPreAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, args: any[]): boolean;
  }
  export declare class MovePowerBoostAbAttr extends VariableMovePowerAbAttr {
      public condition;
      public powerMultiplier;
      constructor(condition: PokemonAttackCondition, powerMultiplier: number, showAbility?: boolean);
      applyPreAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, args: any[]): boolean;
  }
  export declare class MoveTypePowerBoostAbAttr extends MovePowerBoostAbAttr {
      constructor(boostedType: PokeRogue.data.Type, powerMultiplier?: number);
  }
  export declare class LowHpMoveTypePowerBoostAbAttr extends MoveTypePowerBoostAbAttr {
      constructor(boostedType: PokeRogue.data.Type);
      getCondition(): AbAttrCondition;
  }
  /**
   * Abilities which cause a variable amount of power increase.
   * @extends VariableMovePowerAbAttr
   * @see {@link applyPreAttack}
   */
  export declare class VariableMovePowerBoostAbAttr extends VariableMovePowerAbAttr {
      public mult;
      /**
       * @param mult A function which takes the user, target, and move, and returns the power multiplier. 1 means no multiplier.
       * @param {boolean} showAbility Whether to show the ability when it activates.
       */
      constructor(mult: (user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: PokeRogue.data.Move) => number, showAbility?: boolean);
      /**
       * @override
       */
      applyPreAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, defender: PokeRogue.field.Pokemon, move: any, args: any[]): boolean;
  }
  /**
   * Boosts the power of a Pokémon's move under certain conditions.
   * @extends AbAttr
   */
  export declare class FieldMovePowerBoostAbAttr extends AbAttr {
      public condition;
      public powerMultiplier;
      /**
       * @param condition - A function that determines whether the power boost condition is met.
       * @param powerMultiplier - The multiplier to apply to the move's power when the condition is met.
       */
      constructor(condition: PokemonAttackCondition, powerMultiplier: number);
      applyPreAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, args: any[]): boolean;
  }
  /**
   * Boosts the power of a specific type of move.
   * @extends FieldMovePowerBoostAbAttr
   */
  export declare class PreAttackFieldMoveTypePowerBoostAbAttr extends FieldMovePowerBoostAbAttr {
      /**
       * @param boostedType - The type of move that will receive the power boost.
       * @param powerMultiplier - The multiplier to apply to the move's power, defaults to 1.5 if not provided.
       */
      constructor(boostedType: PokeRogue.data.Type, powerMultiplier?: number);
  }
  /**
   * Boosts the power of a specific type of move for all Pokemon in the field.
   * @extends PreAttackFieldMoveTypePowerBoostAbAttr
   */
  export declare class FieldMoveTypePowerBoostAbAttr extends PreAttackFieldMoveTypePowerBoostAbAttr {
  }
  /**
   * Boosts the power of a specific type of move for the user and its allies.
   * @extends PreAttackFieldMoveTypePowerBoostAbAttr
   */
  export declare class UserFieldMoveTypePowerBoostAbAttr extends PreAttackFieldMoveTypePowerBoostAbAttr {
  }
  /**
   * Boosts the power of moves in specified categories.
   * @extends FieldMovePowerBoostAbAttr
   */
  export declare class AllyMoveCategoryPowerBoostAbAttr extends FieldMovePowerBoostAbAttr {
      /**
       * @param boostedCategories - The categories of moves that will receive the power boost.
       * @param powerMultiplier - The multiplier to apply to the move's power.
       */
      constructor(boostedCategories: PokeRogue.data.MoveCategory[], powerMultiplier: number);
  }
  export declare class BattleStatMultiplierAbAttr extends AbAttr {
      public battleStat;
      public multiplier;
      public condition;
      constructor(battleStat: PokeRogue.data.BattleStat, multiplier: number, condition?: PokemonAttackCondition);
      applyBattleStat(pokemon: PokeRogue.field.Pokemon, passive: boolean, battleStat: PokeRogue.data.BattleStat, statValue: Utils.NumberHolder, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PostAttackAbAttr extends AbAttr {
      applyPostAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PostAttackStealHeldItemAbAttr extends PostAttackAbAttr {
      public condition;
      constructor(condition?: PokemonAttackCondition);
      applyPostAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): Promise<boolean>;
      getTargetHeldItems(target: PokeRogue.field.Pokemon): PokemonHeldItemModifier[];
  }
  export declare class PostAttackApplyStatusEffectAbAttr extends PostAttackAbAttr {
      public contactRequired;
      public chance;
      public effects;
      constructor(contactRequired: boolean, chance: integer, ...effects: PokeRogue.data.StatusEffect[]);
      applyPostAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostAttackContactApplyStatusEffectAbAttr extends PostAttackApplyStatusEffectAbAttr {
      constructor(chance: integer, ...effects: PokeRogue.data.StatusEffect[]);
  }
  export declare class PostAttackApplyBattlerTagAbAttr extends PostAttackAbAttr {
      public contactRequired;
      public chance;
      public effects;
      constructor(contactRequired: boolean, chance: (user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: PokeRogue.data.Move) => integer, ...effects: PokeRogue.enums.BattlerTagType[]);
      applyPostAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostDefendStealHeldItemAbAttr extends PostDefendAbAttr {
      public condition;
      constructor(condition?: PokemonDefendCondition);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): Promise<boolean>;
      getTargetHeldItems(target: PokeRogue.field.Pokemon): PokemonHeldItemModifier[];
  }
  export declare class PostVictoryAbAttr extends AbAttr {
      applyPostVictory(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PostVictoryFormChangeAbAttr extends PostVictoryAbAttr {
      public formFunc;
      constructor(formFunc: ((p: PokeRogue.field.Pokemon) => integer));
      applyPostVictory(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PostKnockOutAbAttr extends AbAttr {
      applyPostKnockOut(pokemon: PokeRogue.field.Pokemon, passive: boolean, knockedOut: PokeRogue.field.Pokemon, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PostKnockOutStatChangeAbAttr extends PostKnockOutAbAttr {
      public stat;
      public levels;
      constructor(stat: PokeRogue.data.BattleStat | ((p: PokeRogue.field.Pokemon) => BattleStat), levels: integer);
      applyPostKnockOut(pokemon: PokeRogue.field.Pokemon, passive: boolean, knockedOut: PokeRogue.field.Pokemon, args: any[]): boolean | Promise<boolean>;
  }
  export declare class CopyFaintedAllyAbilityAbAttr extends PostKnockOutAbAttr {
      constructor();
      applyPostKnockOut(pokemon: PokeRogue.field.Pokemon, passive: boolean, knockedOut: PokeRogue.field.Pokemon, args: any[]): boolean | Promise<boolean>;
  }
  export declare class IgnoreOpponentStatChangesAbAttr extends AbAttr {
      constructor();
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * Ignores opponent's evasion stat changes when determining if a move hits or not
   * @extends AbAttr
   * @see {@linkcode apply}
   */
  export declare class IgnoreOpponentEvasionAbAttr extends AbAttr {
      constructor();
      /**
       * Checks if enemy Pokemon is trapped by an Arena Trap-esque ability
       * @param pokemon N/A
       * @param passive N/A
       * @param cancelled N/A
       * @param args [0] {@linkcode Utils.IntegerHolder} of BattleStat.EVA
       * @returns if evasion level was successfully considered as 0
       */
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class IntimidateImmunityAbAttr extends AbAttr {
      constructor();
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class PostIntimidateStatChangeAbAttr extends AbAttr {
      public stats;
      public levels;
      public overwrites;
      constructor(stats: PokeRogue.data.BattleStat[], levels: integer, overwrites?: boolean);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * Base class for defining all {@linkcode Ability} Attributes post summon
   * @see {@linkcode applyPostSummon()}
   */
  export declare class PostSummonAbAttr extends AbAttr {
      /**
       * Applies ability post summon (after switching in)
       * @param pokemon {@linkcode Pokemon} with this ability
       * @param passive Whether this ability is a passive
       * @param args Set of unique arguments needed by this attribute
       * @returns true if application of the ability succeeds
       */
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * Removes specified arena tags when a Pokemon is summoned.
   */
  export declare class PostSummonRemoveArenaTagAbAttr extends PostSummonAbAttr {
      public arenaTags;
      /**
       * @param arenaTags {@linkcode ArenaTagType[]} - the arena tags to be removed
       */
      constructor(arenaTags: PokeRogue.enums.ArenaTagType[]);
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PostSummonMessageAbAttr extends PostSummonAbAttr {
      public messageFunc;
      constructor(messageFunc: (pokemon: PokeRogue.field.Pokemon) => string);
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  export declare class PostSummonUnnamedMessageAbAttr extends PostSummonAbAttr {
      public message;
      constructor(message: string);
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  export declare class PostSummonAddBattlerTagAbAttr extends PostSummonAbAttr {
      public tagType;
      public turnCount;
      constructor(tagType: PokeRogue.enums.BattlerTagType, turnCount: integer, showAbility?: boolean);
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  export declare class PostSummonStatChangeAbAttr extends PostSummonAbAttr {
      public stats;
      public levels;
      public selfTarget;
      public intimidate;
      constructor(stats: PokeRogue.data.BattleStat | BattleStat[], levels: integer, selfTarget?: boolean, intimidate?: boolean);
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  export declare class PostSummonAllyHealAbAttr extends PostSummonAbAttr {
      public healRatio;
      public showAnim;
      constructor(healRatio: number, showAnim?: boolean);
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  /**
   * Resets an ally's temporary stat boots to zero with no regard to
   * whether this is a positive or negative change
   * @param pokemon The {@link Pokemon} with this {@link AbAttr}
   * @param passive N/A
   * @param args N/A
   * @returns if the move was successful
   */
  export declare class PostSummonClearAllyStatsAbAttr extends PostSummonAbAttr {
      constructor();
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  /**
   * Download raises either the Attack stat or Special Attack stat by one stage depending on the foe's currently lowest defensive stat:
   * it will raise Attack if the foe's current Defense is lower than its current Special Defense stat;
   * otherwise, it will raise Special Attack.
   * @extends PostSummonAbAttr
   * @see {applyPostSummon}
   */
  export declare class DownloadAbAttr extends PostSummonAbAttr {
      public enemyDef;
      public enemySpDef;
      public enemyCountTally;
      public stats;
      /**
       * Checks to see if it is the opening turn (starting a new game), if so, Download won't work. This is because Download takes into account
       * vitamins and items, so it needs to use the BattleStat and the stat alone.
       * @param {Pokemon} pokemon Pokemon that is using the move, as well as seeing the opposing pokemon.
       * @param {boolean} passive N/A
       * @param {any[]} args N/A
       * @returns Returns true if ability is used successful, false if not.
       */
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  export declare class PostSummonWeatherChangeAbAttr extends PostSummonAbAttr {
      public weatherType;
      constructor(weatherType: PokeRogue.data.WeatherType);
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  export declare class PostSummonTerrainChangeAbAttr extends PostSummonAbAttr {
      public terrainType;
      constructor(terrainType: PokeRogue.data.TerrainType);
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  export declare class PostSummonFormChangeAbAttr extends PostSummonAbAttr {
      public formFunc;
      constructor(formFunc: ((p: PokeRogue.field.Pokemon) => integer));
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  /** Attempts to copy a pokemon's ability */
  export declare class PostSummonCopyAbilityAbAttr extends PostSummonAbAttr {
      public target;
      public targetAbilityName;
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  /** Attempt to copy the stat changes on an ally pokemon */
  export declare class PostSummonCopyAllyStatsAbAttr extends PostSummonAbAttr {
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class PostSummonTransformAbAttr extends PostSummonAbAttr {
      constructor();
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  export declare class PreSwitchOutAbAttr extends AbAttr {
      constructor();
      applyPreSwitchOut(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PreSwitchOutResetStatusAbAttr extends PreSwitchOutAbAttr {
      applyPreSwitchOut(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * Clears Desolate Land/Primordial Sea/Delta Stream upon the Pokemon switching out.
   */
  export declare class PreSwitchOutClearWeatherAbAttr extends PreSwitchOutAbAttr {
      /**
       * @param pokemon The {@linkcode Pokemon} with the ability
       * @param passive N/A
       * @param args N/A
       * @returns {boolean} Returns true if the weather clears, otherwise false.
       */
      applyPreSwitchOut(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PreSwitchOutHealAbAttr extends PreSwitchOutAbAttr {
      applyPreSwitchOut(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * Attribute for form changes that occur on switching out
   * @extends PreSwitchOutAbAttr
   * @see {@linkcode applyPreSwitchOut}
   */
  export declare class PreSwitchOutFormChangeAbAttr extends PreSwitchOutAbAttr {
      public formFunc;
      constructor(formFunc: ((p: PokeRogue.field.Pokemon) => integer));
      /**
       * On switch out, trigger the form change to the one defined in the ability
       * @param pokemon The pokemon switching out and changing form {@linkcode Pokemon}
       * @param passive N/A
       * @param args N/A
       * @returns true if the form change was successful
       */
      applyPreSwitchOut(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PreStatChangeAbAttr extends AbAttr {
      applyPreStatChange(pokemon: PokeRogue.field.Pokemon, passive: boolean, stat: PokeRogue.data.BattleStat, cancelled: Utils.BooleanHolder, args: any[]): boolean | Promise<boolean>;
  }
  export declare class ProtectStatAbAttr extends PreStatChangeAbAttr {
      public protectedStat;
      constructor(protectedStat?: BattleStat);
      applyPreStatChange(pokemon: PokeRogue.field.Pokemon, passive: boolean, stat: PokeRogue.data.BattleStat, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  /**
   * This attribute applies confusion to the target whenever the user
   * directly poisons them with a move, e.g. Poison Puppeteer.
   * Called in {@linkcode StatusEffectAttr}.
   * @extends PostAttackAbAttr
   * @see {@linkcode applyPostAttack}
   */
  export declare class ConfusionOnStatusEffectAbAttr extends PostAttackAbAttr {
      /** List of effects to apply confusion after */
      public effects;
      constructor(...effects: PokeRogue.data.StatusEffect[]);
      /**
       * Applies confusion to the target pokemon.
       * @param pokemon {@link Pokemon} attacking
       * @param passive N/A
       * @param defender {@link Pokemon} defending
       * @param move {@link Move} used to apply status effect and confusion
       * @param hitResult N/A
       * @param args [0] {@linkcode StatusEffect} applied by move
       * @returns true if defender is confused
       */
      applyPostAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PreSetStatusAbAttr extends AbAttr {
      applyPreSetStatus(pokemon: PokeRogue.field.Pokemon, passive: boolean, effect: PokeRogue.data.StatusEffect, cancelled: Utils.BooleanHolder, args: any[]): boolean | Promise<boolean>;
  }
  export declare class StatusEffectImmunityAbAttr extends PreSetStatusAbAttr {
      public immuneEffects;
      constructor(...immuneEffects: PokeRogue.data.StatusEffect[]);
      applyPreSetStatus(pokemon: PokeRogue.field.Pokemon, passive: boolean, effect: PokeRogue.data.StatusEffect, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class PreApplyBattlerTagAbAttr extends AbAttr {
      applyPreApplyBattlerTag(pokemon: PokeRogue.field.Pokemon, passive: boolean, tag: PokeRogue.data.BattlerTag, cancelled: Utils.BooleanHolder, args: any[]): boolean | Promise<boolean>;
  }
  export declare class BattlerTagImmunityAbAttr extends PreApplyBattlerTagAbAttr {
      public immuneTagType;
      constructor(immuneTagType: PokeRogue.enums.BattlerTagType);
      applyPreApplyBattlerTag(pokemon: PokeRogue.field.Pokemon, passive: boolean, tag: PokeRogue.data.BattlerTag, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class BlockCritAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class BonusCritAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class MultCritAbAttr extends AbAttr {
      multAmount: number;
      constructor(multAmount: number);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * Guarantees a critical hit according to the given condition, except if target prevents critical hits. ie. Merciless
   * @extends AbAttr
   * @see {@linkcode apply}
   */
  export declare class ConditionalCritAbAttr extends AbAttr {
      public condition;
      constructor(condition: PokemonAttackCondition, checkUser?: Boolean);
      /**
       * @param pokemon {@linkcode Pokemon} user.
       * @param args [0] {@linkcode Utils.BooleanHolder} If true critical hit is guaranteed.
       *             [1] {@linkcode Pokemon} Target.
       *             [2] {@linkcode Move} used by ability user.
       */
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class BlockNonDirectDamageAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * This attribute will block any status damage that you put in the parameter.
   */
  export declare class BlockStatusDamageAbAttr extends AbAttr {
      public effects;
      /**
       * @param {StatusEffect[]} effects The status effect(s) that will be blocked from damaging the ability pokemon
       */
      constructor(...effects: PokeRogue.data.StatusEffect[]);
      /**
       * @param {Pokemon} pokemon The pokemon with the ability
       * @param {boolean} passive N/A
       * @param {Utils.BooleanHolder} cancelled Whether to cancel the status damage
       * @param {any[]} args N/A
       * @returns Returns true if status damage is blocked
       */
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class BlockOneHitKOAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class IncrementMovePriorityAbAttr extends AbAttr {
      public moveIncrementFunc;
      public increaseAmount;
      constructor(moveIncrementFunc: (pokemon: PokeRogue.field.Pokemon, move: PokeRogue.data.Move) => boolean, increaseAmount?: number);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class IgnoreContactAbAttr extends AbAttr {
  }
  export declare class PreWeatherEffectAbAttr extends AbAttr {
      applyPreWeatherEffect(pokemon: PokeRogue.field.Pokemon, passive: boolean, weather: PokeRogue.data.Weather, cancelled: Utils.BooleanHolder, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PreWeatherDamageAbAttr extends PreWeatherEffectAbAttr {
  }
  export declare class BlockWeatherDamageAttr extends PreWeatherDamageAbAttr {
      public weatherTypes;
      constructor(...weatherTypes: PokeRogue.data.WeatherType[]);
      applyPreWeatherEffect(pokemon: PokeRogue.field.Pokemon, passive: boolean, weather: PokeRogue.data.Weather, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class SuppressWeatherEffectAbAttr extends PreWeatherEffectAbAttr {
      affectsImmutable: boolean;
      constructor(affectsImmutable?: boolean);
      applyPreWeatherEffect(pokemon: PokeRogue.field.Pokemon, passive: boolean, weather: PokeRogue.data.Weather, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class ForewarnAbAttr extends PostSummonAbAttr {
      constructor();
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  export declare class FriskAbAttr extends PostSummonAbAttr {
      constructor();
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  export declare class PostWeatherChangeAbAttr extends AbAttr {
      applyPostWeatherChange(pokemon: PokeRogue.field.Pokemon, passive: boolean, weather: PokeRogue.data.WeatherType, args: any[]): boolean;
  }
  export declare class PostWeatherChangeAddBattlerTagAttr extends PostWeatherChangeAbAttr {
      public tagType;
      public turnCount;
      public weatherTypes;
      constructor(tagType: PokeRogue.enums.BattlerTagType, turnCount: integer, ...weatherTypes: PokeRogue.data.WeatherType[]);
      applyPostWeatherChange(pokemon: PokeRogue.field.Pokemon, passive: boolean, weather: PokeRogue.data.WeatherType, args: any[]): boolean;
  }
  export declare class PostWeatherLapseAbAttr extends AbAttr {
      protected weatherTypes: PokeRogue.data.WeatherType[];
      constructor(...weatherTypes: PokeRogue.data.WeatherType[]);
      applyPostWeatherLapse(pokemon: PokeRogue.field.Pokemon, passive: boolean, weather: PokeRogue.data.Weather, args: any[]): boolean | Promise<boolean>;
      getCondition(): AbAttrCondition;
  }
  export declare class PostWeatherLapseHealAbAttr extends PostWeatherLapseAbAttr {
      public healFactor;
      constructor(healFactor: integer, ...weatherTypes: PokeRogue.data.WeatherType[]);
      applyPostWeatherLapse(pokemon: PokeRogue.field.Pokemon, passive: boolean, weather: PokeRogue.data.Weather, args: any[]): boolean;
  }
  export declare class PostWeatherLapseDamageAbAttr extends PostWeatherLapseAbAttr {
      public damageFactor;
      constructor(damageFactor: integer, ...weatherTypes: PokeRogue.data.WeatherType[]);
      applyPostWeatherLapse(pokemon: PokeRogue.field.Pokemon, passive: boolean, weather: PokeRogue.data.Weather, args: any[]): boolean;
  }
  export declare class PostTerrainChangeAbAttr extends AbAttr {
      applyPostTerrainChange(pokemon: PokeRogue.field.Pokemon, passive: boolean, terrain: PokeRogue.data.TerrainType, args: any[]): boolean;
  }
  export declare class PostTerrainChangeAddBattlerTagAttr extends PostTerrainChangeAbAttr {
      public tagType;
      public turnCount;
      public terrainTypes;
      constructor(tagType: PokeRogue.enums.BattlerTagType, turnCount: integer, ...terrainTypes: PokeRogue.data.TerrainType[]);
      applyPostTerrainChange(pokemon: PokeRogue.field.Pokemon, passive: boolean, terrain: PokeRogue.data.TerrainType, args: any[]): boolean;
  }
  export declare class PostTurnAbAttr extends AbAttr {
      applyPostTurn(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * This attribute will heal 1/8th HP if the ability pokemon has the correct status.
   */
  export declare class PostTurnStatusHealAbAttr extends PostTurnAbAttr {
      public effects;
      /**
       * @param {StatusEffect[]} effects The status effect(s) that will qualify healing the ability pokemon
       */
      constructor(...effects: PokeRogue.data.StatusEffect[]);
      /**
       * @param {Pokemon} pokemon The pokemon with the ability that will receive the healing
       * @param {Boolean} passive N/A
       * @param {any[]} args N/A
       * @returns Returns true if healed from status, false if not
       */
      applyPostTurn(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * After the turn ends, resets the status of either the ability holder or their ally
   * @param {boolean} allyTarget Whether to target ally, defaults to false (self-target)
   */
  export declare class PostTurnResetStatusAbAttr extends PostTurnAbAttr {
      public allyTarget;
      public target;
      constructor(allyTarget?: boolean);
      applyPostTurn(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  /**
   * After the turn ends, try to create an extra item
   */
  export declare class PostTurnLootAbAttr extends PostTurnAbAttr {
      /** Extend itemType to add more options */
      public itemType;
      public procChance;
      /**
       * @param itemType - The type of item to create
       * @param procChance - Chance to create an item
       * @see {@linkcode applyPostTurn()}
       */
      constructor(
      /** Extend itemType to add more options */
      itemType: "EATEN_BERRIES" | "HELD_BERRIES", procChance: (pokemon: PokeRogue.field.Pokemon) => number);
      applyPostTurn(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
      /**
       * Create a new berry chosen randomly from the berries the pokemon ate this battle
       * @param pokemon The pokemon with this ability
       * @returns whether a new berry was created
       */
      createEatenBerry(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  export declare class MoodyAbAttr extends PostTurnAbAttr {
      constructor();
      applyPostTurn(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  export declare class PostTurnStatChangeAbAttr extends PostTurnAbAttr {
      public stats;
      public levels;
      constructor(stats: PokeRogue.data.BattleStat | BattleStat[], levels: integer);
      applyPostTurn(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  export declare class PostTurnHealAbAttr extends PostTurnAbAttr {
      applyPostTurn(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  export declare class PostTurnFormChangeAbAttr extends PostTurnAbAttr {
      public formFunc;
      constructor(formFunc: ((p: PokeRogue.field.Pokemon) => integer));
      applyPostTurn(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  /**
   * Attribute used for abilities (Bad Dreams) that damages the opponents for being asleep
   */
  export declare class PostTurnHurtIfSleepingAbAttr extends PostTurnAbAttr {
      /**
       * Deals damage to all sleeping opponents equal to 1/8 of their max hp (min 1)
       * @param {Pokemon} pokemon Pokemon that has this ability
       * @param {boolean} passive N/A
       * @param {any[]} args N/A
       * @returns {boolean} true if any opponents are sleeping
       */
      applyPostTurn(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * Grabs the last failed Pokeball used
   * @extends PostTurnAbAttr
   * @see {@linkcode applyPostTurn} */
  export declare class FetchBallAbAttr extends PostTurnAbAttr {
      constructor();
      /**
       * Adds the last used Pokeball back into the player's inventory
       * @param pokemon {@linkcode Pokemon} with this ability
       * @param passive N/A
       * @param args N/A
       * @returns true if player has used a pokeball and this pokemon is owned by the player
       */
      applyPostTurn(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  export declare class PostBiomeChangeAbAttr extends AbAttr {
  }
  export declare class PostBiomeChangeWeatherChangeAbAttr extends PostBiomeChangeAbAttr {
      public weatherType;
      constructor(weatherType: PokeRogue.data.WeatherType);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class PostBiomeChangeTerrainChangeAbAttr extends PostBiomeChangeAbAttr {
      public terrainType;
      constructor(terrainType: PokeRogue.data.TerrainType);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * Triggers just after a move is used either by the opponent or the player
   * @extends AbAttr
   */
  export declare class PostMoveUsedAbAttr extends AbAttr {
      applyPostMoveUsed(pokemon: PokeRogue.field.Pokemon, move: PokeRogue.field.PokemonMove, source: PokeRogue.field.Pokemon, targets: PokeRogue.BattlerIndex[], args: any[]): boolean | Promise<boolean>;
  }
  /**
   * Triggers after a dance move is used either by the opponent or the player
   * @extends PostMoveUsedAbAttr
   */
  export declare class PostDancingMoveAbAttr extends PostMoveUsedAbAttr {
      /**
       * Resolves the Dancer ability by replicating the move used by the source of the dance
       * either on the source itself or on the target of the dance
       * @param dancer {@linkcode Pokemon} with Dancer ability
       * @param move {@linkcode PokemonMove} Dancing move used by the source
       * @param source {@linkcode Pokemon} that used the dancing move
       * @param targets {@linkcode BattlerIndex}Targets of the dancing move
       * @param args N/A
       *
       * @return true if the Dancer ability was resolved
       */
      applyPostMoveUsed(dancer: PokeRogue.field.Pokemon, move: PokeRogue.field.PokemonMove, source: PokeRogue.field.Pokemon, targets: PokeRogue.BattlerIndex[], args: any[]): boolean | Promise<boolean>;
      /**
       * Get the correct targets of Dancer ability
       *
       * @param dancer {@linkcode Pokemon} Pokemon with Dancer ability
       * @param source {@linkcode Pokemon} Source of the dancing move
       * @param targets {@linkcode BattlerIndex} Targets of the dancing move
       */
      getTarget(dancer: PokeRogue.field.Pokemon, source: PokeRogue.field.Pokemon, targets: PokeRogue.BattlerIndex[]): BattlerIndex[];
  }
  export declare class StatChangeMultiplierAbAttr extends AbAttr {
      public multiplier;
      constructor(multiplier: integer);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class StatChangeCopyAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean | Promise<boolean>;
  }
  export declare class BypassBurnDamageReductionAbAttr extends AbAttr {
      constructor();
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class DoubleBerryEffectAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class PreventBerryUseAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * A Pokemon with this ability heals by a percentage of their maximum hp after eating a berry
   * @param healPercent - Percent of Max HP to heal
   * @see {@linkcode apply()} for implementation
   */
  export declare class HealFromBerryUseAbAttr extends AbAttr {
      /** Percent of Max HP to heal */
      public healPercent;
      constructor(healPercent: number);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, ...args: [Utils.BooleanHolder, any[]]): boolean;
  }
  export declare class RunSuccessAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  type ArenaTrapCondition = (user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon) => boolean;
  /**
   * Base class for checking if a Pokemon is trapped by arena trap
   * @extends AbAttr
   * @field {@linkcode arenaTrapCondition} Conditional for trapping abilities.
   * For example, Magnet Pull will only activate if opponent is Steel type.
   * @see {@linkcode applyCheckTrapped}
   */
  export declare class CheckTrappedAbAttr extends AbAttr {
      protected arenaTrapCondition: ArenaTrapCondition;
      constructor(condition: ArenaTrapCondition);
      applyCheckTrapped(pokemon: PokeRogue.field.Pokemon, passive: boolean, trapped: Utils.BooleanHolder, otherPokemon: PokeRogue.field.Pokemon, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * Determines whether a Pokemon is blocked from switching/running away
   * because of a trapping ability or move.
   * @extends CheckTrappedAbAttr
   * @see {@linkcode applyCheckTrapped}
   */
  export declare class ArenaTrapAbAttr extends CheckTrappedAbAttr {
      /**
       * Checks if enemy Pokemon is trapped by an Arena Trap-esque ability
       * If the enemy is a Ghost type, it is not trapped
       * If the enemy has the ability Run Away, it is not trapped.
       * If the user has Magnet Pull and the enemy is not a Steel type, it is not trapped.
       * If the user has Arena Trap and the enemy is not grounded, it is not trapped.
       * @param pokemon The {@link Pokemon} with this {@link AbAttr}
       * @param passive N/A
       * @param trapped {@link Utils.BooleanHolder} indicating whether the other Pokemon is trapped or not
       * @param otherPokemon The {@link Pokemon} that is affected by an Arena Trap ability
       * @param args N/A
       * @returns if enemy Pokemon is trapped or not
       */
      applyCheckTrapped(pokemon: PokeRogue.field.Pokemon, passive: boolean, trapped: Utils.BooleanHolder, otherPokemon: PokeRogue.field.Pokemon, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class MaxMultiHitAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class PostBattleAbAttr extends AbAttr {
      constructor();
      applyPostBattle(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  export declare class PostBattleLootAbAttr extends PostBattleAbAttr {
      applyPostBattle(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  export declare class PostFaintAbAttr extends AbAttr {
      applyPostFaint(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  /**
   * Clears Desolate Land/Primordial Sea/Delta Stream upon the Pokemon fainting
   */
  export declare class PostFaintClearWeatherAbAttr extends PostFaintAbAttr {
      /**
       * @param pokemon The {@linkcode Pokemon} with the ability
       * @param passive N/A
       * @param attacker N/A
       * @param move N/A
       * @param hitResult N/A
       * @param args N/A
       * @returns {boolean} Returns true if the weather clears, otherwise false.
       */
      applyPostFaint(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostFaintContactDamageAbAttr extends PostFaintAbAttr {
      public damageRatio;
      constructor(damageRatio: integer);
      applyPostFaint(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  /**
   * Attribute used for abilities (Innards Out) that damage the opponent based on how much HP the last attack used to knock out the owner of the ability.
   */
  export declare class PostFaintHPDamageAbAttr extends PostFaintAbAttr {
      constructor();
      applyPostFaint(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class RedirectMoveAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      canRedirect(moveId: PokeRogue.enums.Moves): boolean;
  }
  export declare class RedirectTypeMoveAbAttr extends RedirectMoveAbAttr {
      type: PokeRogue.data.Type;
      constructor(type: PokeRogue.data.Type);
      canRedirect(moveId: PokeRogue.enums.Moves): boolean;
  }
  export declare class BlockRedirectAbAttr extends AbAttr {
  }
  export declare class ReduceStatusEffectDurationAbAttr extends AbAttr {
      public statusEffect;
      constructor(statusEffect: PokeRogue.data.StatusEffect);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class FlinchEffectAbAttr extends AbAttr {
      constructor();
  }
  export declare class FlinchStatChangeAbAttr extends FlinchEffectAbAttr {
      public stats;
      public levels;
      constructor(stats: PokeRogue.data.BattleStat | BattleStat[], levels: integer);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class IncreasePpAbAttr extends AbAttr {
  }
  export declare class ForceSwitchOutImmunityAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class ReduceBerryUseThresholdAbAttr extends AbAttr {
      constructor();
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class WeightMultiplierAbAttr extends AbAttr {
      public multiplier;
      constructor(multiplier: integer);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class SyncEncounterNatureAbAttr extends AbAttr {
      constructor();
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class MoveAbilityBypassAbAttr extends AbAttr {
      public moveIgnoreFunc;
      constructor(moveIgnoreFunc?: (pokemon: PokeRogue.field.Pokemon, move: PokeRogue.data.Move) => boolean);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class SuppressFieldAbilitiesAbAttr extends AbAttr {
      constructor();
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class AlwaysHitAbAttr extends AbAttr {
  }
  /** Attribute for abilities that allow moves that make contact to ignore protection (i.e. Unseen Fist) */
  export declare class IgnoreProtectOnContactAbAttr extends AbAttr {
  }
  export declare class UncopiableAbilityAbAttr extends AbAttr {
      constructor();
  }
  export declare class UnsuppressableAbilityAbAttr extends AbAttr {
      constructor();
  }
  export declare class UnswappableAbilityAbAttr extends AbAttr {
      constructor();
  }
  export declare class NoTransformAbilityAbAttr extends AbAttr {
      constructor();
  }
  export declare class NoFusionAbilityAbAttr extends AbAttr {
      constructor();
  }
  export declare class IgnoreTypeImmunityAbAttr extends AbAttr {
      public defenderType;
      public allowedMoveTypes;
      constructor(defenderType: PokeRogue.data.Type, allowedMoveTypes: PokeRogue.data.Type[]);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * Ignores the type immunity to Status Effects of the defender if the defender is of a certain type
   */
  export declare class IgnoreTypeStatusEffectImmunityAbAttr extends AbAttr {
      public statusEffect;
      public defenderType;
      constructor(statusEffect: PokeRogue.data.StatusEffect[], defenderType: PokeRogue.data.Type[]);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * Gives money to the user after the battle.
   *
   * @extends PostBattleAbAttr
   * @see {@linkcode applyPostBattle}
   */
  export declare class MoneyAbAttr extends PostBattleAbAttr {
      constructor();
      /**
       * @param pokemon {@linkcode Pokemon} that is the user of this ability.
       * @param passive N/A
       * @param args N/A
       * @returns true
       */
      applyPostBattle(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  /**
   * Applies a stat change after a Pokémon is summoned,
   * conditioned on the presence of a specific arena tag.
   *
   * @extends {PostSummonStatChangeAbAttr}
   */
  export declare class PostSummonStatChangeOnArenaAbAttr extends PostSummonStatChangeAbAttr {
      /**
       * The type of arena tag that conditions the stat change.
       * @public
       * @type {ArenaTagType}
       */
      public tagType;
      /**
       * Creates an instance of PostSummonStatChangeOnArenaAbAttr.
       * Initializes the stat change to increase Attack by 1 stage if the specified arena tag is present.
       *
       * @param {ArenaTagType} tagType - The type of arena tag to check for.
       */
      constructor(tagType: PokeRogue.enums.ArenaTagType);
      /**
       * Applies the post-summon stat change if the specified arena tag is present on pokemon's side.
       * This is used in Wind Rider ability.
       *
       * @param {Pokemon} pokemon - The Pokémon being summoned.
       * @param {boolean} passive - Whether the effect is passive.
       * @param {any[]} args - Additional arguments.
       * @returns {boolean} - Returns true if the stat change was applied, otherwise false.
       */
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, args: any[]): boolean;
  }
  /**
   * Takes no damage from the first hit of a physical move.
   * This is used in Ice Face ability.
   */
  export declare class IceFaceBlockPhysicalAbAttr extends ReceivedMoveDamageMultiplierAbAttr {
      public multiplier;
      constructor(condition: PokemonDefendCondition, multiplier: number);
      /**
       * Applies the Ice Face pre-defense ability to the Pokémon.
       * Removes BattlerTagType.ICE_FACE when hit by physical attack and is in Ice Face form.
       *
       * @param {Pokemon} pokemon - The Pokémon with the Ice Face ability.
       * @param {boolean} passive - Whether the ability is passive.
       * @param {Pokemon} attacker - The attacking Pokémon.
       * @param {PokemonMove} move - The move being used.
       * @param {Utils.BooleanHolder} cancelled - A holder for whether the move was cancelled.
       * @param {any[]} args - Additional arguments.
       * @returns {boolean} - Whether the immunity was applied.
       */
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      /**
       * Gets the message triggered when the Pokémon avoids damage using the Ice Face ability.
       * @param {Pokemon} pokemon - The Pokémon with the Ice Face ability.
       * @param {string} abilityName - The name of the ability.
       * @param {...any} args - Additional arguments.
       * @returns {string} - The trigger message.
       */
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  /**
   * If a Pokémon with this Ability selects a damaging move, it has a 30% chance of going first in its priority bracket. If the Ability activates, this is announced at the start of the turn (after move selection).
   *
   * @extends AbAttr
   */
  export declare class BypassSpeedChanceAbAttr extends AbAttr {
      chance: integer;
      /**
       * @param {integer} chance probability of ability being active.
       */
      constructor(chance: integer);
      /**
       * bypass move order in their priority bracket when pokemon choose damaging move
       * @param {Pokemon} pokemon {@linkcode Pokemon}  the Pokemon applying this ability
       * @param {boolean} passive N/A
       * @param {Utils.BooleanHolder} cancelled N/A
       * @param {any[]} args [0] {@linkcode Utils.BooleanHolder} set to true when the ability activated
       * @returns {boolean} - whether the ability was activated.
       */
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare function applyAbAttrs(attrType: PokeRogue.Constructor<AbAttr>, pokemon: PokeRogue.field.Pokemon, cancelled: Utils.BooleanHolder, ...args: any[]): Promise<void>;
  export declare function applyPostBattleInitAbAttrs(attrType: PokeRogue.Constructor<PostBattleInitAbAttr>, pokemon: PokeRogue.field.Pokemon, ...args: any[]): Promise<void>;
  export declare function applyPreDefendAbAttrs(attrType: PokeRogue.Constructor<PreDefendAbAttr>, pokemon: PokeRogue.field.Pokemon, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, ...args: any[]): Promise<void>;
  export declare function applyPostDefendAbAttrs(attrType: PokeRogue.Constructor<PostDefendAbAttr>, pokemon: PokeRogue.field.Pokemon, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, ...args: any[]): Promise<void>;
  export declare function applyPostMoveUsedAbAttrs(attrType: PokeRogue.Constructor<PostMoveUsedAbAttr>, pokemon: PokeRogue.field.Pokemon, move: PokeRogue.field.PokemonMove, source: PokeRogue.field.Pokemon, targets: PokeRogue.BattlerIndex[], ...args: any[]): Promise<void>;
  export declare function applyBattleStatMultiplierAbAttrs(attrType: PokeRogue.Constructor<BattleStatMultiplierAbAttr>, pokemon: PokeRogue.field.Pokemon, battleStat: PokeRogue.data.BattleStat, statValue: Utils.NumberHolder, ...args: any[]): Promise<void>;
  /**
   * Applies a field Battle Stat multiplier attribute
   * @param attrType {@linkcode FieldMultiplyBattleStatAbAttr} should always be FieldMultiplyBattleStatAbAttr for the time being
   * @param pokemon {@linkcode Pokemon} the Pokemon applying this ability
   * @param stat {@linkcode Stat} the type of the checked stat
   * @param statValue {@linkcode Utils.NumberHolder} the value of the checked stat
   * @param checkedPokemon {@linkcode Pokemon} the Pokemon with the checked stat
   * @param hasApplied {@linkcode Utils.BooleanHolder} whether or not a FieldMultiplyBattleStatAbAttr has already affected this stat
   * @param args unused
   */
  export declare function applyFieldBattleStatMultiplierAbAttrs(attrType: PokeRogue.Constructor<FieldMultiplyBattleStatAbAttr>, pokemon: PokeRogue.field.Pokemon, stat: PokeRogue.data.Stat, statValue: Utils.NumberHolder, checkedPokemon: PokeRogue.field.Pokemon, hasApplied: Utils.BooleanHolder, ...args: any[]): Promise<void>;
  export declare function applyPreAttackAbAttrs(attrType: PokeRogue.Constructor<PreAttackAbAttr>, pokemon: PokeRogue.field.Pokemon, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, ...args: any[]): Promise<void>;
  export declare function applyPostAttackAbAttrs(attrType: PokeRogue.Constructor<PostAttackAbAttr>, pokemon: PokeRogue.field.Pokemon, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, ...args: any[]): Promise<void>;
  export declare function applyPostKnockOutAbAttrs(attrType: PokeRogue.Constructor<PostKnockOutAbAttr>, pokemon: PokeRogue.field.Pokemon, knockedOut: PokeRogue.field.Pokemon, ...args: any[]): Promise<void>;
  export declare function applyPostVictoryAbAttrs(attrType: PokeRogue.Constructor<PostVictoryAbAttr>, pokemon: PokeRogue.field.Pokemon, ...args: any[]): Promise<void>;
  export declare function applyPostSummonAbAttrs(attrType: PokeRogue.Constructor<PostSummonAbAttr>, pokemon: PokeRogue.field.Pokemon, ...args: any[]): Promise<void>;
  export declare function applyPreSwitchOutAbAttrs(attrType: PokeRogue.Constructor<PreSwitchOutAbAttr>, pokemon: PokeRogue.field.Pokemon, ...args: any[]): Promise<void>;
  export declare function applyPreStatChangeAbAttrs(attrType: PokeRogue.Constructor<PreStatChangeAbAttr>, pokemon: PokeRogue.field.Pokemon, stat: PokeRogue.data.BattleStat, cancelled: Utils.BooleanHolder, ...args: any[]): Promise<void>;
  export declare function applyPostStatChangeAbAttrs(attrType: PokeRogue.Constructor<PostStatChangeAbAttr>, pokemon: PokeRogue.field.Pokemon, stats: PokeRogue.data.BattleStat[], levels: integer, selfTarget: boolean, ...args: any[]): Promise<void>;
  export declare function applyPreSetStatusAbAttrs(attrType: PokeRogue.Constructor<PreSetStatusAbAttr>, pokemon: PokeRogue.field.Pokemon, effect: PokeRogue.data.StatusEffect, cancelled: Utils.BooleanHolder, ...args: any[]): Promise<void>;
  export declare function applyPreApplyBattlerTagAbAttrs(attrType: PokeRogue.Constructor<PreApplyBattlerTagAbAttr>, pokemon: PokeRogue.field.Pokemon, tag: PokeRogue.data.BattlerTag, cancelled: Utils.BooleanHolder, ...args: any[]): Promise<void>;
  export declare function applyPreWeatherEffectAbAttrs(attrType: PokeRogue.Constructor<PreWeatherEffectAbAttr>, pokemon: PokeRogue.field.Pokemon, weather: PokeRogue.data.Weather, cancelled: Utils.BooleanHolder, ...args: any[]): Promise<void>;
  export declare function applyPostTurnAbAttrs(attrType: PokeRogue.Constructor<PostTurnAbAttr>, pokemon: PokeRogue.field.Pokemon, ...args: any[]): Promise<void>;
  export declare function applyPostWeatherChangeAbAttrs(attrType: PokeRogue.Constructor<PostWeatherChangeAbAttr>, pokemon: PokeRogue.field.Pokemon, weather: PokeRogue.data.WeatherType, ...args: any[]): Promise<void>;
  export declare function applyPostWeatherLapseAbAttrs(attrType: PokeRogue.Constructor<PostWeatherLapseAbAttr>, pokemon: PokeRogue.field.Pokemon, weather: PokeRogue.data.Weather, ...args: any[]): Promise<void>;
  export declare function applyPostTerrainChangeAbAttrs(attrType: PokeRogue.Constructor<PostTerrainChangeAbAttr>, pokemon: PokeRogue.field.Pokemon, terrain: PokeRogue.data.TerrainType, ...args: any[]): Promise<void>;
  export declare function applyCheckTrappedAbAttrs(attrType: PokeRogue.Constructor<CheckTrappedAbAttr>, pokemon: PokeRogue.field.Pokemon, trapped: Utils.BooleanHolder, otherPokemon: PokeRogue.field.Pokemon, ...args: any[]): Promise<void>;
  export declare function applyPostBattleAbAttrs(attrType: PokeRogue.Constructor<PostBattleAbAttr>, pokemon: PokeRogue.field.Pokemon, ...args: any[]): Promise<void>;
  export declare function applyPostFaintAbAttrs(attrType: PokeRogue.Constructor<PostFaintAbAttr>, pokemon: PokeRogue.field.Pokemon, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, ...args: any[]): Promise<void>;
  export declare const allAbilities: Ability[];
  export declare function initAbilities(): void;
  export {};
  
}

declare namespace PokeRogue.data {
  export declare function printPokemon(): Promise<void>;
  export declare function printAbilities(): Promise<void>;
  export declare function printMoves(): Promise<void>;
  export declare function printTmSpecies(): Promise<void>;
  
}

declare namespace PokeRogue.data {
  //import { Arena } from "../field/arena";
  //import { Type } from "./type";
  //import { MoveCategory } from "./move";
  //import Pokemon from "../field/pokemon";
  //import { BattlerIndex } from "../battle";
  //import { ArenaTagType } from "#enums/arena-tag-type";
  //import { Moves } from "#enums/moves";
  export declare enum ArenaTagSide {
      BOTH = 0,
      PLAYER = 1,
      ENEMY = 2
  }
  export declare abstract class ArenaTag {
      tagType: PokeRogue.enums.ArenaTagType;
      turnCount: integer;
      sourceMove: PokeRogue.enums.Moves;
      sourceId: integer;
      side: ArenaTagSide;
      constructor(tagType: PokeRogue.enums.ArenaTagType, turnCount: integer, sourceMove: PokeRogue.enums.Moves, sourceId?: integer, side?: ArenaTagSide);
      apply(arena: PokeRogue.field.Arena, args: any[]): boolean;
      onAdd(arena: PokeRogue.field.Arena, quiet?: boolean): void;
      onRemove(arena: PokeRogue.field.Arena, quiet?: boolean): void;
      onOverlap(arena: PokeRogue.field.Arena): void;
      lapse(arena: PokeRogue.field.Arena): boolean;
      getMoveName(): string;
  }
  /**
   * Arena Tag class for {@link https://bulbapedia.bulbagarden.net/wiki/Mist_(move) Mist}.
   * Prevents Pokémon on the opposing side from lowering the stats of the Pokémon in the Mist.
   */
  export declare class MistTag extends ArenaTag {
      constructor(turnCount: integer, sourceId: integer, side: ArenaTagSide);
      onAdd(arena: PokeRogue.field.Arena, quiet?: boolean): void;
      apply(arena: PokeRogue.field.Arena, args: any[]): boolean;
  }
  /**
   * Reduces the damage of specific move categories in the arena.
   * @extends ArenaTag
   */
  export declare class WeakenMoveScreenTag extends ArenaTag {
      protected weakenedCategories: PokeRogue.data.MoveCategory[];
      /**
       * Creates a new instance of the WeakenMoveScreenTag class.
       *
       * @param tagType - The type of the arena tag.
       * @param turnCount - The number of turns the tag is active.
       * @param sourceMove - The move that created the tag.
       * @param sourceId - The ID of the source of the tag.
       * @param side - The side (player or enemy) the tag affects.
       * @param weakenedCategories - The categories of moves that are weakened by this tag.
       */
      constructor(tagType: PokeRogue.enums.ArenaTagType, turnCount: integer, sourceMove: PokeRogue.enums.Moves, sourceId: integer, side: ArenaTagSide, weakenedCategories: PokeRogue.data.MoveCategory[]);
      /**
       * Applies the weakening effect to the move.
       *
       * @param arena - The arena where the move is applied.
       * @param args - The arguments for the move application.
       * @param args[0] - The category of the move.
       * @param args[1] - A boolean indicating whether it is a double battle.
       * @param args[2] - An object of type `Utils.NumberHolder` that holds the damage multiplier
       *
       * @returns True if the move was weakened, otherwise false.
       */
      apply(arena: PokeRogue.field.Arena, args: any[]): boolean;
  }
  /**
   * Abstract class to implement weakened moves of a specific type.
   */
  export declare class WeakenMoveTypeTag extends ArenaTag {
      public weakenedType;
      /**
       * Creates a new instance of the WeakenMoveTypeTag class.
       *
       * @param tagType - The type of the arena tag.
       * @param turnCount - The number of turns the tag is active.
       * @param type - The type being weakened from this tag.
       * @param sourceMove - The move that created the tag.
       * @param sourceId - The ID of the source of the tag.
       */
      constructor(tagType: PokeRogue.enums.ArenaTagType, turnCount: integer, type: PokeRogue.data.Type, sourceMove: PokeRogue.enums.Moves, sourceId: integer);
      apply(arena: PokeRogue.field.Arena, args: any[]): boolean;
  }
  /**
   * Abstract class to implement arena traps.
   */
  export declare class ArenaTrapTag extends ArenaTag {
      layers: integer;
      maxLayers: integer;
      /**
       * Creates a new instance of the ArenaTrapTag class.
       *
       * @param tagType - The type of the arena tag.
       * @param sourceMove - The move that created the tag.
       * @param sourceId - The ID of the source of the tag.
       * @param side - The side (player or enemy) the tag affects.
       * @param maxLayers - The maximum amount of layers this tag can have.
       */
      constructor(tagType: PokeRogue.enums.ArenaTagType, sourceMove: PokeRogue.enums.Moves, sourceId: integer, side: ArenaTagSide, maxLayers: integer);
      onOverlap(arena: PokeRogue.field.Arena): void;
      apply(arena: PokeRogue.field.Arena, args: any[]): boolean;
      activateTrap(pokemon: PokeRogue.field.Pokemon): boolean;
      getMatchupScoreMultiplier(pokemon: PokeRogue.field.Pokemon): number;
  }
  /**
   * Arena Tag class for {@link https://bulbapedia.bulbagarden.net/wiki/Trick_Room_(move) Trick Room}.
   * Reverses the Speed stats for all Pokémon on the field as long as this arena tag is up,
   * also reversing the turn order for all Pokémon on the field as well.
   */
  export declare class TrickRoomTag extends ArenaTag {
      constructor(turnCount: integer, sourceId: integer);
      apply(arena: PokeRogue.field.Arena, args: any[]): boolean;
      onAdd(arena: PokeRogue.field.Arena): void;
      onRemove(arena: PokeRogue.field.Arena): void;
  }
  /**
   * Arena Tag class for {@link https://bulbapedia.bulbagarden.net/wiki/Gravity_(move) Gravity}.
   * Grounds all Pokémon on the field, including Flying-types and those with
   * {@linkcode Abilities.LEVITATE} for the duration of the arena tag, usually 5 turns.
   */
  export declare class GravityTag extends ArenaTag {
      constructor(turnCount: integer);
      onAdd(arena: PokeRogue.field.Arena): void;
      onRemove(arena: PokeRogue.field.Arena): void;
  }
  export declare function getArenaTag(tagType: PokeRogue.enums.ArenaTagType, turnCount: integer, sourceMove: PokeRogue.enums.Moves, sourceId: integer, targetIndex?: BattlerIndex, side?: ArenaTagSide): ArenaTag;
  
}

declare namespace PokeRogue.data {
  //import BattleScene from "../battle-scene";
  //import Pokemon from "../field/pokemon";
  //import { BattlerIndex } from "../battle";
  //import { Moves } from "#enums/moves";
  export declare enum AnimFrameTarget {
      USER = 0,
      TARGET = 1,
      GRAPHIC = 2
  }
  declare enum AnimFocus {
      TARGET = 1,
      USER = 2,
      USER_TARGET = 3,
      SCREEN = 4
  }
  declare enum AnimBlendType {
      NORMAL = 0,
      ADD = 1,
      SUBTRACT = 2
  }
  export declare enum ChargeAnim {
      FLY_CHARGING = 1000,
      BOUNCE_CHARGING = 1001,
      DIG_CHARGING = 1002,
      FUTURE_SIGHT_CHARGING = 1003,
      DIVE_CHARGING = 1004,
      SOLAR_BEAM_CHARGING = 1005,
      SHADOW_FORCE_CHARGING = 1006,
      SKULL_BASH_CHARGING = 1007,
      FREEZE_SHOCK_CHARGING = 1008,
      SKY_DROP_CHARGING = 1009,
      SKY_ATTACK_CHARGING = 1010,
      ICE_BURN_CHARGING = 1011,
      DOOM_DESIRE_CHARGING = 1012,
      RAZOR_WIND_CHARGING = 1013,
      PHANTOM_FORCE_CHARGING = 1014,
      GEOMANCY_CHARGING = 1015,
      SHADOW_BLADE_CHARGING = 1016,
      SOLAR_BLADE_CHARGING = 1017,
      BEAK_BLAST_CHARGING = 1018,
      METEOR_BEAM_CHARGING = 1019,
      ELECTRO_SHOT_CHARGING = 1020
  }
  export declare enum CommonAnim {
      USE_ITEM = 2000,
      HEALTH_UP = 2001,
      POISON = 2010,
      TOXIC = 2011,
      PARALYSIS = 2012,
      SLEEP = 2013,
      FROZEN = 2014,
      BURN = 2015,
      CONFUSION = 2016,
      ATTRACT = 2017,
      BIND = 2018,
      WRAP = 2019,
      CURSE_NO_GHOST = 2020,
      LEECH_SEED = 2021,
      FIRE_SPIN = 2022,
      PROTECT = 2023,
      COVET = 2024,
      WHIRLPOOL = 2025,
      BIDE = 2026,
      SAND_TOMB = 2027,
      QUICK_GUARD = 2028,
      WIDE_GUARD = 2029,
      CURSE = 2030,
      MAGMA_STORM = 2031,
      CLAMP = 2032,
      SNAP_TRAP = 2033,
      THUNDER_CAGE = 2034,
      INFESTATION = 2035,
      ORDER_UP_CURLY = 2036,
      ORDER_UP_DROOPY = 2037,
      ORDER_UP_STRETCHY = 2038,
      RAGING_BULL_FIRE = 2039,
      RAGING_BULL_WATER = 2040,
      SALT_CURE = 2041,
      SUNNY = 2100,
      RAIN = 2101,
      SANDSTORM = 2102,
      HAIL = 2103,
      SNOW = 2104,
      WIND = 2105,
      HEAVY_RAIN = 2106,
      HARSH_SUN = 2107,
      STRONG_WINDS = 2108,
      MISTY_TERRAIN = 2110,
      ELECTRIC_TERRAIN = 2111,
      GRASSY_TERRAIN = 2112,
      PSYCHIC_TERRAIN = 2113,
      LOCK_ON = 2120
  }
  export declare class AnimConfig {
      id: integer;
      graphic: string;
      frames: AnimFrame[][];
      frameTimedEvents: Map<integer, AnimTimedEvent[]>;
      position: integer;
      hue: integer;
      constructor(source?: any);
      getSoundResourceNames(): string[];
      getBackgroundResourceNames(): string[];
  }
  declare class AnimFrame {
      x: number;
      y: number;
      zoomX: number;
      zoomY: number;
      angle: number;
      mirror: boolean;
      visible: boolean;
      blendType: AnimBlendType;
      target: AnimFrameTarget;
      graphicFrame: integer;
      opacity: integer;
      color: integer[];
      tone: integer[];
      flash: integer[];
      locked: boolean;
      priority: integer;
      focus: AnimFocus;
      constructor(x: number, y: number, zoomX: number, zoomY: number, angle: number, mirror: boolean, visible: boolean, blendType: AnimBlendType, pattern: integer, opacity: integer, colorR: integer, colorG: integer, colorB: integer, colorA: integer, toneR: integer, toneG: integer, toneB: integer, toneA: integer, flashR: integer, flashG: integer, flashB: integer, flashA: integer, locked: boolean, priority: integer, focus: AnimFocus, init?: boolean);
  }
  declare abstract class AnimTimedEvent {
      frameIndex: integer;
      resourceName: string;
      constructor(frameIndex: integer, resourceName: string);
      abstract execute(scene: PokeRogue.BattleScene, battleAnim: BattleAnim): integer;
      abstract getEventType(): string;
  }
  export declare const moveAnims: Map<Moves, AnimConfig | [AnimConfig, AnimConfig]>;
  export declare const chargeAnims: Map<ChargeAnim, AnimConfig | [AnimConfig, AnimConfig]>;
  export declare const commonAnims: Map<CommonAnim, AnimConfig>;
  export declare function initCommonAnims(scene: PokeRogue.BattleScene): Promise<void>;
  export declare function initMoveAnim(scene: PokeRogue.BattleScene, move: PokeRogue.enums.Moves): Promise<void>;
  export declare function initMoveChargeAnim(scene: PokeRogue.BattleScene, chargeAnim: ChargeAnim): Promise<void>;
  export declare function loadCommonAnimAssets(scene: PokeRogue.BattleScene, startLoad?: boolean): Promise<void>;
  export declare function loadMoveAnimAssets(scene: PokeRogue.BattleScene, moveIds: PokeRogue.enums.Moves[], startLoad?: boolean): Promise<void>;
  export declare abstract class BattleAnim {
      user: PokeRogue.field.Pokemon;
      target: PokeRogue.field.Pokemon;
      sprites: Phaser.GameObjects.Sprite[];
      bgSprite: Phaser.GameObjects.TileSprite | Phaser.GameObjects.Rectangle;
      public srcLine;
      public dstLine;
      constructor(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon);
      abstract getAnim(): AnimConfig;
      abstract isOppAnim(): boolean;
      protected isHideUser(): boolean;
      protected isHideTarget(): boolean;
      public getGraphicFrameData;
      play(scene: PokeRogue.BattleScene, callback?: Function): void;
  }
  export declare class CommonBattleAnim extends BattleAnim {
      commonAnim: CommonAnim;
      constructor(commonAnim: CommonAnim, user: PokeRogue.field.Pokemon, target?: Pokemon);
      getAnim(): AnimConfig;
      isOppAnim(): boolean;
  }
  export declare class MoveAnim extends BattleAnim {
      move: PokeRogue.enums.Moves;
      constructor(move: PokeRogue.enums.Moves, user: PokeRogue.field.Pokemon, target: PokeRogue.BattlerIndex);
      getAnim(): AnimConfig;
      isOppAnim(): boolean;
      protected isHideUser(): boolean;
      protected isHideTarget(): boolean;
  }
  export declare class MoveChargeAnim extends MoveAnim {
      public chargeAnim;
      constructor(chargeAnim: ChargeAnim, move: PokeRogue.enums.Moves, user: PokeRogue.field.Pokemon);
      isOppAnim(): boolean;
      getAnim(): AnimConfig;
  }
  export declare function populateAnims(): Promise<void>;
  export {};
  
}

declare namespace PokeRogue.data {
  export declare enum BattleStat {
      ATK = 0,
      DEF = 1,
      SPATK = 2,
      SPDEF = 3,
      SPD = 4,
      ACC = 5,
      EVA = 6,
      RAND = 7
  }
  export declare function getBattleStatName(stat: BattleStat): string;
  export declare function getBattleStatLevelChangeDescription(pokemonNameWithAffix: string, stats: string, levels: integer, up: boolean): never;
  
}

declare namespace PokeRogue.data {
  //import { CommonAnim } from "./battle-anims";
  //import Pokemon from "../field/pokemon";
  //import { Stat } from "./pokemon-stat";
  //import { Type } from "./type";
  //import { TerrainType } from "./terrain";
  //import { WeatherType } from "./weather";
  //import { BattleStat } from "./battle-stat";
  //import { Abilities } from "#enums/abilities";
  //import { BattlerTagType } from "#enums/battler-tag-type";
  //import { Moves } from "#enums/moves";
  export declare enum BattlerTagLapseType {
      FAINT = 0,
      MOVE = 1,
      PRE_MOVE = 2,
      AFTER_MOVE = 3,
      MOVE_EFFECT = 4,
      TURN_END = 5,
      CUSTOM = 6
  }
  export declare class BattlerTag {
      tagType: PokeRogue.enums.BattlerTagType;
      lapseType: BattlerTagLapseType;
      turnCount: integer;
      sourceMove: PokeRogue.enums.Moves;
      sourceId?: integer;
      constructor(tagType: PokeRogue.enums.BattlerTagType, lapseType: BattlerTagLapseType, turnCount: integer, sourceMove: PokeRogue.enums.Moves, sourceId?: integer);
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
      onOverlap(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      getDescriptor(): string;
      isSourceLinked(): boolean;
      getMoveName(): string;
      /**
      * When given a battler tag or json representing one, load the data for it.
      * This is meant to be inherited from by any battler tag with custom attributes
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
  }
  export interface WeatherBattlerTag {
      weatherTypes: PokeRogue.data.WeatherType[];
  }
  export interface TerrainBattlerTag {
      terrainTypes: PokeRogue.data.TerrainType[];
  }
  export declare class RechargingTag extends BattlerTag {
      constructor(sourceMove: PokeRogue.enums.Moves);
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class TrappedTag extends BattlerTag {
      constructor(tagType: PokeRogue.enums.BattlerTagType, lapseType: BattlerTagLapseType, turnCount: integer, sourceMove: PokeRogue.enums.Moves, sourceId: integer);
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
      getDescriptor(): string;
      isSourceLinked(): boolean;
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
  }
  export declare class FlinchedTag extends BattlerTag {
      constructor(sourceMove: PokeRogue.enums.Moves);
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      getDescriptor(): string;
  }
  export declare class InterruptedTag extends BattlerTag {
      constructor(sourceMove: PokeRogue.enums.Moves);
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  /**
   * BattlerTag that represents the {@link https://bulbapedia.bulbagarden.net/wiki/Confusion_(status_condition)}
   */
  export declare class ConfusedTag extends BattlerTag {
      constructor(turnCount: integer, sourceMove: PokeRogue.enums.Moves);
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
      onOverlap(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      getDescriptor(): string;
  }
  /**
   * Tag applied to the {@linkcode Move.DESTINY_BOND} user.
   * @extends BattlerTag
   * @see {@linkcode apply}
   */
  export declare class DestinyBondTag extends BattlerTag {
      constructor(sourceMove: PokeRogue.enums.Moves, sourceId: integer);
      /**
       * Lapses either before the user's move and does nothing
       * or after receiving fatal damage. When the damage is fatal,
       * the attacking Pokemon is taken down as well, unless it's a boss.
       *
       * @param {Pokemon} pokemon Pokemon that is attacking the Destiny Bond user.
       * @param {BattlerTagLapseType} lapseType CUSTOM or PRE_MOVE
       * @returns false if the tag source fainted or one turn has passed since the application
       */
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class InfatuatedTag extends BattlerTag {
      constructor(sourceMove: integer, sourceId: integer);
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      onOverlap(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
      isSourceLinked(): boolean;
      getDescriptor(): string;
  }
  export declare class SeedTag extends BattlerTag {
      public sourceIndex;
      constructor(sourceId: integer);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      getDescriptor(): string;
  }
  export declare class NightmareTag extends BattlerTag {
      constructor();
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      onOverlap(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      getDescriptor(): string;
  }
  export declare class FrenzyTag extends BattlerTag {
      constructor(sourceMove: PokeRogue.enums.Moves, sourceId: integer);
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
  }
  export declare class ChargingTag extends BattlerTag {
      constructor(sourceMove: PokeRogue.enums.Moves, sourceId: integer);
  }
  export declare class EncoreTag extends BattlerTag {
      moveId: PokeRogue.enums.Moves;
      constructor(sourceId: integer);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
  }
  export declare class HelpingHandTag extends BattlerTag {
      constructor(sourceId: integer);
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
  }
  /**
   * Applies the Ingrain tag to a pokemon
   * @extends TrappedTag
   */
  export declare class IngrainTag extends TrappedTag {
      constructor(sourceId: integer);
      /**
       * Check if the Ingrain tag can be added to the pokemon
       * @param pokemon {@linkcode Pokemon} The pokemon to check if the tag can be added to
       * @returns boolean True if the tag can be added, false otherwise
       */
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
      getDescriptor(): string;
  }
  export declare class AquaRingTag extends BattlerTag {
      constructor();
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  /** Tag used to allow moves that interact with {@link Moves.MINIMIZE} to function */
  export declare class MinimizeTag extends BattlerTag {
      constructor();
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
  }
  export declare class DrowsyTag extends BattlerTag {
      constructor();
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      getDescriptor(): string;
  }
  export declare abstract class DamagingTrapTag extends TrappedTag {
      public commonAnim;
      constructor(tagType: PokeRogue.enums.BattlerTagType, commonAnim: PokeRogue.data.CommonAnim, turnCount: integer, sourceMove: PokeRogue.enums.Moves, sourceId: integer);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class BindTag extends DamagingTrapTag {
      constructor(turnCount: integer, sourceId: integer);
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
  }
  export declare class WrapTag extends DamagingTrapTag {
      constructor(turnCount: integer, sourceId: integer);
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
  }
  export declare abstract class VortexTrapTag extends DamagingTrapTag {
      constructor(tagType: PokeRogue.enums.BattlerTagType, commonAnim: PokeRogue.data.CommonAnim, turnCount: integer, sourceMove: PokeRogue.enums.Moves, sourceId: integer);
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
  }
  export declare class FireSpinTag extends VortexTrapTag {
      constructor(turnCount: integer, sourceId: integer);
  }
  export declare class WhirlpoolTag extends VortexTrapTag {
      constructor(turnCount: integer, sourceId: integer);
  }
  export declare class ClampTag extends DamagingTrapTag {
      constructor(turnCount: integer, sourceId: integer);
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
  }
  export declare class SandTombTag extends DamagingTrapTag {
      constructor(turnCount: integer, sourceId: integer);
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
  }
  export declare class MagmaStormTag extends DamagingTrapTag {
      constructor(turnCount: integer, sourceId: integer);
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
  }
  export declare class SnapTrapTag extends DamagingTrapTag {
      constructor(turnCount: integer, sourceId: integer);
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
  }
  export declare class ThunderCageTag extends DamagingTrapTag {
      constructor(turnCount: integer, sourceId: integer);
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
  }
  export declare class InfestationTag extends DamagingTrapTag {
      constructor(turnCount: integer, sourceId: integer);
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
  }
  export declare class ProtectedTag extends BattlerTag {
      constructor(sourceMove: PokeRogue.enums.Moves, tagType?: BattlerTagType);
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class ContactDamageProtectedTag extends ProtectedTag {
      public damageRatio;
      constructor(sourceMove: PokeRogue.enums.Moves, damageRatio: integer);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class ContactStatChangeProtectedTag extends ProtectedTag {
      public stat;
      public levels;
      constructor(sourceMove: PokeRogue.enums.Moves, tagType: PokeRogue.enums.BattlerTagType, stat: PokeRogue.data.BattleStat, levels: integer);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class ContactPoisonProtectedTag extends ProtectedTag {
      constructor(sourceMove: PokeRogue.enums.Moves);
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class ContactBurnProtectedTag extends ProtectedTag {
      constructor(sourceMove: PokeRogue.enums.Moves);
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class EnduringTag extends BattlerTag {
      constructor(sourceMove: PokeRogue.enums.Moves);
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class SturdyTag extends BattlerTag {
      constructor(sourceMove: PokeRogue.enums.Moves);
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class PerishSongTag extends BattlerTag {
      constructor(turnCount: integer);
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  /**
   * Applies the "Center of Attention" volatile status effect, the effect applied by Follow Me, Rage Powder, and Spotlight.
   * @see {@link https://bulbapedia.bulbagarden.net/wiki/Center_of_attention | Center of Attention}
   */
  export declare class CenterOfAttentionTag extends BattlerTag {
      powder: boolean;
      constructor(sourceMove: PokeRogue.enums.Moves);
      /** "Center of Attention" can't be added if an ally is already the Center of Attention. */
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
  }
  export declare class AbilityBattlerTag extends BattlerTag {
      ability: PokeRogue.enums.Abilities;
      constructor(tagType: PokeRogue.enums.BattlerTagType, ability: PokeRogue.enums.Abilities, lapseType: BattlerTagLapseType, turnCount: integer);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
  }
  export declare class TruantTag extends AbilityBattlerTag {
      constructor();
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class SlowStartTag extends AbilityBattlerTag {
      constructor();
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
  }
  export declare class HighestStatBoostTag extends AbilityBattlerTag {
      stat: PokeRogue.data.Stat;
      multiplier: number;
      constructor(tagType: PokeRogue.enums.BattlerTagType, ability: PokeRogue.enums.Abilities);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
  }
  export declare class WeatherHighestStatBoostTag extends HighestStatBoostTag implements WeatherBattlerTag {
      weatherTypes: PokeRogue.data.WeatherType[];
      constructor(tagType: PokeRogue.enums.BattlerTagType, ability: PokeRogue.enums.Abilities, ...weatherTypes: PokeRogue.data.WeatherType[]);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
  }
  export declare class TerrainHighestStatBoostTag extends HighestStatBoostTag implements TerrainBattlerTag {
      terrainTypes: PokeRogue.data.TerrainType[];
      constructor(tagType: PokeRogue.enums.BattlerTagType, ability: PokeRogue.enums.Abilities, ...terrainTypes: PokeRogue.data.TerrainType[]);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
  }
  export declare class SemiInvulnerableTag extends BattlerTag {
      constructor(tagType: PokeRogue.enums.BattlerTagType, turnCount: integer, sourceMove: PokeRogue.enums.Moves);
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
  }
  export declare class TypeImmuneTag extends BattlerTag {
      immuneType: PokeRogue.data.Type;
      constructor(tagType: PokeRogue.enums.BattlerTagType, sourceMove: PokeRogue.enums.Moves, immuneType: PokeRogue.data.Type, length?: number);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
  }
  export declare class MagnetRisenTag extends TypeImmuneTag {
      constructor(tagType: PokeRogue.enums.BattlerTagType, sourceMove: PokeRogue.enums.Moves);
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
  }
  export declare class TypeBoostTag extends BattlerTag {
      boostedType: PokeRogue.data.Type;
      boostValue: number;
      oneUse: boolean;
      constructor(tagType: PokeRogue.enums.BattlerTagType, sourceMove: PokeRogue.enums.Moves, boostedType: PokeRogue.data.Type, boostValue: number, oneUse: boolean);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class CritBoostTag extends BattlerTag {
      constructor(tagType: PokeRogue.enums.BattlerTagType, sourceMove: PokeRogue.enums.Moves);
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
  }
  export declare class AlwaysCritTag extends BattlerTag {
      constructor(sourceMove: PokeRogue.enums.Moves);
  }
  export declare class IgnoreAccuracyTag extends BattlerTag {
      constructor(sourceMove: PokeRogue.enums.Moves);
  }
  export declare class SaltCuredTag extends BattlerTag {
      public sourceIndex;
      constructor(sourceId: integer);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class CursedTag extends BattlerTag {
      public sourceIndex;
      constructor(sourceId: integer);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  /**
   * Battler tag for effects that ground the source, allowing Ground-type moves to hit them. Encompasses two tag types:
   * @item IGNORE_FLYING: Persistent grounding effects (i.e. from Smack Down and Thousand Waves)
   * @item ROOSTED: One-turn grounding effects (i.e. from Roost)
   */
  export declare class GroundedTag extends BattlerTag {
      constructor(tagType: PokeRogue.enums.BattlerTagType, lapseType: BattlerTagLapseType, sourceMove: PokeRogue.enums.Moves);
  }
  /**
   * Provides the Ice Face ability's effects.
   */
  export declare class IceFaceTag extends BattlerTag {
      constructor(sourceMove: PokeRogue.enums.Moves);
      /**
       * Determines if the Ice Face tag can be added to the Pokémon.
       * @param {Pokemon} pokemon - The Pokémon to which the tag might be added.
       * @returns {boolean} - True if the tag can be added, false otherwise.
       */
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      /**
       * Applies the Ice Face tag to the Pokémon.
       * Triggers a form change to Ice Face if the Pokémon is not in its Ice Face form.
       * @param {Pokemon} pokemon - The Pokémon to which the tag is added.
       */
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      /**
       * Removes the Ice Face tag from the Pokémon.
       * Triggers a form change to Noice when the tag is removed.
       * @param {Pokemon} pokemon - The Pokémon from which the tag is removed.
       */
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
  }
  export declare function getBattlerTag(tagType: PokeRogue.enums.BattlerTagType, turnCount: integer, sourceMove: PokeRogue.enums.Moves, sourceId: integer): BattlerTag;
  /**
  * When given a battler tag or json representing one, creates an actual BattlerTag object with the same data.
  * @param {BattlerTag | any} source A battler tag
  * @return {BattlerTag} The valid battler tag
  */
  export declare function loadBattlerTag(source: BattlerTag | any): BattlerTag;
  
}

declare namespace PokeRogue.data {
  //import Pokemon from "../field/pokemon";
  //import { BerryType } from "#enums/berry-type";
  export declare function getBerryName(berryType: PokeRogue.enums.BerryType): string;
  export declare function getBerryEffectDescription(berryType: PokeRogue.enums.BerryType): string;
  export type BerryPredicate = (pokemon: PokeRogue.field.Pokemon) => boolean;
  export declare function getBerryPredicate(berryType: PokeRogue.enums.BerryType): BerryPredicate;
  export type BerryEffectFunc = (pokemon: PokeRogue.field.Pokemon) => void;
  export declare function getBerryEffectFunc(berryType: PokeRogue.enums.BerryType): BerryEffectFunc;
  
}

declare namespace PokeRogue.data {
  //import { Biome } from "#enums/biome";
  //import { Species } from "#enums/species";
  //import { TrainerType } from "#enums/trainer-type";
  export declare function getBiomeName(biome: PokeRogue.enums.Biome | -1): never;
  interface BiomeLinks {
      [key: integer]: Biome | (Biome | [Biome, integer])[];
  }
  interface BiomeDepths {
      [key: integer]: [integer, integer];
  }
  export declare const biomeLinks: BiomeLinks;
  export declare const biomeDepths: BiomeDepths;
  export declare enum BiomePoolTier {
      COMMON = 0,
      UNCOMMON = 1,
      RARE = 2,
      SUPER_RARE = 3,
      ULTRA_RARE = 4,
      BOSS = 5,
      BOSS_RARE = 6,
      BOSS_SUPER_RARE = 7,
      BOSS_ULTRA_RARE = 8
  }
  export declare const uncatchableSpecies: PokeRogue.enums.Species[];
  export interface SpeciesTree {
      [key: integer]: Species[];
  }
  export interface PokemonPools {
      [key: integer]: (Species | SpeciesTree)[];
  }
  export interface BiomeTierPokemonPools {
      [key: integer]: PokemonPools;
  }
  export interface BiomePokemonPools {
      [key: integer]: BiomeTierPokemonPools;
  }
  export interface BiomeTierTrainerPools {
      [key: integer]: TrainerType[];
  }
  export interface BiomeTrainerPools {
      [key: integer]: BiomeTierTrainerPools;
  }
  export declare const biomePokemonPools: BiomePokemonPools;
  export declare const biomeTrainerPools: BiomeTrainerPools;
  export declare function initBiomes(): void;
  export {};
  
}

declare namespace PokeRogue.data {
  //import { GameData } from "#app/system/game-data.js";
  //import { GameMode } from "#app/game-mode.js";
  //import { Challenges } from "#enums/challenges";
  /**
   * An enum for all the challenge types. The parameter entries on these describe the
   * parameters to use when calling the applyChallenges function.
   */
  export declare enum ChallengeType {
      /**
       * Challenges which modify what starters you can choose
       * @param args [0] {@link PokemonSpecies} The species to check
       *             [1] {@link Utils.BooleanHolder} Sets to false if illegal, pass in true.
      */
      STARTER_CHOICE = 0,
      /**
       * Challenges which modify how many starter points you have
       * @param args [0] {@link Utils.NumberHolder} The amount of starter points you have
      */
      STARTER_POINTS = 1,
      /**
       * Challenges which modify your starters in some way
       * Not Fully Implemented
      */
      STARTER_MODIFY = 2,
      /**
       * Challenges which limit which pokemon you can have in battle.
       * @param args [0] {@link Pokemon} The pokemon to check
       *             [1] {@link Utils.BooleanHolder} Sets to false if illegal, pass in true.
      */
      POKEMON_IN_BATTLE = 3,
      /**
       * Adds or modifies the fixed battles in a run
       * @param args [0] integer The wave to get a battle for
       *             [1] {@link FixedBattleConfig} A new fixed battle. It'll be modified if a battle exists.
      */
      FIXED_BATTLES = 4
  }
  /**
   * A challenge object. Exists only to serve as a base class.
   */
  export declare abstract class Challenge {
      id: PokeRogue.enums.Challenges;
      value: integer;
      maxValue: integer;
      severity: integer;
      maxSeverity: integer;
      conditions: ChallengeCondition[];
      challengeTypes: ChallengeType[];
      /**
       * @param {Challenges} id The enum value for the challenge
       */
      constructor(id: PokeRogue.enums.Challenges, maxValue?: integer);
      /**
       * Reset the challenge to a base state.
       */
      reset(): void;
      /**
       * Gets the localisation key for the challenge
       * @returns The i18n key for this challenge
       */
      geti18nKey(): string;
      /**
       * Used for unlockable challenges to check if they're unlocked.
       * @param {GameData} data The save data.
       * @returns {boolean} Whether this challenge is unlocked.
       */
      isUnlocked(data: PokeRogue.system.GameData): boolean;
      /**
       * Adds an unlock condition to this challenge.
       * @param {ChallengeCondition} condition The condition to add.
       * @returns {Challenge} This challenge
       */
      condition(condition: ChallengeCondition): Challenge;
      /**
       * If this challenge is of a particular type
       * @param {ChallengeType} challengeType The challenge type to check.
       * @returns {Challenge} This challenge
       */
      isOfType(challengeType: ChallengeType): boolean;
      /**
       * Adds a challenge type to this challenge.
       * @param {ChallengeType} challengeType The challenge type to add.
       * @returns {Challenge} This challenge
       */
      addChallengeType(challengeType: ChallengeType): Challenge;
      /**
       * @returns {string} The localised name of this challenge.
       */
      getName(): string;
      /**
       * Returns the textual representation of a challenge's current value.
       * @param {value} overrideValue The value to check for. If undefined, gets the current value.
       * @returns {string} The localised name for the current value.
       */
      getValue(overrideValue?: integer): string;
      /**
       * Returns the description of a challenge's current value.
       * @param {value} overrideValue The value to check for. If undefined, gets the current value.
       * @returns {string} The localised description for the current value.
       */
      getDescription(overrideValue?: integer): string;
      /**
       * Increase the value of the challenge
       * @returns {boolean} Returns true if the value changed
       */
      increaseValue(): boolean;
      /**
       * Decrease the value of the challenge
       * @returns {boolean} Returns true if the value changed
       */
      decreaseValue(): boolean;
      /**
       * Whether to allow choosing this challenge's severity.
       */
      hasSeverity(): boolean;
      /**
       * Decrease the severity of the challenge
       * @returns {boolean} Returns true if the value changed
       */
      decreaseSeverity(): boolean;
      /**
       * Increase the severity of the challenge
       * @returns {boolean} Returns true if the value changed
       */
      increaseSeverity(): boolean;
      /**
       * Gets the "difficulty" value of this challenge.
       * @returns {integer} The difficulty value.
       */
      getDifficulty(): integer;
      /**
       * Gets the minimum difficulty added by this challenge.
       * @returns {integer} The difficulty value.
       */
      getMinDifficulty(): integer;
      /**
       * Modifies the data or game state in some way to apply the challenge.
       * @param {ChallengeType} challengeType Which challenge type this is being applied for.
       * @param args Irrelevant. See the specific challenge's apply function for additional information.
       */
      abstract apply(challengeType: ChallengeType, args: any[]): boolean;
      /**
       * Clones a challenge, either from another challenge or json. Chainable.
       * @param {Challenge | any} source The source challenge of json.
       * @returns {Challenge} This challenge.
       */
      static loadChallenge(source: Challenge | any): Challenge;
  }
  type ChallengeCondition = (data: PokeRogue.system.GameData) => boolean;
  /**
   * Implements a mono generation challenge.
   */
  export declare class SingleGenerationChallenge extends Challenge {
      constructor();
      apply(challengeType: ChallengeType, args: any[]): boolean;
      /**
       * @overrides
       */
      getDifficulty(): number;
      /**
       * Returns the textual representation of a challenge's current value.
       * @param {value} overrideValue The value to check for. If undefined, gets the current value.
       * @returns {string} The localised name for the current value.
       */
      getValue(overrideValue?: integer): string;
      /**
       * Returns the description of a challenge's current value.
       * @param {value} overrideValue The value to check for. If undefined, gets the current value.
       * @returns {string} The localised description for the current value.
       */
      getDescription(overrideValue?: integer): string;
      static loadChallenge(source: SingleGenerationChallenge | any): SingleGenerationChallenge;
  }
  /**
   * Implements a mono type challenge.
   */
  export declare class SingleTypeChallenge extends Challenge {
      public static TYPE_OVERRIDES;
      constructor();
      apply(challengeType: ChallengeType, args: any[]): boolean;
      /**
       * @overrides
       */
      getDifficulty(): number;
      /**
       * Returns the textual representation of a challenge's current value.
       * @param {value} overrideValue The value to check for. If undefined, gets the current value.
       * @returns {string} The localised name for the current value.
       */
      getValue(overrideValue?: integer): string;
      /**
       * Returns the description of a challenge's current value.
       * @param {value} overrideValue The value to check for. If undefined, gets the current value.
       * @returns {string} The localised description for the current value.
       */
      getDescription(overrideValue?: integer): string;
      static loadChallenge(source: SingleTypeChallenge | any): SingleTypeChallenge;
  }
  /**
   * Implements a fresh start challenge.
   */
  export declare class FreshStartChallenge extends Challenge {
      constructor();
      apply(challengeType: ChallengeType, args: any[]): boolean;
      /**
       * @overrides
       */
      getDifficulty(): number;
      static loadChallenge(source: FreshStartChallenge | any): FreshStartChallenge;
  }
  /**
   * Lowers the amount of starter points available.
   */
  export declare class LowerStarterMaxCostChallenge extends Challenge {
      constructor();
      /**
       * @override
       */
      getValue(overrideValue?: integer): string;
      apply(challengeType: ChallengeType, args: any[]): boolean;
      static loadChallenge(source: LowerStarterMaxCostChallenge | any): LowerStarterMaxCostChallenge;
  }
  /**
   * Lowers the maximum cost of starters available.
   */
  export declare class LowerStarterPointsChallenge extends Challenge {
      constructor();
      /**
       * @override
       */
      getValue(overrideValue?: integer): string;
      apply(challengeType: ChallengeType, args: any[]): boolean;
      static loadChallenge(source: LowerStarterPointsChallenge | any): LowerStarterPointsChallenge;
  }
  /**
   * Apply all challenges of a given challenge type.
   * @param {GameMode} gameMode The current game mode
   * @param {ChallengeType} challengeType What challenge type to apply
   * @param {any[]} args Any args for that challenge type
   * @returns {boolean} True if any challenge was successfully applied.
   */
  export declare function applyChallenges(gameMode: PokeRogue.GameMode, challengeType: ChallengeType, ...args: any[]): boolean;
  export declare function copyChallenge(source: Challenge | any): Challenge;
  export declare const allChallenges: Challenge[];
  export declare function initChallenges(): void;
  export {};
  
}

declare namespace PokeRogue.data {
  //import BattleScene from "../battle-scene";
  //import { Starter } from "../ui/starter-select-ui-handler";
  export interface DailyRunConfig {
      seed: integer;
      starters: PokeRogue.ui.Starter;
  }
  export declare function fetchDailyRunSeed(): Promise<string>;
  export declare function getDailyRunStarters(scene: PokeRogue.BattleScene, seed: string): Starter[];
  
}

declare namespace PokeRogue.data {
  export interface TrainerTypeMessages {
      encounter?: string | string[];
      victory?: string | string[];
      defeat?: string | string[];
  }
  export interface TrainerTypeDialogue {
      [key: integer]: TrainerTypeMessages | Array<TrainerTypeMessages>;
  }
  export declare function getTrainerTypeDialogue(): TrainerTypeDialogue;
  export declare const trainerTypeDialogue: TrainerTypeDialogue;
  export declare const doubleBattleDialogue: {
      blue_red_double: {
          encounter: string[];
          victory: string[];
      };
      red_blue_double: {
          encounter: string[];
          victory: string[];
      };
      tate_liza_double: {
          encounter: string[];
          victory: string[];
      };
      liza_tate_double: {
          encounter: string[];
          victory: string[];
      };
      wallace_steven_double: {
          encounter: string[];
          victory: string[];
      };
      steven_wallace_double: {
          encounter: string[];
          victory: string[];
      };
      alder_iris_double: {
          encounter: string[];
          victory: string[];
      };
      iris_alder_double: {
          encounter: string[];
          victory: string[];
      };
      marnie_piers_double: {
          encounter: string[];
          victory: string[];
      };
      piers_marnie_double: {
          encounter: string[];
          victory: string[];
      };
  };
  export declare const battleSpecDialogue: {
      1: {
          encounter: string;
          firstStageWin: string;
          secondStageWin: string;
      };
  };
  export declare const miscDialogue: {
      ending: string[];
  };
  export declare function getCharVariantFromDialogue(message: string): string;
  export declare function initTrainerTypeDialogue(): void;
  
}

declare namespace PokeRogue.data {
  //import { Moves } from "#enums/moves";
  export declare const speciesEggMoves: {
      1: PokeRogue.enums.Moves[];
      4: PokeRogue.enums.Moves[];
      7: PokeRogue.enums.Moves[];
      10: PokeRogue.enums.Moves[];
      13: PokeRogue.enums.Moves[];
      16: PokeRogue.enums.Moves[];
      19: PokeRogue.enums.Moves[];
      21: PokeRogue.enums.Moves[];
      23: PokeRogue.enums.Moves[];
      27: PokeRogue.enums.Moves[];
      29: PokeRogue.enums.Moves[];
      32: PokeRogue.enums.Moves[];
      37: PokeRogue.enums.Moves[];
      41: PokeRogue.enums.Moves[];
      43: PokeRogue.enums.Moves[];
      46: PokeRogue.enums.Moves[];
      48: PokeRogue.enums.Moves[];
      50: PokeRogue.enums.Moves[];
      52: PokeRogue.enums.Moves[];
      54: PokeRogue.enums.Moves[];
      56: PokeRogue.enums.Moves[];
      58: PokeRogue.enums.Moves[];
      60: PokeRogue.enums.Moves[];
      63: PokeRogue.enums.Moves[];
      66: PokeRogue.enums.Moves[];
      69: PokeRogue.enums.Moves[];
      72: PokeRogue.enums.Moves[];
      74: PokeRogue.enums.Moves[];
      77: PokeRogue.enums.Moves[];
      79: PokeRogue.enums.Moves[];
      81: PokeRogue.enums.Moves[];
      83: PokeRogue.enums.Moves[];
      84: PokeRogue.enums.Moves[];
      86: PokeRogue.enums.Moves[];
      88: PokeRogue.enums.Moves[];
      90: PokeRogue.enums.Moves[];
      92: PokeRogue.enums.Moves[];
      95: PokeRogue.enums.Moves[];
      96: PokeRogue.enums.Moves[];
      98: PokeRogue.enums.Moves[];
      100: PokeRogue.enums.Moves[];
      102: PokeRogue.enums.Moves[];
      104: PokeRogue.enums.Moves[];
      108: PokeRogue.enums.Moves[];
      109: PokeRogue.enums.Moves[];
      111: PokeRogue.enums.Moves[];
      114: PokeRogue.enums.Moves[];
      115: PokeRogue.enums.Moves[];
      116: PokeRogue.enums.Moves[];
      118: PokeRogue.enums.Moves[];
      120: PokeRogue.enums.Moves[];
      123: PokeRogue.enums.Moves[];
      127: PokeRogue.enums.Moves[];
      128: PokeRogue.enums.Moves[];
      129: PokeRogue.enums.Moves[];
      131: PokeRogue.enums.Moves[];
      132: PokeRogue.enums.Moves[];
      133: PokeRogue.enums.Moves[];
      137: PokeRogue.enums.Moves[];
      138: PokeRogue.enums.Moves[];
      140: PokeRogue.enums.Moves[];
      142: PokeRogue.enums.Moves[];
      144: PokeRogue.enums.Moves[];
      145: PokeRogue.enums.Moves[];
      146: PokeRogue.enums.Moves[];
      147: PokeRogue.enums.Moves[];
      150: PokeRogue.enums.Moves[];
      151: PokeRogue.enums.Moves[];
      152: PokeRogue.enums.Moves[];
      155: PokeRogue.enums.Moves[];
      158: PokeRogue.enums.Moves[];
      161: PokeRogue.enums.Moves[];
      163: PokeRogue.enums.Moves[];
      165: PokeRogue.enums.Moves[];
      167: PokeRogue.enums.Moves[];
      170: PokeRogue.enums.Moves[];
      172: PokeRogue.enums.Moves[];
      173: PokeRogue.enums.Moves[];
      174: PokeRogue.enums.Moves[];
      175: PokeRogue.enums.Moves[];
      177: PokeRogue.enums.Moves[];
      179: PokeRogue.enums.Moves[];
      187: PokeRogue.enums.Moves[];
      190: PokeRogue.enums.Moves[];
      191: PokeRogue.enums.Moves[];
      193: PokeRogue.enums.Moves[];
      194: PokeRogue.enums.Moves[];
      198: PokeRogue.enums.Moves[];
      200: PokeRogue.enums.Moves[];
      201: PokeRogue.enums.Moves[];
      203: PokeRogue.enums.Moves[];
      204: PokeRogue.enums.Moves[];
      206: PokeRogue.enums.Moves[];
      207: PokeRogue.enums.Moves[];
      209: PokeRogue.enums.Moves[];
      211: PokeRogue.enums.Moves[];
      213: PokeRogue.enums.Moves[];
      214: PokeRogue.enums.Moves[];
      215: PokeRogue.enums.Moves[];
      216: PokeRogue.enums.Moves[];
      218: PokeRogue.enums.Moves[];
      220: PokeRogue.enums.Moves[];
      222: PokeRogue.enums.Moves[];
      223: PokeRogue.enums.Moves[];
      225: PokeRogue.enums.Moves[];
      227: PokeRogue.enums.Moves[];
      228: PokeRogue.enums.Moves[];
      231: PokeRogue.enums.Moves[];
      234: PokeRogue.enums.Moves[];
      235: PokeRogue.enums.Moves[];
      236: PokeRogue.enums.Moves[];
      238: PokeRogue.enums.Moves[];
      239: PokeRogue.enums.Moves[];
      240: PokeRogue.enums.Moves[];
      241: PokeRogue.enums.Moves[];
      243: PokeRogue.enums.Moves[];
      244: PokeRogue.enums.Moves[];
      245: PokeRogue.enums.Moves[];
      246: PokeRogue.enums.Moves[];
      249: PokeRogue.enums.Moves[];
      250: PokeRogue.enums.Moves[];
      251: PokeRogue.enums.Moves[];
      252: PokeRogue.enums.Moves[];
      255: PokeRogue.enums.Moves[];
      258: PokeRogue.enums.Moves[];
      261: PokeRogue.enums.Moves[];
      263: PokeRogue.enums.Moves[];
      265: PokeRogue.enums.Moves[];
      270: PokeRogue.enums.Moves[];
      273: PokeRogue.enums.Moves[];
      276: PokeRogue.enums.Moves[];
      278: PokeRogue.enums.Moves[];
      280: PokeRogue.enums.Moves[];
      283: PokeRogue.enums.Moves[];
      285: PokeRogue.enums.Moves[];
      287: PokeRogue.enums.Moves[];
      290: PokeRogue.enums.Moves[];
      293: PokeRogue.enums.Moves[];
      296: PokeRogue.enums.Moves[];
      298: PokeRogue.enums.Moves[];
      299: PokeRogue.enums.Moves[];
      300: PokeRogue.enums.Moves[];
      302: PokeRogue.enums.Moves[];
      303: PokeRogue.enums.Moves[];
      304: PokeRogue.enums.Moves[];
      307: PokeRogue.enums.Moves[];
      309: PokeRogue.enums.Moves[];
      311: PokeRogue.enums.Moves[];
      312: PokeRogue.enums.Moves[];
      313: PokeRogue.enums.Moves[];
      314: PokeRogue.enums.Moves[];
      316: PokeRogue.enums.Moves[];
      318: PokeRogue.enums.Moves[];
      320: PokeRogue.enums.Moves[];
      322: PokeRogue.enums.Moves[];
      324: PokeRogue.enums.Moves[];
      325: PokeRogue.enums.Moves[];
      327: PokeRogue.enums.Moves[];
      328: PokeRogue.enums.Moves[];
      331: PokeRogue.enums.Moves[];
      333: PokeRogue.enums.Moves[];
      335: PokeRogue.enums.Moves[];
      336: PokeRogue.enums.Moves[];
      337: PokeRogue.enums.Moves[];
      338: PokeRogue.enums.Moves[];
      339: PokeRogue.enums.Moves[];
      341: PokeRogue.enums.Moves[];
      343: PokeRogue.enums.Moves[];
      345: PokeRogue.enums.Moves[];
      347: PokeRogue.enums.Moves[];
      349: PokeRogue.enums.Moves[];
      351: PokeRogue.enums.Moves[];
      352: PokeRogue.enums.Moves[];
      353: PokeRogue.enums.Moves[];
      355: PokeRogue.enums.Moves[];
      357: PokeRogue.enums.Moves[];
      359: PokeRogue.enums.Moves[];
      360: PokeRogue.enums.Moves[];
      361: PokeRogue.enums.Moves[];
      363: PokeRogue.enums.Moves[];
      366: PokeRogue.enums.Moves[];
      369: PokeRogue.enums.Moves[];
      370: PokeRogue.enums.Moves[];
      371: PokeRogue.enums.Moves[];
      374: PokeRogue.enums.Moves[];
      377: PokeRogue.enums.Moves[];
      378: PokeRogue.enums.Moves[];
      379: PokeRogue.enums.Moves[];
      380: PokeRogue.enums.Moves[];
      381: PokeRogue.enums.Moves[];
      382: PokeRogue.enums.Moves[];
      383: PokeRogue.enums.Moves[];
      384: PokeRogue.enums.Moves[];
      385: PokeRogue.enums.Moves[];
      386: PokeRogue.enums.Moves[];
      387: PokeRogue.enums.Moves[];
      390: PokeRogue.enums.Moves[];
      393: PokeRogue.enums.Moves[];
      396: PokeRogue.enums.Moves[];
      399: PokeRogue.enums.Moves[];
      401: PokeRogue.enums.Moves[];
      403: PokeRogue.enums.Moves[];
      406: PokeRogue.enums.Moves[];
      408: PokeRogue.enums.Moves[];
      410: PokeRogue.enums.Moves[];
      412: PokeRogue.enums.Moves[];
      415: PokeRogue.enums.Moves[];
      417: PokeRogue.enums.Moves[];
      418: PokeRogue.enums.Moves[];
      420: PokeRogue.enums.Moves[];
      422: PokeRogue.enums.Moves[];
      425: PokeRogue.enums.Moves[];
      427: PokeRogue.enums.Moves[];
      431: PokeRogue.enums.Moves[];
      433: PokeRogue.enums.Moves[];
      434: PokeRogue.enums.Moves[];
      436: PokeRogue.enums.Moves[];
      438: PokeRogue.enums.Moves[];
      439: PokeRogue.enums.Moves[];
      440: PokeRogue.enums.Moves[];
      441: PokeRogue.enums.Moves[];
      442: PokeRogue.enums.Moves[];
      443: PokeRogue.enums.Moves[];
      446: PokeRogue.enums.Moves[];
      447: PokeRogue.enums.Moves[];
      449: PokeRogue.enums.Moves[];
      451: PokeRogue.enums.Moves[];
      453: PokeRogue.enums.Moves[];
      455: PokeRogue.enums.Moves[];
      456: PokeRogue.enums.Moves[];
      458: PokeRogue.enums.Moves[];
      459: PokeRogue.enums.Moves[];
      479: PokeRogue.enums.Moves[];
      480: PokeRogue.enums.Moves[];
      481: PokeRogue.enums.Moves[];
      482: PokeRogue.enums.Moves[];
      483: PokeRogue.enums.Moves[];
      484: PokeRogue.enums.Moves[];
      485: PokeRogue.enums.Moves[];
      486: PokeRogue.enums.Moves[];
      487: PokeRogue.enums.Moves[];
      488: PokeRogue.enums.Moves[];
      489: PokeRogue.enums.Moves[];
      490: PokeRogue.enums.Moves[];
      491: PokeRogue.enums.Moves[];
      492: PokeRogue.enums.Moves[];
      493: PokeRogue.enums.Moves[];
      494: PokeRogue.enums.Moves[];
      495: PokeRogue.enums.Moves[];
      498: PokeRogue.enums.Moves[];
      501: PokeRogue.enums.Moves[];
      504: PokeRogue.enums.Moves[];
      506: PokeRogue.enums.Moves[];
      509: PokeRogue.enums.Moves[];
      511: PokeRogue.enums.Moves[];
      513: PokeRogue.enums.Moves[];
      515: PokeRogue.enums.Moves[];
      517: PokeRogue.enums.Moves[];
      519: PokeRogue.enums.Moves[];
      522: PokeRogue.enums.Moves[];
      524: PokeRogue.enums.Moves[];
      527: PokeRogue.enums.Moves[];
      529: PokeRogue.enums.Moves[];
      531: PokeRogue.enums.Moves[];
      532: PokeRogue.enums.Moves[];
      535: PokeRogue.enums.Moves[];
      538: PokeRogue.enums.Moves[];
      539: PokeRogue.enums.Moves[];
      540: PokeRogue.enums.Moves[];
      543: PokeRogue.enums.Moves[];
      546: PokeRogue.enums.Moves[];
      548: PokeRogue.enums.Moves[];
      550: PokeRogue.enums.Moves[];
      551: PokeRogue.enums.Moves[];
      554: PokeRogue.enums.Moves[];
      556: PokeRogue.enums.Moves[];
      557: PokeRogue.enums.Moves[];
      559: PokeRogue.enums.Moves[];
      561: PokeRogue.enums.Moves[];
      562: PokeRogue.enums.Moves[];
      564: PokeRogue.enums.Moves[];
      566: PokeRogue.enums.Moves[];
      568: PokeRogue.enums.Moves[];
      570: PokeRogue.enums.Moves[];
      572: PokeRogue.enums.Moves[];
      574: PokeRogue.enums.Moves[];
      577: PokeRogue.enums.Moves[];
      580: PokeRogue.enums.Moves[];
      582: PokeRogue.enums.Moves[];
      585: PokeRogue.enums.Moves[];
      587: PokeRogue.enums.Moves[];
      588: PokeRogue.enums.Moves[];
      590: PokeRogue.enums.Moves[];
      592: PokeRogue.enums.Moves[];
      594: PokeRogue.enums.Moves[];
      595: PokeRogue.enums.Moves[];
      597: PokeRogue.enums.Moves[];
      599: PokeRogue.enums.Moves[];
      602: PokeRogue.enums.Moves[];
      605: PokeRogue.enums.Moves[];
      607: PokeRogue.enums.Moves[];
      610: PokeRogue.enums.Moves[];
      613: PokeRogue.enums.Moves[];
      615: PokeRogue.enums.Moves[];
      616: PokeRogue.enums.Moves[];
      618: PokeRogue.enums.Moves[];
      619: PokeRogue.enums.Moves[];
      621: PokeRogue.enums.Moves[];
      622: PokeRogue.enums.Moves[];
      624: PokeRogue.enums.Moves[];
      626: PokeRogue.enums.Moves[];
      627: PokeRogue.enums.Moves[];
      629: PokeRogue.enums.Moves[];
      631: PokeRogue.enums.Moves[];
      632: PokeRogue.enums.Moves[];
      633: PokeRogue.enums.Moves[];
      636: PokeRogue.enums.Moves[];
      638: PokeRogue.enums.Moves[];
      639: PokeRogue.enums.Moves[];
      640: PokeRogue.enums.Moves[];
      641: PokeRogue.enums.Moves[];
      642: PokeRogue.enums.Moves[];
      643: PokeRogue.enums.Moves[];
      644: PokeRogue.enums.Moves[];
      645: PokeRogue.enums.Moves[];
      646: PokeRogue.enums.Moves[];
      647: PokeRogue.enums.Moves[];
      648: PokeRogue.enums.Moves[];
      649: PokeRogue.enums.Moves[];
      650: PokeRogue.enums.Moves[];
      653: PokeRogue.enums.Moves[];
      656: PokeRogue.enums.Moves[];
      659: PokeRogue.enums.Moves[];
      661: PokeRogue.enums.Moves[];
      664: PokeRogue.enums.Moves[];
      667: PokeRogue.enums.Moves[];
      669: PokeRogue.enums.Moves[];
      672: PokeRogue.enums.Moves[];
      674: PokeRogue.enums.Moves[];
      676: PokeRogue.enums.Moves[];
      677: PokeRogue.enums.Moves[];
      679: PokeRogue.enums.Moves[];
      682: PokeRogue.enums.Moves[];
      684: PokeRogue.enums.Moves[];
      686: PokeRogue.enums.Moves[];
      688: PokeRogue.enums.Moves[];
      690: PokeRogue.enums.Moves[];
      692: PokeRogue.enums.Moves[];
      694: PokeRogue.enums.Moves[];
      696: PokeRogue.enums.Moves[];
      698: PokeRogue.enums.Moves[];
      701: PokeRogue.enums.Moves[];
      702: PokeRogue.enums.Moves[];
      703: PokeRogue.enums.Moves[];
      704: PokeRogue.enums.Moves[];
      707: PokeRogue.enums.Moves[];
      708: PokeRogue.enums.Moves[];
      710: PokeRogue.enums.Moves[];
      712: PokeRogue.enums.Moves[];
      714: PokeRogue.enums.Moves[];
      716: PokeRogue.enums.Moves[];
      717: PokeRogue.enums.Moves[];
      718: PokeRogue.enums.Moves[];
      719: PokeRogue.enums.Moves[];
      720: PokeRogue.enums.Moves[];
      721: PokeRogue.enums.Moves[];
      722: PokeRogue.enums.Moves[];
      725: PokeRogue.enums.Moves[];
      728: PokeRogue.enums.Moves[];
      731: PokeRogue.enums.Moves[];
      734: PokeRogue.enums.Moves[];
      736: PokeRogue.enums.Moves[];
      739: PokeRogue.enums.Moves[];
      741: PokeRogue.enums.Moves[];
      742: PokeRogue.enums.Moves[];
      744: PokeRogue.enums.Moves[];
      746: PokeRogue.enums.Moves[];
      747: PokeRogue.enums.Moves[];
      749: PokeRogue.enums.Moves[];
      751: PokeRogue.enums.Moves[];
      753: PokeRogue.enums.Moves[];
      755: PokeRogue.enums.Moves[];
      757: PokeRogue.enums.Moves[];
      759: PokeRogue.enums.Moves[];
      761: PokeRogue.enums.Moves[];
      764: PokeRogue.enums.Moves[];
      765: PokeRogue.enums.Moves[];
      766: PokeRogue.enums.Moves[];
      767: PokeRogue.enums.Moves[];
      769: PokeRogue.enums.Moves[];
      771: PokeRogue.enums.Moves[];
      772: PokeRogue.enums.Moves[];
      774: PokeRogue.enums.Moves[];
      775: PokeRogue.enums.Moves[];
      776: PokeRogue.enums.Moves[];
      777: PokeRogue.enums.Moves[];
      778: PokeRogue.enums.Moves[];
      779: PokeRogue.enums.Moves[];
      780: PokeRogue.enums.Moves[];
      781: PokeRogue.enums.Moves[];
      782: PokeRogue.enums.Moves[];
      785: PokeRogue.enums.Moves[];
      786: PokeRogue.enums.Moves[];
      787: PokeRogue.enums.Moves[];
      788: PokeRogue.enums.Moves[];
      789: PokeRogue.enums.Moves[];
      793: PokeRogue.enums.Moves[];
      794: PokeRogue.enums.Moves[];
      795: PokeRogue.enums.Moves[];
      796: PokeRogue.enums.Moves[];
      797: PokeRogue.enums.Moves[];
      798: PokeRogue.enums.Moves[];
      799: PokeRogue.enums.Moves[];
      800: PokeRogue.enums.Moves[];
      801: PokeRogue.enums.Moves[];
      802: PokeRogue.enums.Moves[];
      803: PokeRogue.enums.Moves[];
      805: PokeRogue.enums.Moves[];
      806: PokeRogue.enums.Moves[];
      807: PokeRogue.enums.Moves[];
      808: PokeRogue.enums.Moves[];
      810: PokeRogue.enums.Moves[];
      813: PokeRogue.enums.Moves[];
      816: PokeRogue.enums.Moves[];
      819: PokeRogue.enums.Moves[];
      821: PokeRogue.enums.Moves[];
      824: PokeRogue.enums.Moves[];
      827: PokeRogue.enums.Moves[];
      829: PokeRogue.enums.Moves[];
      831: PokeRogue.enums.Moves[];
      833: PokeRogue.enums.Moves[];
      835: PokeRogue.enums.Moves[];
      837: PokeRogue.enums.Moves[];
      840: PokeRogue.enums.Moves[];
      843: PokeRogue.enums.Moves[];
      845: PokeRogue.enums.Moves[];
      846: PokeRogue.enums.Moves[];
      848: PokeRogue.enums.Moves[];
      850: PokeRogue.enums.Moves[];
      852: PokeRogue.enums.Moves[];
      854: PokeRogue.enums.Moves[];
      856: PokeRogue.enums.Moves[];
      859: PokeRogue.enums.Moves[];
      868: PokeRogue.enums.Moves[];
      870: PokeRogue.enums.Moves[];
      871: PokeRogue.enums.Moves[];
      872: PokeRogue.enums.Moves[];
      874: PokeRogue.enums.Moves[];
      875: PokeRogue.enums.Moves[];
      876: PokeRogue.enums.Moves[];
      877: PokeRogue.enums.Moves[];
      878: PokeRogue.enums.Moves[];
      880: PokeRogue.enums.Moves[];
      881: PokeRogue.enums.Moves[];
      882: PokeRogue.enums.Moves[];
      883: PokeRogue.enums.Moves[];
      884: PokeRogue.enums.Moves[];
      885: PokeRogue.enums.Moves[];
      888: PokeRogue.enums.Moves[];
      889: PokeRogue.enums.Moves[];
      890: PokeRogue.enums.Moves[];
      891: PokeRogue.enums.Moves[];
      893: PokeRogue.enums.Moves[];
      894: PokeRogue.enums.Moves[];
      895: PokeRogue.enums.Moves[];
      896: PokeRogue.enums.Moves[];
      897: PokeRogue.enums.Moves[];
      898: PokeRogue.enums.Moves[];
      905: PokeRogue.enums.Moves[];
      906: PokeRogue.enums.Moves[];
      909: PokeRogue.enums.Moves[];
      912: PokeRogue.enums.Moves[];
      915: PokeRogue.enums.Moves[];
      917: PokeRogue.enums.Moves[];
      919: PokeRogue.enums.Moves[];
      921: PokeRogue.enums.Moves[];
      924: PokeRogue.enums.Moves[];
      926: PokeRogue.enums.Moves[];
      928: PokeRogue.enums.Moves[];
      931: PokeRogue.enums.Moves[];
      932: PokeRogue.enums.Moves[];
      935: PokeRogue.enums.Moves[];
      938: PokeRogue.enums.Moves[];
      940: PokeRogue.enums.Moves[];
      942: PokeRogue.enums.Moves[];
      944: PokeRogue.enums.Moves[];
      946: PokeRogue.enums.Moves[];
      948: PokeRogue.enums.Moves[];
      950: PokeRogue.enums.Moves[];
      951: PokeRogue.enums.Moves[];
      953: PokeRogue.enums.Moves[];
      955: PokeRogue.enums.Moves[];
      957: PokeRogue.enums.Moves[];
      960: PokeRogue.enums.Moves[];
      962: PokeRogue.enums.Moves[];
      963: PokeRogue.enums.Moves[];
      965: PokeRogue.enums.Moves[];
      967: PokeRogue.enums.Moves[];
      968: PokeRogue.enums.Moves[];
      969: PokeRogue.enums.Moves[];
      971: PokeRogue.enums.Moves[];
      973: PokeRogue.enums.Moves[];
      974: PokeRogue.enums.Moves[];
      976: PokeRogue.enums.Moves[];
      977: PokeRogue.enums.Moves[];
      978: PokeRogue.enums.Moves[];
      984: PokeRogue.enums.Moves[];
      985: PokeRogue.enums.Moves[];
      986: PokeRogue.enums.Moves[];
      987: PokeRogue.enums.Moves[];
      988: PokeRogue.enums.Moves[];
      989: PokeRogue.enums.Moves[];
      990: PokeRogue.enums.Moves[];
      991: PokeRogue.enums.Moves[];
      992: PokeRogue.enums.Moves[];
      993: PokeRogue.enums.Moves[];
      994: PokeRogue.enums.Moves[];
      995: PokeRogue.enums.Moves[];
      996: PokeRogue.enums.Moves[];
      999: PokeRogue.enums.Moves[];
      1001: PokeRogue.enums.Moves[];
      1002: PokeRogue.enums.Moves[];
      1003: PokeRogue.enums.Moves[];
      1004: PokeRogue.enums.Moves[];
      1005: PokeRogue.enums.Moves[];
      1006: PokeRogue.enums.Moves[];
      1007: PokeRogue.enums.Moves[];
      1008: PokeRogue.enums.Moves[];
      1009: PokeRogue.enums.Moves[];
      1010: PokeRogue.enums.Moves[];
      1012: PokeRogue.enums.Moves[];
      1014: PokeRogue.enums.Moves[];
      1015: PokeRogue.enums.Moves[];
      1016: PokeRogue.enums.Moves[];
      1017: PokeRogue.enums.Moves[];
      1020: PokeRogue.enums.Moves[];
      1021: PokeRogue.enums.Moves[];
      1022: PokeRogue.enums.Moves[];
      1023: PokeRogue.enums.Moves[];
      1024: PokeRogue.enums.Moves[];
      1025: PokeRogue.enums.Moves[];
      2019: PokeRogue.enums.Moves[];
      2027: PokeRogue.enums.Moves[];
      2037: PokeRogue.enums.Moves[];
      2050: PokeRogue.enums.Moves[];
      2052: PokeRogue.enums.Moves[];
      2074: PokeRogue.enums.Moves[];
      2088: PokeRogue.enums.Moves[];
      2670: PokeRogue.enums.Moves[];
      4052: PokeRogue.enums.Moves[];
      4077: PokeRogue.enums.Moves[];
      4079: PokeRogue.enums.Moves[];
      4083: PokeRogue.enums.Moves[];
      4144: PokeRogue.enums.Moves[];
      4145: PokeRogue.enums.Moves[];
      4146: PokeRogue.enums.Moves[];
      4222: PokeRogue.enums.Moves[];
      4263: PokeRogue.enums.Moves[];
      4554: PokeRogue.enums.Moves[];
      4562: PokeRogue.enums.Moves[];
      4618: PokeRogue.enums.Moves[];
      6058: PokeRogue.enums.Moves[];
      6100: PokeRogue.enums.Moves[];
      6211: PokeRogue.enums.Moves[];
      6215: PokeRogue.enums.Moves[];
      6570: PokeRogue.enums.Moves[];
      8128: PokeRogue.enums.Moves[];
      8194: PokeRogue.enums.Moves[];
      8901: PokeRogue.enums.Moves[];
  };
  export declare function initEggMoves(): void;
  
}

declare namespace PokeRogue.data {
  //import BattleScene from "../battle-scene";
  //import PokemonSpecies from "./pokemon-species";
  //import { VariantTier } from "../enums/variant-tiers";
  //import { PlayerPokemon } from "#app/field/pokemon";
  //import { EggTier } from "#enums/egg-type";
  //import { Species } from "#enums/species";
  //import { EggSourceType } from "#app/enums/egg-source-types.js";
  export declare const EGG_SEED = 1073741824;
  /** Egg options to override egg properties */
  export interface IEggOptions {
      /** Id. Used to check if egg type will be manaphy (id % 204 === 0) */
      id?: number;
      /** Timestamp when this egg got created */
      timestamp?: number;
      /** Defines if the egg got pulled from a gacha or not. If true, egg pity and pull statistics will be applyed.
       * Egg will be automaticly added to the game data.
       * NEEDS scene eggOption to work.
       */
      pulled?: boolean;
      /** Defines where the egg comes from. Applies specific modifiers.
       * Will also define the text displayed in the egg list.
       */
      sourceType?: EggSourceType;
      /** Needs to be defined if eggOption pulled is defined or if no species or isShiny is degined since this will be needed to generate them. */
      scene?: BattleScene;
      /** Sets the tier of the egg. Only species of this tier can be hatched from this egg.
       * Tier will be overriden if species eggOption is set.
       */
      tier?: EggTier;
      /** Sets how many waves it will take till this egg hatches. */
      hatchWaves?: number;
      /** Sets the exact species that will hatch from this egg.
       * Needs scene eggOption if not provided.
       */
      species?: Species;
      /** Defines if the hatched pokemon will be a shiny. */
      isShiny?: boolean;
      /** Defines the variant of the pokemon that will hatch from this egg. If no variantTier is given the normal variant rates will apply. */
      variantTier?: VariantTier;
      /** Defines which egg move will be unlocked. 3 = rare egg move. */
      eggMoveIndex?: number;
      /** Defines if the egg will hatch with the hidden ability of this species.
       *  If no hidden ability exist, a random one will get choosen.
       */
      overrideHiddenAbility?: boolean;
  }
  export declare class Egg {
      public _id;
      public _tier;
      public _sourceType;
      public _hatchWaves;
      public _timestamp;
      public _species;
      public _isShiny;
      public _variantTier;
      public _eggMoveIndex;
      public _overrideHiddenAbility;
      get id(): number;
      get tier(): EggTier;
      get sourceType(): EggSourceType | undefined;
      get hatchWaves(): number;
      set hatchWaves(value: number);
      get timestamp(): number;
      get species(): Species;
      get isShiny(): boolean;
      get variantTier(): VariantTier;
      get eggMoveIndex(): number;
      get overrideHiddenAbility(): boolean;
      constructor(eggOptions?: IEggOptions);
      isManaphyEgg(): boolean;
      getKey(): string;
      generatePlayerPokemon(scene: PokeRogue.BattleScene): PlayerPokemon;
      addEggToGameData(scene: PokeRogue.BattleScene): void;
      getEggDescriptor(): string;
      getEggHatchWavesMessage(): string;
      getEggTypeDescriptor(scene: PokeRogue.BattleScene): string;
      public rollEggMoveIndex;
      public getEggTierDefaultHatchWaves;
      public rollEggTier;
      public rollSpecies;
      /**
      * Rolls whether the egg is shiny or not.
      * @returns True if the egg is shiny
      **/
      public rollShiny;
      public rollVariant;
      public checkForPityTierOverrides;
      public increasePullStatistic;
      public getEggTierFromSpeciesStarterValue;
  }
  export declare function getLegendaryGachaSpeciesForTimestamp(scene: PokeRogue.BattleScene, timestamp: number): Species;
  /**
   * Check for a given species EggTier Value
   * @param species - Species for wich we will check the egg tier it belongs to
   * @returns The egg tier of a given pokemon species
   */
  export declare function getEggTierForSpecies(pokemonSpecies: PokeRogue.data.PokemonSpecies): EggTier;
  
}

declare namespace PokeRogue.data {
  export declare enum GrowthRate {
      ERRATIC = 0,
      FAST = 1,
      MEDIUM_FAST = 2,
      MEDIUM_SLOW = 3,
      SLOW = 4,
      FLUCTUATING = 5
  }
  export declare function getLevelTotalExp(level: integer, growthRate: GrowthRate): integer;
  export declare function getLevelRelExp(level: integer, growthRate: GrowthRate): number;
  export declare function getGrowthRateColor(growthRate: GrowthRate, shadow?: boolean): "#78c850" | "#f85888" | "#906060" | "#f8d030" | "#b8a038" | "#588040" | "#6890f0" | "#807870" | "#f08030" | "#c03028" | "#a040a0" | "#483850";
  
}

declare namespace PokeRogue.data {
  export declare enum Gender {
      GENDERLESS = -1,
      MALE = 0,
      FEMALE = 1
  }
  export declare function getGenderSymbol(gender: Gender): "" | "♂" | "♀";
  export declare function getGenderColor(gender: Gender, shadow?: boolean): "#f89890" | "#984038" | "#40c8f8" | "#006090" | "#ffffff";
  
}

declare namespace PokeRogue.data {
  //import { ChargeAnim } from "./battle-anims";
  //import { BattleStat } from "./battle-stat";
  //import Pokemon from "../field/pokemon";
  //import { StatusEffect } from "./status-effect";
  //import { Type } from "./type";
  //import { Constructor } from "#app/utils";
  //import * as Utils from "../utils";
  //import { WeatherType } from "./weather";
  //import { PokemonHeldItemModifier, BerryModifier } from "../modifier/modifier";
  //import { BattlerIndex } from "../battle";
  //import { Stat } from "./pokemon-stat";
  //import { TerrainType } from "./terrain";
  //import { Localizable } from "#app/interfaces/locales";
  //import { Abilities } from "#enums/abilities";
  //import { ArenaTagType } from "#enums/arena-tag-type";
  //import { BattlerTagType } from "#enums/battler-tag-type";
  //import { Moves } from "#enums/moves";
  export declare enum MoveCategory {
      PHYSICAL = 0,
      SPECIAL = 1,
      STATUS = 2
  }
  export declare enum MoveTarget {
      /** {@link https://bulbapedia.bulbagarden.net/wiki/Category:Moves_that_target_the_user Moves that target the User} */
      USER = 0,
      OTHER = 1,
      ALL_OTHERS = 2,
      NEAR_OTHER = 3,
      /** {@link https://bulbapedia.bulbagarden.net/wiki/Category:Moves_that_target_all_adjacent_Pok%C3%A9mon Moves that target all adjacent Pokemon} */
      ALL_NEAR_OTHERS = 4,
      NEAR_ENEMY = 5,
      /** {@link https://bulbapedia.bulbagarden.net/wiki/Category:Moves_that_target_all_adjacent_foes Moves that target all adjacent foes} */
      ALL_NEAR_ENEMIES = 6,
      RANDOM_NEAR_ENEMY = 7,
      ALL_ENEMIES = 8,
      /** {@link https://bulbapedia.bulbagarden.net/wiki/Category:Counterattacks Counterattacks} */
      ATTACKER = 9,
      /** {@link https://bulbapedia.bulbagarden.net/wiki/Category:Moves_that_target_one_adjacent_ally Moves that target one adjacent ally} */
      NEAR_ALLY = 10,
      ALLY = 11,
      USER_OR_NEAR_ALLY = 12,
      USER_AND_ALLIES = 13,
      /** {@link https://bulbapedia.bulbagarden.net/wiki/Category:Moves_that_target_all_Pok%C3%A9mon Moves that target all Pokemon} */
      ALL = 14,
      USER_SIDE = 15,
      /** {@link https://bulbapedia.bulbagarden.net/wiki/Category:Entry_hazard-creating_moves Entry hazard-creating moves} */
      ENEMY_SIDE = 16,
      BOTH_SIDES = 17,
      PARTY = 18,
      CURSE = 19
  }
  export declare enum MoveFlags {
      NONE = 0,
      MAKES_CONTACT = 1,
      IGNORE_PROTECT = 2,
      IGNORE_VIRTUAL = 4,
      SOUND_BASED = 8,
      HIDE_USER = 16,
      HIDE_TARGET = 32,
      BITING_MOVE = 64,
      PULSE_MOVE = 128,
      PUNCHING_MOVE = 256,
      SLICING_MOVE = 512,
      /**
       * Indicates a move should be affected by {@linkcode Abilities.RECKLESS}
       * @see {@linkcode Move.recklessMove()}
       */
      RECKLESS_MOVE = 1024,
      BALLBOMB_MOVE = 2048,
      POWDER_MOVE = 4096,
      DANCE_MOVE = 8192,
      WIND_MOVE = 16384,
      TRIAGE_MOVE = 32768,
      IGNORE_ABILITIES = 65536,
      /**
       * Enables all hits of a multi-hit move to be accuracy checked individually
       */
      CHECK_ALL_HITS = 131072
  }
  type MoveConditionFunc = (user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move) => boolean;
  type UserMoveConditionFunc = (user: PokeRogue.field.Pokemon, move: Move) => boolean;
  export class Move implements Localizable {
      id: PokeRogue.enums.Moves;
      name: string;
      type: PokeRogue.data.Type;
      defaultType: PokeRogue.data.Type;
      category: MoveCategory;
      moveTarget: MoveTarget;
      power: integer;
      accuracy: integer;
      pp: integer;
      effect: string;
      chance: integer;
      priority: integer;
      generation: integer;
      attrs: MoveAttr[];
      public conditions;
      public flags;
      public nameAppend;
      constructor(id: PokeRogue.enums.Moves, type: PokeRogue.data.Type, category: MoveCategory, defaultMoveTarget: MoveTarget, power: integer, accuracy: integer, pp: integer, chance: integer, priority: integer, generation: integer);
      localize(): void;
      /**
       * Get all move attributes that match `attrType`
       * @param attrType any attribute that extends {@linkcode MoveAttr}
       * @returns Array of attributes that match `attrType`, Empty Array if none match.
       */
      getAttrs<T extends MoveAttr>(attrType: PokeRogue.Constructor<T>): T[];
      /**
       * Check if a move has an attribute that matches `attrType`
       * @param attrType any attribute that extends {@linkcode MoveAttr}
       * @returns true if the move has attribute `attrType`
       */
      hasAttr<T extends MoveAttr>(attrType: PokeRogue.Constructor<T>): boolean;
      /**
       * Takes as input a boolean function and returns the first MoveAttr in attrs that matches true
       * @param attrPredicate
       * @returns the first {@linkcode MoveAttr} element in attrs that makes the input function return true
       */
      findAttr(attrPredicate: (attr: MoveAttr) => boolean): MoveAttr;
      /**
       * Adds a new MoveAttr to the move (appends to the attr array)
       * if the MoveAttr also comes with a condition, also adds that to the conditions array: {@linkcode MoveCondition}
       * @param AttrType {@linkcode MoveAttr} the constructor of a MoveAttr class
       * @param args the args needed to instantiate a the given class
       * @returns the called object {@linkcode Move}
       */
      attr<T extends PokeRogue.Constructor<MoveAttr>>(AttrType: T, ...args: ConstructorParameters<T>): this;
      /**
       * Adds a new MoveAttr to the move (appends to the attr array)
       * if the MoveAttr also comes with a condition, also adds that to the conditions array: {@linkcode MoveCondition}
       * Almost identical to {@link attr}, except you are passing in a MoveAttr object, instead of a constructor and it's arguments
       * @param attrAdd {@linkcode MoveAttr} the attribute to add
       * @returns the called object {@linkcode Move}
       */
      addAttr(attrAdd: MoveAttr): this;
      /**
       * Sets the move target of this move
       * @param moveTarget {@linkcode MoveTarget} the move target to set
       * @returns the called object {@linkcode Move}
       */
      target(moveTarget: MoveTarget): this;
      /**
       * Getter function that returns if this Move has a MoveFlag
       * @param flag {@linkcode MoveFlags} to check
       * @returns boolean
       */
      hasFlag(flag: MoveFlags): boolean;
      /**
       * Getter function that returns if the move hits multiple targets
       * @returns boolean
       */
      isMultiTarget(): boolean;
      /**
       * Getter function that returns if the move targets itself or an ally
       * @returns boolean
       */
      isAllyTarget(): boolean;
      /**
       * Checks if the move is immune to certain types.
       * Currently looks at cases of Grass types with powder moves and Dark types with moves affected by Prankster.
       * @param {Pokemon} user the source of this move
       * @param {Pokemon} target the target of this move
       * @param {Type} type the type of the move's target
       * @returns boolean
       */
      isTypeImmune(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, type: PokeRogue.data.Type): boolean;
      /**
       * Adds a move condition to the move
       * @param condition {@linkcode MoveCondition} or {@linkcode MoveConditionFunc}, appends to conditions array a new MoveCondition object
       * @returns the called object {@linkcode Move}
       */
      condition(condition: MoveCondition | MoveConditionFunc): this;
      /**
       * Marks the move as "partial": appends texts to the move name
       * @returns the called object {@linkcode Move}
       */
      partial(): this;
      /**
       * Marks the move as "unimplemented": appends texts to the move name
       * @returns the called object {@linkcode Move}
       */
      unimplemented(): this;
      /**
       * Sets the flags of the move
       * @param flag {@linkcode MoveFlags}
       * @param on a boolean, if True, then "ORs" the flag onto existing ones, if False then "XORs" the flag onto existing ones
       */
      public setFlag;
      /**
       * Sets the {@linkcode MoveFlags.MAKES_CONTACT} flag for the calling Move
       * @param makesContact The value (boolean) to set the flag to
       * @returns The {@linkcode Move} that called this function
       */
      makesContact(makesContact?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.IGNORE_PROTECT} flag for the calling Move
       * @param ignoresProtect The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.CURSE}
       * @returns The {@linkcode Move} that called this function
       */
      ignoresProtect(ignoresProtect?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.IGNORE_VIRTUAL} flag for the calling Move
       * @param ignoresVirtual The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.NATURE_POWER}
       * @returns The {@linkcode Move} that called this function
       */
      ignoresVirtual(ignoresVirtual?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.SOUND_BASED} flag for the calling Move
       * @param soundBased The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.UPROAR}
       * @returns The {@linkcode Move} that called this function
       */
      soundBased(soundBased?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.HIDE_USER} flag for the calling Move
       * @param hidesUser The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.TELEPORT}
       * @returns The {@linkcode Move} that called this function
       */
      hidesUser(hidesUser?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.HIDE_TARGET} flag for the calling Move
       * @param hidesTarget The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.WHIRLWIND}
       * @returns The {@linkcode Move} that called this function
       */
      hidesTarget(hidesTarget?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.BITING_MOVE} flag for the calling Move
       * @param bitingMove The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.BITE}
       * @returns The {@linkcode Move} that called this function
       */
      bitingMove(bitingMove?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.PULSE_MOVE} flag for the calling Move
       * @param pulseMove The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.WATER_PULSE}
       * @returns The {@linkcode Move} that called this function
       */
      pulseMove(pulseMove?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.PUNCHING_MOVE} flag for the calling Move
       * @param punchingMove The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.DRAIN_PUNCH}
       * @returns The {@linkcode Move} that called this function
       */
      punchingMove(punchingMove?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.SLICING_MOVE} flag for the calling Move
       * @param slicingMove The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.X_SCISSOR}
       * @returns The {@linkcode Move} that called this function
       */
      slicingMove(slicingMove?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.RECKLESS_MOVE} flag for the calling Move
       * @see {@linkcode Abilities.RECKLESS}
       * @param recklessMove The value to set the flag to
       * @returns The {@linkcode Move} that called this function
       */
      recklessMove(recklessMove?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.BALLBOMB_MOVE} flag for the calling Move
       * @param ballBombMove The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.ELECTRO_BALL}
       * @returns The {@linkcode Move} that called this function
       */
      ballBombMove(ballBombMove?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.POWDER_MOVE} flag for the calling Move
       * @param powderMove The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.STUN_SPORE}
       * @returns The {@linkcode Move} that called this function
       */
      powderMove(powderMove?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.DANCE_MOVE} flag for the calling Move
       * @param danceMove The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.PETAL_DANCE}
       * @returns The {@linkcode Move} that called this function
       */
      danceMove(danceMove?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.WIND_MOVE} flag for the calling Move
       * @param windMove The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.HURRICANE}
       * @returns The {@linkcode Move} that called this function
       */
      windMove(windMove?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.TRIAGE_MOVE} flag for the calling Move
       * @param triageMove The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.ABSORB}
       * @returns The {@linkcode Move} that called this function
       */
      triageMove(triageMove?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.IGNORE_ABILITIES} flag for the calling Move
       * @param ignoresAbilities sThe value (boolean) to set the flag to
       * example: @see {@linkcode Moves.SUNSTEEL_STRIKE}
       * @returns The {@linkcode Move} that called this function
       */
      ignoresAbilities(ignoresAbilities?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.CHECK_ALL_HITS} flag for the calling Move
       * @param checkAllHits The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.TRIPLE_AXEL}
       * @returns The {@linkcode Move} that called this function
       */
      checkAllHits(checkAllHits?: boolean): this;
      /**
       * Checks if the move flag applies to the pokemon(s) using/receiving the move
       * @param flag {@linkcode MoveFlags} MoveFlag to check on user and/or target
       * @param user {@linkcode Pokemon} the Pokemon using the move
       * @param target {@linkcode Pokemon} the Pokemon receiving the move
       * @returns boolean
       */
      checkFlag(flag: MoveFlags, user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon): boolean;
      /**
       * Applies each {@linkcode MoveCondition} of this move to the params
       * @param user {@linkcode Pokemon} to apply conditions to
       * @param target {@linkcode Pokemon} to apply conditions to
       * @param move {@linkcode Move} to apply conditions to
       * @returns boolean: false if any of the apply()'s return false, else true
       */
      applyConditions(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): boolean;
      /**
       * Sees if, given the target pokemon, a move fails on it (by looking at each {@linkcode MoveAttr} of this move
       * @param user {@linkcode Pokemon} using the move
       * @param target {@linkcode Pokemon} receiving the move
       * @param move {@linkcode Move} using the move
       * @param cancelled {@linkcode Utils.BooleanHolder} to hold boolean value
       * @returns string of the failed text, or null
       */
      getFailedText(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, cancelled: Utils.BooleanHolder): string | null;
      /**
       * Calculates the userBenefitScore across all the attributes and conditions
       * @param user {@linkcode Pokemon} using the move
       * @param target {@linkcode Pokemon} receiving the move
       * @param move {@linkcode Move} using the move
       * @returns integer representing the total benefitScore
       */
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
      /**
       * Calculates the targetBenefitScore across all the attributes
       * @param user {@linkcode Pokemon} using the move
       * @param target {@linkcode Pokemon} receiving the move
       * @param move {@linkcode Move} using the move
       * @returns integer representing the total benefitScore
       */
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class AttackMove extends Move {
      constructor(id: PokeRogue.enums.Moves, type: PokeRogue.data.Type, category: MoveCategory, power: integer, accuracy: integer, pp: integer, chance: integer, priority: integer, generation: integer);
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class StatusMove extends Move {
      constructor(id: PokeRogue.enums.Moves, type: PokeRogue.data.Type, accuracy: integer, pp: integer, chance: integer, priority: integer, generation: integer);
  }
  export declare class SelfStatusMove extends Move {
      constructor(id: PokeRogue.enums.Moves, type: PokeRogue.data.Type, accuracy: integer, pp: integer, chance: integer, priority: integer, generation: integer);
  }
  /**
   * Base class defining all {@linkcode Move} Attributes
   * @abstract
   * @see {@linkcode apply}
   */
  export declare abstract class MoveAttr {
      /** Should this {@linkcode Move} target the user? */
      selfTarget: boolean;
      constructor(selfTarget?: boolean);
      /**
       * Applies move attributes
       * @see {@linkcode applyMoveAttrsInternal}
       * @virtual
       * @param user {@linkcode Pokemon} using the move
       * @param target {@linkcode Pokemon} target of the move
       * @param move {@linkcode Move} with this attribute
       * @param args Set of unique arguments needed by this attribute
       * @returns true if application of the ability succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean | Promise<boolean>;
      /**
       * @virtual
       * @returns the {@linkcode MoveCondition} or {@linkcode MoveConditionFunc} for this {@linkcode Move}
       */
      getCondition(): MoveCondition | MoveConditionFunc;
      /**
       * @virtual
       * @param user {@linkcode Pokemon} using the move
       * @param target {@linkcode Pokemon} target of the move
       * @param move {@linkcode Move} with this attribute
       * @param cancelled {@linkcode Utils.BooleanHolder} which stores if the move should fail
       * @returns the string representing failure of this {@linkcode Move}
       */
      getFailedText(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, cancelled: Utils.BooleanHolder): string | null;
      /**
       * Used by the Enemy AI to rank an attack based on a given user
       * @see {@linkcode EnemyPokemon.getNextMove}
       * @virtual
       */
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
      /**
       * Used by the Enemy AI to rank an attack based on a given target
       * @see {@linkcode EnemyPokemon.getNextMove}
       * @virtual
       */
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare enum MoveEffectTrigger {
      PRE_APPLY = 0,
      POST_APPLY = 1,
      HIT = 2,
      /** Triggers one time after all target effects have applied */
      POST_TARGET = 3
  }
  /** Base class defining all Move Effect Attributes
   * @extends MoveAttr
   * @see {@linkcode apply}
   */
  export declare class MoveEffectAttr extends MoveAttr {
      /** Defines when this effect should trigger in the move's effect order
       * @see {@linkcode phases.MoveEffectPhase.start}
       */
      trigger: MoveEffectTrigger;
      /** Should this effect only apply on the first hit? */
      firstHitOnly: boolean;
      /** Should this effect only apply on the last hit? */
      lastHitOnly: boolean;
      /** Should this effect only apply on the first target hit? */
      firstTargetOnly: boolean;
      constructor(selfTarget?: boolean, trigger?: MoveEffectTrigger, firstHitOnly?: boolean, lastHitOnly?: boolean, firstTargetOnly?: boolean);
      /**
       * Determines whether the {@linkcode Move}'s effects are valid to {@linkcode apply}
       * @virtual
       * @param user {@linkcode Pokemon} using the move
       * @param target {@linkcode Pokemon} target of the move
       * @param move {@linkcode Move} with this attribute
       * @param args Set of unique arguments needed by this attribute
       * @returns true if basic application of the ability attribute should be possible
       */
      canApply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      /** Applies move effects so long as they are able based on {@linkcode canApply} */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean | Promise<boolean>;
      /**
       * Gets the used move's additional effect chance.
       * If user's ability has MoveEffectChanceMultiplierAbAttr or IgnoreMoveEffectsAbAttr modifies the base chance.
       * @param user {@linkcode Pokemon} using this move
       * @param target {@linkcode Pokemon} target of this move
       * @param move {@linkcode Move} being used
       * @param selfEffect {@linkcode Boolean} if move targets user.
       * @returns Move chance value.
       */
      getMoveChance(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, selfEffect?: Boolean): integer;
  }
  export declare class PreMoveMessageAttr extends MoveAttr {
      public message;
      constructor(message: string | ((user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move) => string));
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class StatusMoveTypeImmunityAttr extends MoveAttr {
      immuneType: PokeRogue.data.Type;
      constructor(immuneType: PokeRogue.data.Type);
  }
  export declare class IgnoreOpponentStatChangesAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class HighCritAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class CritOnlyAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class FixedDamageAttr extends MoveAttr {
      public damage;
      constructor(damage: integer);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getDamage(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class UserHpDamageAttr extends FixedDamageAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class TargetHalfHpDamageAttr extends FixedDamageAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
  }
  export declare class MatchHpAttr extends FixedDamageAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  type MoveFilter = (move: Move) => boolean;
  export declare class CounterDamageAttr extends FixedDamageAttr {
      public moveFilter;
      public multiplier;
      constructor(moveFilter: MoveFilter, multiplier: integer);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class LevelDamageAttr extends FixedDamageAttr {
      constructor();
      getDamage(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
  }
  export declare class RandomLevelDamageAttr extends FixedDamageAttr {
      constructor();
      getDamage(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
  }
  export declare class ModifiedDamageAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getModifiedDamage(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, damage: integer): integer;
  }
  export declare class SurviveDamageAttr extends ModifiedDamageAttr {
      getModifiedDamage(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, damage: number): number;
      getCondition(): MoveConditionFunc;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class RecoilAttr extends MoveEffectAttr {
      public useHp;
      public damageRatio;
      public unblockable;
      constructor(useHp?: boolean, damageRatio?: number, unblockable?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  /**
   * Attribute used for moves which self KO the user regardless if the move hits a target
   * @extends MoveEffectAttr
   * @see {@linkcode apply}
   **/
  export declare class SacrificialAttr extends MoveEffectAttr {
      constructor();
      /**
       * Deals damage to the user equal to their current hp
       * @param user {@linkcode Pokemon} that used the move
       * @param target {@linkcode Pokemon} target of the move
       * @param move {@linkcode Move} with this attribute
       * @param args N/A
       * @returns true if the function succeeds
       **/
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  /**
   * Attribute used for moves which self KO the user but only if the move hits a target
   * @extends MoveEffectAttr
   * @see {@linkcode apply}
   **/
  export declare class SacrificialAttrOnHit extends MoveEffectAttr {
      constructor();
      /**
       * Deals damage to the user equal to their current hp if the move lands
       * @param user {@linkcode Pokemon} that used the move
       * @param target {@linkcode Pokemon} target of the move
       * @param move {@linkcode Move} with this attribute
       * @param args N/A
       * @returns true if the function succeeds
       **/
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  /**
   * Attribute used for moves which cut the user's Max HP in half.
   * Triggers using {@linkcode MoveEffectTrigger.POST_TARGET}.
   * @extends MoveEffectAttr
   * @see {@linkcode apply}
   */
  export declare class HalfSacrificialAttr extends MoveEffectAttr {
      constructor();
      /**
       * Cut's the user's Max HP in half and displays the appropriate recoil message
       * @param user {@linkcode Pokemon} that used the move
       * @param target N/A
       * @param move {@linkcode Move} with this attribute
       * @param args N/A
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare enum MultiHitType {
      _2 = 0,
      _2_TO_5 = 1,
      _3 = 2,
      _10 = 3,
      BEAT_UP = 4
  }
  /**
   * Heals the user or target by {@linkcode healRatio} depending on the value of {@linkcode selfTarget}
   * @extends MoveEffectAttr
   * @see {@linkcode apply}
   */
  export declare class HealAttr extends MoveEffectAttr {
      /** The percentage of {@linkcode Stat.HP} to heal */
      public healRatio;
      /** Should an animation be shown? */
      public showAnim;
      constructor(healRatio?: number, showAnim?: boolean, selfTarget?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      /**
       * Creates a new {@linkcode PokemonHealPhase}.
       * This heals the target and shows the appropriate message.
       */
      addHealPhase(target: PokeRogue.field.Pokemon, healRatio: number): void;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  /**
   * Cures the user's party of non-volatile status conditions, ie. Heal Bell, Aromatherapy
   * @extends MoveEffectAttr
   * @see {@linkcode apply}
   */
  export declare class PartyStatusCureAttr extends MoveEffectAttr {
      /** Message to display after using move */
      public message;
      /** Skips mons with this ability, ie. Soundproof */
      public abilityCondition;
      constructor(message: string, abilityCondition: PokeRogue.enums.Abilities);
      canApply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      addPartyCurePhase(user: PokeRogue.field.Pokemon): void;
  }
  export declare class SacrificialFullRestoreAttr extends SacrificialAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
      getCondition(): MoveConditionFunc;
  }
  /**
   * Attribute used for moves which ignore type-based debuffs from weather, namely Hydro Steam.
   * Called during damage calculation after getting said debuff from getAttackTypeMultiplier in the Pokemon class.
   * @extends MoveAttr
   * @see {@linkcode apply}
   */
  export declare class IgnoreWeatherTypeDebuffAttr extends MoveAttr {
      /** The {@linkcode WeatherType} this move ignores */
      weather: PokeRogue.data.WeatherType;
      constructor(weather: PokeRogue.data.WeatherType);
      /**
       * Changes the type-based weather modifier if this move's power would be reduced by it
       * @param user {@linkcode Pokemon} that used the move
       * @param target N/A
       * @param move {@linkcode Move} with this attribute
       * @param args [0] {@linkcode Utils.NumberHolder} for arenaAttackTypeMultiplier
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare abstract class WeatherHealAttr extends HealAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      abstract getWeatherHealRatio(weatherType: PokeRogue.data.WeatherType): number;
  }
  export declare class PlantHealAttr extends WeatherHealAttr {
      getWeatherHealRatio(weatherType: PokeRogue.data.WeatherType): number;
  }
  export declare class SandHealAttr extends WeatherHealAttr {
      getWeatherHealRatio(weatherType: PokeRogue.data.WeatherType): number;
  }
  /**
   * Heals the target or the user by either {@linkcode normalHealRatio} or {@linkcode boostedHealRatio}
   * depending on the evaluation of {@linkcode condition}
   * @extends HealAttr
   * @see {@linkcode apply}
   */
  export declare class BoostHealAttr extends HealAttr {
      /** Healing received when {@linkcode condition} is false */
      public normalHealRatio?;
      /** Healing received when {@linkcode condition} is true */
      public boostedHealRatio?;
      /** The lambda expression to check against when boosting the healing value */
      public condition?;
      constructor(normalHealRatio?: number, boostedHealRatio?: number, showAnim?: boolean, selfTarget?: boolean, condition?: MoveConditionFunc);
      /**
       * @param user {@linkcode Pokemon} using the move
       * @param target {@linkcode Pokemon} target of the move
       * @param move {@linkcode Move} with this attribute
       * @param args N/A
       * @returns true if the move was successful
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Heals the target only if it is the ally
   * @extends HealAttr
   * @see {@linkcode apply}
   */
  export declare class HealOnAllyAttr extends HealAttr {
      /**
       * @param user {@linkcode Pokemon} using the move
       * @param target {@linkcode Pokemon} target of the move
       * @param move {@linkcode Move} with this attribute
       * @param args N/A
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Heals user as a side effect of a move that hits a target.
   * Healing is based on {@linkcode healRatio} * the amount of damage dealt or a stat of the target.
   * @extends MoveEffectAttr
   * @see {@linkcode apply}
   * @see {@linkcode getUserBenefitScore}
   */
  export declare class HitHealAttr extends MoveEffectAttr {
      public healRatio;
      public message;
      public healStat;
      constructor(healRatio?: number, healStat?: Stat);
      /**
       * Heals the user the determined amount and possibly displays a message about regaining health.
       * If the target has the {@linkcode ReverseDrainAbAttr}, all healing is instead converted
       * to damage to the user.
       * @param user {@linkcode Pokemon} using this move
       * @param target {@linkcode Pokemon} target of this move
       * @param move {@linkcode Move} being used
       * @param args N/A
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      /**
       * Used by the Enemy AI to rank an attack based on a given user
       * @param user {@linkcode Pokemon} using this move
       * @param target {@linkcode Pokemon} target of this move
       * @param move {@linkcode Move} being used
       * @returns an integer. Higher means enemy is more likely to use that move.
       */
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  /**
   * Attribute used for moves that change priority in a turn given a condition,
   * e.g. Grassy Glide
   * Called when move order is calculated in {@linkcode TurnStartPhase}.
   * @extends MoveAttr
   * @see {@linkcode apply}
   */
  export declare class IncrementMovePriorityAttr extends MoveAttr {
      /** The condition for a move's priority being incremented */
      public moveIncrementFunc;
      /** The amount to increment priority by, if condition passes. */
      public increaseAmount;
      constructor(moveIncrementFunc: (pokemon: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move) => boolean, increaseAmount?: number);
      /**
       * Increments move priority by set amount if condition passes
       * @param user {@linkcode Pokemon} using this move
       * @param target {@linkcode Pokemon} target of this move
       * @param move {@linkcode Move} being used
       * @param args [0] {@linkcode Utils.IntegerHolder} for move priority.
       * @returns true if function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used for attack moves that hit multiple times per use, e.g. Bullet Seed.
   *
   * Applied at the beginning of {@linkcode MoveEffectPhase}.
   *
   * @extends MoveAttr
   * @see {@linkcode apply}
   */
  export declare class MultiHitAttr extends MoveAttr {
      public multiHitType;
      constructor(multiHitType?: MultiHitType);
      /**
       * Set the hit count of an attack based on this attribute instance's {@linkcode MultiHitType}.
       * If the target has an immunity to this attack's types, the hit count will always be 1.
       *
       * @param user {@linkcode Pokemon} that used the attack
       * @param target {@linkcode Pokemon} targeted by the attack
       * @param move {@linkcode Move} being used
       * @param args [0] {@linkcode Utils.IntegerHolder} storing the hit count of the attack
       * @returns True
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
      /**
       * Calculate the number of hits that an attack should have given this attribute's
       * {@linkcode MultiHitType}.
       *
       * @param user {@linkcode Pokemon} using the attack
       * @param target {@linkcode Pokemon} targeted by the attack
       * @returns The number of hits this attack should deal
       */
      getHitCount(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon): integer;
  }
  export declare class ChangeMultiHitTypeAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class WaterShurikenMultiHitTypeAttr extends ChangeMultiHitTypeAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class StatusEffectAttr extends MoveEffectAttr {
      effect: PokeRogue.data.StatusEffect;
      cureTurn: integer;
      overrideStatus: boolean;
      constructor(effect: PokeRogue.data.StatusEffect, selfTarget?: boolean, cureTurn?: integer, overrideStatus?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
  }
  export declare class MultiStatusEffectAttr extends StatusEffectAttr {
      effects: PokeRogue.data.StatusEffect[];
      constructor(effects: PokeRogue.data.StatusEffect[], selfTarget?: boolean, cureTurn?: integer, overrideStatus?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
  }
  export declare class PsychoShiftEffectAttr extends MoveEffectAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
  }
  /**
   * The following needs to be implemented for Thief
   * "If the user faints due to the target's Ability (Rough Skin or Iron Barbs) or held Rocky Helmet, it cannot remove the target's held item."
   * "If Knock Off causes a Pokémon with the Sticky Hold Ability to faint, it can now remove that Pokémon's held item."
   */
  export declare class StealHeldItemChanceAttr extends MoveEffectAttr {
      public chance;
      constructor(chance: number);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
      getTargetHeldItems(target: PokeRogue.field.Pokemon): PokemonHeldItemModifier[];
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
  }
  /**
   * Removes a random held item (or berry) from target.
   * Used for Incinerate and Knock Off.
   * Not Implemented Cases: (Same applies for Thief)
   * "If the user faints due to the target's Ability (Rough Skin or Iron Barbs) or held Rocky Helmet, it cannot remove the target's held item."
   * "If Knock Off causes a Pokémon with the Sticky Hold Ability to faint, it can now remove that Pokémon's held item."
   */
  export declare class RemoveHeldItemAttr extends MoveEffectAttr {
      /** Optional restriction for item pool to berries only i.e. Differentiating Incinerate and Knock Off */
      public berriesOnly;
      constructor(berriesOnly: boolean);
      /**
       *
       * @param user {@linkcode Pokemon} that used the move
       * @param target Target {@linkcode Pokemon} that the moves applies to
       * @param move {@linkcode Move} that is used
       * @param args N/A
       * @returns {boolean} True if an item was removed
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getTargetHeldItems(target: PokeRogue.field.Pokemon): PokemonHeldItemModifier[];
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
  }
  /**
   * Attribute that causes targets of the move to eat a berry. Used for Teatime, Stuff Cheeks
   */
  export declare class EatBerryAttr extends MoveEffectAttr {
      protected chosenBerry: PokeRogue.modifier.BerryModifier;
      constructor();
      /**
       * Causes the target to eat a berry.
       * @param user {@linkcode Pokemon} Pokemon that used the move
       * @param target {@linkcode Pokemon} Pokemon that will eat a berry
       * @param move {@linkcode Move} The move being used
       * @param args Unused
       * @returns {boolean} true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getTargetHeldBerries(target: PokeRogue.field.Pokemon): BerryModifier[];
      reduceBerryModifier(target: PokeRogue.field.Pokemon): void;
      eatBerry(consumer: PokeRogue.field.Pokemon): void;
  }
  /**
   *  Attribute used for moves that steal a random berry from the target. The user then eats the stolen berry.
   *  Used for Pluck & Bug Bite.
   */
  export declare class StealEatBerryAttr extends EatBerryAttr {
      constructor();
      /**
       * User steals a random berry from the target and then eats it.
       * @param {Pokemon} user Pokemon that used the move and will eat the stolen berry
       * @param {Pokemon} target Pokemon that will have its berry stolen
       * @param {Move} move Move being used
       * @param {any[]} args Unused
       * @returns {boolean} true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Move attribute that signals that the move should cure a status effect
   * @extends MoveEffectAttr
   * @see {@linkcode apply()}
   */
  export declare class HealStatusEffectAttr extends MoveEffectAttr {
      /** List of Status Effects to cure */
      public effects;
      /**
       * @param selfTarget - Whether this move targets the user
       * @param ...effects - List of status effects to cure
       */
      constructor(selfTarget: boolean, ...effects: PokeRogue.data.StatusEffect[]);
      /**
       * @param user {@linkcode Pokemon} source of the move
       * @param target {@linkcode Pokemon} target of the move
       * @param move the {@linkcode Move} being used
       * @returns true if the status is cured
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      isOfEffect(effect: PokeRogue.data.StatusEffect): boolean;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class BypassSleepAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used for moves that bypass the burn damage reduction of physical moves, currently only facade
   * Called during damage calculation
   * @extends MoveAttr
   * @see {@linkcode apply}
   */
  export declare class BypassBurnDamageReductionAttr extends MoveAttr {
      /** Prevents the move's damage from being reduced by burn
       * @param user N/A
       * @param target N/A
       * @param move {@linkcode Move} with this attribute
       * @param args [0] {@linkcode Utils.BooleanHolder} for burnDamageReductionCancelled
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class WeatherChangeAttr extends MoveEffectAttr {
      public weatherType;
      constructor(weatherType: PokeRogue.data.WeatherType);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class ClearWeatherAttr extends MoveEffectAttr {
      public weatherType;
      constructor(weatherType: PokeRogue.data.WeatherType);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class TerrainChangeAttr extends MoveEffectAttr {
      public terrainType;
      constructor(terrainType: PokeRogue.data.TerrainType);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
  }
  export declare class ClearTerrainAttr extends MoveEffectAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class OneHitKOAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class OverrideMoveEffectAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean | Promise<boolean>;
  }
  export declare class ChargeAttr extends OverrideMoveEffectAttr {
      chargeAnim: PokeRogue.data.ChargeAnim;
      public chargeText;
      public tagType;
      public chargeEffect;
      sameTurn: boolean;
      followUpPriority: integer;
      constructor(chargeAnim: PokeRogue.data.ChargeAnim, chargeText: string, tagType?: BattlerTagType, chargeEffect?: boolean, sameTurn?: boolean, followUpPriority?: integer);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
      usedChargeEffect(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): boolean;
  }
  export declare class SunlightChargeAttr extends ChargeAttr {
      constructor(chargeAnim: PokeRogue.data.ChargeAnim, chargeText: string);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
  }
  export declare class ElectroShotChargeAttr extends ChargeAttr {
      public statIncreaseApplied;
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
  }
  export declare class DelayedAttackAttr extends OverrideMoveEffectAttr {
      tagType: PokeRogue.enums.ArenaTagType;
      chargeAnim: PokeRogue.data.ChargeAnim;
      public chargeText;
      constructor(tagType: PokeRogue.enums.ArenaTagType, chargeAnim: PokeRogue.data.ChargeAnim, chargeText: string);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
  }
  export declare class StatChangeAttr extends MoveEffectAttr {
      stats: PokeRogue.data.BattleStat[];
      levels: integer;
      public condition;
      public showMessage;
      constructor(stats: PokeRogue.data.BattleStat | BattleStat[], levels: integer, selfTarget?: boolean, condition?: MoveConditionFunc, showMessage?: boolean, firstHitOnly?: boolean, moveEffectTrigger?: MoveEffectTrigger, firstTargetOnly?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean | Promise<boolean>;
      getLevels(_user: PokeRogue.field.Pokemon): integer;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class PostVictoryStatChangeAttr extends MoveAttr {
      public stats;
      public levels;
      public condition;
      public showMessage;
      constructor(stats: PokeRogue.data.BattleStat | BattleStat[], levels: integer, selfTarget?: boolean, condition?: MoveConditionFunc, showMessage?: boolean, firstHitOnly?: boolean);
      applyPostVictory(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): void;
  }
  export declare class AcupressureStatChangeAttr extends MoveEffectAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean | Promise<boolean>;
  }
  export declare class GrowthStatChangeAttr extends StatChangeAttr {
      constructor();
      getLevels(user: PokeRogue.field.Pokemon): number;
  }
  export declare class HalfHpStatMaxAttr extends StatChangeAttr {
      constructor(stat: PokeRogue.data.BattleStat);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
      getCondition(): MoveConditionFunc;
  }
  export declare class CutHpStatBoostAttr extends StatChangeAttr {
      public cutRatio;
      constructor(stat: PokeRogue.data.BattleStat | BattleStat[], levels: integer, cutRatio: integer);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
      getCondition(): MoveConditionFunc;
  }
  export declare class CopyStatsAttr extends MoveEffectAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class InvertStatsAttr extends MoveEffectAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class ResetStatsAttr extends MoveEffectAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used for moves which swap the user and the target's stat changes.
   */
  export declare class SwapStatsAttr extends MoveEffectAttr {
      /**
       * Swaps the user and the target's stat changes.
       * @param user Pokemon that used the move
       * @param target The target of the move
       * @param move Move with this attribute
       * @param args N/A
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class HpSplitAttr extends MoveEffectAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
  }
  export declare class VariablePowerAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class LessPPMorePowerAttr extends VariablePowerAttr {
      /**
       * Power up moves when less PP user has
       * @param user {@linkcode Pokemon} using this move
       * @param target {@linkcode Pokemon} target of this move
       * @param move {@linkcode Move} being used
       * @param args [0] {@linkcode Utils.NumberHolder} of power
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class MovePowerMultiplierAttr extends VariablePowerAttr {
      public powerMultiplierFunc;
      constructor(powerMultiplier: (user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move) => number);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class BeatUpAttr extends VariablePowerAttr {
      /**
       * Gets the next party member to contribute to a Beat Up hit, and calculates the base power for it.
       * @param user Pokemon that used the move
       * @param _target N/A
       * @param _move Move with this attribute
       * @param args N/A
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class DoublePowerChanceAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare abstract class ConsecutiveUsePowerMultiplierAttr extends MovePowerMultiplierAttr {
      constructor(limit: integer, resetOnFail: boolean, resetOnLimit?: boolean, ...comboMoves: PokeRogue.enums.Moves[]);
      abstract getMultiplier(count: integer): number;
  }
  export declare class ConsecutiveUseDoublePowerAttr extends ConsecutiveUsePowerMultiplierAttr {
      getMultiplier(count: number): number;
  }
  export declare class ConsecutiveUseMultiBasePowerAttr extends ConsecutiveUsePowerMultiplierAttr {
      getMultiplier(count: number): number;
  }
  export declare class WeightPowerAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used for Electro Ball move.
   * @extends VariablePowerAttr
   * @see {@linkcode apply}
   **/
  export declare class ElectroBallPowerAttr extends VariablePowerAttr {
      /**
       * Move that deals more damage the faster {@linkcode BattleStat.SPD}
       * the user is compared to the target.
       * @param user Pokemon that used the move
       * @param target The target of the move
       * @param move Move with this attribute
       * @param args N/A
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used for Gyro Ball move.
   * @extends VariablePowerAttr
   * @see {@linkcode apply}
   **/
  export declare class GyroBallPowerAttr extends VariablePowerAttr {
      /**
       * Move that deals more damage the slower {@linkcode BattleStat.SPD}
       * the user is compared to the target.
       * @param user Pokemon that used the move
       * @param target The target of the move
       * @param move Move with this attribute
       * @param args N/A
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class LowHpPowerAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class CompareWeightPowerAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class HpPowerAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class OpponentHighHpPowerAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class FirstAttackDoublePowerAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class TurnDamagedDoublePowerAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class MagnitudePowerAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class AntiSunlightPowerDecreaseAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class FriendshipPowerAttr extends VariablePowerAttr {
      public invert;
      constructor(invert?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class HitCountPowerAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute that increases power based on the amount of positive stat increases.
   */
  export declare class StatChangeCountPowerAttr extends VariablePowerAttr {
      /**
       * @param {Pokemon} user The pokemon that is being used to calculate the amount of positive stats
       * @param {Pokemon} target N/A
       * @param {Move} move N/A
       * @param {any[]} args The argument for VariablePowerAttr, accumulates and sets the amount of power multiplied by stats
       * @returns {boolean} Returns true if attribute is applied
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Punishment normally has a base power of 60,
   * but gains 20 power for every increased stat stage the target has,
   * up to a maximum of 200 base power in total.
   */
  export declare class PunishmentPowerAttr extends VariablePowerAttr {
      public PUNISHMENT_MIN_BASE_POWER;
      public PUNISHMENT_MAX_BASE_POWER;
      /**
         * @param {Pokemon} user N/A
         * @param {Pokemon} target The pokemon that the move is being used against, as well as calculating the stats for the min/max base power
         * @param {Move} move N/A
         * @param {any[]} args The value that is being changed due to VariablePowerAttr
         * @returns Returns true if attribute is applied
         */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class PresentPowerAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class WaterShurikenPowerAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used for multi-hit moves that increase power in increments of the
   * move's base power for each hit, namely Triple Kick and Triple Axel.
   * @extends VariablePowerAttr
   * @see {@linkcode apply}
   */
  export declare class MultiHitPowerIncrementAttr extends VariablePowerAttr {
      /** The max number of base power increments allowed for this move */
      public maxHits;
      constructor(maxHits: integer);
      /**
       * Increases power of move in increments of the base power for the amount of times
       * the move hit. In the case that the move is extended, it will circle back to the
       * original base power of the move after incrementing past the maximum amount of
       * hits.
       * @param user {@linkcode Pokemon} that used the move
       * @param target {@linkcode Pokemon} that the move was used on
       * @param move {@linkcode Move} with this attribute
       * @param args [0] {@linkcode Utils.NumberHolder} for final calculated power of move
       * @returns true if attribute application succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class VariableAtkAttr extends MoveAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class TargetAtkUserAtkAttr extends VariableAtkAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class DefAtkAttr extends VariableAtkAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class VariableDefAttr extends MoveAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class DefDefAttr extends VariableDefAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class VariableAccuracyAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class ThunderAccuracyAttr extends VariableAccuracyAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used for moves which never miss
   * against Pokemon with the {@linkcode BattlerTagType.MINIMIZED}
   * @extends VariableAccuracyAttr
   * @see {@linkcode apply}
   */
  export declare class MinimizeAccuracyAttr extends VariableAccuracyAttr {
      /**
       * @see {@linkcode apply}
       * @param user N/A
       * @param target {@linkcode Pokemon} target of the move
       * @param move N/A
       * @param args [0] Accuracy of the move to be modified
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class ToxicAccuracyAttr extends VariableAccuracyAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class BlizzardAccuracyAttr extends VariableAccuracyAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class VariableMoveCategoryAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class PhotonGeyserCategoryAttr extends VariableMoveCategoryAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class TeraBlastCategoryAttr extends VariableMoveCategoryAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Change the move category to status when used on the ally
   * @extends VariableMoveCategoryAttr
   * @see {@linkcode apply}
   */
  export declare class StatusCategoryOnAllyAttr extends VariableMoveCategoryAttr {
      /**
       * @param user {@linkcode Pokemon} using the move
       * @param target {@linkcode Pokemon} target of the move
       * @param move {@linkcode Move} with this attribute
       * @param args [0] {@linkcode Utils.IntegerHolder} The category of the move
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class ShellSideArmCategoryAttr extends VariableMoveCategoryAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class VariableMoveTypeAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class FormChangeItemTypeAttr extends VariableMoveTypeAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class TechnoBlastTypeAttr extends VariableMoveTypeAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class AuraWheelTypeAttr extends VariableMoveTypeAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class RagingBullTypeAttr extends VariableMoveTypeAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class IvyCudgelTypeAttr extends VariableMoveTypeAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class WeatherBallTypeAttr extends VariableMoveTypeAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Changes the move's type to match the current terrain.
   * Has no effect if the user is not grounded.
   * @extends VariableMoveTypeAttr
   * @see {@linkcode apply}
   */
  export declare class TerrainPulseTypeAttr extends VariableMoveTypeAttr {
      /**
       * @param user {@linkcode Pokemon} using this move
       * @param target N/A
       * @param move N/A
       * @param args [0] {@linkcode Utils.IntegerHolder} The move's type to be modified
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class HiddenPowerTypeAttr extends VariableMoveTypeAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class MatchUserTypeAttr extends VariableMoveTypeAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class VariableMoveTypeMultiplierAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class NeutralDamageAgainstFlyingTypeMultiplierAttr extends VariableMoveTypeMultiplierAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class WaterSuperEffectTypeMultiplierAttr extends VariableMoveTypeMultiplierAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class IceNoEffectTypeAttr extends VariableMoveTypeMultiplierAttr {
      /**
       * Checks to see if the Target is Ice-Type or not. If so, the move will have no effect.
       * @param {Pokemon} user N/A
       * @param {Pokemon} target Pokemon that is being checked whether Ice-Type or not.
       * @param {Move} move N/A
       * @param {any[]} args Sets to false if the target is Ice-Type, so it should do no damage/no effect.
       * @returns {boolean} Returns true if move is successful, false if Ice-Type.
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class FlyingTypeMultiplierAttr extends VariableMoveTypeMultiplierAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class OneHitKOAccuracyAttr extends VariableAccuracyAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class SheerColdAccuracyAttr extends OneHitKOAccuracyAttr {
      /**
       * Changes the normal One Hit KO Accuracy Attr to implement the Gen VII changes,
       * where if the user is Ice-Type, it has more accuracy.
       * @param {Pokemon} user Pokemon that is using the move; checks the Pokemon's level.
       * @param {Pokemon} target Pokemon that is receiving the move; checks the Pokemon's level.
       * @param {Move} move N/A
       * @param {any[]} args Uses the accuracy argument, allowing to change it from either 0 if it doesn't pass
       * the first if/else, or 30/20 depending on the type of the user Pokemon.
       * @returns Returns true if move is successful, false if misses.
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class MissEffectAttr extends MoveAttr {
      public missEffectFunc;
      constructor(missEffectFunc: UserMoveConditionFunc);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class NoEffectAttr extends MoveAttr {
      public noEffectFunc;
      constructor(noEffectFunc: UserMoveConditionFunc);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class TypelessAttr extends MoveAttr {
  }
  /**
  * Attribute used for moves which ignore redirection effects, and always target their original target, i.e. Snipe Shot
  * Bypasses Storm Drain, Follow Me, Ally Switch, and the like.
  */
  export declare class BypassRedirectAttr extends MoveAttr {
  }
  export declare class DisableMoveAttr extends MoveEffectAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class FrenzyAttr extends MoveEffectAttr {
      constructor();
      canApply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare const frenzyMissFunc: UserMoveConditionFunc;
  export declare class AddBattlerTagAttr extends MoveEffectAttr {
      tagType: PokeRogue.enums.BattlerTagType;
      turnCountMin: integer;
      turnCountMax: integer;
      public failOnOverlap;
      constructor(tagType: PokeRogue.enums.BattlerTagType, selfTarget?: boolean, failOnOverlap?: boolean, turnCountMin?: integer, turnCountMax?: integer, lastHitOnly?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
      getTagTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class CurseAttr extends MoveEffectAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class LapseBattlerTagAttr extends MoveEffectAttr {
      tagTypes: PokeRogue.enums.BattlerTagType[];
      constructor(tagTypes: PokeRogue.enums.BattlerTagType[], selfTarget?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class RemoveBattlerTagAttr extends MoveEffectAttr {
      tagTypes: PokeRogue.enums.BattlerTagType[];
      constructor(tagTypes: PokeRogue.enums.BattlerTagType[], selfTarget?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class FlinchAttr extends AddBattlerTagAttr {
      constructor();
  }
  export declare class ConfuseAttr extends AddBattlerTagAttr {
      constructor(selfTarget?: boolean);
  }
  export declare class RechargeAttr extends AddBattlerTagAttr {
      constructor();
  }
  export declare class TrapAttr extends AddBattlerTagAttr {
      constructor(tagType: PokeRogue.enums.BattlerTagType);
  }
  export declare class ProtectAttr extends AddBattlerTagAttr {
      constructor(tagType?: BattlerTagType);
      getCondition(): MoveConditionFunc;
  }
  export declare class EndureAttr extends ProtectAttr {
      constructor();
  }
  export declare class IgnoreAccuracyAttr extends AddBattlerTagAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class AlwaysCritsAttr extends AddBattlerTagAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class FaintCountdownAttr extends AddBattlerTagAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used when a move hits a {@linkcode BattlerTagType} for double damage
   * @extends MoveAttr
  */
  export declare class HitsTagAttr extends MoveAttr {
      /** The {@linkcode BattlerTagType} this move hits */
      tagType: PokeRogue.enums.BattlerTagType;
      /** Should this move deal double damage against {@linkcode HitsTagAttr.tagType}? */
      doubleDamage: boolean;
      constructor(tagType: PokeRogue.enums.BattlerTagType, doubleDamage?: boolean);
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class AddArenaTagAttr extends MoveEffectAttr {
      tagType: PokeRogue.enums.ArenaTagType;
      turnCount: integer;
      public failOnOverlap;
      selfSideTarget: boolean;
      constructor(tagType: PokeRogue.enums.ArenaTagType, turnCount?: integer, failOnOverlap?: boolean, selfSideTarget?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  /**
   * Generic class for removing arena tags
   * @param tagTypes: The types of tags that can be removed
   * @param selfSideTarget: Is the user removing tags from its own side?
   */
  export declare class RemoveArenaTagsAttr extends MoveEffectAttr {
      tagTypes: PokeRogue.enums.ArenaTagType[];
      selfSideTarget: boolean;
      constructor(tagTypes: PokeRogue.enums.ArenaTagType[], selfSideTarget: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class AddArenaTrapTagAttr extends AddArenaTagAttr {
      getCondition(): MoveConditionFunc;
  }
  /**
   * Attribute used for Stone Axe and Ceaseless Edge.
   * Applies the given ArenaTrapTag when move is used.
   * @extends AddArenaTagAttr
   * @see {@linkcode apply}
   */
  export declare class AddArenaTrapTagHitAttr extends AddArenaTagAttr {
      /**
       * @param user {@linkcode Pokemon} using this move
       * @param target {@linkcode Pokemon} target of this move
       * @param move {@linkcode Move} being used
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class RemoveArenaTrapAttr extends MoveEffectAttr {
      public targetBothSides;
      constructor(targetBothSides?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class RemoveScreensAttr extends MoveEffectAttr {
      public targetBothSides;
      constructor(targetBothSides?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class SwapArenaTagsAttr extends MoveEffectAttr {
      SwapTags: PokeRogue.enums.ArenaTagType[];
      constructor(SwapTags: PokeRogue.enums.ArenaTagType[]);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used for Revival Blessing.
   * @extends MoveEffectAttr
   * @see {@linkcode apply}
   */
  export declare class RevivalBlessingAttr extends MoveEffectAttr {
      constructor(user?: boolean);
      /**
       *
       * @param user {@linkcode Pokemon} using this move
       * @param target {@linkcode Pokemon} target of this move
       * @param move {@linkcode Move} being used
       * @param args N/A
       * @returns Promise, true if function succeeds.
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class ForceSwitchOutAttr extends MoveEffectAttr {
      public user;
      public batonPass;
      constructor(user?: boolean, batonPass?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
      getCondition(): MoveConditionFunc;
      getFailedText(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, cancelled: Utils.BooleanHolder): string | null;
      getSwitchOutCondition(): MoveConditionFunc;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class RemoveTypeAttr extends MoveEffectAttr {
      public removedType;
      public messageCallback;
      constructor(removedType: PokeRogue.data.Type, messageCallback?: (user: PokeRogue.field.Pokemon) => void);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class CopyTypeAttr extends MoveEffectAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class CopyBiomeTypeAttr extends MoveEffectAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class ChangeTypeAttr extends MoveEffectAttr {
      public type;
      constructor(type: PokeRogue.data.Type);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class AddTypeAttr extends MoveEffectAttr {
      public type;
      constructor(type: PokeRogue.data.Type);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class FirstMoveTypeAttr extends MoveEffectAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class RandomMovesetMoveAttr extends OverrideMoveEffectAttr {
      public enemyMoveset;
      constructor(enemyMoveset?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class RandomMoveAttr extends OverrideMoveEffectAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
  }
  export declare class NaturePowerAttr extends OverrideMoveEffectAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
  }
  export declare class CopyMoveAttr extends OverrideMoveEffectAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  /**
   *  Attribute used for moves that reduce PP of the target's last used move.
   *  Used for Spite.
   */
  export declare class ReducePpMoveAttr extends MoveEffectAttr {
      protected reduction: number;
      constructor(reduction: number);
      /**
       * Reduces the PP of the target's last-used move by an amount based on this attribute instance's {@linkcode reduction}.
       *
       * @param user {@linkcode Pokemon} that used the attack
       * @param target {@linkcode Pokemon} targeted by the attack
       * @param move {@linkcode Move} being used
       * @param args N/A
       * @returns {boolean} true
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
  }
  /**
   *  Attribute used for moves that damage target, and then reduce PP of the target's last used move.
   *  Used for Eerie Spell.
   */
  export declare class AttackReducePpMoveAttr extends ReducePpMoveAttr {
      constructor(reduction: number);
      /**
       * Checks if the target has used a move prior to the attack. PP-reduction is applied through the super class if so.
       *
       * @param user {@linkcode Pokemon} that used the attack
       * @param target {@linkcode Pokemon} targeted by the attack
       * @param move {@linkcode Move} being used
       * @param args N/A
       * @returns {boolean} true
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class MovesetCopyMoveAttr extends OverrideMoveEffectAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class SketchAttr extends MoveEffectAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class AbilityChangeAttr extends MoveEffectAttr {
      ability: PokeRogue.enums.Abilities;
      constructor(ability: PokeRogue.enums.Abilities, selfTarget?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class AbilityCopyAttr extends MoveEffectAttr {
      copyToPartner: boolean;
      constructor(copyToPartner?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class AbilityGiveAttr extends MoveEffectAttr {
      copyToPartner: boolean;
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class SwitchAbilitiesAttr extends MoveEffectAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  /**
   * Attribute used for moves that suppress abilities like {@linkcode Moves.GASTRO_ACID}.
   * A suppressed ability cannot be activated.
   *
   * @extends MoveEffectAttr
   * @see {@linkcode apply}
   * @see {@linkcode getCondition}
   */
  export declare class SuppressAbilitiesAttr extends MoveEffectAttr {
      /** Sets ability suppression for the target pokemon and displays a message. */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      /** Causes the effect to fail when the target's ability is unsupressable or already suppressed. */
      getCondition(): MoveConditionFunc;
  }
  /**
   * Applies the effects of {@linkcode SuppressAbilitiesAttr} if the target has already moved this turn.
   * @extends MoveEffectAttr
   * @see {@linkcode Moves.CORE_ENFORCER} (the move which uses this effect)
   */
  export declare class SuppressAbilitiesIfActedAttr extends MoveEffectAttr {
      /**
       * If the target has already acted this turn, apply a {@linkcode SuppressAbilitiesAttr} effect unless the
       * abillity cannot be suppressed. This is a secondary effect and has no bearing on the success or failure of the move.
       *
       * @returns True if the move occurred, otherwise false. Note that true will be returned even if the target has not
       * yet moved or if the suppression failed to apply.
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class TransformAttr extends MoveEffectAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
  }
  export declare class DiscourageFrequentUseAttr extends MoveAttr {
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class MoneyAttr extends MoveEffectAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): boolean;
  }
  /**
   * Applies {@linkcode BattlerTagType.DESTINY_BOND} to the user.
   *
   * @extends MoveEffectAttr
   */
  export declare class DestinyBondAttr extends MoveEffectAttr {
      constructor();
      /**
       * Applies {@linkcode BattlerTagType.DESTINY_BOND} to the user.
       * @param user {@linkcode Pokemon} that is having the tag applied to.
       * @param target {@linkcode Pokemon} N/A
       * @param move {@linkcode Move} {@linkcode Move.DESTINY_BOND}
       * @param {any[]} args N/A
       * @returns true
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class LastResortAttr extends MoveAttr {
      getCondition(): MoveConditionFunc;
  }
  /**
   * The move only works if the target has a transferable held item
   * @extends MoveAttr
   * @see {@linkcode getCondition}
   */
  export declare class AttackedByItemAttr extends MoveAttr {
      /**
       * @returns the {@linkcode MoveConditionFunc} for this {@linkcode Move}
       */
      getCondition(): MoveConditionFunc;
  }
  export declare class VariableTargetAttr extends MoveAttr {
      public targetChangeFunc;
      constructor(targetChange: (user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move) => number);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export type MoveAttrFilter = (attr: MoveAttr) => boolean;
  export declare function applyMoveAttrs(attrType: PokeRogue.Constructor<MoveAttr>, user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, ...args: any[]): Promise<void>;
  export declare function applyFilteredMoveAttrs(attrFilter: MoveAttrFilter, user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, ...args: any[]): Promise<void>;
  export declare class MoveCondition {
      protected func: MoveConditionFunc;
      constructor(func: MoveConditionFunc);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): boolean;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class FirstMoveCondition extends MoveCondition {
      constructor();
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class hitsSameTypeAttr extends VariableMoveTypeMultiplierAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export type MoveTargetSet = {
      targets: PokeRogue.BattlerIndex[];
      multiple: boolean;
  };
  export declare function getMoveTargets(user: PokeRogue.field.Pokemon, move: PokeRogue.enums.Moves): MoveTargetSet;
  export declare const allMoves: Move[];
  export declare function initMoves(): void;
  export {};
  
}

declare namespace PokeRogue.data {
  //import { Stat } from "./pokemon-stat";
  //import { UiTheme } from "#enums/ui-theme";
  export declare enum Nature {
      HARDY = 0,
      LONELY = 1,
      BRAVE = 2,
      ADAMANT = 3,
      NAUGHTY = 4,
      BOLD = 5,
      DOCILE = 6,
      RELAXED = 7,
      IMPISH = 8,
      LAX = 9,
      TIMID = 10,
      HASTY = 11,
      SERIOUS = 12,
      JOLLY = 13,
      NAIVE = 14,
      MODEST = 15,
      MILD = 16,
      QUIET = 17,
      BASHFUL = 18,
      RASH = 19,
      CALM = 20,
      GENTLE = 21,
      SASSY = 22,
      CAREFUL = 23,
      QUIRKY = 24
  }
  export declare function getNatureName(nature: Nature, includeStatEffects?: boolean, forStarterSelect?: boolean, ignoreBBCode?: boolean, uiTheme?: UiTheme): string;
  export declare function getNatureStatMultiplier(nature: Nature, stat: PokeRogue.data.Stat): number;
  
}

declare namespace PokeRogue.data {
  //import BattleScene from "../battle-scene";
  export declare enum PokeballType {
      POKEBALL = 0,
      GREAT_BALL = 1,
      ULTRA_BALL = 2,
      ROGUE_BALL = 3,
      MASTER_BALL = 4,
      LUXURY_BALL = 5
  }
  export declare const MAX_PER_TYPE_POKEBALLS: integer;
  export declare function getPokeballAtlasKey(type: PokeballType): string;
  export declare function getPokeballName(type: PokeballType): string;
  export declare function getPokeballCatchMultiplier(type: PokeballType): number;
  export declare function getPokeballTintColor(type: PokeballType): number;
  export declare function doPokeballBounceAnim(scene: PokeRogue.BattleScene, pokeball: Phaser.GameObjects.Sprite, y1: number, y2: number, baseBounceDuration: integer, callback: Function): void;
  
}

declare namespace PokeRogue.data {
  //import Pokemon from "../field/pokemon";
  //import { Species } from "#enums/species";
  export declare enum SpeciesWildEvolutionDelay {
      NONE = 0,
      SHORT = 1,
      MEDIUM = 2,
      LONG = 3,
      VERY_LONG = 4
  }
  export declare enum EvolutionItem {
      NONE = 0,
      LINKING_CORD = 1,
      SUN_STONE = 2,
      MOON_STONE = 3,
      LEAF_STONE = 4,
      FIRE_STONE = 5,
      WATER_STONE = 6,
      THUNDER_STONE = 7,
      ICE_STONE = 8,
      DUSK_STONE = 9,
      DAWN_STONE = 10,
      SHINY_STONE = 11,
      CRACKED_POT = 12,
      SWEET_APPLE = 13,
      TART_APPLE = 14,
      STRAWBERRY_SWEET = 15,
      UNREMARKABLE_TEACUP = 16,
      CHIPPED_POT = 51,
      BLACK_AUGURITE = 52,
      GALARICA_CUFF = 53,
      GALARICA_WREATH = 54,
      PEAT_BLOCK = 55,
      AUSPICIOUS_ARMOR = 56,
      MALICIOUS_ARMOR = 57,
      MASTERPIECE_TEACUP = 58,
      METAL_ALLOY = 59,
      SCROLL_OF_DARKNESS = 60,
      SCROLL_OF_WATERS = 61,
      SYRUPY_APPLE = 62
  }
  export type EvolutionConditionPredicate = (p: PokeRogue.field.Pokemon) => boolean;
  export type EvolutionConditionEnforceFunc = (p: PokeRogue.field.Pokemon) => void;
  export declare class SpeciesFormEvolution {
      speciesId: PokeRogue.enums.Species;
      preFormKey: string;
      evoFormKey: string;
      level: integer;
      item: EvolutionItem;
      condition: SpeciesEvolutionCondition;
      wildDelay: SpeciesWildEvolutionDelay;
      constructor(speciesId: PokeRogue.enums.Species, preFormKey: string, evoFormKey: string, level: integer, item: EvolutionItem, condition: SpeciesEvolutionCondition, wildDelay?: SpeciesWildEvolutionDelay);
  }
  export declare class SpeciesEvolution extends SpeciesFormEvolution {
      constructor(speciesId: PokeRogue.enums.Species, level: integer, item: EvolutionItem, condition: SpeciesEvolutionCondition, wildDelay?: SpeciesWildEvolutionDelay);
  }
  export declare class FusionSpeciesFormEvolution extends SpeciesFormEvolution {
      primarySpeciesId: PokeRogue.enums.Species;
      constructor(primarySpeciesId: PokeRogue.enums.Species, evolution: SpeciesFormEvolution);
  }
  export declare class SpeciesEvolutionCondition {
      predicate: EvolutionConditionPredicate;
      enforceFunc: EvolutionConditionEnforceFunc;
      constructor(predicate: EvolutionConditionPredicate, enforceFunc?: EvolutionConditionEnforceFunc);
  }
  export declare class SpeciesFriendshipEvolutionCondition extends SpeciesEvolutionCondition {
      constructor(friendshipAmount: integer, predicate?: EvolutionConditionPredicate, enforceFunc?: EvolutionConditionEnforceFunc);
  }
  interface PokemonEvolutions {
      [key: string]: SpeciesFormEvolution[];
  }
  export declare const pokemonEvolutions: PokemonEvolutions;
  interface PokemonPrevolutions {
      [key: string]: Species;
  }
  export declare const pokemonPrevolutions: PokemonPrevolutions;
  export declare function initPokemonPrevolutions(): void;
  export {};
  
}

declare namespace PokeRogue.data {
  //import Pokemon from "../field/pokemon";
  //import { StatusEffect } from "./status-effect";
  //import { Constructor } from "#app/utils";
  //import { Moves } from "#enums/moves";
  //import { Species } from "#enums/species";
  //import { TimeOfDay } from "#enums/time-of-day";
  export declare enum FormChangeItem {
      NONE = 0,
      ABOMASITE = 1,
      ABSOLITE = 2,
      AERODACTYLITE = 3,
      AGGRONITE = 4,
      ALAKAZITE = 5,
      ALTARIANITE = 6,
      AMPHAROSITE = 7,
      AUDINITE = 8,
      BANETTITE = 9,
      BEEDRILLITE = 10,
      BLASTOISINITE = 11,
      BLAZIKENITE = 12,
      CAMERUPTITE = 13,
      CHARIZARDITE_X = 14,
      CHARIZARDITE_Y = 15,
      DIANCITE = 16,
      GALLADITE = 17,
      GARCHOMPITE = 18,
      GARDEVOIRITE = 19,
      GENGARITE = 20,
      GLALITITE = 21,
      GYARADOSITE = 22,
      HERACRONITE = 23,
      HOUNDOOMINITE = 24,
      KANGASKHANITE = 25,
      LATIASITE = 26,
      LATIOSITE = 27,
      LOPUNNITE = 28,
      LUCARIONITE = 29,
      MANECTITE = 30,
      MAWILITE = 31,
      MEDICHAMITE = 32,
      METAGROSSITE = 33,
      MEWTWONITE_X = 34,
      MEWTWONITE_Y = 35,
      PIDGEOTITE = 36,
      PINSIRITE = 37,
      RAYQUAZITE = 38,
      SABLENITE = 39,
      SALAMENCITE = 40,
      SCEPTILITE = 41,
      SCIZORITE = 42,
      SHARPEDONITE = 43,
      SLOWBRONITE = 44,
      STEELIXITE = 45,
      SWAMPERTITE = 46,
      TYRANITARITE = 47,
      VENUSAURITE = 48,
      BLUE_ORB = 50,
      RED_ORB = 51,
      SHARP_METEORITE = 52,
      HARD_METEORITE = 53,
      SMOOTH_METEORITE = 54,
      ADAMANT_CRYSTAL = 55,
      LUSTROUS_GLOBE = 56,
      GRISEOUS_CORE = 57,
      REVEAL_GLASS = 58,
      GRACIDEA = 59,
      MAX_MUSHROOMS = 60,
      DARK_STONE = 61,
      LIGHT_STONE = 62,
      PRISON_BOTTLE = 63,
      N_LUNARIZER = 64,
      N_SOLARIZER = 65,
      RUSTED_SWORD = 66,
      RUSTED_SHIELD = 67,
      ICY_REINS_OF_UNITY = 68,
      SHADOW_REINS_OF_UNITY = 69,
      WELLSPRING_MASK = 70,
      HEARTHFLAME_MASK = 71,
      CORNERSTONE_MASK = 72,
      SHOCK_DRIVE = 73,
      BURN_DRIVE = 74,
      CHILL_DRIVE = 75,
      DOUSE_DRIVE = 76,
      FIST_PLATE = 100,
      SKY_PLATE = 101,
      TOXIC_PLATE = 102,
      EARTH_PLATE = 103,
      STONE_PLATE = 104,
      INSECT_PLATE = 105,
      SPOOKY_PLATE = 106,
      IRON_PLATE = 107,
      FLAME_PLATE = 108,
      SPLASH_PLATE = 109,
      MEADOW_PLATE = 110,
      ZAP_PLATE = 111,
      MIND_PLATE = 112,
      ICICLE_PLATE = 113,
      DRACO_PLATE = 114,
      DREAD_PLATE = 115,
      PIXIE_PLATE = 116,
      BLANK_PLATE = 117,// TODO: Find a potential use for this
      LEGEND_PLATE = 118,// TODO: Find a potential use for this
      FIGHTING_MEMORY = 119,
      FLYING_MEMORY = 120,
      POISON_MEMORY = 121,
      GROUND_MEMORY = 122,
      ROCK_MEMORY = 123,
      BUG_MEMORY = 124,
      GHOST_MEMORY = 125,
      STEEL_MEMORY = 126,
      FIRE_MEMORY = 127,
      WATER_MEMORY = 128,
      GRASS_MEMORY = 129,
      ELECTRIC_MEMORY = 130,
      PSYCHIC_MEMORY = 131,
      ICE_MEMORY = 132,
      DRAGON_MEMORY = 133,
      DARK_MEMORY = 134,
      FAIRY_MEMORY = 135,
      BLANK_MEMORY = 136
  }
  export type SpeciesFormChangeConditionPredicate = (p: PokeRogue.field.Pokemon) => boolean;
  export type SpeciesFormChangeConditionEnforceFunc = (p: PokeRogue.field.Pokemon) => void;
  export declare class SpeciesFormChange {
      speciesId: PokeRogue.enums.Species;
      preFormKey: string;
      formKey: string;
      trigger: SpeciesFormChangeTrigger;
      quiet: boolean;
      public conditions;
      constructor(speciesId: PokeRogue.enums.Species, preFormKey: string, evoFormKey: string, trigger: SpeciesFormChangeTrigger, quiet?: boolean, ...conditions: SpeciesFormChangeCondition[]);
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
      findTrigger(triggerType: PokeRogue.Constructor<SpeciesFormChangeTrigger>): SpeciesFormChangeTrigger;
  }
  export declare class SpeciesFormChangeCondition {
      predicate: SpeciesFormChangeConditionPredicate;
      enforceFunc: SpeciesFormChangeConditionEnforceFunc;
      constructor(predicate: SpeciesFormChangeConditionPredicate, enforceFunc?: SpeciesFormChangeConditionEnforceFunc);
  }
  export declare abstract class SpeciesFormChangeTrigger {
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
      hasTriggerType(triggerType: PokeRogue.Constructor<SpeciesFormChangeTrigger>): boolean;
  }
  export declare class SpeciesFormChangeManualTrigger extends SpeciesFormChangeTrigger {
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  export declare class SpeciesFormChangeCompoundTrigger {
      triggers: SpeciesFormChangeTrigger[];
      constructor(...triggers: SpeciesFormChangeTrigger[]);
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
      hasTriggerType(triggerType: PokeRogue.Constructor<SpeciesFormChangeTrigger>): boolean;
  }
  export declare class SpeciesFormChangeItemTrigger extends SpeciesFormChangeTrigger {
      item: FormChangeItem;
      active: boolean;
      constructor(item: FormChangeItem, active?: boolean);
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  export declare class SpeciesFormChangeTimeOfDayTrigger extends SpeciesFormChangeTrigger {
      timesOfDay: PokeRogue.enums.TimeOfDay[];
      constructor(...timesOfDay: PokeRogue.enums.TimeOfDay[]);
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  export declare class SpeciesFormChangeActiveTrigger extends SpeciesFormChangeTrigger {
      active: boolean;
      constructor(active?: boolean);
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  export declare class SpeciesFormChangeStatusEffectTrigger extends SpeciesFormChangeTrigger {
      statusEffects: PokeRogue.data.StatusEffect[];
      invert: boolean;
      constructor(statusEffects: PokeRogue.data.StatusEffect | StatusEffect[], invert?: boolean);
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  export declare class SpeciesFormChangeMoveLearnedTrigger extends SpeciesFormChangeTrigger {
      move: PokeRogue.enums.Moves;
      known: boolean;
      constructor(move: PokeRogue.enums.Moves, known?: boolean);
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  export declare abstract class SpeciesFormChangeMoveTrigger extends SpeciesFormChangeTrigger {
      movePredicate: (m: PokeRogue.enums.Moves) => boolean;
      used: boolean;
      constructor(move: PokeRogue.enums.Moves | ((m: PokeRogue.enums.Moves) => boolean), used?: boolean);
  }
  export declare class SpeciesFormChangePreMoveTrigger extends SpeciesFormChangeMoveTrigger {
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  export declare class SpeciesFormChangePostMoveTrigger extends SpeciesFormChangeMoveTrigger {
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  export declare class SpeciesDefaultFormMatchTrigger extends SpeciesFormChangeTrigger {
      public formKey;
      constructor(formKey: string);
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  export declare function getSpeciesFormChangeMessage(pokemon: PokeRogue.field.Pokemon, formChange: SpeciesFormChange, preName: string): string;
  interface PokemonFormChanges {
      [key: string]: SpeciesFormChange[];
  }
  export declare const pokemonFormChanges: PokemonFormChanges;
  export declare function initPokemonForms(): void;
  export {};
  
}

declare namespace PokeRogue.data {
  //import { Moves } from "#enums/moves";
  export type LevelMoves = ([integer, Moves])[];
  interface PokemonSpeciesLevelMoves {
      [key: integer]: LevelMoves;
  }
  interface PokemonFormLevelMoves {
      [key: integer]: LevelMoves;
  }
  interface PokemonSpeciesFormLevelMoves {
      [key: integer]: PokemonFormLevelMoves;
  }
  export declare const pokemonSpeciesLevelMoves: PokemonSpeciesLevelMoves;
  export declare const pokemonFormLevelMoves: PokemonSpeciesFormLevelMoves;
  export {};
  
}

declare namespace PokeRogue.data {
  //import BattleScene, { AnySound } from "../battle-scene";
  //import { Variant } from "./variant";
  //import { GrowthRate } from "./exp";
  //import { Type } from "./type";
  //import { LevelMoves } from "./pokemon-level-moves";
  //import { StarterMoveset } from "../system/game-data";
  //import { GameMode } from "../game-mode";
  //import { Localizable } from "#app/interfaces/locales";
  //import { Stat } from "./pokemon-stat";
  //import { Abilities } from "#enums/abilities";
  //import { PartyMemberStrength } from "#enums/party-member-strength";
  //import { Species } from "#enums/species";
  export declare enum Region {
      NORMAL = 0,
      ALOLA = 1,
      GALAR = 2,
      HISUI = 3,
      PALDEA = 4
  }
  export declare function getPokemonSpecies(species: PokeRogue.enums.Species): PokemonSpecies;
  export declare function getPokemonSpeciesForm(species: PokeRogue.enums.Species, formIndex: integer): PokemonSpeciesForm;
  export declare function getFusedSpeciesName(speciesAName: string, speciesBName: string): string;
  export type PokemonSpeciesFilter = (species: PokemonSpecies) => boolean;
  export declare abstract class PokemonSpeciesForm {
      speciesId: PokeRogue.enums.Species;
      formIndex: integer;
      generation: integer;
      type1: PokeRogue.data.Type;
      type2: PokeRogue.data.Type;
      height: number;
      weight: number;
      ability1: PokeRogue.enums.Abilities;
      ability2: PokeRogue.enums.Abilities;
      abilityHidden: PokeRogue.enums.Abilities;
      baseTotal: integer;
      baseStats: integer[];
      catchRate: integer;
      baseFriendship: integer;
      baseExp: integer;
      genderDiffs: boolean;
      isStarterSelectable: boolean;
      constructor(type1: PokeRogue.data.Type, type2: PokeRogue.data.Type, height: number, weight: number, ability1: PokeRogue.enums.Abilities, ability2: PokeRogue.enums.Abilities, abilityHidden: PokeRogue.enums.Abilities, baseTotal: integer, baseHp: integer, baseAtk: integer, baseDef: integer, baseSpatk: integer, baseSpdef: integer, baseSpd: integer, catchRate: integer, baseFriendship: integer, baseExp: integer, genderDiffs: boolean, isStarterSelectable: boolean);
      /**
       * Method to get the root species id of a Pokemon.
       * Magmortar.getRootSpeciesId(true) => Magmar
       * Magmortar.getRootSpeciesId(false) => Magby
       * @param forStarter boolean to get the nonbaby form of a starter
       * @returns The species
       */
      getRootSpeciesId(forStarter?: boolean): Species;
      isOfType(type: integer): boolean;
      getAbilityCount(): integer;
      getAbility(abilityIndex: integer): Abilities;
      getLevelMoves(): LevelMoves;
      getRegion(): Region;
      isObtainable(): boolean;
      isCatchable(): boolean;
      isRegional(): boolean;
      isTrainerForbidden(): boolean;
      isRareRegional(): boolean;
      /**
       * Gets the species' base stat amount for the given stat.
       * @param stat  The desired stat.
       * @returns The species' base stat amount.
       */
      getBaseStat(stat: PokeRogue.data.Stat): integer;
      getBaseExp(): integer;
      getSpriteAtlasPath(female: boolean, formIndex?: integer, shiny?: boolean, variant?: integer): string;
      getSpriteId(female: boolean, formIndex?: integer, shiny?: boolean, variant?: integer, back?: boolean): string;
      getSpriteKey(female: boolean, formIndex?: integer, shiny?: boolean, variant?: integer): string;
      abstract getFormSpriteKey(formIndex?: integer): string;
      /**
       * Variant Data key/index is either species id or species id followed by -formkey
       * @param formIndex optional form index for pokemon with different forms
       * @returns species id if no additional forms, index with formkey if a pokemon with a form
       */
      getVariantDataIndex(formIndex?: integer): string | number;
      getIconAtlasKey(formIndex?: integer, shiny?: boolean, variant?: integer): string;
      getIconId(female: boolean, formIndex?: integer, shiny?: boolean, variant?: integer): string;
      getCryKey(formIndex?: integer): string;
      validateStarterMoveset(moveset: PokeRogue.system.StarterMoveset, eggMoves: integer): boolean;
      loadAssets(scene: PokeRogue.BattleScene, female: boolean, formIndex?: integer, shiny?: boolean, variant?: Variant, startLoad?: boolean): Promise<void>;
      cry(scene: PokeRogue.BattleScene, soundConfig?: Phaser.Types.Sound.SoundConfig, ignorePlay?: boolean): AnySound;
      generateCandyColors(scene: PokeRogue.BattleScene): integer[][];
  }
  export class PokemonSpecies extends PokemonSpeciesForm implements Localizable {
      name: string;
      subLegendary: boolean;
      legendary: boolean;
      mythical: boolean;
      species: string;
      growthRate: PokeRogue.data.GrowthRate;
      malePercent: number;
      genderDiffs: boolean;
      canChangeForm: boolean;
      forms: PokemonForm[];
      constructor(id: PokeRogue.enums.Species, generation: integer, subLegendary: boolean, legendary: boolean, mythical: boolean, species: string, type1: PokeRogue.data.Type, type2: PokeRogue.data.Type, height: number, weight: number, ability1: PokeRogue.enums.Abilities, ability2: PokeRogue.enums.Abilities, abilityHidden: PokeRogue.enums.Abilities, baseTotal: integer, baseHp: integer, baseAtk: integer, baseDef: integer, baseSpatk: integer, baseSpdef: integer, baseSpd: integer, catchRate: integer, baseFriendship: integer, baseExp: integer, growthRate: PokeRogue.data.GrowthRate, malePercent: number, genderDiffs: boolean, canChangeForm?: boolean, ...forms: PokemonForm[]);
      getName(formIndex?: integer): string;
      localize(): void;
      getWildSpeciesForLevel(level: integer, allowEvolving: boolean, isBoss: boolean, gameMode: PokeRogue.GameMode): Species;
      getTrainerSpeciesForLevel(level: integer, allowEvolving: boolean, strength: PokeRogue.enums.PartyMemberStrength): Species;
      public getStrengthLevelDiff;
      getSpeciesForLevel(level: integer, allowEvolving?: boolean, forTrainer?: boolean, strength?: PartyMemberStrength): Species;
      getEvolutionLevels(): any[];
      getPrevolutionLevels(): any[];
      getSimulatedEvolutionChain(currentLevel: integer, forTrainer?: boolean, isBoss?: boolean, player?: boolean): any[];
      getCompatibleFusionSpeciesFilter(): PokemonSpeciesFilter;
      isObtainable(): boolean;
      hasVariants(): any;
      getFormSpriteKey(formIndex?: integer): string;
  }
  export declare class PokemonForm extends PokemonSpeciesForm {
      formName: string;
      formKey: string;
      formSpriteKey: string;
      public starterSelectableKeys;
      constructor(formName: string, formKey: string, type1: PokeRogue.data.Type, type2: PokeRogue.data.Type, height: number, weight: number, ability1: PokeRogue.enums.Abilities, ability2: PokeRogue.enums.Abilities, abilityHidden: PokeRogue.enums.Abilities, baseTotal: integer, baseHp: integer, baseAtk: integer, baseDef: integer, baseSpatk: integer, baseSpdef: integer, baseSpd: integer, catchRate: integer, baseFriendship: integer, baseExp: integer, genderDiffs?: boolean, formSpriteKey?: string, isStarterSelectable?: boolean);
      getFormSpriteKey(_formIndex?: integer): string;
  }
  export declare enum SpeciesFormKey {
      MEGA = "mega",
      MEGA_X = "mega-x",
      MEGA_Y = "mega-y",
      PRIMAL = "primal",
      ORIGIN = "origin",
      INCARNATE = "incarnate",
      THERIAN = "therian",
      GIGANTAMAX = "gigantamax",
      GIGANTAMAX_SINGLE = "gigantamax-single",
      GIGANTAMAX_RAPID = "gigantamax-rapid",
      ETERNAMAX = "eternamax"
  }
  export declare const allSpecies: PokemonSpecies[];
  export declare function initSpecies(): void;
  export declare const speciesStarters: {
      1: number;
      4: number;
      7: number;
      10: number;
      13: number;
      16: number;
      19: number;
      21: number;
      23: number;
      25: number;
      27: number;
      29: number;
      32: number;
      35: number;
      37: number;
      39: number;
      41: number;
      43: number;
      46: number;
      48: number;
      50: number;
      52: number;
      54: number;
      56: number;
      58: number;
      60: number;
      63: number;
      66: number;
      69: number;
      72: number;
      74: number;
      77: number;
      79: number;
      81: number;
      83: number;
      84: number;
      86: number;
      88: number;
      90: number;
      92: number;
      95: number;
      96: number;
      98: number;
      100: number;
      102: number;
      104: number;
      106: number;
      107: number;
      108: number;
      109: number;
      111: number;
      113: number;
      114: number;
      115: number;
      116: number;
      118: number;
      120: number;
      122: number;
      123: number;
      124: number;
      125: number;
      126: number;
      127: number;
      128: number;
      129: number;
      131: number;
      132: number;
      133: number;
      137: number;
      138: number;
      140: number;
      142: number;
      143: number;
      144: number;
      145: number;
      146: number;
      147: number;
      150: number;
      151: number;
      152: number;
      155: number;
      158: number;
      161: number;
      163: number;
      165: number;
      167: number;
      170: number;
      172: number;
      173: number;
      174: number;
      175: number;
      177: number;
      179: number;
      183: number;
      185: number;
      187: number;
      190: number;
      191: number;
      193: number;
      194: number;
      198: number;
      200: number;
      201: number;
      202: number;
      203: number;
      204: number;
      206: number;
      207: number;
      209: number;
      211: number;
      213: number;
      214: number;
      215: number;
      216: number;
      218: number;
      220: number;
      222: number;
      223: number;
      225: number;
      226: number;
      227: number;
      228: number;
      231: number;
      234: number;
      235: number;
      236: number;
      238: number;
      239: number;
      240: number;
      241: number;
      243: number;
      244: number;
      245: number;
      246: number;
      249: number;
      250: number;
      251: number;
      252: number;
      255: number;
      258: number;
      261: number;
      263: number;
      265: number;
      270: number;
      273: number;
      276: number;
      278: number;
      280: number;
      283: number;
      285: number;
      287: number;
      290: number;
      293: number;
      296: number;
      298: number;
      299: number;
      300: number;
      302: number;
      303: number;
      304: number;
      307: number;
      309: number;
      311: number;
      312: number;
      313: number;
      314: number;
      315: number;
      316: number;
      318: number;
      320: number;
      322: number;
      324: number;
      325: number;
      327: number;
      328: number;
      331: number;
      333: number;
      335: number;
      336: number;
      337: number;
      338: number;
      339: number;
      341: number;
      343: number;
      345: number;
      347: number;
      349: number;
      351: number;
      352: number;
      353: number;
      355: number;
      357: number;
      358: number;
      359: number;
      360: number;
      361: number;
      363: number;
      366: number;
      369: number;
      370: number;
      371: number;
      374: number;
      377: number;
      378: number;
      379: number;
      380: number;
      381: number;
      382: number;
      383: number;
      384: number;
      385: number;
      386: number;
      387: number;
      390: number;
      393: number;
      396: number;
      399: number;
      401: number;
      403: number;
      406: number;
      408: number;
      410: number;
      412: number;
      415: number;
      417: number;
      418: number;
      420: number;
      422: number;
      425: number;
      427: number;
      431: number;
      433: number;
      434: number;
      436: number;
      438: number;
      439: number;
      440: number;
      441: number;
      442: number;
      443: number;
      446: number;
      447: number;
      449: number;
      451: number;
      453: number;
      455: number;
      456: number;
      458: number;
      459: number;
      479: number;
      480: number;
      481: number;
      482: number;
      483: number;
      484: number;
      485: number;
      486: number;
      487: number;
      488: number;
      489: number;
      490: number;
      491: number;
      492: number;
      493: number;
      494: number;
      495: number;
      498: number;
      501: number;
      504: number;
      506: number;
      509: number;
      511: number;
      513: number;
      515: number;
      517: number;
      519: number;
      522: number;
      524: number;
      527: number;
      529: number;
      531: number;
      532: number;
      535: number;
      538: number;
      539: number;
      540: number;
      543: number;
      546: number;
      548: number;
      550: number;
      551: number;
      554: number;
      556: number;
      557: number;
      559: number;
      561: number;
      562: number;
      564: number;
      566: number;
      568: number;
      570: number;
      572: number;
      574: number;
      577: number;
      580: number;
      582: number;
      585: number;
      587: number;
      588: number;
      590: number;
      592: number;
      594: number;
      595: number;
      597: number;
      599: number;
      602: number;
      605: number;
      607: number;
      610: number;
      613: number;
      615: number;
      616: number;
      618: number;
      619: number;
      621: number;
      622: number;
      624: number;
      626: number;
      627: number;
      629: number;
      631: number;
      632: number;
      633: number;
      636: number;
      638: number;
      639: number;
      640: number;
      641: number;
      642: number;
      643: number;
      644: number;
      645: number;
      646: number;
      647: number;
      648: number;
      649: number;
      650: number;
      653: number;
      656: number;
      659: number;
      661: number;
      664: number;
      667: number;
      669: number;
      672: number;
      674: number;
      676: number;
      677: number;
      679: number;
      682: number;
      684: number;
      686: number;
      688: number;
      690: number;
      692: number;
      694: number;
      696: number;
      698: number;
      701: number;
      702: number;
      703: number;
      704: number;
      707: number;
      708: number;
      710: number;
      712: number;
      714: number;
      716: number;
      717: number;
      718: number;
      719: number;
      720: number;
      721: number;
      2670: number;
      722: number;
      725: number;
      728: number;
      731: number;
      734: number;
      736: number;
      739: number;
      741: number;
      742: number;
      744: number;
      746: number;
      747: number;
      749: number;
      751: number;
      753: number;
      755: number;
      757: number;
      759: number;
      761: number;
      764: number;
      765: number;
      766: number;
      767: number;
      769: number;
      771: number;
      772: number;
      774: number;
      775: number;
      776: number;
      777: number;
      778: number;
      779: number;
      780: number;
      781: number;
      782: number;
      785: number;
      786: number;
      787: number;
      788: number;
      789: number;
      793: number;
      794: number;
      795: number;
      796: number;
      797: number;
      798: number;
      799: number;
      800: number;
      801: number;
      802: number;
      803: number;
      805: number;
      806: number;
      807: number;
      808: number;
      2019: number;
      2027: number;
      2037: number;
      2050: number;
      2052: number;
      2074: number;
      2088: number;
      810: number;
      813: number;
      816: number;
      819: number;
      821: number;
      824: number;
      827: number;
      829: number;
      831: number;
      833: number;
      835: number;
      837: number;
      840: number;
      843: number;
      845: number;
      846: number;
      848: number;
      850: number;
      852: number;
      854: number;
      856: number;
      859: number;
      868: number;
      870: number;
      871: number;
      872: number;
      874: number;
      875: number;
      876: number;
      877: number;
      878: number;
      880: number;
      881: number;
      882: number;
      883: number;
      884: number;
      885: number;
      888: number;
      889: number;
      890: number;
      891: number;
      893: number;
      894: number;
      895: number;
      896: number;
      897: number;
      898: number;
      4052: number;
      4077: number;
      4079: number;
      4083: number;
      4222: number;
      4263: number;
      4554: number;
      4562: number;
      4618: number;
      4122: number;
      4144: number;
      4145: number;
      4146: number;
      6058: number;
      6100: number;
      6211: number;
      6215: number;
      6570: number;
      905: number;
      906: number;
      909: number;
      912: number;
      915: number;
      917: number;
      919: number;
      921: number;
      924: number;
      926: number;
      928: number;
      931: number;
      932: number;
      935: number;
      938: number;
      940: number;
      942: number;
      944: number;
      946: number;
      948: number;
      950: number;
      951: number;
      953: number;
      955: number;
      957: number;
      960: number;
      962: number;
      963: number;
      965: number;
      967: number;
      968: number;
      969: number;
      971: number;
      973: number;
      974: number;
      976: number;
      977: number;
      978: number;
      984: number;
      985: number;
      986: number;
      987: number;
      988: number;
      989: number;
      990: number;
      991: number;
      992: number;
      993: number;
      994: number;
      995: number;
      996: number;
      999: number;
      1001: number;
      1002: number;
      1003: number;
      1004: number;
      1005: number;
      1006: number;
      1007: number;
      1008: number;
      1009: number;
      1010: number;
      1012: number;
      1014: number;
      1015: number;
      1016: number;
      1017: number;
      1020: number;
      1021: number;
      1022: number;
      1023: number;
      1024: number;
      1025: number;
      8128: number;
      8194: number;
      8901: number;
  };
  export declare const noStarterFormKeys: string[];
  export declare function getStarterValueFriendshipCap(value: integer): integer;
  export declare const starterPassiveAbilities: {
      1: PokeRogue.enums.Abilities;
      4: PokeRogue.enums.Abilities;
      7: PokeRogue.enums.Abilities;
      10: PokeRogue.enums.Abilities;
      13: PokeRogue.enums.Abilities;
      16: PokeRogue.enums.Abilities;
      19: PokeRogue.enums.Abilities;
      21: PokeRogue.enums.Abilities;
      23: PokeRogue.enums.Abilities;
      27: PokeRogue.enums.Abilities;
      29: PokeRogue.enums.Abilities;
      32: PokeRogue.enums.Abilities;
      37: PokeRogue.enums.Abilities;
      41: PokeRogue.enums.Abilities;
      43: PokeRogue.enums.Abilities;
      46: PokeRogue.enums.Abilities;
      48: PokeRogue.enums.Abilities;
      50: PokeRogue.enums.Abilities;
      52: PokeRogue.enums.Abilities;
      54: PokeRogue.enums.Abilities;
      56: PokeRogue.enums.Abilities;
      58: PokeRogue.enums.Abilities;
      60: PokeRogue.enums.Abilities;
      63: PokeRogue.enums.Abilities;
      66: PokeRogue.enums.Abilities;
      69: PokeRogue.enums.Abilities;
      72: PokeRogue.enums.Abilities;
      74: PokeRogue.enums.Abilities;
      77: PokeRogue.enums.Abilities;
      79: PokeRogue.enums.Abilities;
      81: PokeRogue.enums.Abilities;
      83: PokeRogue.enums.Abilities;
      84: PokeRogue.enums.Abilities;
      86: PokeRogue.enums.Abilities;
      88: PokeRogue.enums.Abilities;
      90: PokeRogue.enums.Abilities;
      92: PokeRogue.enums.Abilities;
      95: PokeRogue.enums.Abilities;
      96: PokeRogue.enums.Abilities;
      98: PokeRogue.enums.Abilities;
      100: PokeRogue.enums.Abilities;
      102: PokeRogue.enums.Abilities;
      104: PokeRogue.enums.Abilities;
      108: PokeRogue.enums.Abilities;
      109: PokeRogue.enums.Abilities;
      111: PokeRogue.enums.Abilities;
      114: PokeRogue.enums.Abilities;
      115: PokeRogue.enums.Abilities;
      116: PokeRogue.enums.Abilities;
      118: PokeRogue.enums.Abilities;
      120: PokeRogue.enums.Abilities;
      123: PokeRogue.enums.Abilities;
      127: PokeRogue.enums.Abilities;
      128: PokeRogue.enums.Abilities;
      129: PokeRogue.enums.Abilities;
      131: PokeRogue.enums.Abilities;
      132: PokeRogue.enums.Abilities;
      133: PokeRogue.enums.Abilities;
      137: PokeRogue.enums.Abilities;
      138: PokeRogue.enums.Abilities;
      140: PokeRogue.enums.Abilities;
      142: PokeRogue.enums.Abilities;
      144: PokeRogue.enums.Abilities;
      145: PokeRogue.enums.Abilities;
      146: PokeRogue.enums.Abilities;
      147: PokeRogue.enums.Abilities;
      150: PokeRogue.enums.Abilities;
      151: PokeRogue.enums.Abilities;
      152: PokeRogue.enums.Abilities;
      155: PokeRogue.enums.Abilities;
      158: PokeRogue.enums.Abilities;
      161: PokeRogue.enums.Abilities;
      163: PokeRogue.enums.Abilities;
      165: PokeRogue.enums.Abilities;
      167: PokeRogue.enums.Abilities;
      170: PokeRogue.enums.Abilities;
      172: PokeRogue.enums.Abilities;
      173: PokeRogue.enums.Abilities;
      174: PokeRogue.enums.Abilities;
      175: PokeRogue.enums.Abilities;
      177: PokeRogue.enums.Abilities;
      179: PokeRogue.enums.Abilities;
      187: PokeRogue.enums.Abilities;
      190: PokeRogue.enums.Abilities;
      191: PokeRogue.enums.Abilities;
      193: PokeRogue.enums.Abilities;
      194: PokeRogue.enums.Abilities;
      198: PokeRogue.enums.Abilities;
      200: PokeRogue.enums.Abilities;
      201: PokeRogue.enums.Abilities;
      203: PokeRogue.enums.Abilities;
      204: PokeRogue.enums.Abilities;
      206: PokeRogue.enums.Abilities;
      207: PokeRogue.enums.Abilities;
      209: PokeRogue.enums.Abilities;
      211: PokeRogue.enums.Abilities;
      213: PokeRogue.enums.Abilities;
      214: PokeRogue.enums.Abilities;
      215: PokeRogue.enums.Abilities;
      216: PokeRogue.enums.Abilities;
      218: PokeRogue.enums.Abilities;
      220: PokeRogue.enums.Abilities;
      222: PokeRogue.enums.Abilities;
      223: PokeRogue.enums.Abilities;
      225: PokeRogue.enums.Abilities;
      227: PokeRogue.enums.Abilities;
      228: PokeRogue.enums.Abilities;
      231: PokeRogue.enums.Abilities;
      234: PokeRogue.enums.Abilities;
      235: PokeRogue.enums.Abilities;
      236: PokeRogue.enums.Abilities;
      238: PokeRogue.enums.Abilities;
      239: PokeRogue.enums.Abilities;
      240: PokeRogue.enums.Abilities;
      241: PokeRogue.enums.Abilities;
      243: PokeRogue.enums.Abilities;
      244: PokeRogue.enums.Abilities;
      245: PokeRogue.enums.Abilities;
      246: PokeRogue.enums.Abilities;
      249: PokeRogue.enums.Abilities;
      250: PokeRogue.enums.Abilities;
      251: PokeRogue.enums.Abilities;
      252: PokeRogue.enums.Abilities;
      255: PokeRogue.enums.Abilities;
      258: PokeRogue.enums.Abilities;
      261: PokeRogue.enums.Abilities;
      263: PokeRogue.enums.Abilities;
      265: PokeRogue.enums.Abilities;
      270: PokeRogue.enums.Abilities;
      273: PokeRogue.enums.Abilities;
      276: PokeRogue.enums.Abilities;
      278: PokeRogue.enums.Abilities;
      280: PokeRogue.enums.Abilities;
      283: PokeRogue.enums.Abilities;
      285: PokeRogue.enums.Abilities;
      287: PokeRogue.enums.Abilities;
      290: PokeRogue.enums.Abilities;
      293: PokeRogue.enums.Abilities;
      296: PokeRogue.enums.Abilities;
      298: PokeRogue.enums.Abilities;
      299: PokeRogue.enums.Abilities;
      300: PokeRogue.enums.Abilities;
      302: PokeRogue.enums.Abilities;
      303: PokeRogue.enums.Abilities;
      304: PokeRogue.enums.Abilities;
      307: PokeRogue.enums.Abilities;
      309: PokeRogue.enums.Abilities;
      311: PokeRogue.enums.Abilities;
      312: PokeRogue.enums.Abilities;
      313: PokeRogue.enums.Abilities;
      314: PokeRogue.enums.Abilities;
      316: PokeRogue.enums.Abilities;
      318: PokeRogue.enums.Abilities;
      320: PokeRogue.enums.Abilities;
      322: PokeRogue.enums.Abilities;
      324: PokeRogue.enums.Abilities;
      325: PokeRogue.enums.Abilities;
      327: PokeRogue.enums.Abilities;
      328: PokeRogue.enums.Abilities;
      331: PokeRogue.enums.Abilities;
      333: PokeRogue.enums.Abilities;
      335: PokeRogue.enums.Abilities;
      336: PokeRogue.enums.Abilities;
      337: PokeRogue.enums.Abilities;
      338: PokeRogue.enums.Abilities;
      339: PokeRogue.enums.Abilities;
      341: PokeRogue.enums.Abilities;
      343: PokeRogue.enums.Abilities;
      345: PokeRogue.enums.Abilities;
      347: PokeRogue.enums.Abilities;
      349: PokeRogue.enums.Abilities;
      351: PokeRogue.enums.Abilities;
      352: PokeRogue.enums.Abilities;
      353: PokeRogue.enums.Abilities;
      355: PokeRogue.enums.Abilities;
      357: PokeRogue.enums.Abilities;
      359: PokeRogue.enums.Abilities;
      360: PokeRogue.enums.Abilities;
      361: PokeRogue.enums.Abilities;
      363: PokeRogue.enums.Abilities;
      366: PokeRogue.enums.Abilities;
      369: PokeRogue.enums.Abilities;
      370: PokeRogue.enums.Abilities;
      371: PokeRogue.enums.Abilities;
      374: PokeRogue.enums.Abilities;
      377: PokeRogue.enums.Abilities;
      378: PokeRogue.enums.Abilities;
      379: PokeRogue.enums.Abilities;
      380: PokeRogue.enums.Abilities;
      381: PokeRogue.enums.Abilities;
      382: PokeRogue.enums.Abilities;
      383: PokeRogue.enums.Abilities;
      384: PokeRogue.enums.Abilities;
      385: PokeRogue.enums.Abilities;
      386: PokeRogue.enums.Abilities;
      387: PokeRogue.enums.Abilities;
      390: PokeRogue.enums.Abilities;
      393: PokeRogue.enums.Abilities;
      396: PokeRogue.enums.Abilities;
      399: PokeRogue.enums.Abilities;
      401: PokeRogue.enums.Abilities;
      403: PokeRogue.enums.Abilities;
      406: PokeRogue.enums.Abilities;
      408: PokeRogue.enums.Abilities;
      410: PokeRogue.enums.Abilities;
      412: PokeRogue.enums.Abilities;
      415: PokeRogue.enums.Abilities;
      417: PokeRogue.enums.Abilities;
      418: PokeRogue.enums.Abilities;
      420: PokeRogue.enums.Abilities;
      422: PokeRogue.enums.Abilities;
      425: PokeRogue.enums.Abilities;
      427: PokeRogue.enums.Abilities;
      431: PokeRogue.enums.Abilities;
      433: PokeRogue.enums.Abilities;
      434: PokeRogue.enums.Abilities;
      436: PokeRogue.enums.Abilities;
      438: PokeRogue.enums.Abilities;
      439: PokeRogue.enums.Abilities;
      440: PokeRogue.enums.Abilities;
      441: PokeRogue.enums.Abilities;
      442: PokeRogue.enums.Abilities;
      443: PokeRogue.enums.Abilities;
      446: PokeRogue.enums.Abilities;
      447: PokeRogue.enums.Abilities;
      449: PokeRogue.enums.Abilities;
      451: PokeRogue.enums.Abilities;
      453: PokeRogue.enums.Abilities;
      455: PokeRogue.enums.Abilities;
      456: PokeRogue.enums.Abilities;
      458: PokeRogue.enums.Abilities;
      459: PokeRogue.enums.Abilities;
      479: PokeRogue.enums.Abilities;
      480: PokeRogue.enums.Abilities;
      481: PokeRogue.enums.Abilities;
      482: PokeRogue.enums.Abilities;
      483: PokeRogue.enums.Abilities;
      484: PokeRogue.enums.Abilities;
      485: PokeRogue.enums.Abilities;
      486: PokeRogue.enums.Abilities;
      487: PokeRogue.enums.Abilities;
      488: PokeRogue.enums.Abilities;
      489: PokeRogue.enums.Abilities;
      490: PokeRogue.enums.Abilities;
      491: PokeRogue.enums.Abilities;
      492: PokeRogue.enums.Abilities;
      493: PokeRogue.enums.Abilities;
      494: PokeRogue.enums.Abilities;
      495: PokeRogue.enums.Abilities;
      498: PokeRogue.enums.Abilities;
      501: PokeRogue.enums.Abilities;
      504: PokeRogue.enums.Abilities;
      506: PokeRogue.enums.Abilities;
      509: PokeRogue.enums.Abilities;
      511: PokeRogue.enums.Abilities;
      513: PokeRogue.enums.Abilities;
      515: PokeRogue.enums.Abilities;
      517: PokeRogue.enums.Abilities;
      519: PokeRogue.enums.Abilities;
      522: PokeRogue.enums.Abilities;
      524: PokeRogue.enums.Abilities;
      527: PokeRogue.enums.Abilities;
      529: PokeRogue.enums.Abilities;
      531: PokeRogue.enums.Abilities;
      532: PokeRogue.enums.Abilities;
      535: PokeRogue.enums.Abilities;
      538: PokeRogue.enums.Abilities;
      539: PokeRogue.enums.Abilities;
      540: PokeRogue.enums.Abilities;
      543: PokeRogue.enums.Abilities;
      546: PokeRogue.enums.Abilities;
      548: PokeRogue.enums.Abilities;
      550: PokeRogue.enums.Abilities;
      551: PokeRogue.enums.Abilities;
      554: PokeRogue.enums.Abilities;
      556: PokeRogue.enums.Abilities;
      557: PokeRogue.enums.Abilities;
      559: PokeRogue.enums.Abilities;
      561: PokeRogue.enums.Abilities;
      562: PokeRogue.enums.Abilities;
      564: PokeRogue.enums.Abilities;
      566: PokeRogue.enums.Abilities;
      568: PokeRogue.enums.Abilities;
      570: PokeRogue.enums.Abilities;
      572: PokeRogue.enums.Abilities;
      574: PokeRogue.enums.Abilities;
      577: PokeRogue.enums.Abilities;
      580: PokeRogue.enums.Abilities;
      582: PokeRogue.enums.Abilities;
      585: PokeRogue.enums.Abilities;
      587: PokeRogue.enums.Abilities;
      588: PokeRogue.enums.Abilities;
      590: PokeRogue.enums.Abilities;
      592: PokeRogue.enums.Abilities;
      594: PokeRogue.enums.Abilities;
      595: PokeRogue.enums.Abilities;
      597: PokeRogue.enums.Abilities;
      599: PokeRogue.enums.Abilities;
      602: PokeRogue.enums.Abilities;
      605: PokeRogue.enums.Abilities;
      607: PokeRogue.enums.Abilities;
      610: PokeRogue.enums.Abilities;
      613: PokeRogue.enums.Abilities;
      615: PokeRogue.enums.Abilities;
      616: PokeRogue.enums.Abilities;
      618: PokeRogue.enums.Abilities;
      619: PokeRogue.enums.Abilities;
      621: PokeRogue.enums.Abilities;
      622: PokeRogue.enums.Abilities;
      624: PokeRogue.enums.Abilities;
      626: PokeRogue.enums.Abilities;
      627: PokeRogue.enums.Abilities;
      629: PokeRogue.enums.Abilities;
      631: PokeRogue.enums.Abilities;
      632: PokeRogue.enums.Abilities;
      633: PokeRogue.enums.Abilities;
      636: PokeRogue.enums.Abilities;
      638: PokeRogue.enums.Abilities;
      639: PokeRogue.enums.Abilities;
      640: PokeRogue.enums.Abilities;
      641: PokeRogue.enums.Abilities;
      642: PokeRogue.enums.Abilities;
      643: PokeRogue.enums.Abilities;
      644: PokeRogue.enums.Abilities;
      645: PokeRogue.enums.Abilities;
      646: PokeRogue.enums.Abilities;
      647: PokeRogue.enums.Abilities;
      648: PokeRogue.enums.Abilities;
      649: PokeRogue.enums.Abilities;
      650: PokeRogue.enums.Abilities;
      653: PokeRogue.enums.Abilities;
      656: PokeRogue.enums.Abilities;
      659: PokeRogue.enums.Abilities;
      661: PokeRogue.enums.Abilities;
      664: PokeRogue.enums.Abilities;
      667: PokeRogue.enums.Abilities;
      669: PokeRogue.enums.Abilities;
      672: PokeRogue.enums.Abilities;
      674: PokeRogue.enums.Abilities;
      676: PokeRogue.enums.Abilities;
      677: PokeRogue.enums.Abilities;
      679: PokeRogue.enums.Abilities;
      682: PokeRogue.enums.Abilities;
      684: PokeRogue.enums.Abilities;
      686: PokeRogue.enums.Abilities;
      688: PokeRogue.enums.Abilities;
      690: PokeRogue.enums.Abilities;
      692: PokeRogue.enums.Abilities;
      694: PokeRogue.enums.Abilities;
      696: PokeRogue.enums.Abilities;
      698: PokeRogue.enums.Abilities;
      701: PokeRogue.enums.Abilities;
      702: PokeRogue.enums.Abilities;
      703: PokeRogue.enums.Abilities;
      704: PokeRogue.enums.Abilities;
      707: PokeRogue.enums.Abilities;
      708: PokeRogue.enums.Abilities;
      710: PokeRogue.enums.Abilities;
      712: PokeRogue.enums.Abilities;
      714: PokeRogue.enums.Abilities;
      716: PokeRogue.enums.Abilities;
      717: PokeRogue.enums.Abilities;
      718: PokeRogue.enums.Abilities;
      719: PokeRogue.enums.Abilities;
      720: PokeRogue.enums.Abilities;
      721: PokeRogue.enums.Abilities;
      722: PokeRogue.enums.Abilities;
      725: PokeRogue.enums.Abilities;
      728: PokeRogue.enums.Abilities;
      731: PokeRogue.enums.Abilities;
      734: PokeRogue.enums.Abilities;
      736: PokeRogue.enums.Abilities;
      739: PokeRogue.enums.Abilities;
      741: PokeRogue.enums.Abilities;
      742: PokeRogue.enums.Abilities;
      744: PokeRogue.enums.Abilities;
      746: PokeRogue.enums.Abilities;
      747: PokeRogue.enums.Abilities;
      749: PokeRogue.enums.Abilities;
      751: PokeRogue.enums.Abilities;
      753: PokeRogue.enums.Abilities;
      755: PokeRogue.enums.Abilities;
      757: PokeRogue.enums.Abilities;
      759: PokeRogue.enums.Abilities;
      761: PokeRogue.enums.Abilities;
      764: PokeRogue.enums.Abilities;
      765: PokeRogue.enums.Abilities;
      766: PokeRogue.enums.Abilities;
      767: PokeRogue.enums.Abilities;
      769: PokeRogue.enums.Abilities;
      771: PokeRogue.enums.Abilities;
      772: PokeRogue.enums.Abilities;
      774: PokeRogue.enums.Abilities;
      775: PokeRogue.enums.Abilities;
      776: PokeRogue.enums.Abilities;
      777: PokeRogue.enums.Abilities;
      778: PokeRogue.enums.Abilities;
      779: PokeRogue.enums.Abilities;
      780: PokeRogue.enums.Abilities;
      781: PokeRogue.enums.Abilities;
      782: PokeRogue.enums.Abilities;
      785: PokeRogue.enums.Abilities;
      786: PokeRogue.enums.Abilities;
      787: PokeRogue.enums.Abilities;
      788: PokeRogue.enums.Abilities;
      789: PokeRogue.enums.Abilities;
      793: PokeRogue.enums.Abilities;
      794: PokeRogue.enums.Abilities;
      795: PokeRogue.enums.Abilities;
      796: PokeRogue.enums.Abilities;
      797: PokeRogue.enums.Abilities;
      798: PokeRogue.enums.Abilities;
      799: PokeRogue.enums.Abilities;
      800: PokeRogue.enums.Abilities;
      801: PokeRogue.enums.Abilities;
      802: PokeRogue.enums.Abilities;
      803: PokeRogue.enums.Abilities;
      805: PokeRogue.enums.Abilities;
      806: PokeRogue.enums.Abilities;
      807: PokeRogue.enums.Abilities;
      808: PokeRogue.enums.Abilities;
      810: PokeRogue.enums.Abilities;
      813: PokeRogue.enums.Abilities;
      816: PokeRogue.enums.Abilities;
      819: PokeRogue.enums.Abilities;
      821: PokeRogue.enums.Abilities;
      824: PokeRogue.enums.Abilities;
      827: PokeRogue.enums.Abilities;
      829: PokeRogue.enums.Abilities;
      831: PokeRogue.enums.Abilities;
      833: PokeRogue.enums.Abilities;
      835: PokeRogue.enums.Abilities;
      837: PokeRogue.enums.Abilities;
      840: PokeRogue.enums.Abilities;
      843: PokeRogue.enums.Abilities;
      845: PokeRogue.enums.Abilities;
      846: PokeRogue.enums.Abilities;
      848: PokeRogue.enums.Abilities;
      850: PokeRogue.enums.Abilities;
      852: PokeRogue.enums.Abilities;
      854: PokeRogue.enums.Abilities;
      856: PokeRogue.enums.Abilities;
      859: PokeRogue.enums.Abilities;
      868: PokeRogue.enums.Abilities;
      870: PokeRogue.enums.Abilities;
      871: PokeRogue.enums.Abilities;
      872: PokeRogue.enums.Abilities;
      874: PokeRogue.enums.Abilities;
      875: PokeRogue.enums.Abilities;
      876: PokeRogue.enums.Abilities;
      877: PokeRogue.enums.Abilities;
      878: PokeRogue.enums.Abilities;
      880: PokeRogue.enums.Abilities;
      881: PokeRogue.enums.Abilities;
      882: PokeRogue.enums.Abilities;
      883: PokeRogue.enums.Abilities;
      884: PokeRogue.enums.Abilities;
      885: PokeRogue.enums.Abilities;
      888: PokeRogue.enums.Abilities;
      889: PokeRogue.enums.Abilities;
      890: PokeRogue.enums.Abilities;
      891: PokeRogue.enums.Abilities;
      893: PokeRogue.enums.Abilities;
      894: PokeRogue.enums.Abilities;
      895: PokeRogue.enums.Abilities;
      896: PokeRogue.enums.Abilities;
      897: PokeRogue.enums.Abilities;
      898: PokeRogue.enums.Abilities;
      905: PokeRogue.enums.Abilities;
      906: PokeRogue.enums.Abilities;
      909: PokeRogue.enums.Abilities;
      912: PokeRogue.enums.Abilities;
      915: PokeRogue.enums.Abilities;
      917: PokeRogue.enums.Abilities;
      919: PokeRogue.enums.Abilities;
      921: PokeRogue.enums.Abilities;
      924: PokeRogue.enums.Abilities;
      926: PokeRogue.enums.Abilities;
      928: PokeRogue.enums.Abilities;
      931: PokeRogue.enums.Abilities;
      932: PokeRogue.enums.Abilities;
      935: PokeRogue.enums.Abilities;
      938: PokeRogue.enums.Abilities;
      940: PokeRogue.enums.Abilities;
      942: PokeRogue.enums.Abilities;
      944: PokeRogue.enums.Abilities;
      946: PokeRogue.enums.Abilities;
      948: PokeRogue.enums.Abilities;
      950: PokeRogue.enums.Abilities;
      951: PokeRogue.enums.Abilities;
      953: PokeRogue.enums.Abilities;
      955: PokeRogue.enums.Abilities;
      957: PokeRogue.enums.Abilities;
      960: PokeRogue.enums.Abilities;
      962: PokeRogue.enums.Abilities;
      963: PokeRogue.enums.Abilities;
      965: PokeRogue.enums.Abilities;
      967: PokeRogue.enums.Abilities;
      968: PokeRogue.enums.Abilities;
      969: PokeRogue.enums.Abilities;
      971: PokeRogue.enums.Abilities;
      973: PokeRogue.enums.Abilities;
      974: PokeRogue.enums.Abilities;
      976: PokeRogue.enums.Abilities;
      977: PokeRogue.enums.Abilities;
      978: PokeRogue.enums.Abilities;
      984: PokeRogue.enums.Abilities;
      985: PokeRogue.enums.Abilities;
      986: PokeRogue.enums.Abilities;
      987: PokeRogue.enums.Abilities;
      988: PokeRogue.enums.Abilities;
      989: PokeRogue.enums.Abilities;
      990: PokeRogue.enums.Abilities;
      991: PokeRogue.enums.Abilities;
      992: PokeRogue.enums.Abilities;
      993: PokeRogue.enums.Abilities;
      994: PokeRogue.enums.Abilities;
      995: PokeRogue.enums.Abilities;
      996: PokeRogue.enums.Abilities;
      999: PokeRogue.enums.Abilities;
      1001: PokeRogue.enums.Abilities;
      1002: PokeRogue.enums.Abilities;
      1003: PokeRogue.enums.Abilities;
      1004: PokeRogue.enums.Abilities;
      1005: PokeRogue.enums.Abilities;
      1006: PokeRogue.enums.Abilities;
      1007: PokeRogue.enums.Abilities;
      1008: PokeRogue.enums.Abilities;
      1009: PokeRogue.enums.Abilities;
      1010: PokeRogue.enums.Abilities;
      1012: PokeRogue.enums.Abilities;
      1014: PokeRogue.enums.Abilities;
      1015: PokeRogue.enums.Abilities;
      1016: PokeRogue.enums.Abilities;
      1017: PokeRogue.enums.Abilities;
      1020: PokeRogue.enums.Abilities;
      1021: PokeRogue.enums.Abilities;
      1022: PokeRogue.enums.Abilities;
      1023: PokeRogue.enums.Abilities;
      1024: PokeRogue.enums.Abilities;
      1025: PokeRogue.enums.Abilities;
      2019: PokeRogue.enums.Abilities;
      2027: PokeRogue.enums.Abilities;
      2037: PokeRogue.enums.Abilities;
      2050: PokeRogue.enums.Abilities;
      2052: PokeRogue.enums.Abilities;
      2074: PokeRogue.enums.Abilities;
      2088: PokeRogue.enums.Abilities;
      2670: PokeRogue.enums.Abilities;
      4052: PokeRogue.enums.Abilities;
      4077: PokeRogue.enums.Abilities;
      4079: PokeRogue.enums.Abilities;
      4083: PokeRogue.enums.Abilities;
      4144: PokeRogue.enums.Abilities;
      4145: PokeRogue.enums.Abilities;
      4146: PokeRogue.enums.Abilities;
      4222: PokeRogue.enums.Abilities;
      4263: PokeRogue.enums.Abilities;
      4554: PokeRogue.enums.Abilities;
      4562: PokeRogue.enums.Abilities;
      4618: PokeRogue.enums.Abilities;
      6058: PokeRogue.enums.Abilities;
      6100: PokeRogue.enums.Abilities;
      6211: PokeRogue.enums.Abilities;
      6215: PokeRogue.enums.Abilities;
      6570: PokeRogue.enums.Abilities;
      8128: PokeRogue.enums.Abilities;
      8194: PokeRogue.enums.Abilities;
      8901: PokeRogue.enums.Abilities;
  };
  
}

declare namespace PokeRogue.data {
  export declare enum Stat {
      HP = 0,
      ATK = 1,
      DEF = 2,
      SPATK = 3,
      SPDEF = 4,
      SPD = 5
  }
  export declare function getStatName(stat: Stat, shorten?: boolean): string;
  
}

declare namespace PokeRogue.data {
  export declare function getBattleCountSplashMessage(): string;
  export declare function getSplashMessages(): string[];
  
}

declare namespace PokeRogue.data {
  export declare enum StatusEffect {
      NONE = 0,
      POISON = 1,
      TOXIC = 2,
      PARALYSIS = 3,
      SLEEP = 4,
      FREEZE = 5,
      BURN = 6,
      FAINT = 7
  }
  export declare class Status {
      effect: StatusEffect;
      turnCount: integer;
      cureTurn: integer;
      constructor(effect: StatusEffect, turnCount?: integer, cureTurn?: integer);
      incrementTurn(): void;
      isPostTurn(): boolean;
  }
  export declare function getStatusEffectObtainText(statusEffect: StatusEffect, pokemonNameWithAffix: string, sourceText?: string): string;
  export declare function getStatusEffectActivationText(statusEffect: StatusEffect, pokemonNameWithAffix: string): string;
  export declare function getStatusEffectOverlapText(statusEffect: StatusEffect, pokemonNameWithAffix: string): string;
  export declare function getStatusEffectHealText(statusEffect: StatusEffect, pokemonNameWithAffix: string): string;
  export declare function getStatusEffectDescriptor(statusEffect: StatusEffect): string;
  export declare function getStatusEffectCatchRateMultiplier(statusEffect: StatusEffect): number;
  /**
  * Returns a random non-volatile StatusEffect
  */
  export declare function generateRandomStatusEffect(): StatusEffect;
  /**
  * Returns a random non-volatile StatusEffect between the two provided
  * @param statusEffectA The first StatusEffect
  * @param statusEffectA The second StatusEffect
  */
  export declare function getRandomStatusEffect(statusEffectA: StatusEffect, statusEffectB: StatusEffect): StatusEffect;
  /**
  * Returns a random non-volatile StatusEffect between the two provided
  * @param statusA The first Status
  * @param statusB The second Status
  */
  export declare function getRandomStatus(statusA: Status, statusB: Status): Status;
  /**
   * Gets all non volatile status effects
   * @returns A list containing all non volatile status effects
   */
  export declare function getNonVolatileStatusEffects(): Array<StatusEffect>;
  /**
   * Returns whether a statuss effect is non volatile.
   * Non-volatile status condition is a status that remains after being switched out.
   * @param status The status to check
   */
  export declare function isNonVolatileStatusEffect(status: StatusEffect): boolean;
  
}

declare namespace PokeRogue.data {
  export declare enum TempBattleStat {
      ATK = 0,
      DEF = 1,
      SPATK = 2,
      SPDEF = 3,
      SPD = 4,
      ACC = 5,
      CRIT = 6
  }
  export declare function getTempBattleStatName(tempBattleStat: TempBattleStat): string;
  export declare function getTempBattleStatBoosterItemName(tempBattleStat: TempBattleStat): "X Attack" | "X Defense" | "X Sp. Atk" | "X Sp. Def" | "X Speed" | "X Accuracy" | "Dire Hit";
  
}

declare namespace PokeRogue.data {
  //import Pokemon from "../field/pokemon";
  //import Move from "./move";
  //import { Type } from "./type";
  //import { BattlerIndex } from "#app/battle.js";
  export declare enum TerrainType {
      NONE = 0,
      MISTY = 1,
      ELECTRIC = 2,
      GRASSY = 3,
      PSYCHIC = 4
  }
  export declare class Terrain {
      terrainType: TerrainType;
      turnsLeft: integer;
      constructor(terrainType: TerrainType, turnsLeft?: integer);
      lapse(): boolean;
      getAttackTypeMultiplier(attackType: PokeRogue.data.Type): number;
      isMoveTerrainCancelled(user: PokeRogue.field.Pokemon, targets: PokeRogue.BattlerIndex[], move: PokeRogue.data.Move): boolean;
  }
  export declare function getTerrainColor(terrainType: TerrainType): [integer, integer, integer];
  
}

declare namespace PokeRogue.data {
  //import { ModifierTier } from "../modifier/modifier-tier";
  //import { Moves } from "#enums/moves";
  //import { Species } from "#enums/species";
  interface TmSpecies {
      [key: integer]: Array<Species | Array<Species | string>>;
  }
  export declare const reverseCompatibleTms: PokeRogue.enums.Moves[];
  export declare const tmSpecies: TmSpecies;
  interface TmPoolTiers {
      [key: integer]: ModifierTier;
  }
  export declare const tmPoolTiers: TmPoolTiers;
  export {};
  
}

declare namespace PokeRogue.data {
  //import BattleScene from "../battle-scene";
  //import { ModifierTypeFunc } from "../modifier/modifier-type";
  //import { EnemyPokemon } from "../field/pokemon";
  //import { PokemonSpeciesFilter } from "./pokemon-species";
  //import { Type } from "./type";
  //import { PersistentModifier } from "../modifier/modifier";
  //import { TrainerVariant } from "../field/trainer";
  //import { PartyMemberStrength } from "#enums/party-member-strength";
  //import { Species } from "#enums/species";
  //import { TrainerType } from "#enums/trainer-type";
  export declare enum TrainerPoolTier {
      COMMON = 0,
      UNCOMMON = 1,
      RARE = 2,
      SUPER_RARE = 3,
      ULTRA_RARE = 4
  }
  export interface TrainerTierPools {
      [key: integer]: Species[];
  }
  export declare enum TrainerSlot {
      NONE = 0,
      TRAINER = 1,
      TRAINER_PARTNER = 2
  }
  export declare class TrainerPartyTemplate {
      size: integer;
      strength: PokeRogue.enums.PartyMemberStrength;
      sameSpecies: boolean;
      balanced: boolean;
      constructor(size: integer, strength: PokeRogue.enums.PartyMemberStrength, sameSpecies?: boolean, balanced?: boolean);
      getStrength(index: integer): PartyMemberStrength;
      isSameSpecies(index: integer): boolean;
      isBalanced(index: integer): boolean;
  }
  export declare class TrainerPartyCompoundTemplate extends TrainerPartyTemplate {
      templates: TrainerPartyTemplate[];
      constructor(...templates: TrainerPartyTemplate[]);
      getStrength(index: integer): PartyMemberStrength;
      isSameSpecies(index: integer): boolean;
      isBalanced(index: integer): boolean;
  }
  export declare const trainerPartyTemplates: {
      ONE_WEAK_ONE_STRONG: TrainerPartyCompoundTemplate;
      ONE_AVG: TrainerPartyTemplate;
      ONE_AVG_ONE_STRONG: TrainerPartyCompoundTemplate;
      ONE_STRONG: TrainerPartyTemplate;
      ONE_STRONGER: TrainerPartyTemplate;
      TWO_WEAKER: TrainerPartyTemplate;
      TWO_WEAK: TrainerPartyTemplate;
      TWO_WEAK_ONE_AVG: TrainerPartyCompoundTemplate;
      TWO_WEAK_SAME_ONE_AVG: TrainerPartyCompoundTemplate;
      TWO_WEAK_SAME_TWO_WEAK_SAME: TrainerPartyCompoundTemplate;
      TWO_WEAK_ONE_STRONG: TrainerPartyCompoundTemplate;
      TWO_AVG: TrainerPartyTemplate;
      TWO_AVG_ONE_STRONG: TrainerPartyCompoundTemplate;
      TWO_AVG_SAME_ONE_AVG: TrainerPartyCompoundTemplate;
      TWO_AVG_SAME_ONE_STRONG: TrainerPartyCompoundTemplate;
      TWO_AVG_SAME_TWO_AVG_SAME: TrainerPartyCompoundTemplate;
      TWO_STRONG: TrainerPartyTemplate;
      THREE_WEAK: TrainerPartyTemplate;
      THREE_WEAK_SAME: TrainerPartyTemplate;
      THREE_AVG: TrainerPartyTemplate;
      THREE_AVG_SAME: TrainerPartyTemplate;
      THREE_WEAK_BALANCED: TrainerPartyTemplate;
      FOUR_WEAKER: TrainerPartyTemplate;
      FOUR_WEAKER_SAME: TrainerPartyTemplate;
      FOUR_WEAK: TrainerPartyTemplate;
      FOUR_WEAK_SAME: TrainerPartyTemplate;
      FOUR_WEAK_BALANCED: TrainerPartyTemplate;
      FIVE_WEAKER: TrainerPartyTemplate;
      FIVE_WEAK: TrainerPartyTemplate;
      FIVE_WEAK_BALANCED: TrainerPartyTemplate;
      SIX_WEAKER: TrainerPartyTemplate;
      SIX_WEAKER_SAME: TrainerPartyTemplate;
      SIX_WEAK_SAME: TrainerPartyTemplate;
      SIX_WEAK_BALANCED: TrainerPartyTemplate;
      GYM_LEADER_1: TrainerPartyCompoundTemplate;
      GYM_LEADER_2: TrainerPartyCompoundTemplate;
      GYM_LEADER_3: TrainerPartyCompoundTemplate;
      GYM_LEADER_4: TrainerPartyCompoundTemplate;
      GYM_LEADER_5: TrainerPartyCompoundTemplate;
      ELITE_FOUR: TrainerPartyCompoundTemplate;
      CHAMPION: TrainerPartyCompoundTemplate;
      RIVAL: TrainerPartyCompoundTemplate;
      RIVAL_2: TrainerPartyCompoundTemplate;
      RIVAL_3: TrainerPartyCompoundTemplate;
      RIVAL_4: TrainerPartyCompoundTemplate;
      RIVAL_5: TrainerPartyCompoundTemplate;
      RIVAL_6: TrainerPartyCompoundTemplate;
  };
  type PartyTemplateFunc = (scene: PokeRogue.BattleScene) => TrainerPartyTemplate;
  type PartyMemberFunc = (scene: PokeRogue.BattleScene, level: integer, strength: PokeRogue.enums.PartyMemberStrength) => EnemyPokemon;
  type GenModifiersFunc = (party: PokeRogue.field.EnemyPokemon[]) => PersistentModifier[];
  export interface PartyMemberFuncs {
      [key: integer]: PartyMemberFunc;
  }
  export declare class TrainerConfig {
      trainerType: PokeRogue.enums.TrainerType;
      trainerTypeDouble: PokeRogue.enums.TrainerType;
      name: string;
      nameFemale: string;
      nameDouble: string;
      title: string;
      titleDouble: string;
      hasGenders: boolean;
      hasDouble: boolean;
      hasCharSprite: boolean;
      doubleOnly: boolean;
      moneyMultiplier: number;
      isBoss: boolean;
      hasStaticParty: boolean;
      useSameSeedForAllMembers: boolean;
      mixedBattleBgm: string;
      battleBgm: string;
      encounterBgm: string;
      femaleEncounterBgm: string;
      doubleEncounterBgm: string;
      victoryBgm: string;
      genModifiersFunc: GenModifiersFunc;
      modifierRewardFuncs: PokeRogue.modifier.ModifierTypeFunc[];
      partyTemplates: TrainerPartyTemplate[];
      partyTemplateFunc: PartyTemplateFunc;
      partyMemberFuncs: PartyMemberFuncs;
      speciesPools: TrainerTierPools;
      speciesFilter: PokeRogue.data.PokemonSpeciesFilter;
      specialtyTypes: PokeRogue.data.Type[];
      encounterMessages: string[];
      victoryMessages: string[];
      defeatMessages: string[];
      femaleEncounterMessages: string[];
      femaleVictoryMessages: string[];
      femaleDefeatMessages: string[];
      doubleEncounterMessages: string[];
      doubleVictoryMessages: string[];
      doubleDefeatMessages: string[];
      constructor(trainerType: PokeRogue.enums.TrainerType, allowLegendaries?: boolean);
      getKey(): string;
      getSpriteKey(female?: boolean, isDouble?: boolean): string;
      setName(name: string): TrainerConfig;
      setTitle(title: string): TrainerConfig;
      /**
       * Returns the derived trainer type for a given trainer type.
       * @param trainerTypeToDeriveFrom - The trainer type to derive from. (If null, the this.trainerType property will be used.)
       * @returns {TrainerType} - The derived trainer type.
       */
      getDerivedType(trainerTypeToDeriveFrom?: TrainerType): TrainerType;
      /**
       * Sets the configuration for trainers with genders, including the female name and encounter background music (BGM).
       * @param {string} [nameFemale] - The name of the female trainer. If 'Ivy', a localized name will be assigned.
       * @param {TrainerType | string} [femaleEncounterBgm] - The encounter BGM for the female trainer, which can be a TrainerType or a string.
       * @returns {TrainerConfig} - The updated TrainerConfig instance.
       **/
      setHasGenders(nameFemale?: string, femaleEncounterBgm?: TrainerType | string): TrainerConfig;
      /**
       * Sets the configuration for trainers with double battles, including the name of the double trainer and the encounter BGM.
       * @param nameDouble - The name of the double trainer (e.g., "Ace Duo" for Trainer Class Doubles or "red_blue_double" for NAMED trainer doubles).
       * @param doubleEncounterBgm - The encounter BGM for the double trainer, which can be a TrainerType or a string.
       * @returns {TrainerConfig} - The updated TrainerConfig instance.
       */
      setHasDouble(nameDouble: string, doubleEncounterBgm?: TrainerType | string): TrainerConfig;
      /**
       * Sets the trainer type for double battles.
       * @param trainerTypeDouble - The TrainerType of the partner in a double battle.
       * @returns {TrainerConfig} - The updated TrainerConfig instance.
       */
      setDoubleTrainerType(trainerTypeDouble: PokeRogue.enums.TrainerType): TrainerConfig;
      /**
       * Sets the encounter and victory messages for double trainers.
       * @param nameDouble - The name of the pair (e.g. "red_blue_double").
       */
      setDoubleMessages(nameDouble: string): void;
      /**
       * Sets the title for double trainers
       * @param titleDouble - the key for the title in the i18n file. (e.g., "champion_double").
       * @returns {TrainerConfig} - The updated TrainerConfig instance.
       */
      setDoubleTitle(titleDouble: string): TrainerConfig;
      setHasCharSprite(): TrainerConfig;
      setDoubleOnly(): TrainerConfig;
      setMoneyMultiplier(moneyMultiplier: number): TrainerConfig;
      setBoss(): TrainerConfig;
      setStaticParty(): TrainerConfig;
      setUseSameSeedForAllMembers(): TrainerConfig;
      setMixedBattleBgm(mixedBattleBgm: string): TrainerConfig;
      setBattleBgm(battleBgm: string): TrainerConfig;
      setEncounterBgm(encounterBgm: PokeRogue.enums.TrainerType | string): TrainerConfig;
      setVictoryBgm(victoryBgm: string): TrainerConfig;
      setPartyTemplates(...partyTemplates: TrainerPartyTemplate[]): TrainerConfig;
      setPartyTemplateFunc(partyTemplateFunc: PartyTemplateFunc): TrainerConfig;
      setPartyMemberFunc(slotIndex: integer, partyMemberFunc: PartyMemberFunc): TrainerConfig;
      setSpeciesPools(speciesPools: TrainerTierPools | Species[]): TrainerConfig;
      setSpeciesFilter(speciesFilter: PokeRogue.data.PokemonSpeciesFilter, allowLegendaries?: boolean): TrainerConfig;
      setSpecialtyTypes(...specialtyTypes: PokeRogue.data.Type[]): TrainerConfig;
      setGenModifiersFunc(genModifiersFunc: GenModifiersFunc): TrainerConfig;
      setModifierRewardFuncs(...modifierTypeFuncs: (() => ModifierTypeFunc)[]): TrainerConfig;
      /**
         * Initializes the trainer configuration for an evil team leader. Temporarily hardcoding evil leader teams though.
         * @param {Species | Species[]} signatureSpecies - The signature species for the evil team leader.
         * @param {Type[]} specialtyTypes - The specialty types for the evil team Leader.
         * @param boolean whether or not this is the rematch fight
         * @returns {TrainerConfig} - The updated TrainerConfig instance.
         * **/
      initForEvilTeamLeader(title: string, signatureSpecies: (Species | Species[])[], rematch?: boolean, ...specialtyTypes: PokeRogue.data.Type[]): TrainerConfig;
      /**
       * Initializes the trainer configuration for a Gym Leader.
       * @param {Species | Species[]} signatureSpecies - The signature species for the Gym Leader.
       * @param {Type[]} specialtyTypes - The specialty types for the Gym Leader.
       * @param isMale - Whether the Gym Leader is Male or Not (for localization of the title).
       * @returns {TrainerConfig} - The updated TrainerConfig instance.
       * **/
      initForGymLeader(signatureSpecies: (Species | Species[])[], isMale: boolean, ...specialtyTypes: PokeRogue.data.Type[]): TrainerConfig;
      /**
       * Initializes the trainer configuration for an Elite Four member.
       * @param {Species | Species[]} signatureSpecies - The signature species for the Elite Four member.
       * @param {Type[]} specialtyTypes - The specialty types for the Elite Four member.
       * @param isMale - Whether the Elite Four Member is Male or Female (for localization of the title).
       * @returns {TrainerConfig} - The updated TrainerConfig instance.
       **/
      initForEliteFour(signatureSpecies: (Species | Species[])[], isMale: boolean, ...specialtyTypes: PokeRogue.data.Type[]): TrainerConfig;
      /**
       * Initializes the trainer configuration for a Champion.
       * @param {Species | Species[]} signatureSpecies - The signature species for the Champion.
       * @param isMale - Whether the Champion is Male or Female (for localization of the title).
       * @returns {TrainerConfig} - The updated TrainerConfig instance.
       **/
      initForChampion(signatureSpecies: (Species | Species[])[], isMale: boolean): TrainerConfig;
      /**
       * Retrieves the title for the trainer based on the provided trainer slot and variant.
       * @param {TrainerSlot} trainerSlot - The slot to determine which title to use. Defaults to TrainerSlot.NONE.
       * @param {TrainerVariant} variant - The variant of the trainer to determine the specific title.
       * @returns {string} - The title of the trainer.
       **/
      getTitle(trainerSlot: TrainerSlot, variant: PokeRogue.field.TrainerVariant): string;
      loadAssets(scene: PokeRogue.BattleScene, variant: PokeRogue.field.TrainerVariant): Promise<void>;
  }
  interface TrainerConfigs {
      [key: integer]: TrainerConfig;
  }
  type SignatureSpecies = {
      [key in string]: (Species | Species[])[];
  };
  export declare const signatureSpecies: SignatureSpecies;
  export declare const trainerConfigs: TrainerConfigs;
  export {};
  
}

declare namespace PokeRogue.data {
  export declare const trainerNamePools: {
      1: string[][];
      2: string[][];
      3: string[][];
      4: string[][];
      5: string[];
      6: string[];
      7: string[];
      8: string[][];
      9: string[][];
      10: string[][];
      11: string[][];
      12: string[];
      13: string[];
      14: string[][];
      15: string[];
      16: string[];
      17: string[];
      18: string[];
      19: string[];
      20: string[];
      21: string[];
      22: string[];
      23: string[];
      24: string[];
      25: string[];
      26: string[];
      28: string[];
      29: string[];
      30: string[];
      31: string[];
      32: string[][];
      33: string[][];
      34: string[][];
      35: string[][];
      36: string[][];
      37: string[][];
      38: string[];
      39: string[];
      40: string[][];
      41: string[];
      42: string[][];
      43: string[];
      44: string[][];
      45: string[][];
      46: string[];
      47: string[][];
      48: string[][];
      49: string[][];
      50: string[][];
      27: string[];
  };
  
}

declare namespace PokeRogue.data {
  export declare enum Type {
      UNKNOWN = -1,
      NORMAL = 0,
      FIGHTING = 1,
      FLYING = 2,
      POISON = 3,
      GROUND = 4,
      ROCK = 5,
      BUG = 6,
      GHOST = 7,
      STEEL = 8,
      FIRE = 9,
      WATER = 10,
      GRASS = 11,
      ELECTRIC = 12,
      PSYCHIC = 13,
      ICE = 14,
      DRAGON = 15,
      DARK = 16,
      FAIRY = 17,
      STELLAR = 18
  }
  export type TypeDamageMultiplier = 0 | 0.125 | 0.25 | 0.5 | 1 | 2 | 4 | 8;
  export declare function getTypeDamageMultiplier(attackType: integer, defType: integer): TypeDamageMultiplier;
  /**
   * Retrieve the color corresponding to a specific damage multiplier
   * @returns A color or undefined if the default color should be used
   */
  export declare function getTypeDamageMultiplierColor(multiplier: TypeDamageMultiplier, side: "defense" | "offense"): string | undefined;
  export declare function getTypeRgb(type: Type): [integer, integer, integer];
  
}

declare namespace PokeRogue.data {
  export type Variant = 0 | 1 | 2;
  export type VariantSet = [Variant, Variant, Variant];
  export declare const variantData: any;
  export declare const variantColorCache: {};
  export declare function getVariantTint(variant: Variant): integer;
  export declare function getVariantIcon(variant: Variant): integer;
  
}

declare namespace PokeRogue.data {
  //import Pokemon from "../field/pokemon";
  //import { Type } from "./type";
  //import Move from "./move";
  //import BattleScene from "../battle-scene";
  //import { TerrainType } from "./terrain";
  export declare enum WeatherType {
      NONE = 0,
      SUNNY = 1,
      RAIN = 2,
      SANDSTORM = 3,
      HAIL = 4,
      SNOW = 5,
      FOG = 6,
      HEAVY_RAIN = 7,
      HARSH_SUN = 8,
      STRONG_WINDS = 9
  }
  export declare class Weather {
      weatherType: WeatherType;
      turnsLeft: integer;
      constructor(weatherType: WeatherType, turnsLeft?: integer);
      lapse(): boolean;
      isImmutable(): boolean;
      isDamaging(): boolean;
      isTypeDamageImmune(type: PokeRogue.data.Type): boolean;
      getAttackTypeMultiplier(attackType: PokeRogue.data.Type): number;
      isMoveWeatherCancelled(move: PokeRogue.data.Move): boolean;
      isEffectSuppressed(scene: PokeRogue.BattleScene): boolean;
  }
  export declare function getWeatherStartMessage(weatherType: WeatherType): string;
  export declare function getWeatherLapseMessage(weatherType: WeatherType): string;
  export declare function getWeatherDamageMessage(weatherType: WeatherType, pokemon: PokeRogue.field.Pokemon): string;
  export declare function getWeatherClearMessage(weatherType: WeatherType): string;
  export declare function getTerrainStartMessage(terrainType: PokeRogue.data.TerrainType): string;
  export declare function getTerrainClearMessage(terrainType: PokeRogue.data.TerrainType): string;
  export declare function getTerrainBlockMessage(pokemon: PokeRogue.field.Pokemon, terrainType: PokeRogue.data.TerrainType): string;
  export declare function getRandomWeatherType(arena: any): WeatherType;
  
}

declare namespace PokeRogue {
  //import { Phase } from "./phase";
  //import BattleScene from "./battle-scene";
  //import { Egg } from "./data/egg";
  //import { PlayerPokemon } from "./field/pokemon";
  /**
   * Class that represents egg hatching
   */
  export declare class EggHatchPhase extends PokeRogue.Phase {
      /** The egg that is hatching */
      public egg;
      /** The number of eggs that are hatching */
      public eggsToHatchCount;
      /** The container that lists how many eggs are hatching */
      public eggCounterContainer;
      /** The scene handler for egg hatching */
      public eggHatchHandler;
      /** The phaser gameobject container that holds everything */
      public eggHatchContainer;
      /** The phaser image that is the background */
      public eggHatchBg;
      /** The phaser rectangle that overlays during the scene */
      public eggHatchOverlay;
      /** The phaser container that holds the egg */
      public eggContainer;
      /** The phaser sprite of the egg */
      public eggSprite;
      /** The phaser sprite of the cracks in an egg */
      public eggCrackSprite;
      /** The phaser sprite that represents the overlaid light rays */
      public eggLightraysOverlay;
      /** The phaser sprite of the hatched Pokemon */
      public pokemonSprite;
      /** The phaser sprite for shiny sparkles */
      public pokemonShinySparkle;
      /** The {@link PokemonInfoContainer} of the newly hatched Pokemon */
      public infoContainer;
      /** The newly hatched {@link PlayerPokemon} */
      public pokemon;
      /** The index of which egg move is unlocked. 0-2 is common, 3 is rare */
      public eggMoveIndex;
      /** Internal booleans representing if the egg is hatched, able to be skipped, or skipped */
      public hatched;
      public canSkip;
      public skipped;
      /** The sound effect being played when the egg is hatched */
      public evolutionBgm;
      constructor(scene: PokeRogue.BattleScene, egg: PokeRogue.data.Egg, eggsToHatchCount: integer);
      start(): void;
      end(): void;
      /**
       * Function that animates egg shaking
       * @param intensity of horizontal shaking. Doubled on the first call (where count is 0)
       * @param repeatCount the number of times this function should be called (asynchronous recursion?!?)
       * @param count the current number of times this function has been called.
       * @returns nothing since it's a Promise<void>
       */
      doEggShake(intensity: number, repeatCount?: integer, count?: integer): Promise<void>;
      /**
       * Tries to skip the hatching animation
       * @returns false if cannot be skipped or already skipped. True otherwise
       */
      trySkip(): boolean;
      /**
       * Plays the animation of an egg hatch
       */
      doHatch(): void;
      /**
       * Function to do the logic and animation of completing a hatch and revealing the Pokemon
       */
      doReveal(): void;
      /**
       * Helper function to generate sine. (Why is this not a Utils?!?)
       * @param index random number from 0-7 being passed in to scale pi/128
       * @param amplitude Scaling
       * @returns a number
       */
      sin(index: integer, amplitude: integer): number;
      /**
       * Animates spraying
       * @param intensity number of times this is repeated (this is a badly named variable)
       * @param offsetY how much to offset the Y coordinates
       */
      doSpray(intensity: integer, offsetY?: number): void;
      /**
       * Animates a particle used in the spray animation
       * @param trigIndex Used to modify the particle's vertical speed, is a random number from 0-7
       * @param offsetY how much to offset the Y coordinate
       */
      doSprayParticle(trigIndex: integer, offsetY: number): void;
      /**
       * Generates a Pokemon to be hatched by the egg
       * @returns the hatched PlayerPokemon
       */
      generatePokemon(): PlayerPokemon;
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum Abilities {
      /**{@link https://bulbapedia.bulbagarden.net/wiki/None_(ability) | Source} */
      NONE = 0,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stench_(ability) | Source} */
      STENCH = 1,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drizzle_(ability) | Source} */
      DRIZZLE = 2,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Speed_Boost_(ability) | Source} */
      SPEED_BOOST = 3,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Battle_Armor_(ability) | Source} */
      BATTLE_ARMOR = 4,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sturdy_(ability) | Source} */
      STURDY = 5,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Damp_(ability) | Source} */
      DAMP = 6,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Limber_(ability) | Source} */
      LIMBER = 7,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sand_Veil_(ability) | Source} */
      SAND_VEIL = 8,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Static_(ability) | Source} */
      STATIC = 9,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Volt_Absorb_(ability) | Source} */
      VOLT_ABSORB = 10,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Water_Absorb_(ability) | Source} */
      WATER_ABSORB = 11,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Oblivious_(ability) | Source} */
      OBLIVIOUS = 12,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cloud_Nine_(ability) | Source} */
      CLOUD_NINE = 13,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Compound_Eyes_(ability) | Source} */
      COMPOUND_EYES = 14,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Insomnia_(ability) | Source} */
      INSOMNIA = 15,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Color_Change_(ability) | Source} */
      COLOR_CHANGE = 16,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Immunity_(ability) | Source} */
      IMMUNITY = 17,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flash_Fire_(ability) | Source} */
      FLASH_FIRE = 18,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shield_Dust_(ability) | Source} */
      SHIELD_DUST = 19,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Own_Tempo_(ability) | Source} */
      OWN_TEMPO = 20,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Suction_Cups_(ability) | Source} */
      SUCTION_CUPS = 21,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Intimidate_(ability) | Source} */
      INTIMIDATE = 22,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shadow_Tag_(ability) | Source} */
      SHADOW_TAG = 23,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rough_Skin_(ability) | Source} */
      ROUGH_SKIN = 24,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wonder_Guard_(ability) | Source} */
      WONDER_GUARD = 25,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Levitate_(ability) | Source} */
      LEVITATE = 26,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Effect_Spore_(ability) | Source} */
      EFFECT_SPORE = 27,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Synchronize_(ability) | Source} */
      SYNCHRONIZE = 28,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clear_Body_(ability) | Source} */
      CLEAR_BODY = 29,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Natural_Cure_(ability) | Source} */
      NATURAL_CURE = 30,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lightning_Rod_(ability) | Source} */
      LIGHTNING_ROD = 31,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Serene_Grace_(ability) | Source} */
      SERENE_GRACE = 32,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swift_Swim_(ability) | Source} */
      SWIFT_SWIM = 33,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chlorophyll_(ability) | Source} */
      CHLOROPHYLL = 34,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Illuminate_(ability) | Source} */
      ILLUMINATE = 35,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trace_(ability) | Source} */
      TRACE = 36,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Huge_Power_(ability) | Source} */
      HUGE_POWER = 37,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poison_Point_(ability) | Source} */
      POISON_POINT = 38,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Inner_Focus_(ability) | Source} */
      INNER_FOCUS = 39,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magma_Armor_(ability) | Source} */
      MAGMA_ARMOR = 40,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Water_Veil_(ability) | Source} */
      WATER_VEIL = 41,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magnet_Pull_(ability) | Source} */
      MAGNET_PULL = 42,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Soundproof_(ability) | Source} */
      SOUNDPROOF = 43,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rain_Dish_(ability) | Source} */
      RAIN_DISH = 44,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sand_Stream_(ability) | Source} */
      SAND_STREAM = 45,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pressure_(ability) | Source} */
      PRESSURE = 46,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thick_Fat_(ability) | Source} */
      THICK_FAT = 47,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Early_Bird_(ability) | Source} */
      EARLY_BIRD = 48,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flame_Body_(ability) | Source} */
      FLAME_BODY = 49,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Run_Away_(ability) | Source} */
      RUN_AWAY = 50,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Keen_Eye_(ability) | Source} */
      KEEN_EYE = 51,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hyper_Cutter_(ability) | Source} */
      HYPER_CUTTER = 52,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pickup_(ability) | Source} */
      PICKUP = 53,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Truant_(ability) | Source} */
      TRUANT = 54,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hustle_(ability) | Source} */
      HUSTLE = 55,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cute_Charm_(ability) | Source} */
      CUTE_CHARM = 56,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Plus_(ability) | Source} */
      PLUS = 57,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Minus_(ability) | Source} */
      MINUS = 58,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Forecast_(ability) | Source} */
      FORECAST = 59,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sticky_Hold_(ability) | Source} */
      STICKY_HOLD = 60,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shed_Skin_(ability) | Source} */
      SHED_SKIN = 61,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Guts_(ability) | Source} */
      GUTS = 62,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Marvel_Scale_(ability) | Source} */
      MARVEL_SCALE = 63,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Liquid_Ooze_(ability) | Source} */
      LIQUID_OOZE = 64,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Overgrow_(ability) | Source} */
      OVERGROW = 65,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blaze_(ability) | Source} */
      BLAZE = 66,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Torrent_(ability) | Source} */
      TORRENT = 67,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swarm_(ability) | Source} */
      SWARM = 68,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rock_Head_(ability) | Source} */
      ROCK_HEAD = 69,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drought_(ability) | Source} */
      DROUGHT = 70,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arena_Trap_(ability) | Source} */
      ARENA_TRAP = 71,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vital_Spirit_(ability) | Source} */
      VITAL_SPIRIT = 72,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/White_Smoke_(ability) | Source} */
      WHITE_SMOKE = 73,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pure_Power_(ability) | Source} */
      PURE_POWER = 74,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shell_Armor_(ability) | Source} */
      SHELL_ARMOR = 75,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Air_Lock_(ability) | Source} */
      AIR_LOCK = 76,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tangled_Feet_(ability) | Source} */
      TANGLED_FEET = 77,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Motor_Drive_(ability) | Source} */
      MOTOR_DRIVE = 78,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rivalry_(ability) | Source} */
      RIVALRY = 79,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steadfast_(ability) | Source} */
      STEADFAST = 80,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snow_Cloak_(ability) | Source} */
      SNOW_CLOAK = 81,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gluttony_(ability) | Source} */
      GLUTTONY = 82,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Anger_Point_(ability) | Source} */
      ANGER_POINT = 83,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Unburden_(ability) | Source} */
      UNBURDEN = 84,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heatproof_(ability) | Source} */
      HEATPROOF = 85,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Simple_(ability) | Source} */
      SIMPLE = 86,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dry_Skin_(ability) | Source} */
      DRY_SKIN = 87,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Download_(ability) | Source} */
      DOWNLOAD = 88,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Fist_(ability) | Source} */
      IRON_FIST = 89,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poison_Heal_(ability) | Source} */
      POISON_HEAL = 90,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Adaptability_(ability) | Source} */
      ADAPTABILITY = 91,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skill_Link_(ability) | Source} */
      SKILL_LINK = 92,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hydration_(ability) | Source} */
      HYDRATION = 93,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Solar_Power_(ability) | Source} */
      SOLAR_POWER = 94,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quick_Feet_(ability) | Source} */
      QUICK_FEET = 95,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Normalize_(ability) | Source} */
      NORMALIZE = 96,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sniper_(ability) | Source} */
      SNIPER = 97,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magic_Guard_(ability) | Source} */
      MAGIC_GUARD = 98,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/No_Guard_(ability) | Source} */
      NO_GUARD = 99,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stall_(ability) | Source} */
      STALL = 100,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Technician_(ability) | Source} */
      TECHNICIAN = 101,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Leaf_Guard_(ability) | Source} */
      LEAF_GUARD = 102,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Klutz_(ability) | Source} */
      KLUTZ = 103,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mold_Breaker_(ability) | Source} */
      MOLD_BREAKER = 104,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Super_Luck_(ability) | Source} */
      SUPER_LUCK = 105,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aftermath_(ability) | Source} */
      AFTERMATH = 106,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Anticipation_(ability) | Source} */
      ANTICIPATION = 107,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Forewarn_(ability) | Source} */
      FOREWARN = 108,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Unaware_(ability) | Source} */
      UNAWARE = 109,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tinted_Lens_(ability) | Source} */
      TINTED_LENS = 110,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Filter_(ability) | Source} */
      FILTER = 111,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slow_Start_(ability) | Source} */
      SLOW_START = 112,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scrappy_(ability) | Source} */
      SCRAPPY = 113,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Storm_Drain_(ability) | Source} */
      STORM_DRAIN = 114,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Body_(ability) | Source} */
      ICE_BODY = 115,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Solid_Rock_(ability) | Source} */
      SOLID_ROCK = 116,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snow_Warning_(ability) | Source} */
      SNOW_WARNING = 117,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Honey_Gather_(ability) | Source} */
      HONEY_GATHER = 118,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Frisk_(ability) | Source} */
      FRISK = 119,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Reckless_(ability) | Source} */
      RECKLESS = 120,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Multitype_(ability) | Source} */
      MULTITYPE = 121,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flower_Gift_(ability) | Source} */
      FLOWER_GIFT = 122,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bad_Dreams_(ability) | Source} */
      BAD_DREAMS = 123,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pickpocket_(ability) | Source} */
      PICKPOCKET = 124,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sheer_Force_(ability) | Source} */
      SHEER_FORCE = 125,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Contrary_(ability) | Source} */
      CONTRARY = 126,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Unnerve_(ability) | Source} */
      UNNERVE = 127,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Defiant_(ability) | Source} */
      DEFIANT = 128,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Defeatist_(ability) | Source} */
      DEFEATIST = 129,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cursed_Body_(ability) | Source} */
      CURSED_BODY = 130,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Healer_(ability) | Source} */
      HEALER = 131,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Friend_Guard_(ability) | Source} */
      FRIEND_GUARD = 132,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Weak_Armor_(ability) | Source} */
      WEAK_ARMOR = 133,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heavy_Metal_(ability) | Source} */
      HEAVY_METAL = 134,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Light_Metal_(ability) | Source} */
      LIGHT_METAL = 135,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Multiscale_(ability) | Source} */
      MULTISCALE = 136,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toxic_Boost_(ability) | Source} */
      TOXIC_BOOST = 137,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flare_Boost_(ability) | Source} */
      FLARE_BOOST = 138,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Harvest_(ability) | Source} */
      HARVEST = 139,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Telepathy_(ability) | Source} */
      TELEPATHY = 140,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Moody_(ability) | Source} */
      MOODY = 141,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Overcoat_(ability) | Source} */
      OVERCOAT = 142,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poison_Touch_(ability) | Source} */
      POISON_TOUCH = 143,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Regenerator_(ability) | Source} */
      REGENERATOR = 144,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Big_Pecks_(ability) | Source} */
      BIG_PECKS = 145,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sand_Rush_(ability) | Source} */
      SAND_RUSH = 146,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wonder_Skin_(ability) | Source} */
      WONDER_SKIN = 147,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Analytic_(ability) | Source} */
      ANALYTIC = 148,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Illusion_(ability) | Source} */
      ILLUSION = 149,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Imposter_(ability) | Source} */
      IMPOSTER = 150,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Infiltrator_(ability) | Source} */
      INFILTRATOR = 151,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mummy_(ability) | Source} */
      MUMMY = 152,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Moxie_(ability) | Source} */
      MOXIE = 153,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Justified_(ability) | Source} */
      JUSTIFIED = 154,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rattled_(ability) | Source} */
      RATTLED = 155,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magic_Bounce_(ability) | Source} */
      MAGIC_BOUNCE = 156,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sap_Sipper_(ability) | Source} */
      SAP_SIPPER = 157,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Prankster_(ability) | Source} */
      PRANKSTER = 158,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sand_Force_(ability) | Source} */
      SAND_FORCE = 159,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Barbs_(ability) | Source} */
      IRON_BARBS = 160,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zen_Mode_(ability) | Source} */
      ZEN_MODE = 161,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Victory_Star_(ability) | Source} */
      VICTORY_STAR = 162,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Turboblaze_(ability) | Source} */
      TURBOBLAZE = 163,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Teravolt_(ability) | Source} */
      TERAVOLT = 164,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aroma_Veil_(ability) | Source} */
      AROMA_VEIL = 165,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flower_Veil_(ability) | Source} */
      FLOWER_VEIL = 166,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cheek_Pouch_(ability) | Source} */
      CHEEK_POUCH = 167,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Protean_(ability) | Source} */
      PROTEAN = 168,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fur_Coat_(ability) | Source} */
      FUR_COAT = 169,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magician_(ability) | Source} */
      MAGICIAN = 170,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bulletproof_(ability) | Source} */
      BULLETPROOF = 171,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Competitive_(ability) | Source} */
      COMPETITIVE = 172,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Strong_Jaw_(ability) | Source} */
      STRONG_JAW = 173,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Refrigerate_(ability) | Source} */
      REFRIGERATE = 174,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sweet_Veil_(ability) | Source} */
      SWEET_VEIL = 175,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stance_Change_(ability) | Source} */
      STANCE_CHANGE = 176,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gale_Wings_(ability) | Source} */
      GALE_WINGS = 177,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mega_Launcher_(ability) | Source} */
      MEGA_LAUNCHER = 178,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grass_Pelt_(ability) | Source} */
      GRASS_PELT = 179,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Symbiosis_(ability) | Source} */
      SYMBIOSIS = 180,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tough_Claws_(ability) | Source} */
      TOUGH_CLAWS = 181,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pixilate_(ability) | Source} */
      PIXILATE = 182,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gooey_(ability) | Source} */
      GOOEY = 183,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aerilate_(ability) | Source} */
      AERILATE = 184,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Parental_Bond_(ability) | Source} */
      PARENTAL_BOND = 185,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dark_Aura_(ability) | Source} */
      DARK_AURA = 186,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fairy_Aura_(ability) | Source} */
      FAIRY_AURA = 187,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aura_Break_(ability) | Source} */
      AURA_BREAK = 188,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Primordial_Sea_(ability) | Source} */
      PRIMORDIAL_SEA = 189,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Desolate_Land_(ability) | Source} */
      DESOLATE_LAND = 190,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Delta_Stream_(ability) | Source} */
      DELTA_STREAM = 191,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stamina_(ability) | Source} */
      STAMINA = 192,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wimp_Out_(ability) | Source} */
      WIMP_OUT = 193,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Emergency_Exit_(ability) | Source} */
      EMERGENCY_EXIT = 194,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Water_Compaction_(ability) | Source} */
      WATER_COMPACTION = 195,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Merciless_(ability) | Source} */
      MERCILESS = 196,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shields_Down_(ability) | Source} */
      SHIELDS_DOWN = 197,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stakeout_(ability) | Source} */
      STAKEOUT = 198,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Water_Bubble_(ability) | Source} */
      WATER_BUBBLE = 199,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steelworker_(ability) | Source} */
      STEELWORKER = 200,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Berserk_(ability) | Source} */
      BERSERK = 201,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slush_Rush_(ability) | Source} */
      SLUSH_RUSH = 202,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Long_Reach_(ability) | Source} */
      LONG_REACH = 203,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Liquid_Voice_(ability) | Source} */
      LIQUID_VOICE = 204,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Triage_(ability) | Source} */
      TRIAGE = 205,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Galvanize_(ability) | Source} */
      GALVANIZE = 206,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Surge_Surfer_(ability) | Source} */
      SURGE_SURFER = 207,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Schooling_(ability) | Source} */
      SCHOOLING = 208,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Disguise_(ability) | Source} */
      DISGUISE = 209,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Battle_Bond_(ability) | Source} */
      BATTLE_BOND = 210,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Construct_(ability) | Source} */
      POWER_CONSTRUCT = 211,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Corrosion_(ability) | Source} */
      CORROSION = 212,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Comatose_(ability) | Source} */
      COMATOSE = 213,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Queenly_Majesty_(ability) | Source} */
      QUEENLY_MAJESTY = 214,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Innards_Out_(ability) | Source} */
      INNARDS_OUT = 215,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dancer_(ability) | Source} */
      DANCER = 216,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Battery_(ability) | Source} */
      BATTERY = 217,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fluffy_(ability) | Source} */
      FLUFFY = 218,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dazzling_(ability) | Source} */
      DAZZLING = 219,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Soul_Heart_(ability) | Source} */
      SOUL_HEART = 220,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tangling_Hair_(ability) | Source} */
      TANGLING_HAIR = 221,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Receiver_(ability) | Source} */
      RECEIVER = 222,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Of_Alchemy_(ability) | Source} */
      POWER_OF_ALCHEMY = 223,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Beast_Boost_(ability) | Source} */
      BEAST_BOOST = 224,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rks_System_(ability) | Source} */
      RKS_SYSTEM = 225,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electric_Surge_(ability) | Source} */
      ELECTRIC_SURGE = 226,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psychic_Surge_(ability) | Source} */
      PSYCHIC_SURGE = 227,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Misty_Surge_(ability) | Source} */
      MISTY_SURGE = 228,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grassy_Surge_(ability) | Source} */
      GRASSY_SURGE = 229,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Full_Metal_Body_(ability) | Source} */
      FULL_METAL_BODY = 230,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shadow_Shield_(ability) | Source} */
      SHADOW_SHIELD = 231,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Prism_Armor_(ability) | Source} */
      PRISM_ARMOR = 232,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Neuroforce_(ability) | Source} */
      NEUROFORCE = 233,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Intrepid_Sword_(ability) | Source} */
      INTREPID_SWORD = 234,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dauntless_Shield_(ability) | Source} */
      DAUNTLESS_SHIELD = 235,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Libero_(ability) | Source} */
      LIBERO = 236,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ball_Fetch_(ability) | Source} */
      BALL_FETCH = 237,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cotton_Down_(ability) | Source} */
      COTTON_DOWN = 238,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Propeller_Tail_(ability) | Source} */
      PROPELLER_TAIL = 239,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mirror_Armor_(ability) | Source} */
      MIRROR_ARMOR = 240,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gulp_Missile_(ability) | Source} */
      GULP_MISSILE = 241,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stalwart_(ability) | Source} */
      STALWART = 242,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steam_Engine_(ability) | Source} */
      STEAM_ENGINE = 243,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Punk_Rock_(ability) | Source} */
      PUNK_ROCK = 244,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sand_Spit_(ability) | Source} */
      SAND_SPIT = 245,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Scales_(ability) | Source} */
      ICE_SCALES = 246,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ripen_(ability) | Source} */
      RIPEN = 247,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Face_(ability) | Source} */
      ICE_FACE = 248,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Spot_(ability) | Source} */
      POWER_SPOT = 249,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mimicry_(ability) | Source} */
      MIMICRY = 250,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Screen_Cleaner_(ability) | Source} */
      SCREEN_CLEANER = 251,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steely_Spirit_(ability) | Source} */
      STEELY_SPIRIT = 252,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Perish_Body_(ability) | Source} */
      PERISH_BODY = 253,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wandering_Spirit_(ability) | Source} */
      WANDERING_SPIRIT = 254,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gorilla_Tactics_(ability) | Source} */
      GORILLA_TACTICS = 255,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Neutralizing_Gas_(ability) | Source} */
      NEUTRALIZING_GAS = 256,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pastel_Veil_(ability) | Source} */
      PASTEL_VEIL = 257,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hunger_Switch_(ability) | Source} */
      HUNGER_SWITCH = 258,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quick_Draw_(ability) | Source} */
      QUICK_DRAW = 259,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Unseen_Fist_(ability) | Source} */
      UNSEEN_FIST = 260,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Curious_Medicine_(ability) | Source} */
      CURIOUS_MEDICINE = 261,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Transistor_(ability) | Source} */
      TRANSISTOR = 262,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragons_Maw_(ability) | Source} */
      DRAGONS_MAW = 263,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chilling_Neigh_(ability) | Source} */
      CHILLING_NEIGH = 264,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grim_Neigh_(ability) | Source} */
      GRIM_NEIGH = 265,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/As_One_Glastrier_(ability) | Source} */
      AS_ONE_GLASTRIER = 266,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/As_One_Spectrier_(ability) | Source} */
      AS_ONE_SPECTRIER = 267,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lingering_Aroma_(ability) | Source} */
      LINGERING_AROMA = 268,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Seed_Sower_(ability) | Source} */
      SEED_SOWER = 269,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thermal_Exchange_(ability) | Source} */
      THERMAL_EXCHANGE = 270,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Anger_Shell_(ability) | Source} */
      ANGER_SHELL = 271,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Purifying_Salt_(ability) | Source} */
      PURIFYING_SALT = 272,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Well_Baked_Body_(ability) | Source} */
      WELL_BAKED_BODY = 273,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wind_Rider_(ability) | Source} */
      WIND_RIDER = 274,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Guard_Dog_(ability) | Source} */
      GUARD_DOG = 275,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rocky_Payload_(ability) | Source} */
      ROCKY_PAYLOAD = 276,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wind_Power_(ability) | Source} */
      WIND_POWER = 277,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zero_To_Hero_(ability) | Source} */
      ZERO_TO_HERO = 278,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Commander_(ability) | Source} */
      COMMANDER = 279,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electromorphosis_(ability) | Source} */
      ELECTROMORPHOSIS = 280,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Protosynthesis_(ability) | Source} */
      PROTOSYNTHESIS = 281,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quark_Drive_(ability) | Source} */
      QUARK_DRIVE = 282,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Good_As_Gold_(ability) | Source} */
      GOOD_AS_GOLD = 283,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vessel_Of_Ruin_(ability) | Source} */
      VESSEL_OF_RUIN = 284,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sword_Of_Ruin_(ability) | Source} */
      SWORD_OF_RUIN = 285,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tablets_Of_Ruin_(ability) | Source} */
      TABLETS_OF_RUIN = 286,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Beads_Of_Ruin_(ability) | Source} */
      BEADS_OF_RUIN = 287,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Orichalcum_Pulse_(ability) | Source} */
      ORICHALCUM_PULSE = 288,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hadron_Engine_(ability) | Source} */
      HADRON_ENGINE = 289,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Opportunist_(ability) | Source} */
      OPPORTUNIST = 290,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cud_Chew_(ability) | Source} */
      CUD_CHEW = 291,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sharpness_(ability) | Source} */
      SHARPNESS = 292,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Supreme_Overlord_(ability) | Source} */
      SUPREME_OVERLORD = 293,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Costar_(ability) | Source} */
      COSTAR = 294,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toxic_Debris_(ability) | Source} */
      TOXIC_DEBRIS = 295,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Armor_Tail_(ability) | Source} */
      ARMOR_TAIL = 296,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Earth_Eater_(ability) | Source} */
      EARTH_EATER = 297,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mycelium_Might_(ability) | Source} */
      MYCELIUM_MIGHT = 298,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Minds_Eye_(ability) | Source} */
      MINDS_EYE = 299,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Supersweet_Syrup_(ability) | Source} */
      SUPERSWEET_SYRUP = 300,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hospitality_(ability) | Source} */
      HOSPITALITY = 301,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toxic_Chain_(ability) | Source} */
      TOXIC_CHAIN = 302,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Embody_Aspect_Teal_(ability) | Source} */
      EMBODY_ASPECT_TEAL = 303,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Embody_Aspect_Wellspring_(ability) | Source} */
      EMBODY_ASPECT_WELLSPRING = 304,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Embody_Aspect_Hearthflame_(ability) | Source} */
      EMBODY_ASPECT_HEARTHFLAME = 305,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Embody_Aspect_Cornerstone_(ability) | Source} */
      EMBODY_ASPECT_CORNERSTONE = 306,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tera_Shift_(ability) | Source} */
      TERA_SHIFT = 307,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tera_Shell_(ability) | Source} */
      TERA_SHELL = 308,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Teraform_Zero_(ability) | Source} */
      TERAFORM_ZERO = 309,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poison_Puppeteer_(ability) | Source} */
      POISON_PUPPETEER = 310
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum ArenaTagType {
      NONE = "NONE",
      MUD_SPORT = "MUD_SPORT",
      WATER_SPORT = "WATER_SPORT",
      SPIKES = "SPIKES",
      TOXIC_SPIKES = "TOXIC_SPIKES",
      MIST = "MIST",
      FUTURE_SIGHT = "FUTURE_SIGHT",
      DOOM_DESIRE = "DOOM_DESIRE",
      WISH = "WISH",
      STEALTH_ROCK = "STEALTH_ROCK",
      STICKY_WEB = "STICKY_WEB",
      TRICK_ROOM = "TRICK_ROOM",
      GRAVITY = "GRAVITY",
      REFLECT = "REFLECT",
      LIGHT_SCREEN = "LIGHT_SCREEN",
      AURORA_VEIL = "AURORA_VEIL",
      QUICK_GUARD = "QUICK_GUARD",
      WIDE_GUARD = "WIDE_GUARD",
      MAT_BLOCK = "MAT_BLOCK",
      CRAFTY_SHIELD = "CRAFTY_SHIELD",
      TAILWIND = "TAILWIND",
      HAPPY_HOUR = "HAPPY_HOUR"
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum BattleSpec {
      DEFAULT = 0,
      FINAL_BOSS = 1
  }
  
}

declare namespace PokeRogue.enums {
  /**
   * Determines the selected battle style.
   * - 'Switch' - The option to switch the active pokemon at the start of a battle will be displayed.
   * - 'Set' - The option to switch the active pokemon at the start of a battle will not display.
  */
  export declare enum BattleStyle {
      SWITCH = 0,
      SET = 1
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum BattlerTagType {
      NONE = "NONE",
      RECHARGING = "RECHARGING",
      FLINCHED = "FLINCHED",
      INTERRUPTED = "INTERRUPTED",
      CONFUSED = "CONFUSED",
      INFATUATED = "INFATUATED",
      SEEDED = "SEEDED",
      NIGHTMARE = "NIGHTMARE",
      FRENZY = "FRENZY",
      CHARGING = "CHARGING",
      ENCORE = "ENCORE",
      HELPING_HAND = "HELPING_HAND",
      INGRAIN = "INGRAIN",
      AQUA_RING = "AQUA_RING",
      DROWSY = "DROWSY",
      TRAPPED = "TRAPPED",
      BIND = "BIND",
      WRAP = "WRAP",
      FIRE_SPIN = "FIRE_SPIN",
      WHIRLPOOL = "WHIRLPOOL",
      CLAMP = "CLAMP",
      SAND_TOMB = "SAND_TOMB",
      MAGMA_STORM = "MAGMA_STORM",
      SNAP_TRAP = "SNAP_TRAP",
      THUNDER_CAGE = "THUNDER_CAGE",
      INFESTATION = "INFESTATION",
      PROTECTED = "PROTECTED",
      SPIKY_SHIELD = "SPIKY_SHIELD",
      KINGS_SHIELD = "KINGS_SHIELD",
      OBSTRUCT = "OBSTRUCT",
      SILK_TRAP = "SILK_TRAP",
      BANEFUL_BUNKER = "BANEFUL_BUNKER",
      BURNING_BULWARK = "BURNING_BULWARK",
      ENDURING = "ENDURING",
      STURDY = "STURDY",
      PERISH_SONG = "PERISH_SONG",
      TRUANT = "TRUANT",
      SLOW_START = "SLOW_START",
      PROTOSYNTHESIS = "PROTOSYNTHESIS",
      QUARK_DRIVE = "QUARK_DRIVE",
      FLYING = "FLYING",
      UNDERGROUND = "UNDERGROUND",
      UNDERWATER = "UNDERWATER",
      HIDDEN = "HIDDEN",
      FIRE_BOOST = "FIRE_BOOST",
      CRIT_BOOST = "CRIT_BOOST",
      ALWAYS_CRIT = "ALWAYS_CRIT",
      NO_CRIT = "NO_CRIT",
      IGNORE_ACCURACY = "IGNORE_ACCURACY",
      BYPASS_SLEEP = "BYPASS_SLEEP",
      IGNORE_FLYING = "IGNORE_FLYING",
      SALT_CURED = "SALT_CURED",
      CURSED = "CURSED",
      CHARGED = "CHARGED",
      ROOSTED = "ROOSTED",
      MAGNET_RISEN = "MAGNET_RISEN",
      MINIMIZED = "MINIMIZED",
      DESTINY_BOND = "DESTINY_BOND",
      CENTER_OF_ATTENTION = "CENTER_OF_ATTENTION",
      ICE_FACE = "ICE_FACE"
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum BerryType {
      SITRUS = 0,
      LUM = 1,
      ENIGMA = 2,
      LIECHI = 3,
      GANLON = 4,
      PETAYA = 5,
      APICOT = 6,
      SALAC = 7,
      LANSAT = 8,
      STARF = 9,
      LEPPA = 10
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum Biome {
      TOWN = 0,
      PLAINS = 1,
      GRASS = 2,
      TALL_GRASS = 3,
      METROPOLIS = 4,
      FOREST = 5,
      SEA = 6,
      SWAMP = 7,
      BEACH = 8,
      LAKE = 9,
      SEABED = 10,
      MOUNTAIN = 11,
      BADLANDS = 12,
      CAVE = 13,
      DESERT = 14,
      ICE_CAVE = 15,
      MEADOW = 16,
      POWER_PLANT = 17,
      VOLCANO = 18,
      GRAVEYARD = 19,
      DOJO = 20,
      FACTORY = 21,
      RUINS = 22,
      WASTELAND = 23,
      ABYSS = 24,
      SPACE = 25,
      CONSTRUCTION_SITE = 26,
      JUNGLE = 27,
      FAIRY_CAVE = 28,
      TEMPLE = 29,
      SLUM = 30,
      SNOWY_FOREST = 31,
      ISLAND = 40,
      LABORATORY = 41,
      END = 50
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum Button {
      UP = 0,
      DOWN = 1,
      LEFT = 2,
      RIGHT = 3,
      SUBMIT = 4,
      ACTION = 5,
      CANCEL = 6,
      MENU = 7,
      STATS = 8,
      CYCLE_SHINY = 9,
      CYCLE_FORM = 10,
      CYCLE_GENDER = 11,
      CYCLE_ABILITY = 12,
      CYCLE_NATURE = 13,
      V = 14,
      SPEED_UP = 15,
      SLOW_DOWN = 16
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum Challenges {
      SINGLE_GENERATION = 0,
      SINGLE_TYPE = 1,
      LOWER_MAX_STARTER_COST = 2,
      LOWER_STARTER_POINTS = 3,
      FRESH_START = 4
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum Color {
      WHITE = "#ffffff",
      OFF_WHITE = "#f8f8f8",
      LIGHT_GREY = "#a0a0a0",
      GREY = "#484848",
      DARK_GREY = "#404040",
      PINK = "#f89890",
      RED = "#e13d3d",
      RED2 = "#e70808",
      REDORANGE = "#d64b00",
      ORANGE = "#f8b050",
      LIGHT_YELLOW = "#e8e8a8",
      YELLOW = "#ccbe00",
      DARK_YELLOW = "#a68e17",
      GREEN = "#78c850",
      BLUE = "#40c8f8",
      COMMON = "#ffffff",
      GREAT = "#3890f8",
      ULTRA = "#f8d038",
      ROGUE = "#d52929",
      MASTER = "#e020c0",
      LUXURY = "#e64a18"
  }
  export declare enum TypeColor {
      NORMAL = "#ADA594",
      FIGHTING = "#A55239",
      FLYING = "#9CADF7",
      POISON = "#9141CB",
      GROUND = "#AE7A3B",
      ROCK = "#BDA55A",
      BUG = "#ADBD21",
      GHOST = "#6363B5",
      STEEL = "#81A6BE",
      FIRE = "#F75231",
      WATER = "#399CFF",
      GRASS = "#7BCE52",
      ELECTRIC = "#FFC631",
      PSYCHIC = "#EF4179",
      ICE = "#5ACEE7",
      DRAGON = "#7B63E7",
      DARK = "#735A4A",
      FAIRY = "#EF70EF"
  }
  export declare enum TypeShadow {
      NORMAL = "#574F4A",
      FIGHTING = "#4E637C",
      FLYING = "#4E637C",
      POISON = "#352166",
      GROUND = "#572D1E",
      ROCK = "#5F442D",
      BUG = "#5F5010",
      GHOST = "#323D5B",
      STEEL = "#415C5F",
      FIRE = "#7C1818",
      WATER = "#1C4E80",
      GRASS = "#4F6729",
      ELECTRIC = "#804618",
      PSYCHIC = "#782155",
      ICE = "#2D5C74",
      DRAGON = "#313874",
      DARK = "#392725",
      FAIRY = "#663878"
  }
  export declare enum ShadowColor {
      GREY = "#636363",
      PURPLE = "#6b5a73",
      LIGHT_GREY = "#d0d0c8",
      BROWN = "#69402a",
      PINK = "#fca2a2",
      BRIGHT_RED = "#f83018",
      RED = "#984038",
      MAROON = "#632929",
      GREEN = "#306850",
      BLUE = "#006090",
      LIGHT_YELLOW = "#ded6b5",
      YELLOW = "#ebd773",
      DARK_YELLOW = "#a0a060",
      ORANGE = "#c07800",
      LIGHT_ORANGE = "#ffbd73"
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum Device {
      GAMEPAD = 0,
      KEYBOARD = 1
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum EaseType {
      NONE = 0,
      LINEAR = "Linear",
      QUADRATIC = "Quad",
      CUBIC = "Cubic",
      QUARTIC = "Quart",
      QUINTIC = "Quint",
      SINUSOIDAL = "Sine",
      EXPONENTIAL = "Expo",
      CIRCULAR = "Circ",
      ELASTIC = "Elastic",
      BACK = "Back",
      BOUNCE = "Bounce",
      STEPPED = "Stepped"
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum EggSourceType {
      GACHA_MOVE = 0,
      GACHA_LEGENDARY = 1,
      GACHA_SHINY = 2,
      SAME_SPECIES_EGG = 3,
      EVENT = 4
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum EggTier {
      COMMON = 0,
      GREAT = 1,
      ULTRA = 2,
      MASTER = 3
  }
  
}

declare namespace PokeRogue.enums {
  /**
   * Determines exp notification style.
   * - Default - the normal exp gain display, nothing changed
   * - Only level up - we display the level up in the small frame instead of a message
   * - Skip - no level up frame nor message
  */
  export declare enum ExpNotification {
      DEFAULT = 0,
      ONLY_LEVEL_UP = 1,
      SKIP = 2
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum GachaType {
      MOVE = 0,
      LEGENDARY = 1,
      SHINY = 2
  }
  
}

declare namespace PokeRogue.enums {
  /**
   * enum for the game data types
   */
  export declare enum GameDataType {
      SYSTEM = 0,
      SESSION = 1,
      SETTINGS = 2,
      TUTORIALS = 3,
      SEEN_DIALOGUES = 4
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum MoneyFormat {
      NORMAL = 0,
      ABBREVIATED = 1
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum Moves {
      /**{@link https://bulbapedia.bulbagarden.net/wiki/None_(move) | Source} */
      NONE = 0,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pound_(move) | Source} */
      POUND = 1,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Karate_Chop_(move) | Source} */
      KARATE_CHOP = 2,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Double_Slap_(move) | Source} */
      DOUBLE_SLAP = 3,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Comet_Punch_(move) | Source} */
      COMET_PUNCH = 4,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mega_Punch_(move) | Source} */
      MEGA_PUNCH = 5,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pay_Day_(move) | Source} */
      PAY_DAY = 6,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fire_Punch_(move) | Source} */
      FIRE_PUNCH = 7,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Punch_(move) | Source} */
      ICE_PUNCH = 8,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thunder_Punch_(move) | Source} */
      THUNDER_PUNCH = 9,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scratch_(move) | Source} */
      SCRATCH = 10,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vise_Grip_(move) | Source} */
      VISE_GRIP = 11,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Guillotine_(move) | Source} */
      GUILLOTINE = 12,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Razor_Wind_(move) | Source} */
      RAZOR_WIND = 13,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swords_Dance_(move) | Source} */
      SWORDS_DANCE = 14,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cut_(move) | Source} */
      CUT = 15,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gust_(move) | Source} */
      GUST = 16,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wing_Attack_(move) | Source} */
      WING_ATTACK = 17,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Whirlwind_(move) | Source} */
      WHIRLWIND = 18,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fly_(move) | Source} */
      FLY = 19,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bind_(move) | Source} */
      BIND = 20,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slam_(move) | Source} */
      SLAM = 21,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vine_Whip_(move) | Source} */
      VINE_WHIP = 22,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stomp_(move) | Source} */
      STOMP = 23,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Double_Kick_(move) | Source} */
      DOUBLE_KICK = 24,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mega_Kick_(move) | Source} */
      MEGA_KICK = 25,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jump_Kick_(move) | Source} */
      JUMP_KICK = 26,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rolling_Kick_(move) | Source} */
      ROLLING_KICK = 27,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sand_Attack_(move) | Source} */
      SAND_ATTACK = 28,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Headbutt_(move) | Source} */
      HEADBUTT = 29,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Horn_Attack_(move) | Source} */
      HORN_ATTACK = 30,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fury_Attack_(move) | Source} */
      FURY_ATTACK = 31,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Horn_Drill_(move) | Source} */
      HORN_DRILL = 32,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tackle_(move) | Source} */
      TACKLE = 33,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Body_Slam_(move) | Source} */
      BODY_SLAM = 34,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wrap_(move) | Source} */
      WRAP = 35,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Take_Down_(move) | Source} */
      TAKE_DOWN = 36,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thrash_(move) | Source} */
      THRASH = 37,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Double_Edge_(move) | Source} */
      DOUBLE_EDGE = 38,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tail_Whip_(move) | Source} */
      TAIL_WHIP = 39,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poison_Sting_(move) | Source} */
      POISON_STING = 40,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Twineedle_(move) | Source} */
      TWINEEDLE = 41,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pin_Missile_(move) | Source} */
      PIN_MISSILE = 42,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Leer_(move) | Source} */
      LEER = 43,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bite_(move) | Source} */
      BITE = 44,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Growl_(move) | Source} */
      GROWL = 45,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Roar_(move) | Source} */
      ROAR = 46,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sing_(move) | Source} */
      SING = 47,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Supersonic_(move) | Source} */
      SUPERSONIC = 48,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sonic_Boom_(move) | Source} */
      SONIC_BOOM = 49,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Disable_(move) | Source} */
      DISABLE = 50,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Acid_(move) | Source} */
      ACID = 51,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ember_(move) | Source} */
      EMBER = 52,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flamethrower_(move) | Source} */
      FLAMETHROWER = 53,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mist_(move) | Source} */
      MIST = 54,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Water_Gun_(move) | Source} */
      WATER_GUN = 55,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hydro_Pump_(move) | Source} */
      HYDRO_PUMP = 56,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Surf_(move) | Source} */
      SURF = 57,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Beam_(move) | Source} */
      ICE_BEAM = 58,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blizzard_(move) | Source} */
      BLIZZARD = 59,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psybeam_(move) | Source} */
      PSYBEAM = 60,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bubble_Beam_(move) | Source} */
      BUBBLE_BEAM = 61,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aurora_Beam_(move) | Source} */
      AURORA_BEAM = 62,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hyper_Beam_(move) | Source} */
      HYPER_BEAM = 63,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Peck_(move) | Source} */
      PECK = 64,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drill_Peck_(move) | Source} */
      DRILL_PECK = 65,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Submission_(move) | Source} */
      SUBMISSION = 66,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Low_Kick_(move) | Source} */
      LOW_KICK = 67,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Counter_(move) | Source} */
      COUNTER = 68,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Seismic_Toss_(move) | Source} */
      SEISMIC_TOSS = 69,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Strength_(move) | Source} */
      STRENGTH = 70,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Absorb_(move) | Source} */
      ABSORB = 71,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mega_Drain_(move) | Source} */
      MEGA_DRAIN = 72,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Leech_Seed_(move) | Source} */
      LEECH_SEED = 73,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Growth_(move) | Source} */
      GROWTH = 74,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Razor_Leaf_(move) | Source} */
      RAZOR_LEAF = 75,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Solar_Beam_(move) | Source} */
      SOLAR_BEAM = 76,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poison_Powder_(move) | Source} */
      POISON_POWDER = 77,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stun_Spore_(move) | Source} */
      STUN_SPORE = 78,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sleep_Powder_(move) | Source} */
      SLEEP_POWDER = 79,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Petal_Dance_(move) | Source} */
      PETAL_DANCE = 80,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/String_Shot_(move) | Source} */
      STRING_SHOT = 81,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Rage_(move) | Source} */
      DRAGON_RAGE = 82,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fire_Spin_(move) | Source} */
      FIRE_SPIN = 83,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thunder_Shock_(move) | Source} */
      THUNDER_SHOCK = 84,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thunderbolt_(move) | Source} */
      THUNDERBOLT = 85,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thunder_Wave_(move) | Source} */
      THUNDER_WAVE = 86,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thunder_(move) | Source} */
      THUNDER = 87,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rock_Throw_(move) | Source} */
      ROCK_THROW = 88,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Earthquake_(move) | Source} */
      EARTHQUAKE = 89,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fissure_(move) | Source} */
      FISSURE = 90,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dig_(move) | Source} */
      DIG = 91,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toxic_(move) | Source} */
      TOXIC = 92,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Confusion_(move) | Source} */
      CONFUSION = 93,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psychic_(move) | Source} */
      PSYCHIC = 94,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hypnosis_(move) | Source} */
      HYPNOSIS = 95,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meditate_(move) | Source} */
      MEDITATE = 96,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Agility_(move) | Source} */
      AGILITY = 97,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quick_Attack_(move) | Source} */
      QUICK_ATTACK = 98,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rage_(move) | Source} */
      RAGE = 99,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Teleport_(move) | Source} */
      TELEPORT = 100,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Night_Shade_(move) | Source} */
      NIGHT_SHADE = 101,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mimic_(move) | Source} */
      MIMIC = 102,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Screech_(move) | Source} */
      SCREECH = 103,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Double_Team_(move) | Source} */
      DOUBLE_TEAM = 104,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Recover_(move) | Source} */
      RECOVER = 105,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Harden_(move) | Source} */
      HARDEN = 106,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Minimize_(move) | Source} */
      MINIMIZE = 107,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Smokescreen_(move) | Source} */
      SMOKESCREEN = 108,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Confuse_Ray_(move) | Source} */
      CONFUSE_RAY = 109,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Withdraw_(move) | Source} */
      WITHDRAW = 110,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Defense_Curl_(move) | Source} */
      DEFENSE_CURL = 111,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Barrier_(move) | Source} */
      BARRIER = 112,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Light_Screen_(move) | Source} */
      LIGHT_SCREEN = 113,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Haze_(move) | Source} */
      HAZE = 114,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Reflect_(move) | Source} */
      REFLECT = 115,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Focus_Energy_(move) | Source} */
      FOCUS_ENERGY = 116,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bide_(move) | Source} */
      BIDE = 117,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Metronome_(move) | Source} */
      METRONOME = 118,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mirror_Move_(move) | Source} */
      MIRROR_MOVE = 119,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Self_Destruct_(move) | Source} */
      SELF_DESTRUCT = 120,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Egg_Bomb_(move) | Source} */
      EGG_BOMB = 121,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lick_(move) | Source} */
      LICK = 122,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Smog_(move) | Source} */
      SMOG = 123,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sludge_(move) | Source} */
      SLUDGE = 124,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bone_Club_(move) | Source} */
      BONE_CLUB = 125,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fire_Blast_(move) | Source} */
      FIRE_BLAST = 126,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Waterfall_(move) | Source} */
      WATERFALL = 127,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clamp_(move) | Source} */
      CLAMP = 128,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swift_(move) | Source} */
      SWIFT = 129,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skull_Bash_(move) | Source} */
      SKULL_BASH = 130,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spike_Cannon_(move) | Source} */
      SPIKE_CANNON = 131,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Constrict_(move) | Source} */
      CONSTRICT = 132,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Amnesia_(move) | Source} */
      AMNESIA = 133,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kinesis_(move) | Source} */
      KINESIS = 134,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Soft_Boiled_(move) | Source} */
      SOFT_BOILED = 135,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/High_Jump_Kick_(move) | Source} */
      HIGH_JUMP_KICK = 136,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glare_(move) | Source} */
      GLARE = 137,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dream_Eater_(move) | Source} */
      DREAM_EATER = 138,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poison_Gas_(move) | Source} */
      POISON_GAS = 139,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Barrage_(move) | Source} */
      BARRAGE = 140,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Leech_Life_(move) | Source} */
      LEECH_LIFE = 141,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lovely_Kiss_(move) | Source} */
      LOVELY_KISS = 142,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sky_Attack_(move) | Source} */
      SKY_ATTACK = 143,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Transform_(move) | Source} */
      TRANSFORM = 144,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bubble_(move) | Source} */
      BUBBLE = 145,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dizzy_Punch_(move) | Source} */
      DIZZY_PUNCH = 146,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spore_(move) | Source} */
      SPORE = 147,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flash_(move) | Source} */
      FLASH = 148,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psywave_(move) | Source} */
      PSYWAVE = 149,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Splash_(move) | Source} */
      SPLASH = 150,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Acid_Armor_(move) | Source} */
      ACID_ARMOR = 151,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crabhammer_(move) | Source} */
      CRABHAMMER = 152,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Explosion_(move) | Source} */
      EXPLOSION = 153,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fury_Swipes_(move) | Source} */
      FURY_SWIPES = 154,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bonemerang_(move) | Source} */
      BONEMERANG = 155,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rest_(move) | Source} */
      REST = 156,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rock_Slide_(move) | Source} */
      ROCK_SLIDE = 157,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hyper_Fang_(move) | Source} */
      HYPER_FANG = 158,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sharpen_(move) | Source} */
      SHARPEN = 159,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Conversion_(move) | Source} */
      CONVERSION = 160,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tri_Attack_(move) | Source} */
      TRI_ATTACK = 161,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Super_Fang_(move) | Source} */
      SUPER_FANG = 162,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slash_(move) | Source} */
      SLASH = 163,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Substitute_(move) | Source} */
      SUBSTITUTE = 164,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Struggle_(move) | Source} */
      STRUGGLE = 165,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sketch_(move) | Source} */
      SKETCH = 166,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Triple_Kick_(move) | Source} */
      TRIPLE_KICK = 167,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thief_(move) | Source} */
      THIEF = 168,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spider_Web_(move) | Source} */
      SPIDER_WEB = 169,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mind_Reader_(move) | Source} */
      MIND_READER = 170,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nightmare_(move) | Source} */
      NIGHTMARE = 171,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flame_Wheel_(move) | Source} */
      FLAME_WHEEL = 172,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snore_(move) | Source} */
      SNORE = 173,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Curse_(move) | Source} */
      CURSE = 174,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flail_(move) | Source} */
      FLAIL = 175,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Conversion_2_(move) | Source} */
      CONVERSION_2 = 176,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aeroblast_(move) | Source} */
      AEROBLAST = 177,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cotton_Spore_(move) | Source} */
      COTTON_SPORE = 178,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Reversal_(move) | Source} */
      REVERSAL = 179,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spite_(move) | Source} */
      SPITE = 180,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Powder_Snow_(move) | Source} */
      POWDER_SNOW = 181,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Protect_(move) | Source} */
      PROTECT = 182,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mach_Punch_(move) | Source} */
      MACH_PUNCH = 183,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scary_Face_(move) | Source} */
      SCARY_FACE = 184,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Feint_Attack_(move) | Source} */
      FEINT_ATTACK = 185,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sweet_Kiss_(move) | Source} */
      SWEET_KISS = 186,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Belly_Drum_(move) | Source} */
      BELLY_DRUM = 187,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sludge_Bomb_(move) | Source} */
      SLUDGE_BOMB = 188,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mud_Slap_(move) | Source} */
      MUD_SLAP = 189,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Octazooka_(move) | Source} */
      OCTAZOOKA = 190,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spikes_(move) | Source} */
      SPIKES = 191,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zap_Cannon_(move) | Source} */
      ZAP_CANNON = 192,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Foresight_(move) | Source} */
      FORESIGHT = 193,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Destiny_Bond_(move) | Source} */
      DESTINY_BOND = 194,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Perish_Song_(move) | Source} */
      PERISH_SONG = 195,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Icy_Wind_(move) | Source} */
      ICY_WIND = 196,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Detect_(move) | Source} */
      DETECT = 197,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bone_Rush_(move) | Source} */
      BONE_RUSH = 198,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lock_On_(move) | Source} */
      LOCK_ON = 199,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Outrage_(move) | Source} */
      OUTRAGE = 200,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sandstorm_(move) | Source} */
      SANDSTORM = 201,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Giga_Drain_(move) | Source} */
      GIGA_DRAIN = 202,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Endure_(move) | Source} */
      ENDURE = 203,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Charm_(move) | Source} */
      CHARM = 204,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rollout_(move) | Source} */
      ROLLOUT = 205,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/False_Swipe_(move) | Source} */
      FALSE_SWIPE = 206,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swagger_(move) | Source} */
      SWAGGER = 207,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Milk_Drink_(move) | Source} */
      MILK_DRINK = 208,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spark_(move) | Source} */
      SPARK = 209,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fury_Cutter_(move) | Source} */
      FURY_CUTTER = 210,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steel_Wing_(move) | Source} */
      STEEL_WING = 211,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mean_Look_(move) | Source} */
      MEAN_LOOK = 212,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Attract_(move) | Source} */
      ATTRACT = 213,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sleep_Talk_(move) | Source} */
      SLEEP_TALK = 214,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heal_Bell_(move) | Source} */
      HEAL_BELL = 215,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Return_(move) | Source} */
      RETURN = 216,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Present_(move) | Source} */
      PRESENT = 217,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Frustration_(move) | Source} */
      FRUSTRATION = 218,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Safeguard_(move) | Source} */
      SAFEGUARD = 219,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pain_Split_(move) | Source} */
      PAIN_SPLIT = 220,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sacred_Fire_(move) | Source} */
      SACRED_FIRE = 221,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magnitude_(move) | Source} */
      MAGNITUDE = 222,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dynamic_Punch_(move) | Source} */
      DYNAMIC_PUNCH = 223,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Megahorn_(move) | Source} */
      MEGAHORN = 224,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Breath_(move) | Source} */
      DRAGON_BREATH = 225,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Baton_Pass_(move) | Source} */
      BATON_PASS = 226,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Encore_(move) | Source} */
      ENCORE = 227,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pursuit_(move) | Source} */
      PURSUIT = 228,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rapid_Spin_(move) | Source} */
      RAPID_SPIN = 229,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sweet_Scent_(move) | Source} */
      SWEET_SCENT = 230,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Tail_(move) | Source} */
      IRON_TAIL = 231,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Metal_Claw_(move) | Source} */
      METAL_CLAW = 232,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vital_Throw_(move) | Source} */
      VITAL_THROW = 233,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Morning_Sun_(move) | Source} */
      MORNING_SUN = 234,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Synthesis_(move) | Source} */
      SYNTHESIS = 235,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Moonlight_(move) | Source} */
      MOONLIGHT = 236,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hidden_Power_(move) | Source} */
      HIDDEN_POWER = 237,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cross_Chop_(move) | Source} */
      CROSS_CHOP = 238,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Twister_(move) | Source} */
      TWISTER = 239,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rain_Dance_(move) | Source} */
      RAIN_DANCE = 240,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sunny_Day_(move) | Source} */
      SUNNY_DAY = 241,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crunch_(move) | Source} */
      CRUNCH = 242,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mirror_Coat_(move) | Source} */
      MIRROR_COAT = 243,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psych_Up_(move) | Source} */
      PSYCH_UP = 244,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Extreme_Speed_(move) | Source} */
      EXTREME_SPEED = 245,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ancient_Power_(move) | Source} */
      ANCIENT_POWER = 246,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shadow_Ball_(move) | Source} */
      SHADOW_BALL = 247,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Future_Sight_(move) | Source} */
      FUTURE_SIGHT = 248,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rock_Smash_(move) | Source} */
      ROCK_SMASH = 249,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Whirlpool_(move) | Source} */
      WHIRLPOOL = 250,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Beat_Up_(move) | Source} */
      BEAT_UP = 251,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fake_Out_(move) | Source} */
      FAKE_OUT = 252,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Uproar_(move) | Source} */
      UPROAR = 253,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stockpile_(move) | Source} */
      STOCKPILE = 254,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spit_Up_(move) | Source} */
      SPIT_UP = 255,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swallow_(move) | Source} */
      SWALLOW = 256,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heat_Wave_(move) | Source} */
      HEAT_WAVE = 257,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hail_(move) | Source} */
      HAIL = 258,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Torment_(move) | Source} */
      TORMENT = 259,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flatter_(move) | Source} */
      FLATTER = 260,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Will_O_Wisp_(move) | Source} */
      WILL_O_WISP = 261,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Memento_(move) | Source} */
      MEMENTO = 262,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Facade_(move) | Source} */
      FACADE = 263,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Focus_Punch_(move) | Source} */
      FOCUS_PUNCH = 264,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Smelling_Salts_(move) | Source} */
      SMELLING_SALTS = 265,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Follow_Me_(move) | Source} */
      FOLLOW_ME = 266,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nature_Power_(move) | Source} */
      NATURE_POWER = 267,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Charge_(move) | Source} */
      CHARGE = 268,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Taunt_(move) | Source} */
      TAUNT = 269,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Helping_Hand_(move) | Source} */
      HELPING_HAND = 270,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trick_(move) | Source} */
      TRICK = 271,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Role_Play_(move) | Source} */
      ROLE_PLAY = 272,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wish_(move) | Source} */
      WISH = 273,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Assist_(move) | Source} */
      ASSIST = 274,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ingrain_(move) | Source} */
      INGRAIN = 275,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Superpower_(move) | Source} */
      SUPERPOWER = 276,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magic_Coat_(move) | Source} */
      MAGIC_COAT = 277,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Recycle_(move) | Source} */
      RECYCLE = 278,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Revenge_(move) | Source} */
      REVENGE = 279,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Brick_Break_(move) | Source} */
      BRICK_BREAK = 280,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Yawn_(move) | Source} */
      YAWN = 281,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Knock_Off_(move) | Source} */
      KNOCK_OFF = 282,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Endeavor_(move) | Source} */
      ENDEAVOR = 283,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Eruption_(move) | Source} */
      ERUPTION = 284,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skill_Swap_(move) | Source} */
      SKILL_SWAP = 285,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Imprison_(move) | Source} */
      IMPRISON = 286,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Refresh_(move) | Source} */
      REFRESH = 287,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grudge_(move) | Source} */
      GRUDGE = 288,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snatch_(move) | Source} */
      SNATCH = 289,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Secret_Power_(move) | Source} */
      SECRET_POWER = 290,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dive_(move) | Source} */
      DIVE = 291,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arm_Thrust_(move) | Source} */
      ARM_THRUST = 292,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Camouflage_(move) | Source} */
      CAMOUFLAGE = 293,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tail_Glow_(move) | Source} */
      TAIL_GLOW = 294,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Luster_Purge_(move) | Source} */
      LUSTER_PURGE = 295,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mist_Ball_(move) | Source} */
      MIST_BALL = 296,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Feather_Dance_(move) | Source} */
      FEATHER_DANCE = 297,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Teeter_Dance_(move) | Source} */
      TEETER_DANCE = 298,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blaze_Kick_(move) | Source} */
      BLAZE_KICK = 299,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mud_Sport_(move) | Source} */
      MUD_SPORT = 300,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Ball_(move) | Source} */
      ICE_BALL = 301,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Needle_Arm_(move) | Source} */
      NEEDLE_ARM = 302,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slack_Off_(move) | Source} */
      SLACK_OFF = 303,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hyper_Voice_(move) | Source} */
      HYPER_VOICE = 304,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poison_Fang_(move) | Source} */
      POISON_FANG = 305,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crush_Claw_(move) | Source} */
      CRUSH_CLAW = 306,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blast_Burn_(move) | Source} */
      BLAST_BURN = 307,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hydro_Cannon_(move) | Source} */
      HYDRO_CANNON = 308,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meteor_Mash_(move) | Source} */
      METEOR_MASH = 309,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Astonish_(move) | Source} */
      ASTONISH = 310,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Weather_Ball_(move) | Source} */
      WEATHER_BALL = 311,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aromatherapy_(move) | Source} */
      AROMATHERAPY = 312,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fake_Tears_(move) | Source} */
      FAKE_TEARS = 313,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Air_Cutter_(move) | Source} */
      AIR_CUTTER = 314,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Overheat_(move) | Source} */
      OVERHEAT = 315,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Odor_Sleuth_(move) | Source} */
      ODOR_SLEUTH = 316,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rock_Tomb_(move) | Source} */
      ROCK_TOMB = 317,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Silver_Wind_(move) | Source} */
      SILVER_WIND = 318,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Metal_Sound_(move) | Source} */
      METAL_SOUND = 319,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grass_Whistle_(move) | Source} */
      GRASS_WHISTLE = 320,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tickle_(move) | Source} */
      TICKLE = 321,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cosmic_Power_(move) | Source} */
      COSMIC_POWER = 322,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Water_Spout_(move) | Source} */
      WATER_SPOUT = 323,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Signal_Beam_(move) | Source} */
      SIGNAL_BEAM = 324,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shadow_Punch_(move) | Source} */
      SHADOW_PUNCH = 325,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Extrasensory_(move) | Source} */
      EXTRASENSORY = 326,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sky_Uppercut_(move) | Source} */
      SKY_UPPERCUT = 327,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sand_Tomb_(move) | Source} */
      SAND_TOMB = 328,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sheer_Cold_(move) | Source} */
      SHEER_COLD = 329,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Muddy_Water_(move) | Source} */
      MUDDY_WATER = 330,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bullet_Seed_(move) | Source} */
      BULLET_SEED = 331,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aerial_Ace_(move) | Source} */
      AERIAL_ACE = 332,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Icicle_Spear_(move) | Source} */
      ICICLE_SPEAR = 333,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Defense_(move) | Source} */
      IRON_DEFENSE = 334,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Block_(move) | Source} */
      BLOCK = 335,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Howl_(move) | Source} */
      HOWL = 336,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Claw_(move) | Source} */
      DRAGON_CLAW = 337,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Frenzy_Plant_(move) | Source} */
      FRENZY_PLANT = 338,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bulk_Up_(move) | Source} */
      BULK_UP = 339,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bounce_(move) | Source} */
      BOUNCE = 340,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mud_Shot_(move) | Source} */
      MUD_SHOT = 341,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poison_Tail_(move) | Source} */
      POISON_TAIL = 342,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Covet_(move) | Source} */
      COVET = 343,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Volt_Tackle_(move) | Source} */
      VOLT_TACKLE = 344,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magical_Leaf_(move) | Source} */
      MAGICAL_LEAF = 345,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Water_Sport_(move) | Source} */
      WATER_SPORT = 346,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Calm_Mind_(move) | Source} */
      CALM_MIND = 347,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Leaf_Blade_(move) | Source} */
      LEAF_BLADE = 348,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Dance_(move) | Source} */
      DRAGON_DANCE = 349,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rock_Blast_(move) | Source} */
      ROCK_BLAST = 350,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shock_Wave_(move) | Source} */
      SHOCK_WAVE = 351,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Water_Pulse_(move) | Source} */
      WATER_PULSE = 352,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Doom_Desire_(move) | Source} */
      DOOM_DESIRE = 353,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psycho_Boost_(move) | Source} */
      PSYCHO_BOOST = 354,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Roost_(move) | Source} */
      ROOST = 355,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gravity_(move) | Source} */
      GRAVITY = 356,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Miracle_Eye_(move) | Source} */
      MIRACLE_EYE = 357,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wake_Up_Slap_(move) | Source} */
      WAKE_UP_SLAP = 358,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hammer_Arm_(move) | Source} */
      HAMMER_ARM = 359,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gyro_Ball_(move) | Source} */
      GYRO_BALL = 360,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Healing_Wish_(move) | Source} */
      HEALING_WISH = 361,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Brine_(move) | Source} */
      BRINE = 362,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Natural_Gift_(move) | Source} */
      NATURAL_GIFT = 363,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Feint_(move) | Source} */
      FEINT = 364,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pluck_(move) | Source} */
      PLUCK = 365,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tailwind_(move) | Source} */
      TAILWIND = 366,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Acupressure_(move) | Source} */
      ACUPRESSURE = 367,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Metal_Burst_(move) | Source} */
      METAL_BURST = 368,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/U_Turn_(move) | Source} */
      U_TURN = 369,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Close_Combat_(move) | Source} */
      CLOSE_COMBAT = 370,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Payback_(move) | Source} */
      PAYBACK = 371,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Assurance_(move) | Source} */
      ASSURANCE = 372,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Embargo_(move) | Source} */
      EMBARGO = 373,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fling_(move) | Source} */
      FLING = 374,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psycho_Shift_(move) | Source} */
      PSYCHO_SHIFT = 375,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trump_Card_(move) | Source} */
      TRUMP_CARD = 376,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heal_Block_(move) | Source} */
      HEAL_BLOCK = 377,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wring_Out_(move) | Source} */
      WRING_OUT = 378,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Trick_(move) | Source} */
      POWER_TRICK = 379,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gastro_Acid_(move) | Source} */
      GASTRO_ACID = 380,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lucky_Chant_(move) | Source} */
      LUCKY_CHANT = 381,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Me_First_(move) | Source} */
      ME_FIRST = 382,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Copycat_(move) | Source} */
      COPYCAT = 383,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Swap_(move) | Source} */
      POWER_SWAP = 384,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Guard_Swap_(move) | Source} */
      GUARD_SWAP = 385,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Punishment_(move) | Source} */
      PUNISHMENT = 386,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Last_Resort_(move) | Source} */
      LAST_RESORT = 387,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Worry_Seed_(move) | Source} */
      WORRY_SEED = 388,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sucker_Punch_(move) | Source} */
      SUCKER_PUNCH = 389,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toxic_Spikes_(move) | Source} */
      TOXIC_SPIKES = 390,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heart_Swap_(move) | Source} */
      HEART_SWAP = 391,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aqua_Ring_(move) | Source} */
      AQUA_RING = 392,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magnet_Rise_(move) | Source} */
      MAGNET_RISE = 393,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flare_Blitz_(move) | Source} */
      FLARE_BLITZ = 394,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Force_Palm_(move) | Source} */
      FORCE_PALM = 395,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aura_Sphere_(move) | Source} */
      AURA_SPHERE = 396,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rock_Polish_(move) | Source} */
      ROCK_POLISH = 397,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poison_Jab_(move) | Source} */
      POISON_JAB = 398,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dark_Pulse_(move) | Source} */
      DARK_PULSE = 399,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Night_Slash_(move) | Source} */
      NIGHT_SLASH = 400,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aqua_Tail_(move) | Source} */
      AQUA_TAIL = 401,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Seed_Bomb_(move) | Source} */
      SEED_BOMB = 402,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Air_Slash_(move) | Source} */
      AIR_SLASH = 403,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/X_Scissor_(move) | Source} */
      X_SCISSOR = 404,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bug_Buzz_(move) | Source} */
      BUG_BUZZ = 405,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Pulse_(move) | Source} */
      DRAGON_PULSE = 406,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Rush_(move) | Source} */
      DRAGON_RUSH = 407,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Gem_(move) | Source} */
      POWER_GEM = 408,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drain_Punch_(move) | Source} */
      DRAIN_PUNCH = 409,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vacuum_Wave_(move) | Source} */
      VACUUM_WAVE = 410,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Focus_Blast_(move) | Source} */
      FOCUS_BLAST = 411,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Energy_Ball_(move) | Source} */
      ENERGY_BALL = 412,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Brave_Bird_(move) | Source} */
      BRAVE_BIRD = 413,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Earth_Power_(move) | Source} */
      EARTH_POWER = 414,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Switcheroo_(move) | Source} */
      SWITCHEROO = 415,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Giga_Impact_(move) | Source} */
      GIGA_IMPACT = 416,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nasty_Plot_(move) | Source} */
      NASTY_PLOT = 417,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bullet_Punch_(move) | Source} */
      BULLET_PUNCH = 418,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Avalanche_(move) | Source} */
      AVALANCHE = 419,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Shard_(move) | Source} */
      ICE_SHARD = 420,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shadow_Claw_(move) | Source} */
      SHADOW_CLAW = 421,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thunder_Fang_(move) | Source} */
      THUNDER_FANG = 422,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Fang_(move) | Source} */
      ICE_FANG = 423,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fire_Fang_(move) | Source} */
      FIRE_FANG = 424,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shadow_Sneak_(move) | Source} */
      SHADOW_SNEAK = 425,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mud_Bomb_(move) | Source} */
      MUD_BOMB = 426,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psycho_Cut_(move) | Source} */
      PSYCHO_CUT = 427,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zen_Headbutt_(move) | Source} */
      ZEN_HEADBUTT = 428,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mirror_Shot_(move) | Source} */
      MIRROR_SHOT = 429,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flash_Cannon_(move) | Source} */
      FLASH_CANNON = 430,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rock_Climb_(move) | Source} */
      ROCK_CLIMB = 431,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Defog_(move) | Source} */
      DEFOG = 432,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trick_Room_(move) | Source} */
      TRICK_ROOM = 433,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Draco_Meteor_(move) | Source} */
      DRACO_METEOR = 434,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Discharge_(move) | Source} */
      DISCHARGE = 435,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lava_Plume_(move) | Source} */
      LAVA_PLUME = 436,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Leaf_Storm_(move) | Source} */
      LEAF_STORM = 437,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Whip_(move) | Source} */
      POWER_WHIP = 438,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rock_Wrecker_(move) | Source} */
      ROCK_WRECKER = 439,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cross_Poison_(move) | Source} */
      CROSS_POISON = 440,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gunk_Shot_(move) | Source} */
      GUNK_SHOT = 441,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Head_(move) | Source} */
      IRON_HEAD = 442,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magnet_Bomb_(move) | Source} */
      MAGNET_BOMB = 443,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stone_Edge_(move) | Source} */
      STONE_EDGE = 444,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Captivate_(move) | Source} */
      CAPTIVATE = 445,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stealth_Rock_(move) | Source} */
      STEALTH_ROCK = 446,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grass_Knot_(move) | Source} */
      GRASS_KNOT = 447,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chatter_(move) | Source} */
      CHATTER = 448,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Judgment_(move) | Source} */
      JUDGMENT = 449,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bug_Bite_(move) | Source} */
      BUG_BITE = 450,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Charge_Beam_(move) | Source} */
      CHARGE_BEAM = 451,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wood_Hammer_(move) | Source} */
      WOOD_HAMMER = 452,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aqua_Jet_(move) | Source} */
      AQUA_JET = 453,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Attack_Order_(move) | Source} */
      ATTACK_ORDER = 454,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Defend_Order_(move) | Source} */
      DEFEND_ORDER = 455,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heal_Order_(move) | Source} */
      HEAL_ORDER = 456,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Head_Smash_(move) | Source} */
      HEAD_SMASH = 457,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Double_Hit_(move) | Source} */
      DOUBLE_HIT = 458,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Roar_Of_Time_(move) | Source} */
      ROAR_OF_TIME = 459,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spacial_Rend_(move) | Source} */
      SPACIAL_REND = 460,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lunar_Dance_(move) | Source} */
      LUNAR_DANCE = 461,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crush_Grip_(move) | Source} */
      CRUSH_GRIP = 462,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magma_Storm_(move) | Source} */
      MAGMA_STORM = 463,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dark_Void_(move) | Source} */
      DARK_VOID = 464,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Seed_Flare_(move) | Source} */
      SEED_FLARE = 465,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ominous_Wind_(move) | Source} */
      OMINOUS_WIND = 466,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shadow_Force_(move) | Source} */
      SHADOW_FORCE = 467,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hone_Claws_(move) | Source} */
      HONE_CLAWS = 468,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wide_Guard_(move) | Source} */
      WIDE_GUARD = 469,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Guard_Split_(move) | Source} */
      GUARD_SPLIT = 470,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Split_(move) | Source} */
      POWER_SPLIT = 471,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wonder_Room_(move) | Source} */
      WONDER_ROOM = 472,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psyshock_(move) | Source} */
      PSYSHOCK = 473,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Venoshock_(move) | Source} */
      VENOSHOCK = 474,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Autotomize_(move) | Source} */
      AUTOTOMIZE = 475,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rage_Powder_(move) | Source} */
      RAGE_POWDER = 476,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Telekinesis_(move) | Source} */
      TELEKINESIS = 477,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magic_Room_(move) | Source} */
      MAGIC_ROOM = 478,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Smack_Down_(move) | Source} */
      SMACK_DOWN = 479,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Storm_Throw_(move) | Source} */
      STORM_THROW = 480,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flame_Burst_(move) | Source} */
      FLAME_BURST = 481,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sludge_Wave_(move) | Source} */
      SLUDGE_WAVE = 482,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quiver_Dance_(move) | Source} */
      QUIVER_DANCE = 483,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heavy_Slam_(move) | Source} */
      HEAVY_SLAM = 484,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Synchronoise_(move) | Source} */
      SYNCHRONOISE = 485,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electro_Ball_(move) | Source} */
      ELECTRO_BALL = 486,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Soak_(move) | Source} */
      SOAK = 487,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flame_Charge_(move) | Source} */
      FLAME_CHARGE = 488,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Coil_(move) | Source} */
      COIL = 489,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Low_Sweep_(move) | Source} */
      LOW_SWEEP = 490,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Acid_Spray_(move) | Source} */
      ACID_SPRAY = 491,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Foul_Play_(move) | Source} */
      FOUL_PLAY = 492,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Simple_Beam_(move) | Source} */
      SIMPLE_BEAM = 493,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Entrainment_(move) | Source} */
      ENTRAINMENT = 494,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/After_You_(move) | Source} */
      AFTER_YOU = 495,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Round_(move) | Source} */
      ROUND = 496,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Echoed_Voice_(move) | Source} */
      ECHOED_VOICE = 497,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chip_Away_(move) | Source} */
      CHIP_AWAY = 498,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clear_Smog_(move) | Source} */
      CLEAR_SMOG = 499,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stored_Power_(move) | Source} */
      STORED_POWER = 500,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quick_Guard_(move) | Source} */
      QUICK_GUARD = 501,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ally_Switch_(move) | Source} */
      ALLY_SWITCH = 502,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scald_(move) | Source} */
      SCALD = 503,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shell_Smash_(move) | Source} */
      SHELL_SMASH = 504,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heal_Pulse_(move) | Source} */
      HEAL_PULSE = 505,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hex_(move) | Source} */
      HEX = 506,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sky_Drop_(move) | Source} */
      SKY_DROP = 507,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shift_Gear_(move) | Source} */
      SHIFT_GEAR = 508,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Circle_Throw_(move) | Source} */
      CIRCLE_THROW = 509,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Incinerate_(move) | Source} */
      INCINERATE = 510,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quash_(move) | Source} */
      QUASH = 511,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Acrobatics_(move) | Source} */
      ACROBATICS = 512,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Reflect_Type_(move) | Source} */
      REFLECT_TYPE = 513,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Retaliate_(move) | Source} */
      RETALIATE = 514,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Final_Gambit_(move) | Source} */
      FINAL_GAMBIT = 515,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bestow_(move) | Source} */
      BESTOW = 516,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Inferno_(move) | Source} */
      INFERNO = 517,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Water_Pledge_(move) | Source} */
      WATER_PLEDGE = 518,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fire_Pledge_(move) | Source} */
      FIRE_PLEDGE = 519,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grass_Pledge_(move) | Source} */
      GRASS_PLEDGE = 520,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Volt_Switch_(move) | Source} */
      VOLT_SWITCH = 521,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Struggle_Bug_(move) | Source} */
      STRUGGLE_BUG = 522,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bulldoze_(move) | Source} */
      BULLDOZE = 523,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Frost_Breath_(move) | Source} */
      FROST_BREATH = 524,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Tail_(move) | Source} */
      DRAGON_TAIL = 525,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Work_Up_(move) | Source} */
      WORK_UP = 526,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electroweb_(move) | Source} */
      ELECTROWEB = 527,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wild_Charge_(move) | Source} */
      WILD_CHARGE = 528,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drill_Run_(move) | Source} */
      DRILL_RUN = 529,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dual_Chop_(move) | Source} */
      DUAL_CHOP = 530,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heart_Stamp_(move) | Source} */
      HEART_STAMP = 531,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Horn_Leech_(move) | Source} */
      HORN_LEECH = 532,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sacred_Sword_(move) | Source} */
      SACRED_SWORD = 533,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Razor_Shell_(move) | Source} */
      RAZOR_SHELL = 534,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heat_Crash_(move) | Source} */
      HEAT_CRASH = 535,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Leaf_Tornado_(move) | Source} */
      LEAF_TORNADO = 536,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steamroller_(move) | Source} */
      STEAMROLLER = 537,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cotton_Guard_(move) | Source} */
      COTTON_GUARD = 538,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Night_Daze_(move) | Source} */
      NIGHT_DAZE = 539,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psystrike_(move) | Source} */
      PSYSTRIKE = 540,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tail_Slap_(move) | Source} */
      TAIL_SLAP = 541,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hurricane_(move) | Source} */
      HURRICANE = 542,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Head_Charge_(move) | Source} */
      HEAD_CHARGE = 543,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gear_Grind_(move) | Source} */
      GEAR_GRIND = 544,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Searing_Shot_(move) | Source} */
      SEARING_SHOT = 545,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Techno_Blast_(move) | Source} */
      TECHNO_BLAST = 546,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Relic_Song_(move) | Source} */
      RELIC_SONG = 547,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Secret_Sword_(move) | Source} */
      SECRET_SWORD = 548,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glaciate_(move) | Source} */
      GLACIATE = 549,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bolt_Strike_(move) | Source} */
      BOLT_STRIKE = 550,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blue_Flare_(move) | Source} */
      BLUE_FLARE = 551,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fiery_Dance_(move) | Source} */
      FIERY_DANCE = 552,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Freeze_Shock_(move) | Source} */
      FREEZE_SHOCK = 553,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Burn_(move) | Source} */
      ICE_BURN = 554,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snarl_(move) | Source} */
      SNARL = 555,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Icicle_Crash_(move) | Source} */
      ICICLE_CRASH = 556,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/V_Create_(move) | Source} */
      V_CREATE = 557,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fusion_Flare_(move) | Source} */
      FUSION_FLARE = 558,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fusion_Bolt_(move) | Source} */
      FUSION_BOLT = 559,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flying_Press_(move) | Source} */
      FLYING_PRESS = 560,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mat_Block_(move) | Source} */
      MAT_BLOCK = 561,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Belch_(move) | Source} */
      BELCH = 562,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rototiller_(move) | Source} */
      ROTOTILLER = 563,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sticky_Web_(move) | Source} */
      STICKY_WEB = 564,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fell_Stinger_(move) | Source} */
      FELL_STINGER = 565,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Phantom_Force_(move) | Source} */
      PHANTOM_FORCE = 566,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trick_Or_Treat_(move) | Source} */
      TRICK_OR_TREAT = 567,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Noble_Roar_(move) | Source} */
      NOBLE_ROAR = 568,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ion_Deluge_(move) | Source} */
      ION_DELUGE = 569,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Parabolic_Charge_(move) | Source} */
      PARABOLIC_CHARGE = 570,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Forests_Curse_(move) | Source} */
      FORESTS_CURSE = 571,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Petal_Blizzard_(move) | Source} */
      PETAL_BLIZZARD = 572,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Freeze_Dry_(move) | Source} */
      FREEZE_DRY = 573,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Disarming_Voice_(move) | Source} */
      DISARMING_VOICE = 574,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Parting_Shot_(move) | Source} */
      PARTING_SHOT = 575,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Topsy_Turvy_(move) | Source} */
      TOPSY_TURVY = 576,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Draining_Kiss_(move) | Source} */
      DRAINING_KISS = 577,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crafty_Shield_(move) | Source} */
      CRAFTY_SHIELD = 578,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flower_Shield_(move) | Source} */
      FLOWER_SHIELD = 579,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grassy_Terrain_(move) | Source} */
      GRASSY_TERRAIN = 580,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Misty_Terrain_(move) | Source} */
      MISTY_TERRAIN = 581,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electrify_(move) | Source} */
      ELECTRIFY = 582,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Play_Rough_(move) | Source} */
      PLAY_ROUGH = 583,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fairy_Wind_(move) | Source} */
      FAIRY_WIND = 584,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Moonblast_(move) | Source} */
      MOONBLAST = 585,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Boomburst_(move) | Source} */
      BOOMBURST = 586,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fairy_Lock_(move) | Source} */
      FAIRY_LOCK = 587,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kings_Shield_(move) | Source} */
      KINGS_SHIELD = 588,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Play_Nice_(move) | Source} */
      PLAY_NICE = 589,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Confide_(move) | Source} */
      CONFIDE = 590,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Diamond_Storm_(move) | Source} */
      DIAMOND_STORM = 591,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steam_Eruption_(move) | Source} */
      STEAM_ERUPTION = 592,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hyperspace_Hole_(move) | Source} */
      HYPERSPACE_HOLE = 593,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Water_Shuriken_(move) | Source} */
      WATER_SHURIKEN = 594,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mystical_Fire_(move) | Source} */
      MYSTICAL_FIRE = 595,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spiky_Shield_(move) | Source} */
      SPIKY_SHIELD = 596,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aromatic_Mist_(move) | Source} */
      AROMATIC_MIST = 597,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Eerie_Impulse_(move) | Source} */
      EERIE_IMPULSE = 598,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Venom_Drench_(move) | Source} */
      VENOM_DRENCH = 599,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Powder_(move) | Source} */
      POWDER = 600,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Geomancy_(move) | Source} */
      GEOMANCY = 601,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magnetic_Flux_(move) | Source} */
      MAGNETIC_FLUX = 602,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Happy_Hour_(move) | Source} */
      HAPPY_HOUR = 603,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electric_Terrain_(move) | Source} */
      ELECTRIC_TERRAIN = 604,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dazzling_Gleam_(move) | Source} */
      DAZZLING_GLEAM = 605,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Celebrate_(move) | Source} */
      CELEBRATE = 606,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hold_Hands_(move) | Source} */
      HOLD_HANDS = 607,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Baby_Doll_Eyes_(move) | Source} */
      BABY_DOLL_EYES = 608,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nuzzle_(move) | Source} */
      NUZZLE = 609,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hold_Back_(move) | Source} */
      HOLD_BACK = 610,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Infestation_(move) | Source} */
      INFESTATION = 611,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Up_Punch_(move) | Source} */
      POWER_UP_PUNCH = 612,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Oblivion_Wing_(move) | Source} */
      OBLIVION_WING = 613,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thousand_Arrows_(move) | Source} */
      THOUSAND_ARROWS = 614,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thousand_Waves_(move) | Source} */
      THOUSAND_WAVES = 615,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lands_Wrath_(move) | Source} */
      LANDS_WRATH = 616,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Light_Of_Ruin_(move) | Source} */
      LIGHT_OF_RUIN = 617,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Origin_Pulse_(move) | Source} */
      ORIGIN_PULSE = 618,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Precipice_Blades_(move) | Source} */
      PRECIPICE_BLADES = 619,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Ascent_(move) | Source} */
      DRAGON_ASCENT = 620,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hyperspace_Fury_(move) | Source} */
      HYPERSPACE_FURY = 621,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Breakneck_Blitz__Physical_(move) | Source} */
      BREAKNECK_BLITZ__PHYSICAL = 622,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Breakneck_Blitz__Special_(move) | Source} */
      BREAKNECK_BLITZ__SPECIAL = 623,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/All_Out_Pummeling__Physical_(move) | Source} */
      ALL_OUT_PUMMELING__PHYSICAL = 624,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/All_Out_Pummeling__Special_(move) | Source} */
      ALL_OUT_PUMMELING__SPECIAL = 625,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Supersonic_Skystrike__Physical_(move) | Source} */
      SUPERSONIC_SKYSTRIKE__PHYSICAL = 626,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Supersonic_Skystrike__Special_(move) | Source} */
      SUPERSONIC_SKYSTRIKE__SPECIAL = 627,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Acid_Downpour__Physical_(move) | Source} */
      ACID_DOWNPOUR__PHYSICAL = 628,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Acid_Downpour__Special_(move) | Source} */
      ACID_DOWNPOUR__SPECIAL = 629,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tectonic_Rage__Physical_(move) | Source} */
      TECTONIC_RAGE__PHYSICAL = 630,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tectonic_Rage__Special_(move) | Source} */
      TECTONIC_RAGE__SPECIAL = 631,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Continental_Crush__Physical_(move) | Source} */
      CONTINENTAL_CRUSH__PHYSICAL = 632,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Continental_Crush__Special_(move) | Source} */
      CONTINENTAL_CRUSH__SPECIAL = 633,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Savage_Spin_Out__Physical_(move) | Source} */
      SAVAGE_SPIN_OUT__PHYSICAL = 634,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Savage_Spin_Out__Special_(move) | Source} */
      SAVAGE_SPIN_OUT__SPECIAL = 635,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Never_Ending_Nightmare__Physical_(move) | Source} */
      NEVER_ENDING_NIGHTMARE__PHYSICAL = 636,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Never_Ending_Nightmare__Special_(move) | Source} */
      NEVER_ENDING_NIGHTMARE__SPECIAL = 637,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Corkscrew_Crash__Physical_(move) | Source} */
      CORKSCREW_CRASH__PHYSICAL = 638,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Corkscrew_Crash__Special_(move) | Source} */
      CORKSCREW_CRASH__SPECIAL = 639,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Inferno_Overdrive__Physical_(move) | Source} */
      INFERNO_OVERDRIVE__PHYSICAL = 640,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Inferno_Overdrive__Special_(move) | Source} */
      INFERNO_OVERDRIVE__SPECIAL = 641,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hydro_Vortex__Physical_(move) | Source} */
      HYDRO_VORTEX__PHYSICAL = 642,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hydro_Vortex__Special_(move) | Source} */
      HYDRO_VORTEX__SPECIAL = 643,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bloom_Doom__Physical_(move) | Source} */
      BLOOM_DOOM__PHYSICAL = 644,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bloom_Doom__Special_(move) | Source} */
      BLOOM_DOOM__SPECIAL = 645,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gigavolt_Havoc__Physical_(move) | Source} */
      GIGAVOLT_HAVOC__PHYSICAL = 646,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gigavolt_Havoc__Special_(move) | Source} */
      GIGAVOLT_HAVOC__SPECIAL = 647,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shattered_Psyche__Physical_(move) | Source} */
      SHATTERED_PSYCHE__PHYSICAL = 648,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shattered_Psyche__Special_(move) | Source} */
      SHATTERED_PSYCHE__SPECIAL = 649,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Subzero_Slammer__Physical_(move) | Source} */
      SUBZERO_SLAMMER__PHYSICAL = 650,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Subzero_Slammer__Special_(move) | Source} */
      SUBZERO_SLAMMER__SPECIAL = 651,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Devastating_Drake__Physical_(move) | Source} */
      DEVASTATING_DRAKE__PHYSICAL = 652,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Devastating_Drake__Special_(move) | Source} */
      DEVASTATING_DRAKE__SPECIAL = 653,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Black_Hole_Eclipse__Physical_(move) | Source} */
      BLACK_HOLE_ECLIPSE__PHYSICAL = 654,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Black_Hole_Eclipse__Special_(move) | Source} */
      BLACK_HOLE_ECLIPSE__SPECIAL = 655,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Twinkle_Tackle__Physical_(move) | Source} */
      TWINKLE_TACKLE__PHYSICAL = 656,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Twinkle_Tackle__Special_(move) | Source} */
      TWINKLE_TACKLE__SPECIAL = 657,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Catastropika_(move) | Source} */
      CATASTROPIKA = 658,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shore_Up_(move) | Source} */
      SHORE_UP = 659,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/First_Impression_(move) | Source} */
      FIRST_IMPRESSION = 660,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Baneful_Bunker_(move) | Source} */
      BANEFUL_BUNKER = 661,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spirit_Shackle_(move) | Source} */
      SPIRIT_SHACKLE = 662,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Darkest_Lariat_(move) | Source} */
      DARKEST_LARIAT = 663,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sparkling_Aria_(move) | Source} */
      SPARKLING_ARIA = 664,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Hammer_(move) | Source} */
      ICE_HAMMER = 665,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Floral_Healing_(move) | Source} */
      FLORAL_HEALING = 666,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/High_Horsepower_(move) | Source} */
      HIGH_HORSEPOWER = 667,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Strength_Sap_(move) | Source} */
      STRENGTH_SAP = 668,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Solar_Blade_(move) | Source} */
      SOLAR_BLADE = 669,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Leafage_(move) | Source} */
      LEAFAGE = 670,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spotlight_(move) | Source} */
      SPOTLIGHT = 671,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toxic_Thread_(move) | Source} */
      TOXIC_THREAD = 672,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Laser_Focus_(move) | Source} */
      LASER_FOCUS = 673,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gear_Up_(move) | Source} */
      GEAR_UP = 674,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Throat_Chop_(move) | Source} */
      THROAT_CHOP = 675,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pollen_Puff_(move) | Source} */
      POLLEN_PUFF = 676,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Anchor_Shot_(move) | Source} */
      ANCHOR_SHOT = 677,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psychic_Terrain_(move) | Source} */
      PSYCHIC_TERRAIN = 678,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lunge_(move) | Source} */
      LUNGE = 679,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fire_Lash_(move) | Source} */
      FIRE_LASH = 680,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Trip_(move) | Source} */
      POWER_TRIP = 681,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Burn_Up_(move) | Source} */
      BURN_UP = 682,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Speed_Swap_(move) | Source} */
      SPEED_SWAP = 683,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Smart_Strike_(move) | Source} */
      SMART_STRIKE = 684,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Purify_(move) | Source} */
      PURIFY = 685,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Revelation_Dance_(move) | Source} */
      REVELATION_DANCE = 686,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Core_Enforcer_(move) | Source} */
      CORE_ENFORCER = 687,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trop_Kick_(move) | Source} */
      TROP_KICK = 688,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Instruct_(move) | Source} */
      INSTRUCT = 689,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Beak_Blast_(move) | Source} */
      BEAK_BLAST = 690,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clanging_Scales_(move) | Source} */
      CLANGING_SCALES = 691,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Hammer_(move) | Source} */
      DRAGON_HAMMER = 692,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Brutal_Swing_(move) | Source} */
      BRUTAL_SWING = 693,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aurora_Veil_(move) | Source} */
      AURORA_VEIL = 694,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sinister_Arrow_Raid_(move) | Source} */
      SINISTER_ARROW_RAID = 695,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Malicious_Moonsault_(move) | Source} */
      MALICIOUS_MOONSAULT = 696,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Oceanic_Operetta_(move) | Source} */
      OCEANIC_OPERETTA = 697,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Guardian_Of_Alola_(move) | Source} */
      GUARDIAN_OF_ALOLA = 698,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Soul_Stealing_7_Star_Strike_(move) | Source} */
      SOUL_STEALING_7_STAR_STRIKE = 699,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stoked_Sparksurfer_(move) | Source} */
      STOKED_SPARKSURFER = 700,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pulverizing_Pancake_(move) | Source} */
      PULVERIZING_PANCAKE = 701,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Extreme_Evoboost_(move) | Source} */
      EXTREME_EVOBOOST = 702,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Genesis_Supernova_(move) | Source} */
      GENESIS_SUPERNOVA = 703,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shell_Trap_(move) | Source} */
      SHELL_TRAP = 704,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fleur_Cannon_(move) | Source} */
      FLEUR_CANNON = 705,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psychic_Fangs_(move) | Source} */
      PSYCHIC_FANGS = 706,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stomping_Tantrum_(move) | Source} */
      STOMPING_TANTRUM = 707,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shadow_Bone_(move) | Source} */
      SHADOW_BONE = 708,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Accelerock_(move) | Source} */
      ACCELEROCK = 709,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Liquidation_(move) | Source} */
      LIQUIDATION = 710,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Prismatic_Laser_(move) | Source} */
      PRISMATIC_LASER = 711,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spectral_Thief_(move) | Source} */
      SPECTRAL_THIEF = 712,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sunsteel_Strike_(move) | Source} */
      SUNSTEEL_STRIKE = 713,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Moongeist_Beam_(move) | Source} */
      MOONGEIST_BEAM = 714,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tearful_Look_(move) | Source} */
      TEARFUL_LOOK = 715,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zing_Zap_(move) | Source} */
      ZING_ZAP = 716,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Natures_Madness_(move) | Source} */
      NATURES_MADNESS = 717,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Multi_Attack_(move) | Source} */
      MULTI_ATTACK = 718,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ten_Million_Volt_Thunderbolt_(move) | Source} */
      TEN_MILLION_VOLT_THUNDERBOLT = 719,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mind_Blown_(move) | Source} */
      MIND_BLOWN = 720,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Plasma_Fists_(move) | Source} */
      PLASMA_FISTS = 721,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Photon_Geyser_(move) | Source} */
      PHOTON_GEYSER = 722,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Light_That_Burns_The_Sky_(move) | Source} */
      LIGHT_THAT_BURNS_THE_SKY = 723,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Searing_Sunraze_Smash_(move) | Source} */
      SEARING_SUNRAZE_SMASH = 724,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Menacing_Moonraze_Maelstrom_(move) | Source} */
      MENACING_MOONRAZE_MAELSTROM = 725,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lets_Snuggle_Forever_(move) | Source} */
      LETS_SNUGGLE_FOREVER = 726,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Splintered_Stormshards_(move) | Source} */
      SPLINTERED_STORMSHARDS = 727,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clangorous_Soulblaze_(move) | Source} */
      CLANGOROUS_SOULBLAZE = 728,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zippy_Zap_(move) | Source} */
      ZIPPY_ZAP = 729,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Splishy_Splash_(move) | Source} */
      SPLISHY_SPLASH = 730,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Floaty_Fall_(move) | Source} */
      FLOATY_FALL = 731,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pika_Papow_(move) | Source} */
      PIKA_PAPOW = 732,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bouncy_Bubble_(move) | Source} */
      BOUNCY_BUBBLE = 733,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Buzzy_Buzz_(move) | Source} */
      BUZZY_BUZZ = 734,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sizzly_Slide_(move) | Source} */
      SIZZLY_SLIDE = 735,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glitzy_Glow_(move) | Source} */
      GLITZY_GLOW = 736,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Baddy_Bad_(move) | Source} */
      BADDY_BAD = 737,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sappy_Seed_(move) | Source} */
      SAPPY_SEED = 738,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Freezy_Frost_(move) | Source} */
      FREEZY_FROST = 739,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sparkly_Swirl_(move) | Source} */
      SPARKLY_SWIRL = 740,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Veevee_Volley_(move) | Source} */
      VEEVEE_VOLLEY = 741,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Double_Iron_Bash_(move) | Source} */
      DOUBLE_IRON_BASH = 742,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Guard_(move) | Source} */
      MAX_GUARD = 743,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dynamax_Cannon_(move) | Source} */
      DYNAMAX_CANNON = 744,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snipe_Shot_(move) | Source} */
      SNIPE_SHOT = 745,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jaw_Lock_(move) | Source} */
      JAW_LOCK = 746,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stuff_Cheeks_(move) | Source} */
      STUFF_CHEEKS = 747,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/No_Retreat_(move) | Source} */
      NO_RETREAT = 748,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tar_Shot_(move) | Source} */
      TAR_SHOT = 749,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magic_Powder_(move) | Source} */
      MAGIC_POWDER = 750,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Darts_(move) | Source} */
      DRAGON_DARTS = 751,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Teatime_(move) | Source} */
      TEATIME = 752,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Octolock_(move) | Source} */
      OCTOLOCK = 753,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bolt_Beak_(move) | Source} */
      BOLT_BEAK = 754,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fishious_Rend_(move) | Source} */
      FISHIOUS_REND = 755,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Court_Change_(move) | Source} */
      COURT_CHANGE = 756,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Flare_(move) | Source} */
      MAX_FLARE = 757,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Flutterby_(move) | Source} */
      MAX_FLUTTERBY = 758,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Lightning_(move) | Source} */
      MAX_LIGHTNING = 759,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Strike_(move) | Source} */
      MAX_STRIKE = 760,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Knuckle_(move) | Source} */
      MAX_KNUCKLE = 761,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Phantasm_(move) | Source} */
      MAX_PHANTASM = 762,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Hailstorm_(move) | Source} */
      MAX_HAILSTORM = 763,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Ooze_(move) | Source} */
      MAX_OOZE = 764,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Geyser_(move) | Source} */
      MAX_GEYSER = 765,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Airstream_(move) | Source} */
      MAX_AIRSTREAM = 766,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Starfall_(move) | Source} */
      MAX_STARFALL = 767,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Wyrmwind_(move) | Source} */
      MAX_WYRMWIND = 768,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Mindstorm_(move) | Source} */
      MAX_MINDSTORM = 769,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Rockfall_(move) | Source} */
      MAX_ROCKFALL = 770,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Quake_(move) | Source} */
      MAX_QUAKE = 771,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Darkness_(move) | Source} */
      MAX_DARKNESS = 772,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Overgrowth_(move) | Source} */
      MAX_OVERGROWTH = 773,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Steelspike_(move) | Source} */
      MAX_STEELSPIKE = 774,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clangorous_Soul_(move) | Source} */
      CLANGOROUS_SOUL = 775,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Body_Press_(move) | Source} */
      BODY_PRESS = 776,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Decorate_(move) | Source} */
      DECORATE = 777,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drum_Beating_(move) | Source} */
      DRUM_BEATING = 778,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snap_Trap_(move) | Source} */
      SNAP_TRAP = 779,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pyro_Ball_(move) | Source} */
      PYRO_BALL = 780,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Behemoth_Blade_(move) | Source} */
      BEHEMOTH_BLADE = 781,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Behemoth_Bash_(move) | Source} */
      BEHEMOTH_BASH = 782,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aura_Wheel_(move) | Source} */
      AURA_WHEEL = 783,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Breaking_Swipe_(move) | Source} */
      BREAKING_SWIPE = 784,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Branch_Poke_(move) | Source} */
      BRANCH_POKE = 785,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Overdrive_(move) | Source} */
      OVERDRIVE = 786,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Apple_Acid_(move) | Source} */
      APPLE_ACID = 787,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grav_Apple_(move) | Source} */
      GRAV_APPLE = 788,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spirit_Break_(move) | Source} */
      SPIRIT_BREAK = 789,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Strange_Steam_(move) | Source} */
      STRANGE_STEAM = 790,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Life_Dew_(move) | Source} */
      LIFE_DEW = 791,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Obstruct_(move) | Source} */
      OBSTRUCT = 792,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/False_Surrender_(move) | Source} */
      FALSE_SURRENDER = 793,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meteor_Assault_(move) | Source} */
      METEOR_ASSAULT = 794,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Eternabeam_(move) | Source} */
      ETERNABEAM = 795,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steel_Beam_(move) | Source} */
      STEEL_BEAM = 796,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Expanding_Force_(move) | Source} */
      EXPANDING_FORCE = 797,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steel_Roller_(move) | Source} */
      STEEL_ROLLER = 798,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scale_Shot_(move) | Source} */
      SCALE_SHOT = 799,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meteor_Beam_(move) | Source} */
      METEOR_BEAM = 800,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shell_Side_Arm_(move) | Source} */
      SHELL_SIDE_ARM = 801,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Misty_Explosion_(move) | Source} */
      MISTY_EXPLOSION = 802,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grassy_Glide_(move) | Source} */
      GRASSY_GLIDE = 803,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rising_Voltage_(move) | Source} */
      RISING_VOLTAGE = 804,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Terrain_Pulse_(move) | Source} */
      TERRAIN_PULSE = 805,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skitter_Smack_(move) | Source} */
      SKITTER_SMACK = 806,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Burning_Jealousy_(move) | Source} */
      BURNING_JEALOUSY = 807,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lash_Out_(move) | Source} */
      LASH_OUT = 808,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poltergeist_(move) | Source} */
      POLTERGEIST = 809,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Corrosive_Gas_(move) | Source} */
      CORROSIVE_GAS = 810,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Coaching_(move) | Source} */
      COACHING = 811,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flip_Turn_(move) | Source} */
      FLIP_TURN = 812,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Triple_Axel_(move) | Source} */
      TRIPLE_AXEL = 813,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dual_Wingbeat_(move) | Source} */
      DUAL_WINGBEAT = 814,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scorching_Sands_(move) | Source} */
      SCORCHING_SANDS = 815,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jungle_Healing_(move) | Source} */
      JUNGLE_HEALING = 816,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wicked_Blow_(move) | Source} */
      WICKED_BLOW = 817,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Surging_Strikes_(move) | Source} */
      SURGING_STRIKES = 818,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thunder_Cage_(move) | Source} */
      THUNDER_CAGE = 819,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Energy_(move) | Source} */
      DRAGON_ENERGY = 820,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Freezing_Glare_(move) | Source} */
      FREEZING_GLARE = 821,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fiery_Wrath_(move) | Source} */
      FIERY_WRATH = 822,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thunderous_Kick_(move) | Source} */
      THUNDEROUS_KICK = 823,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glacial_Lance_(move) | Source} */
      GLACIAL_LANCE = 824,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Astral_Barrage_(move) | Source} */
      ASTRAL_BARRAGE = 825,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Eerie_Spell_(move) | Source} */
      EERIE_SPELL = 826,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dire_Claw_(move) | Source} */
      DIRE_CLAW = 827,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psyshield_Bash_(move) | Source} */
      PSYSHIELD_BASH = 828,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Shift_(move) | Source} */
      POWER_SHIFT = 829,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stone_Axe_(move) | Source} */
      STONE_AXE = 830,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Springtide_Storm_(move) | Source} */
      SPRINGTIDE_STORM = 831,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mystical_Power_(move) | Source} */
      MYSTICAL_POWER = 832,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Raging_Fury_(move) | Source} */
      RAGING_FURY = 833,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wave_Crash_(move) | Source} */
      WAVE_CRASH = 834,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chloroblast_(move) | Source} */
      CHLOROBLAST = 835,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mountain_Gale_(move) | Source} */
      MOUNTAIN_GALE = 836,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Victory_Dance_(move) | Source} */
      VICTORY_DANCE = 837,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Headlong_Rush_(move) | Source} */
      HEADLONG_RUSH = 838,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Barb_Barrage_(move) | Source} */
      BARB_BARRAGE = 839,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Esper_Wing_(move) | Source} */
      ESPER_WING = 840,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bitter_Malice_(move) | Source} */
      BITTER_MALICE = 841,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shelter_(move) | Source} */
      SHELTER = 842,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Triple_Arrows_(move) | Source} */
      TRIPLE_ARROWS = 843,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Infernal_Parade_(move) | Source} */
      INFERNAL_PARADE = 844,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ceaseless_Edge_(move) | Source} */
      CEASELESS_EDGE = 845,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bleakwind_Storm_(move) | Source} */
      BLEAKWIND_STORM = 846,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wildbolt_Storm_(move) | Source} */
      WILDBOLT_STORM = 847,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sandsear_Storm_(move) | Source} */
      SANDSEAR_STORM = 848,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lunar_Blessing_(move) | Source} */
      LUNAR_BLESSING = 849,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Take_Heart_(move) | Source} */
      TAKE_HEART = 850,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tera_Blast_(move) | Source} */
      TERA_BLAST = 851,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Silk_Trap_(move) | Source} */
      SILK_TRAP = 852,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Axe_Kick_(move) | Source} */
      AXE_KICK = 853,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Last_Respects_(move) | Source} */
      LAST_RESPECTS = 854,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lumina_Crash_(move) | Source} */
      LUMINA_CRASH = 855,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Order_Up_(move) | Source} */
      ORDER_UP = 856,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jet_Punch_(move) | Source} */
      JET_PUNCH = 857,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spicy_Extract_(move) | Source} */
      SPICY_EXTRACT = 858,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spin_Out_(move) | Source} */
      SPIN_OUT = 859,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Population_Bomb_(move) | Source} */
      POPULATION_BOMB = 860,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Spinner_(move) | Source} */
      ICE_SPINNER = 861,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glaive_Rush_(move) | Source} */
      GLAIVE_RUSH = 862,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Revival_Blessing_(move) | Source} */
      REVIVAL_BLESSING = 863,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Salt_Cure_(move) | Source} */
      SALT_CURE = 864,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Triple_Dive_(move) | Source} */
      TRIPLE_DIVE = 865,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mortal_Spin_(move) | Source} */
      MORTAL_SPIN = 866,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Doodle_(move) | Source} */
      DOODLE = 867,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fillet_Away_(move) | Source} */
      FILLET_AWAY = 868,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kowtow_Cleave_(move) | Source} */
      KOWTOW_CLEAVE = 869,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flower_Trick_(move) | Source} */
      FLOWER_TRICK = 870,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Torch_Song_(move) | Source} */
      TORCH_SONG = 871,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aqua_Step_(move) | Source} */
      AQUA_STEP = 872,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Raging_Bull_(move) | Source} */
      RAGING_BULL = 873,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Make_It_Rain_(move) | Source} */
      MAKE_IT_RAIN = 874,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psyblade_(move) | Source} */
      PSYBLADE = 875,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hydro_Steam_(move) | Source} */
      HYDRO_STEAM = 876,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ruination_(move) | Source} */
      RUINATION = 877,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Collision_Course_(move) | Source} */
      COLLISION_COURSE = 878,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electro_Drift_(move) | Source} */
      ELECTRO_DRIFT = 879,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shed_Tail_(move) | Source} */
      SHED_TAIL = 880,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chilly_Reception_(move) | Source} */
      CHILLY_RECEPTION = 881,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tidy_Up_(move) | Source} */
      TIDY_UP = 882,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snowscape_(move) | Source} */
      SNOWSCAPE = 883,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pounce_(move) | Source} */
      POUNCE = 884,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trailblaze_(move) | Source} */
      TRAILBLAZE = 885,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chilling_Water_(move) | Source} */
      CHILLING_WATER = 886,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hyper_Drill_(move) | Source} */
      HYPER_DRILL = 887,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Twin_Beam_(move) | Source} */
      TWIN_BEAM = 888,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rage_Fist_(move) | Source} */
      RAGE_FIST = 889,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Armor_Cannon_(move) | Source} */
      ARMOR_CANNON = 890,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bitter_Blade_(move) | Source} */
      BITTER_BLADE = 891,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Double_Shock_(move) | Source} */
      DOUBLE_SHOCK = 892,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gigaton_Hammer_(move) | Source} */
      GIGATON_HAMMER = 893,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Comeuppance_(move) | Source} */
      COMEUPPANCE = 894,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aqua_Cutter_(move) | Source} */
      AQUA_CUTTER = 895,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blazing_Torque_(move) | Source} */
      BLAZING_TORQUE = 896,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wicked_Torque_(move) | Source} */
      WICKED_TORQUE = 897,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Noxious_Torque_(move) | Source} */
      NOXIOUS_TORQUE = 898,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Combat_Torque_(move) | Source} */
      COMBAT_TORQUE = 899,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magical_Torque_(move) | Source} */
      MAGICAL_TORQUE = 900,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blood_Moon_(move) | Source} */
      BLOOD_MOON = 901,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Matcha_Gotcha_(move) | Source} */
      MATCHA_GOTCHA = 902,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Syrup_Bomb_(move) | Source} */
      SYRUP_BOMB = 903,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ivy_Cudgel_(move) | Source} */
      IVY_CUDGEL = 904,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electro_Shot_(move) | Source} */
      ELECTRO_SHOT = 905,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tera_Starstorm_(move) | Source} */
      TERA_STARSTORM = 906,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fickle_Beam_(move) | Source} */
      FICKLE_BEAM = 907,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Burning_Bulwark_(move) | Source} */
      BURNING_BULWARK = 908,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thunderclap_(move) | Source} */
      THUNDERCLAP = 909,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mighty_Cleave_(move) | Source} */
      MIGHTY_CLEAVE = 910,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tachyon_Cutter_(move) | Source} */
      TACHYON_CUTTER = 911,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hard_Press_(move) | Source} */
      HARD_PRESS = 912,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Cheer_(move) | Source} */
      DRAGON_CHEER = 913,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Alluring_Voice_(move) | Source} */
      ALLURING_VOICE = 914,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Temper_Flare_(move) | Source} */
      TEMPER_FLARE = 915,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Supercell_Slam_(move) | Source} */
      SUPERCELL_SLAM = 916,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psychic_Noise_(move) | Source} */
      PSYCHIC_NOISE = 917,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Upper_Hand_(move) | Source} */
      UPPER_HAND = 918,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Malignant_Chain_(move) | Source} */
      MALIGNANT_CHAIN = 919
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum PartyMemberStrength {
      WEAKEST = 0,
      WEAKER = 1,
      WEAK = 2,
      AVERAGE = 3,
      STRONG = 4,
      STRONGER = 5
  }
  
}

declare namespace PokeRogue.enums {
  /**
   * enum for passive
   */
  export declare enum Passive {
      UNLOCKED = 1,
      ENABLED = 2
  }
  
}

declare namespace PokeRogue.enums {
  /**
   * enum for the players gender
   */
  export declare enum PlayerGender {
      UNSET = 0,
      MALE = 1,
      FEMALE = 2
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum Species {
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bulbasaur_(Pokémon) | Source} */
      BULBASAUR = 1,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ivysaur_(Pokémon) | Source} */
      IVYSAUR = 2,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Venusaur_(Pokémon) | Source} */
      VENUSAUR = 3,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Charmander_(Pokémon) | Source} */
      CHARMANDER = 4,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Charmeleon_(Pokémon) | Source} */
      CHARMELEON = 5,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Charizard_(Pokémon) | Source} */
      CHARIZARD = 6,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Squirtle_(Pokémon) | Source} */
      SQUIRTLE = 7,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wartortle_(Pokémon) | Source} */
      WARTORTLE = 8,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blastoise_(Pokémon) | Source} */
      BLASTOISE = 9,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Caterpie_(Pokémon) | Source} */
      CATERPIE = 10,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Metapod_(Pokémon) | Source} */
      METAPOD = 11,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Butterfree_(Pokémon) | Source} */
      BUTTERFREE = 12,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Weedle_(Pokémon) | Source} */
      WEEDLE = 13,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kakuna_(Pokémon) | Source} */
      KAKUNA = 14,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Beedrill_(Pokémon) | Source} */
      BEEDRILL = 15,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pidgey_(Pokémon) | Source} */
      PIDGEY = 16,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pidgeotto_(Pokémon) | Source} */
      PIDGEOTTO = 17,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pidgeot_(Pokémon) | Source} */
      PIDGEOT = 18,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rattata_(Pokémon) | Source} */
      RATTATA = 19,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Raticate_(Pokémon) | Source} */
      RATICATE = 20,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spearow_(Pokémon) | Source} */
      SPEAROW = 21,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fearow_(Pokémon) | Source} */
      FEAROW = 22,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ekans_(Pokémon) | Source} */
      EKANS = 23,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arbok_(Pokémon) | Source} */
      ARBOK = 24,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pikachu_(Pokémon) | Source} */
      PIKACHU = 25,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Raichu_(Pokémon) | Source} */
      RAICHU = 26,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sandshrew_(Pokémon) | Source} */
      SANDSHREW = 27,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sandslash_(Pokémon) | Source} */
      SANDSLASH = 28,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nidoran_F_(Pokémon) | Source} */
      NIDORAN_F = 29,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nidorina_(Pokémon) | Source} */
      NIDORINA = 30,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nidoqueen_(Pokémon) | Source} */
      NIDOQUEEN = 31,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nidoran_M_(Pokémon) | Source} */
      NIDORAN_M = 32,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nidorino_(Pokémon) | Source} */
      NIDORINO = 33,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nidoking_(Pokémon) | Source} */
      NIDOKING = 34,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clefairy_(Pokémon) | Source} */
      CLEFAIRY = 35,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clefable_(Pokémon) | Source} */
      CLEFABLE = 36,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vulpix_(Pokémon) | Source} */
      VULPIX = 37,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ninetales_(Pokémon) | Source} */
      NINETALES = 38,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jigglypuff_(Pokémon) | Source} */
      JIGGLYPUFF = 39,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wigglytuff_(Pokémon) | Source} */
      WIGGLYTUFF = 40,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zubat_(Pokémon) | Source} */
      ZUBAT = 41,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Golbat_(Pokémon) | Source} */
      GOLBAT = 42,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Oddish_(Pokémon) | Source} */
      ODDISH = 43,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gloom_(Pokémon) | Source} */
      GLOOM = 44,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vileplume_(Pokémon) | Source} */
      VILEPLUME = 45,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Paras_(Pokémon) | Source} */
      PARAS = 46,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Parasect_(Pokémon) | Source} */
      PARASECT = 47,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Venonat_(Pokémon) | Source} */
      VENONAT = 48,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Venomoth_(Pokémon) | Source} */
      VENOMOTH = 49,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Diglett_(Pokémon) | Source} */
      DIGLETT = 50,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dugtrio_(Pokémon) | Source} */
      DUGTRIO = 51,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meowth_(Pokémon) | Source} */
      MEOWTH = 52,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Persian_(Pokémon) | Source} */
      PERSIAN = 53,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psyduck_(Pokémon) | Source} */
      PSYDUCK = 54,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Golduck_(Pokémon) | Source} */
      GOLDUCK = 55,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mankey_(Pokémon) | Source} */
      MANKEY = 56,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Primeape_(Pokémon) | Source} */
      PRIMEAPE = 57,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Growlithe_(Pokémon) | Source} */
      GROWLITHE = 58,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arcanine_(Pokémon) | Source} */
      ARCANINE = 59,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poliwag_(Pokémon) | Source} */
      POLIWAG = 60,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poliwhirl_(Pokémon) | Source} */
      POLIWHIRL = 61,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poliwrath_(Pokémon) | Source} */
      POLIWRATH = 62,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Abra_(Pokémon) | Source} */
      ABRA = 63,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kadabra_(Pokémon) | Source} */
      KADABRA = 64,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Alakazam_(Pokémon) | Source} */
      ALAKAZAM = 65,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Machop_(Pokémon) | Source} */
      MACHOP = 66,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Machoke_(Pokémon) | Source} */
      MACHOKE = 67,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Machamp_(Pokémon) | Source} */
      MACHAMP = 68,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bellsprout_(Pokémon) | Source} */
      BELLSPROUT = 69,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Weepinbell_(Pokémon) | Source} */
      WEEPINBELL = 70,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Victreebel_(Pokémon) | Source} */
      VICTREEBEL = 71,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tentacool_(Pokémon) | Source} */
      TENTACOOL = 72,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tentacruel_(Pokémon) | Source} */
      TENTACRUEL = 73,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Geodude_(Pokémon) | Source} */
      GEODUDE = 74,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Graveler_(Pokémon) | Source} */
      GRAVELER = 75,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Golem_(Pokémon) | Source} */
      GOLEM = 76,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ponyta_(Pokémon) | Source} */
      PONYTA = 77,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rapidash_(Pokémon) | Source} */
      RAPIDASH = 78,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slowpoke_(Pokémon) | Source} */
      SLOWPOKE = 79,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slowbro_(Pokémon) | Source} */
      SLOWBRO = 80,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magnemite_(Pokémon) | Source} */
      MAGNEMITE = 81,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magneton_(Pokémon) | Source} */
      MAGNETON = 82,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Farfetchd_(Pokémon) | Source} */
      FARFETCHD = 83,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Doduo_(Pokémon) | Source} */
      DODUO = 84,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dodrio_(Pokémon) | Source} */
      DODRIO = 85,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Seel_(Pokémon) | Source} */
      SEEL = 86,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dewgong_(Pokémon) | Source} */
      DEWGONG = 87,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grimer_(Pokémon) | Source} */
      GRIMER = 88,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Muk_(Pokémon) | Source} */
      MUK = 89,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shellder_(Pokémon) | Source} */
      SHELLDER = 90,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cloyster_(Pokémon) | Source} */
      CLOYSTER = 91,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gastly_(Pokémon) | Source} */
      GASTLY = 92,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Haunter_(Pokémon) | Source} */
      HAUNTER = 93,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gengar_(Pokémon) | Source} */
      GENGAR = 94,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Onix_(Pokémon) | Source} */
      ONIX = 95,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drowzee_(Pokémon) | Source} */
      DROWZEE = 96,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hypno_(Pokémon) | Source} */
      HYPNO = 97,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Krabby_(Pokémon) | Source} */
      KRABBY = 98,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kingler_(Pokémon) | Source} */
      KINGLER = 99,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Voltorb_(Pokémon) | Source} */
      VOLTORB = 100,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electrode_(Pokémon) | Source} */
      ELECTRODE = 101,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Exeggcute_(Pokémon) | Source} */
      EXEGGCUTE = 102,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Exeggutor_(Pokémon) | Source} */
      EXEGGUTOR = 103,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cubone_(Pokémon) | Source} */
      CUBONE = 104,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Marowak_(Pokémon) | Source} */
      MAROWAK = 105,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hitmonlee_(Pokémon) | Source} */
      HITMONLEE = 106,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hitmonchan_(Pokémon) | Source} */
      HITMONCHAN = 107,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lickitung_(Pokémon) | Source} */
      LICKITUNG = 108,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Koffing_(Pokémon) | Source} */
      KOFFING = 109,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Weezing_(Pokémon) | Source} */
      WEEZING = 110,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rhyhorn_(Pokémon) | Source} */
      RHYHORN = 111,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rhydon_(Pokémon) | Source} */
      RHYDON = 112,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chansey_(Pokémon) | Source} */
      CHANSEY = 113,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tangela_(Pokémon) | Source} */
      TANGELA = 114,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kangaskhan_(Pokémon) | Source} */
      KANGASKHAN = 115,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Horsea_(Pokémon) | Source} */
      HORSEA = 116,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Seadra_(Pokémon) | Source} */
      SEADRA = 117,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Goldeen_(Pokémon) | Source} */
      GOLDEEN = 118,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Seaking_(Pokémon) | Source} */
      SEAKING = 119,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Staryu_(Pokémon) | Source} */
      STARYU = 120,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Starmie_(Pokémon) | Source} */
      STARMIE = 121,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mr_Mime_(Pokémon) | Source} */
      MR_MIME = 122,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scyther_(Pokémon) | Source} */
      SCYTHER = 123,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jynx_(Pokémon) | Source} */
      JYNX = 124,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electabuzz_(Pokémon) | Source} */
      ELECTABUZZ = 125,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magmar_(Pokémon) | Source} */
      MAGMAR = 126,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pinsir_(Pokémon) | Source} */
      PINSIR = 127,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tauros_(Pokémon) | Source} */
      TAUROS = 128,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magikarp_(Pokémon) | Source} */
      MAGIKARP = 129,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gyarados_(Pokémon) | Source} */
      GYARADOS = 130,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lapras_(Pokémon) | Source} */
      LAPRAS = 131,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ditto_(Pokémon) | Source} */
      DITTO = 132,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Eevee_(Pokémon) | Source} */
      EEVEE = 133,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vaporeon_(Pokémon) | Source} */
      VAPOREON = 134,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jolteon_(Pokémon) | Source} */
      JOLTEON = 135,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flareon_(Pokémon) | Source} */
      FLAREON = 136,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Porygon_(Pokémon) | Source} */
      PORYGON = 137,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Omanyte_(Pokémon) | Source} */
      OMANYTE = 138,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Omastar_(Pokémon) | Source} */
      OMASTAR = 139,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kabuto_(Pokémon) | Source} */
      KABUTO = 140,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kabutops_(Pokémon) | Source} */
      KABUTOPS = 141,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aerodactyl_(Pokémon) | Source} */
      AERODACTYL = 142,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snorlax_(Pokémon) | Source} */
      SNORLAX = 143,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Articuno_(Pokémon) | Source} */
      ARTICUNO = 144,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zapdos_(Pokémon) | Source} */
      ZAPDOS = 145,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Moltres_(Pokémon) | Source} */
      MOLTRES = 146,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dratini_(Pokémon) | Source} */
      DRATINI = 147,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragonair_(Pokémon) | Source} */
      DRAGONAIR = 148,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragonite_(Pokémon) | Source} */
      DRAGONITE = 149,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mewtwo_(Pokémon) | Source} */
      MEWTWO = 150,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mew_(Pokémon) | Source} */
      MEW = 151,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chikorita_(Pokémon) | Source} */
      CHIKORITA = 152,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bayleef_(Pokémon) | Source} */
      BAYLEEF = 153,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meganium_(Pokémon) | Source} */
      MEGANIUM = 154,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cyndaquil_(Pokémon) | Source} */
      CYNDAQUIL = 155,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quilava_(Pokémon) | Source} */
      QUILAVA = 156,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Typhlosion_(Pokémon) | Source} */
      TYPHLOSION = 157,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Totodile_(Pokémon) | Source} */
      TOTODILE = 158,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Croconaw_(Pokémon) | Source} */
      CROCONAW = 159,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Feraligatr_(Pokémon) | Source} */
      FERALIGATR = 160,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sentret_(Pokémon) | Source} */
      SENTRET = 161,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Furret_(Pokémon) | Source} */
      FURRET = 162,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hoothoot_(Pokémon) | Source} */
      HOOTHOOT = 163,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Noctowl_(Pokémon) | Source} */
      NOCTOWL = 164,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ledyba_(Pokémon) | Source} */
      LEDYBA = 165,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ledian_(Pokémon) | Source} */
      LEDIAN = 166,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spinarak_(Pokémon) | Source} */
      SPINARAK = 167,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ariados_(Pokémon) | Source} */
      ARIADOS = 168,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crobat_(Pokémon) | Source} */
      CROBAT = 169,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chinchou_(Pokémon) | Source} */
      CHINCHOU = 170,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lanturn_(Pokémon) | Source} */
      LANTURN = 171,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pichu_(Pokémon) | Source} */
      PICHU = 172,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cleffa_(Pokémon) | Source} */
      CLEFFA = 173,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Igglybuff_(Pokémon) | Source} */
      IGGLYBUFF = 174,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Togepi_(Pokémon) | Source} */
      TOGEPI = 175,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Togetic_(Pokémon) | Source} */
      TOGETIC = 176,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Natu_(Pokémon) | Source} */
      NATU = 177,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Xatu_(Pokémon) | Source} */
      XATU = 178,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mareep_(Pokémon) | Source} */
      MAREEP = 179,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flaaffy_(Pokémon) | Source} */
      FLAAFFY = 180,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ampharos_(Pokémon) | Source} */
      AMPHAROS = 181,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bellossom_(Pokémon) | Source} */
      BELLOSSOM = 182,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Marill_(Pokémon) | Source} */
      MARILL = 183,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Azumarill_(Pokémon) | Source} */
      AZUMARILL = 184,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sudowoodo_(Pokémon) | Source} */
      SUDOWOODO = 185,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Politoed_(Pokémon) | Source} */
      POLITOED = 186,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hoppip_(Pokémon) | Source} */
      HOPPIP = 187,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skiploom_(Pokémon) | Source} */
      SKIPLOOM = 188,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jumpluff_(Pokémon) | Source} */
      JUMPLUFF = 189,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aipom_(Pokémon) | Source} */
      AIPOM = 190,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sunkern_(Pokémon) | Source} */
      SUNKERN = 191,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sunflora_(Pokémon) | Source} */
      SUNFLORA = 192,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Yanma_(Pokémon) | Source} */
      YANMA = 193,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wooper_(Pokémon) | Source} */
      WOOPER = 194,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quagsire_(Pokémon) | Source} */
      QUAGSIRE = 195,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Espeon_(Pokémon) | Source} */
      ESPEON = 196,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Umbreon_(Pokémon) | Source} */
      UMBREON = 197,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Murkrow_(Pokémon) | Source} */
      MURKROW = 198,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slowking_(Pokémon) | Source} */
      SLOWKING = 199,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Misdreavus_(Pokémon) | Source} */
      MISDREAVUS = 200,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Unown_(Pokémon) | Source} */
      UNOWN = 201,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wobbuffet_(Pokémon) | Source} */
      WOBBUFFET = 202,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Girafarig_(Pokémon) | Source} */
      GIRAFARIG = 203,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pineco_(Pokémon) | Source} */
      PINECO = 204,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Forretress_(Pokémon) | Source} */
      FORRETRESS = 205,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dunsparce_(Pokémon) | Source} */
      DUNSPARCE = 206,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gligar_(Pokémon) | Source} */
      GLIGAR = 207,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steelix_(Pokémon) | Source} */
      STEELIX = 208,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snubbull_(Pokémon) | Source} */
      SNUBBULL = 209,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Granbull_(Pokémon) | Source} */
      GRANBULL = 210,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Qwilfish_(Pokémon) | Source} */
      QWILFISH = 211,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scizor_(Pokémon) | Source} */
      SCIZOR = 212,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shuckle_(Pokémon) | Source} */
      SHUCKLE = 213,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heracross_(Pokémon) | Source} */
      HERACROSS = 214,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sneasel_(Pokémon) | Source} */
      SNEASEL = 215,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Teddiursa_(Pokémon) | Source} */
      TEDDIURSA = 216,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ursaring_(Pokémon) | Source} */
      URSARING = 217,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slugma_(Pokémon) | Source} */
      SLUGMA = 218,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magcargo_(Pokémon) | Source} */
      MAGCARGO = 219,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swinub_(Pokémon) | Source} */
      SWINUB = 220,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Piloswine_(Pokémon) | Source} */
      PILOSWINE = 221,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Corsola_(Pokémon) | Source} */
      CORSOLA = 222,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Remoraid_(Pokémon) | Source} */
      REMORAID = 223,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Octillery_(Pokémon) | Source} */
      OCTILLERY = 224,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Delibird_(Pokémon) | Source} */
      DELIBIRD = 225,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mantine_(Pokémon) | Source} */
      MANTINE = 226,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skarmory_(Pokémon) | Source} */
      SKARMORY = 227,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Houndour_(Pokémon) | Source} */
      HOUNDOUR = 228,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Houndoom_(Pokémon) | Source} */
      HOUNDOOM = 229,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kingdra_(Pokémon) | Source} */
      KINGDRA = 230,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Phanpy_(Pokémon) | Source} */
      PHANPY = 231,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Donphan_(Pokémon) | Source} */
      DONPHAN = 232,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Porygon2_(Pokémon) | Source} */
      PORYGON2 = 233,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stantler_(Pokémon) | Source} */
      STANTLER = 234,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Smeargle_(Pokémon) | Source} */
      SMEARGLE = 235,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tyrogue_(Pokémon) | Source} */
      TYROGUE = 236,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hitmontop_(Pokémon) | Source} */
      HITMONTOP = 237,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Smoochum_(Pokémon) | Source} */
      SMOOCHUM = 238,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Elekid_(Pokémon) | Source} */
      ELEKID = 239,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magby_(Pokémon) | Source} */
      MAGBY = 240,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Miltank_(Pokémon) | Source} */
      MILTANK = 241,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blissey_(Pokémon) | Source} */
      BLISSEY = 242,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Raikou_(Pokémon) | Source} */
      RAIKOU = 243,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Entei_(Pokémon) | Source} */
      ENTEI = 244,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Suicune_(Pokémon) | Source} */
      SUICUNE = 245,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Larvitar_(Pokémon) | Source} */
      LARVITAR = 246,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pupitar_(Pokémon) | Source} */
      PUPITAR = 247,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tyranitar_(Pokémon) | Source} */
      TYRANITAR = 248,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lugia_(Pokémon) | Source} */
      LUGIA = 249,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ho_Oh_(Pokémon) | Source} */
      HO_OH = 250,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Celebi_(Pokémon) | Source} */
      CELEBI = 251,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Treecko_(Pokémon) | Source} */
      TREECKO = 252,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grovyle_(Pokémon) | Source} */
      GROVYLE = 253,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sceptile_(Pokémon) | Source} */
      SCEPTILE = 254,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Torchic_(Pokémon) | Source} */
      TORCHIC = 255,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Combusken_(Pokémon) | Source} */
      COMBUSKEN = 256,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blaziken_(Pokémon) | Source} */
      BLAZIKEN = 257,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mudkip_(Pokémon) | Source} */
      MUDKIP = 258,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Marshtomp_(Pokémon) | Source} */
      MARSHTOMP = 259,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swampert_(Pokémon) | Source} */
      SWAMPERT = 260,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poochyena_(Pokémon) | Source} */
      POOCHYENA = 261,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mightyena_(Pokémon) | Source} */
      MIGHTYENA = 262,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zigzagoon_(Pokémon) | Source} */
      ZIGZAGOON = 263,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Linoone_(Pokémon) | Source} */
      LINOONE = 264,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wurmple_(Pokémon) | Source} */
      WURMPLE = 265,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Silcoon_(Pokémon) | Source} */
      SILCOON = 266,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Beautifly_(Pokémon) | Source} */
      BEAUTIFLY = 267,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cascoon_(Pokémon) | Source} */
      CASCOON = 268,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dustox_(Pokémon) | Source} */
      DUSTOX = 269,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lotad_(Pokémon) | Source} */
      LOTAD = 270,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lombre_(Pokémon) | Source} */
      LOMBRE = 271,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ludicolo_(Pokémon) | Source} */
      LUDICOLO = 272,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Seedot_(Pokémon) | Source} */
      SEEDOT = 273,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nuzleaf_(Pokémon) | Source} */
      NUZLEAF = 274,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shiftry_(Pokémon) | Source} */
      SHIFTRY = 275,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Taillow_(Pokémon) | Source} */
      TAILLOW = 276,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swellow_(Pokémon) | Source} */
      SWELLOW = 277,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wingull_(Pokémon) | Source} */
      WINGULL = 278,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pelipper_(Pokémon) | Source} */
      PELIPPER = 279,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ralts_(Pokémon) | Source} */
      RALTS = 280,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kirlia_(Pokémon) | Source} */
      KIRLIA = 281,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gardevoir_(Pokémon) | Source} */
      GARDEVOIR = 282,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Surskit_(Pokémon) | Source} */
      SURSKIT = 283,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Masquerain_(Pokémon) | Source} */
      MASQUERAIN = 284,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shroomish_(Pokémon) | Source} */
      SHROOMISH = 285,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Breloom_(Pokémon) | Source} */
      BRELOOM = 286,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slakoth_(Pokémon) | Source} */
      SLAKOTH = 287,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vigoroth_(Pokémon) | Source} */
      VIGOROTH = 288,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slaking_(Pokémon) | Source} */
      SLAKING = 289,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nincada_(Pokémon) | Source} */
      NINCADA = 290,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ninjask_(Pokémon) | Source} */
      NINJASK = 291,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shedinja_(Pokémon) | Source} */
      SHEDINJA = 292,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Whismur_(Pokémon) | Source} */
      WHISMUR = 293,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Loudred_(Pokémon) | Source} */
      LOUDRED = 294,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Exploud_(Pokémon) | Source} */
      EXPLOUD = 295,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Makuhita_(Pokémon) | Source} */
      MAKUHITA = 296,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hariyama_(Pokémon) | Source} */
      HARIYAMA = 297,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Azurill_(Pokémon) | Source} */
      AZURILL = 298,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nosepass_(Pokémon) | Source} */
      NOSEPASS = 299,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skitty_(Pokémon) | Source} */
      SKITTY = 300,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Delcatty_(Pokémon) | Source} */
      DELCATTY = 301,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sableye_(Pokémon) | Source} */
      SABLEYE = 302,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mawile_(Pokémon) | Source} */
      MAWILE = 303,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aron_(Pokémon) | Source} */
      ARON = 304,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lairon_(Pokémon) | Source} */
      LAIRON = 305,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aggron_(Pokémon) | Source} */
      AGGRON = 306,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meditite_(Pokémon) | Source} */
      MEDITITE = 307,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Medicham_(Pokémon) | Source} */
      MEDICHAM = 308,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electrike_(Pokémon) | Source} */
      ELECTRIKE = 309,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Manectric_(Pokémon) | Source} */
      MANECTRIC = 310,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Plusle_(Pokémon) | Source} */
      PLUSLE = 311,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Minun_(Pokémon) | Source} */
      MINUN = 312,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Volbeat_(Pokémon) | Source} */
      VOLBEAT = 313,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Illumise_(Pokémon) | Source} */
      ILLUMISE = 314,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Roselia_(Pokémon) | Source} */
      ROSELIA = 315,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gulpin_(Pokémon) | Source} */
      GULPIN = 316,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swalot_(Pokémon) | Source} */
      SWALOT = 317,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Carvanha_(Pokémon) | Source} */
      CARVANHA = 318,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sharpedo_(Pokémon) | Source} */
      SHARPEDO = 319,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wailmer_(Pokémon) | Source} */
      WAILMER = 320,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wailord_(Pokémon) | Source} */
      WAILORD = 321,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Numel_(Pokémon) | Source} */
      NUMEL = 322,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Camerupt_(Pokémon) | Source} */
      CAMERUPT = 323,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Torkoal_(Pokémon) | Source} */
      TORKOAL = 324,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spoink_(Pokémon) | Source} */
      SPOINK = 325,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grumpig_(Pokémon) | Source} */
      GRUMPIG = 326,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spinda_(Pokémon) | Source} */
      SPINDA = 327,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trapinch_(Pokémon) | Source} */
      TRAPINCH = 328,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vibrava_(Pokémon) | Source} */
      VIBRAVA = 329,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flygon_(Pokémon) | Source} */
      FLYGON = 330,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cacnea_(Pokémon) | Source} */
      CACNEA = 331,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cacturne_(Pokémon) | Source} */
      CACTURNE = 332,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swablu_(Pokémon) | Source} */
      SWABLU = 333,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Altaria_(Pokémon) | Source} */
      ALTARIA = 334,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zangoose_(Pokémon) | Source} */
      ZANGOOSE = 335,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Seviper_(Pokémon) | Source} */
      SEVIPER = 336,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lunatone_(Pokémon) | Source} */
      LUNATONE = 337,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Solrock_(Pokémon) | Source} */
      SOLROCK = 338,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Barboach_(Pokémon) | Source} */
      BARBOACH = 339,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Whiscash_(Pokémon) | Source} */
      WHISCASH = 340,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Corphish_(Pokémon) | Source} */
      CORPHISH = 341,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crawdaunt_(Pokémon) | Source} */
      CRAWDAUNT = 342,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Baltoy_(Pokémon) | Source} */
      BALTOY = 343,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Claydol_(Pokémon) | Source} */
      CLAYDOL = 344,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lileep_(Pokémon) | Source} */
      LILEEP = 345,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cradily_(Pokémon) | Source} */
      CRADILY = 346,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Anorith_(Pokémon) | Source} */
      ANORITH = 347,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Armaldo_(Pokémon) | Source} */
      ARMALDO = 348,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Feebas_(Pokémon) | Source} */
      FEEBAS = 349,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Milotic_(Pokémon) | Source} */
      MILOTIC = 350,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Castform_(Pokémon) | Source} */
      CASTFORM = 351,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kecleon_(Pokémon) | Source} */
      KECLEON = 352,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shuppet_(Pokémon) | Source} */
      SHUPPET = 353,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Banette_(Pokémon) | Source} */
      BANETTE = 354,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Duskull_(Pokémon) | Source} */
      DUSKULL = 355,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dusclops_(Pokémon) | Source} */
      DUSCLOPS = 356,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tropius_(Pokémon) | Source} */
      TROPIUS = 357,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chimecho_(Pokémon) | Source} */
      CHIMECHO = 358,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Absol_(Pokémon) | Source} */
      ABSOL = 359,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wynaut_(Pokémon) | Source} */
      WYNAUT = 360,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snorunt_(Pokémon) | Source} */
      SNORUNT = 361,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glalie_(Pokémon) | Source} */
      GLALIE = 362,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spheal_(Pokémon) | Source} */
      SPHEAL = 363,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sealeo_(Pokémon) | Source} */
      SEALEO = 364,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Walrein_(Pokémon) | Source} */
      WALREIN = 365,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clamperl_(Pokémon) | Source} */
      CLAMPERL = 366,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Huntail_(Pokémon) | Source} */
      HUNTAIL = 367,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gorebyss_(Pokémon) | Source} */
      GOREBYSS = 368,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Relicanth_(Pokémon) | Source} */
      RELICANTH = 369,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Luvdisc_(Pokémon) | Source} */
      LUVDISC = 370,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bagon_(Pokémon) | Source} */
      BAGON = 371,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shelgon_(Pokémon) | Source} */
      SHELGON = 372,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Salamence_(Pokémon) | Source} */
      SALAMENCE = 373,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Beldum_(Pokémon) | Source} */
      BELDUM = 374,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Metang_(Pokémon) | Source} */
      METANG = 375,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Metagross_(Pokémon) | Source} */
      METAGROSS = 376,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Regirock_(Pokémon) | Source} */
      REGIROCK = 377,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Regice_(Pokémon) | Source} */
      REGICE = 378,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Registeel_(Pokémon) | Source} */
      REGISTEEL = 379,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Latias_(Pokémon) | Source} */
      LATIAS = 380,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Latios_(Pokémon) | Source} */
      LATIOS = 381,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kyogre_(Pokémon) | Source} */
      KYOGRE = 382,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Groudon_(Pokémon) | Source} */
      GROUDON = 383,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rayquaza_(Pokémon) | Source} */
      RAYQUAZA = 384,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jirachi_(Pokémon) | Source} */
      JIRACHI = 385,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Deoxys_(Pokémon) | Source} */
      DEOXYS = 386,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Turtwig_(Pokémon) | Source} */
      TURTWIG = 387,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grotle_(Pokémon) | Source} */
      GROTLE = 388,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Torterra_(Pokémon) | Source} */
      TORTERRA = 389,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chimchar_(Pokémon) | Source} */
      CHIMCHAR = 390,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Monferno_(Pokémon) | Source} */
      MONFERNO = 391,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Infernape_(Pokémon) | Source} */
      INFERNAPE = 392,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Piplup_(Pokémon) | Source} */
      PIPLUP = 393,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Prinplup_(Pokémon) | Source} */
      PRINPLUP = 394,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Empoleon_(Pokémon) | Source} */
      EMPOLEON = 395,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Starly_(Pokémon) | Source} */
      STARLY = 396,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Staravia_(Pokémon) | Source} */
      STARAVIA = 397,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Staraptor_(Pokémon) | Source} */
      STARAPTOR = 398,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bidoof_(Pokémon) | Source} */
      BIDOOF = 399,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bibarel_(Pokémon) | Source} */
      BIBAREL = 400,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kricketot_(Pokémon) | Source} */
      KRICKETOT = 401,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kricketune_(Pokémon) | Source} */
      KRICKETUNE = 402,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shinx_(Pokémon) | Source} */
      SHINX = 403,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Luxio_(Pokémon) | Source} */
      LUXIO = 404,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Luxray_(Pokémon) | Source} */
      LUXRAY = 405,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Budew_(Pokémon) | Source} */
      BUDEW = 406,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Roserade_(Pokémon) | Source} */
      ROSERADE = 407,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cranidos_(Pokémon) | Source} */
      CRANIDOS = 408,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rampardos_(Pokémon) | Source} */
      RAMPARDOS = 409,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shieldon_(Pokémon) | Source} */
      SHIELDON = 410,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bastiodon_(Pokémon) | Source} */
      BASTIODON = 411,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Burmy_(Pokémon) | Source} */
      BURMY = 412,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wormadam_(Pokémon) | Source} */
      WORMADAM = 413,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mothim_(Pokémon) | Source} */
      MOTHIM = 414,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Combee_(Pokémon) | Source} */
      COMBEE = 415,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vespiquen_(Pokémon) | Source} */
      VESPIQUEN = 416,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pachirisu_(Pokémon) | Source} */
      PACHIRISU = 417,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Buizel_(Pokémon) | Source} */
      BUIZEL = 418,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Floatzel_(Pokémon) | Source} */
      FLOATZEL = 419,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cherubi_(Pokémon) | Source} */
      CHERUBI = 420,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cherrim_(Pokémon) | Source} */
      CHERRIM = 421,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shellos_(Pokémon) | Source} */
      SHELLOS = 422,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gastrodon_(Pokémon) | Source} */
      GASTRODON = 423,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ambipom_(Pokémon) | Source} */
      AMBIPOM = 424,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drifloon_(Pokémon) | Source} */
      DRIFLOON = 425,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drifblim_(Pokémon) | Source} */
      DRIFBLIM = 426,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Buneary_(Pokémon) | Source} */
      BUNEARY = 427,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lopunny_(Pokémon) | Source} */
      LOPUNNY = 428,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mismagius_(Pokémon) | Source} */
      MISMAGIUS = 429,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Honchkrow_(Pokémon) | Source} */
      HONCHKROW = 430,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glameow_(Pokémon) | Source} */
      GLAMEOW = 431,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Purugly_(Pokémon) | Source} */
      PURUGLY = 432,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chingling_(Pokémon) | Source} */
      CHINGLING = 433,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stunky_(Pokémon) | Source} */
      STUNKY = 434,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skuntank_(Pokémon) | Source} */
      SKUNTANK = 435,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bronzor_(Pokémon) | Source} */
      BRONZOR = 436,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bronzong_(Pokémon) | Source} */
      BRONZONG = 437,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bonsly_(Pokémon) | Source} */
      BONSLY = 438,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mime_Jr_(Pokémon) | Source} */
      MIME_JR = 439,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Happiny_(Pokémon) | Source} */
      HAPPINY = 440,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chatot_(Pokémon) | Source} */
      CHATOT = 441,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spiritomb_(Pokémon) | Source} */
      SPIRITOMB = 442,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gible_(Pokémon) | Source} */
      GIBLE = 443,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gabite_(Pokémon) | Source} */
      GABITE = 444,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Garchomp_(Pokémon) | Source} */
      GARCHOMP = 445,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Munchlax_(Pokémon) | Source} */
      MUNCHLAX = 446,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Riolu_(Pokémon) | Source} */
      RIOLU = 447,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lucario_(Pokémon) | Source} */
      LUCARIO = 448,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hippopotas_(Pokémon) | Source} */
      HIPPOPOTAS = 449,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hippowdon_(Pokémon) | Source} */
      HIPPOWDON = 450,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skorupi_(Pokémon) | Source} */
      SKORUPI = 451,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drapion_(Pokémon) | Source} */
      DRAPION = 452,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Croagunk_(Pokémon) | Source} */
      CROAGUNK = 453,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toxicroak_(Pokémon) | Source} */
      TOXICROAK = 454,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Carnivine_(Pokémon) | Source} */
      CARNIVINE = 455,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Finneon_(Pokémon) | Source} */
      FINNEON = 456,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lumineon_(Pokémon) | Source} */
      LUMINEON = 457,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mantyke_(Pokémon) | Source} */
      MANTYKE = 458,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snover_(Pokémon) | Source} */
      SNOVER = 459,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Abomasnow_(Pokémon) | Source} */
      ABOMASNOW = 460,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Weavile_(Pokémon) | Source} */
      WEAVILE = 461,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magnezone_(Pokémon) | Source} */
      MAGNEZONE = 462,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lickilicky_(Pokémon) | Source} */
      LICKILICKY = 463,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rhyperior_(Pokémon) | Source} */
      RHYPERIOR = 464,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tangrowth_(Pokémon) | Source} */
      TANGROWTH = 465,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electivire_(Pokémon) | Source} */
      ELECTIVIRE = 466,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magmortar_(Pokémon) | Source} */
      MAGMORTAR = 467,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Togekiss_(Pokémon) | Source} */
      TOGEKISS = 468,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Yanmega_(Pokémon) | Source} */
      YANMEGA = 469,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Leafeon_(Pokémon) | Source} */
      LEAFEON = 470,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glaceon_(Pokémon) | Source} */
      GLACEON = 471,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gliscor_(Pokémon) | Source} */
      GLISCOR = 472,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mamoswine_(Pokémon) | Source} */
      MAMOSWINE = 473,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Porygon_Z_(Pokémon) | Source} */
      PORYGON_Z = 474,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gallade_(Pokémon) | Source} */
      GALLADE = 475,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Probopass_(Pokémon) | Source} */
      PROBOPASS = 476,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dusknoir_(Pokémon) | Source} */
      DUSKNOIR = 477,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Froslass_(Pokémon) | Source} */
      FROSLASS = 478,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rotom_(Pokémon) | Source} */
      ROTOM = 479,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Uxie_(Pokémon) | Source} */
      UXIE = 480,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mesprit_(Pokémon) | Source} */
      MESPRIT = 481,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Azelf_(Pokémon) | Source} */
      AZELF = 482,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dialga_(Pokémon) | Source} */
      DIALGA = 483,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Palkia_(Pokémon) | Source} */
      PALKIA = 484,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heatran_(Pokémon) | Source} */
      HEATRAN = 485,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Regigigas_(Pokémon) | Source} */
      REGIGIGAS = 486,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Giratina_(Pokémon) | Source} */
      GIRATINA = 487,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cresselia_(Pokémon) | Source} */
      CRESSELIA = 488,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Phione_(Pokémon) | Source} */
      PHIONE = 489,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Manaphy_(Pokémon) | Source} */
      MANAPHY = 490,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Darkrai_(Pokémon) | Source} */
      DARKRAI = 491,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shaymin_(Pokémon) | Source} */
      SHAYMIN = 492,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arceus_(Pokémon) | Source} */
      ARCEUS = 493,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Victini_(Pokémon) | Source} */
      VICTINI = 494,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snivy_(Pokémon) | Source} */
      SNIVY = 495,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Servine_(Pokémon) | Source} */
      SERVINE = 496,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Serperior_(Pokémon) | Source} */
      SERPERIOR = 497,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tepig_(Pokémon) | Source} */
      TEPIG = 498,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pignite_(Pokémon) | Source} */
      PIGNITE = 499,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Emboar_(Pokémon) | Source} */
      EMBOAR = 500,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Oshawott_(Pokémon) | Source} */
      OSHAWOTT = 501,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dewott_(Pokémon) | Source} */
      DEWOTT = 502,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Samurott_(Pokémon) | Source} */
      SAMUROTT = 503,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Patrat_(Pokémon) | Source} */
      PATRAT = 504,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Watchog_(Pokémon) | Source} */
      WATCHOG = 505,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lillipup_(Pokémon) | Source} */
      LILLIPUP = 506,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Herdier_(Pokémon) | Source} */
      HERDIER = 507,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stoutland_(Pokémon) | Source} */
      STOUTLAND = 508,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Purrloin_(Pokémon) | Source} */
      PURRLOIN = 509,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Liepard_(Pokémon) | Source} */
      LIEPARD = 510,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pansage_(Pokémon) | Source} */
      PANSAGE = 511,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Simisage_(Pokémon) | Source} */
      SIMISAGE = 512,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pansear_(Pokémon) | Source} */
      PANSEAR = 513,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Simisear_(Pokémon) | Source} */
      SIMISEAR = 514,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Panpour_(Pokémon) | Source} */
      PANPOUR = 515,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Simipour_(Pokémon) | Source} */
      SIMIPOUR = 516,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Munna_(Pokémon) | Source} */
      MUNNA = 517,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Musharna_(Pokémon) | Source} */
      MUSHARNA = 518,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pidove_(Pokémon) | Source} */
      PIDOVE = 519,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tranquill_(Pokémon) | Source} */
      TRANQUILL = 520,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Unfezant_(Pokémon) | Source} */
      UNFEZANT = 521,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blitzle_(Pokémon) | Source} */
      BLITZLE = 522,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zebstrika_(Pokémon) | Source} */
      ZEBSTRIKA = 523,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Roggenrola_(Pokémon) | Source} */
      ROGGENROLA = 524,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Boldore_(Pokémon) | Source} */
      BOLDORE = 525,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gigalith_(Pokémon) | Source} */
      GIGALITH = 526,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Woobat_(Pokémon) | Source} */
      WOOBAT = 527,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swoobat_(Pokémon) | Source} */
      SWOOBAT = 528,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drilbur_(Pokémon) | Source} */
      DRILBUR = 529,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Excadrill_(Pokémon) | Source} */
      EXCADRILL = 530,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Audino_(Pokémon) | Source} */
      AUDINO = 531,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Timburr_(Pokémon) | Source} */
      TIMBURR = 532,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gurdurr_(Pokémon) | Source} */
      GURDURR = 533,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Conkeldurr_(Pokémon) | Source} */
      CONKELDURR = 534,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tympole_(Pokémon) | Source} */
      TYMPOLE = 535,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Palpitoad_(Pokémon) | Source} */
      PALPITOAD = 536,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Seismitoad_(Pokémon) | Source} */
      SEISMITOAD = 537,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Throh_(Pokémon) | Source} */
      THROH = 538,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sawk_(Pokémon) | Source} */
      SAWK = 539,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sewaddle_(Pokémon) | Source} */
      SEWADDLE = 540,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swadloon_(Pokémon) | Source} */
      SWADLOON = 541,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Leavanny_(Pokémon) | Source} */
      LEAVANNY = 542,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Venipede_(Pokémon) | Source} */
      VENIPEDE = 543,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Whirlipede_(Pokémon) | Source} */
      WHIRLIPEDE = 544,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scolipede_(Pokémon) | Source} */
      SCOLIPEDE = 545,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cottonee_(Pokémon) | Source} */
      COTTONEE = 546,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Whimsicott_(Pokémon) | Source} */
      WHIMSICOTT = 547,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Petilil_(Pokémon) | Source} */
      PETILIL = 548,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lilligant_(Pokémon) | Source} */
      LILLIGANT = 549,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Basculin_(Pokémon) | Source} */
      BASCULIN = 550,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sandile_(Pokémon) | Source} */
      SANDILE = 551,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Krokorok_(Pokémon) | Source} */
      KROKOROK = 552,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Krookodile_(Pokémon) | Source} */
      KROOKODILE = 553,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Darumaka_(Pokémon) | Source} */
      DARUMAKA = 554,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Darmanitan_(Pokémon) | Source} */
      DARMANITAN = 555,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Maractus_(Pokémon) | Source} */
      MARACTUS = 556,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dwebble_(Pokémon) | Source} */
      DWEBBLE = 557,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crustle_(Pokémon) | Source} */
      CRUSTLE = 558,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scraggy_(Pokémon) | Source} */
      SCRAGGY = 559,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scrafty_(Pokémon) | Source} */
      SCRAFTY = 560,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sigilyph_(Pokémon) | Source} */
      SIGILYPH = 561,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Yamask_(Pokémon) | Source} */
      YAMASK = 562,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cofagrigus_(Pokémon) | Source} */
      COFAGRIGUS = 563,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tirtouga_(Pokémon) | Source} */
      TIRTOUGA = 564,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Carracosta_(Pokémon) | Source} */
      CARRACOSTA = 565,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Archen_(Pokémon) | Source} */
      ARCHEN = 566,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Archeops_(Pokémon) | Source} */
      ARCHEOPS = 567,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trubbish_(Pokémon) | Source} */
      TRUBBISH = 568,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Garbodor_(Pokémon) | Source} */
      GARBODOR = 569,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zorua_(Pokémon) | Source} */
      ZORUA = 570,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zoroark_(Pokémon) | Source} */
      ZOROARK = 571,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Minccino_(Pokémon) | Source} */
      MINCCINO = 572,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cinccino_(Pokémon) | Source} */
      CINCCINO = 573,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gothita_(Pokémon) | Source} */
      GOTHITA = 574,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gothorita_(Pokémon) | Source} */
      GOTHORITA = 575,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gothitelle_(Pokémon) | Source} */
      GOTHITELLE = 576,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Solosis_(Pokémon) | Source} */
      SOLOSIS = 577,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Duosion_(Pokémon) | Source} */
      DUOSION = 578,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Reuniclus_(Pokémon) | Source} */
      REUNICLUS = 579,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ducklett_(Pokémon) | Source} */
      DUCKLETT = 580,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swanna_(Pokémon) | Source} */
      SWANNA = 581,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vanillite_(Pokémon) | Source} */
      VANILLITE = 582,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vanillish_(Pokémon) | Source} */
      VANILLISH = 583,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vanilluxe_(Pokémon) | Source} */
      VANILLUXE = 584,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Deerling_(Pokémon) | Source} */
      DEERLING = 585,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sawsbuck_(Pokémon) | Source} */
      SAWSBUCK = 586,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Emolga_(Pokémon) | Source} */
      EMOLGA = 587,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Karrablast_(Pokémon) | Source} */
      KARRABLAST = 588,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Escavalier_(Pokémon) | Source} */
      ESCAVALIER = 589,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Foongus_(Pokémon) | Source} */
      FOONGUS = 590,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Amoonguss_(Pokémon) | Source} */
      AMOONGUSS = 591,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Frillish_(Pokémon) | Source} */
      FRILLISH = 592,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jellicent_(Pokémon) | Source} */
      JELLICENT = 593,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Alomomola_(Pokémon) | Source} */
      ALOMOMOLA = 594,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Joltik_(Pokémon) | Source} */
      JOLTIK = 595,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Galvantula_(Pokémon) | Source} */
      GALVANTULA = 596,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ferroseed_(Pokémon) | Source} */
      FERROSEED = 597,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ferrothorn_(Pokémon) | Source} */
      FERROTHORN = 598,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Klink_(Pokémon) | Source} */
      KLINK = 599,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Klang_(Pokémon) | Source} */
      KLANG = 600,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Klinklang_(Pokémon) | Source} */
      KLINKLANG = 601,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tynamo_(Pokémon) | Source} */
      TYNAMO = 602,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Eelektrik_(Pokémon) | Source} */
      EELEKTRIK = 603,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Eelektross_(Pokémon) | Source} */
      EELEKTROSS = 604,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Elgyem_(Pokémon) | Source} */
      ELGYEM = 605,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Beheeyem_(Pokémon) | Source} */
      BEHEEYEM = 606,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Litwick_(Pokémon) | Source} */
      LITWICK = 607,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lampent_(Pokémon) | Source} */
      LAMPENT = 608,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chandelure_(Pokémon) | Source} */
      CHANDELURE = 609,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Axew_(Pokémon) | Source} */
      AXEW = 610,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fraxure_(Pokémon) | Source} */
      FRAXURE = 611,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Haxorus_(Pokémon) | Source} */
      HAXORUS = 612,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cubchoo_(Pokémon) | Source} */
      CUBCHOO = 613,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Beartic_(Pokémon) | Source} */
      BEARTIC = 614,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cryogonal_(Pokémon) | Source} */
      CRYOGONAL = 615,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shelmet_(Pokémon) | Source} */
      SHELMET = 616,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Accelgor_(Pokémon) | Source} */
      ACCELGOR = 617,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stunfisk_(Pokémon) | Source} */
      STUNFISK = 618,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mienfoo_(Pokémon) | Source} */
      MIENFOO = 619,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mienshao_(Pokémon) | Source} */
      MIENSHAO = 620,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Druddigon_(Pokémon) | Source} */
      DRUDDIGON = 621,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Golett_(Pokémon) | Source} */
      GOLETT = 622,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Golurk_(Pokémon) | Source} */
      GOLURK = 623,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pawniard_(Pokémon) | Source} */
      PAWNIARD = 624,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bisharp_(Pokémon) | Source} */
      BISHARP = 625,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bouffalant_(Pokémon) | Source} */
      BOUFFALANT = 626,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rufflet_(Pokémon) | Source} */
      RUFFLET = 627,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Braviary_(Pokémon) | Source} */
      BRAVIARY = 628,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vullaby_(Pokémon) | Source} */
      VULLABY = 629,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mandibuzz_(Pokémon) | Source} */
      MANDIBUZZ = 630,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heatmor_(Pokémon) | Source} */
      HEATMOR = 631,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Durant_(Pokémon) | Source} */
      DURANT = 632,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Deino_(Pokémon) | Source} */
      DEINO = 633,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zweilous_(Pokémon) | Source} */
      ZWEILOUS = 634,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hydreigon_(Pokémon) | Source} */
      HYDREIGON = 635,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Larvesta_(Pokémon) | Source} */
      LARVESTA = 636,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Volcarona_(Pokémon) | Source} */
      VOLCARONA = 637,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cobalion_(Pokémon) | Source} */
      COBALION = 638,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Terrakion_(Pokémon) | Source} */
      TERRAKION = 639,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Virizion_(Pokémon) | Source} */
      VIRIZION = 640,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tornadus_(Pokémon) | Source} */
      TORNADUS = 641,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thundurus_(Pokémon) | Source} */
      THUNDURUS = 642,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Reshiram_(Pokémon) | Source} */
      RESHIRAM = 643,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zekrom_(Pokémon) | Source} */
      ZEKROM = 644,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Landorus_(Pokémon) | Source} */
      LANDORUS = 645,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kyurem_(Pokémon) | Source} */
      KYUREM = 646,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Keldeo_(Pokémon) | Source} */
      KELDEO = 647,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meloetta_(Pokémon) | Source} */
      MELOETTA = 648,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Genesect_(Pokémon) | Source} */
      GENESECT = 649,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chespin_(Pokémon) | Source} */
      CHESPIN = 650,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quilladin_(Pokémon) | Source} */
      QUILLADIN = 651,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chesnaught_(Pokémon) | Source} */
      CHESNAUGHT = 652,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fennekin_(Pokémon) | Source} */
      FENNEKIN = 653,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Braixen_(Pokémon) | Source} */
      BRAIXEN = 654,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Delphox_(Pokémon) | Source} */
      DELPHOX = 655,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Froakie_(Pokémon) | Source} */
      FROAKIE = 656,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Frogadier_(Pokémon) | Source} */
      FROGADIER = 657,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Greninja_(Pokémon) | Source} */
      GRENINJA = 658,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bunnelby_(Pokémon) | Source} */
      BUNNELBY = 659,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Diggersby_(Pokémon) | Source} */
      DIGGERSBY = 660,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fletchling_(Pokémon) | Source} */
      FLETCHLING = 661,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fletchinder_(Pokémon) | Source} */
      FLETCHINDER = 662,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Talonflame_(Pokémon) | Source} */
      TALONFLAME = 663,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scatterbug_(Pokémon) | Source} */
      SCATTERBUG = 664,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spewpa_(Pokémon) | Source} */
      SPEWPA = 665,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vivillon_(Pokémon) | Source} */
      VIVILLON = 666,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Litleo_(Pokémon) | Source} */
      LITLEO = 667,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pyroar_(Pokémon) | Source} */
      PYROAR = 668,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flabebe_(Pokémon) | Source} */
      FLABEBE = 669,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Floette_(Pokémon) | Source} */
      FLOETTE = 670,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Florges_(Pokémon) | Source} */
      FLORGES = 671,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skiddo_(Pokémon) | Source} */
      SKIDDO = 672,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gogoat_(Pokémon) | Source} */
      GOGOAT = 673,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pancham_(Pokémon) | Source} */
      PANCHAM = 674,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pangoro_(Pokémon) | Source} */
      PANGORO = 675,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Furfrou_(Pokémon) | Source} */
      FURFROU = 676,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Espurr_(Pokémon) | Source} */
      ESPURR = 677,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meowstic_(Pokémon) | Source} */
      MEOWSTIC = 678,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Honedge_(Pokémon) | Source} */
      HONEDGE = 679,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Doublade_(Pokémon) | Source} */
      DOUBLADE = 680,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aegislash_(Pokémon) | Source} */
      AEGISLASH = 681,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spritzee_(Pokémon) | Source} */
      SPRITZEE = 682,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aromatisse_(Pokémon) | Source} */
      AROMATISSE = 683,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swirlix_(Pokémon) | Source} */
      SWIRLIX = 684,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slurpuff_(Pokémon) | Source} */
      SLURPUFF = 685,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Inkay_(Pokémon) | Source} */
      INKAY = 686,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Malamar_(Pokémon) | Source} */
      MALAMAR = 687,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Binacle_(Pokémon) | Source} */
      BINACLE = 688,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Barbaracle_(Pokémon) | Source} */
      BARBARACLE = 689,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skrelp_(Pokémon) | Source} */
      SKRELP = 690,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragalge_(Pokémon) | Source} */
      DRAGALGE = 691,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clauncher_(Pokémon) | Source} */
      CLAUNCHER = 692,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clawitzer_(Pokémon) | Source} */
      CLAWITZER = 693,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Helioptile_(Pokémon) | Source} */
      HELIOPTILE = 694,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heliolisk_(Pokémon) | Source} */
      HELIOLISK = 695,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tyrunt_(Pokémon) | Source} */
      TYRUNT = 696,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tyrantrum_(Pokémon) | Source} */
      TYRANTRUM = 697,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Amaura_(Pokémon) | Source} */
      AMAURA = 698,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aurorus_(Pokémon) | Source} */
      AURORUS = 699,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sylveon_(Pokémon) | Source} */
      SYLVEON = 700,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hawlucha_(Pokémon) | Source} */
      HAWLUCHA = 701,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dedenne_(Pokémon) | Source} */
      DEDENNE = 702,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Carbink_(Pokémon) | Source} */
      CARBINK = 703,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Goomy_(Pokémon) | Source} */
      GOOMY = 704,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sliggoo_(Pokémon) | Source} */
      SLIGGOO = 705,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Goodra_(Pokémon) | Source} */
      GOODRA = 706,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Klefki_(Pokémon) | Source} */
      KLEFKI = 707,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Phantump_(Pokémon) | Source} */
      PHANTUMP = 708,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trevenant_(Pokémon) | Source} */
      TREVENANT = 709,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pumpkaboo_(Pokémon) | Source} */
      PUMPKABOO = 710,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gourgeist_(Pokémon) | Source} */
      GOURGEIST = 711,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bergmite_(Pokémon) | Source} */
      BERGMITE = 712,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Avalugg_(Pokémon) | Source} */
      AVALUGG = 713,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Noibat_(Pokémon) | Source} */
      NOIBAT = 714,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Noivern_(Pokémon) | Source} */
      NOIVERN = 715,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Xerneas_(Pokémon) | Source} */
      XERNEAS = 716,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Yveltal_(Pokémon) | Source} */
      YVELTAL = 717,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zygarde_(Pokémon) | Source} */
      ZYGARDE = 718,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Diancie_(Pokémon) | Source} */
      DIANCIE = 719,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hoopa_(Pokémon) | Source} */
      HOOPA = 720,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Volcanion_(Pokémon) | Source} */
      VOLCANION = 721,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rowlet_(Pokémon) | Source} */
      ROWLET = 722,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dartrix_(Pokémon) | Source} */
      DARTRIX = 723,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Decidueye_(Pokémon) | Source} */
      DECIDUEYE = 724,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Litten_(Pokémon) | Source} */
      LITTEN = 725,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Torracat_(Pokémon) | Source} */
      TORRACAT = 726,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Incineroar_(Pokémon) | Source} */
      INCINEROAR = 727,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Popplio_(Pokémon) | Source} */
      POPPLIO = 728,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Brionne_(Pokémon) | Source} */
      BRIONNE = 729,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Primarina_(Pokémon) | Source} */
      PRIMARINA = 730,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pikipek_(Pokémon) | Source} */
      PIKIPEK = 731,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trumbeak_(Pokémon) | Source} */
      TRUMBEAK = 732,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toucannon_(Pokémon) | Source} */
      TOUCANNON = 733,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Yungoos_(Pokémon) | Source} */
      YUNGOOS = 734,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gumshoos_(Pokémon) | Source} */
      GUMSHOOS = 735,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grubbin_(Pokémon) | Source} */
      GRUBBIN = 736,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Charjabug_(Pokémon) | Source} */
      CHARJABUG = 737,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vikavolt_(Pokémon) | Source} */
      VIKAVOLT = 738,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crabrawler_(Pokémon) | Source} */
      CRABRAWLER = 739,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crabominable_(Pokémon) | Source} */
      CRABOMINABLE = 740,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Oricorio_(Pokémon) | Source} */
      ORICORIO = 741,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cutiefly_(Pokémon) | Source} */
      CUTIEFLY = 742,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ribombee_(Pokémon) | Source} */
      RIBOMBEE = 743,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rockruff_(Pokémon) | Source} */
      ROCKRUFF = 744,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lycanroc_(Pokémon) | Source} */
      LYCANROC = 745,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wishiwashi_(Pokémon) | Source} */
      WISHIWASHI = 746,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mareanie_(Pokémon) | Source} */
      MAREANIE = 747,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toxapex_(Pokémon) | Source} */
      TOXAPEX = 748,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mudbray_(Pokémon) | Source} */
      MUDBRAY = 749,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mudsdale_(Pokémon) | Source} */
      MUDSDALE = 750,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dewpider_(Pokémon) | Source} */
      DEWPIDER = 751,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Araquanid_(Pokémon) | Source} */
      ARAQUANID = 752,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fomantis_(Pokémon) | Source} */
      FOMANTIS = 753,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lurantis_(Pokémon) | Source} */
      LURANTIS = 754,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Morelull_(Pokémon) | Source} */
      MORELULL = 755,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shiinotic_(Pokémon) | Source} */
      SHIINOTIC = 756,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Salandit_(Pokémon) | Source} */
      SALANDIT = 757,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Salazzle_(Pokémon) | Source} */
      SALAZZLE = 758,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stufful_(Pokémon) | Source} */
      STUFFUL = 759,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bewear_(Pokémon) | Source} */
      BEWEAR = 760,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bounsweet_(Pokémon) | Source} */
      BOUNSWEET = 761,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steenee_(Pokémon) | Source} */
      STEENEE = 762,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tsareena_(Pokémon) | Source} */
      TSAREENA = 763,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Comfey_(Pokémon) | Source} */
      COMFEY = 764,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Oranguru_(Pokémon) | Source} */
      ORANGURU = 765,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Passimian_(Pokémon) | Source} */
      PASSIMIAN = 766,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wimpod_(Pokémon) | Source} */
      WIMPOD = 767,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Golisopod_(Pokémon) | Source} */
      GOLISOPOD = 768,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sandygast_(Pokémon) | Source} */
      SANDYGAST = 769,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Palossand_(Pokémon) | Source} */
      PALOSSAND = 770,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pyukumuku_(Pokémon) | Source} */
      PYUKUMUKU = 771,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Type_Null_(Pokémon) | Source} */
      TYPE_NULL = 772,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Silvally_(Pokémon) | Source} */
      SILVALLY = 773,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Minior_(Pokémon) | Source} */
      MINIOR = 774,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Komala_(Pokémon) | Source} */
      KOMALA = 775,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Turtonator_(Pokémon) | Source} */
      TURTONATOR = 776,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Togedemaru_(Pokémon) | Source} */
      TOGEDEMARU = 777,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mimikyu_(Pokémon) | Source} */
      MIMIKYU = 778,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bruxish_(Pokémon) | Source} */
      BRUXISH = 779,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drampa_(Pokémon) | Source} */
      DRAMPA = 780,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dhelmise_(Pokémon) | Source} */
      DHELMISE = 781,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jangmo_O_(Pokémon) | Source} */
      JANGMO_O = 782,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hakamo_O_(Pokémon) | Source} */
      HAKAMO_O = 783,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kommo_O_(Pokémon) | Source} */
      KOMMO_O = 784,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tapu_Koko_(Pokémon) | Source} */
      TAPU_KOKO = 785,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tapu_Lele_(Pokémon) | Source} */
      TAPU_LELE = 786,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tapu_Bulu_(Pokémon) | Source} */
      TAPU_BULU = 787,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tapu_Fini_(Pokémon) | Source} */
      TAPU_FINI = 788,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cosmog_(Pokémon) | Source} */
      COSMOG = 789,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cosmoem_(Pokémon) | Source} */
      COSMOEM = 790,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Solgaleo_(Pokémon) | Source} */
      SOLGALEO = 791,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lunala_(Pokémon) | Source} */
      LUNALA = 792,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nihilego_(Pokémon) | Source} */
      NIHILEGO = 793,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Buzzwole_(Pokémon) | Source} */
      BUZZWOLE = 794,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pheromosa_(Pokémon) | Source} */
      PHEROMOSA = 795,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Xurkitree_(Pokémon) | Source} */
      XURKITREE = 796,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Celesteela_(Pokémon) | Source} */
      CELESTEELA = 797,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kartana_(Pokémon) | Source} */
      KARTANA = 798,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Guzzlord_(Pokémon) | Source} */
      GUZZLORD = 799,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Necrozma_(Pokémon) | Source} */
      NECROZMA = 800,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magearna_(Pokémon) | Source} */
      MAGEARNA = 801,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Marshadow_(Pokémon) | Source} */
      MARSHADOW = 802,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poipole_(Pokémon) | Source} */
      POIPOLE = 803,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Naganadel_(Pokémon) | Source} */
      NAGANADEL = 804,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stakataka_(Pokémon) | Source} */
      STAKATAKA = 805,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blacephalon_(Pokémon) | Source} */
      BLACEPHALON = 806,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zeraora_(Pokémon) | Source} */
      ZERAORA = 807,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meltan_(Pokémon) | Source} */
      MELTAN = 808,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Melmetal_(Pokémon) | Source} */
      MELMETAL = 809,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grookey_(Pokémon) | Source} */
      GROOKEY = 810,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thwackey_(Pokémon) | Source} */
      THWACKEY = 811,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rillaboom_(Pokémon) | Source} */
      RILLABOOM = 812,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scorbunny_(Pokémon) | Source} */
      SCORBUNNY = 813,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Raboot_(Pokémon) | Source} */
      RABOOT = 814,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cinderace_(Pokémon) | Source} */
      CINDERACE = 815,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sobble_(Pokémon) | Source} */
      SOBBLE = 816,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drizzile_(Pokémon) | Source} */
      DRIZZILE = 817,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Inteleon_(Pokémon) | Source} */
      INTELEON = 818,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skwovet_(Pokémon) | Source} */
      SKWOVET = 819,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Greedent_(Pokémon) | Source} */
      GREEDENT = 820,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rookidee_(Pokémon) | Source} */
      ROOKIDEE = 821,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Corvisquire_(Pokémon) | Source} */
      CORVISQUIRE = 822,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Corviknight_(Pokémon) | Source} */
      CORVIKNIGHT = 823,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blipbug_(Pokémon) | Source} */
      BLIPBUG = 824,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dottler_(Pokémon) | Source} */
      DOTTLER = 825,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Orbeetle_(Pokémon) | Source} */
      ORBEETLE = 826,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nickit_(Pokémon) | Source} */
      NICKIT = 827,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thievul_(Pokémon) | Source} */
      THIEVUL = 828,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gossifleur_(Pokémon) | Source} */
      GOSSIFLEUR = 829,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Eldegoss_(Pokémon) | Source} */
      ELDEGOSS = 830,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wooloo_(Pokémon) | Source} */
      WOOLOO = 831,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dubwool_(Pokémon) | Source} */
      DUBWOOL = 832,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chewtle_(Pokémon) | Source} */
      CHEWTLE = 833,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drednaw_(Pokémon) | Source} */
      DREDNAW = 834,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Yamper_(Pokémon) | Source} */
      YAMPER = 835,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Boltund_(Pokémon) | Source} */
      BOLTUND = 836,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rolycoly_(Pokémon) | Source} */
      ROLYCOLY = 837,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Carkol_(Pokémon) | Source} */
      CARKOL = 838,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Coalossal_(Pokémon) | Source} */
      COALOSSAL = 839,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Applin_(Pokémon) | Source} */
      APPLIN = 840,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flapple_(Pokémon) | Source} */
      FLAPPLE = 841,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Appletun_(Pokémon) | Source} */
      APPLETUN = 842,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Silicobra_(Pokémon) | Source} */
      SILICOBRA = 843,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sandaconda_(Pokémon) | Source} */
      SANDACONDA = 844,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cramorant_(Pokémon) | Source} */
      CRAMORANT = 845,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arrokuda_(Pokémon) | Source} */
      ARROKUDA = 846,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Barraskewda_(Pokémon) | Source} */
      BARRASKEWDA = 847,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toxel_(Pokémon) | Source} */
      TOXEL = 848,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toxtricity_(Pokémon) | Source} */
      TOXTRICITY = 849,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sizzlipede_(Pokémon) | Source} */
      SIZZLIPEDE = 850,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Centiskorch_(Pokémon) | Source} */
      CENTISKORCH = 851,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clobbopus_(Pokémon) | Source} */
      CLOBBOPUS = 852,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grapploct_(Pokémon) | Source} */
      GRAPPLOCT = 853,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sinistea_(Pokémon) | Source} */
      SINISTEA = 854,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Polteageist_(Pokémon) | Source} */
      POLTEAGEIST = 855,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hatenna_(Pokémon) | Source} */
      HATENNA = 856,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hattrem_(Pokémon) | Source} */
      HATTREM = 857,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hatterene_(Pokémon) | Source} */
      HATTERENE = 858,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Impidimp_(Pokémon) | Source} */
      IMPIDIMP = 859,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Morgrem_(Pokémon) | Source} */
      MORGREM = 860,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grimmsnarl_(Pokémon) | Source} */
      GRIMMSNARL = 861,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Obstagoon_(Pokémon) | Source} */
      OBSTAGOON = 862,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Perrserker_(Pokémon) | Source} */
      PERRSERKER = 863,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cursola_(Pokémon) | Source} */
      CURSOLA = 864,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sirfetchd_(Pokémon) | Source} */
      SIRFETCHD = 865,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mr_Rime_(Pokémon) | Source} */
      MR_RIME = 866,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Runerigus_(Pokémon) | Source} */
      RUNERIGUS = 867,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Milcery_(Pokémon) | Source} */
      MILCERY = 868,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Alcremie_(Pokémon) | Source} */
      ALCREMIE = 869,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Falinks_(Pokémon) | Source} */
      FALINKS = 870,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pincurchin_(Pokémon) | Source} */
      PINCURCHIN = 871,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snom_(Pokémon) | Source} */
      SNOM = 872,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Frosmoth_(Pokémon) | Source} */
      FROSMOTH = 873,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stonjourner_(Pokémon) | Source} */
      STONJOURNER = 874,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Eiscue_(Pokémon) | Source} */
      EISCUE = 875,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Indeedee_(Pokémon) | Source} */
      INDEEDEE = 876,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Morpeko_(Pokémon) | Source} */
      MORPEKO = 877,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cufant_(Pokémon) | Source} */
      CUFANT = 878,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Copperajah_(Pokémon) | Source} */
      COPPERAJAH = 879,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dracozolt_(Pokémon) | Source} */
      DRACOZOLT = 880,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arctozolt_(Pokémon) | Source} */
      ARCTOZOLT = 881,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dracovish_(Pokémon) | Source} */
      DRACOVISH = 882,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arctovish_(Pokémon) | Source} */
      ARCTOVISH = 883,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Duraludon_(Pokémon) | Source} */
      DURALUDON = 884,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dreepy_(Pokémon) | Source} */
      DREEPY = 885,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drakloak_(Pokémon) | Source} */
      DRAKLOAK = 886,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragapult_(Pokémon) | Source} */
      DRAGAPULT = 887,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zacian_(Pokémon) | Source} */
      ZACIAN = 888,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zamazenta_(Pokémon) | Source} */
      ZAMAZENTA = 889,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Eternatus_(Pokémon) | Source} */
      ETERNATUS = 890,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kubfu_(Pokémon) | Source} */
      KUBFU = 891,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Urshifu_(Pokémon) | Source} */
      URSHIFU = 892,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zarude_(Pokémon) | Source} */
      ZARUDE = 893,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Regieleki_(Pokémon) | Source} */
      REGIELEKI = 894,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Regidrago_(Pokémon) | Source} */
      REGIDRAGO = 895,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glastrier_(Pokémon) | Source} */
      GLASTRIER = 896,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spectrier_(Pokémon) | Source} */
      SPECTRIER = 897,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Calyrex_(Pokémon) | Source} */
      CALYREX = 898,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wyrdeer_(Pokémon) | Source} */
      WYRDEER = 899,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kleavor_(Pokémon) | Source} */
      KLEAVOR = 900,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ursaluna_(Pokémon) | Source} */
      URSALUNA = 901,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Basculegion_(Pokémon) | Source} */
      BASCULEGION = 902,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sneasler_(Pokémon) | Source} */
      SNEASLER = 903,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Overqwil_(Pokémon) | Source} */
      OVERQWIL = 904,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Enamorus_(Pokémon) | Source} */
      ENAMORUS = 905,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sprigatito_(Pokémon) | Source} */
      SPRIGATITO = 906,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Floragato_(Pokémon) | Source} */
      FLORAGATO = 907,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meowscarada_(Pokémon) | Source} */
      MEOWSCARADA = 908,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fuecoco_(Pokémon) | Source} */
      FUECOCO = 909,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crocalor_(Pokémon) | Source} */
      CROCALOR = 910,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skeledirge_(Pokémon) | Source} */
      SKELEDIRGE = 911,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quaxly_(Pokémon) | Source} */
      QUAXLY = 912,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quaxwell_(Pokémon) | Source} */
      QUAXWELL = 913,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quaquaval_(Pokémon) | Source} */
      QUAQUAVAL = 914,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lechonk_(Pokémon) | Source} */
      LECHONK = 915,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Oinkologne_(Pokémon) | Source} */
      OINKOLOGNE = 916,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tarountula_(Pokémon) | Source} */
      TAROUNTULA = 917,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spidops_(Pokémon) | Source} */
      SPIDOPS = 918,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nymble_(Pokémon) | Source} */
      NYMBLE = 919,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lokix_(Pokémon) | Source} */
      LOKIX = 920,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pawmi_(Pokémon) | Source} */
      PAWMI = 921,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pawmo_(Pokémon) | Source} */
      PAWMO = 922,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pawmot_(Pokémon) | Source} */
      PAWMOT = 923,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tandemaus_(Pokémon) | Source} */
      TANDEMAUS = 924,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Maushold_(Pokémon) | Source} */
      MAUSHOLD = 925,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fidough_(Pokémon) | Source} */
      FIDOUGH = 926,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dachsbun_(Pokémon) | Source} */
      DACHSBUN = 927,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Smoliv_(Pokémon) | Source} */
      SMOLIV = 928,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dolliv_(Pokémon) | Source} */
      DOLLIV = 929,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arboliva_(Pokémon) | Source} */
      ARBOLIVA = 930,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Squawkabilly_(Pokémon) | Source} */
      SQUAWKABILLY = 931,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nacli_(Pokémon) | Source} */
      NACLI = 932,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Naclstack_(Pokémon) | Source} */
      NACLSTACK = 933,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Garganacl_(Pokémon) | Source} */
      GARGANACL = 934,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Charcadet_(Pokémon) | Source} */
      CHARCADET = 935,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Armarouge_(Pokémon) | Source} */
      ARMAROUGE = 936,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ceruledge_(Pokémon) | Source} */
      CERULEDGE = 937,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tadbulb_(Pokémon) | Source} */
      TADBULB = 938,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bellibolt_(Pokémon) | Source} */
      BELLIBOLT = 939,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wattrel_(Pokémon) | Source} */
      WATTREL = 940,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kilowattrel_(Pokémon) | Source} */
      KILOWATTREL = 941,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Maschiff_(Pokémon) | Source} */
      MASCHIFF = 942,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mabosstiff_(Pokémon) | Source} */
      MABOSSTIFF = 943,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shroodle_(Pokémon) | Source} */
      SHROODLE = 944,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grafaiai_(Pokémon) | Source} */
      GRAFAIAI = 945,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bramblin_(Pokémon) | Source} */
      BRAMBLIN = 946,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Brambleghast_(Pokémon) | Source} */
      BRAMBLEGHAST = 947,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toedscool_(Pokémon) | Source} */
      TOEDSCOOL = 948,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toedscruel_(Pokémon) | Source} */
      TOEDSCRUEL = 949,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Klawf_(Pokémon) | Source} */
      KLAWF = 950,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Capsakid_(Pokémon) | Source} */
      CAPSAKID = 951,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scovillain_(Pokémon) | Source} */
      SCOVILLAIN = 952,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rellor_(Pokémon) | Source} */
      RELLOR = 953,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rabsca_(Pokémon) | Source} */
      RABSCA = 954,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flittle_(Pokémon) | Source} */
      FLITTLE = 955,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Espathra_(Pokémon) | Source} */
      ESPATHRA = 956,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tinkatink_(Pokémon) | Source} */
      TINKATINK = 957,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tinkatuff_(Pokémon) | Source} */
      TINKATUFF = 958,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tinkaton_(Pokémon) | Source} */
      TINKATON = 959,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wiglett_(Pokémon) | Source} */
      WIGLETT = 960,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wugtrio_(Pokémon) | Source} */
      WUGTRIO = 961,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bombirdier_(Pokémon) | Source} */
      BOMBIRDIER = 962,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Finizen_(Pokémon) | Source} */
      FINIZEN = 963,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Palafin_(Pokémon) | Source} */
      PALAFIN = 964,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Varoom_(Pokémon) | Source} */
      VAROOM = 965,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Revavroom_(Pokémon) | Source} */
      REVAVROOM = 966,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cyclizar_(Pokémon) | Source} */
      CYCLIZAR = 967,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Orthworm_(Pokémon) | Source} */
      ORTHWORM = 968,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glimmet_(Pokémon) | Source} */
      GLIMMET = 969,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glimmora_(Pokémon) | Source} */
      GLIMMORA = 970,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Greavard_(Pokémon) | Source} */
      GREAVARD = 971,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Houndstone_(Pokémon) | Source} */
      HOUNDSTONE = 972,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flamigo_(Pokémon) | Source} */
      FLAMIGO = 973,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cetoddle_(Pokémon) | Source} */
      CETODDLE = 974,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cetitan_(Pokémon) | Source} */
      CETITAN = 975,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Veluza_(Pokémon) | Source} */
      VELUZA = 976,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dondozo_(Pokémon) | Source} */
      DONDOZO = 977,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tatsugiri_(Pokémon) | Source} */
      TATSUGIRI = 978,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Annihilape_(Pokémon) | Source} */
      ANNIHILAPE = 979,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clodsire_(Pokémon) | Source} */
      CLODSIRE = 980,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Farigiraf_(Pokémon) | Source} */
      FARIGIRAF = 981,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dudunsparce_(Pokémon) | Source} */
      DUDUNSPARCE = 982,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kingambit_(Pokémon) | Source} */
      KINGAMBIT = 983,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Great_Tusk_(Pokémon) | Source} */
      GREAT_TUSK = 984,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scream_Tail_(Pokémon) | Source} */
      SCREAM_TAIL = 985,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Brute_Bonnet_(Pokémon) | Source} */
      BRUTE_BONNET = 986,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flutter_Mane_(Pokémon) | Source} */
      FLUTTER_MANE = 987,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slither_Wing_(Pokémon) | Source} */
      SLITHER_WING = 988,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sandy_Shocks_(Pokémon) | Source} */
      SANDY_SHOCKS = 989,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Treads_(Pokémon) | Source} */
      IRON_TREADS = 990,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Bundle_(Pokémon) | Source} */
      IRON_BUNDLE = 991,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Hands_(Pokémon) | Source} */
      IRON_HANDS = 992,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Jugulis_(Pokémon) | Source} */
      IRON_JUGULIS = 993,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Moth_(Pokémon) | Source} */
      IRON_MOTH = 994,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Thorns_(Pokémon) | Source} */
      IRON_THORNS = 995,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Frigibax_(Pokémon) | Source} */
      FRIGIBAX = 996,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arctibax_(Pokémon) | Source} */
      ARCTIBAX = 997,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Baxcalibur_(Pokémon) | Source} */
      BAXCALIBUR = 998,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gimmighoul_(Pokémon) | Source} */
      GIMMIGHOUL = 999,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gholdengo_(Pokémon) | Source} */
      GHOLDENGO = 1000,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wo_Chien_(Pokémon) | Source} */
      WO_CHIEN = 1001,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chien_Pao_(Pokémon) | Source} */
      CHIEN_PAO = 1002,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ting_Lu_(Pokémon) | Source} */
      TING_LU = 1003,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chi_Yu_(Pokémon) | Source} */
      CHI_YU = 1004,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Roaring_Moon_(Pokémon) | Source} */
      ROARING_MOON = 1005,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Valiant_(Pokémon) | Source} */
      IRON_VALIANT = 1006,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Koraidon_(Pokémon) | Source} */
      KORAIDON = 1007,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Miraidon_(Pokémon) | Source} */
      MIRAIDON = 1008,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Walking_Wake_(Pokémon) | Source} */
      WALKING_WAKE = 1009,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Leaves_(Pokémon) | Source} */
      IRON_LEAVES = 1010,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dipplin_(Pokémon) | Source} */
      DIPPLIN = 1011,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poltchageist_(Pokémon) | Source} */
      POLTCHAGEIST = 1012,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sinistcha_(Pokémon) | Source} */
      SINISTCHA = 1013,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Okidogi_(Pokémon) | Source} */
      OKIDOGI = 1014,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Munkidori_(Pokémon) | Source} */
      MUNKIDORI = 1015,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fezandipiti_(Pokémon) | Source} */
      FEZANDIPITI = 1016,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ogerpon_(Pokémon) | Source} */
      OGERPON = 1017,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Archaludon_(Pokémon) | Source} */
      ARCHALUDON = 1018,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hydrapple_(Pokémon) | Source} */
      HYDRAPPLE = 1019,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gouging_Fire_(Pokémon) | Source} */
      GOUGING_FIRE = 1020,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Raging_Bolt_(Pokémon) | Source} */
      RAGING_BOLT = 1021,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Boulder_(Pokémon) | Source} */
      IRON_BOULDER = 1022,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Crown_(Pokémon) | Source} */
      IRON_CROWN = 1023,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Terapagos_(Pokémon) | Source} */
      TERAPAGOS = 1024,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pecharunt_(Pokémon) | Source} */
      PECHARUNT = 1025,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rattata_(Pokémon) | Source} */
      ALOLA_RATTATA = 2019,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Raticate_(Pokémon) | Source} */
      ALOLA_RATICATE = 2020,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Raichu_(Pokémon) | Source} */
      ALOLA_RAICHU = 2026,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sandshrew_(Pokémon) | Source} */
      ALOLA_SANDSHREW = 2027,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sandslash_(Pokémon) | Source} */
      ALOLA_SANDSLASH = 2028,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vulpix_(Pokémon) | Source} */
      ALOLA_VULPIX = 2037,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ninetales_(Pokémon) | Source} */
      ALOLA_NINETALES = 2038,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Diglett_(Pokémon) | Source} */
      ALOLA_DIGLETT = 2050,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dugtrio_(Pokémon) | Source} */
      ALOLA_DUGTRIO = 2051,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meowth_(Pokémon) | Source} */
      ALOLA_MEOWTH = 2052,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Persian_(Pokémon) | Source} */
      ALOLA_PERSIAN = 2053,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Geodude_(Pokémon) | Source} */
      ALOLA_GEODUDE = 2074,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Graveler_(Pokémon) | Source} */
      ALOLA_GRAVELER = 2075,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Golem_(Pokémon) | Source} */
      ALOLA_GOLEM = 2076,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grimer_(Pokémon) | Source} */
      ALOLA_GRIMER = 2088,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Muk_(Pokémon) | Source} */
      ALOLA_MUK = 2089,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Exeggutor_(Pokémon) | Source} */
      ALOLA_EXEGGUTOR = 2103,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Marowak_(Pokémon) | Source} */
      ALOLA_MAROWAK = 2105,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Floette_(Pokémon) | Source} */
      ETERNAL_FLOETTE = 2670,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meowth_(Pokémon) | Source} */
      GALAR_MEOWTH = 4052,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ponyta_(Pokémon) | Source} */
      GALAR_PONYTA = 4077,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rapidash_(Pokémon) | Source} */
      GALAR_RAPIDASH = 4078,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slowpoke_(Pokémon) | Source} */
      GALAR_SLOWPOKE = 4079,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slowbro_(Pokémon) | Source} */
      GALAR_SLOWBRO = 4080,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Farfetchd_(Pokémon) | Source} */
      GALAR_FARFETCHD = 4083,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Weezing_(Pokémon) | Source} */
      GALAR_WEEZING = 4110,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mr_Mime_(Pokémon) | Source} */
      GALAR_MR_MIME = 4122,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Articuno_(Pokémon) | Source} */
      GALAR_ARTICUNO = 4144,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zapdos_(Pokémon) | Source} */
      GALAR_ZAPDOS = 4145,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Moltres_(Pokémon) | Source} */
      GALAR_MOLTRES = 4146,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slowking_(Pokémon) | Source} */
      GALAR_SLOWKING = 4199,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Corsola_(Pokémon) | Source} */
      GALAR_CORSOLA = 4222,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zigzagoon_(Pokémon) | Source} */
      GALAR_ZIGZAGOON = 4263,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Linoone_(Pokémon) | Source} */
      GALAR_LINOONE = 4264,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Darumaka_(Pokémon) | Source} */
      GALAR_DARUMAKA = 4554,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Darmanitan_(Pokémon) | Source} */
      GALAR_DARMANITAN = 4555,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Yamask_(Pokémon) | Source} */
      GALAR_YAMASK = 4562,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stunfisk_(Pokémon) | Source} */
      GALAR_STUNFISK = 4618,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Growlithe_(Pokémon) | Source} */
      HISUI_GROWLITHE = 6058,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arcanine_(Pokémon) | Source} */
      HISUI_ARCANINE = 6059,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Voltorb_(Pokémon) | Source} */
      HISUI_VOLTORB = 6100,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electrode_(Pokémon) | Source} */
      HISUI_ELECTRODE = 6101,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Typhlosion_(Pokémon) | Source} */
      HISUI_TYPHLOSION = 6157,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Qwilfish_(Pokémon) | Source} */
      HISUI_QWILFISH = 6211,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sneasel_(Pokémon) | Source} */
      HISUI_SNEASEL = 6215,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Samurott_(Pokémon) | Source} */
      HISUI_SAMUROTT = 6503,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lilligant_(Pokémon) | Source} */
      HISUI_LILLIGANT = 6549,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zorua_(Pokémon) | Source} */
      HISUI_ZORUA = 6570,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zoroark_(Pokémon) | Source} */
      HISUI_ZOROARK = 6571,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Braviary_(Pokémon) | Source} */
      HISUI_BRAVIARY = 6628,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sliggoo_(Pokémon) | Source} */
      HISUI_SLIGGOO = 6705,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Goodra_(Pokémon) | Source} */
      HISUI_GOODRA = 6706,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Avalugg_(Pokémon) | Source} */
      HISUI_AVALUGG = 6713,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Decidueye_(Pokémon) | Source} */
      HISUI_DECIDUEYE = 6724,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tauros_(Pokémon) | Source} */
      PALDEA_TAUROS = 8128,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wooper_(Pokémon) | Source} */
      PALDEA_WOOPER = 8194,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ursaluna_(Pokémon) | Source} */
      BLOODMOON_URSALUNA = 8901
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum TimeOfDay {
      ALL = -1,
      DAWN = 0,
      DAY = 1,
      DUSK = 2,
      NIGHT = 3
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum TrainerType {
      UNKNOWN = 0,
      ACE_TRAINER = 1,
      ARTIST = 2,
      BACKERS = 3,
      BACKPACKER = 4,
      BAKER = 5,
      BEAUTY = 6,
      BIKER = 7,
      BLACK_BELT = 8,
      BREEDER = 9,
      CLERK = 10,
      CYCLIST = 11,
      DANCER = 12,
      DEPOT_AGENT = 13,
      DOCTOR = 14,
      FIREBREATHER = 15,
      FISHERMAN = 16,
      GUITARIST = 17,
      HARLEQUIN = 18,
      HIKER = 19,
      HOOLIGANS = 20,
      HOOPSTER = 21,
      INFIELDER = 22,
      JANITOR = 23,
      LINEBACKER = 24,
      MAID = 25,
      MUSICIAN = 26,
      HEX_MANIAC = 27,
      NURSERY_AIDE = 28,
      OFFICER = 29,
      PARASOL_LADY = 30,
      PILOT = 31,
      POKEFAN = 32,
      PRESCHOOLER = 33,
      PSYCHIC = 34,
      RANGER = 35,
      RICH = 36,
      RICH_KID = 37,
      ROUGHNECK = 38,
      SAILOR = 39,
      SCIENTIST = 40,
      SMASHER = 41,
      SNOW_WORKER = 42,
      STRIKER = 43,
      SCHOOL_KID = 44,
      SWIMMER = 45,
      TWINS = 46,
      VETERAN = 47,
      WAITER = 48,
      WORKER = 49,
      YOUNGSTER = 50,
      ROCKET_GRUNT = 51,
      MAGMA_GRUNT = 52,
      AQUA_GRUNT = 53,
      GALACTIC_GRUNT = 54,
      PLASMA_GRUNT = 55,
      FLARE_GRUNT = 56,
      ROCKET_BOSS_GIOVANNI_1 = 57,
      ROCKET_BOSS_GIOVANNI_2 = 58,
      MAXIE = 59,
      MAXIE_2 = 60,
      ARCHIE = 61,
      ARCHIE_2 = 62,
      CYRUS = 63,
      CYRUS_2 = 64,
      GHETSIS = 65,
      GHETSIS_2 = 66,
      LYSANDRE = 67,
      LYSANDRE_2 = 68,
      BROCK = 200,
      MISTY = 201,
      LT_SURGE = 202,
      ERIKA = 203,
      JANINE = 204,
      SABRINA = 205,
      BLAINE = 206,
      GIOVANNI = 207,
      FALKNER = 208,
      BUGSY = 209,
      WHITNEY = 210,
      MORTY = 211,
      CHUCK = 212,
      JASMINE = 213,
      PRYCE = 214,
      CLAIR = 215,
      ROXANNE = 216,
      BRAWLY = 217,
      WATTSON = 218,
      FLANNERY = 219,
      NORMAN = 220,
      WINONA = 221,
      TATE = 222,
      LIZA = 223,
      JUAN = 224,
      ROARK = 225,
      GARDENIA = 226,
      MAYLENE = 227,
      CRASHER_WAKE = 228,
      FANTINA = 229,
      BYRON = 230,
      CANDICE = 231,
      VOLKNER = 232,
      CILAN = 233,
      CHILI = 234,
      CRESS = 235,
      CHEREN = 236,
      LENORA = 237,
      ROXIE = 238,
      BURGH = 239,
      ELESA = 240,
      CLAY = 241,
      SKYLA = 242,
      BRYCEN = 243,
      DRAYDEN = 244,
      MARLON = 245,
      VIOLA = 246,
      GRANT = 247,
      KORRINA = 248,
      RAMOS = 249,
      CLEMONT = 250,
      VALERIE = 251,
      OLYMPIA = 252,
      WULFRIC = 253,
      MILO = 254,
      NESSA = 255,
      KABU = 256,
      BEA = 257,
      ALLISTER = 258,
      OPAL = 259,
      BEDE = 260,
      GORDIE = 261,
      MELONY = 262,
      PIERS = 263,
      MARNIE = 264,
      RAIHAN = 265,
      KATY = 266,
      BRASSIUS = 267,
      IONO = 268,
      KOFU = 269,
      LARRY = 270,
      RYME = 271,
      TULIP = 272,
      GRUSHA = 273,
      LORELEI = 300,
      BRUNO = 301,
      AGATHA = 302,
      LANCE = 303,
      WILL = 304,
      KOGA = 305,
      KAREN = 306,
      SIDNEY = 307,
      PHOEBE = 308,
      GLACIA = 309,
      DRAKE = 310,
      AARON = 311,
      BERTHA = 312,
      FLINT = 313,
      LUCIAN = 314,
      SHAUNTAL = 315,
      MARSHAL = 316,
      GRIMSLEY = 317,
      CAITLIN = 318,
      MALVA = 319,
      SIEBOLD = 320,
      WIKSTROM = 321,
      DRASNA = 322,
      HALA = 323,
      MOLAYNE = 324,
      OLIVIA = 325,
      ACEROLA = 326,
      KAHILI = 327,
      MARNIE_ELITE = 328,
      NESSA_ELITE = 329,
      BEA_ELITE = 330,
      ALLISTER_ELITE = 331,
      RAIHAN_ELITE = 332,
      RIKA = 333,
      POPPY = 334,
      LARRY_ELITE = 335,
      HASSEL = 336,
      CRISPIN = 337,
      AMARYS = 338,
      LACEY = 339,
      DRAYTON = 340,
      BLUE = 350,
      RED = 351,
      LANCE_CHAMPION = 352,
      STEVEN = 353,
      WALLACE = 354,
      CYNTHIA = 355,
      ALDER = 356,
      IRIS = 357,
      DIANTHA = 358,
      HAU = 359,
      LEON = 360,
      GEETA = 361,
      NEMONA = 362,
      KIERAN = 363,
      RIVAL = 375,
      RIVAL_2 = 376,
      RIVAL_3 = 377,
      RIVAL_4 = 378,
      RIVAL_5 = 379,
      RIVAL_6 = 380
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum UiTheme {
      DEFAULT = 0,
      LEGACY = 1
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum VariantTier {
      STANDARD = 0,
      RARE = 1,
      EPIC = 2
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum VariantTier {
      COMMON = 0,
      RARE = 1,
      EPIC = 2
  }
  
}

declare namespace PokeRogue.events {
  //import { ArenaTagSide } from "#app/data/arena-tag.js";
  //import { ArenaTagType } from "#enums/arena-tag-type";
  //import { TerrainType } from "#app/data/terrain.js";
  //import { WeatherType } from "#app/data/weather.js";
  /** Alias for all {@linkcode ArenaEvent} type strings */
  export declare enum ArenaEventType {
      /** Triggers when a {@linkcode WeatherType} is added, overlapped, or removed */
      WEATHER_CHANGED = "onWeatherChanged",
      /** Triggers when a {@linkcode TerrainType} is added, overlapped, or removed */
      TERRAIN_CHANGED = "onTerrainChanged",
      /** Triggers when a {@linkcode ArenaTagType} is added */
      TAG_ADDED = "onTagAdded",
      /** Triggers when a {@linkcode ArenaTagType} is removed */
      TAG_REMOVED = "onTagRemoved"
  }
  /**
   * Base container class for all {@linkcode ArenaEventType} events
   * @extends Event
   */
  export declare class ArenaEvent extends Event {
      /** The total duration of the {@linkcode ArenaEventType} */
      duration: number;
      constructor(eventType: ArenaEventType, duration: number);
  }
  /**
   * Container class for {@linkcode ArenaEventType.WEATHER_CHANGED} events
   * @extends ArenaEvent
  */
  export declare class WeatherChangedEvent extends ArenaEvent {
      /** The {@linkcode WeatherType} being overridden */
      oldWeatherType: PokeRogue.data.WeatherType;
      /** The {@linkcode WeatherType} being set */
      newWeatherType: PokeRogue.data.WeatherType;
      constructor(oldWeatherType: PokeRogue.data.WeatherType, newWeatherType: PokeRogue.data.WeatherType, duration: number);
  }
  /**
   * Container class for {@linkcode ArenaEventType.TERRAIN_CHANGED} events
   * @extends ArenaEvent
  */
  export declare class TerrainChangedEvent extends ArenaEvent {
      /** The {@linkcode TerrainType} being overridden */
      oldTerrainType: PokeRogue.data.TerrainType;
      /** The {@linkcode TerrainType} being set */
      newTerrainType: PokeRogue.data.TerrainType;
      constructor(oldTerrainType: PokeRogue.data.TerrainType, newTerrainType: PokeRogue.data.TerrainType, duration: number);
  }
  /**
   * Container class for {@linkcode ArenaEventType.TAG_ADDED} events
   * @extends ArenaEvent
  */
  export declare class TagAddedEvent extends ArenaEvent {
      /** The {@linkcode ArenaTagType} being added */
      arenaTagType: PokeRogue.enums.ArenaTagType;
      /** The {@linkcode ArenaTagSide} the tag is being placed on */
      arenaTagSide: PokeRogue.data.ArenaTagSide;
      /** The current number of layers of the arena trap. */
      arenaTagLayers: number;
      /** The maximum amount of layers of the arena trap. */
      arenaTagMaxLayers: number;
      constructor(arenaTagType: PokeRogue.enums.ArenaTagType, arenaTagSide: PokeRogue.data.ArenaTagSide, duration: number, arenaTagLayers?: number, arenaTagMaxLayers?: number);
  }
  /**
   * Container class for {@linkcode ArenaEventType.TAG_REMOVED} events
   * @extends ArenaEvent
  */
  export declare class TagRemovedEvent extends ArenaEvent {
      /** The {@linkcode ArenaTagType} being removed */
      arenaTagType: PokeRogue.enums.ArenaTagType;
      /** The {@linkcode ArenaTagSide} the tag was being placed on */
      arenaTagSide: PokeRogue.data.ArenaTagSide;
      constructor(arenaTagType: PokeRogue.enums.ArenaTagType, arenaTagSide: PokeRogue.data.ArenaTagSide, duration: number);
  }
  
}

declare namespace PokeRogue.events {
  //import Move from "../data/move";
  //import { BerryModifier } from "../modifier/modifier";
  /** Alias for all {@linkcode BattleScene} events */
  export declare enum BattleSceneEventType {
      /**
       * Triggers when the corresponding setting is changed
       * @see {@linkcode CandyUpgradeNotificationChangedEvent}
       */
      CANDY_UPGRADE_NOTIFICATION_CHANGED = "onCandyUpgradeNotificationChanged",
      /**
       * Triggers when a move is successfully used
       * @see {@linkcode MoveUsedEvent}
       */
      MOVE_USED = "onMoveUsed",
      /**
       * Triggers when a berry gets successfully used
       * @see {@linkcode BerryUsedEvent}
       */
      BERRY_USED = "onBerryUsed",
      /**
       * Triggers at the start of each new encounter
       * @see {@linkcode EncounterPhaseEvent}
       */
      ENCOUNTER_PHASE = "onEncounterPhase",
      /**
       * Triggers on the first turn of a new battle
       * @see {@linkcode TurnInitEvent}
       */
      TURN_INIT = "onTurnInit",
      /**
       * Triggers after a turn ends in battle
       * @see {@linkcode TurnEndEvent}
       */
      TURN_END = "onTurnEnd",
      /**
       * Triggers when a new {@linkcode Arena} is created during initialization
       * @see {@linkcode NewArenaEvent}
       */
      NEW_ARENA = "onNewArena"
  }
  /**
   * Container class for {@linkcode BattleSceneEventType.CANDY_UPGRADE_NOTIFICATION_CHANGED} events
   * @extends Event
  */
  export declare class CandyUpgradeNotificationChangedEvent extends Event {
      /** The new value the setting was changed to */
      newValue: number;
      constructor(newValue: number);
  }
  /**
   * Container class for {@linkcode BattleSceneEventType.MOVE_USED} events
   * @extends Event
  */
  export declare class MoveUsedEvent extends Event {
      /** The ID of the {@linkcode Pokemon} that used the {@linkcode Move} */
      pokemonId: number;
      /** The {@linkcode Move} used */
      move: PokeRogue.data.Move;
      /** The amount of PP used on the {@linkcode Move} this turn */
      ppUsed: number;
      constructor(userId: number, move: PokeRogue.data.Move, ppUsed: number);
  }
  /**
   * Container class for {@linkcode BattleSceneEventType.BERRY_USED} events
   * @extends Event
  */
  export declare class BerryUsedEvent extends Event {
      /** The {@linkcode BerryModifier} being used */
      berryModifier: PokeRogue.modifier.BerryModifier;
      constructor(berry: PokeRogue.modifier.BerryModifier);
  }
  /**
   * Container class for {@linkcode BattleSceneEventType.ENCOUNTER_PHASE} events
   * @extends Event
  */
  export declare class EncounterPhaseEvent extends Event {
      constructor();
  }
  /**
   * Container class for {@linkcode BattleSceneEventType.TURN_INIT} events
   * @extends Event
  */
  export declare class TurnInitEvent extends Event {
      constructor();
  }
  /**
   * Container class for {@linkcode BattleSceneEventType.TURN_END} events
   * @extends Event
  */
  export declare class TurnEndEvent extends Event {
      /** The amount of turns in the current battle */
      turnCount: number;
      constructor(turnCount: number);
  }
  /**
   * Container class for {@linkcode BattleSceneEventType.NEW_ARENA} events
   * @extends Event
  */
  export declare class NewArenaEvent extends Event {
      constructor();
  }
  
}

declare namespace PokeRogue.events {
  export declare enum EggEventType {
      /**
       * Triggers when egg count is changed.
       * @see {@linkcode MoveUsedEvent}
       */
      EGG_COUNT_CHANGED = "onEggCountChanged"
  }
  /**
   * Container class for {@linkcode EggEventType.EGG_COUNT_CHANGED} events
   * @extends Event
  */
  export declare class EggCountChangedEvent extends Event {
      /** The updated egg count. */
      eggCount: integer;
      constructor(eggCount: number);
  }
  
}

declare namespace PokeRogue {
  //import { Phase } from "./phase";
  //import BattleScene from "./battle-scene";
  //import { SpeciesFormEvolution } from "./data/pokemon-evolutions";
  //import { PlayerPokemon } from "./field/pokemon";
  export declare class EvolutionPhase extends PokeRogue.Phase {
      protected pokemon: PokeRogue.field.PlayerPokemon;
      protected lastLevel: integer;
      public evolution;
      protected evolutionContainer: Phaser.GameObjects.Container;
      protected evolutionBaseBg: Phaser.GameObjects.Image;
      protected evolutionBg: Phaser.GameObjects.Video;
      protected evolutionBgOverlay: Phaser.GameObjects.Rectangle;
      protected evolutionOverlay: Phaser.GameObjects.Rectangle;
      protected pokemonSprite: Phaser.GameObjects.Sprite;
      protected pokemonTintSprite: Phaser.GameObjects.Sprite;
      protected pokemonEvoSprite: Phaser.GameObjects.Sprite;
      protected pokemonEvoTintSprite: Phaser.GameObjects.Sprite;
      constructor(scene: PokeRogue.BattleScene, pokemon: PokeRogue.field.PlayerPokemon, evolution: PokeRogue.data.SpeciesFormEvolution, lastLevel: integer);
      validate(): boolean;
      setMode(): Promise<void>;
      start(): void;
      doEvolution(): void;
      doSpiralUpward(): void;
      doArcDownward(): void;
      doCycle(l: number, lastCycle?: integer): Promise<boolean>;
      doCircleInward(): void;
      doSpray(): void;
      doSpiralUpwardParticle(trigIndex: integer): void;
      doArcDownParticle(trigIndex: integer): void;
      doCircleInwardParticle(trigIndex: integer, speed: integer): void;
      doSprayParticle(trigIndex: integer): void;
  }
  export declare class EndEvolutionPhase extends PokeRogue.Phase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  
}

declare namespace PokeRogue.field {
  //import BattleScene from "../battle-scene";
  //import { PokeballType } from "../data/pokeball";
  export declare function addPokeballOpenParticles(scene: PokeRogue.BattleScene, x: number, y: number, pokeballType: PokeRogue.data.PokeballType): void;
  export declare function addPokeballCaptureStars(scene: PokeRogue.BattleScene, pokeball: Phaser.GameObjects.Sprite): void;
  export declare function sin(index: integer, amplitude: integer): number;
  export declare function cos(index: integer, amplitude: integer): number;
  
}

declare namespace PokeRogue.field {
  //import BattleScene from "../battle-scene";
  //import { Constructor } from "#app/utils";
  //import PokemonSpecies from "../data/pokemon-species";
  //import { Weather, WeatherType } from "../data/weather";
  //import { Type } from "../data/type";
  //import Move from "../data/move";
  //import { ArenaTag, ArenaTagSide } from "../data/arena-tag";
  //import { BattlerIndex } from "../battle";
  //import { Terrain, TerrainType } from "../data/terrain";
  //import Pokemon from "./pokemon";
  //import { ArenaTagType } from "#enums/arena-tag-type";
  //import { Biome } from "#enums/biome";
  //import { Moves } from "#enums/moves";
  //import { TimeOfDay } from "#enums/time-of-day";
  //import { TrainerType } from "#enums/trainer-type";
  export declare class Arena {
      scene: PokeRogue.BattleScene;
      biomeType: PokeRogue.enums.Biome;
      weather: PokeRogue.data.Weather;
      terrain: PokeRogue.data.Terrain;
      tags: PokeRogue.data.ArenaTag[];
      bgm: string;
      ignoreAbilities: boolean;
      public lastTimeOfDay;
      public pokemonPool;
      public trainerPool;
      readonly eventTarget: EventTarget;
      constructor(scene: PokeRogue.BattleScene, biome: PokeRogue.enums.Biome, bgm: string);
      init(): void;
      updatePoolsForTimeOfDay(): void;
      randomSpecies(waveIndex: integer, level: integer, attempt?: integer, luckValue?: integer): PokemonSpecies;
      randomTrainerType(waveIndex: integer): TrainerType;
      getSpeciesFormIndex(species: PokeRogue.data.PokemonSpecies): integer;
      getTypeForBiome(): Type.UNKNOWN | Type.NORMAL | Type.FIGHTING | Type.FLYING | Type.POISON | Type.GROUND | Type.ROCK | Type.BUG | Type.GHOST | Type.STEEL | Type.FIRE | Type.WATER | Type.GRASS | Type.ELECTRIC | Type.PSYCHIC | Type.ICE | Type.DRAGON | Type.DARK | Type.FAIRY;
      getBgTerrainColorRatioForBiome(): number;
      /**
       * Sets weather to the override specified in overrides.ts
       * @param weather new weather to set of type WeatherType
       * @returns true to force trySetWeather to return true
       */
      trySetWeatherOverride(weather: PokeRogue.data.WeatherType): boolean;
      /**
       * Attempts to set a new weather to the battle
       * @param weather new weather to set of type WeatherType
       * @param hasPokemonSource is the new weather from a pokemon
       * @returns true if new weather set, false if no weather provided or attempting to set the same weather as currently in use
       */
      trySetWeather(weather: PokeRogue.data.WeatherType, hasPokemonSource: boolean): boolean;
      trySetTerrain(terrain: PokeRogue.data.TerrainType, hasPokemonSource: boolean, ignoreAnim?: boolean): boolean;
      isMoveWeatherCancelled(move: PokeRogue.data.Move): boolean;
      isMoveTerrainCancelled(user: PokeRogue.field.Pokemon, targets: PokeRogue.BattlerIndex[], move: PokeRogue.data.Move): boolean;
      getTerrainType(): TerrainType;
      getAttackTypeMultiplier(attackType: PokeRogue.data.Type, grounded: boolean): number;
      getTrainerChance(): integer;
      getTimeOfDay(): TimeOfDay;
      isOutside(): boolean;
      overrideTint(): [integer, integer, integer];
      getDayTint(): [integer, integer, integer];
      getDuskTint(): [integer, integer, integer];
      getNightTint(): [integer, integer, integer];
      setIgnoreAbilities(ignoreAbilities?: boolean): void;
      applyTagsForSide(tagType: PokeRogue.enums.ArenaTagType | Constructor<ArenaTag>, side: PokeRogue.data.ArenaTagSide, ...args: unknown[]): void;
      applyTags(tagType: PokeRogue.enums.ArenaTagType | Constructor<ArenaTag>, ...args: unknown[]): void;
      addTag(tagType: PokeRogue.enums.ArenaTagType, turnCount: integer, sourceMove: PokeRogue.enums.Moves, sourceId: integer, side?: ArenaTagSide, quiet?: boolean, targetIndex?: BattlerIndex): boolean;
      getTag(tagType: PokeRogue.enums.ArenaTagType | Constructor<ArenaTag>): ArenaTag;
      getTagOnSide(tagType: PokeRogue.enums.ArenaTagType | Constructor<ArenaTag>, side: PokeRogue.data.ArenaTagSide): ArenaTag;
      findTags(tagPredicate: (t: PokeRogue.data.ArenaTag) => boolean): ArenaTag[];
      findTagsOnSide(tagPredicate: (t: PokeRogue.data.ArenaTag) => boolean, side: PokeRogue.data.ArenaTagSide): ArenaTag[];
      lapseTags(): void;
      removeTag(tagType: PokeRogue.enums.ArenaTagType): boolean;
      removeTagOnSide(tagType: PokeRogue.enums.ArenaTagType, side: PokeRogue.data.ArenaTagSide, quiet?: boolean): boolean;
      removeAllTags(): void;
      preloadBgm(): void;
      getBgmLoopPoint(): number;
  }
  export declare function getBiomeKey(biome: PokeRogue.enums.Biome): string;
  export declare function getBiomeHasProps(biomeType: PokeRogue.enums.Biome): boolean;
  export declare class ArenaBase extends Phaser.GameObjects.Container {
      player: boolean;
      biome: PokeRogue.enums.Biome;
      propValue: integer;
      base: Phaser.GameObjects.Sprite;
      props: Phaser.GameObjects.Sprite[];
      constructor(scene: PokeRogue.BattleScene, player: boolean);
      setBiome(biome: PokeRogue.enums.Biome, propValue?: integer): void;
  }
  
}

declare namespace PokeRogue.field {
  //import Pokemon, { DamageResult, HitResult } from "./pokemon";
  export class DamageNumberHandler {
      public damageNumbers;
      constructor();
      add(target: PokeRogue.field.Pokemon, amount: integer, result?: DamageResult | HitResult.HEAL, critical?: boolean): void;
  }
  
}

declare namespace PokeRogue.field {
  //import BattleScene from "../battle-scene";
  export class PokemonSpriteSparkleHandler {
      public sprites;
      setup(scene: PokeRogue.BattleScene): void;
      onLapse(): void;
      add(sprites: Phaser.GameObjects.Sprite | Phaser.GameObjects.Sprite[]): void;
      remove(sprites: Phaser.GameObjects.Sprite | Phaser.GameObjects.Sprite[]): void;
      removeAll(): void;
  }
  
}

declare namespace PokeRogue.field {
  import Phaser from "phaser";
  //import BattleScene, { AnySound } from "../battle-scene";
  //import { Variant } from "#app/data/variant";
  //import BattleInfo from "../ui/battle-info";
  //import Move from "../data/move";
  //import { default as PokemonSpecies, PokemonSpeciesForm } from "../data/pokemon-species";
  //import { Constructor } from "#app/utils";
  //import { Type, TypeDamageMultiplier } from "../data/type";
  //import { Stat } from "../data/pokemon-stat";
  //import { PokemonHeldItemModifier } from "../modifier/modifier";
  //import { PokeballType } from "../data/pokeball";
  //import { Gender } from "../data/gender";
  //import { Status, StatusEffect } from "../data/status-effect";
  //import { SpeciesFormEvolution } from "../data/pokemon-evolutions";
  //import { BattlerTag, BattlerTagLapseType } from "../data/battler-tags";
  //import { Ability, AbAttr } from "../data/ability";
  //import PokemonData from "../system/pokemon-data";
  //import { BattlerIndex } from "../battle";
  //import { LevelMoves } from "../data/pokemon-level-moves";
  //import { StarterMoveset } from "../system/game-data";
  //import { Nature } from "../data/nature";
  //import { SpeciesFormChange } from "../data/pokemon-forms";
  //import { TrainerSlot } from "../data/trainer-config";
  //import { Abilities } from "#enums/abilities";
  //import { BattlerTagType } from "#enums/battler-tag-type";
  //import { BerryType } from "#enums/berry-type";
  //import { Biome } from "#enums/biome";
  //import { Moves } from "#enums/moves";
  export declare enum FieldPosition {
      CENTER = 0,
      LEFT = 1,
      RIGHT = 2
  }
  export abstract class Pokemon extends Phaser.GameObjects.Container {
      id: integer;
      name: string;
      species: PokeRogue.data.PokemonSpecies;
      formIndex: integer;
      abilityIndex: integer;
      passive: boolean;
      shiny: boolean;
      variant: PokeRogue.data.Variant;
      pokeball: PokeRogue.data.PokeballType;
      protected battleInfo: PokeRogue.ui.BattleInfo;
      level: integer;
      exp: integer;
      levelExp: integer;
      gender: PokeRogue.data.Gender;
      hp: integer;
      stats: integer[];
      ivs: integer[];
      nature: PokeRogue.data.Nature;
      natureOverride: PokeRogue.data.Nature | -1;
      moveset: PokemonMove[];
      status: PokeRogue.data.Status;
      friendship: integer;
      metLevel: integer;
      metBiome: PokeRogue.enums.Biome | -1;
      luck: integer;
      pauseEvolutions: boolean;
      pokerus: boolean;
      fusionSpecies: PokeRogue.data.PokemonSpecies;
      fusionFormIndex: integer;
      fusionAbilityIndex: integer;
      fusionShiny: boolean;
      fusionVariant: PokeRogue.data.Variant;
      fusionGender: PokeRogue.data.Gender;
      fusionLuck: integer;
      public summonDataPrimer;
      summonData: PokemonSummonData;
      battleData: PokemonBattleData;
      battleSummonData: PokemonBattleSummonData;
      turnData: PokemonTurnData;
      fieldPosition: FieldPosition;
      maskEnabled: boolean;
      maskSprite: Phaser.GameObjects.Sprite;
      public shinySparkle;
      constructor(scene: PokeRogue.BattleScene, x: number, y: number, species: PokeRogue.data.PokemonSpecies, level: integer, abilityIndex?: integer, formIndex?: integer, gender?: Gender, shiny?: boolean, variant?: Variant, ivs?: integer[], nature?: Nature, dataSource?: Pokemon | PokemonData);
      init(): void;
      abstract initBattleInfo(): void;
      isOnField(): boolean;
      isFainted(checkStatus?: boolean): boolean;
      /**
       * Check if this pokemon is both not fainted and allowed to be in battle.
       * This is frequently a better alternative to {@link isFainted}
       * @returns {boolean} True if pokemon is allowed in battle
       */
      isAllowedInBattle(): boolean;
      isActive(onField?: boolean): boolean;
      getDexAttr(): bigint;
      generateName(): void;
      abstract isPlayer(): boolean;
      abstract hasTrainer(): boolean;
      abstract getFieldIndex(): integer;
      abstract getBattlerIndex(): BattlerIndex;
      loadAssets(ignoreOverride?: boolean): Promise<void>;
      getFormKey(): string;
      getFusionFormKey(): string;
      getSpriteAtlasPath(ignoreOverride?: boolean): string;
      getBattleSpriteAtlasPath(back?: boolean, ignoreOverride?: boolean): string;
      getSpriteId(ignoreOverride?: boolean): string;
      getBattleSpriteId(back?: boolean, ignoreOverride?: boolean): string;
      getSpriteKey(ignoreOverride?: boolean): string;
      getBattleSpriteKey(back?: boolean, ignoreOverride?: boolean): string;
      getFusionSpriteId(ignoreOverride?: boolean): string;
      getFusionBattleSpriteId(back?: boolean, ignoreOverride?: boolean): string;
      getFusionBattleSpriteKey(back?: boolean, ignoreOverride?: boolean): string;
      getFusionBattleSpriteAtlasPath(back?: boolean, ignoreOverride?: boolean): string;
      getIconAtlasKey(ignoreOverride?: boolean): string;
      getFusionIconAtlasKey(ignoreOverride?: boolean): string;
      getIconId(ignoreOverride?: boolean): string;
      getFusionIconId(ignoreOverride?: boolean): string;
      getSpeciesForm(ignoreOverride?: boolean): PokemonSpeciesForm;
      getFusionSpeciesForm(ignoreOverride?: boolean): PokemonSpeciesForm;
      getSprite(): Phaser.GameObjects.Sprite;
      getTintSprite(): Phaser.GameObjects.Sprite;
      getSpriteScale(): number;
      getHeldItems(): PokemonHeldItemModifier[];
      updateScale(): void;
      updateSpritePipelineData(): void;
      initShinySparkle(): void;
      /**
       * Attempts to animate a given {@linkcode Phaser.GameObjects.Sprite}
       * @see {@linkcode Phaser.GameObjects.Sprite.play}
       * @param sprite {@linkcode Phaser.GameObjects.Sprite} to animate
       * @param tintSprite {@linkcode Phaser.GameObjects.Sprite} placed on top of the sprite to add a color tint
       * @param animConfig {@linkcode String} to pass to {@linkcode Phaser.GameObjects.Sprite.play}
       * @returns true if the sprite was able to be animated
       */
      tryPlaySprite(sprite: Phaser.GameObjects.Sprite, tintSprite: Phaser.GameObjects.Sprite, key: string): boolean;
      playAnim(): void;
      getFieldPositionOffset(): [number, number];
      setFieldPosition(fieldPosition: FieldPosition, duration?: integer): Promise<void>;
      getStat(stat: PokeRogue.data.Stat): integer;
      getBattleStat(stat: PokeRogue.data.Stat, opponent?: Pokemon, move?: Move, isCritical?: boolean): integer;
      calculateStats(): void;
      getNature(): Nature;
      setNature(nature: PokeRogue.data.Nature): void;
      generateNature(naturePool?: Nature[]): void;
      getMaxHp(): integer;
      getInverseHp(): integer;
      getHpRatio(precise?: boolean): number;
      generateGender(): void;
      getGender(ignoreOverride?: boolean): Gender;
      getFusionGender(ignoreOverride?: boolean): Gender;
      isShiny(): boolean;
      getVariant(): Variant;
      getLuck(): integer;
      isFusion(): boolean;
      abstract isBoss(): boolean;
      getMoveset(ignoreOverride?: boolean): PokemonMove[];
      getLearnableLevelMoves(): Moves[];
      /**
       * Gets the types of a pokemon
       * @param includeTeraType boolean to include tera-formed type, default false
       * @param forDefend boolean if the pokemon is defending from an attack
       * @param ignoreOverride boolean if true, ignore ability changing effects
       * @returns array of {@linkcode Type}
       */
      getTypes(includeTeraType?: boolean, forDefend?: boolean, ignoreOverride?: boolean): Type[];
      isOfType(type: PokeRogue.data.Type, includeTeraType?: boolean, forDefend?: boolean, ignoreOverride?: boolean): boolean;
      /**
       * Gets the non-passive ability of the pokemon. This accounts for fusions and ability changing effects.
       * This should rarely be called, most of the time {@link hasAbility} or {@link hasAbilityWithAttr} are better used as
       * those check both the passive and non-passive abilities and account for ability suppression.
       * @see {@link hasAbility} {@link hasAbilityWithAttr} Intended ways to check abilities in most cases
       * @param {boolean} ignoreOverride If true, ignore ability changing effects
       * @returns {Ability} The non-passive ability of the pokemon
       */
      getAbility(ignoreOverride?: boolean): Ability;
      /**
       * Gets the passive ability of the pokemon. This should rarely be called, most of the time
       * {@link hasAbility} or {@link hasAbilityWithAttr} are better used as those check both the passive and
       * non-passive abilities and account for ability suppression.
       * @see {@link hasAbility} {@link hasAbilityWithAttr} Intended ways to check abilities in most cases
       * @returns {Ability} The passive ability of the pokemon
       */
      getPassiveAbility(): Ability;
      /**
       * Gets a list of all instances of a given ability attribute among abilities this pokemon has.
       * Accounts for all the various effects which can affect whether an ability will be present or
       * in effect, and both passive and non-passive.
       * @param attrType {@linkcode AbAttr} The ability attribute to check for.
       * @param canApply {@linkcode Boolean} If false, it doesn't check whether the ability is currently active
       * @param ignoreOverride {@linkcode Boolean} If true, it ignores ability changing effects
       * @returns {AbAttr[]} A list of all the ability attributes on this ability.
       */
      getAbilityAttrs(attrType: {
          new (...args: any[]): AbAttr;
      }, canApply?: boolean, ignoreOverride?: boolean): AbAttr[];
      /**
       * Checks if a pokemon has a passive either from:
       *  - bought with starter candy
       *  - set by override
       *  - is a boss pokemon
       * @returns whether or not a pokemon should have a passive
       */
      hasPassive(): boolean;
      /**
       * Checks whether an ability of a pokemon can be currently applied. This should rarely be
       * directly called, as {@link hasAbility} and {@link hasAbilityWithAttr} already call this.
       * @see {@link hasAbility} {@link hasAbilityWithAttr} Intended ways to check abilities in most cases
       * @param {boolean} passive If true, check if passive can be applied instead of non-passive
       * @returns {Ability} The passive ability of the pokemon
       */
      canApplyAbility(passive?: boolean): boolean;
      /**
       * Checks whether a pokemon has the specified ability and it's in effect. Accounts for all the various
       * effects which can affect whether an ability will be present or in effect, and both passive and
       * non-passive. This is the primary way to check whether a pokemon has a particular ability.
       * @param {Abilities} ability The ability to check for
       * @param {boolean} canApply If false, it doesn't check whether the abiltiy is currently active
       * @param {boolean} ignoreOverride If true, it ignores ability changing effects
       * @returns {boolean} Whether the ability is present and active
       */
      hasAbility(ability: PokeRogue.enums.Abilities, canApply?: boolean, ignoreOverride?: boolean): boolean;
      /**
       * Checks whether a pokemon has an ability with the specified attribute and it's in effect.
       * Accounts for all the various effects which can affect whether an ability will be present or
       * in effect, and both passive and non-passive. This is one of the two primary ways to check
       * whether a pokemon has a particular ability.
       * @param {AbAttr} attrType The ability attribute to check for
       * @param {boolean} canApply If false, it doesn't check whether the ability is currently active
       * @param {boolean} ignoreOverride If true, it ignores ability changing effects
       * @returns {boolean} Whether an ability with that attribute is present and active
       */
      hasAbilityWithAttr(attrType: PokeRogue.Constructor<AbAttr>, canApply?: boolean, ignoreOverride?: boolean): boolean;
      getWeight(): number;
      /**
       * Gets the tera-formed type of the pokemon, or UNKNOWN if not present
       * @returns the {@linkcode Type}
       */
      getTeraType(): Type;
      isTerastallized(): boolean;
      isGrounded(): boolean;
      /**
       * Calculates the effectiveness of a move against the Pokémon.
       *
       * @param source - The Pokémon using the move.
       * @param move - The move being used.
       * @returns The type damage multiplier or undefined if it's a status move
       */
      getMoveEffectiveness(source: Pokemon, move: PokemonMove): TypeDamageMultiplier | undefined;
      /**
       * Calculates the effectiveness of an attack move against the Pokémon.
       *
       * @param source - The attacking Pokémon.
       * @param pokemonMove - The move being used by the attacking Pokémon.
       * @param ignoreAbility - Whether to check for abilities that might affect type effectiveness or immunity.
       * @returns The type damage multiplier, indicating the effectiveness of the move
       */
      getAttackMoveEffectiveness(source: Pokemon, pokemonMove: PokemonMove, ignoreAbility?: boolean): TypeDamageMultiplier;
      getAttackTypeEffectiveness(moveType: PokeRogue.data.Type, source?: Pokemon, ignoreStrongWinds?: boolean): TypeDamageMultiplier;
      getMatchupScore(pokemon: Pokemon): number;
      getEvolution(): SpeciesFormEvolution;
      getLevelMoves(startingLevel?: integer, includeEvolutionMoves?: boolean, simulateEvolutionChain?: boolean): LevelMoves;
      setMove(moveIndex: integer, moveId: PokeRogue.enums.Moves): void;
      /**
       * Function that tries to set a Pokemon shiny based on the trainer's trainer ID and secret ID
       * Endless Pokemon in the end biome are unable to be set to shiny
       *
       * The exact mechanic is that it calculates E as the XOR of the player's trainer ID and secret ID
       * F is calculated as the XOR of the first 16 bits of the Pokemon's ID with the last 16 bits
       * The XOR of E and F are then compared to the thresholdOverride (default case 32) to see whether or not to generate a shiny
       * @param thresholdOverride number that is divided by 2^16 (65536) to get the shiny chance
       * @returns true if the Pokemon has been set as a shiny, false otherwise
       */
      trySetShiny(thresholdOverride?: integer): boolean;
      /**
       * Generates a variant
       * Has a 10% of returning 2 (epic variant)
       * And a 30% of returning 1 (rare variant)
       * Returns 0 (basic shiny) if there is no variant or 60% of the time otherwise
       * @returns the shiny variant
       */
      generateVariant(): Variant;
      generateFusionSpecies(forStarter?: boolean): void;
      clearFusionSpecies(): void;
      generateAndPopulateMoveset(): void;
      trySelectMove(moveIndex: integer, ignorePp?: boolean): boolean;
      showInfo(): void;
      hideInfo(): Promise<void>;
      updateInfo(instant?: boolean): Promise<void>;
      /**
       * Show or hide the type effectiveness multiplier window
       * Passing undefined will hide the window
       */
      updateEffectiveness(effectiveness?: string): void;
      toggleStats(visible: boolean): void;
      toggleFlyout(visible: boolean): void;
      addExp(exp: integer): void;
      getOpponent(targetIndex: integer): Pokemon;
      getOpponents(): Pokemon[];
      getOpponentDescriptor(): string;
      getAlly(): Pokemon;
      apply(source: Pokemon, move: PokeRogue.data.Move): HitResult;
      damage(damage: integer, ignoreSegments?: boolean, preventEndure?: boolean, ignoreFaintPhase?: boolean): integer;
      damageAndUpdate(damage: integer, result?: DamageResult, critical?: boolean, ignoreSegments?: boolean, preventEndure?: boolean, ignoreFaintPhase?: boolean): integer;
      heal(amount: integer): integer;
      isBossImmune(): boolean;
      isMax(): boolean;
      addTag(tagType: PokeRogue.enums.BattlerTagType, turnCount?: integer, sourceMove?: Moves, sourceId?: integer): boolean;
      getTag(tagType: PokeRogue.enums.BattlerTagType | Constructor<BattlerTag>): BattlerTag;
      findTag(tagFilter: ((tag: PokeRogue.data.BattlerTag) => boolean)): BattlerTag;
      getTags(tagType: PokeRogue.enums.BattlerTagType | Constructor<BattlerTag>): BattlerTag[];
      findTags(tagFilter: ((tag: PokeRogue.data.BattlerTag) => boolean)): BattlerTag[];
      lapseTag(tagType: PokeRogue.enums.BattlerTagType): boolean;
      lapseTags(lapseType: PokeRogue.data.BattlerTagLapseType): void;
      removeTag(tagType: PokeRogue.enums.BattlerTagType): boolean;
      findAndRemoveTags(tagFilter: ((tag: PokeRogue.data.BattlerTag) => boolean)): boolean;
      removeTagsBySourceId(sourceId: integer): void;
      transferTagsBySourceId(sourceId: integer, newSourceId: integer): void;
      /**
       * Transferring stat changes and Tags
       * @param source {@linkcode Pokemon} the pokemon whose stats/Tags are to be passed on from, ie: the Pokemon using Baton Pass
       */
      transferSummon(source: Pokemon): void;
      getMoveHistory(): TurnMove[];
      pushMoveHistory(turnMove: TurnMove): void;
      getLastXMoves(turnCount?: integer): TurnMove[];
      getMoveQueue(): QueuedMove[];
      /**
       * If this Pokemon is using a multi-hit move, cancels all subsequent strikes
       * @param {Pokemon} target If specified, this only cancels subsequent strikes against the given target
       */
      stopMultiHit(target?: Pokemon): void;
      changeForm(formChange: PokeRogue.data.SpeciesFormChange): Promise<void>;
      cry(soundConfig?: Phaser.Types.Sound.SoundConfig, sceneOverride?: BattleScene): AnySound;
      faintCry(callback: Function): void;
      public fusionFaintCry;
      isOppositeGender(pokemon: Pokemon): boolean;
      canSetStatus(effect: PokeRogue.data.StatusEffect, quiet?: boolean, overrideStatus?: boolean, sourcePokemon?: Pokemon): boolean;
      trySetStatus(effect: PokeRogue.data.StatusEffect, asPhase?: boolean, sourcePokemon?: Pokemon, cureTurn?: integer, sourceText?: string): boolean;
      /**
      * Resets the status of a pokemon.
      * @param revive Whether revive should be cured; defaults to true.
      * @param confusion Whether resetStatus should include confusion or not; defaults to false.
      * @param reloadAssets Whether to reload the assets or not; defaults to false.
      */
      resetStatus(revive?: boolean, confusion?: boolean, reloadAssets?: boolean): void;
      primeSummonData(summonDataPrimer: PokemonSummonData): void;
      resetSummonData(): void;
      resetBattleData(): void;
      resetBattleSummonData(): void;
      resetTurnData(): void;
      getExpValue(): integer;
      setFrameRate(frameRate: integer): void;
      tint(color: number, alpha?: number, duration?: integer, ease?: string): void;
      untint(duration: integer, ease?: string): void;
      enableMask(): void;
      disableMask(): void;
      sparkle(): void;
      updateFusionPalette(ignoreOveride?: boolean): void;
      randSeedInt(range: integer, min?: integer): integer;
      randSeedIntRange(min: integer, max: integer): integer;
      destroy(): void;
      getBattleInfo(): BattleInfo;
  }
  export interface Pokemon {
      scene: PokeRogue.BattleScene;
  }
  export declare class PlayerPokemon extends Pokemon {
      compatibleTms: PokeRogue.enums.Moves[];
      constructor(scene: PokeRogue.BattleScene, species: PokeRogue.data.PokemonSpecies, level: integer, abilityIndex: integer, formIndex: integer, gender: PokeRogue.data.Gender, shiny: boolean, variant: PokeRogue.data.Variant, ivs: integer[], nature: PokeRogue.data.Nature, dataSource: Pokemon | PokemonData);
      initBattleInfo(): void;
      isPlayer(): boolean;
      hasTrainer(): boolean;
      isBoss(): boolean;
      getFieldIndex(): integer;
      getBattlerIndex(): BattlerIndex;
      generateCompatibleTms(): void;
      tryPopulateMoveset(moveset: PokeRogue.system.StarterMoveset): boolean;
      switchOut(batonPass: boolean, removeFromField?: boolean): Promise<void>;
      addFriendship(friendship: integer): void;
      /**
       * Handles Revival Blessing when used by player.
       * @returns Promise to revive a pokemon.
       * @see {@linkcode RevivalBlessingAttr}
       */
      revivalBlessing(): Promise<void>;
      getPossibleEvolution(evolution: PokeRogue.data.SpeciesFormEvolution): Promise<Pokemon>;
      evolve(evolution: PokeRogue.data.SpeciesFormEvolution): Promise<void>;
      public handleSpecialEvolutions;
      getPossibleForm(formChange: PokeRogue.data.SpeciesFormChange): Promise<Pokemon>;
      changeForm(formChange: PokeRogue.data.SpeciesFormChange): Promise<void>;
      clearFusionSpecies(): void;
      /**
      * Returns a Promise to fuse two PlayerPokemon together
      * @param pokemon The PlayerPokemon to fuse to this one
      */
      fuse(pokemon: PlayerPokemon): Promise<void>;
      unfuse(): Promise<void>;
      /** Returns a deep copy of this Pokemon's moveset array */
      copyMoveset(): PokemonMove[];
  }
  export declare class EnemyPokemon extends Pokemon {
      trainerSlot: PokeRogue.data.TrainerSlot;
      aiType: AiType;
      bossSegments: integer;
      bossSegmentIndex: integer;
      /** To indicate of the instance was populated with a dataSource -> e.g. loaded & populated from session data */
      readonly isPopulatedFromDataSource: boolean;
      constructor(scene: PokeRogue.BattleScene, species: PokeRogue.data.PokemonSpecies, level: integer, trainerSlot: PokeRogue.data.TrainerSlot, boss: boolean, dataSource: PokeRogue.system.PokemonData);
      initBattleInfo(): void;
      /**
       * Sets the pokemons boss status. If true initializes the boss segments either from the arguments
       * or through the the Scene.getEncounterBossSegments function
       *
       * @param boss if the pokemon is a boss
       * @param bossSegments amount of boss segments (health-bar segments)
       */
      setBoss(boss?: boolean, bossSegments?: integer): void;
      generateAndPopulateMoveset(formIndex?: integer): void;
      getNextMove(): QueuedMove;
      getNextTargets(moveId: PokeRogue.enums.Moves): BattlerIndex[];
      isPlayer(): boolean;
      hasTrainer(): boolean;
      isBoss(): boolean;
      getBossSegmentIndex(): integer;
      damage(damage: integer, ignoreSegments?: boolean, preventEndure?: boolean, ignoreFaintPhase?: boolean): integer;
      canBypassBossSegments(segmentCount?: integer): boolean;
      handleBossSegmentCleared(segmentIndex: integer): void;
      heal(amount: integer): integer;
      getFieldIndex(): integer;
      getBattlerIndex(): BattlerIndex;
      addToParty(pokeballType: PokeRogue.data.PokeballType): PlayerPokemon;
  }
  export interface TurnMove {
      move: PokeRogue.enums.Moves;
      targets?: BattlerIndex[];
      result: MoveResult;
      virtual?: boolean;
      turn?: integer;
  }
  export interface QueuedMove {
      move: PokeRogue.enums.Moves;
      targets: PokeRogue.BattlerIndex[];
      ignorePP?: boolean;
  }
  export interface AttackMoveResult {
      move: PokeRogue.enums.Moves;
      result: DamageResult;
      damage: integer;
      critical: boolean;
      sourceId: integer;
  }
  export declare class PokemonSummonData {
      battleStats: integer[];
      moveQueue: QueuedMove[];
      disabledMove: PokeRogue.enums.Moves;
      disabledTurns: integer;
      tags: PokeRogue.data.BattlerTag[];
      abilitySuppressed: boolean;
      abilitiesApplied: PokeRogue.enums.Abilities[];
      speciesForm: PokeRogue.data.PokemonSpeciesForm;
      fusionSpeciesForm: PokeRogue.data.PokemonSpeciesForm;
      ability: PokeRogue.enums.Abilities;
      gender: PokeRogue.data.Gender;
      fusionGender: PokeRogue.data.Gender;
      stats: integer[];
      moveset: PokemonMove[];
      types: PokeRogue.data.Type[];
  }
  export declare class PokemonBattleData {
      hitCount: integer;
      endured: boolean;
      berriesEaten: PokeRogue.enums.BerryType[];
      abilitiesApplied: PokeRogue.enums.Abilities[];
      abilityRevealed: boolean;
  }
  export declare class PokemonBattleSummonData {
      /** The number of turns the pokemon has passed since entering the battle */
      turnCount: integer;
      /** The list of moves the pokemon has used since entering the battle */
      moveHistory: TurnMove[];
  }
  export declare class PokemonTurnData {
      flinched: boolean;
      acted: boolean;
      hitCount: integer;
      hitsLeft: integer;
      damageDealt: integer;
      currDamageDealt: integer;
      damageTaken: integer;
      attacksReceived: AttackMoveResult[];
  }
  export declare enum AiType {
      RANDOM = 0,
      SMART_RANDOM = 1,
      SMART = 2
  }
  export declare enum MoveResult {
      PENDING = 0,
      SUCCESS = 1,
      FAIL = 2,
      MISS = 3,
      OTHER = 4
  }
  export declare enum HitResult {
      EFFECTIVE = 1,
      SUPER_EFFECTIVE = 2,
      NOT_VERY_EFFECTIVE = 3,
      ONE_HIT_KO = 4,
      NO_EFFECT = 5,
      STATUS = 6,
      HEAL = 7,
      FAIL = 8,
      MISS = 9,
      OTHER = 10,
      IMMUNE = 11
  }
  export type DamageResult = HitResult.EFFECTIVE | HitResult.SUPER_EFFECTIVE | HitResult.NOT_VERY_EFFECTIVE | HitResult.ONE_HIT_KO | HitResult.OTHER;
  /**
   * Wrapper class for the {@linkcode Move} class for Pokemon to interact with.
   * These are the moves assigned to a {@linkcode Pokemon} object.
   * It links to {@linkcode Move} class via the move ID.
   * Compared to {@linkcode Move}, this class also tracks if a move has received.
   * PP Ups, amount of PP used, and things like that.
   * @see {@linkcode isUsable} - checks if move is disabled, out of PP, or not implemented.
   * @see {@linkcode getMove} - returns {@linkcode Move} object by looking it up via ID.
   * @see {@linkcode usePp} - removes a point of PP from the move.
   * @see {@linkcode getMovePp} - returns amount of PP a move currently has.
   * @see {@linkcode getPpRatio} - returns the current PP amount / max PP amount.
   * @see {@linkcode getName} - returns name of {@linkcode Move}.
   **/
  export declare class PokemonMove {
      moveId: PokeRogue.enums.Moves;
      ppUsed: integer;
      ppUp: integer;
      virtual: boolean;
      constructor(moveId: PokeRogue.enums.Moves, ppUsed?: integer, ppUp?: integer, virtual?: boolean);
      isUsable(pokemon: Pokemon, ignorePp?: boolean): boolean;
      getMove(): Move;
      /**
       * Sets {@link ppUsed} for this move and ensures the value does not exceed {@link getMovePp}
       * @param {number} count Amount of PP to use
       */
      usePp(count?: number): void;
      getMovePp(): integer;
      getPpRatio(): number;
      getName(): string;
      /**
      * Copies an existing move or creates a valid PokemonMove object from json representing one
      * @param {PokemonMove | any} source The data for the move to copy
      * @return {PokemonMove} A valid pokemonmove object
      */
      static loadMove(source: PokemonMove | any): PokemonMove;
  }
  
}

declare namespace PokeRogue.field {
  //import BattleScene from "../battle-scene";
  //import PokemonSpecies from "../data/pokemon-species";
  //import { TrainerConfig, TrainerPartyTemplate, TrainerSlot } from "../data/trainer-config";
  //import { EnemyPokemon } from "./pokemon";
  //import { PersistentModifier } from "../modifier/modifier";
  //import { PartyMemberStrength } from "#enums/party-member-strength";
  //import { TrainerType } from "#enums/trainer-type";
  export declare enum TrainerVariant {
      DEFAULT = 0,
      FEMALE = 1,
      DOUBLE = 2
  }
  export class Trainer extends Phaser.GameObjects.Container {
      config: PokeRogue.data.TrainerConfig;
      variant: TrainerVariant;
      partyTemplateIndex: integer;
      name: string;
      partnerName: string;
      constructor(scene: PokeRogue.BattleScene, trainerType: PokeRogue.enums.TrainerType, variant: TrainerVariant, partyTemplateIndex?: integer, name?: string, partnerName?: string);
      getKey(forceFemale?: boolean): string;
      /**
       * Returns the name of the trainer based on the provided trainer slot and the option to include a title.
       * @param {TrainerSlot} trainerSlot - The slot to determine which name to use. Defaults to TrainerSlot.NONE.
       * @param {boolean} includeTitle - Whether to include the title in the returned name. Defaults to false.
       * @returns {string} - The formatted name of the trainer.
       **/
      getName(trainerSlot?: TrainerSlot, includeTitle?: boolean): string;
      isDouble(): boolean;
      getMixedBattleBgm(): string;
      getBattleBgm(): string;
      getEncounterBgm(): string;
      getEncounterMessages(): string[];
      getVictoryMessages(): string[];
      getDefeatMessages(): string[];
      getPartyTemplate(): TrainerPartyTemplate;
      getPartyLevels(waveIndex: integer): integer[];
      genPartyMember(index: integer): EnemyPokemon;
      genNewPartyMemberSpecies(level: integer, strength: PokeRogue.enums.PartyMemberStrength, attempt?: integer): PokemonSpecies;
      getPartyMemberMatchupScores(trainerSlot?: TrainerSlot, forSwitch?: boolean): [integer, integer][];
      getSortedPartyMemberMatchupScores(partyMemberScores?: [integer, integer][]): [number, number][];
      getNextSummonIndex(trainerSlot?: TrainerSlot, partyMemberScores?: [integer, integer][]): integer;
      getPartyMemberModifierChanceMultiplier(index: integer): number;
      genModifiers(party: PokeRogue.field.EnemyPokemon[]): PersistentModifier[];
      loadAssets(): Promise<void>;
      initSprite(): void;
      /**
       * Attempts to animate a given set of {@linkcode Phaser.GameObjects.Sprite}
       * @see {@linkcode Phaser.GameObjects.Sprite.play}
       * @param sprite {@linkcode Phaser.GameObjects.Sprite} to animate
       * @param tintSprite {@linkcode Phaser.GameObjects.Sprite} placed on top of the sprite to add a color tint
       * @param animConfig {@linkcode Phaser.Types.Animations.PlayAnimationConfig} to pass to {@linkcode Phaser.GameObjects.Sprite.play}
       * @returns true if the sprite was able to be animated
       */
      tryPlaySprite(sprite: Phaser.GameObjects.Sprite, tintSprite: Phaser.GameObjects.Sprite, animConfig: Phaser.Types.Animations.PlayAnimationConfig): boolean;
      playAnim(): void;
      getSprites(): Phaser.GameObjects.Sprite[];
      getTintSprites(): Phaser.GameObjects.Sprite[];
      tint(color: number, alpha?: number, duration?: integer, ease?: string): void;
      untint(duration: integer, ease?: string): void;
  }
  export interface Trainer {
      scene: PokeRogue.BattleScene;
  }
  
}

declare namespace PokeRogue {
  //import BattleScene from "./battle-scene";
  //import { SpeciesFormChange } from "./data/pokemon-forms";
  //import { EvolutionPhase } from "./evolution-phase";
  //import Pokemon, { PlayerPokemon } from "./field/pokemon";
  //import { BattlePhase } from "./phases";
  export declare class FormChangePhase extends PokeRogue.EvolutionPhase {
      public formChange;
      public modal;
      constructor(scene: PokeRogue.BattleScene, pokemon: PokeRogue.field.PlayerPokemon, formChange: PokeRogue.data.SpeciesFormChange, modal: boolean);
      validate(): boolean;
      setMode(): Promise<void>;
      doEvolution(): void;
      end(): void;
  }
  export declare class QuietFormChangePhase extends PokeRogue.BattlePhase {
      protected pokemon: PokeRogue.field.Pokemon;
      protected formChange: PokeRogue.data.SpeciesFormChange;
      constructor(scene: PokeRogue.BattleScene, pokemon: PokeRogue.field.Pokemon, formChange: PokeRogue.data.SpeciesFormChange);
      start(): void;
      end(): void;
  }
  
}

declare namespace PokeRogue {
  //import { FixedBattleConfig, FixedBattleConfigs } from "./battle";
  //import BattleScene from "./battle-scene";
  //import { Challenge } from "./data/challenge";
  //import PokemonSpecies from "./data/pokemon-species";
  //import { Arena } from "./field/arena";
  //import { Biome } from "#enums/biome";
  export declare enum GameModes {
      CLASSIC = 0,
      ENDLESS = 1,
      SPLICED_ENDLESS = 2,
      DAILY = 3,
      CHALLENGE = 4
  }
  interface GameModeConfig {
      isClassic?: boolean;
      isEndless?: boolean;
      isDaily?: boolean;
      hasTrainers?: boolean;
      hasNoShop?: boolean;
      hasShortBiomes?: boolean;
      hasRandomBiomes?: boolean;
      hasRandomBosses?: boolean;
      isSplicedOnly?: boolean;
      isChallenge?: boolean;
  }
  export declare class GameMode implements GameModeConfig {
      modeId: GameModes;
      isClassic: boolean;
      isEndless: boolean;
      isDaily: boolean;
      hasTrainers: boolean;
      hasNoShop: boolean;
      hasShortBiomes: boolean;
      hasRandomBiomes: boolean;
      hasRandomBosses: boolean;
      isSplicedOnly: boolean;
      isChallenge: boolean;
      challenges: PokeRogue.data.Challenge[];
      battleConfig: PokeRogue.FixedBattleConfigs;
      constructor(modeId: GameModes, config: GameModeConfig, battleConfig?: FixedBattleConfigs);
      /**
       * @returns either:
       * - override from overrides.ts
       * - 20 for Daily Runs
       * - 5 for all other modes
       */
      getStartingLevel(): integer;
      /**
       * @returns either:
       * - override from overrides.ts
       * - 1000
       */
      getStartingMoney(): integer;
      /**
       * @param scene current BattleScene
       * @returns either:
       * - random biome for Daily mode
       * - override from overrides.ts
       * - Town
       */
      getStartingBiome(scene: PokeRogue.BattleScene): Biome;
      getWaveForDifficulty(waveIndex: integer, ignoreCurveChanges?: boolean): integer;
      isWaveTrainer(waveIndex: integer, arena: PokeRogue.field.Arena): boolean;
      isTrainerBoss(waveIndex: integer, biomeType: PokeRogue.enums.Biome, offsetGym: boolean): boolean;
      getOverrideSpecies(waveIndex: integer): PokemonSpecies;
      /**
       * Checks if wave provided is the final for current or specified game mode
       * @param waveIndex
       * @param modeId game mode
       * @returns if the current wave is final for classic or daily OR a minor boss in endless
       */
      isWaveFinal(waveIndex: integer, modeId?: GameModes): boolean;
      /**
         * Every 10 waves is a boss battle
         * @returns true if waveIndex is a multiple of 10
         */
      isBoss(waveIndex: integer): boolean;
      /**
         * Every 50 waves of an Endless mode is a boss
         * At this time it is paradox pokemon
         * @returns true if waveIndex is a multiple of 50 in Endless
         */
      isEndlessBoss(waveIndex: integer): boolean;
      /**
         * Every 250 waves of an Endless mode is a minor boss
         * At this time it is Eternatus
         * @returns true if waveIndex is a multiple of 250 in Endless
         */
      isEndlessMinorBoss(waveIndex: integer): boolean;
      /**
         * Every 1000 waves of an Endless mode is a major boss
         * At this time it is Eternamax Eternatus
         * @returns true if waveIndex is a multiple of 1000 in Endless
         */
      isEndlessMajorBoss(waveIndex: integer): boolean;
      /**
       * Checks whether there is a fixed battle on this gamemode on a given wave.
       * @param {integer} waveIndex The wave to check.
       * @returns {boolean} If this game mode has a fixed battle on this wave
       */
      isFixedBattle(waveIndex: integer): boolean;
      /**
       * Returns the config for the fixed battle for a particular wave.
       * @param {integer} waveIndex The wave to check.
       * @returns {boolean} The fixed battle for this wave.
       */
      getFixedBattle(waveIndex: integer): FixedBattleConfig;
      getClearScoreBonus(): integer;
      getEnemyModifierChance(isBoss: boolean): integer;
      getName(): string;
      static getModeName(modeId: GameModes): string;
  }
  export declare function getGameMode(gameMode: GameModes): GameMode;
  export {};
  
}

declare namespace PokeRogue {
  import Phaser from "phaser";
  //import BattleScene from "./battle-scene";
  //import { SettingGamepad } from "#app/system/settings/settings-gamepad.js";
  //import { SettingKeyboard } from "#app/system/settings/settings-keyboard";
  //import { Button } from "#enums/buttons";
  //import { Device } from "#enums/devices";
  export interface DeviceMapping {
      [key: string]: number;
  }
  export interface IconsMapping {
      [key: string]: string;
  }
  export interface SettingMapping {
      [key: string]: Button;
  }
  export interface MappingLayout {
      [key: string]: SettingGamepad | SettingKeyboard | number;
  }
  export interface InterfaceConfig {
      padID: string;
      padType: string;
      deviceMapping: DeviceMapping;
      icons: IconsMapping;
      settings: SettingMapping;
      default: MappingLayout;
      custom?: MappingLayout;
  }
  declare module "phaser" {
      namespace Input {
          namespace Gamepad {
              interface GamepadPlugin {
                  /**
                   * Refreshes the list of connected Gamepads.
                   * This is called automatically when a gamepad is connected or disconnected, and during the update loop.
                   */
                  refreshPads(): void;
              }
          }
      }
  }
  /**
   * Manages and handles all input controls for the game, including keyboard and gamepad interactions.
   *
   * @remarks
   * This class is designed to centralize input management across the game. It facilitates the setup,
   * configuration, and handling of all game inputs, making it easier to manage various input devices
   * such as keyboards and gamepads. The class provides methods for setting up input devices, handling
   * their events, and responding to changes in input state (e.g., button presses, releases).
   *
   * The `InputsController` class also includes mechanisms to handle game focus events to ensure input
   * states are correctly reset and managed when the game loses or regains focus, maintaining robust
   * and responsive control handling throughout the game's lifecycle.
   *
   * Key responsibilities include:
   * - Initializing and configuring gamepad and keyboard controls.
   * - Emitting events related to specific input actions.
   * - Responding to external changes such as gamepad connection/disconnection.
   * - Managing game state transitions in response to input events, particularly focus loss and recovery.
   *
   * Usage of this class is intended to simplify input management across various parts of the game,
   * providing a unified interface for all input-related interactions.
   */
  export declare class InputsController {
      public gamepads;
      public scene;
      events: Phaser.Events.EventEmitter;
      public buttonLock;
      public interactions;
      public configs;
      gamepadSupport: boolean;
      selectedDevice: any;
      public disconnectedGamepads;
      lastSource: string;
      public inputInterval;
      public touchControls;
      /**
         * Initializes a new instance of the game control system, setting up initial state and configurations.
         *
         * @param scene - The Phaser scene associated with this instance.
         *
         * @remarks
         * This constructor initializes the game control system with necessary setups for handling inputs.
         * It prepares an interactions array indexed by button identifiers and configures default states for each button.
         * Specific buttons like MENU and STATS are set not to repeat their actions.
         * It concludes by calling the `init` method to complete the setup.
         */
      constructor(scene: PokeRogue.BattleScene);
      /**
         * Sets up event handlers and initializes gamepad and keyboard controls.
         *
         * @remarks
         * This method configures event listeners for both gamepad and keyboard inputs.
         * It handles gamepad connections/disconnections and button press events, and ensures keyboard controls are set up.
         * Additionally, it manages the game's behavior when it loses focus to prevent unwanted game actions during this state.
         */
      init(): void;
      /**
         * Handles actions to take when the game loses focus, such as deactivating pressed keys.
         *
         * @remarks
         * This method is triggered when the game or the browser tab loses focus. It ensures that any keys pressed are deactivated to prevent stuck keys affecting gameplay when the game is not active.
         */
      loseFocus(): void;
      /**
         * Enables or disables support for gamepad input.
         *
         * @param value - A boolean indicating whether gamepad support should be enabled (true) or disabled (false).
         *
         * @remarks
         * This method toggles gamepad support. If disabled, it also ensures that all currently pressed gamepad buttons are deactivated to avoid stuck inputs.
         */
      setGamepadSupport(value: boolean): void;
      /**
         * Sets the currently chosen gamepad and initializes related settings.
         * This method first deactivates any active key presses and then initializes the gamepad settings.
         *
         * @param gamepad - The identifier of the gamepad to set as chosen.
         */
      setChosenGamepad(gamepad: String): void;
      /**
         * Sets the currently chosen keyboard layout and initializes related settings.
         *
         * @param layoutKeyboard - The identifier of the keyboard layout to set as chosen.
         */
      setChosenKeyboardLayout(layoutKeyboard: String): void;
      /**
         * Retrieves the identifiers of all connected gamepads, excluding any that are currently marked as disconnected.
         * @returns Array<String> An array of strings representing the IDs of the connected gamepads.
         */
      getGamepadsName(): Array<String>;
      /**
         * Initializes the chosen gamepad by setting its identifier in the local storage and updating the UI to reflect the chosen gamepad.
         * If a gamepad name is provided, it uses that as the chosen gamepad; otherwise, it defaults to the currently chosen gamepad.
         * @param gamepadName Optional parameter to specify the name of the gamepad to initialize as chosen.
         */
      initChosenGamepad(gamepadName?: String): void;
      /**
         * Initializes the chosen keyboard layout by setting its identifier in the local storage and updating the UI to reflect the chosen layout.
         * If a layout name is provided, it uses that as the chosen layout; otherwise, it defaults to the currently chosen layout.
         * @param layoutKeyboard Optional parameter to specify the name of the keyboard layout to initialize as chosen.
         */
      initChosenLayoutKeyboard(layoutKeyboard?: String): void;
      /**
         * Handles the disconnection of a gamepad by adding its identifier to a list of disconnected gamepads.
         * This is necessary because Phaser retains memory of previously connected gamepads, and without tracking
         * disconnections, it would be impossible to determine the connection status of gamepads. This method ensures
         * that disconnected gamepads are recognized and can be appropriately hidden in the gamepad selection menu.
         *
         * @param thisGamepad The gamepad that has been disconnected.
         */
      onDisconnect(thisGamepad: Phaser.Input.Gamepad.Gamepad): void;
      /**
         * Updates the tracking of disconnected gamepads when a gamepad is reconnected.
         * It removes the reconnected gamepad's identifier from the `disconnectedGamepads` array,
         * effectively updating its status to connected.
         *
         * @param thisGamepad The gamepad that has been reconnected.
         */
      onReconnect(thisGamepad: Phaser.Input.Gamepad.Gamepad): void;
      /**
         * Initializes or updates configurations for connected gamepads.
         * It retrieves the names of all connected gamepads, sets up their configurations according to stored or default settings,
         * and ensures these configurations are saved. If the connected gamepad is the currently chosen one,
         * it reinitializes the chosen gamepad settings.
         *
         * @param thisGamepad The gamepad that is being set up.
         */
      setupGamepad(thisGamepad: Phaser.Input.Gamepad.Gamepad): void;
      /**
         * Initializes or updates configurations for connected keyboards.
         */
      setupKeyboard(): void;
      /**
         * Refreshes and re-indexes the list of connected gamepads.
         *
         * @remarks
         * This method updates the list of gamepads to exclude any that are undefined.
         * It corrects the index of each gamepad to account for any previously undefined entries,
         * ensuring that all gamepads are properly indexed and can be accurately referenced within the game.
         */
      refreshGamepads(): void;
      /**
         * Ensures the keyboard is initialized by checking if there is an active configuration for the keyboard.
         * If not, it sets up the keyboard with default configurations.
         */
      ensureKeyboardIsInit(): void;
      /**
         * Handles the keydown event for the keyboard.
         *
         * @param event The keyboard event.
         */
      keyboardKeyDown(event: any): void;
      /**
         * Handles the keyup event for the keyboard.
         *
         * @param event The keyboard event.
         */
      keyboardKeyUp(event: any): void;
      /**
         * Handles button press events on a gamepad. This method sets the gamepad as chosen on the first input if no gamepad is currently chosen.
         * It checks if gamepad support is enabled and if the event comes from the chosen gamepad. If so, it maps the button press to a specific
         * action using a custom configuration, emits an event for the button press, and records the time of the action.
         *
         * @param pad The gamepad on which the button was pressed.
         * @param button The specific button that was pressed.
         * @param value The intensity or value of the button press, if applicable.
         */
      gamepadButtonDown(pad: Phaser.Input.Gamepad.Gamepad, button: Phaser.Input.Gamepad.Button, value: number): void;
      /**
         * Responds to a button release event on a gamepad by checking if the gamepad is supported and currently chosen.
         * If conditions are met, it identifies the configured action for the button, emits an event signaling the button release,
         * and clears the record of the button.
         *
         * @param pad The gamepad from which the button was released.
         * @param button The specific button that was released.
         * @param value The intensity or value of the button release, if applicable.
         */
      gamepadButtonUp(pad: Phaser.Input.Gamepad.Gamepad, button: Phaser.Input.Gamepad.Button, value: number): void;
      /**
         * Retrieves the configuration object for a gamepad based on its identifier. The method identifies specific gamepad models
         * based on substrings in the identifier and returns predefined configurations for recognized models.
         * If no specific configuration matches, it defaults to a generic gamepad configuration.
         *
         * @param id The identifier string of the gamepad.
         * @returns InterfaceConfig The configuration object corresponding to the identified gamepad type.
         */
      getConfig(id: string): InterfaceConfig;
      /**
         * Retrieves the configuration object for a keyboard layout based on its identifier.
         *
         * @param id The identifier string of the keyboard layout.
         * @returns InterfaceConfig The configuration object corresponding to the identified keyboard layout.
         */
      getConfigKeyboard(id: string): InterfaceConfig;
      /**
         * Deactivates all currently pressed keys.
         */
      deactivatePressedKey(): void;
      /**
         * Retrieves the active configuration for the currently chosen device.
         * It checks if a specific device ID is stored in configurations and returns it.
         *
         * @returns InterfaceConfig The configuration object for the active gamepad, or null if not set.
         */
      getActiveConfig(device: PokeRogue.enums.Device): any;
      getIconForLatestInputRecorded(settingName: any): any;
      getLastSourceDevice(): Device;
      getLastSourceConfig(): any;
      getLastSourceType(): any;
      /**
         * Injects a custom mapping configuration into the configuration for a specific gamepad.
         * If the device does not have an existing configuration, it initializes one first.
         *
         * @param selectedDevice The identifier of the device to configure.
         * @param mappingConfigs The mapping configuration to apply to the device.
         */
      injectConfig(selectedDevice: string, mappingConfigs: any): void;
      resetConfigs(): void;
      /**
         * Swaps a binding in the configuration.
         *
         * @param config The configuration object.
         * @param settingName The name of the setting to swap.
         * @param pressedButton The button that was pressed.
         */
      assignBinding(config: any, settingName: any, pressedButton: any): boolean;
  }
  
}

declare namespace PokeRogue.interfaces {
  export interface Localizable {
      localize(): void;
  }
  export interface TranslationEntries {
      [key: string]: string | {
          [key: string]: string;
      };
  }
  export interface SimpleTranslationEntries {
      [key: string]: string;
  }
  export interface MoveTranslationEntry {
      name: string;
      effect: string;
  }
  export interface MoveTranslationEntries {
      [key: string]: MoveTranslationEntry;
  }
  export interface AbilityTranslationEntry {
      name: string;
      description: string;
  }
  export interface AbilityTranslationEntries {
      [key: string]: AbilityTranslationEntry;
  }
  export interface ModifierTypeTranslationEntry {
      name?: string;
      description?: string;
      extra?: SimpleTranslationEntries;
  }
  export interface ModifierTypeTranslationEntries {
      ModifierType: {
          [key: string]: ModifierTypeTranslationEntry;
      };
      SpeciesBoosterItem: {
          [key: string]: ModifierTypeTranslationEntry;
      };
      AttackTypeBoosterItem: SimpleTranslationEntries;
      TempBattleStatBoosterItem: SimpleTranslationEntries;
      TempBattleStatBoosterStatName: SimpleTranslationEntries;
      BaseStatBoosterItem: SimpleTranslationEntries;
      EvolutionItem: SimpleTranslationEntries;
      FormChangeItem: SimpleTranslationEntries;
  }
  export interface PokemonInfoTranslationEntries {
      Stat: SimpleTranslationEntries;
      Type: SimpleTranslationEntries;
  }
  export interface BerryTranslationEntry {
      name: string;
      effect: string;
  }
  export interface BerryTranslationEntries {
      [key: string]: BerryTranslationEntry;
  }
  export interface StatusEffectTranslationEntries {
      [key: string]: StatusEffectTranslationEntry;
  }
  export interface StatusEffectTranslationEntry {
      name: string;
      obtain: string;
      obtainSource: string;
      activation: string;
      overlap: string;
      heal: string;
      description: string;
  }
  export interface AchievementTranslationEntry {
      name?: string;
      description?: string;
  }
  export interface AchievementTranslationEntries {
      [key: string]: AchievementTranslationEntry;
  }
  export interface DialogueTranslationEntry {
      [key: number]: string;
  }
  export interface DialogueTranslationCategory {
      [category: string]: DialogueTranslationEntry;
  }
  export interface DialogueTranslationEntries {
      [trainertype: string]: DialogueTranslationCategory;
  }
  
}

declare namespace PokeRogue {
  /// <reference path="inputs-controller.d.ts" />
  /// <reference path="main.d.ts" />
  //import { SceneBase } from "./scene-base";
  export declare class LoadingScene extends PokeRogue.SceneBase {
      readonly LOAD_EVENTS: typeof import("phaser").Loader.Events;
      constructor();
      preload(): void;
      loadLoadingScreen(): void;
      get gameHeight(): number;
      get gameWidth(): number;
      create(): Promise<void>;
  }
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const abilityTriggers: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { AbilityTranslationEntries } from "#app/interfaces/locales.js";
  export declare const ability: PokeRogue.interfaces.AbilityTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { AchievementTranslationEntries } from "#app/interfaces/locales.js";
  export declare const PGMachv: PokeRogue.interfaces.AchievementTranslationEntries;
  export declare const PGFachv: PokeRogue.interfaces.AchievementTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const battleMessageUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const battle: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { BerryTranslationEntries } from "#app/interfaces/locales";
  export declare const berry: PokeRogue.interfaces.BerryTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const bgmName: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const biome: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { TranslationEntries } from "#app/interfaces/locales";
  export declare const challenges: PokeRogue.interfaces.TranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const commandUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const common: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  export declare const deConfig: {
      ability: import("../../interfaces/locales").AbilityTranslationEntries;
      abilityTriggers: import("../../interfaces/locales").SimpleTranslationEntries;
      battle: import("../../interfaces/locales").SimpleTranslationEntries;
      battleMessageUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      berry: import("../../interfaces/locales").BerryTranslationEntries;
      bgmName: import("../../interfaces/locales").SimpleTranslationEntries;
      biome: import("../../interfaces/locales").SimpleTranslationEntries;
      challenges: import("../../interfaces/locales").TranslationEntries;
      commandUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      common: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMachv: import("../../interfaces/locales").AchievementTranslationEntries;
      PGFachv: import("../../interfaces/locales").AchievementTranslationEntries;
      PGMdialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGFdialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGMbattleSpecDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGFbattleSpecDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMmiscDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGFmiscDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMdoubleBattleDialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGFdoubleBattleDialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      egg: import("../../interfaces/locales").SimpleTranslationEntries;
      fightUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      gameMode: import("../../interfaces/locales").SimpleTranslationEntries;
      gameStatsUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      growth: import("../../interfaces/locales").SimpleTranslationEntries;
      menu: import("../../interfaces/locales").SimpleTranslationEntries;
      menuUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      modifierType: import("../../interfaces/locales").ModifierTypeTranslationEntries;
      move: import("../../interfaces/locales").MoveTranslationEntries;
      nature: import("../../interfaces/locales").SimpleTranslationEntries;
      pokeball: import("../../interfaces/locales").SimpleTranslationEntries;
      pokemon: import("../../interfaces/locales").SimpleTranslationEntries;
      pokemonInfo: import("../../interfaces/locales").PokemonInfoTranslationEntries;
      pokemonInfoContainer: import("../../interfaces/locales").SimpleTranslationEntries;
      saveSlotSelectUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      settings: import("../../interfaces/locales").SimpleTranslationEntries;
      splashMessages: import("../../interfaces/locales").SimpleTranslationEntries;
      starterSelectUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      statusEffect: import("../../interfaces/locales").StatusEffectTranslationEntries;
      titles: import("../../interfaces/locales").SimpleTranslationEntries;
      trainerClasses: import("../../interfaces/locales").SimpleTranslationEntries;
      trainerNames: import("../../interfaces/locales").SimpleTranslationEntries;
      tutorial: import("../../interfaces/locales").SimpleTranslationEntries;
      voucher: import("../../interfaces/locales").SimpleTranslationEntries;
      weather: import("../../interfaces/locales").SimpleTranslationEntries;
      partyUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
  };
  
}

declare namespace PokeRogue.locales.de {
  //import { DialogueTranslationEntries, SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const PGMdialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGFdialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGMbattleSpecDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGFbattleSpecDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGMmiscDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGFmiscDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGMdoubleBattleDialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGFdoubleBattleDialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const egg: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const fightUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const gameMode: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const gameStatsUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const growth: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const menuUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The menu namespace holds most miscellaneous text that isn't directly part of the game's
   * contents or directly related to Pokemon data. This includes menu navigation, settings,
   * account interactions, descriptive text, etc.
   */
  export declare const menu: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { ModifierTypeTranslationEntries } from "#app/interfaces/locales";
  export declare const modifierType: PokeRogue.interfaces.ModifierTypeTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { MoveTranslationEntries } from "#app/interfaces/locales";
  export declare const move: PokeRogue.interfaces.MoveTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const nature: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const partyUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokeball: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemonInfoContainer: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { PokemonInfoTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemonInfo: PokeRogue.interfaces.PokemonInfoTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemon: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const saveSlotSelectUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales.js";
  export declare const settings: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const splashMessages: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The menu namespace holds most miscellaneous text that isn't directly part of the game's
   * contents or directly related to Pokemon data. This includes menu navigation, settings,
   * account interactions, descriptive text, etc.
   */
  export declare const starterSelectUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { StatusEffectTranslationEntries } from "#app/interfaces/locales.js";
  export declare const statusEffect: PokeRogue.interfaces.StatusEffectTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const titles: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const trainerClasses: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const trainerNames: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const tutorial: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const voucher: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.de {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The weather namespace holds text displayed when weather is active during a battle
   */
  export declare const weather: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const abilityTriggers: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { AbilityTranslationEntries } from "#app/interfaces/locales.js";
  export declare const ability: PokeRogue.interfaces.AbilityTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { AchievementTranslationEntries } from "#app/interfaces/locales.js";
  export declare const PGMachv: PokeRogue.interfaces.AchievementTranslationEntries;
  export declare const PGFachv: PokeRogue.interfaces.AchievementTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const battleMessageUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const battle: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { BerryTranslationEntries } from "#app/interfaces/locales";
  export declare const berry: PokeRogue.interfaces.BerryTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const bgmName: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const biome: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { TranslationEntries } from "#app/interfaces/locales.js";
  export declare const challenges: PokeRogue.interfaces.TranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const commandUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const common: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  export declare const enConfig: {
      ability: import("../../interfaces/locales.js").AbilityTranslationEntries;
      abilityTriggers: import("../../interfaces/locales.js").SimpleTranslationEntries;
      battle: import("../../interfaces/locales.js").SimpleTranslationEntries;
      battleMessageUiHandler: import("../../interfaces/locales.js").SimpleTranslationEntries;
      berry: import("../../interfaces/locales.js").BerryTranslationEntries;
      bgmName: import("../../interfaces/locales.js").SimpleTranslationEntries;
      biome: import("../../interfaces/locales.js").SimpleTranslationEntries;
      challenges: import("../../interfaces/locales.js").TranslationEntries;
      commandUiHandler: import("../../interfaces/locales.js").SimpleTranslationEntries;
      common: import("../../interfaces/locales.js").SimpleTranslationEntries;
      PGMachv: import("../../interfaces/locales.js").AchievementTranslationEntries;
      PGFachv: import("../../interfaces/locales.js").AchievementTranslationEntries;
      PGMdialogue: import("../../interfaces/locales.js").DialogueTranslationEntries;
      PGFdialogue: import("../../interfaces/locales.js").DialogueTranslationEntries;
      PGMbattleSpecDialogue: import("../../interfaces/locales.js").SimpleTranslationEntries;
      PGFbattleSpecDialogue: import("../../interfaces/locales.js").SimpleTranslationEntries;
      PGMmiscDialogue: import("../../interfaces/locales.js").SimpleTranslationEntries;
      PGFmiscDialogue: import("../../interfaces/locales.js").SimpleTranslationEntries;
      PGMdoubleBattleDialogue: import("../../interfaces/locales.js").DialogueTranslationEntries;
      PGFdoubleBattleDialogue: import("../../interfaces/locales.js").DialogueTranslationEntries;
      egg: import("../../interfaces/locales.js").SimpleTranslationEntries;
      fightUiHandler: import("../../interfaces/locales.js").SimpleTranslationEntries;
      gameMode: import("../../interfaces/locales.js").SimpleTranslationEntries;
      gameStatsUiHandler: import("../../interfaces/locales.js").SimpleTranslationEntries;
      growth: import("../../interfaces/locales.js").SimpleTranslationEntries;
      menu: import("../../interfaces/locales.js").SimpleTranslationEntries;
      menuUiHandler: import("../../interfaces/locales.js").SimpleTranslationEntries;
      modifierType: import("../../interfaces/locales.js").ModifierTypeTranslationEntries;
      move: import("../../interfaces/locales.js").MoveTranslationEntries;
      nature: import("../../interfaces/locales.js").SimpleTranslationEntries;
      partyUiHandler: import("../../interfaces/locales.js").SimpleTranslationEntries;
      pokeball: import("../../interfaces/locales.js").SimpleTranslationEntries;
      pokemon: import("../../interfaces/locales.js").SimpleTranslationEntries;
      pokemonInfo: import("../../interfaces/locales.js").PokemonInfoTranslationEntries;
      pokemonInfoContainer: import("../../interfaces/locales.js").SimpleTranslationEntries;
      saveSlotSelectUiHandler: import("../../interfaces/locales.js").SimpleTranslationEntries;
      settings: import("../../interfaces/locales.js").SimpleTranslationEntries;
      splashMessages: import("../../interfaces/locales.js").SimpleTranslationEntries;
      starterSelectUiHandler: import("../../interfaces/locales.js").SimpleTranslationEntries;
      statusEffect: import("../../interfaces/locales.js").StatusEffectTranslationEntries;
      titles: import("../../interfaces/locales.js").SimpleTranslationEntries;
      trainerClasses: import("../../interfaces/locales.js").SimpleTranslationEntries;
      trainerNames: import("../../interfaces/locales.js").SimpleTranslationEntries;
      tutorial: import("../../interfaces/locales.js").SimpleTranslationEntries;
      voucher: import("../../interfaces/locales.js").SimpleTranslationEntries;
      weather: import("../../interfaces/locales.js").SimpleTranslationEntries;
  };
  
}

declare namespace PokeRogue.locales.en {
  //import { DialogueTranslationEntries, SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const PGMdialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGFdialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGMbattleSpecDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGFbattleSpecDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGMmiscDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGFmiscDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGMdoubleBattleDialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGFdoubleBattleDialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const egg: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const fightUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const gameMode: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const gameStatsUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const growth: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const menuUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The menu namespace holds most miscellaneous text that isn't directly part of the game's
   * contents or directly related to Pokemon data. This includes menu navigation, settings,
   * account interactions, descriptive text, etc.
   */
  export declare const menu: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { ModifierTypeTranslationEntries } from "#app/interfaces/locales";
  export declare const modifierType: PokeRogue.interfaces.ModifierTypeTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { MoveTranslationEntries } from "#app/interfaces/locales";
  export declare const move: PokeRogue.interfaces.MoveTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const nature: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const partyUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokeball: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemonInfoContainer: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { PokemonInfoTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemonInfo: PokeRogue.interfaces.PokemonInfoTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemon: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const saveSlotSelectUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales.js";
  export declare const settings: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const splashMessages: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The menu namespace holds most miscellaneous text that isn't directly part of the game's
   * contents or directly related to Pokemon data. This includes menu navigation, settings,
   * account interactions, descriptive text, etc.
   */
  export declare const starterSelectUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { StatusEffectTranslationEntries } from "#app/interfaces/locales.js";
  export declare const statusEffect: PokeRogue.interfaces.StatusEffectTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const titles: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const trainerClasses: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const trainerNames: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const tutorial: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const voucher: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.en {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The weather namespace holds text displayed when weather is active during a battle
   */
  export declare const weather: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const abilityTriggers: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { AbilityTranslationEntries } from "#app/interfaces/locales.js";
  export declare const ability: PokeRogue.interfaces.AbilityTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { AchievementTranslationEntries } from "#app/interfaces/locales.js";
  export declare const PGMachv: PokeRogue.interfaces.AchievementTranslationEntries;
  export declare const PGFachv: PokeRogue.interfaces.AchievementTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const battleMessageUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const battle: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { BerryTranslationEntries } from "#app/interfaces/locales";
  export declare const berry: PokeRogue.interfaces.BerryTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const bgmName: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const biome: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { TranslationEntries } from "#app/interfaces/locales";
  export declare const challenges: PokeRogue.interfaces.TranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const commandUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const common: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  export declare const esConfig: {
      ability: import("../../interfaces/locales").AbilityTranslationEntries;
      abilityTriggers: import("../../interfaces/locales").SimpleTranslationEntries;
      battle: import("../../interfaces/locales").SimpleTranslationEntries;
      battleMessageUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      berry: import("../../interfaces/locales").BerryTranslationEntries;
      bgmName: import("../../interfaces/locales").SimpleTranslationEntries;
      biome: import("../../interfaces/locales").SimpleTranslationEntries;
      challenges: import("../../interfaces/locales").TranslationEntries;
      commandUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      common: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMachv: import("../../interfaces/locales").AchievementTranslationEntries;
      PGFachv: import("../../interfaces/locales").AchievementTranslationEntries;
      PGMdialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGFdialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGMbattleSpecDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGFbattleSpecDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMmiscDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGFmiscDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMdoubleBattleDialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGFdoubleBattleDialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      egg: import("../../interfaces/locales").SimpleTranslationEntries;
      fightUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      gameMode: import("../../interfaces/locales").SimpleTranslationEntries;
      gameStatsUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      growth: import("../../interfaces/locales").SimpleTranslationEntries;
      menu: import("../../interfaces/locales").SimpleTranslationEntries;
      menuUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      modifierType: import("../../interfaces/locales").ModifierTypeTranslationEntries;
      move: import("../../interfaces/locales").MoveTranslationEntries;
      nature: import("../../interfaces/locales").SimpleTranslationEntries;
      pokeball: import("../../interfaces/locales").SimpleTranslationEntries;
      pokemon: import("../../interfaces/locales").SimpleTranslationEntries;
      pokemonInfo: import("../../interfaces/locales").PokemonInfoTranslationEntries;
      pokemonInfoContainer: import("../../interfaces/locales").SimpleTranslationEntries;
      saveSlotSelectUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      settings: import("../../interfaces/locales").SimpleTranslationEntries;
      splashMessages: import("../../interfaces/locales").SimpleTranslationEntries;
      starterSelectUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      statusEffect: import("../../interfaces/locales").StatusEffectTranslationEntries;
      titles: import("../../interfaces/locales").SimpleTranslationEntries;
      trainerClasses: import("../../interfaces/locales").SimpleTranslationEntries;
      trainerNames: import("../../interfaces/locales").SimpleTranslationEntries;
      tutorial: import("../../interfaces/locales").SimpleTranslationEntries;
      voucher: import("../../interfaces/locales").SimpleTranslationEntries;
      weather: import("../../interfaces/locales").SimpleTranslationEntries;
      partyUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
  };
  
}

declare namespace PokeRogue.locales.es {
  //import { DialogueTranslationEntries, SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const PGMdialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGFdialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGMbattleSpecDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGFbattleSpecDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGMmiscDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGFmiscDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGMdoubleBattleDialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGFdoubleBattleDialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const egg: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const fightUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const gameMode: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const gameStatsUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const growth: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const menuUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The menu namespace holds most miscellaneous text that isn't directly part of the game's
   * contents or directly related to Pokemon data. This includes menu navigation, settings,
   * account interactions, descriptive text, etc.
   */
  export declare const menu: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { ModifierTypeTranslationEntries } from "#app/interfaces/locales";
  export declare const modifierType: PokeRogue.interfaces.ModifierTypeTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { MoveTranslationEntries } from "#app/interfaces/locales";
  export declare const move: PokeRogue.interfaces.MoveTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const nature: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const partyUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokeball: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemonInfoContainer: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { PokemonInfoTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemonInfo: PokeRogue.interfaces.PokemonInfoTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemon: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const saveSlotSelectUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales.js";
  export declare const settings: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const splashMessages: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The menu namespace holds most miscellaneous text that isn't directly part of the game's
   * contents or directly related to Pokemon data. This includes menu navigation, settings,
   * account interactions, descriptive text, etc.
   */
  export declare const starterSelectUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { StatusEffectTranslationEntries } from "#app/interfaces/locales.js";
  export declare const statusEffect: PokeRogue.interfaces.StatusEffectTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const titles: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const trainerClasses: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const trainerNames: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const tutorial: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const voucher: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.es {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The weather namespace holds text displayed when weather is active during a battle
   */
  export declare const weather: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const abilityTriggers: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { AbilityTranslationEntries } from "#app/interfaces/locales.js";
  export declare const ability: PokeRogue.interfaces.AbilityTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { AchievementTranslationEntries } from "#app/interfaces/locales.js";
  export declare const PGMachv: PokeRogue.interfaces.AchievementTranslationEntries;
  export declare const PGFachv: PokeRogue.interfaces.AchievementTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const battleMessageUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const battle: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { BerryTranslationEntries } from "#app/interfaces/locales";
  export declare const berry: PokeRogue.interfaces.BerryTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const bgmName: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const biome: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { TranslationEntries } from "#app/interfaces/locales";
  export declare const challenges: PokeRogue.interfaces.TranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const commandUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const common: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  export declare const frConfig: {
      ability: import("../../interfaces/locales").AbilityTranslationEntries;
      abilityTriggers: import("../../interfaces/locales").SimpleTranslationEntries;
      battle: import("../../interfaces/locales").SimpleTranslationEntries;
      battleMessageUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      berry: import("../../interfaces/locales").BerryTranslationEntries;
      bgmName: import("../../interfaces/locales").SimpleTranslationEntries;
      biome: import("../../interfaces/locales").SimpleTranslationEntries;
      challenges: import("../../interfaces/locales").TranslationEntries;
      commandUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      common: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMachv: import("../../interfaces/locales").AchievementTranslationEntries;
      PGFachv: import("../../interfaces/locales").AchievementTranslationEntries;
      PGMdialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGFdialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGMbattleSpecDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGFbattleSpecDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMmiscDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGFmiscDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMdoubleBattleDialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGFdoubleBattleDialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      egg: import("../../interfaces/locales").SimpleTranslationEntries;
      fightUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      gameMode: import("../../interfaces/locales").SimpleTranslationEntries;
      gameStatsUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      growth: import("../../interfaces/locales").SimpleTranslationEntries;
      menu: import("../../interfaces/locales").SimpleTranslationEntries;
      menuUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      modifierType: import("../../interfaces/locales").ModifierTypeTranslationEntries;
      move: import("../../interfaces/locales").MoveTranslationEntries;
      nature: import("../../interfaces/locales").SimpleTranslationEntries;
      pokeball: import("../../interfaces/locales").SimpleTranslationEntries;
      pokemon: import("../../interfaces/locales").SimpleTranslationEntries;
      pokemonInfo: import("../../interfaces/locales").PokemonInfoTranslationEntries;
      pokemonInfoContainer: import("../../interfaces/locales").SimpleTranslationEntries;
      saveSlotSelectUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      settings: import("../../interfaces/locales").SimpleTranslationEntries;
      splashMessages: import("../../interfaces/locales").SimpleTranslationEntries;
      starterSelectUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      statusEffect: import("../../interfaces/locales").StatusEffectTranslationEntries;
      titles: import("../../interfaces/locales").SimpleTranslationEntries;
      trainerClasses: import("../../interfaces/locales").SimpleTranslationEntries;
      trainerNames: import("../../interfaces/locales").SimpleTranslationEntries;
      tutorial: import("../../interfaces/locales").SimpleTranslationEntries;
      voucher: import("../../interfaces/locales").SimpleTranslationEntries;
      weather: import("../../interfaces/locales").SimpleTranslationEntries;
      partyUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
  };
  
}

declare namespace PokeRogue.locales.fr {
  //import { DialogueTranslationEntries, SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const PGMdialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGFdialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGMbattleSpecDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGFbattleSpecDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGMmiscDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGFmiscDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGMdoubleBattleDialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGFdoubleBattleDialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const egg: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const fightUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const gameMode: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const gameStatsUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const growth: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const menuUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const menu: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { ModifierTypeTranslationEntries } from "#app/interfaces/locales";
  export declare const modifierType: PokeRogue.interfaces.ModifierTypeTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { MoveTranslationEntries } from "#app/interfaces/locales";
  export declare const move: PokeRogue.interfaces.MoveTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const nature: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const partyUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokeball: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemonInfoContainer: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { PokemonInfoTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemonInfo: PokeRogue.interfaces.PokemonInfoTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemon: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const saveSlotSelectUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales.js";
  export declare const settings: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const splashMessages: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The menu namespace holds most miscellaneous text that isn't directly part of the game's
   * contents or directly related to Pokemon data. This includes menu navigation, settings,
   * account interactions, descriptive text, etc.
   */
  export declare const starterSelectUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { StatusEffectTranslationEntries } from "#app/interfaces/locales.js";
  export declare const statusEffect: PokeRogue.interfaces.StatusEffectTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const titles: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const trainerClasses: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const trainerNames: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const tutorial: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const voucher: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.fr {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The weather namespace holds text displayed when weather is active during a battle
   */
  export declare const weather: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const abilityTriggers: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { AbilityTranslationEntries } from "#app/interfaces/locales.js";
  export declare const ability: PokeRogue.interfaces.AbilityTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { AchievementTranslationEntries } from "#app/interfaces/locales.js";
  export declare const PGMachv: PokeRogue.interfaces.AchievementTranslationEntries;
  export declare const PGFachv: PokeRogue.interfaces.AchievementTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const battleMessageUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const battle: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { BerryTranslationEntries } from "#app/interfaces/locales";
  export declare const berry: PokeRogue.interfaces.BerryTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const bgmName: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const biome: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { TranslationEntries } from "#app/interfaces/locales";
  export declare const challenges: PokeRogue.interfaces.TranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const commandUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const common: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  export declare const itConfig: {
      ability: import("../../interfaces/locales").AbilityTranslationEntries;
      abilityTriggers: import("../../interfaces/locales").SimpleTranslationEntries;
      battle: import("../../interfaces/locales").SimpleTranslationEntries;
      battleMessageUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      berry: import("../../interfaces/locales").BerryTranslationEntries;
      bgmName: import("../../interfaces/locales").SimpleTranslationEntries;
      biome: import("../../interfaces/locales").SimpleTranslationEntries;
      challenges: import("../../interfaces/locales").TranslationEntries;
      commandUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      common: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMachv: import("../../interfaces/locales").AchievementTranslationEntries;
      PGFachv: import("../../interfaces/locales").AchievementTranslationEntries;
      PGMdialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGFdialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGMbattleSpecDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGFbattleSpecDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMmiscDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGFmiscDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMdoubleBattleDialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGFdoubleBattleDialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      egg: import("../../interfaces/locales").SimpleTranslationEntries;
      fightUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      gameMode: import("../../interfaces/locales").SimpleTranslationEntries;
      gameStatsUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      growth: import("../../interfaces/locales").SimpleTranslationEntries;
      menu: import("../../interfaces/locales").SimpleTranslationEntries;
      menuUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      modifierType: import("../../interfaces/locales").ModifierTypeTranslationEntries;
      move: import("../../interfaces/locales").MoveTranslationEntries;
      nature: import("../../interfaces/locales").SimpleTranslationEntries;
      pokeball: import("../../interfaces/locales").SimpleTranslationEntries;
      pokemon: import("../../interfaces/locales").SimpleTranslationEntries;
      pokemonInfo: import("../../interfaces/locales").PokemonInfoTranslationEntries;
      pokemonInfoContainer: import("../../interfaces/locales").SimpleTranslationEntries;
      saveSlotSelectUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      settings: import("../../interfaces/locales").SimpleTranslationEntries;
      splashMessages: import("../../interfaces/locales").SimpleTranslationEntries;
      starterSelectUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      statusEffect: import("../../interfaces/locales").StatusEffectTranslationEntries;
      titles: import("../../interfaces/locales").SimpleTranslationEntries;
      trainerClasses: import("../../interfaces/locales").SimpleTranslationEntries;
      trainerNames: import("../../interfaces/locales").SimpleTranslationEntries;
      tutorial: import("../../interfaces/locales").SimpleTranslationEntries;
      voucher: import("../../interfaces/locales").SimpleTranslationEntries;
      weather: import("../../interfaces/locales").SimpleTranslationEntries;
      partyUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
  };
  
}

declare namespace PokeRogue.locales.it {
  //import { DialogueTranslationEntries, SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const PGMdialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGFdialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGMbattleSpecDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGFbattleSpecDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGMmiscDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGFmiscDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGMdoubleBattleDialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGFdoubleBattleDialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const egg: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const fightUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const gameMode: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const gameStatsUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const growth: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const menuUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The menu namespace holds most miscellaneous text that isn't directly part of the game's
   * contents or directly related to Pokemon data. This includes menu navigation, settings,
   * account interactions, descriptive text, etc.
   */
  export declare const menu: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { ModifierTypeTranslationEntries } from "#app/interfaces/locales";
  export declare const modifierType: PokeRogue.interfaces.ModifierTypeTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { MoveTranslationEntries } from "#app/interfaces/locales";
  export declare const move: PokeRogue.interfaces.MoveTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const nature: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const partyUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokeball: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemonInfoContainer: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { PokemonInfoTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemonInfo: PokeRogue.interfaces.PokemonInfoTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemon: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const saveSlotSelectUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales.js";
  export declare const settings: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const splashMessages: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The menu namespace holds most miscellaneous text that isn't directly part of the game's
   * contents or directly related to Pokemon data. This includes menu navigation, settings,
   * account interactions, descriptive text, etc.
   */
  export declare const starterSelectUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { StatusEffectTranslationEntries } from "#app/interfaces/locales.js";
  export declare const statusEffect: PokeRogue.interfaces.StatusEffectTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const titles: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const trainerClasses: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const trainerNames: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const tutorial: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const voucher: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.it {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The weather namespace holds text displayed when weather is active during a battle
   */
  export declare const weather: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const abilityTriggers: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { AbilityTranslationEntries } from "#app/interfaces/locales.js";
  /**
   * 본가 게임과 텍스트가 다를 경우 주석으로 표시
   */
  export declare const ability: PokeRogue.interfaces.AbilityTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { AchievementTranslationEntries } from "#app/interfaces/locales.js";
  export declare const PGMachv: PokeRogue.interfaces.AchievementTranslationEntries;
  export declare const PGFachv: PokeRogue.interfaces.AchievementTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const battleMessageUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const battle: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { BerryTranslationEntries } from "#app/interfaces/locales";
  export declare const berry: PokeRogue.interfaces.BerryTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const bgmName: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const biome: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { TranslationEntries } from "#app/interfaces/locales";
  export declare const challenges: PokeRogue.interfaces.TranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const commandUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const common: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  export declare const koConfig: {
      ability: import("../../interfaces/locales").AbilityTranslationEntries;
      abilityTriggers: import("../../interfaces/locales").SimpleTranslationEntries;
      battle: import("../../interfaces/locales").SimpleTranslationEntries;
      battleMessageUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      berry: import("../../interfaces/locales").BerryTranslationEntries;
      bgmName: import("../../interfaces/locales").SimpleTranslationEntries;
      biome: import("../../interfaces/locales").SimpleTranslationEntries;
      challenges: import("../../interfaces/locales").TranslationEntries;
      commandUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      common: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMachv: import("../../interfaces/locales").AchievementTranslationEntries;
      PGFachv: import("../../interfaces/locales").AchievementTranslationEntries;
      PGMdialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGFdialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGMbattleSpecDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGFbattleSpecDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMmiscDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGFmiscDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMdoubleBattleDialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGFdoubleBattleDialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      egg: import("../../interfaces/locales").SimpleTranslationEntries;
      fightUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      gameMode: import("../../interfaces/locales").SimpleTranslationEntries;
      gameStatsUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      growth: import("../../interfaces/locales").SimpleTranslationEntries;
      menu: import("../../interfaces/locales").SimpleTranslationEntries;
      menuUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      modifierType: import("../../interfaces/locales").ModifierTypeTranslationEntries;
      move: import("../../interfaces/locales").MoveTranslationEntries;
      nature: import("../../interfaces/locales").SimpleTranslationEntries;
      pokeball: import("../../interfaces/locales").SimpleTranslationEntries;
      pokemon: import("../../interfaces/locales").SimpleTranslationEntries;
      pokemonInfo: import("../../interfaces/locales").PokemonInfoTranslationEntries;
      pokemonInfoContainer: import("../../interfaces/locales").SimpleTranslationEntries;
      saveSlotSelectUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      settings: import("../../interfaces/locales").SimpleTranslationEntries;
      splashMessages: import("../../interfaces/locales").SimpleTranslationEntries;
      starterSelectUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      statusEffect: import("../../interfaces/locales").StatusEffectTranslationEntries;
      titles: import("../../interfaces/locales").SimpleTranslationEntries;
      trainerClasses: import("../../interfaces/locales").SimpleTranslationEntries;
      trainerNames: import("../../interfaces/locales").SimpleTranslationEntries;
      tutorial: import("../../interfaces/locales").SimpleTranslationEntries;
      voucher: import("../../interfaces/locales").SimpleTranslationEntries;
      weather: import("../../interfaces/locales").SimpleTranslationEntries;
      partyUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
  };
  
}

declare namespace PokeRogue.locales.ko {
  //import { DialogueTranslationEntries, SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const PGMdialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGFdialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGMbattleSpecDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGFbattleSpecDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGMmiscDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGFmiscDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGMdoubleBattleDialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGFdoubleBattleDialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const egg: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const fightUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const gameMode: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const gameStatsUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const growth: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const menuUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The menu namespace holds most miscellaneous text that isn't directly part of the game's
   * contents or directly related to Pokemon data. This includes menu navigation, settings,
   * account interactions, descriptive text, etc.
   */
  export declare const menu: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { ModifierTypeTranslationEntries } from "#app/interfaces/locales";
  export declare const modifierType: PokeRogue.interfaces.ModifierTypeTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { MoveTranslationEntries } from "#app/interfaces/locales";
  /**
   * 본가 게임과 텍스트가 다르거나 번역문을 완전히 확인하지 못한 경우 주석으로 표시
   */
  export declare const move: PokeRogue.interfaces.MoveTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const nature: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const partyUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokeball: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemonInfoContainer: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { PokemonInfoTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemonInfo: PokeRogue.interfaces.PokemonInfoTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemon: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const saveSlotSelectUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales.js";
  export declare const settings: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const splashMessages: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The menu namespace holds most miscellaneous text that isn't directly part of the game's
   * contents or directly related to Pokemon data. This includes menu navigation, settings,
   * account interactions, descriptive text, etc.
   */
  export declare const starterSelectUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { StatusEffectTranslationEntries } from "#app/interfaces/locales.js";
  export declare const statusEffect: PokeRogue.interfaces.StatusEffectTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const titles: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const trainerClasses: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const trainerNames: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const tutorial: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const voucher: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.ko {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The weather namespace holds text displayed when weather is active during a battle
   */
  export declare const weather: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const abilityTriggers: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { AbilityTranslationEntries } from "#app/interfaces/locales.js";
  export declare const ability: PokeRogue.interfaces.AbilityTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { AchievementTranslationEntries } from "#app/interfaces/locales.js";
  export declare const PGMachv: PokeRogue.interfaces.AchievementTranslationEntries;
  export declare const PGFachv: PokeRogue.interfaces.AchievementTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const battleMessageUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const battle: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { BerryTranslationEntries } from "#app/interfaces/locales";
  export declare const berry: PokeRogue.interfaces.BerryTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const bgmName: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const biome: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { TranslationEntries } from "#app/interfaces/locales";
  export declare const challenges: PokeRogue.interfaces.TranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const commandUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const common: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  export declare const ptBrConfig: {
      ability: import("../../interfaces/locales").AbilityTranslationEntries;
      abilityTriggers: import("../../interfaces/locales").SimpleTranslationEntries;
      battle: import("../../interfaces/locales").SimpleTranslationEntries;
      battleMessageUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      berry: import("../../interfaces/locales").BerryTranslationEntries;
      bgmName: import("../../interfaces/locales").SimpleTranslationEntries;
      biome: import("../../interfaces/locales").SimpleTranslationEntries;
      challenges: import("../../interfaces/locales").TranslationEntries;
      commandUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      common: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMachv: import("../../interfaces/locales").AchievementTranslationEntries;
      PGFachv: import("../../interfaces/locales").AchievementTranslationEntries;
      PGMdialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGFdialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGMbattleSpecDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGFbattleSpecDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMmiscDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGFmiscDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMdoubleBattleDialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGFdoubleBattleDialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      egg: import("../../interfaces/locales").SimpleTranslationEntries;
      fightUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      gameMode: import("../../interfaces/locales").SimpleTranslationEntries;
      gameStatsUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      growth: import("../../interfaces/locales").SimpleTranslationEntries;
      menu: import("../../interfaces/locales").SimpleTranslationEntries;
      menuUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      modifierType: import("../../interfaces/locales").ModifierTypeTranslationEntries;
      move: import("../../interfaces/locales").MoveTranslationEntries;
      nature: import("../../interfaces/locales").SimpleTranslationEntries;
      partyUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      pokeball: import("../../interfaces/locales").SimpleTranslationEntries;
      pokemon: import("../../interfaces/locales").SimpleTranslationEntries;
      pokemonInfo: import("../../interfaces/locales").PokemonInfoTranslationEntries;
      pokemonInfoContainer: import("../../interfaces/locales").SimpleTranslationEntries;
      saveSlotSelectUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      statusEffect: import("../../interfaces/locales").StatusEffectTranslationEntries;
      settings: import("../../interfaces/locales").SimpleTranslationEntries;
      splashMessages: import("../../interfaces/locales").SimpleTranslationEntries;
      starterSelectUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      titles: import("../../interfaces/locales").SimpleTranslationEntries;
      trainerClasses: import("../../interfaces/locales").SimpleTranslationEntries;
      trainerNames: import("../../interfaces/locales").SimpleTranslationEntries;
      tutorial: import("../../interfaces/locales").SimpleTranslationEntries;
      voucher: import("../../interfaces/locales").SimpleTranslationEntries;
      weather: import("../../interfaces/locales").SimpleTranslationEntries;
  };
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { DialogueTranslationEntries, SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const PGMdialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGFdialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGMbattleSpecDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGFbattleSpecDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGMmiscDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGFmiscDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGMdoubleBattleDialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGFdoubleBattleDialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const egg: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const fightUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const gameMode: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const gameStatsUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const growth: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const menuUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The menu namespace holds most miscellaneous text that isn't directly part of the game's
   * contents or directly related to Pokemon data. This includes menu navigation, settings,
   * account interactions, descriptive text, etc.
   */
  export declare const menu: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { ModifierTypeTranslationEntries } from "#app/interfaces/locales";
  export declare const modifierType: PokeRogue.interfaces.ModifierTypeTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { MoveTranslationEntries } from "#app/interfaces/locales";
  export declare const move: PokeRogue.interfaces.MoveTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const nature: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const partyUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokeball: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemonInfoContainer: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { PokemonInfoTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemonInfo: PokeRogue.interfaces.PokemonInfoTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemon: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const saveSlotSelectUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales.js";
  export declare const settings: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const splashMessages: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The menu namespace holds most miscellaneous text that isn't directly part of the game's
   * contents or directly related to Pokemon data. This includes menu navigation, settings,
   * account interactions, descriptive text, etc.
   */
  export declare const starterSelectUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { StatusEffectTranslationEntries } from "#app/interfaces/locales.js";
  export declare const statusEffect: PokeRogue.interfaces.StatusEffectTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const titles: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const trainerClasses: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const trainerNames: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const tutorial: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const voucher: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.pt_BR {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The weather namespace holds text displayed when weather is active during a battle
   */
  export declare const weather: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const abilityTriggers: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { AbilityTranslationEntries } from "#app/interfaces/locales.js";
  export declare const ability: PokeRogue.interfaces.AbilityTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { AchievementTranslationEntries } from "#app/interfaces/locales.js";
  export declare const PGMachv: PokeRogue.interfaces.AchievementTranslationEntries;
  export declare const PGFachv: PokeRogue.interfaces.AchievementTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const battleMessageUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const battle: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { BerryTranslationEntries } from "#app/interfaces/locales";
  export declare const berry: PokeRogue.interfaces.BerryTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const bgmName: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const biome: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { TranslationEntries } from "#app/interfaces/locales";
  export declare const challenges: PokeRogue.interfaces.TranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const commandUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const common: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  export declare const zhCnConfig: {
      ability: import("../../interfaces/locales").AbilityTranslationEntries;
      abilityTriggers: import("../../interfaces/locales").SimpleTranslationEntries;
      battle: import("../../interfaces/locales").SimpleTranslationEntries;
      battleMessageUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      berry: import("../../interfaces/locales").BerryTranslationEntries;
      bgmName: import("../../interfaces/locales").SimpleTranslationEntries;
      biome: import("../../interfaces/locales").SimpleTranslationEntries;
      challenges: import("../../interfaces/locales").TranslationEntries;
      commandUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      common: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMachv: import("../../interfaces/locales").AchievementTranslationEntries;
      PGFachv: import("../../interfaces/locales").AchievementTranslationEntries;
      PGMdialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGFdialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGMbattleSpecDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGFbattleSpecDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMmiscDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGFmiscDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMdoubleBattleDialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGFdoubleBattleDialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      egg: import("../../interfaces/locales").SimpleTranslationEntries;
      fightUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      gameMode: import("../../interfaces/locales").SimpleTranslationEntries;
      gameStatsUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      growth: import("../../interfaces/locales").SimpleTranslationEntries;
      menu: import("../../interfaces/locales").SimpleTranslationEntries;
      menuUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      modifierType: import("../../interfaces/locales").ModifierTypeTranslationEntries;
      move: import("../../interfaces/locales").MoveTranslationEntries;
      nature: import("../../interfaces/locales").SimpleTranslationEntries;
      pokeball: import("../../interfaces/locales").SimpleTranslationEntries;
      pokemon: import("../../interfaces/locales").SimpleTranslationEntries;
      pokemonInfo: import("../../interfaces/locales").PokemonInfoTranslationEntries;
      pokemonInfoContainer: import("../../interfaces/locales").SimpleTranslationEntries;
      saveSlotSelectUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      settings: import("../../interfaces/locales").SimpleTranslationEntries;
      splashMessages: import("../../interfaces/locales").SimpleTranslationEntries;
      starterSelectUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      statusEffect: import("../../interfaces/locales").StatusEffectTranslationEntries;
      titles: import("../../interfaces/locales").SimpleTranslationEntries;
      trainerClasses: import("../../interfaces/locales").SimpleTranslationEntries;
      trainerNames: import("../../interfaces/locales").SimpleTranslationEntries;
      tutorial: import("../../interfaces/locales").SimpleTranslationEntries;
      voucher: import("../../interfaces/locales").SimpleTranslationEntries;
      weather: import("../../interfaces/locales").SimpleTranslationEntries;
      partyUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
  };
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { DialogueTranslationEntries, SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const PGMdialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGFdialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGMbattleSpecDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGFbattleSpecDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGMmiscDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGFmiscDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGMdoubleBattleDialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGFdoubleBattleDialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const egg: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const fightUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const gameMode: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const gameStatsUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const growth: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const menuUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The menu namespace holds most miscellaneous text that isn't directly part of the game's
   * contents or directly related to Pokemon data. This includes menu navigation, settings,
   * account interactions, descriptive text, etc.
   */
  export declare const menu: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { ModifierTypeTranslationEntries } from "#app/interfaces/locales";
  export declare const modifierType: PokeRogue.interfaces.ModifierTypeTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { MoveTranslationEntries } from "#app/interfaces/locales";
  export declare const move: PokeRogue.interfaces.MoveTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const nature: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const partyUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokeball: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemonInfoContainer: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { PokemonInfoTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemonInfo: PokeRogue.interfaces.PokemonInfoTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemon: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const saveSlotSelectUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales.js";
  export declare const settings: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const splashMessages: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The menu namespace holds most miscellaneous text that isn't directly part of the game's
   * contents or directly related to Pokemon data. This includes menu navigation, settings,
   * account interactions, descriptive text, etc.
   */
  export declare const starterSelectUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { StatusEffectTranslationEntries } from "#app/interfaces/locales.js";
  export declare const statusEffect: PokeRogue.interfaces.StatusEffectTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const titles: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const trainerClasses: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const trainerNames: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const tutorial: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const voucher: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_CN {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The weather namespace holds text displayed when weather is active during a battle
   */
  export declare const weather: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const abilityTriggers: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { AbilityTranslationEntries } from "#app/interfaces/locales.js";
  export declare const ability: PokeRogue.interfaces.AbilityTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { AchievementTranslationEntries } from "#app/interfaces/locales.js";
  export declare const PGMachv: PokeRogue.interfaces.AchievementTranslationEntries;
  export declare const PGFachv: PokeRogue.interfaces.AchievementTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const battleMessageUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const battle: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { BerryTranslationEntries } from "#app/interfaces/locales";
  export declare const berry: PokeRogue.interfaces.BerryTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const bgmName: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const biome: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { TranslationEntries } from "#app/interfaces/locales";
  export declare const challenges: PokeRogue.interfaces.TranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const commandUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const common: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  export declare const zhTwConfig: {
      ability: import("../../interfaces/locales").AbilityTranslationEntries;
      abilityTriggers: import("../../interfaces/locales").SimpleTranslationEntries;
      battle: import("../../interfaces/locales").SimpleTranslationEntries;
      battleMessageUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      berry: import("../../interfaces/locales").BerryTranslationEntries;
      bgmName: import("../../interfaces/locales").SimpleTranslationEntries;
      biome: import("../../interfaces/locales").SimpleTranslationEntries;
      challenges: import("../../interfaces/locales").TranslationEntries;
      commandUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      common: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMachv: import("../../interfaces/locales").AchievementTranslationEntries;
      PGFachv: import("../../interfaces/locales").AchievementTranslationEntries;
      PGMdialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGFdialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGMbattleSpecDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGFbattleSpecDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMmiscDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGFmiscDialogue: import("../../interfaces/locales").SimpleTranslationEntries;
      PGMdoubleBattleDialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      PGFdoubleBattleDialogue: import("../../interfaces/locales").DialogueTranslationEntries;
      egg: import("../../interfaces/locales").SimpleTranslationEntries;
      fightUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      gameMode: import("../../interfaces/locales").SimpleTranslationEntries;
      gameStatsUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      growth: import("../../interfaces/locales").SimpleTranslationEntries;
      menu: import("../../interfaces/locales").SimpleTranslationEntries;
      menuUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      modifierType: import("../../interfaces/locales").ModifierTypeTranslationEntries;
      move: import("../../interfaces/locales").MoveTranslationEntries;
      nature: import("../../interfaces/locales").SimpleTranslationEntries;
      pokeball: import("../../interfaces/locales").SimpleTranslationEntries;
      pokemon: import("../../interfaces/locales").SimpleTranslationEntries;
      pokemonInfo: import("../../interfaces/locales").PokemonInfoTranslationEntries;
      pokemonInfoContainer: import("../../interfaces/locales").SimpleTranslationEntries;
      saveSlotSelectUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      settings: import("../../interfaces/locales").SimpleTranslationEntries;
      splashMessages: import("../../interfaces/locales").SimpleTranslationEntries;
      starterSelectUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
      statusEffect: import("../../interfaces/locales").StatusEffectTranslationEntries;
      titles: import("../../interfaces/locales").SimpleTranslationEntries;
      trainerClasses: import("../../interfaces/locales").SimpleTranslationEntries;
      trainerNames: import("../../interfaces/locales").SimpleTranslationEntries;
      tutorial: import("../../interfaces/locales").SimpleTranslationEntries;
      voucher: import("../../interfaces/locales").SimpleTranslationEntries;
      weather: import("../../interfaces/locales").SimpleTranslationEntries;
      partyUiHandler: import("../../interfaces/locales").SimpleTranslationEntries;
  };
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { DialogueTranslationEntries, SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const PGMdialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGFdialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGMbattleSpecDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGFbattleSpecDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGMmiscDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGFmiscDialogue: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const PGMdoubleBattleDialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  export declare const PGFdoubleBattleDialogue: PokeRogue.interfaces.DialogueTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const egg: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const fightUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const gameMode: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const gameStatsUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const growth: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const menuUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The menu namespace holds most miscellaneous text that isn't directly part of the game's
   * contents or directly related to Pokemon data. This includes menu navigation, settings,
   * account interactions, descriptive text, etc.
   */
  export declare const menu: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { ModifierTypeTranslationEntries } from "#app/interfaces/locales";
  export declare const modifierType: PokeRogue.interfaces.ModifierTypeTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { MoveTranslationEntries } from "#app/interfaces/locales";
  export declare const move: PokeRogue.interfaces.MoveTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const nature: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const partyUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokeball: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemonInfoContainer: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { PokemonInfoTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemonInfo: PokeRogue.interfaces.PokemonInfoTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const pokemon: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const saveSlotSelectUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales.js";
  export declare const settings: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const splashMessages: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The menu namespace holds most miscellaneous text that isn't directly part of the game's
   * contents or directly related to Pokemon data. This includes menu navigation, settings,
   * account interactions, descriptive text, etc.
   */
  export declare const starterSelectUiHandler: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { StatusEffectTranslationEntries } from "#app/interfaces/locales.js";
  export declare const statusEffect: PokeRogue.interfaces.StatusEffectTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const titles: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const trainerClasses: PokeRogue.interfaces.SimpleTranslationEntries;
  export declare const trainerNames: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const tutorial: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  export declare const voucher: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue.locales.zh_TW {
  //import { SimpleTranslationEntries } from "#app/interfaces/locales";
  /**
   * The weather namespace holds text displayed when weather is active during a battle
   */
  export declare const weather: PokeRogue.interfaces.SimpleTranslationEntries;
  
}

declare namespace PokeRogue {
  declare module "phaser" {
      namespace GameObjects {
          interface Container {
              /**
               * Sets this object's position relative to another object with a given offset
               * @param guideObject {@linkcode Phaser.GameObjects.GameObject} to base the position off of
               * @param x The relative x position
               * @param y The relative y position
               */
              setPositionRelative(guideObject: any, x: number, y: number): void;
          }
          interface Sprite {
              /**
               * Sets this object's position relative to another object with a given offset
               * @param guideObject {@linkcode Phaser.GameObjects.GameObject} to base the position off of
               * @param x The relative x position
               * @param y The relative y position
               */
              setPositionRelative(guideObject: any, x: number, y: number): void;
          }
          interface Image {
              /**
               * Sets this object's position relative to another object with a given offset
               * @param guideObject {@linkcode Phaser.GameObjects.GameObject} to base the position off of
               * @param x The relative x position
               * @param y The relative y position
               */
              setPositionRelative(guideObject: any, x: number, y: number): void;
          }
          interface NineSlice {
              /**
               * Sets this object's position relative to another object with a given offset
               * @param guideObject {@linkcode Phaser.GameObjects.GameObject} to base the position off of
               * @param x The relative x position
               * @param y The relative y position
               */
              setPositionRelative(guideObject: any, x: number, y: number): void;
          }
          interface Text {
              /**
               * Sets this object's position relative to another object with a given offset
               * @param guideObject {@linkcode Phaser.GameObjects.GameObject} to base the position off of
               * @param x The relative x position
               * @param y The relative y position
               */
              setPositionRelative(guideObject: any, x: number, y: number): void;
          }
          interface Rectangle {
              /**
               * Sets this object's position relative to another object with a given offset
               * @param guideObject {@linkcode Phaser.GameObjects.GameObject} to base the position off of
               * @param x The relative x position
               * @param y The relative y position
               */
              setPositionRelative(guideObject: any, x: number, y: number): void;
          }
      }
  }
  declare let game: any;

}

declare namespace PokeRogue {
  //import Pokemon from "./field/pokemon";
  /**
   * Builds a message by concatenating the Pokemon name with its potential affix and the given text
   * @param pokemon {@linkcode Pokemon} name and battle context will be retrieved from this instance for {@linkcode getPokemonNameWithAffix}
   * @param {string} content any text
   * @returns {string} ex: "Wild Gengar fainted!", "Ectoplasma sauvage est K.O!"
   * @see {@linkcode getPokemonNameWithAffix} for the Pokemon's name and potentiel affix
   */
  export declare function getPokemonMessage(pokemon: PokeRogue.field.Pokemon, content: string): string;
  /**
   * Retrieves the Pokemon's name, potentially with an affix indicating its role (wild or foe) in the current battle context, translated
   * @param pokemon {@linkcode Pokemon} name and battle context will be retrieved from this instance
   * @returns {string} ex: "Wild Gengar", "Ectoplasma sauvage"
   */
  export declare function getPokemonNameWithAffix(pokemon: PokeRogue.field.Pokemon): string;
  
}

declare namespace PokeRogue.modifier {
  export declare enum ModifierTier {
      COMMON = 0,
      GREAT = 1,
      ULTRA = 2,
      ROGUE = 3,
      MASTER = 4,
      LUXURY = 5
  }
  
}

declare namespace PokeRogue.modifier {
  //import * as Modifiers from "./modifier";
  //import { PokeballType } from "../data/pokeball";
  //import Pokemon, { EnemyPokemon, PlayerPokemon } from "../field/pokemon";
  //import { EvolutionItem } from "../data/pokemon-evolutions";
  //import { Stat } from "../data/pokemon-stat";
  //import { Type } from "../data/type";
  //import { PokemonMoveSelectFilter, PokemonSelectFilter } from "../ui/party-ui-handler";
  //import { TempBattleStat } from "../data/temp-battle-stat";
  //import { StatusEffect } from "../data/status-effect";
  //import BattleScene from "../battle-scene";
  //import { VoucherType } from "../system/voucher";
  //import { FormChangeItem } from "../data/pokemon-forms";
  //import { ModifierTier } from "./modifier-tier";
  //import { Nature } from "#app/data/nature";
  //import { BerryType } from "#enums/berry-type";
  //import { Moves } from "#enums/moves";
  //import { Species } from "#enums/species";
  type Modifier = Modifiers.Modifier;
  export declare enum ModifierPoolType {
      PLAYER = 0,
      WILD = 1,
      TRAINER = 2,
      ENEMY_BUFF = 3,
      DAILY_STARTER = 4
  }
  type NewModifierFunc = (type: ModifierType, args: any[]) => Modifier;
  export declare class ModifierType {
      id: string;
      localeKey: string;
      iconImage: string;
      group: string;
      soundName: string;
      tier: PokeRogue.modifier.ModifierTier;
      protected newModifierFunc: NewModifierFunc;
      constructor(localeKey: string, iconImage: string, newModifierFunc: NewModifierFunc, group?: string, soundName?: string);
      get name(): string;
      getDescription(scene: PokeRogue.BattleScene): string;
      setTier(tier: PokeRogue.modifier.ModifierTier): void;
      getOrInferTier(poolType?: ModifierPoolType): ModifierTier;
      withIdFromFunc(func: ModifierTypeFunc): ModifierType;
      newModifier(...args: any[]): Modifier;
  }
  type ModifierTypeGeneratorFunc = (party: PokeRogue.field.Pokemon[], pregenArgs?: any[]) => ModifierType;
  export declare class ModifierTypeGenerator extends ModifierType {
      public genTypeFunc;
      constructor(genTypeFunc: ModifierTypeGeneratorFunc);
      generateType(party: PokeRogue.field.Pokemon[], pregenArgs?: any[]): ModifierType;
  }
  export interface GeneratedPersistentModifierType {
      getPregenArgs(): any[];
  }
  declare class AddPokeballModifierType extends ModifierType {
      public pokeballType;
      public count;
      constructor(iconImage: string, pokeballType: PokeRogue.data.PokeballType, count: integer);
      get name(): string;
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  declare class AddVoucherModifierType extends ModifierType {
      public voucherType;
      public count;
      constructor(voucherType: PokeRogue.system.VoucherType, count: integer);
      get name(): string;
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export declare class PokemonModifierType extends ModifierType {
      selectFilter: PokeRogue.ui.PokemonSelectFilter;
      constructor(localeKey: string, iconImage: string, newModifierFunc: NewModifierFunc, selectFilter?: PokemonSelectFilter, group?: string, soundName?: string);
  }
  export declare class PokemonHeldItemModifierType extends PokemonModifierType {
      constructor(localeKey: string, iconImage: string, newModifierFunc: NewModifierFunc, group?: string, soundName?: string);
      newModifier(...args: any[]): Modifiers.PokemonHeldItemModifier;
  }
  export declare class PokemonHpRestoreModifierType extends PokemonModifierType {
      protected restorePoints: integer;
      protected restorePercent: integer;
      protected healStatus: boolean;
      constructor(localeKey: string, iconImage: string, restorePoints: integer, restorePercent: integer, healStatus?: boolean, newModifierFunc?: NewModifierFunc, selectFilter?: PokemonSelectFilter, group?: string);
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export declare class PokemonReviveModifierType extends PokemonHpRestoreModifierType {
      constructor(localeKey: string, iconImage: string, restorePercent: integer);
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export declare class PokemonStatusHealModifierType extends PokemonModifierType {
      constructor(localeKey: string, iconImage: string);
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export declare abstract class PokemonMoveModifierType extends PokemonModifierType {
      moveSelectFilter: PokeRogue.ui.PokemonMoveSelectFilter;
      constructor(localeKey: string, iconImage: string, newModifierFunc: NewModifierFunc, selectFilter?: PokemonSelectFilter, moveSelectFilter?: PokemonMoveSelectFilter, group?: string);
  }
  export declare class PokemonPpRestoreModifierType extends PokemonMoveModifierType {
      protected restorePoints: integer;
      constructor(localeKey: string, iconImage: string, restorePoints: integer);
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export declare class PokemonAllMovePpRestoreModifierType extends PokemonModifierType {
      protected restorePoints: integer;
      constructor(localeKey: string, iconImage: string, restorePoints: integer);
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export declare class PokemonPpUpModifierType extends PokemonMoveModifierType {
      protected upPoints: integer;
      constructor(localeKey: string, iconImage: string, upPoints: integer);
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export declare class PokemonNatureChangeModifierType extends PokemonModifierType {
      protected nature: PokeRogue.data.Nature;
      constructor(nature: PokeRogue.data.Nature);
      get name(): string;
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export declare class RememberMoveModifierType extends PokemonModifierType {
      constructor(localeKey: string, iconImage: string, group?: string);
  }
  export declare class DoubleBattleChanceBoosterModifierType extends ModifierType {
      battleCount: integer;
      constructor(localeKey: string, iconImage: string, battleCount: integer);
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export declare class TempBattleStatBoosterModifierType extends ModifierType implements GeneratedPersistentModifierType {
      tempBattleStat: PokeRogue.data.TempBattleStat;
      constructor(tempBattleStat: PokeRogue.data.TempBattleStat);
      get name(): string;
      getDescription(scene: PokeRogue.BattleScene): string;
      getPregenArgs(): any[];
  }
  export declare class BerryModifierType extends PokemonHeldItemModifierType implements GeneratedPersistentModifierType {
      public berryType;
      constructor(berryType: PokeRogue.enums.BerryType);
      get name(): string;
      getDescription(scene: PokeRogue.BattleScene): string;
      getPregenArgs(): any[];
  }
  export declare class AttackTypeBoosterModifierType extends PokemonHeldItemModifierType implements GeneratedPersistentModifierType {
      moveType: PokeRogue.data.Type;
      boostPercent: integer;
      constructor(moveType: PokeRogue.data.Type, boostPercent: integer);
      get name(): string;
      getDescription(scene: PokeRogue.BattleScene): string;
      getPregenArgs(): any[];
  }
  export type SpeciesStatBoosterItem = keyof typeof SpeciesStatBoosterModifierTypeGenerator.items;
  /**
   * Modifier type for {@linkcode Modifiers.SpeciesStatBoosterModifier}
   * @extends PokemonHeldItemModifierType
   * @implements GeneratedPersistentModifierType
   */
  export declare class SpeciesStatBoosterModifierType extends PokemonHeldItemModifierType implements GeneratedPersistentModifierType {
      public key;
      constructor(key: SpeciesStatBoosterItem);
      getPregenArgs(): any[];
  }
  export declare class PokemonLevelIncrementModifierType extends PokemonModifierType {
      constructor(localeKey: string, iconImage: string);
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export declare class AllPokemonLevelIncrementModifierType extends ModifierType {
      constructor(localeKey: string, iconImage: string);
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export declare class PokemonBaseStatBoosterModifierType extends PokemonHeldItemModifierType implements GeneratedPersistentModifierType {
      public localeName;
      public stat;
      constructor(localeName: string, stat: PokeRogue.data.Stat);
      get name(): string;
      getDescription(scene: PokeRogue.BattleScene): string;
      getPregenArgs(): any[];
  }
  declare class AllPokemonFullHpRestoreModifierType extends ModifierType {
      public descriptionKey;
      constructor(localeKey: string, iconImage: string, descriptionKey?: string, newModifierFunc?: NewModifierFunc);
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  declare class AllPokemonFullReviveModifierType extends AllPokemonFullHpRestoreModifierType {
      constructor(localeKey: string, iconImage: string);
  }
  export declare class MoneyRewardModifierType extends ModifierType {
      public moneyMultiplier;
      public moneyMultiplierDescriptorKey;
      constructor(localeKey: string, iconImage: string, moneyMultiplier: number, moneyMultiplierDescriptorKey: string);
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export declare class ExpBoosterModifierType extends ModifierType {
      public boostPercent;
      constructor(localeKey: string, iconImage: string, boostPercent: integer);
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export declare class PokemonExpBoosterModifierType extends PokemonHeldItemModifierType {
      public boostPercent;
      constructor(localeKey: string, iconImage: string, boostPercent: integer);
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export declare class PokemonFriendshipBoosterModifierType extends PokemonHeldItemModifierType {
      constructor(localeKey: string, iconImage: string);
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export declare class PokemonMoveAccuracyBoosterModifierType extends PokemonHeldItemModifierType {
      public amount;
      constructor(localeKey: string, iconImage: string, amount: integer, group?: string, soundName?: string);
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export declare class PokemonMultiHitModifierType extends PokemonHeldItemModifierType {
      constructor(localeKey: string, iconImage: string);
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export declare class TmModifierType extends PokemonModifierType {
      moveId: PokeRogue.enums.Moves;
      constructor(moveId: PokeRogue.enums.Moves);
      get name(): string;
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export declare class EvolutionItemModifierType extends PokemonModifierType implements GeneratedPersistentModifierType {
      evolutionItem: PokeRogue.data.EvolutionItem;
      constructor(evolutionItem: PokeRogue.data.EvolutionItem);
      get name(): string;
      getDescription(scene: PokeRogue.BattleScene): string;
      getPregenArgs(): any[];
  }
  /**
   * Class that represents form changing items
   */
  export declare class FormChangeItemModifierType extends PokemonModifierType implements GeneratedPersistentModifierType {
      formChangeItem: PokeRogue.data.FormChangeItem;
      constructor(formChangeItem: PokeRogue.data.FormChangeItem);
      get name(): string;
      getDescription(scene: PokeRogue.BattleScene): string;
      getPregenArgs(): any[];
  }
  export declare class FusePokemonModifierType extends PokemonModifierType {
      constructor(localeKey: string, iconImage: string);
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  declare class AttackTypeBoosterModifierTypeGenerator extends ModifierTypeGenerator {
      constructor();
  }
  /**
   * Modifier type generator for {@linkcode SpeciesStatBoosterModifierType}, which
   * encapsulates the logic for weighting the most useful held item from
   * the current list of {@linkcode items}.
   * @extends ModifierTypeGenerator
   */
  declare class SpeciesStatBoosterModifierTypeGenerator extends ModifierTypeGenerator {
      /** Object comprised of the currently available species-based stat boosting held items */
      static items: {
          LIGHT_BALL: {
              stats: PokeRogue.data.Stat[];
              multiplier: number;
              species: PokeRogue.enums.Species[];
          };
          THICK_CLUB: {
              stats: PokeRogue.data.Stat[];
              multiplier: number;
              species: PokeRogue.enums.Species[];
          };
          METAL_POWDER: {
              stats: PokeRogue.data.Stat[];
              multiplier: number;
              species: PokeRogue.enums.Species[];
          };
          QUICK_POWDER: {
              stats: PokeRogue.data.Stat[];
              multiplier: number;
              species: PokeRogue.enums.Species[];
          };
      };
      constructor();
  }
  declare class TmModifierTypeGenerator extends ModifierTypeGenerator {
      constructor(tier: PokeRogue.modifier.ModifierTier);
  }
  declare class EvolutionItemModifierTypeGenerator extends ModifierTypeGenerator {
      constructor(rare: boolean);
  }
  declare class FormChangeItemModifierTypeGenerator extends ModifierTypeGenerator {
      constructor();
  }
  export declare class TerastallizeModifierType extends PokemonHeldItemModifierType implements GeneratedPersistentModifierType {
      public teraType;
      constructor(teraType: PokeRogue.data.Type);
      get name(): string;
      getDescription(scene: PokeRogue.BattleScene): string;
      getPregenArgs(): any[];
  }
  export declare class ContactHeldItemTransferChanceModifierType extends PokemonHeldItemModifierType {
      public chancePercent;
      constructor(localeKey: string, iconImage: string, chancePercent: integer, group?: string, soundName?: string);
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export declare class TurnHeldItemTransferModifierType extends PokemonHeldItemModifierType {
      constructor(localeKey: string, iconImage: string, group?: string, soundName?: string);
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export declare class EnemyAttackStatusEffectChanceModifierType extends ModifierType {
      public chancePercent;
      public effect;
      constructor(localeKey: string, iconImage: string, chancePercent: integer, effect: PokeRogue.data.StatusEffect, stackCount?: integer);
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export declare class EnemyEndureChanceModifierType extends ModifierType {
      public chancePercent;
      constructor(localeKey: string, iconImage: string, chancePercent: number);
      getDescription(scene: PokeRogue.BattleScene): string;
  }
  export type ModifierTypeFunc = () => ModifierType;
  type WeightedModifierTypeWeightFunc = (party: PokeRogue.field.Pokemon[], rerollCount?: integer) => integer;
  declare class WeightedModifierType {
      modifierType: ModifierType;
      weight: integer | WeightedModifierTypeWeightFunc;
      maxWeight: integer;
      constructor(modifierTypeFunc: ModifierTypeFunc, weight: integer | WeightedModifierTypeWeightFunc, maxWeight?: integer);
      setTier(tier: PokeRogue.modifier.ModifierTier): void;
  }
  export declare const modifierTypes: {
      POKEBALL: () => AddPokeballModifierType;
      GREAT_BALL: () => AddPokeballModifierType;
      ULTRA_BALL: () => AddPokeballModifierType;
      ROGUE_BALL: () => AddPokeballModifierType;
      MASTER_BALL: () => AddPokeballModifierType;
      RARE_CANDY: () => PokemonLevelIncrementModifierType;
      RARER_CANDY: () => AllPokemonLevelIncrementModifierType;
      EVOLUTION_ITEM: () => EvolutionItemModifierTypeGenerator;
      RARE_EVOLUTION_ITEM: () => EvolutionItemModifierTypeGenerator;
      FORM_CHANGE_ITEM: () => FormChangeItemModifierTypeGenerator;
      MEGA_BRACELET: () => ModifierType;
      DYNAMAX_BAND: () => ModifierType;
      TERA_ORB: () => ModifierType;
      MAP: () => ModifierType;
      POTION: () => PokemonHpRestoreModifierType;
      SUPER_POTION: () => PokemonHpRestoreModifierType;
      HYPER_POTION: () => PokemonHpRestoreModifierType;
      MAX_POTION: () => PokemonHpRestoreModifierType;
      FULL_RESTORE: () => PokemonHpRestoreModifierType;
      REVIVE: () => PokemonReviveModifierType;
      MAX_REVIVE: () => PokemonReviveModifierType;
      FULL_HEAL: () => PokemonStatusHealModifierType;
      SACRED_ASH: () => AllPokemonFullReviveModifierType;
      REVIVER_SEED: () => PokemonHeldItemModifierType;
      ETHER: () => PokemonPpRestoreModifierType;
      MAX_ETHER: () => PokemonPpRestoreModifierType;
      ELIXIR: () => PokemonAllMovePpRestoreModifierType;
      MAX_ELIXIR: () => PokemonAllMovePpRestoreModifierType;
      PP_UP: () => PokemonPpUpModifierType;
      PP_MAX: () => PokemonPpUpModifierType;
      LURE: () => DoubleBattleChanceBoosterModifierType;
      SUPER_LURE: () => DoubleBattleChanceBoosterModifierType;
      MAX_LURE: () => DoubleBattleChanceBoosterModifierType;
      SPECIES_STAT_BOOSTER: () => SpeciesStatBoosterModifierTypeGenerator;
      TEMP_STAT_BOOSTER: () => ModifierTypeGenerator;
      DIRE_HIT: () => TempBattleStatBoosterModifierType;
      BASE_STAT_BOOSTER: () => ModifierTypeGenerator;
      ATTACK_TYPE_BOOSTER: () => AttackTypeBoosterModifierTypeGenerator;
      MINT: () => ModifierTypeGenerator;
      TERA_SHARD: () => ModifierTypeGenerator;
      BERRY: () => ModifierTypeGenerator;
      TM_COMMON: () => TmModifierTypeGenerator;
      TM_GREAT: () => TmModifierTypeGenerator;
      TM_ULTRA: () => TmModifierTypeGenerator;
      MEMORY_MUSHROOM: () => RememberMoveModifierType;
      EXP_SHARE: () => ModifierType;
      EXP_BALANCE: () => ModifierType;
      OVAL_CHARM: () => ModifierType;
      EXP_CHARM: () => ExpBoosterModifierType;
      SUPER_EXP_CHARM: () => ExpBoosterModifierType;
      GOLDEN_EXP_CHARM: () => ExpBoosterModifierType;
      LUCKY_EGG: () => PokemonExpBoosterModifierType;
      GOLDEN_EGG: () => PokemonExpBoosterModifierType;
      SOOTHE_BELL: () => PokemonFriendshipBoosterModifierType;
      EVIOLITE: () => PokemonHeldItemModifierType;
      SOUL_DEW: () => PokemonHeldItemModifierType;
      NUGGET: () => MoneyRewardModifierType;
      BIG_NUGGET: () => MoneyRewardModifierType;
      RELIC_GOLD: () => MoneyRewardModifierType;
      AMULET_COIN: () => ModifierType;
      GOLDEN_PUNCH: () => PokemonHeldItemModifierType;
      COIN_CASE: () => ModifierType;
      LOCK_CAPSULE: () => ModifierType;
      GRIP_CLAW: () => ContactHeldItemTransferChanceModifierType;
      WIDE_LENS: () => PokemonMoveAccuracyBoosterModifierType;
      MULTI_LENS: () => PokemonMultiHitModifierType;
      HEALING_CHARM: () => ModifierType;
      CANDY_JAR: () => ModifierType;
      BERRY_POUCH: () => ModifierType;
      FOCUS_BAND: () => PokemonHeldItemModifierType;
      QUICK_CLAW: () => PokemonHeldItemModifierType;
      KINGS_ROCK: () => PokemonHeldItemModifierType;
      LEFTOVERS: () => PokemonHeldItemModifierType;
      SHELL_BELL: () => PokemonHeldItemModifierType;
      TOXIC_ORB: () => PokemonHeldItemModifierType;
      FLAME_ORB: () => PokemonHeldItemModifierType;
      BATON: () => PokemonHeldItemModifierType;
      SHINY_CHARM: () => ModifierType;
      ABILITY_CHARM: () => ModifierType;
      IV_SCANNER: () => ModifierType;
      DNA_SPLICERS: () => FusePokemonModifierType;
      MINI_BLACK_HOLE: () => TurnHeldItemTransferModifierType;
      VOUCHER: () => AddVoucherModifierType;
      VOUCHER_PLUS: () => AddVoucherModifierType;
      VOUCHER_PREMIUM: () => AddVoucherModifierType;
      GOLDEN_POKEBALL: () => ModifierType;
      ENEMY_DAMAGE_BOOSTER: () => ModifierType;
      ENEMY_DAMAGE_REDUCTION: () => ModifierType;
      ENEMY_HEAL: () => ModifierType;
      ENEMY_ATTACK_POISON_CHANCE: () => EnemyAttackStatusEffectChanceModifierType;
      ENEMY_ATTACK_PARALYZE_CHANCE: () => EnemyAttackStatusEffectChanceModifierType;
      ENEMY_ATTACK_BURN_CHANCE: () => EnemyAttackStatusEffectChanceModifierType;
      ENEMY_STATUS_EFFECT_HEAL_CHANCE: () => ModifierType;
      ENEMY_ENDURE_CHANCE: () => EnemyEndureChanceModifierType;
      ENEMY_FUSED_CHANCE: () => ModifierType;
  };
  interface ModifierPool {
      [tier: string]: WeightedModifierType[];
  }
  export declare function getModifierType(modifierTypeFunc: ModifierTypeFunc): ModifierType;
  export declare function getModifierPoolForType(poolType: ModifierPoolType): ModifierPool;
  export declare function regenerateModifierPoolThresholds(party: PokeRogue.field.Pokemon[], poolType: ModifierPoolType, rerollCount?: integer): void;
  export declare function getModifierTypeFuncById(id: string): ModifierTypeFunc;
  export declare function getPlayerModifierTypeOptions(count: integer, party: PokeRogue.field.PlayerPokemon[], modifierTiers?: ModifierTier[]): ModifierTypeOption[];
  export declare function getPlayerShopModifierTypeOptionsForWave(waveIndex: integer, baseCost: integer): ModifierTypeOption[];
  export declare function getEnemyBuffModifierForWave(tier: PokeRogue.modifier.ModifierTier, enemyModifiers: Modifiers.PersistentModifier[], scene: PokeRogue.BattleScene): Modifiers.EnemyPersistentModifier;
  export declare function getEnemyModifierTypesForWave(waveIndex: integer, count: integer, party: PokeRogue.field.EnemyPokemon[], poolType: ModifierPoolType.WILD | ModifierPoolType.TRAINER, upgradeChance?: integer): PokemonHeldItemModifierType[];
  export declare function getDailyRunStarterModifiers(party: PokeRogue.field.PlayerPokemon[]): Modifiers.PokemonHeldItemModifier[];
  export declare function getDefaultModifierTypeForTier(tier: PokeRogue.modifier.ModifierTier): ModifierType;
  export declare class ModifierTypeOption {
      type: ModifierType;
      upgradeCount: integer;
      cost: integer;
      constructor(type: ModifierType, upgradeCount: integer, cost?: number);
  }
  export declare function getPartyLuckValue(party: PokeRogue.field.Pokemon[]): integer;
  export declare function getLuckString(luckValue: integer): string;
  export declare function getLuckTextTint(luckValue: integer): integer;
  export {};
  
}

declare namespace PokeRogue.modifier {
  //import * as ModifierTypes from "./modifier-type";
  //import BattleScene from "../battle-scene";
  //import { PokeballType } from "../data/pokeball";
  //import Pokemon, { PlayerPokemon } from "../field/pokemon";
  //import { Stat } from "../data/pokemon-stat";
  //import { Type } from "../data/type";
  //import { TempBattleStat } from "../data/temp-battle-stat";
  //import { BerryType } from "#enums/berry-type";
  //import { StatusEffect } from "../data/status-effect";
  //import { VoucherType } from "../system/voucher";
  //import { FormChangeItem } from "../data/pokemon-forms";
  //import { Nature } from "#app/data/nature";
  //import { ModifierType } from "./modifier-type";
  //import { Species } from "#enums/species";
  export type ModifierPredicate = (modifier: Modifier) => boolean;
  export declare const modifierSortFunc: (a: Modifier, b: Modifier) => number;
  export declare class ModifierBar extends Phaser.GameObjects.Container {
      public player;
      public modifierCache;
      constructor(scene: PokeRogue.BattleScene, enemy?: boolean);
      /**
       * Method to update content displayed in {@linkcode ModifierBar}
       * @param {PersistentModifier[]} modifiers - The list of modifiers to be displayed in the {@linkcode ModifierBar}
       * @param {boolean} hideHeldItems - If set to "true", only modifiers not assigned to a Pokémon are displayed
       */
      updateModifiers(modifiers: PersistentModifier[], hideHeldItems?: boolean): void;
      updateModifierOverflowVisibility(ignoreLimit: boolean): void;
      setModifierIconPosition(icon: Phaser.GameObjects.Container, modifierCount: integer): void;
  }
  export declare abstract class Modifier {
      type: PokeRogue.modifier.ModifierType;
      constructor(type: PokeRogue.modifier.ModifierType);
      match(_modifier: Modifier): boolean;
      shouldApply(_args: any[]): boolean;
      abstract apply(args: any[]): boolean | Promise<boolean>;
  }
  export declare abstract class PersistentModifier extends Modifier {
      stackCount: integer;
      virtualStackCount: integer;
      constructor(type: PokeRogue.modifier.ModifierType, stackCount: integer);
      add(modifiers: PersistentModifier[], virtual: boolean, scene: PokeRogue.BattleScene): boolean;
      abstract clone(): PersistentModifier;
      getArgs(): any[];
      incrementStack(scene: PokeRogue.BattleScene, amount: integer, virtual: boolean): boolean;
      getStackCount(): integer;
      abstract getMaxStackCount(scene: PokeRogue.BattleScene, forThreshold?: boolean): integer;
      isIconVisible(scene: PokeRogue.BattleScene): boolean;
      getIcon(scene: PokeRogue.BattleScene, forSummary?: boolean): Phaser.GameObjects.Container;
      getIconStackText(scene: PokeRogue.BattleScene, virtual?: boolean): Phaser.GameObjects.BitmapText;
  }
  export declare abstract class ConsumableModifier extends Modifier {
      constructor(type: PokeRogue.modifier.ModifierType);
      add(_modifiers: Modifier[]): boolean;
      shouldApply(args: any[]): boolean;
  }
  export declare class AddPokeballModifier extends ConsumableModifier {
      public pokeballType;
      public count;
      constructor(type: PokeRogue.modifier.ModifierType, pokeballType: PokeRogue.data.PokeballType, count: integer);
      apply(args: any[]): boolean;
  }
  export declare class AddVoucherModifier extends ConsumableModifier {
      public voucherType;
      public count;
      constructor(type: PokeRogue.modifier.ModifierType, voucherType: PokeRogue.system.VoucherType, count: integer);
      apply(args: any[]): boolean;
  }
  export declare abstract class LapsingPersistentModifier extends PersistentModifier {
      protected battlesLeft: integer;
      constructor(type: ModifierTypes.ModifierType, battlesLeft?: integer, stackCount?: integer);
      lapse(args: any[]): boolean;
      getIcon(scene: PokeRogue.BattleScene): Phaser.GameObjects.Container;
      getBattlesLeft(): integer;
      getMaxStackCount(scene: PokeRogue.BattleScene, forThreshold?: boolean): number;
  }
  export declare class DoubleBattleChanceBoosterModifier extends LapsingPersistentModifier {
      constructor(type: ModifierTypes.DoubleBattleChanceBoosterModifierType, battlesLeft: integer, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): DoubleBattleChanceBoosterModifier;
      getArgs(): any[];
      /**
       * Modifies the chance of a double battle occurring
       * @param args A single element array containing the double battle chance as a NumberHolder
       * @returns {boolean} Returns true if the modifier was applied
       */
      apply(args: any[]): boolean;
  }
  export declare class TempBattleStatBoosterModifier extends LapsingPersistentModifier {
      public tempBattleStat;
      constructor(type: ModifierTypes.TempBattleStatBoosterModifierType, tempBattleStat: PokeRogue.data.TempBattleStat, battlesLeft?: integer, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): TempBattleStatBoosterModifier;
      getArgs(): any[];
      apply(args: any[]): boolean;
  }
  export declare class MapModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      clone(): MapModifier;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class MegaEvolutionAccessModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      clone(): MegaEvolutionAccessModifier;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class GigantamaxAccessModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      clone(): GigantamaxAccessModifier;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class TerastallizeAccessModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      clone(): TerastallizeAccessModifier;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare abstract class PokemonHeldItemModifier extends PersistentModifier {
      pokemonId: integer;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount: integer);
      abstract matchType(_modifier: Modifier): boolean;
      match(modifier: Modifier): boolean;
      getArgs(): any[];
      shouldApply(args: any[]): boolean;
      getTransferrable(withinParty: boolean): boolean;
      isIconVisible(scene: PokeRogue.BattleScene): boolean;
      getIcon(scene: PokeRogue.BattleScene, forSummary?: boolean): Phaser.GameObjects.Container;
      getPokemon(scene: PokeRogue.BattleScene): Pokemon;
      getScoreMultiplier(): number;
      getSecondaryChanceMultiplier(pokemon: PokeRogue.field.Pokemon): integer;
      getMaxStackCount(scene: PokeRogue.BattleScene, forThreshold?: boolean): integer;
      abstract getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare abstract class LapsingPokemonHeldItemModifier extends PokemonHeldItemModifier {
      protected battlesLeft: integer;
      constructor(type: ModifierTypes.ModifierType, pokemonId: integer, battlesLeft?: integer, stackCount?: integer);
      lapse(args: any[]): boolean;
      getIcon(scene: PokeRogue.BattleScene, forSummary?: boolean): Phaser.GameObjects.Container;
      getBattlesLeft(): integer;
      getMaxStackCount(scene: PokeRogue.BattleScene, forThreshold?: boolean): number;
  }
  export declare class TerastallizeModifier extends LapsingPokemonHeldItemModifier {
      teraType: PokeRogue.data.Type;
      constructor(type: ModifierTypes.TerastallizeModifierType, pokemonId: integer, teraType: PokeRogue.data.Type, battlesLeft?: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): TerastallizeModifier;
      getArgs(): any[];
      apply(args: any[]): boolean;
      lapse(args: any[]): boolean;
      getTransferrable(withinParty: boolean): boolean;
      getScoreMultiplier(): number;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class PokemonBaseStatModifier extends PokemonHeldItemModifier {
      protected stat: PokeRogue.data.Stat;
      constructor(type: ModifierTypes.PokemonBaseStatBoosterModifierType, pokemonId: integer, stat: PokeRogue.data.Stat, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): PersistentModifier;
      getArgs(): any[];
      shouldApply(args: any[]): boolean;
      apply(args: any[]): boolean;
      getTransferrable(_withinParty: boolean): boolean;
      getScoreMultiplier(): number;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  /**
   * Modifier used for held items that apply {@linkcode Stat} boost(s)
   * using a multiplier.
   * @extends PokemonHeldItemModifier
   * @see {@linkcode apply}
   */
  export declare class StatBoosterModifier extends PokemonHeldItemModifier {
      /** The stats that the held item boosts */
      protected stats: PokeRogue.data.Stat[];
      /** The multiplier used to increase the relevant stat(s) */
      protected multiplier: number;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stats: PokeRogue.data.Stat[], multiplier: number, stackCount?: integer);
      clone(): StatBoosterModifier;
      getArgs(): any[];
      matchType(modifier: Modifier): boolean;
      /**
       * Checks if the incoming stat is listed in {@linkcode stats}
       * @param args [0] {@linkcode Pokemon} N/A
       *             [1] {@linkcode Stat} being checked at the time
       *             [2] {@linkcode Utils.NumberHolder} N/A
       * @returns true if the stat could be boosted, false otherwise
       */
      shouldApply(args: any[]): boolean;
      /**
       * Boosts the incoming stat by a {@linkcode multiplier} if the stat is listed
       * in {@linkcode stats}.
       * @param args [0] {@linkcode Pokemon} N/A
       *             [1] {@linkcode Stat} N/A
       *             [2] {@linkcode Utils.NumberHolder} that holds the resulting value of the stat
       * @returns true if the stat boost applies successfully, false otherwise
       * @see shouldApply
       */
      apply(args: any[]): boolean;
      getMaxHeldItemCount(_pokemon: PokeRogue.field.Pokemon): number;
  }
  /**
   * Modifier used for held items, specifically Eviolite, that apply
   * {@linkcode Stat} boost(s) using a multiplier if the holder can evolve.
   * @extends StatBoosterModifier
   * @see {@linkcode apply}
   */
  export declare class EvolutionStatBoosterModifier extends StatBoosterModifier {
      clone(): EvolutionStatBoosterModifier;
      matchType(modifier: Modifier): boolean;
      /**
       * Boosts the incoming stat value by a {@linkcode multiplier} if the holder
       * can evolve. Note that, if the holder is a fusion, they will receive
       * only half of the boost if either of the fused members are fully
       * evolved. However, if they are both unevolved, the full boost
       * will apply.
       * @param args [0] {@linkcode Pokemon} that holds the held item
       *             [1] {@linkcode Stat} N/A
       *             [2] {@linkcode Utils.NumberHolder} that holds the resulting value of the stat
       * @returns true if the stat boost applies successfully, false otherwise
       * @see shouldApply
       */
      apply(args: any[]): boolean;
  }
  /**
   * Modifier used for held items that apply {@linkcode Stat} boost(s) using a
   * multiplier if the holder is of a specific {@linkcode Species}.
   * @extends StatBoosterModifier
   * @see {@linkcode apply}
   */
  export declare class SpeciesStatBoosterModifier extends StatBoosterModifier {
      /** The species that the held item's stat boost(s) apply to */
      public species;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stats: PokeRogue.data.Stat[], multiplier: number, species: PokeRogue.enums.Species[], stackCount?: integer);
      clone(): SpeciesStatBoosterModifier;
      getArgs(): any[];
      matchType(modifier: Modifier): boolean;
      /**
       * Checks if the incoming stat is listed in {@linkcode stats} and if the holder's {@linkcode Species}
       * (or its fused species) is listed in {@linkcode species}.
       * @param args [0] {@linkcode Pokemon} that holds the held item
       *             [1] {@linkcode Stat} being checked at the time
       *             [2] {@linkcode Utils.NumberHolder} N/A
       * @returns true if the stat could be boosted, false otherwise
       */
      shouldApply(args: any[]): boolean;
      /**
       * Checks if either parameter is included in the corresponding lists
       * @param speciesId {@linkcode Species} being checked
       * @param stat {@linkcode Stat} being checked
       * @returns true if both parameters are in {@linkcode species} and {@linkcode stats} respectively, false otherwise
       */
      contains(speciesId: PokeRogue.enums.Species, stat: PokeRogue.data.Stat): boolean;
  }
  /**
   * Applies Specific Type item boosts (e.g., Magnet)
   */
  export declare class AttackTypeBoosterModifier extends PokemonHeldItemModifier {
      public moveType;
      public boostMultiplier;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, moveType: PokeRogue.data.Type, boostPercent: number, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): AttackTypeBoosterModifier;
      getArgs(): any[];
      shouldApply(args: any[]): boolean;
      /**
     * @param {Array<any>} args Array
     *                          - Index 0: {Pokemon} Pokemon
     *                          - Index 1: {number} Move type
     *                          - Index 2: {Utils.NumberHolder} Move power
     * @returns {boolean} Returns true if boosts have been applied to the move.
     */
      apply(args: any[]): boolean;
      getScoreMultiplier(): number;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class SurviveDamageModifier extends PokemonHeldItemModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): SurviveDamageModifier;
      shouldApply(args: any[]): boolean;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class BypassSpeedChanceModifier extends PokemonHeldItemModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): BypassSpeedChanceModifier;
      shouldApply(args: any[]): boolean;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class FlinchChanceModifier extends PokemonHeldItemModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): FlinchChanceModifier;
      shouldApply(args: any[]): boolean;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class TurnHealModifier extends PokemonHeldItemModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): TurnHealModifier;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  /**
   * Modifier used for held items, namely Toxic Orb and Flame Orb, that apply a
   * set {@linkcode StatusEffect} at the end of a turn.
   * @extends PokemonHeldItemModifier
   * @see {@linkcode apply}
   */
  export declare class TurnStatusEffectModifier extends PokemonHeldItemModifier {
      /** The status effect to be applied by the held item */
      public effect;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      /**
       * Checks if {@linkcode modifier} is an instance of this class,
       * intentionally ignoring potentially different {@linkcode effect}s
       * to prevent held item stockpiling since the item obtained first
       * would be the only item able to {@linkcode apply} successfully.
       * @override
       * @param modifier {@linkcode Modifier} being type tested
       * @return true if {@linkcode modifier} is an instance of
       * TurnStatusEffectModifier, false otherwise
       */
      matchType(modifier: Modifier): boolean;
      clone(): TurnStatusEffectModifier;
      /**
       * Tries to inflicts the holder with the associated {@linkcode StatusEffect}.
       * @param args [0] {@linkcode Pokemon} that holds the held item
       * @returns true if the status effect was applied successfully, false if
       * otherwise
       */
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
      getStatusEffect(): StatusEffect;
  }
  export declare class HitHealModifier extends PokemonHeldItemModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): HitHealModifier;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class LevelIncrementBoosterModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): LevelIncrementBoosterModifier;
      shouldApply(args: any[]): boolean;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene, forThreshold?: boolean): number;
  }
  export declare class BerryModifier extends PokemonHeldItemModifier {
      berryType: PokeRogue.enums.BerryType;
      consumed: boolean;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, berryType: PokeRogue.enums.BerryType, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): BerryModifier;
      getArgs(): any[];
      shouldApply(args: any[]): boolean;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class PreserveBerryModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): PreserveBerryModifier;
      shouldApply(args: any[]): boolean;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class PokemonInstantReviveModifier extends PokemonHeldItemModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): PokemonInstantReviveModifier;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare abstract class ConsumablePokemonModifier extends ConsumableModifier {
      pokemonId: integer;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer);
      shouldApply(args: any[]): boolean;
      getPokemon(scene: PokeRogue.BattleScene): PlayerPokemon;
  }
  export declare class PokemonHpRestoreModifier extends ConsumablePokemonModifier {
      public restorePoints;
      public restorePercent;
      public healStatus;
      fainted: boolean;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, restorePoints: integer, restorePercent: number, healStatus: boolean, fainted?: boolean);
      shouldApply(args: any[]): boolean;
      apply(args: any[]): boolean;
  }
  export declare class PokemonStatusHealModifier extends ConsumablePokemonModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer);
      apply(args: any[]): boolean;
  }
  export declare abstract class ConsumablePokemonMoveModifier extends ConsumablePokemonModifier {
      moveIndex: integer;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, moveIndex: integer);
  }
  export declare class PokemonPpRestoreModifier extends ConsumablePokemonMoveModifier {
      public restorePoints;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, moveIndex: integer, restorePoints: integer);
      apply(args: any[]): boolean;
  }
  export declare class PokemonAllMovePpRestoreModifier extends ConsumablePokemonModifier {
      public restorePoints;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, restorePoints: integer);
      apply(args: any[]): boolean;
  }
  export declare class PokemonPpUpModifier extends ConsumablePokemonMoveModifier {
      public upPoints;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, moveIndex: integer, upPoints: integer);
      apply(args: any[]): boolean;
  }
  export declare class PokemonNatureChangeModifier extends ConsumablePokemonModifier {
      nature: PokeRogue.data.Nature;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, nature: PokeRogue.data.Nature);
      apply(args: any[]): boolean;
  }
  export declare class PokemonLevelIncrementModifier extends ConsumablePokemonModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer);
      apply(args: any[]): boolean;
  }
  export declare class TmModifier extends ConsumablePokemonModifier {
      constructor(type: ModifierTypes.TmModifierType, pokemonId: integer);
      apply(args: any[]): boolean;
  }
  export declare class RememberMoveModifier extends ConsumablePokemonModifier {
      levelMoveIndex: integer;
      constructor(type: ModifierTypes.ModifierType, pokemonId: integer, levelMoveIndex: integer);
      apply(args: any[]): boolean;
  }
  export declare class EvolutionItemModifier extends ConsumablePokemonModifier {
      constructor(type: ModifierTypes.EvolutionItemModifierType, pokemonId: integer);
      apply(args: any[]): boolean;
  }
  export declare class FusePokemonModifier extends ConsumablePokemonModifier {
      fusePokemonId: integer;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, fusePokemonId: integer);
      shouldApply(args: any[]): boolean;
      apply(args: any[]): Promise<boolean>;
  }
  export declare class MultipleParticipantExpBonusModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      apply(_args: any[]): boolean;
      clone(): MultipleParticipantExpBonusModifier;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class HealingBoosterModifier extends PersistentModifier {
      public multiplier;
      constructor(type: PokeRogue.modifier.ModifierType, multiplier: number, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): HealingBoosterModifier;
      getArgs(): any[];
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class ExpBoosterModifier extends PersistentModifier {
      public boostMultiplier;
      constructor(type: PokeRogue.modifier.ModifierType, boostPercent: number, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): ExpBoosterModifier;
      getArgs(): any[];
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene, forThreshold?: boolean): integer;
  }
  export declare class PokemonExpBoosterModifier extends PokemonHeldItemModifier {
      public boostMultiplier;
      constructor(type: ModifierTypes.PokemonExpBoosterModifierType, pokemonId: integer, boostPercent: number, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): PersistentModifier;
      getArgs(): any[];
      shouldApply(args: any[]): boolean;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class ExpShareModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): ExpShareModifier;
      apply(_args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class ExpBalanceModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): ExpBalanceModifier;
      apply(_args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class PokemonFriendshipBoosterModifier extends PokemonHeldItemModifier {
      constructor(type: ModifierTypes.PokemonFriendshipBoosterModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): PersistentModifier;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class PokemonNatureWeightModifier extends PokemonHeldItemModifier {
      constructor(type: ModifierTypes.ModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): PersistentModifier;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class PokemonMoveAccuracyBoosterModifier extends PokemonHeldItemModifier {
      public accuracyAmount;
      constructor(type: ModifierTypes.PokemonMoveAccuracyBoosterModifierType, pokemonId: integer, accuracy: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): PersistentModifier;
      getArgs(): any[];
      shouldApply(args: any[]): boolean;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class PokemonMultiHitModifier extends PokemonHeldItemModifier {
      constructor(type: ModifierTypes.PokemonMultiHitModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): PersistentModifier;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class PokemonFormChangeItemModifier extends PokemonHeldItemModifier {
      formChangeItem: PokeRogue.data.FormChangeItem;
      active: boolean;
      constructor(type: ModifierTypes.FormChangeItemModifierType, pokemonId: integer, formChangeItem: PokeRogue.data.FormChangeItem, active: boolean, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): PersistentModifier;
      getArgs(): any[];
      apply(args: any[]): boolean;
      getTransferrable(withinParty: boolean): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class MoneyRewardModifier extends ConsumableModifier {
      public moneyMultiplier;
      constructor(type: PokeRogue.modifier.ModifierType, moneyMultiplier: number);
      apply(args: any[]): boolean;
  }
  export declare class MoneyMultiplierModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): MoneyMultiplierModifier;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class DamageMoneyRewardModifier extends PokemonHeldItemModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): DamageMoneyRewardModifier;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class MoneyInterestModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      apply(args: any[]): boolean;
      clone(): MoneyInterestModifier;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class HiddenAbilityRateBoosterModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): HiddenAbilityRateBoosterModifier;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class ShinyRateBoosterModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): ShinyRateBoosterModifier;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class LockModifierTiersModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      apply(args: any[]): boolean;
      clone(): LockModifierTiersModifier;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class SwitchEffectTransferModifier extends PokemonHeldItemModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): SwitchEffectTransferModifier;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  /**
   * Abstract class for held items that steal other Pokemon's items.
   * @see {@linkcode TurnHeldItemTransferModifier}
   * @see {@linkcode ContactHeldItemTransferChanceModifier}
   */
  export declare abstract class HeldItemTransferModifier extends PokemonHeldItemModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      /**
       * Determines the targets to transfer items from when this applies.
       * @param args\[0\] the {@linkcode Pokemon} holding this item
       * @returns the opponents of the source {@linkcode Pokemon}
       */
      getTargets(args: any[]): Pokemon[];
      /**
       * Steals an item from a set of target Pokemon.
       * This prioritizes high-tier held items when selecting the item to steal.
       * @param args \[0\] The {@linkcode Pokemon} holding this item
       * @returns true if an item was stolen; false otherwise.
       */
      apply(args: any[]): boolean;
      abstract getTransferredItemCount(): integer;
      abstract getTransferMessage(pokemon: PokeRogue.field.Pokemon, targetPokemon: PokeRogue.field.Pokemon, item: ModifierTypes.ModifierType): string;
  }
  /**
   * Modifier for held items that steal items from the enemy at the end of
   * each turn.
   * @see {@linkcode modifierTypes[MINI_BLACK_HOLE]}
   */
  export declare class TurnHeldItemTransferModifier extends HeldItemTransferModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): TurnHeldItemTransferModifier;
      getTransferrable(withinParty: boolean): boolean;
      getTransferredItemCount(): integer;
      getTransferMessage(pokemon: PokeRogue.field.Pokemon, targetPokemon: PokeRogue.field.Pokemon, item: ModifierTypes.ModifierType): string;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  /**
   * Modifier for held items that add a chance to steal items from the target of a
   * successful attack.
   * @see {@linkcode modifierTypes[GRIP_CLAW]}
   * @see {@linkcode HeldItemTransferModifier}
   */
  export declare class ContactHeldItemTransferChanceModifier extends HeldItemTransferModifier {
      public chance;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, chancePercent: number, stackCount?: integer);
      /**
       * Determines the target to steal items from when this applies.
       * @param args\[0\] The {@linkcode Pokemon} holding this item
       * @param args\[1\] The {@linkcode Pokemon} the holder is targeting with an attack
       * @returns The target (args[1]) stored in array format for use in {@linkcode HeldItemTransferModifier.apply}
       */
      getTargets(args: any[]): Pokemon[];
      matchType(modifier: Modifier): boolean;
      clone(): ContactHeldItemTransferChanceModifier;
      getArgs(): any[];
      getTransferredItemCount(): integer;
      getTransferMessage(pokemon: PokeRogue.field.Pokemon, targetPokemon: PokeRogue.field.Pokemon, item: ModifierTypes.ModifierType): string;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class IvScannerModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): IvScannerModifier;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class ExtraModifierModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): ExtraModifierModifier;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare abstract class EnemyPersistentModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  declare abstract class EnemyDamageMultiplierModifier extends EnemyPersistentModifier {
      protected damageMultiplier: number;
      constructor(type: PokeRogue.modifier.ModifierType, damageMultiplier: number, stackCount?: integer);
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class EnemyDamageBoosterModifier extends EnemyDamageMultiplierModifier {
      constructor(type: PokeRogue.modifier.ModifierType, boostPercent: number, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): EnemyDamageBoosterModifier;
      getArgs(): any[];
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class EnemyDamageReducerModifier extends EnemyDamageMultiplierModifier {
      constructor(type: PokeRogue.modifier.ModifierType, reductionPercent: number, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): EnemyDamageReducerModifier;
      getArgs(): any[];
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class EnemyTurnHealModifier extends EnemyPersistentModifier {
      healPercent: number;
      constructor(type: PokeRogue.modifier.ModifierType, healPercent: number, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): EnemyTurnHealModifier;
      getArgs(): any[];
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class EnemyAttackStatusEffectChanceModifier extends EnemyPersistentModifier {
      effect: PokeRogue.data.StatusEffect;
      chance: number;
      constructor(type: PokeRogue.modifier.ModifierType, effect: PokeRogue.data.StatusEffect, chancePercent: number, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): EnemyAttackStatusEffectChanceModifier;
      getArgs(): any[];
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class EnemyStatusEffectHealChanceModifier extends EnemyPersistentModifier {
      chance: number;
      constructor(type: PokeRogue.modifier.ModifierType, chancePercent: number, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): EnemyStatusEffectHealChanceModifier;
      getArgs(): any[];
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class EnemyEndureChanceModifier extends EnemyPersistentModifier {
      chance: number;
      constructor(type: PokeRogue.modifier.ModifierType, chancePercent?: number, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): EnemyEndureChanceModifier;
      getArgs(): any[];
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class EnemyFusionChanceModifier extends EnemyPersistentModifier {
      public chance;
      constructor(type: PokeRogue.modifier.ModifierType, chancePercent: number, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): EnemyFusionChanceModifier;
      getArgs(): any[];
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  /**
   * Uses override from overrides.ts to set PersistentModifiers for starting a new game
   * @param scene current BattleScene
   * @param player is this for player for enemy
   */
  export declare function overrideModifiers(scene: PokeRogue.BattleScene, player?: boolean): void;
  /**
   * Uses override from overrides.ts to set PokemonHeldItemModifiers for starting a new game
   * @param scene current BattleScene
   * @param player is this for player for enemy
   */
  export declare function overrideHeldItems(scene: PokeRogue.BattleScene, pokemon: PokeRogue.field.Pokemon, player?: boolean): void;
  export {};
  
}

declare namespace PokeRogue {
  //import { WeatherType } from "./data/weather";
  //import { Variant } from "./data/variant";
  //import { TempBattleStat } from "./data/temp-battle-stat";
  //import { Nature } from "./data/nature";
  //import { Type } from "./data/type";
  //import { Stat } from "./data/pokemon-stat";
  //import { PokeballCounts } from "./battle-scene";
  //import { Gender } from "./data/gender";
  //import { StatusEffect } from "./data/status-effect";
  //import { SpeciesStatBoosterItem, modifierTypes } from "./modifier/modifier-type";
  //import { VariantTier } from "./enums/variant-tiers";
  //import { EggTier } from "#enums/egg-type";
  //import { Abilities } from "#enums/abilities";
  //import { BerryType } from "#enums/berry-type";
  //import { Biome } from "#enums/biome";
  //import { Moves } from "#enums/moves";
  //import { Species } from "#enums/species";
  //import { TimeOfDay } from "#enums/time-of-day";
  /**
   * Overrides for testing different in game situations
   * if an override name starts with "STARTING", it will apply when a new run begins
   */
  /**
   * OVERALL OVERRIDES
   */
  export declare const SEED_OVERRIDE: string;
  export declare const WEATHER_OVERRIDE: PokeRogue.data.WeatherType;
  export declare const DOUBLE_BATTLE_OVERRIDE: boolean;
  export declare const SINGLE_BATTLE_OVERRIDE: boolean;
  export declare const STARTING_WAVE_OVERRIDE: integer;
  export declare const STARTING_BIOME_OVERRIDE: PokeRogue.enums.Biome;
  export declare const ARENA_TINT_OVERRIDE: PokeRogue.enums.TimeOfDay;
  export declare const XP_MULTIPLIER_OVERRIDE: number;
  export declare const STARTING_MONEY_OVERRIDE: integer;
  export declare const FREE_CANDY_UPGRADE_OVERRIDE: boolean;
  export declare const POKEBALL_OVERRIDE: {
      active: boolean;
      pokeballs: PokeRogue.PokeballCounts;
  };
  /**
   * PLAYER OVERRIDES
   */
  /**
   * Set the form index of any starter in the party whose `speciesId` is inside this override
   * @see {@link allSpecies} in `src/data/pokemon-species.ts` for form indexes
   * @example
   * ```
   * const STARTER_FORM_OVERRIDES = {
   *   [Species.DARMANITAN]: 1
   * }
   * ```
   */
  export declare const STARTER_FORM_OVERRIDES: Partial<Record<Species, number>>;
  export declare const STARTING_LEVEL_OVERRIDE: integer;
  /**
   * SPECIES OVERRIDE
   * will only apply to the first starter in your party or each enemy pokemon
   * default is 0 to not override
   * @example SPECIES_OVERRIDE = Species.Bulbasaur;
   */
  export declare const STARTER_SPECIES_OVERRIDE: PokeRogue.enums.Species | integer;
  export declare const ABILITY_OVERRIDE: PokeRogue.enums.Abilities;
  export declare const PASSIVE_ABILITY_OVERRIDE: PokeRogue.enums.Abilities;
  export declare const STATUS_OVERRIDE: PokeRogue.data.StatusEffect;
  export declare const GENDER_OVERRIDE: PokeRogue.data.Gender;
  export declare const MOVESET_OVERRIDE: Array<Moves>;
  export declare const SHINY_OVERRIDE: boolean;
  export declare const VARIANT_OVERRIDE: PokeRogue.data.Variant;
  /**
   * OPPONENT / ENEMY OVERRIDES
   */
  export declare const OPP_SPECIES_OVERRIDE: PokeRogue.enums.Species | integer;
  export declare const OPP_LEVEL_OVERRIDE: number;
  export declare const OPP_ABILITY_OVERRIDE: PokeRogue.enums.Abilities;
  export declare const OPP_PASSIVE_ABILITY_OVERRIDE: PokeRogue.enums.Abilities;
  export declare const OPP_STATUS_OVERRIDE: PokeRogue.data.StatusEffect;
  export declare const OPP_GENDER_OVERRIDE: PokeRogue.data.Gender;
  export declare const OPP_MOVESET_OVERRIDE: Array<Moves>;
  export declare const OPP_SHINY_OVERRIDE: boolean;
  export declare const OPP_VARIANT_OVERRIDE: PokeRogue.data.Variant;
  export declare const OPP_IVS_OVERRIDE: integer | integer[];
  /**
   * EGG OVERRIDES
   */
  export declare const EGG_IMMEDIATE_HATCH_OVERRIDE: boolean;
  export declare const EGG_TIER_OVERRIDE: PokeRogue.enums.EggTier;
  export declare const EGG_SHINY_OVERRIDE: boolean;
  export declare const EGG_VARIANT_OVERRIDE: PokeRogue.enums.VariantTier;
  export declare const EGG_FREE_GACHA_PULLS_OVERRIDE: boolean;
  export declare const EGG_GACHA_PULL_COUNT_OVERRIDE: number;
  /**
   * MODIFIER / ITEM OVERRIDES
   * if count is not provided, it will default to 1
   * @example Modifier Override [{name: "EXP_SHARE", count: 2}]
   * @example Held Item Override [{name: "LUCKY_EGG"}]
   *
   * Some items are generated based on a sub-type (i.e. berries), to override those:
   * @example [{name: "BERRY", count: 5, type: PokeRogue.enums.BerryType.SITRUS}]
   * types are listed in interface below
   * - TempBattleStat is for TEMP_STAT_BOOSTER / X Items (Dire hit is separate)
   * - Stat is for BASE_STAT_BOOSTER / Vitamin
   * - Nature is for MINT
   * - Type is for TERA_SHARD or ATTACK_TYPE_BOOSTER (type boosting items i.e Silk Scarf)
   * - BerryType is for BERRY
   * - SpeciesStatBoosterItem is for SPECIES_STAT_BOOSTER
   */
  interface ModifierOverride {
      name: keyof typeof modifierTypes & string;
      count?: integer;
      type?: TempBattleStat | Stat | Nature | Type | BerryType | SpeciesStatBoosterItem;
  }
  export declare const STARTING_MODIFIER_OVERRIDE: Array<ModifierOverride>;
  export declare const OPP_MODIFIER_OVERRIDE: Array<ModifierOverride>;
  export declare const STARTING_HELD_ITEMS_OVERRIDE: Array<ModifierOverride>;
  export declare const OPP_HELD_ITEMS_OVERRIDE: Array<ModifierOverride>;
  export declare const NEVER_CRIT_OVERRIDE: boolean;
  /**
   * An array of items by keys as defined in the "modifierTypes" object in the "modifier/modifier-type.ts" file.
   * Items listed will replace the normal rolls.
   * If less items are listed than rolled, only some items will be replaced
   * If more items are listed than rolled, only the first X items will be shown, where X is the number of items rolled.
   */
  export declare const ITEM_REWARD_OVERRIDE: Array<String>;
  export {};
  
}

declare namespace PokeRogue {
  //import BattleScene from "./battle-scene";
  export declare class Phase {
      protected scene: PokeRogue.BattleScene;
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
      end(): void;
  }
  
}

declare namespace PokeRogue {
  //import BattleScene from "./battle-scene";
  //import { default as Pokemon, PlayerPokemon, EnemyPokemon, PokemonMove, DamageResult } from "./field/pokemon";
  //import { Command } from "./ui/command-ui-handler";
  //import { Modifier } from "./modifier/modifier";
  //import { PokeballType } from "./data/pokeball";
  //import { CommonAnim } from "./data/battle-anims";
  //import { StatusEffect } from "./data/status-effect";
  //import { Phase } from "./phase";
  //import { BattleStat } from "./data/battle-stat";
  //import { ModifierTier } from "./modifier/modifier-tier";
  //import { ModifierPoolType, ModifierType, ModifierTypeFunc, ModifierTypeOption } from "./modifier/modifier-type";
  //import { Starter } from "./ui/starter-select-ui-handler";
  //import { Weather } from "./data/weather";
  //import { Unlockables } from "./system/unlockables";
  //import { BattlerIndex } from "./battle";
  //import { TrainerSlot } from "./data/trainer-config";
  //import { GameModes } from "./game-mode";
  //import PokemonSpecies from "./data/pokemon-species";
  //import { Abilities } from "#enums/abilities";
  //import { Biome } from "#enums/biome";
  //import { Moves } from "#enums/moves";
  //import { TrainerType } from "#enums/trainer-type";
  export declare class LoginPhase extends PokeRogue.Phase {
      public showText;
      constructor(scene: PokeRogue.BattleScene, showText?: boolean);
      start(): void;
      end(): void;
  }
  export declare class TitlePhase extends PokeRogue.Phase {
      public loaded;
      public lastSessionData;
      gameMode: PokeRogue.GameModes;
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
      showOptions(): void;
      loadSaveSlot(slotId: integer): void;
      initDailyRun(): void;
      end(): void;
  }
  export declare class UnavailablePhase extends PokeRogue.Phase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  export declare class ReloadSessionPhase extends PokeRogue.Phase {
      public systemDataStr;
      constructor(scene: PokeRogue.BattleScene, systemDataStr?: string);
      start(): void;
  }
  export declare class OutdatedPhase extends PokeRogue.Phase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  export declare class SelectGenderPhase extends PokeRogue.Phase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
      end(): void;
  }
  export declare class SelectChallengePhase extends PokeRogue.Phase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  export declare class SelectStarterPhase extends PokeRogue.Phase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
      /**
       * Initialize starters before starting the first battle
       * @param starters {@linkcode Pokemon} with which to start the first battle
       */
      initBattle(starters: PokeRogue.ui.Starter[]): void;
  }
  export declare class BattlePhase extends PokeRogue.Phase {
      constructor(scene: PokeRogue.BattleScene);
      showEnemyTrainer(trainerSlot?: TrainerSlot): void;
      hideEnemyTrainer(): void;
  }
  type PokemonFunc = (pokemon: PokeRogue.field.Pokemon) => void;
  export declare abstract class FieldPhase extends BattlePhase {
      getOrder(): BattlerIndex[];
      executeForAll(func: PokemonFunc): void;
  }
  export declare abstract class PokemonPhase extends FieldPhase {
      protected battlerIndex: PokeRogue.BattlerIndex | integer;
      player: boolean;
      fieldIndex: integer;
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex | integer);
      getPokemon(): Pokemon;
  }
  export declare abstract class PartyMemberPokemonPhase extends FieldPhase {
      protected partyMemberIndex: integer;
      protected fieldIndex: integer;
      protected player: boolean;
      constructor(scene: PokeRogue.BattleScene, partyMemberIndex: integer, player: boolean);
      getParty(): Pokemon[];
      getPokemon(): Pokemon;
  }
  export declare abstract class PlayerPartyMemberPokemonPhase extends PartyMemberPokemonPhase {
      constructor(scene: PokeRogue.BattleScene, partyMemberIndex: integer);
      getPlayerPokemon(): PlayerPokemon;
  }
  export declare abstract class EnemyPartyMemberPokemonPhase extends PartyMemberPokemonPhase {
      constructor(scene: PokeRogue.BattleScene, partyMemberIndex: integer);
      getEnemyPokemon(): EnemyPokemon;
  }
  export declare class EncounterPhase extends BattlePhase {
      public loaded;
      constructor(scene: PokeRogue.BattleScene, loaded?: boolean);
      start(): void;
      doEncounter(): void;
      getEncounterMessage(): string;
      doEncounterCommon(showEncounterMessage?: boolean): void;
      end(): void;
      tryOverrideForBattleSpec(): boolean;
  }
  export declare class NextEncounterPhase extends EncounterPhase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
      doEncounter(): void;
  }
  export declare class NewBiomeEncounterPhase extends NextEncounterPhase {
      constructor(scene: PokeRogue.BattleScene);
      doEncounter(): void;
  }
  export declare class PostSummonPhase extends PokemonPhase {
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex);
      start(): void;
  }
  export declare class SelectBiomePhase extends BattlePhase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
      generateNextBiome(): Biome;
  }
  export declare class SwitchBiomePhase extends BattlePhase {
      public nextBiome;
      constructor(scene: PokeRogue.BattleScene, nextBiome: PokeRogue.enums.Biome);
      start(): void;
  }
  export declare class SummonPhase extends PartyMemberPokemonPhase {
      public loaded;
      constructor(scene: PokeRogue.BattleScene, fieldIndex: integer, player?: boolean, loaded?: boolean);
      start(): void;
      /**
      * Sends out a Pokemon before the battle begins and shows the appropriate messages
      */
      preSummon(): void;
      summon(): void;
      onEnd(): void;
      queuePostSummon(): void;
      end(): void;
  }
  export declare class SwitchSummonPhase extends SummonPhase {
      public slotIndex;
      public doReturn;
      public batonPass;
      public lastPokemon;
      constructor(scene: PokeRogue.BattleScene, fieldIndex: integer, slotIndex: integer, doReturn: boolean, batonPass: boolean, player?: boolean);
      start(): void;
      preSummon(): void;
      switchAndSummon(): void;
      onEnd(): void;
      queuePostSummon(): void;
  }
  export declare class ReturnPhase extends SwitchSummonPhase {
      constructor(scene: PokeRogue.BattleScene, fieldIndex: integer);
      switchAndSummon(): void;
      summon(): void;
      onEnd(): void;
  }
  export declare class ShowTrainerPhase extends BattlePhase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  export declare class ToggleDoublePositionPhase extends BattlePhase {
      public double;
      constructor(scene: PokeRogue.BattleScene, double: boolean);
      start(): void;
  }
  export declare class CheckSwitchPhase extends BattlePhase {
      protected fieldIndex: integer;
      protected useName: boolean;
      constructor(scene: PokeRogue.BattleScene, fieldIndex: integer, useName: boolean);
      start(): void;
  }
  export declare class SummonMissingPhase extends SummonPhase {
      constructor(scene: PokeRogue.BattleScene, fieldIndex: integer);
      preSummon(): void;
  }
  export declare class LevelCapPhase extends FieldPhase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  export declare class TurnInitPhase extends FieldPhase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  export declare class CommandPhase extends FieldPhase {
      protected fieldIndex: integer;
      constructor(scene: PokeRogue.BattleScene, fieldIndex: integer);
      start(): void;
      handleCommand(command: PokeRogue.ui.Command, cursor: integer, ...args: any[]): boolean;
      cancel(): void;
      checkFightOverride(): boolean;
      getFieldIndex(): integer;
      getPokemon(): PlayerPokemon;
      end(): void;
  }
  export declare class EnemyCommandPhase extends FieldPhase {
      protected fieldIndex: integer;
      constructor(scene: PokeRogue.BattleScene, fieldIndex: integer);
      start(): void;
  }
  export declare class SelectTargetPhase extends PokemonPhase {
      constructor(scene: PokeRogue.BattleScene, fieldIndex: integer);
      start(): void;
  }
  export declare class TurnStartPhase extends FieldPhase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  /** The phase after attacks where the pokemon eat berries */
  export declare class BerryPhase extends FieldPhase {
      start(): void;
  }
  export declare class TurnEndPhase extends FieldPhase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  export declare class BattleEndPhase extends BattlePhase {
      start(): void;
  }
  export declare class NewBattlePhase extends BattlePhase {
      start(): void;
  }
  export declare class CommonAnimPhase extends PokemonPhase {
      public anim;
      public targetIndex;
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex, targetIndex: PokeRogue.BattlerIndex, anim: PokeRogue.data.CommonAnim);
      setAnimation(anim: PokeRogue.data.CommonAnim): void;
      start(): void;
  }
  export declare class MovePhase extends BattlePhase {
      pokemon: PokeRogue.field.Pokemon;
      move: PokeRogue.field.PokemonMove;
      targets: PokeRogue.BattlerIndex[];
      protected followUp: boolean;
      protected ignorePp: boolean;
      protected failed: boolean;
      protected cancelled: boolean;
      constructor(scene: PokeRogue.BattleScene, pokemon: PokeRogue.field.Pokemon, targets: PokeRogue.BattlerIndex[], move: PokeRogue.field.PokemonMove, followUp?: boolean, ignorePp?: boolean);
      canMove(): boolean;
      /**Signifies the current move should fail but still use PP */
      fail(): void;
      /**Signifies the current move should cancel and retain PP */
      cancel(): void;
      start(): void;
      getEffectPhase(): MoveEffectPhase;
      showMoveText(): void;
      showFailedText(failedText?: string): void;
      end(): void;
  }
  export declare class MoveEffectPhase extends PokemonPhase {
      move: PokeRogue.field.PokemonMove;
      protected targets: PokeRogue.BattlerIndex[];
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex, targets: PokeRogue.BattlerIndex[], move: PokeRogue.field.PokemonMove);
      start(): void;
      end(): void;
      hitCheck(target: PokeRogue.field.Pokemon): boolean;
      getUserPokemon(): Pokemon;
      getTargets(): Pokemon[];
      getTarget(): Pokemon;
      removeTarget(target: PokeRogue.field.Pokemon): void;
      stopMultiHit(target?: Pokemon): void;
      getNewHitPhase(): MoveEffectPhase;
  }
  export declare class MoveEndPhase extends PokemonPhase {
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex);
      start(): void;
  }
  export declare class MoveAnimTestPhase extends BattlePhase {
      public moveQueue;
      constructor(scene: PokeRogue.BattleScene, moveQueue?: Moves[]);
      start(): void;
      playMoveAnim(moveQueue: PokeRogue.enums.Moves[], player: boolean): void;
  }
  export declare class ShowAbilityPhase extends PokemonPhase {
      public passive;
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex, passive?: boolean);
      start(): void;
  }
  export declare class StatChangePhase extends PokemonPhase {
      public stats;
      public selfTarget;
      public levels;
      public showMessage;
      public ignoreAbilities;
      public canBeCopied;
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex, selfTarget: boolean, stats: PokeRogue.data.BattleStat[], levels: integer, showMessage?: boolean, ignoreAbilities?: boolean, canBeCopied?: boolean);
      start(): void;
      getRandomStat(): BattleStat;
      aggregateStatChanges(random?: boolean): void;
      getStatChangeMessages(stats: PokeRogue.data.BattleStat[], levels: integer, relLevels: integer[]): string[];
  }
  export declare class WeatherEffectPhase extends CommonAnimPhase {
      weather: PokeRogue.data.Weather;
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  export declare class ObtainStatusEffectPhase extends PokemonPhase {
      public statusEffect;
      public cureTurn;
      public sourceText;
      public sourcePokemon;
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex, statusEffect: PokeRogue.data.StatusEffect, cureTurn?: integer, sourceText?: string, sourcePokemon?: Pokemon);
      start(): void;
  }
  export declare class PostTurnStatusEffectPhase extends PokemonPhase {
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex);
      start(): void;
  }
  export declare class MessagePhase extends PokeRogue.Phase {
      public text;
      public callbackDelay;
      public prompt;
      public promptDelay;
      constructor(scene: PokeRogue.BattleScene, text: string, callbackDelay?: integer, prompt?: boolean, promptDelay?: integer);
      start(): void;
      end(): void;
  }
  export declare class DamagePhase extends PokemonPhase {
      public amount;
      public damageResult;
      public critical;
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex, amount: integer, damageResult?: DamageResult, critical?: boolean);
      start(): void;
      updateAmount(amount: integer): void;
      applyDamage(): void;
      end(): void;
  }
  export declare class FaintPhase extends PokemonPhase {
      public preventEndure;
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex, preventEndure?: boolean);
      start(): void;
      doFaint(): void;
      tryOverrideForBattleSpec(): boolean;
  }
  export declare class VictoryPhase extends PokemonPhase {
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex);
      start(): void;
  }
  export declare class TrainerVictoryPhase extends BattlePhase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  export declare class MoneyRewardPhase extends BattlePhase {
      public moneyMultiplier;
      constructor(scene: PokeRogue.BattleScene, moneyMultiplier: number);
      start(): void;
  }
  export declare class ModifierRewardPhase extends BattlePhase {
      protected modifierType: PokeRogue.modifier.ModifierType;
      constructor(scene: PokeRogue.BattleScene, modifierTypeFunc: PokeRogue.modifier.ModifierTypeFunc);
      start(): void;
      doReward(): Promise<void>;
  }
  export declare class GameOverModifierRewardPhase extends ModifierRewardPhase {
      constructor(scene: PokeRogue.BattleScene, modifierTypeFunc: PokeRogue.modifier.ModifierTypeFunc);
      doReward(): Promise<void>;
  }
  export declare class RibbonModifierRewardPhase extends ModifierRewardPhase {
      public species;
      constructor(scene: PokeRogue.BattleScene, modifierTypeFunc: PokeRogue.modifier.ModifierTypeFunc, species: PokeRogue.data.PokemonSpecies);
      doReward(): Promise<void>;
  }
  export declare class GameOverPhase extends BattlePhase {
      public victory;
      public firstRibbons;
      constructor(scene: PokeRogue.BattleScene, victory?: boolean);
      start(): void;
      handleGameOver(): void;
      handleUnlocks(): void;
      awardRibbon(pokemon: PokeRogue.field.Pokemon, forStarter?: boolean): void;
  }
  export declare class EndCardPhase extends PokeRogue.Phase {
      endCard: Phaser.GameObjects.Image;
      text: Phaser.GameObjects.Text;
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  export declare class UnlockPhase extends PokeRogue.Phase {
      public unlockable;
      constructor(scene: PokeRogue.BattleScene, unlockable: PokeRogue.system.Unlockables);
      start(): void;
  }
  export declare class PostGameOverPhase extends PokeRogue.Phase {
      public endCardPhase;
      constructor(scene: PokeRogue.BattleScene, endCardPhase: EndCardPhase);
      start(): void;
  }
  export declare class SwitchPhase extends BattlePhase {
      protected fieldIndex: integer;
      public isModal;
      public doReturn;
      constructor(scene: PokeRogue.BattleScene, fieldIndex: integer, isModal: boolean, doReturn: boolean);
      start(): void;
  }
  export declare class ExpPhase extends PlayerPartyMemberPokemonPhase {
      public expValue;
      constructor(scene: PokeRogue.BattleScene, partyMemberIndex: integer, expValue: number);
      start(): void;
  }
  export declare class ShowPartyExpBarPhase extends PlayerPartyMemberPokemonPhase {
      public expValue;
      constructor(scene: PokeRogue.BattleScene, partyMemberIndex: integer, expValue: number);
      start(): void;
  }
  export declare class HidePartyExpBarPhase extends BattlePhase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  export declare class LevelUpPhase extends PlayerPartyMemberPokemonPhase {
      public lastLevel;
      public level;
      constructor(scene: PokeRogue.BattleScene, partyMemberIndex: integer, lastLevel: integer, level: integer);
      start(): void;
  }
  export declare class LearnMovePhase extends PlayerPartyMemberPokemonPhase {
      public moveId;
      constructor(scene: PokeRogue.BattleScene, partyMemberIndex: integer, moveId: PokeRogue.enums.Moves);
      start(): void;
  }
  export declare class PokemonHealPhase extends CommonAnimPhase {
      public hpHealed;
      public message;
      public showFullHpMessage;
      public skipAnim;
      public revive;
      public healStatus;
      public preventFullHeal;
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex, hpHealed: integer, message: string, showFullHpMessage: boolean, skipAnim?: boolean, revive?: boolean, healStatus?: boolean, preventFullHeal?: boolean);
      start(): void;
      end(): void;
  }
  export declare class AttemptCapturePhase extends PokemonPhase {
      public pokeballType;
      public pokeball;
      public originalY;
      constructor(scene: PokeRogue.BattleScene, targetIndex: integer, pokeballType: PokeRogue.data.PokeballType);
      start(): void;
      failCatch(shakeCount: integer): void;
      catch(): void;
      removePb(): void;
  }
  export declare class AttemptRunPhase extends PokemonPhase {
      constructor(scene: PokeRogue.BattleScene, fieldIndex: integer);
      start(): void;
  }
  export declare class SelectModifierPhase extends BattlePhase {
      public rerollCount;
      public modifierTiers;
      constructor(scene: PokeRogue.BattleScene, rerollCount?: integer, modifierTiers?: ModifierTier[]);
      start(): void;
      updateSeed(): void;
      isPlayer(): boolean;
      getRerollCost(typeOptions: PokeRogue.modifier.ModifierTypeOption[], lockRarities: boolean): integer;
      getPoolType(): ModifierPoolType;
      getModifierTypeOptions(modifierCount: integer): ModifierTypeOption[];
      addModifier(modifier: PokeRogue.modifier.Modifier): Promise<boolean>;
  }
  export declare class EggLapsePhase extends PokeRogue.Phase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  export declare class AddEnemyBuffModifierPhase extends PokeRogue.Phase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  /**
   * Cures the party of all non-volatile status conditions, shows a message
   * @param {BattleScene} scene The current scene
   * @param {Pokemon} user The user of the move that cures the party
   * @param {string} message The message that should be displayed
   * @param {Abilities} abilityCondition Pokemon with this ability will not be affected ie. Soundproof
   */
  export declare class PartyStatusCurePhase extends BattlePhase {
      public user;
      public message;
      public abilityCondition;
      constructor(scene: PokeRogue.BattleScene, user: PokeRogue.field.Pokemon, message: string, abilityCondition: PokeRogue.enums.Abilities);
      start(): void;
  }
  export declare class PartyHealPhase extends BattlePhase {
      public resumeBgm;
      constructor(scene: PokeRogue.BattleScene, resumeBgm: boolean);
      start(): void;
  }
  export declare class ShinySparklePhase extends PokemonPhase {
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex);
      start(): void;
  }
  export declare class ScanIvsPhase extends PokemonPhase {
      public shownIvs;
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex, shownIvs: integer);
      start(): void;
  }
  export declare class TrainerMessageTestPhase extends BattlePhase {
      public trainerTypes;
      constructor(scene: PokeRogue.BattleScene, ...trainerTypes: PokeRogue.enums.TrainerType[]);
      start(): void;
  }
  export declare class TestMessagePhase extends MessagePhase {
      constructor(scene: PokeRogue.BattleScene, message: string);
  }
  export {};
  
}

declare namespace PokeRogue.pipelines {
  export class FieldSpritePipeline extends Phaser.Renderer.WebGL.Pipelines.MultiPipeline {
      constructor(game: Phaser.Game, config?: Phaser.Types.Renderer.WebGL.WebGLPipelineConfig);
      onPreRender(): void;
      onBind(gameObject: Phaser.GameObjects.GameObject): void;
      onBatch(gameObject: Phaser.GameObjects.GameObject): void;
  }
  
}

declare namespace PokeRogue.pipelines {
  import { Game } from "phaser";
  export class InvertPostFX extends Phaser.Renderer.WebGL.Pipelines.PostFXPipeline {
      constructor(game: Game);
  }
  
}

declare namespace PokeRogue.pipelines {
  //import FieldSpritePipeline from "./field-sprite";
  export class SpritePipeline extends PokeRogue.pipelines.FieldSpritePipeline {
      public _tone;
      constructor(game: Phaser.Game);
      onPreRender(): void;
      onBind(gameObject: Phaser.GameObjects.GameObject): void;
      onBatch(gameObject: Phaser.GameObjects.GameObject): void;
      batchQuad(gameObject: Phaser.GameObjects.GameObject, x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, u0: number, v0: number, u1: number, v1: number, tintTL: number, tintTR: number, tintBL: number, tintBR: number, tintEffect: number | boolean, texture?: Phaser.Renderer.WebGL.Wrappers.WebGLTextureWrapper, unit?: number): boolean;
      get tone(): number[];
      set tone(value: number[]);
  }
  
}

declare namespace PokeRogue.plugins {
  export class CacheBustedLoaderPlugin extends Phaser.Loader.LoaderPlugin {
      constructor(scene: Phaser.Scene);
      get manifest(): object;
      set manifest(manifestObj: object);
      addFile(file: any): void;
  }
  
}

declare namespace PokeRogue.plugins {
  import i18next from "i18next";
  export declare function initI18n(): Promise<void>;

  export declare function getIsInitialized(): boolean;
  
}

declare namespace PokeRogue {
  export declare const legacyCompatibleImages: string[];
  export declare class SceneBase extends Phaser.Scene {
      /**
       * Since everything is scaled up by 6 by default using the game.canvas is annoying
       * Until such point that we use the canvas normally, this will be easier than
       * having to divide every width and heigh by 6 to position and scale the ui
       * @readonly
       * @defaultValue
       * width: `320`
       * height: `180`
       */
      readonly scaledCanvas: {
          width: number;
          height: number;
      };
      constructor(config?: string | Phaser.Types.Scenes.SettingsConfig);
      getCachedUrl(url: string): string;
      loadImage(key: string, folder: string, filename?: string): void;
      loadSpritesheet(key: string, folder: string, size: integer, filename?: string): void;
      loadAtlas(key: string, folder: string, filenameRoot?: string): void;
      loadSe(key: string, folder?: string, filenames?: string | string[]): void;
      loadBgm(key: string, filename?: string): void;
  }
  
}

declare namespace PokeRogue.system {
  import { Modifier } from "typescript";
  //import BattleScene from "../battle-scene";
  //import { PlayerGender } from "#enums/player-gender";
  //import { Challenge } from "#app/data/challenge.js";
  export declare enum AchvTier {
      COMMON = 0,
      GREAT = 1,
      ULTRA = 2,
      ROGUE = 3,
      MASTER = 4
  }
  export declare class Achv {
      localizationKey: string;
      id: string;
      name: string;
      description: string;
      iconImage: string;
      score: integer;
      secret: boolean;
      hasParent: boolean;
      parentId: string;
      public conditionFunc;
      constructor(localizationKey: string, name: string, description: string, iconImage: string, score: integer, conditionFunc?: (scene: PokeRogue.BattleScene, args: any[]) => boolean);
      /**
       * Get the name of the achievement based on the gender of the player
       * @param playerGender - the gender of the player
       * @returns the name of the achievement localized for the player gender
       */
      getName(playerGender: PokeRogue.enums.PlayerGender): string;
      getDescription(): string;
      getIconImage(): string;
      setSecret(hasParent?: boolean): this;
      validate(scene: PokeRogue.BattleScene, args: any[]): boolean;
      getTier(): AchvTier;
  }
  export declare class MoneyAchv extends Achv {
      moneyAmount: integer;
      constructor(localizationKey: string, name: string, moneyAmount: integer, iconImage: string, score: integer);
  }
  export declare class RibbonAchv extends Achv {
      ribbonAmount: integer;
      constructor(localizationKey: string, name: string, ribbonAmount: integer, iconImage: string, score: integer);
  }
  export declare class DamageAchv extends Achv {
      damageAmount: integer;
      constructor(localizationKey: string, name: string, damageAmount: integer, iconImage: string, score: integer);
  }
  export declare class HealAchv extends Achv {
      healAmount: integer;
      constructor(localizationKey: string, name: string, healAmount: integer, iconImage: string, score: integer);
  }
  export declare class LevelAchv extends Achv {
      level: integer;
      constructor(localizationKey: string, name: string, level: integer, iconImage: string, score: integer);
  }
  export declare class ModifierAchv extends Achv {
      constructor(localizationKey: string, name: string, description: string, iconImage: string, score: integer, modifierFunc: (modifier: Modifier) => boolean);
  }
  export declare class ChallengeAchv extends Achv {
      constructor(localizationKey: string, name: string, description: string, iconImage: string, score: integer, challengeFunc: (challenge: PokeRogue.data.Challenge) => boolean);
  }
  /**
   * Get the description of an achievement from the localization file with all the necessary variables filled in
   * @param localizationKey The localization key of the achievement
   * @returns The description of the achievement
   */
  export declare function getAchievementDescription(localizationKey: string): string;
  export declare const achvs: {
      _10K_MONEY: MoneyAchv;
      _100K_MONEY: MoneyAchv;
      _1M_MONEY: MoneyAchv;
      _10M_MONEY: MoneyAchv;
      _250_DMG: DamageAchv;
      _1000_DMG: DamageAchv;
      _2500_DMG: DamageAchv;
      _10000_DMG: DamageAchv;
      _250_HEAL: HealAchv;
      _1000_HEAL: HealAchv;
      _2500_HEAL: HealAchv;
      _10000_HEAL: HealAchv;
      LV_100: LevelAchv;
      LV_250: LevelAchv;
      LV_1000: LevelAchv;
      _10_RIBBONS: RibbonAchv;
      _25_RIBBONS: RibbonAchv;
      _50_RIBBONS: RibbonAchv;
      _75_RIBBONS: RibbonAchv;
      _100_RIBBONS: RibbonAchv;
      TRANSFER_MAX_BATTLE_STAT: Achv;
      MAX_FRIENDSHIP: Achv;
      MEGA_EVOLVE: Achv;
      GIGANTAMAX: Achv;
      TERASTALLIZE: Achv;
      STELLAR_TERASTALLIZE: Achv;
      SPLICE: Achv;
      MINI_BLACK_HOLE: ModifierAchv;
      CATCH_MYTHICAL: Achv;
      CATCH_SUB_LEGENDARY: Achv;
      CATCH_LEGENDARY: Achv;
      SEE_SHINY: Achv;
      SHINY_PARTY: Achv;
      HATCH_MYTHICAL: Achv;
      HATCH_SUB_LEGENDARY: Achv;
      HATCH_LEGENDARY: Achv;
      HATCH_SHINY: Achv;
      HIDDEN_ABILITY: Achv;
      PERFECT_IVS: Achv;
      CLASSIC_VICTORY: Achv;
      MONO_GEN_ONE_VICTORY: ChallengeAchv;
      MONO_GEN_TWO_VICTORY: ChallengeAchv;
      MONO_GEN_THREE_VICTORY: ChallengeAchv;
      MONO_GEN_FOUR_VICTORY: ChallengeAchv;
      MONO_GEN_FIVE_VICTORY: ChallengeAchv;
      MONO_GEN_SIX_VICTORY: ChallengeAchv;
      MONO_GEN_SEVEN_VICTORY: ChallengeAchv;
      MONO_GEN_EIGHT_VICTORY: ChallengeAchv;
      MONO_GEN_NINE_VICTORY: ChallengeAchv;
      MONO_NORMAL: ChallengeAchv;
      MONO_FIGHTING: ChallengeAchv;
      MONO_FLYING: ChallengeAchv;
      MONO_POISON: ChallengeAchv;
      MONO_GROUND: ChallengeAchv;
      MONO_ROCK: ChallengeAchv;
      MONO_BUG: ChallengeAchv;
      MONO_GHOST: ChallengeAchv;
      MONO_STEEL: ChallengeAchv;
      MONO_FIRE: ChallengeAchv;
      MONO_WATER: ChallengeAchv;
      MONO_GRASS: ChallengeAchv;
      MONO_ELECTRIC: ChallengeAchv;
      MONO_PSYCHIC: ChallengeAchv;
      MONO_ICE: ChallengeAchv;
      MONO_DRAGON: ChallengeAchv;
      MONO_DARK: ChallengeAchv;
      MONO_FAIRY: ChallengeAchv;
  };
  export declare function initAchievements(): void;
  
}

declare namespace PokeRogue.system {
  //import { Arena } from "../field/arena";
  //import { ArenaTag } from "../data/arena-tag";
  //import { Biome } from "#enums/biome";
  //import { Weather } from "../data/weather";
  //import { Terrain } from "#app/data/terrain.js";
  export class ArenaData {
      biome: PokeRogue.enums.Biome;
      weather: PokeRogue.data.Weather;
      terrain: PokeRogue.data.Terrain;
      tags: PokeRogue.data.ArenaTag[];
      constructor(source: PokeRogue.field.Arena | any);
  }
  
}

declare namespace PokeRogue.system {
  //import { Challenge } from "#app/data/challenge.js";
  export class ChallengeData {
      id: integer;
      value: integer;
      severity: integer;
      constructor(source: PokeRogue.data.Challenge | any);
      toChallenge(): Challenge;
  }
  
}

declare namespace PokeRogue.system {
  //import { EggTier } from "#enums/egg-type";
  //import { Species } from "#enums/species";
  //import { VariantTier } from "#enums/variant-tiers";
  //import { Egg } from "../data/egg";
  //import { EggSourceType } from "#app/enums/egg-source-types.js";
  export class EggData {
      id: integer;
      tier: PokeRogue.enums.EggTier;
      sourceType: PokeRogue.enums.EggSourceType;
      hatchWaves: integer;
      timestamp: integer;
      variantTier: PokeRogue.enums.VariantTier;
      isShiny: boolean;
      species: PokeRogue.enums.Species;
      eggMoveIndex: number;
      overrideHiddenAbility: boolean;
      constructor(source: PokeRogue.data.Egg | any);
      toEgg(): Egg;
  }
  
}

declare namespace PokeRogue.system {
  //import BattleScene, { PokeballCounts } from "../battle-scene";
  //import Pokemon from "../field/pokemon";
  //import PokemonSpecies from "../data/pokemon-species";
  //import PokemonData from "./pokemon-data";
  //import PersistentModifierData from "./modifier-data";
  //import ArenaData from "./arena-data";
  //import { GameModes } from "../game-mode";
  //import { BattleType } from "../battle";
  //import TrainerData from "./trainer-data";
  //import EggData from "./egg-data";
  //import { Egg } from "../data/egg";
  //import { Nature } from "../data/nature";
  //import { GameStats } from "./game-stats";
  //import { Tutorial } from "../tutorial";
  //import { Variant } from "#app/data/variant";
  //import { SettingGamepad } from "./settings/settings-gamepad";
  //import { SettingKeyboard } from "#app/system/settings/settings-keyboard";
  //import ChallengeData from "./challenge-data";
  //import { Device } from "#enums/devices";
  //import { GameDataType } from "#enums/game-data-type";
  //import { Moves } from "#enums/moves";
  //import { PlayerGender } from "#enums/player-gender";
  //import { Species } from "#enums/species";
  export declare const defaultStarterSpecies: PokeRogue.enums.Species[];
  export declare function getDataTypeKey(dataType: PokeRogue.enums.GameDataType, slotId?: integer): string;
  export declare function encrypt(data: string, bypassLogin: boolean): string;
  export declare function decrypt(data: string, bypassLogin: boolean): string;
  interface SystemSaveData {
      trainerId: integer;
      secretId: integer;
      gender: PokeRogue.enums.PlayerGender;
      dexData: DexData;
      starterData: StarterData;
      gameStats: PokeRogue.system.GameStats;
      unlocks: Unlocks;
      achvUnlocks: AchvUnlocks;
      voucherUnlocks: VoucherUnlocks;
      voucherCounts: VoucherCounts;
      eggs: PokeRogue.system.EggData[];
      gameVersion: string;
      timestamp: integer;
      eggPity: integer[];
      unlockPity: integer[];
  }
  export interface SessionSaveData {
      seed: string;
      playTime: integer;
      gameMode: PokeRogue.GameModes;
      party: PokeRogue.system.PokemonData[];
      enemyParty: PokeRogue.system.PokemonData[];
      modifiers: PokeRogue.system.PersistentModifierData[];
      enemyModifiers: PokeRogue.system.PersistentModifierData[];
      arena: PokeRogue.system.ArenaData;
      pokeballCounts: PokeRogue.PokeballCounts;
      money: integer;
      score: integer;
      waveIndex: integer;
      battleType: PokeRogue.BattleType;
      trainer: PokeRogue.system.TrainerData;
      gameVersion: string;
      timestamp: integer;
      challenges: PokeRogue.system.ChallengeData[];
  }
  interface Unlocks {
      [key: integer]: boolean;
  }
  interface AchvUnlocks {
      [key: string]: integer;
  }
  interface VoucherUnlocks {
      [key: string]: integer;
  }
  export interface VoucherCounts {
      [type: string]: integer;
  }
  export interface DexData {
      [key: integer]: DexEntry;
  }
  export interface DexEntry {
      seenAttr: bigint;
      caughtAttr: bigint;
      natureAttr: integer;
      seenCount: integer;
      caughtCount: integer;
      hatchedCount: integer;
      ivs: integer[];
  }
  export declare const DexAttr: {
      NON_SHINY: bigint;
      SHINY: bigint;
      MALE: bigint;
      FEMALE: bigint;
      DEFAULT_VARIANT: bigint;
      VARIANT_2: bigint;
      VARIANT_3: bigint;
      DEFAULT_FORM: bigint;
  };
  export interface DexAttrProps {
      shiny: boolean;
      female: boolean;
      variant: PokeRogue.data.Variant;
      formIndex: integer;
  }
  export declare const AbilityAttr: {
      ABILITY_1: number;
      ABILITY_2: number;
      ABILITY_HIDDEN: number;
  };
  export type StarterMoveset = [Moves] | [Moves, Moves] | [Moves, Moves, Moves] | [Moves, Moves, Moves, Moves];
  export interface StarterFormMoveData {
      [key: integer]: StarterMoveset;
  }
  export interface StarterMoveData {
      [key: integer]: StarterMoveset | StarterFormMoveData;
  }
  export interface StarterAttributes {
      nature?: integer;
      ability?: integer;
      variant?: integer;
      form?: integer;
      female?: boolean;
  }
  export interface StarterPreferences {
      [key: integer]: StarterAttributes;
  }
  export declare class StarterPrefs {
      static load(): StarterPreferences;
      static save(prefs: StarterPreferences): void;
  }
  export interface StarterDataEntry {
      moveset: StarterMoveset | StarterFormMoveData;
      eggMoves: integer;
      candyCount: integer;
      friendship: integer;
      abilityAttr: integer;
      passiveAttr: integer;
      valueReduction: integer;
      classicWinCount: integer;
  }
  export interface StarterData {
      [key: integer]: StarterDataEntry;
  }
  export interface TutorialFlags {
      [key: string]: boolean;
  }
  export interface SeenDialogues {
      [key: string]: boolean;
  }
  export declare class GameData {
      public scene;
      trainerId: integer;
      secretId: integer;
      gender: PokeRogue.enums.PlayerGender;
      dexData: DexData;
      public defaultDexData;
      starterData: StarterData;
      gameStats: PokeRogue.system.GameStats;
      unlocks: Unlocks;
      achvUnlocks: AchvUnlocks;
      voucherUnlocks: VoucherUnlocks;
      voucherCounts: VoucherCounts;
      eggs: PokeRogue.data.Egg[];
      eggPity: integer[];
      unlockPity: integer[];
      constructor(scene: PokeRogue.BattleScene);
      getSystemSaveData(): SystemSaveData;
      saveSystem(): Promise<boolean>;
      loadSystem(): Promise<boolean>;
      initSystem(systemDataStr: string, cachedSystemDataStr?: string): Promise<boolean>;
      parseSystemData(dataStr: string): SystemSaveData;
      convertSystemDataStr(dataStr: string, shorten?: boolean): string;
      verify(): Promise<boolean>;
      clearLocalData(): void;
      /**
       * Saves a setting to localStorage
       * @param setting string ideally of SettingKeys
       * @param valueIndex index of the setting's option
       * @returns true
       */
      saveSetting(setting: string, valueIndex: integer): boolean;
      /**
       * Saves the mapping configurations for a specified device.
       *
       * @param deviceName - The name of the device for which the configurations are being saved.
       * @param config - The configuration object containing custom mapping details.
       * @returns `true` if the configurations are successfully saved.
       */
      saveMappingConfigs(deviceName: string, config: any): boolean;
      /**
       * Loads the mapping configurations from localStorage and injects them into the input controller.
       *
       * @returns `true` if the configurations are successfully loaded and injected; `false` if no configurations are found in localStorage.
       *
       * @remarks
       * This method checks if the 'mappingConfigs' entry exists in localStorage. If it does not exist, the method returns `false`.
       * If 'mappingConfigs' exists, it parses the configurations and injects each configuration into the input controller
       * for the corresponding gamepad or device key. The method then returns `true` to indicate success.
       */
      loadMappingConfigs(): boolean;
      resetMappingToFactory(): boolean;
      /**
       * Saves a gamepad setting to localStorage.
       *
       * @param setting - The gamepad setting to save.
       * @param valueIndex - The index of the value to set for the gamepad setting.
       * @returns `true` if the setting is successfully saved.
       *
       * @remarks
       * This method initializes an empty object for gamepad settings if none exist in localStorage.
       * It then updates the setting in the current scene and iterates over the default gamepad settings
       * to update the specified setting with the new value. Finally, it saves the updated settings back
       * to localStorage and returns `true` to indicate success.
       */
      saveControlSetting(device: PokeRogue.enums.Device, localStoragePropertyName: string, setting: PokeRogue.system.settings.SettingGamepad | SettingKeyboard, settingDefaults: any, valueIndex: integer): boolean;
      /**
       * Loads Settings from local storage if available
       * @returns true if succesful, false if not
       */
      public loadSettings;
      public loadGamepadSettings;
      saveTutorialFlag(tutorial: PokeRogue.Tutorial, flag: boolean): boolean;
      getTutorialFlags(): TutorialFlags;
      saveSeenDialogue(dialogue: string): boolean;
      getSeenDialogues(): SeenDialogues;
      public getSessionSaveData;
      getSession(slotId: integer): Promise<SessionSaveData>;
      loadSession(scene: PokeRogue.BattleScene, slotId: integer, sessionData?: SessionSaveData): Promise<boolean>;
      deleteSession(slotId: integer): Promise<boolean>;
      offlineNewClear(scene: PokeRogue.BattleScene): Promise<boolean>;
      tryClearSession(scene: PokeRogue.BattleScene, slotId: integer): Promise<[success: boolean, newClear: boolean]>;
      parseSessionData(dataStr: string): SessionSaveData;
      saveAll(scene: PokeRogue.BattleScene, skipVerification?: boolean, sync?: boolean, useCachedSession?: boolean, useCachedSystem?: boolean): Promise<boolean>;
      tryExportData(dataType: PokeRogue.enums.GameDataType, slotId?: integer): Promise<boolean>;
      importData(dataType: PokeRogue.enums.GameDataType, slotId?: integer): void;
      public initDexData;
      public initStarterData;
      setPokemonSeen(pokemon: PokeRogue.field.Pokemon, incrementCount?: boolean, trainer?: boolean): void;
      setPokemonCaught(pokemon: PokeRogue.field.Pokemon, incrementCount?: boolean, fromEgg?: boolean): Promise<void>;
      setPokemonSpeciesCaught(pokemon: PokeRogue.field.Pokemon, species: PokeRogue.data.PokemonSpecies, incrementCount?: boolean, fromEgg?: boolean): Promise<void>;
      incrementRibbonCount(species: PokeRogue.data.PokemonSpecies, forStarter?: boolean): integer;
      addStarterCandy(species: PokeRogue.data.PokemonSpecies, count: integer): void;
      setEggMoveUnlocked(species: PokeRogue.data.PokemonSpecies, eggMoveIndex: integer): Promise<boolean>;
      updateSpeciesDexIvs(speciesId: PokeRogue.enums.Species, ivs: integer[]): void;
      getSpeciesCount(dexEntryPredicate: (entry: DexEntry) => boolean): integer;
      getStarterCount(dexEntryPredicate: (entry: DexEntry) => boolean): integer;
      getSpeciesDefaultDexAttr(species: PokeRogue.data.PokemonSpecies, forSeen?: boolean, optimistic?: boolean): bigint;
      getSpeciesDexAttrProps(species: PokeRogue.data.PokemonSpecies, dexAttr: bigint): DexAttrProps;
      getStarterSpeciesDefaultAbilityIndex(species: PokeRogue.data.PokemonSpecies): integer;
      getSpeciesDefaultNature(species: PokeRogue.data.PokemonSpecies): Nature;
      getSpeciesDefaultNatureAttr(species: PokeRogue.data.PokemonSpecies): integer;
      getDexAttrLuck(dexAttr: bigint): integer;
      getNaturesForAttr(natureAttr: integer): Nature[];
      getSpeciesStarterValue(speciesId: PokeRogue.enums.Species): number;
      getFormIndex(attr: bigint): integer;
      getFormAttr(formIndex: integer): bigint;
      consolidateDexData(dexData: DexData): void;
      migrateStarterAbilities(systemData: SystemSaveData, initialStarterData?: StarterData): void;
      fixVariantData(systemData: SystemSaveData): void;
      fixStarterData(systemData: SystemSaveData): void;
      fixLegendaryStats(systemData: SystemSaveData): void;
  }
  export {};
  
}

declare namespace PokeRogue.system {
  export declare function initGameSpeed(): void;
  
}

declare namespace PokeRogue.system {
  export declare class GameStats {
      playTime: integer;
      battles: integer;
      classicSessionsPlayed: integer;
      sessionsWon: integer;
      ribbonsOwned: integer;
      dailyRunSessionsPlayed: integer;
      dailyRunSessionsWon: integer;
      endlessSessionsPlayed: integer;
      highestEndlessWave: integer;
      highestLevel: integer;
      highestMoney: integer;
      highestDamage: integer;
      highestHeal: integer;
      pokemonSeen: integer;
      pokemonDefeated: integer;
      pokemonCaught: integer;
      pokemonHatched: integer;
      subLegendaryPokemonSeen: integer;
      subLegendaryPokemonCaught: integer;
      subLegendaryPokemonHatched: integer;
      legendaryPokemonSeen: integer;
      legendaryPokemonCaught: integer;
      legendaryPokemonHatched: integer;
      mythicalPokemonSeen: integer;
      mythicalPokemonCaught: integer;
      mythicalPokemonHatched: integer;
      shinyPokemonSeen: integer;
      shinyPokemonCaught: integer;
      shinyPokemonHatched: integer;
      pokemonFused: integer;
      trainersDefeated: integer;
      eggsPulled: integer;
      rareEggsPulled: integer;
      epicEggsPulled: integer;
      legendaryEggsPulled: integer;
      manaphyEggsPulled: integer;
      constructor(source?: any);
  }
  
}

declare namespace PokeRogue.system {
  //import BattleScene from "../battle-scene";
  //import { PersistentModifier } from "../modifier/modifier";
  export class ModifierData {
      public player;
      public typeId;
      public typePregenArgs;
      public args;
      public stackCount;
      className: string;
      constructor(source: PokeRogue.modifier.PersistentModifier | any, player: boolean);
      toModifier(scene: PokeRogue.BattleScene, constructor: any): PersistentModifier;
  }
  
}

declare namespace PokeRogue.system {
  //import { BattleType } from "../battle";
  //import BattleScene from "../battle-scene";
  //import { Gender } from "../data/gender";
  //import { Nature } from "../data/nature";
  //import { PokeballType } from "../data/pokeball";
  //import { Status } from "../data/status-effect";
  //import Pokemon, { PokemonMove, PokemonSummonData } from "../field/pokemon";
  //import { Variant } from "#app/data/variant";
  //import { Biome } from "#enums/biome";
  //import { Species } from "#enums/species";
  export class PokemonData {
      id: integer;
      player: boolean;
      species: PokeRogue.enums.Species;
      formIndex: integer;
      abilityIndex: integer;
      passive: boolean;
      shiny: boolean;
      variant: PokeRogue.data.Variant;
      pokeball: PokeRogue.data.PokeballType;
      level: integer;
      exp: integer;
      levelExp: integer;
      gender: PokeRogue.data.Gender;
      hp: integer;
      stats: integer[];
      ivs: integer[];
      nature: PokeRogue.data.Nature;
      natureOverride: PokeRogue.data.Nature | -1;
      moveset: PokeRogue.field.PokemonMove[];
      status: PokeRogue.data.Status;
      friendship: integer;
      metLevel: integer;
      metBiome: PokeRogue.enums.Biome | -1;
      luck: integer;
      pauseEvolutions: boolean;
      pokerus: boolean;
      fusionSpecies: PokeRogue.enums.Species;
      fusionFormIndex: integer;
      fusionAbilityIndex: integer;
      fusionShiny: boolean;
      fusionVariant: PokeRogue.data.Variant;
      fusionGender: PokeRogue.data.Gender;
      fusionLuck: integer;
      boss: boolean;
      bossSegments?: integer;
      summonData: PokeRogue.field.PokemonSummonData;
      constructor(source: PokeRogue.field.Pokemon | any, forHistory?: boolean);
      toPokemon(scene: PokeRogue.BattleScene, battleType?: BattleType, partyMemberIndex?: integer, double?: boolean): Pokemon;
  }
  
}

declare namespace PokeRogue.system {
  //import { GameModes } from "../game-mode";
  //import PokemonData from "./pokemon-data";
  //import PersistentModifierData from "./modifier-data";
  export declare enum SessionHistoryResult {
      ACTIVE = 0,
      WIN = 1,
      LOSS = 2
  }
  export interface SessionHistory {
      seed: string;
      playTime: integer;
      result: SessionHistoryResult;
      gameMode: PokeRogue.GameModes;
      party: PokeRogue.system.PokemonData[];
      modifiers: PokeRogue.system.PersistentModifierData[];
      money: integer;
      waveIndex: integer;
      gameVersion: string;
      timestamp: integer;
  }
  
}

declare namespace PokeRogue.system.settings {
  //import BattleScene from "../../battle-scene";
  //import { SettingKeyboard } from "#app/system/settings/settings-keyboard";
  export declare enum SettingGamepad {
      Controller = "CONTROLLER",
      Gamepad_Support = "GAMEPAD_SUPPORT",
      Button_Up = "BUTTON_UP",
      Button_Down = "BUTTON_DOWN",
      Button_Left = "BUTTON_LEFT",
      Button_Right = "BUTTON_RIGHT",
      Button_Action = "BUTTON_ACTION",
      Button_Cancel = "BUTTON_CANCEL",
      Button_Menu = "BUTTON_MENU",
      Button_Stats = "BUTTON_STATS",
      Button_Cycle_Form = "BUTTON_CYCLE_FORM",
      Button_Cycle_Shiny = "BUTTON_CYCLE_SHINY",
      Button_Cycle_Gender = "BUTTON_CYCLE_GENDER",
      Button_Cycle_Ability = "BUTTON_CYCLE_ABILITY",
      Button_Cycle_Nature = "BUTTON_CYCLE_NATURE",
      Button_Cycle_Variant = "BUTTON_CYCLE_VARIANT",
      Button_Speed_Up = "BUTTON_SPEED_UP",
      Button_Slow_Down = "BUTTON_SLOW_DOWN",
      Button_Submit = "BUTTON_SUBMIT"
  }
  export declare const settingGamepadOptions: {
      CONTROLLER: string[];
      GAMEPAD_SUPPORT: string[];
      BUTTON_UP: string[];
      BUTTON_DOWN: string[];
      BUTTON_LEFT: string[];
      BUTTON_RIGHT: string[];
      BUTTON_ACTION: string[];
      BUTTON_CANCEL: string[];
      BUTTON_MENU: string[];
      BUTTON_STATS: string[];
      BUTTON_CYCLE_FORM: string[];
      BUTTON_CYCLE_SHINY: string[];
      BUTTON_CYCLE_GENDER: string[];
      BUTTON_CYCLE_ABILITY: string[];
      BUTTON_CYCLE_NATURE: string[];
      BUTTON_CYCLE_VARIANT: string[];
      BUTTON_SPEED_UP: string[];
      BUTTON_SLOW_DOWN: string[];
      BUTTON_SUBMIT: string[];
  };
  export declare const settingGamepadDefaults: {
      CONTROLLER: number;
      GAMEPAD_SUPPORT: number;
      BUTTON_UP: number;
      BUTTON_DOWN: number;
      BUTTON_LEFT: number;
      BUTTON_RIGHT: number;
      BUTTON_ACTION: number;
      BUTTON_CANCEL: number;
      BUTTON_MENU: number;
      BUTTON_STATS: number;
      BUTTON_CYCLE_FORM: number;
      BUTTON_CYCLE_SHINY: number;
      BUTTON_CYCLE_GENDER: number;
      BUTTON_CYCLE_ABILITY: number;
      BUTTON_CYCLE_NATURE: number;
      BUTTON_CYCLE_VARIANT: number;
      BUTTON_SPEED_UP: number;
      BUTTON_SLOW_DOWN: number;
      BUTTON_SUBMIT: number;
  };
  export declare const settingGamepadBlackList: PokeRogue.system.settings.SettingKeyboard[];
  export declare function setSettingGamepad(scene: PokeRogue.BattleScene, setting: SettingGamepad, value: integer): boolean;
  
}

declare namespace PokeRogue.system.settings {
  //import BattleScene from "#app/battle-scene";
  export declare enum SettingKeyboard {
      Button_Up = "BUTTON_UP",
      Alt_Button_Up = "ALT_BUTTON_UP",
      Button_Down = "BUTTON_DOWN",
      Alt_Button_Down = "ALT_BUTTON_DOWN",
      Button_Left = "BUTTON_LEFT",
      Alt_Button_Left = "ALT_BUTTON_LEFT",
      Button_Right = "BUTTON_RIGHT",
      Alt_Button_Right = "ALT_BUTTON_RIGHT",
      Button_Action = "BUTTON_ACTION",
      Alt_Button_Action = "ALT_BUTTON_ACTION",
      Button_Cancel = "BUTTON_CANCEL",
      Alt_Button_Cancel = "ALT_BUTTON_CANCEL",
      Button_Menu = "BUTTON_MENU",
      Alt_Button_Menu = "ALT_BUTTON_MENU",
      Button_Stats = "BUTTON_STATS",
      Alt_Button_Stats = "ALT_BUTTON_STATS",
      Button_Cycle_Form = "BUTTON_CYCLE_FORM",
      Alt_Button_Cycle_Form = "ALT_BUTTON_CYCLE_FORM",
      Button_Cycle_Shiny = "BUTTON_CYCLE_SHINY",
      Alt_Button_Cycle_Shiny = "ALT_BUTTON_CYCLE_SHINY",
      Button_Cycle_Gender = "BUTTON_CYCLE_GENDER",
      Alt_Button_Cycle_Gender = "ALT_BUTTON_CYCLE_GENDER",
      Button_Cycle_Ability = "BUTTON_CYCLE_ABILITY",
      Alt_Button_Cycle_Ability = "ALT_BUTTON_CYCLE_ABILITY",
      Button_Cycle_Nature = "BUTTON_CYCLE_NATURE",
      Alt_Button_Cycle_Nature = "ALT_BUTTON_CYCLE_NATURE",
      Button_Cycle_Variant = "BUTTON_CYCLE_VARIANT",
      Alt_Button_Cycle_Variant = "ALT_BUTTON_CYCLE_VARIANT",
      Button_Speed_Up = "BUTTON_SPEED_UP",
      Alt_Button_Speed_Up = "ALT_BUTTON_SPEED_UP",
      Button_Slow_Down = "BUTTON_SLOW_DOWN",
      Alt_Button_Slow_Down = "ALT_BUTTON_SLOW_DOWN",
      Button_Submit = "BUTTON_SUBMIT",
      Alt_Button_Submit = "ALT_BUTTON_SUBMIT"
  }
  export declare const settingKeyboardOptions: {
      BUTTON_UP: string[];
      BUTTON_DOWN: string[];
      ALT_BUTTON_UP: string[];
      BUTTON_LEFT: string[];
      BUTTON_RIGHT: string[];
      BUTTON_ACTION: string[];
      BUTTON_MENU: string[];
      BUTTON_SUBMIT: string[];
      ALT_BUTTON_DOWN: string[];
      ALT_BUTTON_LEFT: string[];
      ALT_BUTTON_RIGHT: string[];
      ALT_BUTTON_ACTION: string[];
      BUTTON_CANCEL: string[];
      ALT_BUTTON_CANCEL: string[];
      ALT_BUTTON_MENU: string[];
      BUTTON_STATS: string[];
      ALT_BUTTON_STATS: string[];
      BUTTON_CYCLE_FORM: string[];
      ALT_BUTTON_CYCLE_FORM: string[];
      BUTTON_CYCLE_SHINY: string[];
      ALT_BUTTON_CYCLE_SHINY: string[];
      BUTTON_CYCLE_GENDER: string[];
      ALT_BUTTON_CYCLE_GENDER: string[];
      BUTTON_CYCLE_ABILITY: string[];
      ALT_BUTTON_CYCLE_ABILITY: string[];
      BUTTON_CYCLE_NATURE: string[];
      ALT_BUTTON_CYCLE_NATURE: string[];
      BUTTON_CYCLE_VARIANT: string[];
      ALT_BUTTON_CYCLE_VARIANT: string[];
      BUTTON_SPEED_UP: string[];
      ALT_BUTTON_SPEED_UP: string[];
      BUTTON_SLOW_DOWN: string[];
      ALT_BUTTON_SLOW_DOWN: string[];
      ALT_BUTTON_SUBMIT: string[];
  };
  export declare const settingKeyboardDefaults: {
      BUTTON_UP: number;
      BUTTON_DOWN: number;
      BUTTON_LEFT: number;
      BUTTON_RIGHT: number;
      BUTTON_ACTION: number;
      BUTTON_MENU: number;
      BUTTON_SUBMIT: number;
      ALT_BUTTON_UP: number;
      ALT_BUTTON_DOWN: number;
      ALT_BUTTON_LEFT: number;
      ALT_BUTTON_RIGHT: number;
      ALT_BUTTON_ACTION: number;
      BUTTON_CANCEL: number;
      ALT_BUTTON_CANCEL: number;
      ALT_BUTTON_MENU: number;
      BUTTON_STATS: number;
      ALT_BUTTON_STATS: number;
      BUTTON_CYCLE_FORM: number;
      ALT_BUTTON_CYCLE_FORM: number;
      BUTTON_CYCLE_SHINY: number;
      ALT_BUTTON_CYCLE_SHINY: number;
      BUTTON_CYCLE_GENDER: number;
      ALT_BUTTON_CYCLE_GENDER: number;
      BUTTON_CYCLE_ABILITY: number;
      ALT_BUTTON_CYCLE_ABILITY: number;
      BUTTON_CYCLE_NATURE: number;
      ALT_BUTTON_CYCLE_NATURE: number;
      BUTTON_CYCLE_VARIANT: number;
      ALT_BUTTON_CYCLE_VARIANT: number;
      BUTTON_SPEED_UP: number;
      ALT_BUTTON_SPEED_UP: number;
      BUTTON_SLOW_DOWN: number;
      ALT_BUTTON_SLOW_DOWN: number;
      ALT_BUTTON_SUBMIT: number;
  };
  export declare const settingKeyboardBlackList: SettingKeyboard[];
  export declare function setSettingKeyboard(scene: PokeRogue.BattleScene, setting: SettingKeyboard, value: integer): boolean;
  
}

declare namespace PokeRogue.system.settings {
  //import BattleScene from "../../battle-scene";
  /**
   * Types for helping separate settings to different menus
   */
  export declare enum SettingType {
      GENERAL = 0,
      DISPLAY = 1,
      AUDIO = 2
  }
  type SettingOption = {
      value: string;
      label: string;
  };
  export interface Setting {
      key: string;
      label: string;
      options: SettingOption[];
      default: number;
      type: SettingType;
      requireReload?: boolean;
  }
  /**
   * Setting Keys for existing settings
   * to be used when trying to find or update Settings
   */
  export declare const SettingKeys: {
      Game_Speed: string;
      HP_Bar_Speed: string;
      EXP_Gains_Speed: string;
      EXP_Party_Display: string;
      Skip_Seen_Dialogues: string;
      Battle_Style: string;
      Enable_Retries: string;
      Tutorials: string;
      Touch_Controls: string;
      Vibration: string;
      Language: string;
      UI_Theme: string;
      Window_Type: string;
      Money_Format: string;
      Damage_Numbers: string;
      Move_Animations: string;
      Show_Stats_on_Level_Up: string;
      Candy_Upgrade_Notification: string;
      Candy_Upgrade_Display: string;
      Move_Info: string;
      Show_Moveset_Flyout: string;
      Show_Arena_Flyout: string;
      Show_Time_Of_Day_Widget: string;
      Time_Of_Day_Animation: string;
      Sprite_Set: string;
      Fusion_Palette_Swaps: string;
      Player_Gender: string;
      Type_Hints: string;
      Master_Volume: string;
      BGM_Volume: string;
      SE_Volume: string;
      Music_Preference: string;
      Show_BGM_Bar: string;
  };
  /**
   * All Settings not related to controls
   */
  export declare const Setting: Array<Setting>;
  /**
   * Return the index of a Setting
   * @param key SettingKey
   * @returns index or -1 if doesn't exist
   */
  export declare function settingIndex(key: string): number;
  /**
   * Resets all settings to their defaults
   * @param scene current BattleScene
   */
  export declare function resetSettings(scene: PokeRogue.BattleScene): void;
  /**
   * Updates a setting for current BattleScene
   * @param scene current BattleScene
   * @param setting string ideally from SettingKeys
   * @param value value to update setting with
   * @returns true if successful, false if not
   */
  export declare function setSetting(scene: PokeRogue.BattleScene, setting: string, value: integer): boolean;
  export {};
  
}

declare namespace PokeRogue.system {
  //import BattleScene from "../battle-scene";
  //import { TrainerType } from "#enums/trainer-type";
  //import Trainer, { TrainerVariant } from "../field/trainer";
  export class TrainerData {
      trainerType: PokeRogue.enums.TrainerType;
      variant: PokeRogue.field.TrainerVariant;
      partyTemplateIndex: integer;
      name: string;
      partnerName: string;
      constructor(source: PokeRogue.field.Trainer | any);
      toTrainer(scene: PokeRogue.BattleScene): Trainer;
  }
  
}

declare namespace PokeRogue.system {
  export declare enum Unlockables {
      ENDLESS_MODE = 0,
      MINI_BLACK_HOLE = 1,
      SPLICED_ENDLESS_MODE = 2
  }
  export declare function getUnlockableName(unlockable: Unlockables): string;
  
}

declare namespace PokeRogue.system {
  //import BattleScene from "../battle-scene";
  //import { AchvTier } from "./achv";
  //import { PlayerGender } from "#enums/player-gender";
  export declare enum VoucherType {
      REGULAR = 0,
      PLUS = 1,
      PREMIUM = 2,
      GOLDEN = 3
  }
  export declare class Voucher {
      id: string;
      voucherType: VoucherType;
      description: string;
      public conditionFunc;
      constructor(voucherType: VoucherType, description: string, conditionFunc?: (scene: PokeRogue.BattleScene, args: any[]) => boolean);
      validate(scene: PokeRogue.BattleScene, args: any[]): boolean;
      /**
       * Get the name of the voucher
       * @param playerGender - this is ignored here. It's only there to match the signature of the function in the Achv class
       * @returns the name of the voucher
       */
      getName(playerGender: PokeRogue.enums.PlayerGender): string;
      getIconImage(): string;
      getTier(): AchvTier;
  }
  export declare function getVoucherTypeName(voucherType: VoucherType): string;
  export declare function getVoucherTypeIcon(voucherType: VoucherType): string;
  export interface Vouchers {
      [key: string]: Voucher;
  }
  export declare const vouchers: Vouchers;
  export declare function initVouchers(): void;
  
}

declare namespace PokeRogue {
  //import BattleScene from "#app/battle-scene.js";
  export declare enum EventType {
      SHINY = 0
  }
  interface TimedEvent {
      name: string;
      eventType: EventType;
      shinyMultiplier?: number;
      startDate: Date;
      endDate: Date;
      bannerFilename?: string;
  }
  export declare class TimedEventManager {
      constructor();
      isActive(event: TimedEvent): boolean;
      activeEvent(): TimedEvent | undefined;
      isEventActive(): boolean;
      activeEventHasBanner(): boolean;
      getShinyMultiplier(): number;
      getEventBannerFilename(): string;
  }
  export declare class TimedEventDisplay extends Phaser.GameObjects.Container {
      public event;
      public eventTimerText;
      public banner;
      public bannerShadow;
      public eventTimer;
      constructor(scene: PokeRogue.BattleScene, x: number, y: number, event: TimedEvent);
      setup(): void;
      show(): void;
      clear(): void;
      public timeToGo;
      updateCountdown(): void;
  }
  export {};
  
}

declare namespace PokeRogue {
  //import EventEmitter = Phaser.Events.EventEmitter;
  import BattleScene from "./battle-scene";
  export class TouchControl {
      events: EventEmitter;
      public buttonLock;
      public inputInterval;
      constructor(scene: BattleScene);
      /**
       * Initialize touch controls by binding keys to buttons.
       */
      init(): void;
      /**
       * Binds a node to a specific key to simulate keyboard events on touch.
       *
       * @param node - The DOM element to bind the key to.
       * @param key - The key to simulate.
       * @param events - The event emitter for handling input events.
       *
       * @remarks
       * This function binds touch events to a node to simulate 'keydown' and 'keyup' keyboard events.
       * It adds the key to the keys map and tracks the keydown state. When a touch starts, it simulates
       * a 'keydown' event and adds an 'active' class to the node. When the touch ends, it simulates a 'keyup'
       * event, removes the keydown state, and removes the 'active' class from the node and the last touched element.
       */
      bindKey(node: HTMLElement, key: string): void;
      touchButtonDown(node: HTMLElement, key: string): void;
      touchButtonUp(node: HTMLElement, key: string, id: string): void;
      /**
       * Simulates a keyboard event on the canvas.
       *
       * @param eventType - The type of the keyboard event ('keydown' or 'keyup').
       * @param key - The key to simulate.
       *
       * @remarks
       * This function checks if the key exists in the Button enum. If it does, it retrieves the corresponding button
       * and emits the appropriate event ('input_down' or 'input_up') based on the event type.
       */
      simulateKeyboardEvent(eventType: string, key: string): void;
      /**
       * {@link https://stackoverflow.com/a/39778831/4622620|Source}
       *
       * Prevent zoom on specified element
       * @param {HTMLElement} element
       */
      preventElementZoom(element: HTMLElement): void;
      /**
         * Deactivates all currently pressed keys.
         */
      deactivatePressedKey(): void;
  }
  /**
   * Check if the device has a touchscreen.
   *
   * @returns `true` if the device has a touchscreen, otherwise `false`.
   */
  export declare function hasTouchscreen(): boolean;
  /**
   * Check if the device is a mobile device.
   *
   * @returns `true` if the device is a mobile device, otherwise `false`.
   */
  export declare function isMobile(): boolean;
  
}

declare namespace PokeRogue {
  //import BattleScene from "./battle-scene";
  export declare enum Tutorial {
      Intro = "INTRO",
      Access_Menu = "ACCESS_MENU",
      Menu = "MENU",
      Starter_Select = "STARTER_SELECT",
      Pokerus = "POKERUS",
      Stat_Change = "STAT_CHANGE",
      Select_Item = "SELECT_ITEM",
      Egg_Gacha = "EGG_GACHA"
  }
  export declare function handleTutorial(scene: PokeRogue.BattleScene, tutorial: Tutorial): Promise<boolean>;
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import Pokemon from "../field/pokemon";
  export class AbilityBar extends Phaser.GameObjects.Container {
      public bg;
      public abilityBarText;
      public tween;
      public autoHideTimer;
      shown: boolean;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      showAbility(pokemon: PokeRogue.field.Pokemon, passive?: boolean): void;
      hide(): void;
      resetAutoHideTimer(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { Mode } from "./ui";
  //import UiHandler from "./ui-handler";
  //import { Button } from "#enums/buttons";
  export interface OptionSelectConfig {
      xOffset?: number;
      yOffset?: number;
      options: OptionSelectItem[];
      maxOptions?: integer;
      delay?: integer;
      noCancel?: boolean;
      supportHover?: boolean;
  }
  export interface OptionSelectItem {
      label: string;
      handler: () => boolean;
      onHover?: () => void;
      keepOpen?: boolean;
      overrideSound?: boolean;
      item?: string;
      itemArgs?: any[];
  }
  export abstract class AbstractOptionSelectUiHandler extends PokeRogue.ui.UiHandler {
      protected optionSelectContainer: Phaser.GameObjects.Container;
      protected optionSelectBg: Phaser.GameObjects.NineSlice;
      protected optionSelectText: Phaser.GameObjects.Text;
      protected optionSelectIcons: Phaser.GameObjects.Sprite[];
      protected config: OptionSelectConfig;
      protected blockInput: boolean;
      protected scrollCursor: integer;
      public cursorObj;
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      abstract getWindowWidth(): integer;
      getWindowHeight(): integer;
      setup(): void;
      protected setupOptions(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      unblockInput(): void;
      getOptionsWithScroll(): OptionSelectItem[];
      setCursor(cursor: integer): boolean;
      clear(): void;
      eraseCursor(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { Achv } from "../system/achv";
  //import { Voucher } from "../system/voucher";
  //import { PlayerGender } from "#enums/player-gender";
  export class AchvBar extends Phaser.GameObjects.Container {
      public defaultWidth;
      public defaultHeight;
      public bg;
      public icon;
      public titleText;
      public scoreText;
      public descriptionText;
      public queue;
      public playerGender;
      shown: boolean;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      showAchv(achv: PokeRogue.system.Achv | Voucher): void;
      protected hide(playerGender: PokeRogue.enums.PlayerGender): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { Button } from "#enums/buttons";
  //import { Achv } from "../system/achv";
  //import MessageUiHandler from "./message-ui-handler";
  //import { Mode } from "./ui";
  export class AchvsUiHandler extends PokeRogue.ui.MessageUiHandler {
      public achvsContainer;
      public achvIconsContainer;
      public achvIconsBg;
      public achvIcons;
      public titleText;
      public scoreText;
      public unlockText;
      public cursorObj;
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      setup(): void;
      show(args: any[]): boolean;
      protected showAchv(achv: PokeRogue.system.Achv): void;
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(cursor: integer): boolean;
      clear(): void;
      eraseCursor(): void;
  }
  
}

declare namespace PokeRogue.ui {
  export class ArenaFlyout extends Phaser.GameObjects.Container {
      /** An alias for the scene typecast to a {@linkcode BattleScene} */
      public battleScene;
      /** The restricted width of the flyout which should be drawn to */
      public flyoutWidth;
      /** The restricted height of the flyout which should be drawn to */
      public flyoutHeight;
      /** The amount of translation animation on the x-axis */
      public translationX;
      /** The x-axis point where the flyout should sit when activated */
      public anchorX;
      /** The y-axis point where the flyout should sit when activated */
      public anchorY;
      /** The initial container which defines where the flyout should be attached */
      public flyoutParent;
      /** The container which defines the drawable dimensions of the flyout */
      public flyoutContainer;
      /** The background {@linkcode Phaser.GameObjects.NineSlice} window for the flyout */
      public flyoutWindow;
      /** The header {@linkcode Phaser.GameObjects.NineSlice} window for the flyout */
      public flyoutWindowHeader;
      /** The {@linkcode Phaser.GameObjects.Text} that goes inside of the header */
      public flyoutTextHeader;
      public timeOfDayWidget;
      /** The {@linkcode Phaser.GameObjects.Text} header used to indicate the player's effects */
      public flyoutTextHeaderPlayer;
      /** The {@linkcode Phaser.GameObjects.Text} header used to indicate the enemy's effects */
      public flyoutTextHeaderEnemy;
      /** The {@linkcode Phaser.GameObjects.Text} header used to indicate neutral effects */
      public flyoutTextHeaderField;
      /** The {@linkcode Phaser.GameObjects.Text} used to indicate the player's effects */
      public flyoutTextPlayer;
      /** The {@linkcode Phaser.GameObjects.Text} used to indicate the enemy's effects */
      public flyoutTextEnemy;
      /** The {@linkcode Phaser.GameObjects.Text} used to indicate neutral effects */
      public flyoutTextField;
      /** Container for all field effects observed by this object */
      public readonly fieldEffectInfo;
      public readonly onNewArenaEvent;
      public readonly onTurnEndEvent;
      public readonly onFieldEffectChangedEvent;
      constructor(scene: Phaser.Scene);
      public onNewArena;
      /** Clears out the current string stored in all arena effect texts */
      public clearText;
      /** Parses through all set Arena Effects and puts them into the proper {@linkcode Phaser.GameObjects.Text} object */
      public updateFieldText;
      /**
       * Parses the {@linkcode Event} being passed and updates the state of the fieldEffectInfo array
       * @param event {@linkcode Event} being sent
       */
      public onFieldEffectChanged;
      /**
       * Iterates through the fieldEffectInfo array and decrements the duration of each item
       * @param event {@linkcode Event} being sent
       */
      public onTurnEnd;
      /**
       * Animates the flyout to either show or hide it by applying a fade and translation
       * @param visible Should the flyout be shown?
       */
      toggleFlyout(visible: boolean): void;
      destroy(fromScene?: boolean): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { Mode } from "./ui";
  //import UiHandler from "./ui-handler";
  //import { Button } from "#enums/buttons";
  export abstract class AwaitableUiHandler extends PokeRogue.ui.UiHandler {
      protected awaitingActionInput: boolean;
      protected onActionInput: Function;
      tutorialActive: boolean;
      constructor(scene: PokeRogue.BattleScene, mode: PokeRogue.ui.Mode);
      processTutorialInput(button: PokeRogue.enums.Button): boolean;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import UiHandler from "./ui-handler";
  //import { Button } from "#enums/buttons";
  export class BallUiHandler extends PokeRogue.ui.UiHandler {
      public pokeballSelectContainer;
      public pokeballSelectBg;
      public countsText;
      public cursorObj;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      updateCounts(): void;
      setCursor(cursor: integer): boolean;
      clear(): void;
      eraseCursor(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import { default as Pokemon } from "../field/pokemon";
  /** A Flyout Menu attached to each {@linkcode BattleInfo} object on the field UI */
  export class BattleFlyout extends Phaser.GameObjects.Container {
      /** An alias for the scene typecast to a {@linkcode BattleScene} */
      public battleScene;
      /** Is this object linked to a player's Pokemon? */
      public player;
      /** The Pokemon this object is linked to */
      public pokemon;
      /** The restricted width of the flyout which should be drawn to */
      public flyoutWidth;
      /** The restricted height of the flyout which should be drawn to */
      public flyoutHeight;
      /** The amount of translation animation on the x-axis */
      public translationX;
      /** The x-axis point where the flyout should sit when activated */
      public anchorX;
      /** The y-axis point where the flyout should sit when activated */
      public anchorY;
      /** The initial container which defines where the flyout should be attached */
      public flyoutParent;
      /** The background {@linkcode Phaser.GameObjects.Sprite;} for the flyout */
      public flyoutBackground;
      /** The container which defines the drawable dimensions of the flyout */
      public flyoutContainer;
      /** The array of {@linkcode Phaser.GameObjects.Text} objects which are drawn on the flyout */
      public flyoutText;
      /** The array of {@linkcode MoveInfo} used to track moves for the {@linkcode Pokemon} linked to the flyout */
      public moveInfo;
      /** Current state of the flyout's visibility */
      flyoutVisible: boolean;
      public readonly onMoveUsedEvent;
      public readonly onBerryUsedEvent;
      constructor(scene: Phaser.Scene, player: boolean);
      /**
       * Links the given {@linkcode Pokemon} and subscribes to the {@linkcode BattleSceneEventType.MOVE_USED} event
       * @param pokemon {@linkcode Pokemon} to link to this flyout
       */
      initInfo(pokemon: PokeRogue.field.Pokemon): void;
      /** Sets and formats the text property for all {@linkcode Phaser.GameObjects.Text} in the flyoutText array */
      public setText;
      /** Updates all of the {@linkcode MoveInfo} objects in the moveInfo array */
      public onMoveUsed;
      public onBerryUsed;
      /** Animates the flyout to either show or hide it by applying a fade and translation */
      toggleFlyout(visible: boolean): void;
      destroy(fromScene?: boolean): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import { EnemyPokemon, default as Pokemon } from "../field/pokemon";
  //import BattleFlyout from "./battle-flyout";
  export class BattleInfo extends Phaser.GameObjects.Container {
      public baseY;
      public player;
      public mini;
      public boss;
      public bossSegments;
      public offset;
      public lastName;
      public lastTeraType;
      public lastStatus;
      public lastHp;
      public lastMaxHp;
      public lastHpFrame;
      public lastExp;
      public lastLevelExp;
      public lastLevel;
      public lastLevelCapped;
      public lastBattleStats;
      public box;
      public nameText;
      public genderText;
      public ownedIcon;
      public championRibbon;
      public teraIcon;
      public shinyIcon;
      public fusionShinyIcon;
      public splicedIcon;
      public statusIndicator;
      public levelContainer;
      public hpBar;
      public hpBarSegmentDividers;
      public levelNumbersContainer;
      public hpNumbersContainer;
      public type1Icon;
      public type2Icon;
      public type3Icon;
      public expBar;
      public effectivenessContainer;
      public effectivenessWindow;
      public effectivenessText;
      public currentEffectiveness?;
      expMaskRect: Phaser.GameObjects.Graphics;
      public statsContainer;
      public statsBox;
      public statValuesContainer;
      public statNumbers;
      flyoutMenu?: BattleFlyout;
      constructor(scene: Phaser.Scene, x: number, y: number, player: boolean);
      initInfo(pokemon: PokeRogue.field.Pokemon): void;
      getTextureName(): string;
      setMini(mini: boolean): void;
      toggleStats(visible: boolean): void;
      updateBossSegments(pokemon: PokeRogue.field.EnemyPokemon): void;
      updateBossSegmentDividers(pokemon: PokeRogue.field.EnemyPokemon): void;
      setOffset(offset: boolean): void;
      updateInfo(pokemon: PokeRogue.field.Pokemon, instant?: boolean): Promise<void>;
      updateNameText(pokemon: PokeRogue.field.Pokemon): void;
      updatePokemonExp(pokemon: PokeRogue.field.Pokemon, instant?: boolean, levelDurationMultiplier?: number): Promise<void>;
      setLevel(level: integer): void;
      setHpNumbers(hp: integer, maxHp: integer): void;
      updateBattleStats(battleStats: integer[]): void;
      /**
       * Request the flyoutMenu to toggle if available and hides or shows the effectiveness window where necessary
       */
      toggleFlyout(visible: boolean): void;
      /**
       * Show or hide the type effectiveness multiplier window
       * Passing undefined will hide the window
       */
      updateEffectiveness(effectiveness?: string): void;
      getBaseY(): number;
      resetY(): void;
  }
  export declare class PlayerBattleInfo extends BattleInfo {
      constructor(scene: Phaser.Scene);
  }
  export declare class EnemyBattleInfo extends BattleInfo {
      constructor(scene: Phaser.Scene);
      setMini(mini: boolean): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import MessageUiHandler from "./message-ui-handler";
  //import { Button } from "#enums/buttons";
  export class BattleMessageUiHandler extends PokeRogue.ui.MessageUiHandler {
      public levelUpStatsContainer;
      public levelUpStatsIncrContent;
      public levelUpStatsValuesContent;
      public nameBox;
      public nameText;
      bg: Phaser.GameObjects.Sprite;
      commandWindow: Phaser.GameObjects.NineSlice;
      movesWindowContainer: Phaser.GameObjects.Container;
      nameBoxContainer: Phaser.GameObjects.Container;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      clear(): void;
      showText(text: string, delay?: integer, callback?: Function, callbackDelay?: integer, prompt?: boolean, promptDelay?: integer): void;
      showDialogue(text: string, name: string, delay?: integer, callback?: Function, callbackDelay?: integer, prompt?: boolean, promptDelay?: integer): void;
      promptLevelUpStats(partyMemberIndex: integer, prevStats: integer[], showTotals: boolean): Promise<void>;
      promptIvs(pokemonId: integer, ivs: integer[], shownIvsCount: integer): Promise<void>;
      getIvDescriptor(value: integer, typeIv: integer, pokemonId: integer): string;
      showNameText(name: string): void;
      hideNameText(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  export class BgmBar extends Phaser.GameObjects.Container {
      public defaultWidth;
      public defaultHeight;
      public bg;
      public musicText;
      public noteText;
      public tween;
      public autoHideTimer;
      public queue;
      shown: boolean;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      setBgmToBgmBar(bgmName: string): void;
      toggleBgmBar(visible: boolean): void;
      getRealBgmName(bgmName: string): string;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { Species } from "#enums/species";
  export class CandyBar extends Phaser.GameObjects.Container {
      public bg;
      public candyIcon;
      public candyOverlayIcon;
      public countText;
      public speciesId;
      public tween;
      public autoHideTimer;
      shown: boolean;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      showStarterSpeciesCandy(starterSpeciesId: PokeRogue.enums.Species, count: integer): Promise<void>;
      hide(): Promise<void>;
      resetAutoHideTimer(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { Mode } from "./ui";
  //import UiHandler from "./ui-handler";
  //import { Button } from "#enums/buttons";
  //import { Challenge } from "#app/data/challenge.js";
  /**
   * Handles all the UI for choosing optional challenges.
   */
  export class GameChallengesUiHandler extends PokeRogue.ui.UiHandler {
      public challengesContainer;
      public valuesContainer;
      public scrollCursor;
      public optionsBg;
      public descriptionText;
      public challengeLabels;
      public cursorObj;
      public startCursor;
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      setup(): void;
      /**
       * Adds the default text color to the description text
       * @param text text to set to the BBCode description
       */
      setDescription(text: string): void;
      /**
       * initLabels
       * init all challenge labels
       */
      initLabels(): void;
      /**
       * update the text the cursor is on
       */
      updateText(): void;
      show(args: any[]): boolean;
      /**
       * Processes input from a specified button.
       * This method handles navigation through a UI menu, including movement through menu items
       * and handling special actions like cancellation. Each button press may adjust the cursor
       * position or the menu scroll, and plays a sound effect if the action was successful.
       *
       * @param button - The button pressed by the user.
       * @returns `true` if the action associated with the button was successfully processed, `false` otherwise.
       */
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(cursor: integer): boolean;
      setScrollCursor(scrollCursor: integer): boolean;
      getActiveChallenge(): Challenge;
      clear(): void;
      eraseCursor(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  export class CharSprite extends Phaser.GameObjects.Container {
      public sprite;
      public transitionSprite;
      key: string;
      variant: string;
      shown: boolean;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      showCharacter(key: string, variant: string): Promise<void>;
      setVariant(variant: string): Promise<void>;
      hide(): Promise<void>;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import UiHandler from "./ui-handler";
  //import { Button } from "#enums/buttons";
  export declare enum Command {
      FIGHT = 0,
      BALL = 1,
      POKEMON = 2,
      RUN = 3
  }
  export class CommandUiHandler extends PokeRogue.ui.UiHandler {
      public commandsContainer;
      public cursorObj;
      protected fieldIndex: integer;
      protected cursor2: integer;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      getCursor(): integer;
      setCursor(cursor: integer): boolean;
      clear(): void;
      eraseCursor(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import AbstractOptionSelectUiHandler from "./abstact-option-select-ui-handler";
  //import { Button } from "#enums/buttons";
  export class ConfirmUiHandler extends PokeRogue.ui.AbstractOptionSelectUiHandler {
      static readonly windowWidth: integer;
      public switchCheck;
      public switchCheckCursor;
      constructor(scene: PokeRogue.BattleScene);
      getWindowWidth(): integer;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(cursor: integer): boolean;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  interface RankingEntry {
      rank: integer;
      username: string;
      score: integer;
      wave: integer;
  }
  declare enum ScoreboardCategory {
      DAILY = 0,
      WEEKLY = 1
  }
  export declare class DailyRunScoreboard extends Phaser.GameObjects.Container {
      public loadingLabel;
      public titleLabel;
      public rankingsContainer;
      public prevCategoryButton;
      public nextCategoryButton;
      public prevPageButton;
      public pageNumberLabel;
      public nextPageButton;
      public pageCount;
      public page;
      public category;
      public _isUpdating;
      constructor(scene: PokeRogue.BattleScene, x: number, y: number);
      /**
       * Sets the updating state and updates button states accordingly.
       * If value is true (updating), disables the buttons; if false, enables the buttons.
       * @param {boolean} value - The new updating state.
       */
      set isUpdating(value: boolean);
      /**
       * Gets the current updating state.
       * @returns {boolean} - The current updating state.
       */
      get isUpdating(): boolean;
      setup(): void;
      updateRankings(rankings: RankingEntry[]): void;
      /**
       * Updates the scoreboard rankings based on the selected category and page.
       *
       * If the update process is already ongoing, the method exits early. Otherwise, it begins the update process by clearing
       * the current rankings and showing a loading label. If the category changes, the page is reset to 1.
       *
       * The method fetches the total page count if necessary, followed by fetching the rankings for the specified category
       * and page. It updates the UI with the fetched rankings or shows an appropriate message if no rankings are found.
       *
       * @param {ScoreboardCategory} [category=this.category] - The category to fetch rankings for. Defaults to the current category.
       * @param {number} [page=this.page] - The page number to fetch. Defaults to the current page.
      */
      update(category?: ScoreboardCategory, page?: integer): void;
      /**
       * Sets the state of the navigation buttons.
       * @param {boolean} [enabled=true] - Whether the buttons should be enabled or disabled.
       */
      setButtonsState(enabled?: boolean): void;
  }
  export interface DailyRunScoreboard {
      scene: PokeRogue.BattleScene;
  }
  export {};
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "#app/battle-scene.js";
  /**
   * A container that displays the count of hatching eggs.
   * Extends Phaser.GameObjects.Container.
   */
  export class EggCounterContainer extends Phaser.GameObjects.Container {
      public readonly WINDOW_DEFAULT_WIDTH;
      public readonly WINDOW_MEDIUM_WIDTH;
      public readonly WINDOW_HEIGHT;
      public readonly onEggCountChangedEvent;
      public battleScene;
      public eggCount;
      public eggCountWindow;
      eggCountText: Phaser.GameObjects.Text;
      /**
       * @param {BattleScene} scene - The scene to which this container belongs.
       * @param {number} eggCount - The number of eggs to hatch.
       */
      constructor(scene: PokeRogue.BattleScene, eggCount: integer);
      /**
       * Sets up the container, creating the window, egg sprite, and egg count text.
       */
      public setup;
      /**
       * Resets the window size to the default width and height.
       */
      public setWindowToDefaultSize;
      /**
       * Handles window size, the egg count to show, and whether it should be displayed.
       *
       * @param event {@linkcode Event} being sent
       * @returns void
       */
      public onEggCountChanged;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import MessageUiHandler from "./message-ui-handler";
  //import { Egg } from "../data/egg";
  //import { VoucherType } from "../system/voucher";
  //import { Button } from "#enums/buttons";
  //import { GachaType } from "#app/enums/gacha-types";
  //import { EggTier } from "#enums/egg-type";
  export class EggGachaUiHandler extends PokeRogue.ui.MessageUiHandler {
      public eggGachaContainer;
      public eggGachaMessageBox;
      public eggGachaOptionsContainer;
      public eggGachaOptionSelectBg;
      public gachaContainers;
      public gachaKnobs;
      public gachaHatches;
      public gachaInfoContainers;
      public eggGachaOverlay;
      public eggGachaSummaryContainer;
      public voucherCountLabels;
      public gachaCursor;
      public cursorObj;
      public transitioning;
      public transitionCancelled;
      public defaultText;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      getDelayValue(delay: integer): number;
      pull(pullCount?: integer, count?: integer, eggs?: Egg[]): void;
      getGuaranteedEggTierFromPullCount(pullCount: number): EggTier;
      showSummary(eggs: PokeRogue.data.Egg[]): void;
      hideSummary(): void;
      updateGachaInfo(gachaType: PokeRogue.enums.GachaType): void;
      consumeVouchers(voucherType: PokeRogue.system.VoucherType, count: integer): void;
      updateVoucherCounts(): void;
      showText(text: string, delay?: number, callback?: Function, callbackDelay?: number, prompt?: boolean, promptDelay?: number): void;
      showError(text: string): void;
      setTransitioning(transitioning: boolean): void;
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(cursor: integer): boolean;
      setGachaCursor(cursor: integer): boolean;
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import UiHandler from "./ui-handler";
  //import { Button } from "#enums/buttons";
  export class EggHatchSceneHandler extends PokeRogue.ui.UiHandler {
      eggHatchContainer: Phaser.GameObjects.Container;
      /**
       * Allows subscribers to listen for events
       *
       * Current Events:
       * - {@linkcode EggEventType.EGG_COUNT_CHANGED} {@linkcode EggCountChangedEvent}
       */
      readonly eventTarget: EventTarget;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(_args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(_cursor: integer): boolean;
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import MessageUiHandler from "./message-ui-handler";
  //import { Egg } from "../data/egg";
  //import { Button } from "#enums/buttons";
  export class EggListUiHandler extends PokeRogue.ui.MessageUiHandler {
      public eggListContainer;
      public eggListIconContainer;
      public eggSprite;
      public eggNameText;
      public eggDateText;
      public eggHatchWavesText;
      public eggGachaInfoText;
      public eggListMessageBoxContainer;
      public cursorObj;
      public iconAnimHandler;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      setEggDetails(egg: PokeRogue.data.Egg): void;
      setCursor(cursor: integer): boolean;
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import MessageUiHandler from "./message-ui-handler";
  //import { Button } from "#enums/buttons";
  export class EvolutionSceneHandler extends PokeRogue.ui.MessageUiHandler {
      evolutionContainer: Phaser.GameObjects.Container;
      messageBg: Phaser.GameObjects.Image;
      messageContainer: Phaser.GameObjects.Container;
      canCancel: boolean;
      cancelled: boolean;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(_args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(_cursor: integer): boolean;
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import UiHandler from "./ui-handler";
  //import { Button } from "#enums/buttons";
  export class FightUiHandler extends PokeRogue.ui.UiHandler {
      public movesContainer;
      public moveInfoContainer;
      public typeIcon;
      public ppLabel;
      public ppText;
      public powerLabel;
      public powerText;
      public accuracyLabel;
      public accuracyText;
      public cursorObj;
      public moveCategoryIcon;
      protected fieldIndex: integer;
      protected cursor2: integer;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      getCursor(): integer;
      setCursor(cursor: integer): boolean;
      /**
       * Gets multiplier text for a pokemon's move against a specific opponent
       * Returns undefined if it's a status move
       */
      public getEffectivenessText;
      displayMoves(): void;
      /**
       * Returns a specific move's color based on its type effectiveness against opponents
       * If there are multiple opponents, the highest effectiveness' color is returned
       * @returns A color or undefined if the default color should be used
       */
      public getMoveColor;
      clear(): void;
      clearMoves(): void;
      eraseCursor(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { ModalConfig, ModalUiHandler } from "./modal-ui-handler";
  //import { Mode } from "./ui";
  import InputText from "phaser3-rex-plugins/plugins/inputtext";
  //import { Button } from "#enums/buttons";
  export interface FormModalConfig extends PokeRogue.ui.ModalConfig {
      errorMessage?: string;
  }
  export declare abstract class FormModalUiHandler extends PokeRogue.ui.ModalUiHandler {
      protected editing: boolean;
      protected inputContainers: Phaser.GameObjects.Container[];
      protected inputs: InputText[];
      protected errorMessage: Phaser.GameObjects.Text;
      protected submitAction: Function;
      protected tween: Phaser.Tweens.Tween;
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      abstract getFields(): string[];
      getHeight(config?: ModalConfig): number;
      getReadableErrorMessage(error: string): string;
      setup(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      sanitizeInputs(): void;
      updateContainer(config?: ModalConfig): void;
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { Mode } from "./ui";
  //import UiHandler from "./ui-handler";
  //import { Button } from "#enums/buttons";
  export class GameStatsUiHandler extends PokeRogue.ui.UiHandler {
      public gameStatsContainer;
      public statsContainer;
      public statLabels;
      public statValues;
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      setup(): void;
      show(args: any[]): boolean;
      updateStats(): void;
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(cursor: integer): boolean;
      clear(): void;
  }
  export declare function initStatsKeys(): void;
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { ModalUiHandler } from "./modal-ui-handler";
  //import { Mode } from "./ui";
  export class LoadingModalUiHandler extends PokeRogue.ui.ModalUiHandler {
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      getModalTitle(): string;
      getWidth(): number;
      getHeight(): number;
      getMargin(): [number, number, number, number];
      getButtonLabels(): string[];
      setup(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import { FormModalUiHandler } from "./form-modal-ui-handler";
  //import { ModalConfig } from "./modal-ui-handler";
  export class LoginFormUiHandler extends PokeRogue.ui.FormModalUiHandler {
      getModalTitle(config?: ModalConfig): string;
      getFields(config?: ModalConfig): string[];
      getWidth(config?: ModalConfig): number;
      getMargin(config?: ModalConfig): [number, number, number, number];
      getButtonLabels(config?: ModalConfig): string[];
      getReadableErrorMessage(error: string): string;
      show(args: any[]): boolean;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { Mode } from "./ui";
  //import MessageUiHandler from "./message-ui-handler";
  //import { OptionSelectConfig } from "./abstact-option-select-ui-handler";
  //import { Button } from "#enums/buttons";
  //import BgmBar from "#app/ui/bgm-bar";
  declare enum MenuOptions {
      GAME_SETTINGS = 0,
      ACHIEVEMENTS = 1,
      STATS = 2,
      VOUCHERS = 3,
      EGG_LIST = 4,
      EGG_GACHA = 5,
      MANAGE_DATA = 6,
      COMMUNITY = 7,
      SAVE_AND_QUIT = 8,
      LOG_OUT = 9
  }
  export class MenuUiHandler extends PokeRogue.ui.MessageUiHandler {
      public menuContainer;
      public menuMessageBoxContainer;
      public menuOverlay;
      public menuBg;
      protected optionSelectText: Phaser.GameObjects.Text;
      public cursorObj;
      protected ignoredMenuOptions: MenuOptions[];
      protected menuOptions: MenuOptions[];
      protected manageDataConfig: PokeRogue.ui.OptionSelectConfig;
      protected communityConfig: PokeRogue.ui.OptionSelectConfig;
      bgmBar: PokeRogue.ui.BgmBar;
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      setup(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      showText(text: string, delay?: number, callback?: Function, callbackDelay?: number, prompt?: boolean, promptDelay?: number): void;
      setCursor(cursor: integer): boolean;
      clear(): void;
      eraseCursor(): void;
  }
  export {};
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import AwaitableUiHandler from "./awaitable-ui-handler";
  //import { Mode } from "./ui";
  export abstract class MessageUiHandler extends PokeRogue.ui.AwaitableUiHandler {
      protected textTimer: Phaser.Time.TimerEvent;
      protected textCallbackTimer: Phaser.Time.TimerEvent;
      pendingPrompt: boolean;
      message: Phaser.GameObjects.Text;
      prompt: Phaser.GameObjects.Sprite;
      constructor(scene: PokeRogue.BattleScene, mode: PokeRogue.ui.Mode);
      showText(text: string, delay?: integer, callback?: Function, callbackDelay?: integer, prompt?: boolean, promptDelay?: integer): void;
      showDialogue(text: string, name: string, delay?: integer, callback?: Function, callbackDelay?: integer, prompt?: boolean, promptDelay?: integer): void;
      public showTextInternal;
      showPrompt(callback: Function, callbackDelay: integer): void;
      clearText(): void;
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { Mode } from "./ui";
  //import UiHandler from "./ui-handler";
  //import { Button } from "#enums/buttons";
  export interface ModalConfig {
      buttonActions: Function[];
  }
  export declare abstract class ModalUiHandler extends PokeRogue.ui.UiHandler {
      protected modalContainer: Phaser.GameObjects.Container;
      protected modalBg: Phaser.GameObjects.NineSlice;
      protected titleText: Phaser.GameObjects.Text;
      protected buttonContainers: Phaser.GameObjects.Container[];
      protected buttonBgs: Phaser.GameObjects.NineSlice[];
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      abstract getModalTitle(config?: ModalConfig): string;
      abstract getWidth(config?: ModalConfig): number;
      abstract getHeight(config?: ModalConfig): number;
      abstract getMargin(config?: ModalConfig): [number, number, number, number];
      abstract getButtonLabels(config?: ModalConfig): string[];
      getButtonTopMargin(): number;
      setup(): void;
      show(args: any[]): boolean;
      updateContainer(config?: ModalConfig): void;
      processInput(button: PokeRogue.enums.Button): boolean;
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { ModifierTypeOption } from "../modifier/modifier-type";
  //import AwaitableUiHandler from "./awaitable-ui-handler";
  //import { Button } from "#enums/buttons";
  export declare const SHOP_OPTIONS_ROW_LIMIT = 6;
  export class ModifierSelectUiHandler extends PokeRogue.ui.AwaitableUiHandler {
      public modifierContainer;
      public rerollButtonContainer;
      public lockRarityButtonContainer;
      public transferButtonContainer;
      public checkButtonContainer;
      public rerollCostText;
      public lockRarityButtonText;
      public moveInfoOverlay;
      public moveInfoOverlayActive;
      public rowCursor;
      public player;
      public rerollCost;
      options: ModifierOption[];
      shopOptionsRows: ModifierOption[][];
      public cursorObj;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(cursor: integer): boolean;
      setRowCursor(rowCursor: integer): boolean;
      public getRowItems;
      setRerollCost(rerollCost: integer): void;
      updateCostText(): void;
      updateRerollCostText(): void;
      updateLockRaritiesText(): void;
      clear(): void;
      eraseCursor(): void;
  }
  declare class ModifierOption extends Phaser.GameObjects.Container {
      modifierTypeOption: PokeRogue.modifier.ModifierTypeOption;
      public pb;
      public pbTint;
      public itemContainer;
      public item;
      public itemTint;
      public itemText;
      public itemCostText;
      constructor(scene: PokeRogue.BattleScene, x: number, y: number, modifierTypeOption: PokeRogue.modifier.ModifierTypeOption);
      setup(): void;
      show(remainingDuration: integer, upgradeCountOffset: integer): void;
      getPbAtlasKey(tierOffset?: integer): string;
      updateCostText(): void;
  }
  export {};
  
}

declare namespace PokeRogue.ui {
  //import BattleScene, { InfoToggle } from "../battle-scene";
  //import Move from "../data/move";
  export interface MoveInfoOverlaySettings {
      delayVisibility?: boolean;
      scale?: number;
      top?: boolean;
      right?: boolean;
      onSide?: boolean;
      x?: number;
      y?: number;
      width?: number;
  }
  export class MoveInfoOverlay extends Phaser.GameObjects.Container implements InfoToggle {
      active: boolean;
      public move;
      public desc;
      public descScroll;
      public val;
      public pp;
      public pow;
      public acc;
      public typ;
      public cat;
      public options;
      constructor(scene: PokeRogue.BattleScene, options?: MoveInfoOverlaySettings);
      show(move: PokeRogue.data.Move): boolean;
      clear(): void;
      toggleInfo(force?: boolean): void;
      isActive(): boolean;
      static getWidth(scale: number, scene: PokeRogue.BattleScene): number;
      static getHeight(scale: number, onSide?: boolean): number;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { ModalUiHandler } from "./modal-ui-handler";
  //import { Mode } from "./ui";
  export class OutdatedModalUiHandler extends PokeRogue.ui.ModalUiHandler {
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      getModalTitle(): string;
      getWidth(): number;
      getHeight(): number;
      getMargin(): [number, number, number, number];
      getButtonLabels(): string[];
      setup(): void;
      show(args: any[]): boolean;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import Pokemon from "../field/pokemon";
  export class PartyExpBar extends Phaser.GameObjects.Container {
      public bg;
      public pokemonIcon;
      public expText;
      public tween;
      shown: boolean;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      showPokemonExp(pokemon: PokeRogue.field.Pokemon, expValue: integer, showOnlyLevelUp: boolean, newLevel: number): Promise<void>;
      hide(): Promise<void>;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { PlayerPokemon, PokemonMove } from "../field/pokemon";
  //import MessageUiHandler from "./message-ui-handler";
  //import { PokemonHeldItemModifier } from "../modifier/modifier";
  //import { Button } from "#enums/buttons";
  export declare enum PartyUiMode {
      SWITCH = 0,
      FAINT_SWITCH = 1,
      POST_BATTLE_SWITCH = 2,
      REVIVAL_BLESSING = 3,
      MODIFIER = 4,
      MOVE_MODIFIER = 5,
      TM_MODIFIER = 6,
      REMEMBER_MOVE_MODIFIER = 7,
      MODIFIER_TRANSFER = 8,
      SPLICE = 9,
      RELEASE = 10,
      CHECK = 11
  }
  export declare enum PartyOption {
      CANCEL = -1,
      SEND_OUT = 0,
      PASS_BATON = 1,
      REVIVE = 2,
      APPLY = 3,
      TEACH = 4,
      TRANSFER = 5,
      SUMMARY = 6,
      UNPAUSE_EVOLUTION = 7,
      SPLICE = 8,
      UNSPLICE = 9,
      RELEASE = 10,
      SCROLL_UP = 1000,
      SCROLL_DOWN = 1001,
      FORM_CHANGE_ITEM = 2000,
      MOVE_1 = 3000,
      MOVE_2 = 3001,
      MOVE_3 = 3002,
      MOVE_4 = 3003,
      ALL = 4000
  }
  export type PartySelectCallback = (cursor: integer, option: PartyOption) => void;
  export type PartyModifierTransferSelectCallback = (fromCursor: integer, index: integer, itemQuantity?: integer, toCursor?: integer) => void;
  export type PartyModifierSpliceSelectCallback = (fromCursor: integer, toCursor?: integer) => void;
  export type PokemonSelectFilter = (pokemon: PokeRogue.field.PlayerPokemon) => string;
  export type PokemonModifierTransferSelectFilter = (pokemon: PokeRogue.field.PlayerPokemon, modifier: PokeRogue.modifier.PokemonHeldItemModifier) => string;
  export type PokemonMoveSelectFilter = (pokemonMove: PokeRogue.field.PokemonMove) => string;
  export class PartyUiHandler extends PokeRogue.ui.MessageUiHandler {
      public partyUiMode;
      public fieldIndex;
      public partyBg;
      public partyContainer;
      public partySlotsContainer;
      public partySlots;
      public partyCancelButton;
      public partyMessageBox;
      public moveInfoOverlay;
      public optionsMode;
      public optionsScroll;
      public optionsCursor;
      public optionsScrollCursor;
      public optionsScrollTotal;
      public optionsContainer;
      public optionsBg;
      public optionsCursorObj;
      public options;
      public transferMode;
      public transferOptionCursor;
      public transferCursor;
      /** Current quantity selection for every item held by the pokemon selected for the transfer */
      public transferQuantities;
      /** Stack size of every item that the selected pokemon is holding */
      public transferQuantitiesMax;
      /** Whether to transfer all items */
      public transferAll;
      public lastCursor;
      public selectCallback;
      public selectFilter;
      public moveSelectFilter;
      public tmMoveId;
      public showMovePp;
      public iconAnimHandler;
      public static FilterAll;
      static FilterNonFainted: (pokemon: PokeRogue.field.PlayerPokemon) => string;
      static FilterFainted: (pokemon: PokeRogue.field.PlayerPokemon) => string;
      /**
       * For consistency reasons, this looks like the above filters. However this is used only internally and is always enforced for switching.
       * @param pokemon The pokemon to check.
       * @returns
       */
      public FilterChallengeLegal;
      public static FilterAllMoves;
      static FilterItemMaxStacks: (pokemon: PokeRogue.field.PlayerPokemon, modifier: PokeRogue.modifier.PokemonHeldItemModifier) => string;
      static NoEffectMessage: string;
      public localizedOptions;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      populatePartySlots(): void;
      setCursor(cursor: integer): boolean;
      showText(text: string, delay?: integer, callback?: Function, callbackDelay?: integer, prompt?: boolean, promptDelay?: integer): void;
      showOptions(): void;
      updateOptions(): void;
      startTransfer(): void;
      clearTransfer(): void;
      doRelease(slotIndex: integer): void;
      getReleaseMessage(pokemonName: string): string;
      getOptionsCursorWithScroll(): integer;
      clearOptions(): void;
      eraseOptionsCursor(): void;
      clear(): void;
      clearPartySlots(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import Pokemon from "../field/pokemon";
  export class PokeballTray extends Phaser.GameObjects.Container {
      public player;
      public bg;
      public balls;
      shown: boolean;
      constructor(scene: PokeRogue.BattleScene, player: boolean);
      setup(): void;
      showPbTray(party: PokeRogue.field.Pokemon[]): Promise<void>;
      hide(): Promise<void>;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  export declare enum PokemonIconAnimMode {
      NONE = 0,
      PASSIVE = 1,
      ACTIVE = 2
  }
  type PokemonIcon = Phaser.GameObjects.Container | Phaser.GameObjects.Sprite;
  export class PokemonIconAnimHandler {
      public icons;
      public toggled;
      setup(scene: PokeRogue.BattleScene): void;
      getModeYDelta(mode: PokemonIconAnimMode): number;
      addOrUpdate(icons: PokemonIcon | PokemonIcon[], mode: PokemonIconAnimMode): void;
      remove(icons: PokemonIcon | PokemonIcon[]): void;
      removeAll(): void;
  }
  export {};
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import Pokemon from "../field/pokemon";
  //import { StatsContainer } from "./stats-container";
  export class PokemonInfoContainer extends Phaser.GameObjects.Container {
      public readonly infoWindowWidth;
      public pokemonFormLabelText;
      public pokemonFormText;
      public pokemonGenderText;
      public pokemonGenderNewText;
      public pokemonAbilityLabelText;
      public pokemonAbilityText;
      public pokemonNatureLabelText;
      public pokemonNatureText;
      public pokemonShinyIcon;
      public pokemonShinyNewIcon;
      public pokemonFusionShinyIcon;
      public pokemonMovesContainer;
      public pokemonMovesContainers;
      public pokemonMoveBgs;
      public pokemonMoveLabels;
      public numCharsBeforeCutoff;
      public initialX;
      public movesContainerInitialX;
      statsContainer: PokeRogue.ui.StatsContainer;
      shown: boolean;
      constructor(scene: PokeRogue.BattleScene, x?: number, y?: number);
      setup(): void;
      show(pokemon: PokeRogue.field.Pokemon, showMoves?: boolean, speedMultiplier?: number): Promise<void>;
      makeRoomForConfirmUi(speedMultiplier?: number): Promise<void>;
      hide(speedMultiplier?: number): Promise<void>;
  }
  export interface PokemonInfoContainer {
      scene: PokeRogue.BattleScene;
  }
  
}

declare namespace PokeRogue.ui {
  //import { FormModalUiHandler } from "./form-modal-ui-handler";
  //import { ModalConfig } from "./modal-ui-handler";
  export class RegistrationFormUiHandler extends PokeRogue.ui.FormModalUiHandler {
      getModalTitle(config?: ModalConfig): string;
      getFields(config?: ModalConfig): string[];
      getWidth(config?: ModalConfig): number;
      getMargin(config?: ModalConfig): [number, number, number, number];
      getButtonTopMargin(): number;
      getButtonLabels(config?: ModalConfig): string[];
      getReadableErrorMessage(error: string): string;
      setup(): void;
      show(args: any[]): boolean;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { Button } from "#enums/buttons";
  //import MessageUiHandler from "./message-ui-handler";
  export declare enum SaveSlotUiMode {
      LOAD = 0,
      SAVE = 1
  }
  export type SaveSlotSelectCallback = (cursor: integer) => void;
  export class SaveSlotSelectUiHandler extends PokeRogue.ui.MessageUiHandler {
      public saveSlotSelectContainer;
      public sessionSlotsContainer;
      public saveSlotSelectMessageBox;
      public saveSlotSelectMessageBoxContainer;
      public sessionSlots;
      public uiMode;
      public saveSlotSelectCallback;
      public scrollCursor;
      public cursorObj;
      public sessionSlotsContainerInitialY;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      populateSessionSlots(): void;
      showText(text: string, delay?: integer, callback?: Function, callbackDelay?: integer, prompt?: boolean, promptDelay?: integer): void;
      setCursor(cursor: integer): boolean;
      setScrollCursor(scrollCursor: integer): boolean;
      clear(): void;
      eraseCursor(): void;
      clearSessionSlots(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "#app/battle-scene";
  export class SavingIconHandler extends Phaser.GameObjects.Container {
      public icon;
      public animActive;
      public shown;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(): void;
      hide(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { ModalUiHandler } from "./modal-ui-handler";
  //import { Mode } from "./ui";
  export class SessionReloadModalUiHandler extends PokeRogue.ui.ModalUiHandler {
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      getModalTitle(): string;
      getWidth(): number;
      getHeight(): number;
      getMargin(): [number, number, number, number];
      getButtonLabels(): string[];
      setup(): void;
      show(args: any[]): boolean;
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import UiHandler from "../ui-handler";
  //import BattleScene from "../../battle-scene";
  //import { Mode } from "../ui";
  //import { Button } from "#enums/buttons";
  /**
   * Abstract class for handling UI elements related to button bindings.
   */
  export abstract class AbstractBindingUiHandler extends PokeRogue.ui.UiHandler {
      protected optionSelectContainer: Phaser.GameObjects.Container;
      protected actionsContainer: Phaser.GameObjects.Container;
      protected titleBg: Phaser.GameObjects.NineSlice;
      protected actionBg: Phaser.GameObjects.NineSlice;
      protected optionSelectBg: Phaser.GameObjects.NineSlice;
      protected unlockText: Phaser.GameObjects.Text;
      protected timerText: Phaser.GameObjects.Text;
      protected swapText: Phaser.GameObjects.Text;
      protected actionLabel: Phaser.GameObjects.Text;
      protected cancelLabel: Phaser.GameObjects.Text;
      protected listening: boolean;
      protected buttonPressed: number | null;
      protected newButtonIcon: Phaser.GameObjects.Sprite;
      protected targetButtonIcon: Phaser.GameObjects.Sprite;
      protected cancelFn: (boolean?: any) => boolean;
      abstract swapAction(): boolean;
      protected timeLeftAutoClose: number;
      protected countdownTimer: any;
      protected target: any;
      /**
         * Constructor for the AbstractBindingUiHandler.
         *
         * @param scene - The BattleScene instance.
         * @param mode - The UI mode.
         */
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      /**
         * Setup UI elements.
         */
      setup(): void;
      manageAutoCloseTimer(): void;
      /**
         * Show the UI with the provided arguments.
         *
         * @param args - Arguments to be passed to the show method.
         * @returns `true` if successful.
         */
      show(args: any[]): boolean;
      /**
         * Get the width of the window.
         *
         * @returns The window width.
         */
      getWindowWidth(): number;
      /**
         * Get the height of the window.
         *
         * @returns The window height.
         */
      getWindowHeight(): number;
      /**
         * Process the input for the given button.
         *
         * @param button - The button to process.
         * @returns `true` if the input was processed successfully.
         */
      processInput(button: PokeRogue.enums.Button): boolean;
      /**
         * Set the cursor to the specified position.
         *
         * @param cursor - The cursor position to set.
         * @returns `true` if the cursor was set successfully.
         */
      setCursor(cursor: integer): boolean;
      /**
         * Clear the UI elements and state.
         */
      clear(): void;
      /**
         * Handle input down events.
         *
         * @param buttonIcon - The icon of the button that was pressed.
         * @param assignedButtonIcon - The icon of the button that is assigned.
         * @param type - The type of button press.
         */
      onInputDown(buttonIcon: string, assignedButtonIcon: string, type: string): void;
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import UiHandler from "../ui-handler";
  //import BattleScene from "../../battle-scene";
  //import { Mode } from "../ui";
  //import { InterfaceConfig } from "../../inputs-controller";
  //import NavigationMenu from "#app/ui/settings/navigationMenu";
  //import { Device } from "#enums/devices";
  //import { Button } from "#enums/buttons";
  export interface InputsIcons {
      [key: string]: Phaser.GameObjects.Sprite;
  }
  export interface LayoutConfig {
      optionsContainer: Phaser.GameObjects.Container;
      inputsIcons: InputsIcons;
      settingLabels: Phaser.GameObjects.Text[];
      optionValueLabels: Phaser.GameObjects.Text[][];
      optionCursors: integer[];
      keys: string[];
      bindingSettings: Array<String>;
  }
  /**
   * Abstract class for handling UI elements related to control settings.
   */
  export abstract class AbstractControlSettingsUiHandler extends PokeRogue.ui.UiHandler {
      protected settingsContainer: Phaser.GameObjects.Container;
      protected optionsContainer: Phaser.GameObjects.Container;
      protected navigationContainer: PokeRogue.ui.settings.NavigationMenu;
      protected scrollCursor: integer;
      protected optionCursors: integer[];
      protected cursorObj: Phaser.GameObjects.NineSlice;
      protected optionsBg: Phaser.GameObjects.NineSlice;
      protected actionsBg: Phaser.GameObjects.NineSlice;
      protected settingLabels: Phaser.GameObjects.Text[];
      protected optionValueLabels: Phaser.GameObjects.Text[][];
      protected layout: Map<string, LayoutConfig>;
      protected inputsIcons: InputsIcons;
      protected navigationIcons: InputsIcons;
      protected keys: Array<String>;
      protected bindingSettings: Array<String>;
      protected setting: any;
      protected settingBlacklisted: any;
      protected settingDeviceDefaults: any;
      protected settingDeviceOptions: any;
      protected configs: any;
      protected commonSettingsCount: any;
      protected textureOverride: any;
      protected titleSelected: any;
      protected localStoragePropertyName: any;
      protected rowsToDisplay: number;
      protected device: PokeRogue.enums.Device;
      abstract saveSettingToLocalStorage(setting: any, cursor: any): void;
      abstract setSetting(scene: PokeRogue.BattleScene, setting: any, value: integer): boolean;
      /**
       * Constructor for the AbstractSettingsUiHandler.
       *
       * @param scene - The BattleScene instance.
       * @param mode - The UI mode.
       */
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      getLocalStorageSetting(): object;
      public camelize;
      /**
       * Setup UI elements.
       */
      setup(): void;
      /**
       * Get the active configuration.
       *
       * @returns The active configuration for current device
       */
      getActiveConfig(): InterfaceConfig;
      /**
       * Update the bindings for the current active device configuration.
       */
      updateBindings(): void;
      updateNavigationDisplay(): void;
      /**
       * Show the UI with the provided arguments.
       *
       * @param args - Arguments to be passed to the show method.
       * @returns `true` if successful.
       */
      show(args: any[]): boolean;
      /**
       * Set the UI layout for the active device configuration.
       *
       * @param activeConfig - The active device configuration.
       * @returns `true` if the layout was successfully applied, otherwise `false`.
       */
      setLayout(activeConfig: PokeRogue.InterfaceConfig): boolean;
      /**
       * Process the input for the given button.
       *
       * @param button - The button to process.
       * @returns `true` if the input was processed successfully.
       */
      processInput(button: PokeRogue.enums.Button): boolean;
      resetScroll(): void;
      /**
       * Set the cursor to the specified position.
       *
       * @param cursor - The cursor position to set.
       * @returns `true` if the cursor was set successfully.
       */
      setCursor(cursor: integer): boolean;
      /**
       * Set the scroll cursor to the specified position.
       *
       * @param scrollCursor - The scroll cursor position to set.
       * @returns `true` if the scroll cursor was set successfully.
       */
      setScrollCursor(scrollCursor: integer): boolean;
      /**
       * Set the option cursor to the specified position.
       *
       * @param settingIndex - The index of the setting.
       * @param cursor - The cursor position to set.
       * @param save - Whether to save the setting to local storage.
       * @returns `true` if the option cursor was set successfully.
       */
      setOptionCursor(settingIndex: integer, cursor: integer, save?: boolean): boolean;
      /**
       * Update the scroll position of the settings UI.
       */
      updateSettingsScroll(): void;
      /**
       * Clear the UI elements and state.
       */
      clear(): void;
      /**
       * Erase the cursor from the UI.
       */
      eraseCursor(): void;
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import BattleScene from "../../battle-scene";
  //import { Mode } from "../ui";
  //import UiHandler from "../ui-handler";
  //import { Button } from "#enums/buttons";
  //import { InputsIcons } from "#app/ui/settings/abstract-control-settings-ui-handler.js";
  //import { Setting } from "#app/system/settings/settings";
  /**
   * Abstract class for handling UI elements related to settings.
   */
  export class AbstractSettingsUiHandler extends PokeRogue.ui.UiHandler {
      public settingsContainer;
      public optionsContainer;
      public navigationContainer;
      public scrollCursor;
      public optionsBg;
      public optionCursors;
      public settingLabels;
      public optionValueLabels;
      protected navigationIcons: PokeRogue.ui.settings.InputsIcons;
      public cursorObj;
      public reloadSettings;
      public reloadRequired;
      protected rowsToDisplay: number;
      protected title: string;
      protected settings: Array<Setting>;
      protected localStorageKey: string;
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      /**
       * Setup UI elements
       */
      setup(): void;
      /**
       * Update the bindings for the current active device configuration.
       */
      updateBindings(): void;
      /**
       * Show the UI with the provided arguments.
       *
       * @param args - Arguments to be passed to the show method.
       * @returns `true` if successful.
         */
      show(args: any[]): boolean;
      /**
       * Processes input from a specified button.
       * This method handles navigation through a UI menu, including movement through menu items
       * and handling special actions like cancellation. Each button press may adjust the cursor
       * position or the menu scroll, and plays a sound effect if the action was successful.
       *
       * @param button - The button pressed by the user.
       * @returns `true` if the action associated with the button was successfully processed, `false` otherwise.
       */
      processInput(button: PokeRogue.enums.Button): boolean;
      /**
       * Set the cursor to the specified position.
       *
       * @param cursor - The cursor position to set.
       * @returns `true` if the cursor was set successfully.
       */
      setCursor(cursor: integer): boolean;
      /**
       * Set the option cursor to the specified position.
       *
       * @param settingIndex - The index of the setting.
       * @param cursor - The cursor position to set.
       * @param save - Whether to save the setting to local storage.
       * @returns `true` if the option cursor was set successfully.
       */
      setOptionCursor(settingIndex: integer, cursor: integer, save?: boolean): boolean;
      /**
       * Set the scroll cursor to the specified position.
       *
       * @param scrollCursor - The scroll cursor position to set.
       * @returns `true` if the scroll cursor was set successfully.
       */
      setScrollCursor(scrollCursor: integer): boolean;
      /**
       * Update the scroll position of the settings UI.
       */
      updateSettingsScroll(): void;
      /**
       * Clear the UI elements and state.
       */
      clear(): void;
      /**
       * Erase the cursor from the UI.
       */
      eraseCursor(): void;
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import BattleScene from "../../battle-scene";
  //import AbstractBindingUiHandler from "./abstract-binding-ui-handler";
  //import { Mode } from "../ui";
  export class GamepadBindingUiHandler extends PokeRogue.ui.settings.AbstractBindingUiHandler {
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      setup(): void;
      getSelectedDevice(): any;
      gamepadButtonDown(pad: Phaser.Input.Gamepad.Gamepad, button: Phaser.Input.Gamepad.Button, value: number): void;
      swapAction(): boolean;
      /**
         * Clear the UI elements and state.
         */
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import BattleScene from "../../battle-scene";
  //import AbstractBindingUiHandler from "./abstract-binding-ui-handler";
  //import { Mode } from "../ui";
  export class KeyboardBindingUiHandler extends PokeRogue.ui.settings.AbstractBindingUiHandler {
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      setup(): void;
      getSelectedDevice(): any;
      onKeyDown(event: any): void;
      swapAction(): boolean;
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import BattleScene from "#app/battle-scene";
  //import { Mode } from "#app/ui/ui";
  //import { Button } from "#enums/buttons";
  /**
   * Manages navigation and menus tabs within the setting menu.
   */
  export declare class NavigationManager {
      public static instance;
      modes: PokeRogue.ui.Mode[];
      selectedMode: PokeRogue.ui.Mode;
      navigationMenus: NavigationMenu[];
      labels: string[];
      /**
       * Creates an instance of NavigationManager.
       * To create a new tab in the menu, add the mode to the modes array and the label to the labels array.
       * and instantiate a new NavigationMenu instance in your handler
       * like: this.navigationContainer = new NavigationMenu(this.scene, 0, 0);
       */
      constructor();
      reset(): void;
      /**
       * Gets the singleton instance of the NavigationManager.
       * @returns The singleton instance of NavigationManager.
       */
      static getInstance(): NavigationManager;
      /**
       * Navigates modes based on given direction
       * @param scene The current BattleScene instance
       * @param direction LEFT or RIGHT
       */
      navigate(scene: any, direction: any): void;
      /**
       * Updates all navigation menus.
       */
      updateNavigationMenus(): void;
      /**
       * Updates icons for all navigation menus.
       */
      updateIcons(): void;
  }
  export class NavigationMenu extends Phaser.GameObjects.Container {
      public navigationIcons;
      scene: PokeRogue.BattleScene;
      protected headerTitles: Phaser.GameObjects.Text[];
      /**
       * Creates an instance of NavigationMenu.
       * @param scene The current BattleScene instance.
       * @param x The x position of the NavigationMenu.
       * @param y The y position of the NavigationMenu.
       */
      constructor(scene: PokeRogue.BattleScene, x: number, y: number);
      /**
       * Sets up the NavigationMenu by adding windows, icons, and labels.
       */
      setup(): void;
      /**
       * Updates the NavigationMenu's header titles based on the selected mode.
       */
      update(): void;
      /**
       * Updates the icons in the NavigationMenu based on the latest input recorded.
       */
      updateIcons(): void;
      /**
       * Handles navigation based on the button pressed.
       * @param button The button pressed for navigation.
       * @returns A boolean indicating if the navigation was handled.
       */
      navigate(button: PokeRogue.enums.Button): boolean;
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import BattleScene from "../../battle-scene";
  //import AbstractOptionSelectUiHandler from "../abstact-option-select-ui-handler";
  //import { Mode } from "../ui";
  export class OptionSelectUiHandler extends PokeRogue.ui.AbstractOptionSelectUiHandler {
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      getWindowWidth(): integer;
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import BattleScene from "../../battle-scene";
  //import { Mode } from "../ui";
  //import AbstractSettingsUiHandler from "./abstract-settings-ui-handler";
  export class SettingsAudioUiHandler extends PokeRogue.ui.settings.AbstractSettingsUiHandler {
      /**
       * Creates an instance of SettingsAudioUiHandler.
       *
       * @param scene - The BattleScene instance.
       * @param mode - The UI mode, optional.
       */
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import BattleScene from "../../battle-scene";
  //import { Mode } from "../ui";
  //import AbstractSettingsUiHandler from "./abstract-settings-ui-handler";
  export class SettingsDisplayUiHandler extends PokeRogue.ui.settings.AbstractSettingsUiHandler {
      /**
       * Creates an instance of SettingsGamepadUiHandler.
       *
       * @param scene - The BattleScene instance.
       * @param mode - The UI mode, optional.
       */
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import BattleScene from "../../battle-scene";
  //import { Mode } from "../ui";
  //import { setSettingGamepad } from "../../system/settings/settings-gamepad";
  //import { InterfaceConfig } from "#app/inputs-controller";
  //import AbstractControlSettingsUiHandler from "#app/ui/settings/abstract-control-settings-ui-handler.js";
  /**
   * Class representing the settings UI handler for gamepads.
   *
   * @extends PokeRogue.ui.settings.AbstractControlSettingsUiHandler
   */
  export class SettingsGamepadUiHandler extends PokeRogue.ui.settings.AbstractControlSettingsUiHandler {
      /**
         * Creates an instance of SettingsGamepadUiHandler.
         *
         * @param scene - The BattleScene instance.
         * @param mode - The UI mode, optional.
         */
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      setSetting: typeof setSettingGamepad;
      /**
         * Setup UI elements.
         */
      setup(): void;
      /**
         * Set the layout for the active configuration.
         *
         * @param activeConfig - The active gamepad configuration.
         * @returns `true` if the layout was successfully applied, otherwise `false`.
         */
      setLayout(activeConfig: PokeRogue.InterfaceConfig): boolean;
      /**
         * Update the display of the chosen gamepad.
         */
      updateChosenGamepadDisplay(): void;
      /**
         * Save the setting to local storage.
         *
         * @param settingName - The setting to save.
         * @param cursor - The cursor position to save.
         */
      saveSettingToLocalStorage(settingName: any, cursor: any): void;
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import BattleScene from "../../battle-scene";
  //import { Mode } from "../ui";
  //import { setSettingKeyboard } from "#app/system/settings/settings-keyboard";
  //import AbstractControlSettingsUiHandler from "#app/ui/settings/abstract-control-settings-ui-handler.js";
  //import { InterfaceConfig } from "#app/inputs-controller";
  /**
   * Class representing the settings UI handler for keyboards.
   *
   * @extends PokeRogue.ui.settings.AbstractControlSettingsUiHandler
   */
  export class SettingsKeyboardUiHandler extends PokeRogue.ui.settings.AbstractControlSettingsUiHandler {
      /**
         * Creates an instance of SettingsKeyboardUiHandler.
         *
         * @param scene - The BattleScene instance.
         * @param mode - The UI mode, optional.
         */
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      setSetting: typeof setSettingKeyboard;
      /**
         * Setup UI elements.
         */
      setup(): void;
      /**
         * Handle the home key press event.
         */
      onHomeDown(): void;
      /**
         * Handle the delete key press event.
         */
      onDeleteDown(): void;
      /**
         * Set the layout for the active configuration.
         *
         * @param activeConfig - The active keyboard configuration.
         * @returns `true` if the layout was successfully applied, otherwise `false`.
         */
      setLayout(activeConfig: PokeRogue.InterfaceConfig): boolean;
      /**
         * Update the display of the chosen keyboard layout.
         */
      updateChosenKeyboardDisplay(): void;
      /**
         * Save the custom keyboard mapping to local storage.
         *
         * @param config - The configuration to save.
         */
      saveCustomKeyboardMappingToLocalStorage(config: any): void;
      /**
         * Save the setting to local storage.
         *
         * @param settingName - The name of the setting to save.
         * @param cursor - The cursor position to save.
         */
      saveSettingToLocalStorage(settingName: any, cursor: any): void;
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import BattleScene from "../../battle-scene";
  //import { Mode } from "../ui";
  //import AbstractSettingsUiHandler from "./abstract-settings-ui-handler";
  export class SettingsUiHandler extends PokeRogue.ui.settings.AbstractSettingsUiHandler {
      /**
       * Creates an instance of SettingsGamepadUiHandler.
       *
       * @param scene - The BattleScene instance.
       * @param mode - The UI mode, optional.
       */
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
  }
  
}

declare namespace PokeRogue.ui {
  //import { Variant } from "#app/data/variant";
  //import BattleScene from "../battle-scene";
  //import { Nature } from "../data/nature";
  //import PokemonSpecies from "../data/pokemon-species";
  //import { Type } from "../data/type";
  //import { StarterMoveset } from "../system/game-data";
  //import MessageUiHandler from "./message-ui-handler";
  //import { Moves } from "#enums/moves";
  //import { Button } from "#enums/buttons";
  export type StarterSelectCallback = (starters: Starter[]) => void;
  export interface Starter {
      species: PokeRogue.data.PokemonSpecies;
      dexAttr: bigint;
      abilityIndex: integer;
      passive: boolean;
      nature: PokeRogue.data.Nature;
      moveset?: StarterMoveset;
      pokerus: boolean;
  }
  export class StarterSelectUiHandler extends PokeRogue.ui.MessageUiHandler {
      public starterSelectContainer;
      public shinyOverlay;
      public starterSelectGenIconContainers;
      public pokemonNumberText;
      public pokemonSprite;
      public pokemonNameText;
      public pokemonGrowthRateLabelText;
      public pokemonGrowthRateText;
      public type1Icon;
      public type2Icon;
      public pokemonLuckLabelText;
      public pokemonLuckText;
      public pokemonGenderText;
      public pokemonUncaughtText;
      public pokemonAbilityLabelText;
      public pokemonAbilityText;
      public pokemonPassiveLabelText;
      public pokemonPassiveText;
      public pokemonNatureLabelText;
      public pokemonNatureText;
      public pokemonMovesContainer;
      public pokemonMoveContainers;
      public pokemonMoveBgs;
      public pokemonMoveLabels;
      public pokemonAdditionalMoveCountLabel;
      public pokemonEggMovesContainer;
      public pokemonEggMoveContainers;
      public pokemonEggMoveBgs;
      public pokemonEggMoveLabels;
      public pokemonCandyIcon;
      public pokemonCandyDarknessOverlay;
      public pokemonCandyOverlayIcon;
      public pokemonCandyCountText;
      public pokemonCaughtHatchedContainer;
      public pokemonCaughtCountText;
      public pokemonHatchedIcon;
      public pokemonHatchedCountText;
      public pokemonShinyIcon;
      public genOptionsText;
      public instructionsContainer;
      public shinyIconElement;
      public formIconElement;
      public abilityIconElement;
      public genderIconElement;
      public natureIconElement;
      public variantIconElement;
      public shinyLabel;
      public formLabel;
      public genderLabel;
      public abilityLabel;
      public natureLabel;
      public variantLabel;
      public starterSelectMessageBox;
      public starterSelectMessageBoxContainer;
      public statsContainer;
      public pokemonFormText;
      public moveInfoOverlay;
      public genMode;
      public statsMode;
      public dexAttrCursor;
      public abilityCursor;
      public natureCursor;
      public genCursor;
      public genScrollCursor;
      public starterMoveset;
      public genSpecies;
      public lastSpecies;
      public speciesLoaded;
      starterGens: integer[];
      starterCursors: integer[];
      public pokerusGens;
      public pokerusCursors;
      public starterAttr;
      public starterAbilityIndexes;
      public starterNatures;
      public starterMovesets;
      public speciesStarterDexEntry;
      public speciesStarterMoves;
      public canCycleShiny;
      public canCycleForm;
      public canCycleGender;
      public canCycleAbility;
      public canCycleNature;
      public canCycleVariant;
      public value;
      public canAddParty;
      public assetLoadCancelled;
      cursorObj: Phaser.GameObjects.Image;
      public starterCursorObjs;
      public pokerusCursorObjs;
      public starterIcons;
      public genCursorObj;
      public genCursorHighlightObj;
      public valueLimitLabel;
      public startCursorObj;
      public starterValueLabels;
      public shinyIcons;
      public hiddenAbilityIcons;
      public classicWinIcons;
      public candyUpgradeIcon;
      public candyUpgradeOverlayIcon;
      public iconAnimHandler;
      public instructionRowX;
      public instructionRowY;
      public instructionRowTextOffset;
      public starterSelectCallback;
      public starterPreferences;
      protected blockInput: boolean;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      showText(text: string, delay?: integer, callback?: Function, callbackDelay?: integer, prompt?: boolean, promptDelay?: integer): void;
      /**
       * Determines if 'Icon' based upgrade notifications should be shown
       * @returns true if upgrade notifications are enabled and set to display an 'Icon'
       */
      isUpgradeIconEnabled(): boolean;
      /**
       * Determines if 'Animation' based upgrade notifications should be shown
       * @returns true if upgrade notifications are enabled and set to display an 'Animation'
       */
      isUpgradeAnimationEnabled(): boolean;
      /**
       * Determines if a passive upgrade is available for the given species ID
       * @param speciesId The ID of the species to check the passive of
       * @returns true if the user has enough candies and a passive has not been unlocked already
       */
      isPassiveAvailable(speciesId: number): boolean;
      /**
       * Determines if a value reduction upgrade is available for the given species ID
       * @param speciesId The ID of the species to check the value reduction of
       * @returns true if the user has enough candies and all value reductions have not been unlocked already
       */
      isValueReductionAvailable(speciesId: number): boolean;
      /**
       * Determines if an same species egg can be baught for the given species ID
       * @param speciesId The ID of the species to check the value reduction of
       * @returns true if the user has enough candies
       */
      isSameSpeciesEggAvailable(speciesId: number): boolean;
      /**
       * Sets a bounce animation if enabled and the Pokemon has an upgrade
       * @param icon {@linkcode Phaser.GameObjects.GameObject} to animate
       * @param species {@linkcode PokemonSpecies} of the icon used to check for upgrades
       * @param startPaused Should this animation be paused after it is added?
       */
      setUpgradeAnimation(icon: Phaser.GameObjects.Sprite, species: PokeRogue.data.PokemonSpecies, startPaused?: boolean): void;
      /**
       * Sets the visibility of a Candy Upgrade Icon given an index
       * @param index The UI index of the icon within this generation container
       */
      setUpgradeIcon(index: number): void;
      /**
       * Processes an {@linkcode CandyUpgradeNotificationChangedEvent} sent when the corresponding setting changes
       * @param event {@linkcode Event} sent by the callback
       */
      onCandyUpgradeDisplayChanged(event: Event): void;
      processInput(button: PokeRogue.enums.Button): boolean;
      switchMoveHandler(i: number, newMove: PokeRogue.enums.Moves, move: PokeRogue.enums.Moves): void;
      updateButtonIcon(iconSetting: any, gamepadType: any, iconElement: any, controlLabel: any): void;
      updateInstructions(): void;
      getValueLimit(): integer;
      setCursor(cursor: integer): boolean;
      getGenCursorWithScroll(): integer;
      updateGenOptions(): void;
      setGenMode(genMode: boolean): boolean;
      setSpecies(species: PokeRogue.data.PokemonSpecies): void;
      setSpeciesDetails(species: PokeRogue.data.PokemonSpecies, shiny: boolean, formIndex: integer, female: boolean, variant: PokeRogue.data.Variant, abilityIndex: integer, natureIndex: integer, forSeen?: boolean): void;
      setTypeIcons(type1: PokeRogue.data.Type, type2: PokeRogue.data.Type): void;
      popStarter(): void;
      updateStarterValueLabel(cursor: integer): void;
      tryUpdateValue(add?: integer): boolean;
      tryStart(manualTrigger?: boolean): boolean;
      toggleStatsMode(on?: boolean): void;
      showStats(): void;
      clearText(): void;
      hideInstructions(): void;
      clear(): void;
      checkIconId(icon: Phaser.GameObjects.Sprite, species: PokeRogue.data.PokemonSpecies, female: any, formIndex: any, shiny: any, variant: any): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  export declare class StatsContainer extends Phaser.GameObjects.Container {
      public showDiff;
      public statsIvsCache;
      public ivChart;
      public ivStatValueTexts;
      constructor(scene: PokeRogue.BattleScene, x: number, y: number, showDiff?: boolean);
      setup(): void;
      updateIvs(ivs: integer[], originalIvs?: integer[]): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import UiHandler from "./ui-handler";
  //import Move from "../data/move";
  //import { Button } from "#enums/buttons";
  declare enum Page {
      PROFILE = 0,
      STATS = 1,
      MOVES = 2
  }
  export declare enum SummaryUiMode {
      DEFAULT = 0,
      LEARN_MOVE = 1
  }
  export class SummaryUiHandler extends PokeRogue.ui.UiHandler {
      public summaryUiMode;
      public summaryContainer;
      public tabSprite;
      public shinyOverlay;
      public numberText;
      public pokemonSprite;
      public nameText;
      public splicedIcon;
      public pokeball;
      public levelText;
      public genderText;
      public shinyIcon;
      public fusionShinyIcon;
      public candyShadow;
      public candyIcon;
      public candyOverlay;
      public candyCountText;
      public championRibbon;
      public statusContainer;
      public status;
      /** The pixel button prompt indicating a passive is unlocked */
      public abilityPrompt;
      /** Object holding everything needed to display an ability */
      public abilityContainer;
      /** Object holding everything needed to display a passive */
      public passiveContainer;
      public summaryPageContainer;
      public movesContainer;
      public moveDescriptionText;
      public moveCursorObj;
      public selectedMoveCursorObj;
      public moveRowsContainer;
      public extraMoveRowContainer;
      public moveEffectContainer;
      public movePowerText;
      public moveAccuracyText;
      public moveCategoryIcon;
      public summaryPageTransitionContainer;
      public descriptionScrollTween;
      public moveCursorBlinkTimer;
      public pokemon;
      public newMove;
      public moveSelectFunction;
      public transitioning;
      public statusVisible;
      public moveEffectsVisible;
      public moveSelect;
      public moveCursor;
      public selectedMoveIndex;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      getPageKey(page?: integer): string;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(cursor: integer, overrideChanged?: boolean): boolean;
      populatePageContainer(pageContainer: Phaser.GameObjects.Container, page?: Page): void;
      showStatus(instant?: boolean): void;
      hideStatus(instant?: boolean): void;
      getSelectedMove(): Move;
      showMoveSelect(): void;
      hideMoveSelect(): void;
      destroyBlinkCursor(): void;
      showMoveEffect(instant?: boolean): void;
      hideMoveEffect(instant?: boolean): void;
      clear(): void;
  }
  export {};
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import UiHandler from "./ui-handler";
  //import { Button } from "#enums/buttons";
  export type TargetSelectCallback = (cursor: integer) => void;
  export class TargetSelectUiHandler extends PokeRogue.ui.UiHandler {
      public fieldIndex;
      public move;
      public targetSelectCallback;
      public targets;
      public targetFlashTween;
      public targetBattleInfoMoveTween;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(cursor: integer): boolean;
      eraseCursor(): void;
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui {
  import BBCodeText from "phaser3-rex-plugins/plugins/gameobjects/tagtext/bbcodetext/BBCodeText";
  import InputText from "phaser3-rex-plugins/plugins/inputtext";
  //import { ModifierTier } from "../modifier/modifier-tier";
  import Phaser from "phaser";
  //import { EggTier } from "#enums/egg-type";
  //import { UiTheme } from "#enums/ui-theme";
  export declare enum TextStyle {
      MESSAGE = 0,
      WINDOW = 1,
      WINDOW_ALT = 2,
      BATTLE_INFO = 3,
      PARTY = 4,
      PARTY_RED = 5,
      SUMMARY = 6,
      SUMMARY_ALT = 7,
      SUMMARY_RED = 8,
      SUMMARY_BLUE = 9,
      SUMMARY_PINK = 10,
      SUMMARY_GOLD = 11,
      SUMMARY_GRAY = 12,
      SUMMARY_GREEN = 13,
      MONEY = 14,
      STATS_LABEL = 15,
      STATS_VALUE = 16,
      SETTINGS_LABEL = 17,
      SETTINGS_SELECTED = 18,
      SETTINGS_LOCKED = 19,
      TOOLTIP_TITLE = 20,
      TOOLTIP_CONTENT = 21,
      MOVE_INFO_CONTENT = 22,
      MOVE_PP_FULL = 23,
      MOVE_PP_HALF_FULL = 24,
      MOVE_PP_NEAR_EMPTY = 25,
      MOVE_PP_EMPTY = 26
  }
  export declare function addTextObject(scene: Phaser.Scene, x: number, y: number, content: string, style: TextStyle, extraStyleOptions?: Phaser.Types.GameObjects.Text.TextStyle): Phaser.GameObjects.Text;
  export declare function setTextStyle(obj: Phaser.GameObjects.Text, scene: Phaser.Scene, style: TextStyle, extraStyleOptions?: Phaser.Types.GameObjects.Text.TextStyle): void;
  export declare function addBBCodeTextObject(scene: Phaser.Scene, x: number, y: number, content: string, style: TextStyle, extraStyleOptions?: Phaser.Types.GameObjects.Text.TextStyle): BBCodeText;
  export declare function addTextInputObject(scene: Phaser.Scene, x: number, y: number, width: number, height: number, style: TextStyle, extraStyleOptions?: InputText.IConfig): InputText;
  export declare function getBBCodeFrag(content: string, textStyle: TextStyle, uiTheme?: UiTheme): string;
  export declare function getTextColor(textStyle: TextStyle, shadow?: boolean, uiTheme?: UiTheme): string;
  export declare function getModifierTierTextTint(tier: PokeRogue.modifier.ModifierTier): integer;
  export declare function getEggTierTextTint(tier: PokeRogue.enums.EggTier): integer;
  
}

declare namespace PokeRogue.ui {
  /** A small self contained UI element that displays the time of day as an icon */
  export class TimeOfDayWidget extends Phaser.GameObjects.Container {
      /** An alias for the scene typecast to a {@linkcode BattleScene} */
      public battleScene;
      /** The {@linkcode Phaser.GameObjects.Sprite} that represents the foreground of the current time of day */
      public readonly timeOfDayIconFgs;
      /** The {@linkcode Phaser.GameObjects.Sprite} that represents the middle-ground of the current time of day */
      public readonly timeOfDayIconMgs;
      /** The {@linkcode Phaser.GameObjects.Sprite} that represents the background of the current time of day */
      public readonly timeOfDayIconBgs;
      /** An array containing all timeOfDayIcon objects for easier iteration */
      public timeOfDayIcons;
      /** A map containing all timeOfDayIcon arrays with a matching string key for easier iteration */
      public timeOfDayIconPairs;
      /** The current time of day */
      public currentTime;
      /** The previous time of day */
      public previousTime;
      public readonly onEncounterPhaseEvent;
      public _parentVisible;
      /** Is the parent object visible? */
      get parentVisible(): boolean;
      /** On set, resumes any paused tweens if true */
      set parentVisible(visible: boolean);
      constructor(scene: Phaser.Scene, x?: number, y?: number);
      /**
       * Creates a tween animation based on the 'Back' ease algorithm
       * @returns an array of all tweens in the animation
       */
      public getBackTween;
      /**
       * Creates a tween animation based on the 'Bounce' ease algorithm
       * @returns an array of all tweens in the animation
       */
      public getBounceTween;
      /** Resets all icons to the proper depth, texture, and alpha so they are ready to tween */
      public resetIcons;
      /** Adds the proper tween for all icons */
      public tweenTimeOfDayIcon;
      /**
       * Grabs the current time of day from the arena and calls {@linkcode tweenTimeOfDayIcon}
       * @param event {@linkcode Event} being sent
       */
      public onEncounterPhase;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import OptionSelectUiHandler from "./settings/option-select-ui-handler";
  //import { Mode } from "./ui";
  export class TitleUiHandler extends PokeRogue.ui.settings.OptionSelectUiHandler {
      public titleContainer;
      public playerCountLabel;
      public splashMessage;
      public splashMessageText;
      public eventDisplay;
      public titleStatsTimer;
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      setup(): void;
      updateTitleStats(): void;
      show(args: any[]): boolean;
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { TextStyle } from "./text";
  //import { Mode } from "./ui";
  //import { Button } from "#enums/buttons";
  /**
   * A basic abstract class to act as a holder and processor for UI elements.
   */
  export abstract class UiHandler {
      protected scene: PokeRogue.BattleScene;
      protected mode: integer;
      protected cursor: integer;
      active: boolean;
      /**
       * @param {BattleScene} scene The same scene as everything else.
       * @param {Mode} mode The mode of the UI element. These should be unique.
       */
      constructor(scene: PokeRogue.BattleScene, mode: PokeRogue.ui.Mode);
      abstract setup(): void;
      show(_args: any[]): boolean;
      abstract processInput(button: PokeRogue.enums.Button): boolean;
      getUi(): import("./ui").default;
      getTextColor(style: PokeRogue.ui.TextStyle, shadow?: boolean): string;
      getCursor(): integer;
      setCursor(cursor: integer): boolean;
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  export declare enum WindowVariant {
      NORMAL = 0,
      THIN = 1,
      XTHIN = 2
  }
  export declare function getWindowVariantSuffix(windowVariant: WindowVariant): string;
  export declare function addWindow(scene: PokeRogue.BattleScene, x: number, y: number, width: number, height: number, mergeMaskTop?: boolean, mergeMaskLeft?: boolean, maskOffsetX?: number, maskOffsetY?: number, windowVariant?: WindowVariant): Phaser.GameObjects.NineSlice;
  export declare function updateWindowType(scene: PokeRogue.BattleScene, windowTypeIndex: integer): void;
  export declare function addUiThemeOverrides(scene: PokeRogue.BattleScene): void;
  
}

declare namespace PokeRogue.ui {
  //import { default as BattleScene } from "../battle-scene";
  //import UiHandler from "./ui-handler";
  //import BattleMessageUiHandler from "./battle-message-ui-handler";
  //import AchvBar from "./achv-bar";
  //import SavingIconHandler from "./saving-icon-handler";
  //import { Button } from "#enums/buttons";
  //import BgmBar from "#app/ui/bgm-bar";
  export declare enum Mode {
      MESSAGE = 0,
      TITLE = 1,
      COMMAND = 2,
      FIGHT = 3,
      BALL = 4,
      TARGET_SELECT = 5,
      MODIFIER_SELECT = 6,
      SAVE_SLOT = 7,
      PARTY = 8,
      SUMMARY = 9,
      STARTER_SELECT = 10,
      EVOLUTION_SCENE = 11,
      EGG_HATCH_SCENE = 12,
      CONFIRM = 13,
      OPTION_SELECT = 14,
      MENU = 15,
      MENU_OPTION_SELECT = 16,
      SETTINGS = 17,
      SETTINGS_DISPLAY = 18,
      SETTINGS_AUDIO = 19,
      SETTINGS_GAMEPAD = 20,
      GAMEPAD_BINDING = 21,
      SETTINGS_KEYBOARD = 22,
      KEYBOARD_BINDING = 23,
      ACHIEVEMENTS = 24,
      GAME_STATS = 25,
      VOUCHERS = 26,
      EGG_LIST = 27,
      EGG_GACHA = 28,
      LOGIN_FORM = 29,
      REGISTRATION_FORM = 30,
      LOADING = 31,
      SESSION_RELOAD = 32,
      UNAVAILABLE = 33,
      OUTDATED = 34,
      CHALLENGE_SELECT = 35
  }
  export class UI extends Phaser.GameObjects.Container {
      public mode;
      public modeChain;
      handlers: PokeRogue.ui.UiHandler[];
      public overlay;
      achvBar: PokeRogue.ui.AchvBar;
      bgmBar: PokeRogue.ui.BgmBar;
      savingIcon: PokeRogue.ui.SavingIconHandler;
      public tooltipContainer;
      public tooltipBg;
      public tooltipTitle;
      public tooltipContent;
      public overlayActive;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      public setupTooltip;
      getHandler(): UiHandler;
      getMessageHandler(): BattleMessageUiHandler;
      processInfoButton(pressed: boolean): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      showText(text: string, delay?: integer, callback?: Function, callbackDelay?: integer, prompt?: boolean, promptDelay?: integer): void;
      showDialogue(text: string, name: string, delay: integer, callback: Function, callbackDelay?: integer, promptDelay?: integer): void;
      shouldSkipDialogue(text: any): boolean;
      showTooltip(title: string, content: string, overlap?: boolean): void;
      hideTooltip(): void;
      update(): void;
      clearText(): void;
      setCursor(cursor: integer): boolean;
      playSelect(): void;
      playError(): void;
      fadeOut(duration: integer): Promise<void>;
      fadeIn(duration: integer): Promise<void>;
      public setModeInternal;
      getMode(): Mode;
      setMode(mode: Mode, ...args: any[]): Promise<void>;
      setModeForceTransition(mode: Mode, ...args: any[]): Promise<void>;
      setModeWithoutClear(mode: Mode, ...args: any[]): Promise<void>;
      setOverlayMode(mode: Mode, ...args: any[]): Promise<void>;
      revertMode(): Promise<boolean>;
      revertModes(): Promise<void>;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { ModalUiHandler } from "./modal-ui-handler";
  //import { Mode } from "./ui";
  export class UnavailableModalUiHandler extends PokeRogue.ui.ModalUiHandler {
      public reconnectTimer;
      public reconnectDuration;
      public reconnectCallback;
      public readonly minTime;
      public readonly maxTime;
      public readonly randVarianceTime;
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      getModalTitle(): string;
      getWidth(): number;
      getHeight(): number;
      getMargin(): [number, number, number, number];
      getButtonLabels(): string[];
      setup(): void;
      tryReconnect(): void;
      show(args: any[]): boolean;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { Button } from "#enums/buttons";
  //import { Voucher } from "../system/voucher";
  //import MessageUiHandler from "./message-ui-handler";
  //import { Mode } from "./ui";
  export class VouchersUiHandler extends PokeRogue.ui.MessageUiHandler {
      public vouchersContainer;
      public voucherIconsContainer;
      public voucherIconsBg;
      public voucherIcons;
      public titleText;
      public unlockText;
      public itemsTotal;
      public scrollCursor;
      public cursorObj;
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      setup(): void;
      show(args: any[]): boolean;
      protected showVoucher(voucher: PokeRogue.system.Voucher): void;
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(cursor: integer): boolean;
      setScrollCursor(scrollCursor: integer): boolean;
      updateVoucherIcons(): void;
      clear(): void;
      eraseCursor(): void;
  }
  
}

declare namespace PokeRogue {
  //import { InputsController } from "./inputs-controller";
  //import { Button } from "#enums/buttons";
  //import BattleScene from "./battle-scene";
  type ActionKeys = Record<Button, () => void>;
  export declare class UiInputs {
      public scene;
      public events;
      public inputsController;
      constructor(scene: PokeRogue.BattleScene, inputsController: PokeRogue.InputsController);
      init(): void;
      detectInputMethod(evt: any): void;
      listenInputs(): void;
      doVibration(inputSuccess: boolean, vibrationLength: number): void;
      getActionsKeyDown(): ActionKeys;
      getActionsKeyUp(): ActionKeys;
      buttonDirection(direction: PokeRogue.enums.Button): void;
      buttonAb(button: PokeRogue.enums.Button): void;
      buttonTouch(): void;
      buttonStats(pressed?: boolean): void;
      buttonInfo(pressed?: boolean): void;
      buttonMenu(): void;
      buttonCycleOption(button: PokeRogue.enums.Button): void;
      buttonSpeedChange(up?: boolean): void;
  }
  export {};
  
}

declare namespace PokeRogue {
  //import { MoneyFormat } from "#enums/money-format";
  export declare const MissingTextureKey = "__MISSING";
  export declare function toReadableString(str: string): string;
  export declare function randomString(length: integer, seeded?: boolean): string;
  export declare function shiftCharCodes(str: string, shiftCount: integer): string;
  export declare function clampInt(value: integer, min: integer, max: integer): integer;
  export declare function randGauss(stdev: number, mean?: number): number;
  export declare function randSeedGauss(stdev: number, mean?: number): number;
  export declare function padInt(value: integer, length: integer, padWith?: string): string;
  /**
  * Returns a random integer between min and min + range
  * @param range The amount of possible numbers
  * @param min The starting number
  */
  export declare function randInt(range: integer, min?: integer): integer;
  export declare function randSeedInt(range: integer, min?: integer): integer;
  /**
  * Returns a random integer between min and max (non-inclusive)
  * @param min The lowest number
  * @param max The highest number
  */
  export declare function randIntRange(min: integer, max: integer): integer;
  export declare function randItem<T>(items: T[]): T;
  export declare function randSeedItem<T>(items: T[]): T;
  export declare function randSeedWeightedItem<T>(items: T[]): T;
  export declare function randSeedEasedWeightedItem<T>(items: T[], easingFunction?: string): T;
  /**
   * Shuffle a list using the seeded rng. Utilises the Fisher-Yates algorithm.
   * @param {Array} items An array of items.
   * @returns {Array} A new shuffled array of items.
   */
  export declare function randSeedShuffle<T>(items: T[]): T[];
  export declare function getFrameMs(frameCount: integer): integer;
  export declare function getCurrentTime(): number;
  export declare function getPlayTimeString(totalSeconds: integer): string;
  export declare function binToDec(input: string): integer;
  export declare function decToBin(input: integer): string;
  export declare function getIvsFromId(id: integer): integer[];
  export declare function formatLargeNumber(count: integer, threshold: integer): string;
  export declare function formatFancyLargeNumber(number: number, rounded?: number): string;
  export declare function formatMoney(format: PokeRogue.enums.MoneyFormat, amount: number): string;
  export declare function formatStat(stat: integer, forHp?: boolean): string;
  export declare function getEnumKeys(enumType: any): string[];
  export declare function getEnumValues(enumType: any): integer[];
  export declare function executeIf<T>(condition: boolean, promiseFunc: () => Promise<T>): Promise<T>;
  export declare const sessionIdKey = "pokerogue_sessionId";
  export declare const isLocal: boolean;
  export declare const localServerUrl: string;
  export declare const serverUrl: string;
  export declare let apiUrl: string;
  export declare let isLocalServerConnected: boolean;
  export declare function setCookie(cName: string, cValue: string): void;
  export declare function getCookie(cName: string): string;
  /**
   * When locally running the game, "pings" the local server
   * with a GET request to verify if a server is running,
   * sets isLocalServerConnected based on results
   */
  export declare function localPing(): void;
  export declare function apiFetch(path: string, authed?: boolean): Promise<Response>;
  export declare function apiPost(path: string, data?: any, contentType?: string, authed?: boolean): Promise<Response>;
  /** Alias for the constructor of a class */
  export type Constructor<T> = new (...args: unknown[]) => T;
  export declare class BooleanHolder {
      value: boolean;
      constructor(value: boolean);
  }
  export declare class NumberHolder {
      value: number;
      constructor(value: number);
  }
  export declare class IntegerHolder extends NumberHolder {
      constructor(value: integer);
  }
  export declare class FixedInt extends IntegerHolder {
      constructor(value: integer);
  }
  export declare function fixedInt(value: integer): integer;
  /**
   * Formats a string to title case
   * @param unformattedText Text to be formatted
   * @returns the formatted string
   */
  export declare function formatText(unformattedText: string): string;
  export declare function rgbToHsv(r: integer, g: integer, b: integer): number[];
  /**
   * Compare color difference in RGB
   * @param {Array} rgb1 First RGB color in array
   * @param {Array} rgb2 Second RGB color in array
   */
  export declare function deltaRgb(rgb1: integer[], rgb2: integer[]): integer;
  export declare function rgbHexToRgba(hex: string): {
      r: number;
      g: number;
      b: number;
      a: number;
  };
  export declare function rgbaToInt(rgba: integer[]): integer;
  export declare function verifyLang(lang?: string): boolean;
  /**
   * Prints the type and name of all game objects in a container for debuggin purposes
   * @param container container with game objects inside it
   */
  export declare function printContainerList(container: Phaser.GameObjects.Container): void;
  /**
   * Truncate a string to a specified maximum length and add an ellipsis if it exceeds that length.
   *
   * @param str - The string to be truncated.
   * @param maxLength - The maximum length of the truncated string, defaults to 10.
   * @returns The truncated string with an ellipsis if it was longer than maxLength.
   */
  export declare function truncateString(str: String, maxLength?: number): string | String;
  /**
   * Perform a deep copy of an object.
   *
   * @param values - The object to be deep copied.
   * @returns A new object that is a deep copy of the input.
   */
  export declare function deepCopy(values: object): object;
  /**
   * Convert a space-separated string into a capitalized and underscored string.
   *
   * @param input - The string to be converted.
   * @returns The converted string with words capitalized and separated by underscores.
   */
  export declare function reverseValueToKeySetting(input: any): any;
  export declare function setApi(url: string): void;
  
}

declare namespace PokeRogue {
  export {};
  
}

