declare namespace PokeRogue.@types {
  //import BattleScene from "#app/battle-scene.js";
  export type ConditionFn = (scene: PokeRogue.BattleScene, args?: any[]) => boolean;
  
}

declare namespace PokeRogue {
  export interface UserInfo {
      username: string;
      lastSessionSlot: integer;
      discordId: string;
      googleId: string;
      hasAdminRole: boolean;
  }
  export declare let loggedInUser: UserInfo | null;
  export declare const clientSessionId: string;
  export declare function initLoggedInUser(): void;
  export declare function updateUserInfo(): Promise<[boolean, integer]>;
  
}

declare namespace PokeRogue {
  import Phaser from "phaser";
  //import UI from "./ui/ui";
  //import Pokemon, { PlayerPokemon, EnemyPokemon } from "./field/pokemon";
  //import PokemonSpecies, { PokemonSpeciesFilter } from "./data/pokemon-species";
  //import { Constructor } from "#app/utils";
  //import { Modifier, ModifierBar, PersistentModifier, PokemonHeldItemModifier, ModifierPredicate } from "./modifier/modifier";
  //import { Phase } from "./phase";
  //import { Arena, ArenaBase } from "./field/arena";
  //import { GameData } from "./system/game-data";
  //import AbilityBar from "./ui/ability-bar";
  //import Battle, { BattleType } from "./battle";
  //import { GameMode } from "./game-mode";
  //import FieldSpritePipeline from "./pipelines/field-sprite";
  //import SpritePipeline from "./pipelines/sprite";
  //import PartyExpBar from "./ui/party-exp-bar";
  //import { TrainerSlot } from "./data/trainer-config";
  //import Trainer from "./field/trainer";
  //import TrainerData from "./system/trainer-data";
  //import PokeballTray from "./ui/pokeball-tray";
  //import { Achv } from "./system/achv";
  //import { Voucher } from "./system/voucher";
  //import { Gender } from "./data/gender";
  import UIPlugin from "phaser3-rex-plugins/templates/ui/ui-plugin";
  //import PokemonData from "./system/pokemon-data";
  //import { Nature } from "./data/nature";
  //import { SpeciesFormChangeTrigger } from "./data/pokemon-forms";
  //import CharSprite from "./ui/char-sprite";
  //import DamageNumberHandler from "./field/damage-number-handler";
  //import PokemonInfoContainer from "./ui/pokemon-info-container";
  //import { SceneBase } from "./scene-base";
  //import CandyBar from "./ui/candy-bar";
  //import { Variant } from "./data/variant";
  //import { InputsController } from "./inputs-controller";
  //import { UiInputs } from "./ui-inputs";
  //import { ArenaFlyout } from "./ui/arena-flyout";
  //import { EaseType } from "#enums/ease-type";
  //import { Biome } from "#enums/biome";
  //import { ExpNotification } from "#enums/exp-notification";
  //import { MoneyFormat } from "#enums/money-format";
  //import { UiTheme } from "#enums/ui-theme";
  //import { TimedEventManager } from "#app/timed-event-manager.js";
  //import { MovePhase } from "./phases/move-phase";
  export declare const bypassLogin: boolean;
  export declare const startingWave: number;
  export declare let starterColors: StarterColors;
  interface StarterColors {
      [key: string]: [string, string];
  }
  export interface PokeballCounts {
      [pb: string]: integer;
  }
  export type AnySound = Phaser.Sound.WebAudioSound | Phaser.Sound.HTML5AudioSound | Phaser.Sound.NoAudioSound;
  export interface InfoToggle {
      toggleInfo(force?: boolean): void;
      isActive(): boolean;
  }
  export class BattleScene extends PokeRogue.SceneBase {
      rexUI: UIPlugin;
      inputController: PokeRogue.InputsController;
      uiInputs: PokeRogue.UiInputs;
      sessionPlayTime: integer | null;
      lastSavePlayTime: integer | null;
      masterVolume: number;
      bgmVolume: number;
      fieldVolume: number;
      seVolume: number;
      uiVolume: number;
      gameSpeed: integer;
      damageNumbersMode: integer;
      reroll: boolean;
      shopCursorTarget: number;
      showMovesetFlyout: boolean;
      showArenaFlyout: boolean;
      showTimeOfDayWidget: boolean;
      timeOfDayAnimation: PokeRogue.enums.EaseType;
      showLevelUpStats: boolean;
      enableTutorials: boolean;
      enableMoveInfo: boolean;
      enableRetries: boolean;
      hideIvs: boolean;
      /**
       * Determines the condition for a notification should be shown for Candy Upgrades
       * - 0 = 'Off'
       * - 1 = 'Passives Only'
       * - 2 = 'On'
       */
      candyUpgradeNotification: integer;
      /**
       * Determines what type of notification is used for Candy Upgrades
       * - 0 = 'Icon'
       * - 1 = 'Animation'
       */
      candyUpgradeDisplay: integer;
      moneyFormat: PokeRogue.enums.MoneyFormat;
      uiTheme: PokeRogue.enums.UiTheme;
      windowType: integer;
      experimentalSprites: boolean;
      musicPreference: integer;
      moveAnimations: boolean;
      expGainsSpeed: integer;
      skipSeenDialogues: boolean;
      /**
         * Defines the experience gain display mode.
         *
         * @remarks
         * The `expParty` can have several modes:
         * - `0` - Default: The normal experience gain display, nothing changed.
         * - `1` - Level Up Notification: Displays the level up in the small frame instead of a message.
         * - `2` - Skip: No level up frame nor message.
         *
         * Modes `1` and `2` are still compatible with stats display, level up, new move, etc.
         * @default 0 - Uses the default normal experience gain display.
         */
      expParty: PokeRogue.enums.ExpNotification;
      hpBarSpeed: integer;
      fusionPaletteSwaps: boolean;
      enableTouchControls: boolean;
      enableVibration: boolean;
      showBgmBar: boolean;
      /**
       * Determines the selected battle style.
       * - 0 = 'Switch'
       * - 1 = 'Set' - The option to switch the active pokemon at the start of a battle will not display.
       */
      battleStyle: integer;
      /**
      * Defines whether or not to show type effectiveness hints
      * - true: No hints
      * - false: Show hints for moves
       */
      typeHints: boolean;
      disableMenu: boolean;
      gameData: PokeRogue.system.GameData;
      sessionSlotId: integer;
      /** PhaseQueue: dequeue/remove the first element to get the next phase */
      phaseQueue: PokeRogue.Phase[];
      conditionalQueue: Array<[() => boolean, Phase]>;
      /** PhaseQueuePrepend: is a temp storage of what will be added to PhaseQueue */
      public phaseQueuePrepend;
      /** overrides default of inserting phases to end of phaseQueuePrepend array, useful or inserting Phases "out of order" */
      public phaseQueuePrependSpliceIndex;
      public nextCommandPhaseQueue;
      public currentPhase;
      public standbyPhase;
      field: Phaser.GameObjects.Container;
      fieldUI: Phaser.GameObjects.Container;
      charSprite: PokeRogue.ui.CharSprite;
      pbTray: PokeRogue.ui.PokeballTray;
      pbTrayEnemy: PokeRogue.ui.PokeballTray;
      abilityBar: PokeRogue.ui.AbilityBar;
      partyExpBar: PokeRogue.ui.PartyExpBar;
      candyBar: PokeRogue.ui.CandyBar;
      arenaBg: Phaser.GameObjects.Sprite;
      arenaBgTransition: Phaser.GameObjects.Sprite;
      arenaPlayer: PokeRogue.field.ArenaBase;
      arenaPlayerTransition: PokeRogue.field.ArenaBase;
      arenaEnemy: PokeRogue.field.ArenaBase;
      arenaNextEnemy: PokeRogue.field.ArenaBase;
      arena: PokeRogue.field.Arena;
      gameMode: PokeRogue.GameMode;
      score: integer;
      lockModifierTiers: boolean;
      trainer: Phaser.GameObjects.Sprite;
      lastEnemyTrainer: PokeRogue.field.Trainer | null;
      currentBattle: PokeRogue.Battle;
      pokeballCounts: PokeballCounts;
      money: integer;
      pokemonInfoContainer: PokeRogue.ui.PokemonInfoContainer;
      public party;
      /** Combined Biome and Wave count text */
      public biomeWaveText;
      public moneyText;
      public scoreText;
      public luckLabelText;
      public luckText;
      public modifierBar;
      public enemyModifierBar;
      arenaFlyout: PokeRogue.ui.ArenaFlyout;
      public fieldOverlay;
      public shopOverlay;
      public shopOverlayShown;
      public shopOverlayOpacity;
      modifiers: PokeRogue.modifier.PersistentModifier[];
      public enemyModifiers;
      uiContainer: Phaser.GameObjects.Container;
      ui: PokeRogue.ui.UI;
      seed: string;
      waveSeed: string;
      waveCycleOffset: integer;
      offsetGym: boolean;
      damageNumberHandler: PokeRogue.field.DamageNumberHandler;
      public spriteSparkleHandler;
      fieldSpritePipeline: PokeRogue.pipelines.FieldSpritePipeline;
      spritePipeline: PokeRogue.pipelines.SpritePipeline;
      public bgm;
      public bgmResumeTimer;
      public bgmCache;
      public playTimeTimer;
      rngCounter: integer;
      rngSeedOverride: string;
      rngOffset: integer;
      inputMethod: string;
      public infoToggles;
      eventManager: PokeRogue.TimedEventManager;
      /**
       * Allows subscribers to listen for events
       *
       * Current Events:
       * - {@linkcode BattleSceneEventType.MOVE_USED} {@linkcode MoveUsedEvent}
       * - {@linkcode BattleSceneEventType.TURN_INIT} {@linkcode TurnInitEvent}
       * - {@linkcode BattleSceneEventType.TURN_END} {@linkcode TurnEndEvent}
       * - {@linkcode BattleSceneEventType.NEW_ARENA} {@linkcode NewArenaEvent}
       */
      readonly eventTarget: EventTarget;
      constructor();
      loadPokemonAtlas(key: string, atlasPath: string, experimental?: boolean): void;
      preload(): Promise<void>;
      create(): void;
      update(): void;
      launchBattle(): void;
      initSession(): void;
      initExpSprites(): Promise<void>;
      initVariantData(): Promise<void>;
      cachedFetch(url: string, init?: RequestInit): Promise<Response>;
      initStarterColors(): Promise<void>;
      hasExpSprite(key: string): boolean;
      getParty(): PlayerPokemon[];
      getPlayerPokemon(): PlayerPokemon | undefined;
      /**
       * Returns an array of PlayerPokemon of length 1 or 2 depending on if double battles or not
       * @returns array of {@linkcode PlayerPokemon}
       */
      getPlayerField(): PlayerPokemon[];
      getEnemyParty(): EnemyPokemon[];
      getEnemyPokemon(): EnemyPokemon | undefined;
      /**
       * Returns an array of EnemyPokemon of length 1 or 2 depending on if double battles or not
       * @returns array of {@linkcode EnemyPokemon}
       */
      getEnemyField(): EnemyPokemon[];
      getField(activeOnly?: boolean): Pokemon[];
      /**
       * Used in doubles battles to redirect moves from one pokemon to another when one faints or is removed from the field
       * @param removedPokemon {@linkcode Pokemon} the pokemon that is being removed from the field (flee, faint), moves to be redirected FROM
       * @param allyPokemon {@linkcode Pokemon} the pokemon that will have the moves be redirected TO
       */
      redirectPokemonMoves(removedPokemon: PokeRogue.field.Pokemon, allyPokemon: PokeRogue.field.Pokemon): void;
      /**
       * Returns the ModifierBar of this scene, which is declared public and therefore not accessible elsewhere
       * @param isEnemy Whether to return the enemy's modifier bar
       * @returns {ModifierBar}
       */
      getModifierBar(isEnemy?: boolean): ModifierBar;
      addInfoToggle(infoToggle: InfoToggle): void;
      getInfoToggles(activeOnly?: boolean): InfoToggle[];
      getPokemonById(pokemonId: integer): Pokemon | null;
      addPlayerPokemon(species: PokeRogue.data.PokemonSpecies, level: integer, abilityIndex?: integer, formIndex?: integer, gender?: Gender, shiny?: boolean, variant?: Variant, ivs?: integer[], nature?: Nature, dataSource?: Pokemon | PokemonData, postProcess?: (playerPokemon: PokeRogue.field.PlayerPokemon) => void): PlayerPokemon;
      addEnemyPokemon(species: PokeRogue.data.PokemonSpecies, level: integer, trainerSlot: PokeRogue.data.TrainerSlot, boss?: boolean, dataSource?: PokemonData, postProcess?: (enemyPokemon: PokeRogue.field.EnemyPokemon) => void): EnemyPokemon;
      addPokemonIcon(pokemon: PokeRogue.field.Pokemon, x: number, y: number, originX?: number, originY?: number, ignoreOverride?: boolean): Phaser.GameObjects.Container;
      setSeed(seed: string): void;
      /**
       * Generates a random number using the current battle's seed
       *
       * This calls {@linkcode Battle.randSeedInt}(`scene`, {@linkcode range}, {@linkcode min}) in `src/battle.ts`
       * which calls {@linkcode Utils.randSeedInt randSeedInt}({@linkcode range}, {@linkcode min}) in `src/utils.ts`
       *
       * @param range How large of a range of random numbers to choose from. If {@linkcode range} <= 1, returns {@linkcode min}
       * @param min The minimum integer to pick, default `0`
       * @returns A random integer between {@linkcode min} and ({@linkcode min} + {@linkcode range} - 1)
       */
      randBattleSeedInt(range: integer, min?: integer): integer;
      reset(clearScene?: boolean, clearData?: boolean, reloadI18n?: boolean): void;
      newBattle(waveIndex?: integer, battleType?: BattleType, trainerData?: TrainerData, double?: boolean): Battle | null;
      newArena(biome: PokeRogue.enums.Biome): Arena;
      updateFieldScale(): Promise<void>;
      setFieldScale(scale: number, instant?: boolean): Promise<void>;
      getSpeciesFormIndex(species: PokeRogue.data.PokemonSpecies, gender?: Gender, nature?: Nature, ignoreArena?: boolean): integer;
      public getGeneratedOffsetGym;
      public getGeneratedWaveCycleOffset;
      getEncounterBossSegments(waveIndex: integer, level: integer, species?: PokemonSpecies, forceBoss?: boolean): integer;
      trySpreadPokerus(): void;
      resetSeed(waveIndex?: integer): void;
      executeWithSeedOffset(func: Function, offset: integer, seedOverride?: string): void;
      addFieldSprite(x: number, y: number, texture: string | Phaser.Textures.Texture, frame?: string | number, terrainColorRatio?: number): Phaser.GameObjects.Sprite;
      addPokemonSprite(pokemon: PokeRogue.field.Pokemon, x: number, y: number, texture: string | Phaser.Textures.Texture, frame?: string | number, hasShadow?: boolean, ignoreOverride?: boolean): Phaser.GameObjects.Sprite;
      initPokemonSprite(sprite: Phaser.GameObjects.Sprite, pokemon?: Pokemon, hasShadow?: boolean, ignoreOverride?: boolean): Phaser.GameObjects.Sprite;
      moveBelowOverlay<T extends Phaser.GameObjects.GameObject>(gameObject: T): void;
      processInfoButton(pressed: boolean): void;
      showFieldOverlay(duration: integer): Promise<void>;
      hideFieldOverlay(duration: integer): Promise<void>;
      updateShopOverlayOpacity(value: number): void;
      showShopOverlay(duration: integer): Promise<void>;
      hideShopOverlay(duration: integer): Promise<void>;
      showEnemyModifierBar(): void;
      hideEnemyModifierBar(): void;
      updateBiomeWaveText(): void;
      updateMoneyText(forceVisible?: boolean): void;
      animateMoneyChanged(positiveChange: boolean): void;
      updateScoreText(): void;
      updateAndShowText(duration: integer): void;
      hideLuckText(duration: integer): void;
      updateUIPositions(): void;
      /**
       * Pushes all {@linkcode Phaser.GameObjects.Text} objects in the top right to the bottom of the canvas
       */
      sendTextToBack(): void;
      addFaintedEnemyScore(enemy: PokeRogue.field.EnemyPokemon): void;
      getMaxExpLevel(ignoreLevelCap?: boolean): integer;
      randomSpecies(waveIndex: integer, level: integer, fromArenaPool?: boolean, speciesFilter?: PokemonSpeciesFilter, filterAllEvolutions?: boolean): PokemonSpecies;
      generateRandomBiome(waveIndex: integer): Biome;
      isBgmPlaying(): boolean;
      playBgm(bgmName?: string, fadeOut?: boolean): void;
      pauseBgm(): boolean;
      resumeBgm(): boolean;
      updateSoundVolume(): void;
      fadeOutBgm(duration?: integer, destroy?: boolean): boolean;
      playSound(sound: string | AnySound, config?: object): AnySound;
      playSoundWithoutBgm(soundName: string, pauseDuration?: integer): AnySound;
      getBgmLoopPoint(bgmName: string): number;
      toggleInvert(invert: boolean): void;
      getCurrentPhase(): Phase | null;
      getStandbyPhase(): Phase | null;
      /**
       * Adds a phase to the conditional queue and ensures it is executed only when the specified condition is met.
       *
       * This method allows deferring the execution of a phase until certain conditions are met, which is useful for handling
       * situations like abilities and entry hazards that depend on specific game states.
       *
       * @param {Phase} phase - The phase to be added to the conditional queue.
       * @param {() => boolean} condition - A function that returns a boolean indicating whether the phase should be executed.
       *
       */
      pushConditionalPhase(phase: PokeRogue.Phase, condition: () => boolean): void;
      /**
       * Adds a phase to nextCommandPhaseQueue, as long as boolean passed in is false
       * @param phase {@linkcode Phase} the phase to add
       * @param defer boolean on which queue to add to, defaults to false, and adds to phaseQueue
       */
      pushPhase(phase: PokeRogue.Phase, defer?: boolean): void;
      /**
       * Adds Phase to the end of phaseQueuePrepend, or at phaseQueuePrependSpliceIndex
       * @param phase {@linkcode Phase} the phase to add
       */
      unshiftPhase(phase: PokeRogue.Phase): void;
      /**
       * Clears the phaseQueue
       */
      clearPhaseQueue(): void;
      /**
       * Used by function unshiftPhase(), sets index to start inserting at current length instead of the end of the array, useful if phaseQueuePrepend gets longer with Phases
       */
      setPhaseQueueSplice(): void;
      /**
       * Resets phaseQueuePrependSpliceIndex to -1, implies that calls to unshiftPhase will insert at end of phaseQueuePrepend
       */
      clearPhaseQueueSplice(): void;
      /**
       * Is called by each Phase implementations "end()" by default
       * We dump everything from phaseQueuePrepend to the start of of phaseQueue
       * then removes first Phase and starts it
       */
      shiftPhase(): void;
      overridePhase(phase: PokeRogue.Phase): boolean;
      findPhase(phaseFilter: (phase: PokeRogue.Phase) => boolean): Phase | undefined;
      tryReplacePhase(phaseFilter: (phase: PokeRogue.Phase) => boolean, phase: PokeRogue.Phase): boolean;
      tryRemovePhase(phaseFilter: (phase: PokeRogue.Phase) => boolean): boolean;
      pushMovePhase(movePhase: PokeRogue.phases.MovePhase, priorityOverride?: integer): void;
      /**
       * Tries to add the input phase to index before target phase in the phaseQueue, else simply calls unshiftPhase()
       * @param phase {@linkcode Phase} the phase to be added
       * @param targetPhase {@linkcode Phase} the type of phase to search for in phaseQueue
       * @returns boolean if a targetPhase was found and added
       */
      prependToPhase(phase: PokeRogue.Phase, targetPhase: PokeRogue.Constructor<Phase>): boolean;
      /**
       * Adds a MessagePhase, either to PhaseQueuePrepend or nextCommandPhaseQueue
       * @param message string for MessagePhase
       * @param callbackDelay optional param for MessagePhase constructor
       * @param prompt optional param for MessagePhase constructor
       * @param promptDelay optional param for MessagePhase constructor
       * @param defer boolean for which queue to add it to, false -> add to PhaseQueuePrepend, true -> nextCommandPhaseQueue
       */
      queueMessage(message: string, callbackDelay?: integer | null, prompt?: boolean | null, promptDelay?: integer | null, defer?: boolean | null): void;
      /**
       * Moves everything from nextCommandPhaseQueue to phaseQueue (keeping order)
       */
      populatePhaseQueue(): void;
      addMoney(amount: integer): void;
      getWaveMoneyAmount(moneyMultiplier: number): integer;
      addModifier(modifier: PokeRogue.modifier.Modifier | null, ignoreUpdate?: boolean, playSound?: boolean, virtual?: boolean, instant?: boolean): Promise<boolean>;
      addEnemyModifier(modifier: PokeRogue.modifier.PersistentModifier, ignoreUpdate?: boolean, instant?: boolean): Promise<void>;
      /**
       * Try to transfer a held item to another pokemon.
       * If the recepient already has the maximum amount allowed for this item, the transfer is cancelled.
       * The quantity to transfer is automatically capped at how much the recepient can take before reaching the maximum stack size for the item.
       * A transfer that moves a quantity smaller than what is specified in the transferQuantity parameter is still considered successful.
       * @param itemModifier {@linkcode PokemonHeldItemModifier} item to transfer (represents the whole stack)
       * @param target {@linkcode Pokemon} pokemon recepient in this transfer
       * @param playSound {boolean}
       * @param transferQuantity {@linkcode integer} how many items of the stack to transfer. Optional, defaults to 1
       * @param instant {boolean}
       * @param ignoreUpdate {boolean}
       * @returns true if the transfer was successful
       */
      tryTransferHeldItemModifier(itemModifier: PokeRogue.modifier.PokemonHeldItemModifier, target: PokeRogue.field.Pokemon, playSound: boolean, transferQuantity?: integer, instant?: boolean, ignoreUpdate?: boolean): Promise<boolean>;
      removePartyMemberModifiers(partyMemberIndex: integer): Promise<void>;
      generateEnemyModifiers(): Promise<void>;
      /**
        * Removes all modifiers from enemy of PersistentModifier type
        */
      clearEnemyModifiers(): void;
      /**
        * Removes all modifiers from enemy of PokemonHeldItemModifier type
        */
      clearEnemyHeldItemModifiers(): void;
      setModifiersVisible(visible: boolean): void;
      updateModifiers(player?: boolean, instant?: boolean): Promise<void>;
      updatePartyForModifiers(party: PokeRogue.field.Pokemon[], instant?: boolean): Promise<void>;
      removeModifier(modifier: PokeRogue.modifier.PersistentModifier, enemy?: boolean): boolean;
      /**
       * Get all of the modifiers that match `modifierType`
       * @param modifierType The type of modifier to apply; must extend {@linkcode PersistentModifier}
       * @param player Whether to search the player (`true`) or the enemy (`false`); Defaults to `true`
       * @returns the list of all modifiers that matched `modifierType`.
       */
      getModifiers<T extends PokeRogue.modifier.PersistentModifier>(modifierType: PokeRogue.Constructor<T>, player?: boolean): T[];
      findModifiers(modifierFilter: PokeRogue.modifier.ModifierPredicate, player?: boolean): PersistentModifier[];
      findModifier(modifierFilter: PokeRogue.modifier.ModifierPredicate, player?: boolean): PersistentModifier | undefined;
      applyShuffledModifiers(scene: BattleScene, modifierType: PokeRogue.Constructor<Modifier>, player?: boolean, ...args: any[]): PersistentModifier[];
      applyModifiers(modifierType: PokeRogue.Constructor<Modifier>, player?: boolean, ...args: any[]): PersistentModifier[];
      applyModifiersInternal(modifiers: PokeRogue.modifier.PersistentModifier[], player: boolean, args: any[]): PersistentModifier[];
      applyModifier(modifierType: PokeRogue.Constructor<Modifier>, player?: boolean, ...args: any[]): PersistentModifier | null;
      triggerPokemonFormChange(pokemon: PokeRogue.field.Pokemon, formChangeTriggerType: PokeRogue.Constructor<SpeciesFormChangeTrigger>, delayed?: boolean, modal?: boolean): boolean;
      validateAchvs(achvType: PokeRogue.Constructor<Achv>, ...args: unknown[]): void;
      validateAchv(achv: PokeRogue.system.Achv, args?: any[]): boolean;
      validateVoucher(voucher: PokeRogue.system.Voucher, args?: any[]): boolean;
      updateGameInfo(): void;
      /**
       * This function retrieves the sprite and audio keys for active Pokemon.
       * Active Pokemon include both enemy and player Pokemon of the current wave.
       * Note: Questions on garbage collection go to @frutescens
       * @returns a string array of active sprite and audio keys that should not be deleted
       */
      getActiveKeys(): string[];
      /**
       * Initialized the 2nd phase of the final boss (e.g. form-change for Eternatus)
       * @param pokemon The (enemy) pokemon
       */
      initFinalBossPhaseTwo(pokemon: PokeRogue.field.Pokemon): void;
  }
  export {};
  
}

declare namespace PokeRogue {
  //import BattleScene from "./battle-scene";
  //import { EnemyPokemon, PlayerPokemon, QueuedMove } from "./field/pokemon";
  //import { Command } from "./ui/command-ui-handler";
  //import Trainer from "./field/trainer";
  //import { GameMode } from "./game-mode";
  //import { PokemonHeldItemModifier } from "./modifier/modifier";
  //import { PokeballType } from "./data/pokeball";
  //import { BattleSpec } from "#enums/battle-spec";
  //import { Moves } from "#enums/moves";
  export declare enum BattleType {
      WILD = 0,
      TRAINER = 1,
      CLEAR = 2
  }
  export declare enum BattlerIndex {
      ATTACKER = -1,
      PLAYER = 0,
      PLAYER_2 = 1,
      ENEMY = 2,
      ENEMY_2 = 3
  }
  export interface TurnCommand {
      command: PokeRogue.ui.Command;
      cursor?: number;
      move?: QueuedMove;
      targets?: BattlerIndex[];
      skip?: boolean;
      args?: any[];
  }
  interface TurnCommands {
      [key: number]: TurnCommand | null;
  }
  export class Battle {
      protected gameMode: PokeRogue.GameMode;
      waveIndex: number;
      battleType: BattleType;
      battleSpec: PokeRogue.enums.BattleSpec;
      trainer: PokeRogue.field.Trainer | null;
      enemyLevels: number[] | undefined;
      enemyParty: PokeRogue.field.EnemyPokemon[];
      seenEnemyPartyMemberIds: Set<number>;
      double: boolean;
      started: boolean;
      enemySwitchCounter: number;
      turn: number;
      turnCommands: TurnCommands;
      playerParticipantIds: Set<number>;
      battleScore: number;
      postBattleLoot: PokeRogue.modifier.PokemonHeldItemModifier[];
      escapeAttempts: number;
      lastMove: PokeRogue.enums.Moves;
      battleSeed: string;
      public battleSeedState;
      moneyScattered: number;
      lastUsedPokeball: PokeRogue.data.PokeballType | null;
      /** The number of times a Pokemon on the player's side has fainted this battle */
      playerFaints: number;
      /** The number of times a Pokemon on the enemy's side has fainted this battle */
      enemyFaints: number;
      public rngCounter;
      constructor(gameMode: PokeRogue.GameMode, waveIndex: number, battleType: BattleType, trainer?: Trainer, double?: boolean);
      public initBattleSpec;
      public getLevelForWave;
      randSeedGaussForLevel(value: number): number;
      getBattlerCount(): number;
      incrementTurn(scene: PokeRogue.BattleScene): void;
      addParticipant(playerPokemon: PokeRogue.field.PlayerPokemon): void;
      removeFaintedParticipant(playerPokemon: PokeRogue.field.PlayerPokemon): void;
      addPostBattleLoot(enemyPokemon: PokeRogue.field.EnemyPokemon): void;
      pickUpScatteredMoney(scene: PokeRogue.BattleScene): void;
      addBattleScore(scene: PokeRogue.BattleScene): void;
      getBgmOverride(scene: PokeRogue.BattleScene): string | null;
      /**
       * Generates a random number using the current battle's seed. Calls {@linkcode Utils.randSeedInt}
       * @param range How large of a range of random numbers to choose from. If {@linkcode range} <= 1, returns {@linkcode min}
       * @param min The minimum integer to pick, default `0`
       * @returns A random integer between {@linkcode min} and ({@linkcode min} + {@linkcode range} - 1)
       */
      randSeedInt(scene: PokeRogue.BattleScene, range: number, min?: number): number;
  }
  export declare class FixedBattle extends Battle {
      constructor(scene: PokeRogue.BattleScene, waveIndex: number, config: FixedBattleConfig);
  }
  type GetTrainerFunc = (scene: PokeRogue.BattleScene) => Trainer;
  type GetEnemyPartyFunc = (scene: PokeRogue.BattleScene) => EnemyPokemon[];
  export declare class FixedBattleConfig {
      battleType: BattleType;
      double: boolean;
      getTrainer: GetTrainerFunc;
      getEnemyParty: GetEnemyPartyFunc;
      seedOffsetWaveIndex: number;
      setBattleType(battleType: BattleType): FixedBattleConfig;
      setDouble(double: boolean): FixedBattleConfig;
      setGetTrainerFunc(getTrainerFunc: GetTrainerFunc): FixedBattleConfig;
      setGetEnemyPartyFunc(getEnemyPartyFunc: GetEnemyPartyFunc): FixedBattleConfig;
      setSeedOffsetWave(seedOffsetWaveIndex: number): FixedBattleConfig;
  }
  export interface FixedBattleConfigs {
      [key: number]: FixedBattleConfig;
  }
  /**
   * Youngster/Lass on 5
   * Rival on 8, 55, 95, 145, 195
   * Evil team grunts on 35, 62, 64, and 112
   * Evil team admin on 66 and 114
   * Evil leader on 115, 165
   * E4 on 182, 184, 186, 188
   * Champion on 190
   */
  export declare const classicFixedBattles: FixedBattleConfigs;
  export {};
  
}

declare namespace PokeRogue.configs.inputs {
  //import { Button } from "#enums/buttons";
  //import { SettingKeyboard } from "#app/system/settings/settings-keyboard";
  declare const cfg_keyboard_qwerty: {
      padID: string;
      padType: string;
      deviceMapping: {
          KEY_A: number;
          KEY_B: number;
          KEY_C: number;
          KEY_D: number;
          KEY_E: number;
          KEY_F: number;
          KEY_G: number;
          KEY_H: number;
          KEY_I: number;
          KEY_J: number;
          KEY_K: number;
          KEY_L: number;
          KEY_M: number;
          KEY_N: number;
          KEY_O: number;
          KEY_P: number;
          KEY_Q: number;
          KEY_R: number;
          KEY_S: number;
          KEY_T: number;
          KEY_U: number;
          KEY_V: number;
          KEY_W: number;
          KEY_X: number;
          KEY_Y: number;
          KEY_Z: number;
          KEY_0: number;
          KEY_1: number;
          KEY_2: number;
          KEY_3: number;
          KEY_4: number;
          KEY_5: number;
          KEY_6: number;
          KEY_7: number;
          KEY_8: number;
          KEY_9: number;
          KEY_CTRL: number;
          KEY_DEL: number;
          KEY_END: number;
          KEY_ENTER: number;
          KEY_ESC: number;
          KEY_F1: number;
          KEY_F2: number;
          KEY_F3: number;
          KEY_F4: number;
          KEY_F5: number;
          KEY_F6: number;
          KEY_F7: number;
          KEY_F8: number;
          KEY_F9: number;
          KEY_F10: number;
          KEY_F11: number;
          KEY_F12: number;
          KEY_HOME: number;
          KEY_INSERT: number;
          KEY_PAGE_DOWN: number;
          KEY_PAGE_UP: number;
          KEY_PLUS: number;
          KEY_MINUS: number;
          KEY_QUOTATION: number;
          KEY_SHIFT: number;
          KEY_SPACE: number;
          KEY_TAB: number;
          KEY_TILDE: number;
          KEY_ARROW_UP: number;
          KEY_ARROW_DOWN: number;
          KEY_ARROW_LEFT: number;
          KEY_ARROW_RIGHT: number;
          KEY_LEFT_BRACKET: number;
          KEY_RIGHT_BRACKET: number;
          KEY_SEMICOLON: number;
          KEY_BACKSPACE: number;
          KEY_ALT: number;
      };
      icons: {
          KEY_A: string;
          KEY_B: string;
          KEY_C: string;
          KEY_D: string;
          KEY_E: string;
          KEY_F: string;
          KEY_G: string;
          KEY_H: string;
          KEY_I: string;
          KEY_J: string;
          KEY_K: string;
          KEY_L: string;
          KEY_M: string;
          KEY_N: string;
          KEY_O: string;
          KEY_P: string;
          KEY_Q: string;
          KEY_R: string;
          KEY_S: string;
          KEY_T: string;
          KEY_U: string;
          KEY_V: string;
          KEY_W: string;
          KEY_X: string;
          KEY_Y: string;
          KEY_Z: string;
          KEY_0: string;
          KEY_1: string;
          KEY_2: string;
          KEY_3: string;
          KEY_4: string;
          KEY_5: string;
          KEY_6: string;
          KEY_7: string;
          KEY_8: string;
          KEY_9: string;
          KEY_F1: string;
          KEY_F2: string;
          KEY_F3: string;
          KEY_F4: string;
          KEY_F5: string;
          KEY_F6: string;
          KEY_F7: string;
          KEY_F8: string;
          KEY_F9: string;
          KEY_F10: string;
          KEY_F11: string;
          KEY_F12: string;
          KEY_PAGE_DOWN: string;
          KEY_PAGE_UP: string;
          KEY_CTRL: string;
          KEY_DEL: string;
          KEY_END: string;
          KEY_ENTER: string;
          KEY_ESC: string;
          KEY_HOME: string;
          KEY_INSERT: string;
          KEY_PLUS: string;
          KEY_MINUS: string;
          KEY_QUOTATION: string;
          KEY_SHIFT: string;
          KEY_SPACE: string;
          KEY_TAB: string;
          KEY_TILDE: string;
          KEY_ARROW_UP: string;
          KEY_ARROW_DOWN: string;
          KEY_ARROW_LEFT: string;
          KEY_ARROW_RIGHT: string;
          KEY_LEFT_BRACKET: string;
          KEY_RIGHT_BRACKET: string;
          KEY_SEMICOLON: string;
          KEY_BACKSPACE: string;
          KEY_ALT: string;
      };
      settings: {
          BUTTON_UP: PokeRogue.enums.Button;
          BUTTON_DOWN: PokeRogue.enums.Button;
          BUTTON_LEFT: PokeRogue.enums.Button;
          BUTTON_RIGHT: PokeRogue.enums.Button;
          BUTTON_SUBMIT: PokeRogue.enums.Button;
          BUTTON_ACTION: PokeRogue.enums.Button;
          BUTTON_CANCEL: PokeRogue.enums.Button;
          BUTTON_MENU: PokeRogue.enums.Button;
          BUTTON_STATS: PokeRogue.enums.Button;
          BUTTON_CYCLE_SHINY: PokeRogue.enums.Button;
          BUTTON_CYCLE_FORM: PokeRogue.enums.Button;
          BUTTON_CYCLE_GENDER: PokeRogue.enums.Button;
          BUTTON_CYCLE_ABILITY: PokeRogue.enums.Button;
          BUTTON_CYCLE_NATURE: PokeRogue.enums.Button;
          BUTTON_CYCLE_VARIANT: PokeRogue.enums.Button;
          BUTTON_SPEED_UP: PokeRogue.enums.Button;
          BUTTON_SLOW_DOWN: PokeRogue.enums.Button;
          ALT_BUTTON_UP: PokeRogue.enums.Button;
          ALT_BUTTON_DOWN: PokeRogue.enums.Button;
          ALT_BUTTON_LEFT: PokeRogue.enums.Button;
          ALT_BUTTON_RIGHT: PokeRogue.enums.Button;
          ALT_BUTTON_SUBMIT: PokeRogue.enums.Button;
          ALT_BUTTON_ACTION: PokeRogue.enums.Button;
          ALT_BUTTON_CANCEL: PokeRogue.enums.Button;
          ALT_BUTTON_MENU: PokeRogue.enums.Button;
          ALT_BUTTON_STATS: PokeRogue.enums.Button;
          ALT_BUTTON_CYCLE_SHINY: PokeRogue.enums.Button;
          ALT_BUTTON_CYCLE_FORM: PokeRogue.enums.Button;
          ALT_BUTTON_CYCLE_GENDER: PokeRogue.enums.Button;
          ALT_BUTTON_CYCLE_ABILITY: PokeRogue.enums.Button;
          ALT_BUTTON_CYCLE_NATURE: PokeRogue.enums.Button;
          ALT_BUTTON_CYCLE_VARIANT: PokeRogue.enums.Button;
          ALT_BUTTON_SPEED_UP: PokeRogue.enums.Button;
          ALT_BUTTON_SLOW_DOWN: PokeRogue.enums.Button;
      };
      default: {
          KEY_ARROW_UP: PokeRogue.system.settings.SettingKeyboard;
          KEY_ARROW_DOWN: PokeRogue.system.settings.SettingKeyboard;
          KEY_ARROW_LEFT: PokeRogue.system.settings.SettingKeyboard;
          KEY_ARROW_RIGHT: PokeRogue.system.settings.SettingKeyboard;
          KEY_ENTER: PokeRogue.system.settings.SettingKeyboard;
          KEY_SPACE: PokeRogue.system.settings.SettingKeyboard;
          KEY_BACKSPACE: PokeRogue.system.settings.SettingKeyboard;
          KEY_ESC: PokeRogue.system.settings.SettingKeyboard;
          KEY_C: PokeRogue.system.settings.SettingKeyboard;
          KEY_R: PokeRogue.system.settings.SettingKeyboard;
          KEY_F: PokeRogue.system.settings.SettingKeyboard;
          KEY_G: PokeRogue.system.settings.SettingKeyboard;
          KEY_E: PokeRogue.system.settings.SettingKeyboard;
          KEY_N: PokeRogue.system.settings.SettingKeyboard;
          KEY_V: PokeRogue.system.settings.SettingKeyboard;
          KEY_PLUS: number;
          KEY_MINUS: number;
          KEY_A: PokeRogue.system.settings.SettingKeyboard;
          KEY_B: number;
          KEY_D: PokeRogue.system.settings.SettingKeyboard;
          KEY_H: number;
          KEY_I: number;
          KEY_J: number;
          KEY_K: number;
          KEY_L: number;
          KEY_M: PokeRogue.system.settings.SettingKeyboard;
          KEY_O: number;
          KEY_P: number;
          KEY_Q: number;
          KEY_S: PokeRogue.system.settings.SettingKeyboard;
          KEY_T: PokeRogue.system.settings.SettingKeyboard;
          KEY_U: number;
          KEY_W: PokeRogue.system.settings.SettingKeyboard;
          KEY_X: PokeRogue.system.settings.SettingKeyboard;
          KEY_Y: PokeRogue.system.settings.SettingKeyboard;
          KEY_Z: PokeRogue.system.settings.SettingKeyboard;
          KEY_0: number;
          KEY_1: number;
          KEY_2: number;
          KEY_3: number;
          KEY_4: number;
          KEY_5: number;
          KEY_6: number;
          KEY_7: number;
          KEY_8: number;
          KEY_9: number;
          KEY_CTRL: number;
          KEY_DEL: number;
          KEY_END: number;
          KEY_F1: number;
          KEY_F2: number;
          KEY_F3: number;
          KEY_F4: number;
          KEY_F5: number;
          KEY_F6: number;
          KEY_F7: number;
          KEY_F8: number;
          KEY_F9: number;
          KEY_F10: number;
          KEY_F11: number;
          KEY_F12: number;
          KEY_HOME: number;
          KEY_INSERT: number;
          KEY_PAGE_DOWN: PokeRogue.system.settings.SettingKeyboard;
          KEY_PAGE_UP: PokeRogue.system.settings.SettingKeyboard;
          KEY_QUOTATION: number;
          KEY_SHIFT: PokeRogue.system.settings.SettingKeyboard;
          KEY_TAB: number;
          KEY_TILDE: number;
          KEY_LEFT_BRACKET: number;
          KEY_RIGHT_BRACKET: number;
          KEY_SEMICOLON: number;
          KEY_ALT: number;
      };
      blacklist: string[];
  };

}

declare namespace PokeRogue.configs.inputs {
  /**
   * Retrieves the key associated with the specified keycode from the mapping.
   *
   * @param config - The configuration object containing the mapping.
   * @param keycode - The keycode to search for.
   * @returns The key associated with the specified keycode.
   */
  export declare function getKeyWithKeycode(config: any, keycode: any): string;
  /**
   * Retrieves the setting name associated with the specified keycode.
   *
   * @param config - The configuration object containing custom settings.
   * @param keycode - The keycode to search for.
   * @returns The setting name associated with the specified keycode.
   */
  export declare function getSettingNameWithKeycode(config: any, keycode: any): any;
  /**
   * Retrieves the icon associated with the specified keycode.
   *
   * @param config - The configuration object containing icons.
   * @param keycode - The keycode to search for.
   * @returns The icon associated with the specified keycode.
   */
  export declare function getIconWithKeycode(config: any, keycode: any): any;
  /**
   * Retrieves the button associated with the specified keycode.
   *
   * @param config - The configuration object containing settings.
   * @param keycode - The keycode to search for.
   * @returns The button associated with the specified keycode.
   */
  export declare function getButtonWithKeycode(config: any, keycode: any): any;
  /**
   * Retrieves the key associated with the specified setting name.
   *
   * @param config - The configuration object containing custom settings.
   * @param settingName - The setting name to search for.
   * @returns The key associated with the specified setting name.
   */
  export declare function getKeyWithSettingName(config: any, settingName: any): string;
  /**
   * Retrieves the setting name associated with the specified key.
   *
   * @param config - The configuration object containing custom settings.
   * @param key - The key to search for.
   * @returns The setting name associated with the specified key.
   */
  export declare function getSettingNameWithKey(config: any, key: any): any;
  /**
   * Retrieves the icon associated with the specified key.
   *
   * @param config - The configuration object containing icons.
   * @param key - The key to search for.
   * @returns The icon associated with the specified key.
   */
  export declare function getIconWithKey(config: any, key: any): any;
  /**
   * Retrieves the icon associated with the specified setting name.
   *
   * @param config - The configuration object containing icons.
   * @param settingName - The setting name to search for.
   * @returns The icon associated with the specified setting name.
   */
  export declare function getIconWithSettingName(config: any, settingName: any): any;
  export declare function getIconForLatestInput(configs: any, source: any, devices: any, settingName: any): any;
  export declare function assign(config: any, settingNameTarget: any, keycode: any): boolean;
  export declare function swap(config: any, settingNameTarget: any, keycode: any): boolean;
  /**
   * Deletes the binding of the specified setting name.
   *
   * @param config - The configuration object containing custom settings.
   * @param settingName - The setting name to delete.
   */
  export declare function deleteBind(config: any, settingName: any): boolean;
  export declare function canIAssignThisKey(config: any, key: any): boolean;
  export declare function canIOverrideThisSetting(config: any, settingName: any): boolean;
  export declare function canIDeleteThisKey(config: any, key: any): boolean;
  
}

declare namespace PokeRogue.configs.inputs {
  //import { SettingGamepad } from "../../system/settings/settings-gamepad";
  //import { Button } from "#enums/buttons";
  /**
   * Dualshock mapping
   */
  declare const pad_dualshock: {
      padID: string;
      padType: string;
      deviceMapping: {
          RC_S: number;
          RC_E: number;
          RC_W: number;
          RC_N: number;
          START: number;
          SELECT: number;
          LB: number;
          RB: number;
          LT: number;
          RT: number;
          LS: number;
          RS: number;
          LC_N: number;
          LC_S: number;
          LC_W: number;
          LC_E: number;
          TOUCH: number;
      };
      icons: {
          RC_S: string;
          RC_E: string;
          RC_W: string;
          RC_N: string;
          START: string;
          SELECT: string;
          LB: string;
          RB: string;
          LT: string;
          RT: string;
          LS: string;
          RS: string;
          LC_N: string;
          LC_S: string;
          LC_W: string;
          LC_E: string;
          TOUCH: string;
      };
      settings: {
          BUTTON_UP: PokeRogue.enums.Button;
          BUTTON_DOWN: PokeRogue.enums.Button;
          BUTTON_LEFT: PokeRogue.enums.Button;
          BUTTON_RIGHT: PokeRogue.enums.Button;
          BUTTON_ACTION: PokeRogue.enums.Button;
          BUTTON_CANCEL: PokeRogue.enums.Button;
          BUTTON_CYCLE_NATURE: PokeRogue.enums.Button;
          BUTTON_CYCLE_VARIANT: PokeRogue.enums.Button;
          BUTTON_MENU: PokeRogue.enums.Button;
          BUTTON_STATS: PokeRogue.enums.Button;
          BUTTON_CYCLE_FORM: PokeRogue.enums.Button;
          BUTTON_CYCLE_SHINY: PokeRogue.enums.Button;
          BUTTON_CYCLE_GENDER: PokeRogue.enums.Button;
          BUTTON_CYCLE_ABILITY: PokeRogue.enums.Button;
          BUTTON_SPEED_UP: PokeRogue.enums.Button;
          BUTTON_SLOW_DOWN: PokeRogue.enums.Button;
          BUTTON_SUBMIT: PokeRogue.enums.Button;
      };
      default: {
          LC_N: PokeRogue.system.settings.SettingGamepad;
          LC_S: PokeRogue.system.settings.SettingGamepad;
          LC_W: PokeRogue.system.settings.SettingGamepad;
          LC_E: PokeRogue.system.settings.SettingGamepad;
          RC_S: PokeRogue.system.settings.SettingGamepad;
          RC_E: PokeRogue.system.settings.SettingGamepad;
          RC_W: PokeRogue.system.settings.SettingGamepad;
          RC_N: PokeRogue.system.settings.SettingGamepad;
          START: PokeRogue.system.settings.SettingGamepad;
          SELECT: PokeRogue.system.settings.SettingGamepad;
          LB: PokeRogue.system.settings.SettingGamepad;
          RB: PokeRogue.system.settings.SettingGamepad;
          LT: PokeRogue.system.settings.SettingGamepad;
          RT: PokeRogue.system.settings.SettingGamepad;
          LS: PokeRogue.system.settings.SettingGamepad;
          RS: PokeRogue.system.settings.SettingGamepad;
          TOUCH: PokeRogue.system.settings.SettingGamepad;
      };
  };

}

declare namespace PokeRogue.configs.inputs {
  //import { SettingGamepad } from "../../system/settings/settings-gamepad";
  //import { Button } from "#enums/buttons";
  /**
   * Generic pad mapping
   */
  declare const pad_generic: {
      padID: string;
      padType: string;
      deviceMapping: {
          RC_S: number;
          RC_E: number;
          RC_W: number;
          RC_N: number;
          START: number;
          SELECT: number;
          LB: number;
          RB: number;
          LT: number;
          RT: number;
          LS: number;
          RS: number;
          LC_N: number;
          LC_S: number;
          LC_W: number;
          LC_E: number;
      };
      icons: {
          RC_S: string;
          RC_E: string;
          RC_W: string;
          RC_N: string;
          START: string;
          SELECT: string;
          LB: string;
          RB: string;
          LT: string;
          RT: string;
          LS: string;
          RS: string;
          LC_N: string;
          LC_S: string;
          LC_W: string;
          LC_E: string;
      };
      settings: {
          BUTTON_UP: PokeRogue.enums.Button;
          BUTTON_DOWN: PokeRogue.enums.Button;
          BUTTON_LEFT: PokeRogue.enums.Button;
          BUTTON_RIGHT: PokeRogue.enums.Button;
          BUTTON_ACTION: PokeRogue.enums.Button;
          BUTTON_CANCEL: PokeRogue.enums.Button;
          BUTTON_CYCLE_NATURE: PokeRogue.enums.Button;
          BUTTON_CYCLE_VARIANT: PokeRogue.enums.Button;
          BUTTON_MENU: PokeRogue.enums.Button;
          BUTTON_STATS: PokeRogue.enums.Button;
          BUTTON_CYCLE_FORM: PokeRogue.enums.Button;
          BUTTON_CYCLE_SHINY: PokeRogue.enums.Button;
          BUTTON_CYCLE_GENDER: PokeRogue.enums.Button;
          BUTTON_CYCLE_ABILITY: PokeRogue.enums.Button;
          BUTTON_SPEED_UP: PokeRogue.enums.Button;
          BUTTON_SLOW_DOWN: PokeRogue.enums.Button;
      };
      default: {
          LC_N: PokeRogue.system.settings.SettingGamepad;
          LC_S: PokeRogue.system.settings.SettingGamepad;
          LC_W: PokeRogue.system.settings.SettingGamepad;
          LC_E: PokeRogue.system.settings.SettingGamepad;
          RC_S: PokeRogue.system.settings.SettingGamepad;
          RC_E: PokeRogue.system.settings.SettingGamepad;
          RC_W: PokeRogue.system.settings.SettingGamepad;
          RC_N: PokeRogue.system.settings.SettingGamepad;
          START: PokeRogue.system.settings.SettingGamepad;
          SELECT: PokeRogue.system.settings.SettingGamepad;
          LB: PokeRogue.system.settings.SettingGamepad;
          RB: PokeRogue.system.settings.SettingGamepad;
          LT: PokeRogue.system.settings.SettingGamepad;
          RT: PokeRogue.system.settings.SettingGamepad;
          LS: PokeRogue.system.settings.SettingGamepad;
          RS: PokeRogue.system.settings.SettingGamepad;
      };
      blacklist: string[];
  };

}

declare namespace PokeRogue.configs.inputs {
  //import { SettingGamepad } from "#app/system/settings/settings-gamepad.js";
  //import { Button } from "#enums/buttons";
  /**
   * Nintendo Pro Controller mapping
   */
  declare const pad_procon: {
      padID: string;
      padType: string;
      deviceMapping: {
          RC_S: number;
          RC_E: number;
          RC_W: number;
          RC_N: number;
          START: number;
          SELECT: number;
          LB: number;
          RB: number;
          LT: number;
          RT: number;
          LS: number;
          RS: number;
          LC_N: number;
          LC_S: number;
          LC_W: number;
          LC_E: number;
          MENU: number;
      };
      icons: {
          RC_S: string;
          RC_E: string;
          RC_W: string;
          RC_N: string;
          START: string;
          SELECT: string;
          LB: string;
          RB: string;
          LT: string;
          RT: string;
          LS: string;
          RS: string;
          LC_N: string;
          LC_S: string;
          LC_W: string;
          LC_E: string;
      };
      settings: {
          BUTTON_UP: PokeRogue.enums.Button;
          BUTTON_DOWN: PokeRogue.enums.Button;
          BUTTON_LEFT: PokeRogue.enums.Button;
          BUTTON_RIGHT: PokeRogue.enums.Button;
          BUTTON_ACTION: PokeRogue.enums.Button;
          BUTTON_CANCEL: PokeRogue.enums.Button;
          BUTTON_CYCLE_NATURE: PokeRogue.enums.Button;
          BUTTON_CYCLE_VARIANT: PokeRogue.enums.Button;
          BUTTON_MENU: PokeRogue.enums.Button;
          BUTTON_STATS: PokeRogue.enums.Button;
          BUTTON_CYCLE_FORM: PokeRogue.enums.Button;
          BUTTON_CYCLE_SHINY: PokeRogue.enums.Button;
          BUTTON_CYCLE_GENDER: PokeRogue.enums.Button;
          BUTTON_CYCLE_ABILITY: PokeRogue.enums.Button;
          BUTTON_SPEED_UP: PokeRogue.enums.Button;
          BUTTON_SLOW_DOWN: PokeRogue.enums.Button;
      };
      default: {
          LC_N: PokeRogue.system.settings.SettingGamepad;
          LC_S: PokeRogue.system.settings.SettingGamepad;
          LC_W: PokeRogue.system.settings.SettingGamepad;
          LC_E: PokeRogue.system.settings.SettingGamepad;
          RC_S: PokeRogue.system.settings.SettingGamepad;
          RC_E: PokeRogue.system.settings.SettingGamepad;
          RC_W: PokeRogue.system.settings.SettingGamepad;
          RC_N: PokeRogue.system.settings.SettingGamepad;
          START: PokeRogue.system.settings.SettingGamepad;
          SELECT: PokeRogue.system.settings.SettingGamepad;
          LB: PokeRogue.system.settings.SettingGamepad;
          RB: PokeRogue.system.settings.SettingGamepad;
          LT: PokeRogue.system.settings.SettingGamepad;
          RT: PokeRogue.system.settings.SettingGamepad;
          LS: PokeRogue.system.settings.SettingGamepad;
          RS: PokeRogue.system.settings.SettingGamepad;
      };
  };

}

declare namespace PokeRogue.configs.inputs {
  //import { SettingGamepad } from "../../system/settings/settings-gamepad";
  //import { Button } from "#enums/buttons";
  /**
   * 081f-e401 - UnlicensedSNES
   */
  declare const pad_unlicensedSNES: {
      padID: string;
      padType: string;
      deviceMapping: {
          RC_S: number;
          RC_E: number;
          RC_W: number;
          RC_N: number;
          START: number;
          SELECT: number;
          LB: number;
          RB: number;
          LC_N: number;
          LC_S: number;
          LC_W: number;
          LC_E: number;
      };
      icons: {
          RC_S: string;
          RC_E: string;
          RC_W: string;
          RC_N: string;
          START: string;
          SELECT: string;
          LB: string;
          RB: string;
          LC_N: string;
          LC_S: string;
          LC_W: string;
          LC_E: string;
      };
      settings: {
          BUTTON_UP: PokeRogue.enums.Button;
          BUTTON_DOWN: PokeRogue.enums.Button;
          BUTTON_LEFT: PokeRogue.enums.Button;
          BUTTON_RIGHT: PokeRogue.enums.Button;
          BUTTON_ACTION: PokeRogue.enums.Button;
          BUTTON_CANCEL: PokeRogue.enums.Button;
          BUTTON_CYCLE_NATURE: PokeRogue.enums.Button;
          BUTTON_CYCLE_VARIANT: PokeRogue.enums.Button;
          BUTTON_MENU: PokeRogue.enums.Button;
          BUTTON_STATS: PokeRogue.enums.Button;
          BUTTON_CYCLE_FORM: PokeRogue.enums.Button;
          BUTTON_CYCLE_SHINY: PokeRogue.enums.Button;
          BUTTON_CYCLE_GENDER: PokeRogue.enums.Button;
          BUTTON_CYCLE_ABILITY: PokeRogue.enums.Button;
          BUTTON_SPEED_UP: PokeRogue.enums.Button;
          BUTTON_SLOW_DOWN: PokeRogue.enums.Button;
      };
      default: {
          LC_N: PokeRogue.system.settings.SettingGamepad;
          LC_S: PokeRogue.system.settings.SettingGamepad;
          LC_W: PokeRogue.system.settings.SettingGamepad;
          LC_E: PokeRogue.system.settings.SettingGamepad;
          RC_S: PokeRogue.system.settings.SettingGamepad;
          RC_E: PokeRogue.system.settings.SettingGamepad;
          RC_W: PokeRogue.system.settings.SettingGamepad;
          RC_N: PokeRogue.system.settings.SettingGamepad;
          START: PokeRogue.system.settings.SettingGamepad;
          SELECT: PokeRogue.system.settings.SettingGamepad;
          LB: PokeRogue.system.settings.SettingGamepad;
          RB: PokeRogue.system.settings.SettingGamepad;
          LT: number;
          RT: number;
          LS: number;
          RS: number;
      };
  };

}

declare namespace PokeRogue.configs.inputs {
  //import { SettingGamepad } from "../../system/settings/settings-gamepad";
  //import { Button } from "#enums/buttons";
  /**
   * Generic pad mapping
   */
  declare const pad_xbox360: {
      padID: string;
      padType: string;
      deviceMapping: {
          RC_S: number;
          RC_E: number;
          RC_W: number;
          RC_N: number;
          START: number;
          SELECT: number;
          LB: number;
          RB: number;
          LT: number;
          RT: number;
          LS: number;
          RS: number;
          LC_N: number;
          LC_S: number;
          LC_W: number;
          LC_E: number;
      };
      icons: {
          RC_S: string;
          RC_E: string;
          RC_W: string;
          RC_N: string;
          START: string;
          SELECT: string;
          LB: string;
          RB: string;
          LT: string;
          RT: string;
          LS: string;
          RS: string;
          LC_N: string;
          LC_S: string;
          LC_W: string;
          LC_E: string;
      };
      settings: {
          BUTTON_UP: PokeRogue.enums.Button;
          BUTTON_DOWN: PokeRogue.enums.Button;
          BUTTON_LEFT: PokeRogue.enums.Button;
          BUTTON_RIGHT: PokeRogue.enums.Button;
          BUTTON_ACTION: PokeRogue.enums.Button;
          BUTTON_CANCEL: PokeRogue.enums.Button;
          BUTTON_CYCLE_NATURE: PokeRogue.enums.Button;
          BUTTON_CYCLE_VARIANT: PokeRogue.enums.Button;
          BUTTON_MENU: PokeRogue.enums.Button;
          BUTTON_STATS: PokeRogue.enums.Button;
          BUTTON_CYCLE_FORM: PokeRogue.enums.Button;
          BUTTON_CYCLE_SHINY: PokeRogue.enums.Button;
          BUTTON_CYCLE_GENDER: PokeRogue.enums.Button;
          BUTTON_CYCLE_ABILITY: PokeRogue.enums.Button;
          BUTTON_SPEED_UP: PokeRogue.enums.Button;
          BUTTON_SLOW_DOWN: PokeRogue.enums.Button;
      };
      default: {
          LC_N: PokeRogue.system.settings.SettingGamepad;
          LC_S: PokeRogue.system.settings.SettingGamepad;
          LC_W: PokeRogue.system.settings.SettingGamepad;
          LC_E: PokeRogue.system.settings.SettingGamepad;
          RC_S: PokeRogue.system.settings.SettingGamepad;
          RC_E: PokeRogue.system.settings.SettingGamepad;
          RC_W: PokeRogue.system.settings.SettingGamepad;
          RC_N: PokeRogue.system.settings.SettingGamepad;
          START: PokeRogue.system.settings.SettingGamepad;
          SELECT: PokeRogue.system.settings.SettingGamepad;
          LB: PokeRogue.system.settings.SettingGamepad;
          RB: PokeRogue.system.settings.SettingGamepad;
          LT: PokeRogue.system.settings.SettingGamepad;
          RT: PokeRogue.system.settings.SettingGamepad;
          LS: PokeRogue.system.settings.SettingGamepad;
          RS: PokeRogue.system.settings.SettingGamepad;
      };
  };

}

declare namespace PokeRogue.data {
  //import Pokemon, { HitResult, PokemonMove } from "../field/pokemon";
  //import { Type } from "./type";
  //import { Constructor } from "#app/utils";
  //import * as Utils from "../utils";
  //import { Weather, WeatherType } from "./weather";
  //import { BattlerTag } from "./battler-tags";
  //import { StatusEffect } from "./status-effect";
  //import Move, { MoveCategory } from "./move";
  //import { PokemonHeldItemModifier } from "../modifier/modifier";
  //import { TerrainType } from "./terrain";
  //import { Localizable } from "#app/interfaces/locales";
  //import { BattlerIndex } from "#app/battle";
  //import { Abilities } from "#enums/abilities";
  //import { ArenaTagType } from "#enums/arena-tag-type";
  //import { BattlerTagType } from "#enums/battler-tag-type";
  //import { Moves } from "#enums/moves";
  //import { Stat, type BattleStat } from "#app/enums/stat";
  export declare class Ability implements Localizable {
      id: PokeRogue.enums.Abilities;
      public nameAppend;
      name: string;
      description: string;
      generation: integer;
      isBypassFaint: boolean;
      isIgnorable: boolean;
      attrs: AbAttr[];
      conditions: AbAttrCondition[];
      constructor(id: PokeRogue.enums.Abilities, generation: integer);
      localize(): void;
      /**
       * Get all ability attributes that match `attrType`
       * @param attrType any attribute that extends {@linkcode AbAttr}
       * @returns Array of attributes that match `attrType`, Empty Array if none match.
       */
      getAttrs<T extends AbAttr>(attrType: PokeRogue.Constructor<T>): T[];
      /**
       * Check if an ability has an attribute that matches `attrType`
       * @param attrType any attribute that extends {@linkcode AbAttr}
       * @returns true if the ability has attribute `attrType`
       */
      hasAttr<T extends AbAttr>(attrType: PokeRogue.Constructor<T>): boolean;
      attr<T extends PokeRogue.Constructor<AbAttr>>(AttrType: T, ...args: ConstructorParameters<T>): Ability;
      conditionalAttr<T extends PokeRogue.Constructor<AbAttr>>(condition: AbAttrCondition, AttrType: T, ...args: ConstructorParameters<T>): Ability;
      bypassFaint(): Ability;
      ignorable(): Ability;
      condition(condition: AbAttrCondition): Ability;
      partial(): this;
      unimplemented(): this;
  }
  type AbAttrCondition = (pokemon: PokeRogue.field.Pokemon) => boolean;
  type PokemonAttackCondition = (user: PokeRogue.field.Pokemon | null, target: PokeRogue.field.Pokemon | null, move: PokeRogue.data.Move) => boolean;
  type PokemonDefendCondition = (target: PokeRogue.field.Pokemon, user: PokeRogue.field.Pokemon, move: PokeRogue.data.Move) => boolean;
  type PokemonStatStageChangeCondition = (target: PokeRogue.field.Pokemon, statsChanged: BattleStat[], stages: number) => boolean;
  export declare abstract class AbAttr {
      showAbility: boolean;
      public extraCondition;
      constructor(showAbility?: boolean);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder | null, args: any[]): boolean | Promise<boolean>;
      getTriggerMessage(_pokemon: PokeRogue.field.Pokemon, _abilityName: string, ..._args: any[]): string | null;
      getCondition(): AbAttrCondition | null;
      addCondition(condition: AbAttrCondition): AbAttr;
  }
  export declare class BlockRecoilDamageAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class DoubleBattleChanceAbAttr extends AbAttr {
      constructor();
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class PostBattleInitAbAttr extends AbAttr {
      applyPostBattleInit(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PostBattleInitFormChangeAbAttr extends PostBattleInitAbAttr {
      public formFunc;
      constructor(formFunc: ((p: PokeRogue.field.Pokemon) => integer));
      applyPostBattleInit(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  export declare class PostBattleInitStatStageChangeAbAttr extends PostBattleInitAbAttr {
      public stats;
      public stages;
      public selfTarget;
      constructor(stats: BattleStat[], stages: number, selfTarget?: boolean);
      applyPostBattleInit(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  type PreDefendAbAttrCondition = (pokemon: PokeRogue.field.Pokemon, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move) => boolean;
  export declare class PreDefendAbAttr extends AbAttr {
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move | null, cancelled: Utils.BooleanHolder | null, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PreDefendFullHpEndureAbAttr extends PreDefendAbAttr {
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class BlockItemTheftAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class StabBoostAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class ReceivedMoveDamageMultiplierAbAttr extends PreDefendAbAttr {
      protected condition: PokemonDefendCondition;
      public damageMultiplier;
      constructor(condition: PokemonDefendCondition, damageMultiplier: number);
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class ReceivedTypeDamageMultiplierAbAttr extends ReceivedMoveDamageMultiplierAbAttr {
      constructor(moveType: PokeRogue.data.Type, damageMultiplier: number);
  }
  /**
   * Determines whether a Pokemon is immune to a move because of an ability.
   * @extends PreDefendAbAttr
   * @see {@linkcode applyPreDefend}
   * @see {@linkcode getCondition}
   */
  export declare class TypeImmunityAbAttr extends PreDefendAbAttr {
      public immuneType;
      public condition;
      constructor(immuneType: PokeRogue.data.Type | null, condition?: AbAttrCondition);
      /**
       * Applies immunity if this ability grants immunity to the type of the given move.
       * @param pokemon {@linkcode Pokemon} The defending Pokemon.
       * @param passive - Whether the ability is passive.
       * @param attacker {@linkcode Pokemon} The attacking Pokemon.
       * @param move {@linkcode Move} The attacking move.
       * @param cancelled {@linkcode Utils.BooleanHolder} - A holder for a boolean value indicating if the move was cancelled.
       * @param args [0] {@linkcode Utils.NumberHolder} gets set to 0 if move is immuned by an ability.
       * @param args [1] - Whether the move is simulated.
       */
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      getCondition(): AbAttrCondition | null;
  }
  export declare class AttackTypeImmunityAbAttr extends TypeImmunityAbAttr {
      constructor(immuneType: PokeRogue.data.Type, condition?: AbAttrCondition);
      /**
       * Applies immunity if the move used is not a status move.
       * Type immunity abilities that do not give additional benefits (HP recovery, stat boosts, etc) are not immune to status moves of the type
       * Example: Levitate
       */
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class TypeImmunityHealAbAttr extends TypeImmunityAbAttr {
      constructor(immuneType: PokeRogue.data.Type);
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class NonSuperEffectiveImmunityAbAttr extends TypeImmunityAbAttr {
      constructor(condition?: AbAttrCondition);
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  /**
   * Attribute implementing the effects of {@link https://bulbapedia.bulbagarden.net/wiki/Tera_Shell_(Ability) | Tera Shell}
   * When the source is at full HP, incoming attacks will have a maximum 0.5x type effectiveness multiplier.
   * @extends PreDefendAbAttr
   */
  export declare class FullHpResistTypeAbAttr extends PreDefendAbAttr {
      /**
       * Reduces a type multiplier to 0.5 if the source is at full HP.
       * @param pokemon {@linkcode Pokemon} the Pokemon with this ability
       * @param passive n/a
       * @param simulated n/a (this doesn't change game state)
       * @param attacker n/a
       * @param move {@linkcode Move} the move being used on the source
       * @param cancelled n/a
       * @param args `[0]` a container for the move's current type effectiveness multiplier
       * @returns `true` if the move's effectiveness is reduced; `false` otherwise
       */
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move | null, cancelled: Utils.BooleanHolder | null, args: any[]): boolean | Promise<boolean>;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class PostDefendAbAttr extends AbAttr {
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult | null, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * Applies the effects of Gulp Missile when the user is hit by an attack.
   * @extends PostDefendAbAttr
   */
  export declare class PostDefendGulpMissileAbAttr extends PostDefendAbAttr {
      constructor();
      /**
       * Damages the attacker and triggers the secondary effect based on the form or the BattlerTagType.
       * @param {Pokemon} pokemon - The defending Pokemon.
       * @param passive - n/a
       * @param {Pokemon} attacker - The attacking Pokemon.
       * @param {Move} move - The move being used.
       * @param {HitResult} hitResult - n/a
       * @param {any[]} args - n/a
       * @returns Whether the effects of the ability are applied.
       */
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean | Promise<boolean>;
  }
  export declare class FieldPriorityMoveImmunityAbAttr extends PreDefendAbAttr {
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class PostStatStageChangeAbAttr extends AbAttr {
      applyPostStatStageChange(pokemon: PokeRogue.field.Pokemon, simulated: boolean, statsChanged: BattleStat[], stagesChanged: integer, selfTarget: boolean, args: any[]): boolean | Promise<boolean>;
  }
  export declare class MoveImmunityAbAttr extends PreDefendAbAttr {
      public immuneCondition;
      constructor(immuneCondition: PreDefendAbAttrCondition);
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  /**
   * Reduces the accuracy of status moves used against the Pokémon with this ability to 50%.
   * Used by Wonder Skin.
   *
   * @extends PreDefendAbAttr
   */
  export declare class WonderSkinAbAttr extends PreDefendAbAttr {
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class MoveImmunityStatStageChangeAbAttr extends MoveImmunityAbAttr {
      public stat;
      public stages;
      constructor(immuneCondition: PreDefendAbAttrCondition, stat: BattleStat, stages: number);
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * Class for abilities that make drain moves deal damage to user instead of healing them.
   * @extends PostDefendAbAttr
   * @see {@linkcode applyPostDefend}
   */
  export declare class ReverseDrainAbAttr extends PostDefendAbAttr {
      /**
       * Determines if a damage and draining move was used to check if this ability should stop the healing.
       * Examples include: Absorb, Draining Kiss, Bitter Blade, etc.
       * Also displays a message to show this ability was activated.
       * @param pokemon {@linkcode Pokemon} with this ability
       * @param passive N/A
       * @param attacker {@linkcode Pokemon} that is attacking this Pokemon
       * @param move {@linkcode PokemonMove} that is being used
       * @param hitResult N/A
       * @args N/A
       * @returns true if healing should be reversed on a healing move, false otherwise.
       */
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostDefendStatStageChangeAbAttr extends PostDefendAbAttr {
      public condition;
      public stat;
      public stages;
      public selfTarget;
      public allOthers;
      constructor(condition: PokemonDefendCondition, stat: BattleStat, stages: number, selfTarget?: boolean, allOthers?: boolean);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostDefendHpGatedStatStageChangeAbAttr extends PostDefendAbAttr {
      public condition;
      public hpGate;
      public stats;
      public stages;
      public selfTarget;
      constructor(condition: PokemonDefendCondition, hpGate: number, stats: BattleStat[], stages: number, selfTarget?: boolean);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostDefendApplyArenaTrapTagAbAttr extends PostDefendAbAttr {
      public condition;
      public tagType;
      constructor(condition: PokemonDefendCondition, tagType: PokeRogue.enums.ArenaTagType);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostDefendApplyBattlerTagAbAttr extends PostDefendAbAttr {
      public condition;
      public tagType;
      constructor(condition: PokemonDefendCondition, tagType: PokeRogue.enums.BattlerTagType);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostDefendTypeChangeAbAttr extends PostDefendAbAttr {
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class PostDefendTerrainChangeAbAttr extends PostDefendAbAttr {
      public terrainType;
      constructor(terrainType: PokeRogue.data.TerrainType);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostDefendContactApplyStatusEffectAbAttr extends PostDefendAbAttr {
      chance: integer;
      public effects;
      constructor(chance: integer, ...effects: PokeRogue.data.StatusEffect[]);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class EffectSporeAbAttr extends PostDefendContactApplyStatusEffectAbAttr {
      constructor();
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostDefendContactApplyTagChanceAbAttr extends PostDefendAbAttr {
      public chance;
      public tagType;
      public turnCount;
      constructor(chance: integer, tagType: PokeRogue.enums.BattlerTagType, turnCount?: integer);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostDefendCritStatStageChangeAbAttr extends PostDefendAbAttr {
      public stat;
      public stages;
      constructor(stat: BattleStat, stages: number);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
      getCondition(): AbAttrCondition;
  }
  export declare class PostDefendContactDamageAbAttr extends PostDefendAbAttr {
      public damageRatio;
      constructor(damageRatio: integer);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  /**
   * @description: This ability applies the Perish Song tag to the attacking pokemon
   * and the defending pokemon if the move makes physical contact and neither pokemon
   * already has the Perish Song tag.
   * @class PostDefendPerishSongAbAttr
   * @extends {PostDefendAbAttr}
   */
  export declare class PostDefendPerishSongAbAttr extends PostDefendAbAttr {
      public turns;
      constructor(turns: integer);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class PostDefendWeatherChangeAbAttr extends PostDefendAbAttr {
      public weatherType;
      protected condition: PokemonDefendCondition | null;
      constructor(weatherType: PokeRogue.data.WeatherType, condition?: PokemonDefendCondition);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostDefendAbilitySwapAbAttr extends PostDefendAbAttr {
      constructor();
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class PostDefendAbilityGiveAbAttr extends PostDefendAbAttr {
      public ability;
      constructor(ability: PokeRogue.enums.Abilities);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class PostDefendMoveDisableAbAttr extends PostDefendAbAttr {
      public chance;
      public attacker;
      public move;
      constructor(chance: integer);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostStatStageChangeStatStageChangeAbAttr extends PostStatStageChangeAbAttr {
      public condition;
      public statsToChange;
      public stages;
      constructor(condition: PokemonStatStageChangeCondition, statsToChange: BattleStat[], stages: number);
      applyPostStatStageChange(pokemon: PokeRogue.field.Pokemon, simulated: boolean, statStagesChanged: BattleStat[], stagesChanged: number, selfTarget: boolean, args: any[]): boolean;
  }
  export declare class PreAttackAbAttr extends AbAttr {
      applyPreAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, defender: PokeRogue.field.Pokemon | null, move: PokeRogue.data.Move, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * Modifies moves additional effects with multipliers, ie. Sheer Force, Serene Grace.
   * @extends AbAttr
   * @see {@linkcode apply}
   */
  export declare class MoveEffectChanceMultiplierAbAttr extends AbAttr {
      public chanceMultiplier;
      constructor(chanceMultiplier: number);
      /**
       * @param args [0]: {@linkcode Utils.NumberHolder} Move additional effect chance. Has to be higher than or equal to 0.
       *             [1]: {@linkcode Moves } Move used by the ability user.
       */
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * Sets incoming moves additional effect chance to zero, ignoring all effects from moves. ie. Shield Dust.
   * @extends PreDefendAbAttr
   * @see {@linkcode applyPreDefend}
   */
  export declare class IgnoreMoveEffectsAbAttr extends PreDefendAbAttr {
      /**
       * @param args [0]: {@linkcode Utils.NumberHolder} Move additional effect chance.
       */
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class VariableMovePowerAbAttr extends PreAttackAbAttr {
      applyPreAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, args: any[]): boolean;
  }
  export declare class FieldPreventExplosiveMovesAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * Multiplies a Stat if the checked Pokemon lacks this ability.
   * If this ability cannot stack, a BooleanHolder can be used to prevent this from stacking.
   * @see {@link applyFieldStatMultiplierAbAttrs}
   * @see {@link applyFieldStat}
   * @see {@link Utils.BooleanHolder}
   */
  export declare class FieldMultiplyStatAbAttr extends AbAttr {
      public stat;
      public multiplier;
      public canStack;
      constructor(stat: PokeRogue.enums.Stat, multiplier: number, canStack?: boolean);
      /**
       * applyFieldStat: Tries to multiply a Pokemon's Stat
       * @param pokemon {@linkcode Pokemon} the Pokemon using this ability
       * @param passive {@linkcode boolean} unused
       * @param stat {@linkcode Stat} the type of the checked stat
       * @param statValue {@linkcode Utils.NumberHolder} the value of the checked stat
       * @param checkedPokemon {@linkcode Pokemon} the Pokemon this ability is targeting
       * @param hasApplied {@linkcode Utils.BooleanHolder} whether or not another multiplier has been applied to this stat
       * @param args {any[]} unused
       * @returns true if this changed the checked stat, false otherwise.
       */
      applyFieldStat(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, stat: PokeRogue.enums.Stat, statValue: Utils.NumberHolder, checkedPokemon: PokeRogue.field.Pokemon, hasApplied: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class MoveTypeChangeAbAttr extends PreAttackAbAttr {
      public newType;
      public powerMultiplier;
      public condition?;
      constructor(newType: PokeRogue.data.Type, powerMultiplier: number, condition?: PokemonAttackCondition);
      applyPreAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, args: any[]): boolean;
  }
  /** Ability attribute for changing a pokemon's type before using a move */
  export declare class PokemonTypeChangeAbAttr extends PreAttackAbAttr {
      public moveType;
      constructor();
      applyPreAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  /**
   * Class for abilities that convert single-strike moves to two-strike moves (i.e. Parental Bond).
   * @param damageMultiplier the damage multiplier for the second strike, relative to the first.
   */
  export declare class AddSecondStrikeAbAttr extends PreAttackAbAttr {
      public damageMultiplier;
      constructor(damageMultiplier: number);
      /**
       * Determines whether this attribute can apply to a given move.
       * @param {Move} move the move to which this attribute may apply
       * @param numTargets the number of {@linkcode Pokemon} targeted by this move
       * @returns true if the attribute can apply to the move, false otherwise
       */
      canApplyPreAttack(move: PokeRogue.data.Move, numTargets: integer): boolean;
      /**
       * If conditions are met, this doubles the move's hit count (via args[1])
       * or multiplies the damage of secondary strikes (via args[2])
       * @param {Pokemon} pokemon the Pokemon using the move
       * @param passive n/a
       * @param defender n/a
       * @param {Move} move the move used by the ability source
       * @param args\[0\] the number of Pokemon this move is targeting
       * @param {Utils.IntegerHolder} args\[1\] the number of strikes with this move
       * @param {Utils.NumberHolder} args\[2\] the damage multiplier for the current strike
       * @returns
       */
      applyPreAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, args: any[]): boolean;
  }
  /**
   * Class for abilities that boost the damage of moves
   * For abilities that boost the base power of moves, see VariableMovePowerAbAttr
   * @param damageMultiplier the amount to multiply the damage by
   * @param condition the condition for this ability to be applied
   */
  export declare class DamageBoostAbAttr extends PreAttackAbAttr {
      public damageMultiplier;
      public condition;
      constructor(damageMultiplier: number, condition: PokemonAttackCondition);
      /**
       *
       * @param pokemon the attacker pokemon
       * @param passive N/A
       * @param defender the target pokemon
       * @param move the move used by the attacker pokemon
       * @param args Utils.NumberHolder as damage
       * @returns true if the function succeeds
       */
      applyPreAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, args: any[]): boolean;
  }
  export declare class MovePowerBoostAbAttr extends VariableMovePowerAbAttr {
      public condition;
      public powerMultiplier;
      constructor(condition: PokemonAttackCondition, powerMultiplier: number, showAbility?: boolean);
      applyPreAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, args: any[]): boolean;
  }
  export declare class MoveTypePowerBoostAbAttr extends MovePowerBoostAbAttr {
      constructor(boostedType: PokeRogue.data.Type, powerMultiplier?: number);
  }
  export declare class LowHpMoveTypePowerBoostAbAttr extends MoveTypePowerBoostAbAttr {
      constructor(boostedType: PokeRogue.data.Type);
      getCondition(): AbAttrCondition;
  }
  /**
   * Abilities which cause a variable amount of power increase.
   * @extends VariableMovePowerAbAttr
   * @see {@link applyPreAttack}
   */
  export declare class VariableMovePowerBoostAbAttr extends VariableMovePowerAbAttr {
      public mult;
      /**
       * @param mult A function which takes the user, target, and move, and returns the power multiplier. 1 means no multiplier.
       * @param {boolean} showAbility Whether to show the ability when it activates.
       */
      constructor(mult: (user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: PokeRogue.data.Move) => number, showAbility?: boolean);
      /**
       * @override
       */
      applyPreAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, defender: PokeRogue.field.Pokemon, move: any, args: any[]): boolean;
  }
  /**
   * Boosts the power of a Pokémon's move under certain conditions.
   * @extends AbAttr
   */
  export declare class FieldMovePowerBoostAbAttr extends AbAttr {
      public condition;
      public powerMultiplier;
      /**
       * @param condition - A function that determines whether the power boost condition is met.
       * @param powerMultiplier - The multiplier to apply to the move's power when the condition is met.
       */
      constructor(condition: PokemonAttackCondition, powerMultiplier: number);
      applyPreAttack(pokemon: PokeRogue.field.Pokemon | null, passive: boolean | null, simulated: boolean, defender: PokeRogue.field.Pokemon | null, move: PokeRogue.data.Move, args: any[]): boolean;
  }
  /**
   * Boosts the power of a specific type of move.
   * @extends FieldMovePowerBoostAbAttr
   */
  export declare class PreAttackFieldMoveTypePowerBoostAbAttr extends FieldMovePowerBoostAbAttr {
      /**
       * @param boostedType - The type of move that will receive the power boost.
       * @param powerMultiplier - The multiplier to apply to the move's power, defaults to 1.5 if not provided.
       */
      constructor(boostedType: PokeRogue.data.Type, powerMultiplier?: number);
  }
  /**
   * Boosts the power of a specific type of move for all Pokemon in the field.
   * @extends PreAttackFieldMoveTypePowerBoostAbAttr
   */
  export declare class FieldMoveTypePowerBoostAbAttr extends PreAttackFieldMoveTypePowerBoostAbAttr {
  }
  /**
   * Boosts the power of a specific type of move for the user and its allies.
   * @extends PreAttackFieldMoveTypePowerBoostAbAttr
   */
  export declare class UserFieldMoveTypePowerBoostAbAttr extends PreAttackFieldMoveTypePowerBoostAbAttr {
  }
  /**
   * Boosts the power of moves in specified categories.
   * @extends FieldMovePowerBoostAbAttr
   */
  export declare class AllyMoveCategoryPowerBoostAbAttr extends FieldMovePowerBoostAbAttr {
      /**
       * @param boostedCategories - The categories of moves that will receive the power boost.
       * @param powerMultiplier - The multiplier to apply to the move's power.
       */
      constructor(boostedCategories: PokeRogue.data.MoveCategory[], powerMultiplier: number);
  }
  export declare class StatMultiplierAbAttr extends AbAttr {
      public stat;
      public multiplier;
      public condition;
      constructor(stat: BattleStat, multiplier: number, condition?: PokemonAttackCondition);
      applyStatStage(pokemon: PokeRogue.field.Pokemon, _passive: boolean, simulated: boolean, stat: BattleStat, statValue: Utils.NumberHolder, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PostAttackAbAttr extends AbAttr {
      public attackCondition;
      /** The default attackCondition requires that the selected move is a damaging move */
      constructor(attackCondition?: PokemonAttackCondition);
      /**
       * Please override {@link applyPostAttackAfterMoveTypeCheck} instead of this method. By default, this method checks that the move used is a damaging attack before
       * applying the effect of any inherited class. This can be changed by providing a different {@link attackCondition} to the constructor. See {@link ConfusionOnStatusEffectAbAttr}
       * for an example of an effect that does not require a damaging move.
       */
      applyPostAttack(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult | null, args: any[]): boolean | Promise<boolean>;
      /**
       * This method is only called after {@link applyPostAttack} has already been applied. Use this for handling checks specific to the ability in question.
       */
      applyPostAttackAfterMoveTypeCheck(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult | null, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PostAttackStealHeldItemAbAttr extends PostAttackAbAttr {
      public stealCondition;
      constructor(stealCondition?: PokemonAttackCondition);
      applyPostAttackAfterMoveTypeCheck(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): Promise<boolean>;
      getTargetHeldItems(target: PokeRogue.field.Pokemon): PokemonHeldItemModifier[];
  }
  export declare class PostAttackApplyStatusEffectAbAttr extends PostAttackAbAttr {
      public contactRequired;
      public chance;
      public effects;
      constructor(contactRequired: boolean, chance: integer, ...effects: PokeRogue.data.StatusEffect[]);
      applyPostAttackAfterMoveTypeCheck(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostAttackContactApplyStatusEffectAbAttr extends PostAttackApplyStatusEffectAbAttr {
      constructor(chance: integer, ...effects: PokeRogue.data.StatusEffect[]);
  }
  export declare class PostAttackApplyBattlerTagAbAttr extends PostAttackAbAttr {
      public contactRequired;
      public chance;
      public effects;
      constructor(contactRequired: boolean, chance: (user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: PokeRogue.data.Move) => integer, ...effects: PokeRogue.enums.BattlerTagType[]);
      applyPostAttackAfterMoveTypeCheck(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostDefendStealHeldItemAbAttr extends PostDefendAbAttr {
      public condition;
      constructor(condition?: PokemonDefendCondition);
      applyPostDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): Promise<boolean>;
      getTargetHeldItems(target: PokeRogue.field.Pokemon): PokemonHeldItemModifier[];
  }
  export declare class PostVictoryAbAttr extends AbAttr {
      applyPostVictory(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PostVictoryFormChangeAbAttr extends PostVictoryAbAttr {
      public formFunc;
      constructor(formFunc: ((p: PokeRogue.field.Pokemon) => integer));
      applyPostVictory(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PostKnockOutAbAttr extends AbAttr {
      applyPostKnockOut(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, knockedOut: PokeRogue.field.Pokemon, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PostKnockOutStatStageChangeAbAttr extends PostKnockOutAbAttr {
      public stat;
      public stages;
      constructor(stat: BattleStat | ((p: PokeRogue.field.Pokemon) => BattleStat), stages: number);
      applyPostKnockOut(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, knockedOut: PokeRogue.field.Pokemon, args: any[]): boolean | Promise<boolean>;
  }
  export declare class CopyFaintedAllyAbilityAbAttr extends PostKnockOutAbAttr {
      constructor();
      applyPostKnockOut(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, knockedOut: PokeRogue.field.Pokemon, args: any[]): boolean | Promise<boolean>;
  }
  export declare class IgnoreOpponentStatStagesAbAttr extends AbAttr {
      public stats;
      constructor(stats?: BattleStat[]);
      apply(_pokemon: PokeRogue.field.Pokemon, _passive: boolean, simulated: boolean, _cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class IntimidateImmunityAbAttr extends AbAttr {
      constructor();
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class PostIntimidateStatStageChangeAbAttr extends AbAttr {
      public stats;
      public stages;
      public overwrites;
      constructor(stats: BattleStat[], stages: number, overwrites?: boolean);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * Base class for defining all {@linkcode Ability} Attributes post summon
   * @see {@linkcode applyPostSummon()}
   */
  export declare class PostSummonAbAttr extends AbAttr {
      /**
       * Applies ability post summon (after switching in)
       * @param pokemon {@linkcode Pokemon} with this ability
       * @param passive Whether this ability is a passive
       * @param args Set of unique arguments needed by this attribute
       * @returns true if application of the ability succeeds
       */
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * Removes specified arena tags when a Pokemon is summoned.
   */
  export declare class PostSummonRemoveArenaTagAbAttr extends PostSummonAbAttr {
      public arenaTags;
      /**
       * @param arenaTags {@linkcode ArenaTagType[]} - the arena tags to be removed
       */
      constructor(arenaTags: PokeRogue.enums.ArenaTagType[]);
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PostSummonMessageAbAttr extends PostSummonAbAttr {
      public messageFunc;
      constructor(messageFunc: (pokemon: PokeRogue.field.Pokemon) => string);
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  export declare class PostSummonUnnamedMessageAbAttr extends PostSummonAbAttr {
      public message;
      constructor(message: string);
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  export declare class PostSummonAddBattlerTagAbAttr extends PostSummonAbAttr {
      public tagType;
      public turnCount;
      constructor(tagType: PokeRogue.enums.BattlerTagType, turnCount: integer, showAbility?: boolean);
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  export declare class PostSummonStatStageChangeAbAttr extends PostSummonAbAttr {
      public stats;
      public stages;
      public selfTarget;
      public intimidate;
      constructor(stats: BattleStat[], stages: number, selfTarget?: boolean, intimidate?: boolean);
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  export declare class PostSummonAllyHealAbAttr extends PostSummonAbAttr {
      public healRatio;
      public showAnim;
      constructor(healRatio: number, showAnim?: boolean);
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  /**
   * Resets an ally's temporary stat boots to zero with no regard to
   * whether this is a positive or negative change
   * @param pokemon The {@link Pokemon} with this {@link AbAttr}
   * @param passive N/A
   * @param args N/A
   * @returns if the move was successful
   */
  export declare class PostSummonClearAllyStatStagesAbAttr extends PostSummonAbAttr {
      constructor();
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  /**
   * Download raises either the Attack stat or Special Attack stat by one stage depending on the foe's currently lowest defensive stat:
   * it will raise Attack if the foe's current Defense is lower than its current Special Defense stat;
   * otherwise, it will raise Special Attack.
   * @extends PostSummonAbAttr
   * @see {applyPostSummon}
   */
  export declare class DownloadAbAttr extends PostSummonAbAttr {
      public enemyDef;
      public enemySpDef;
      public enemyCountTally;
      public stats;
      /**
       * Checks to see if it is the opening turn (starting a new game), if so, Download won't work. This is because Download takes into account
       * vitamins and items, so it needs to use the Stat and the stat alone.
       * @param {Pokemon} pokemon Pokemon that is using the move, as well as seeing the opposing pokemon.
       * @param {boolean} passive N/A
       * @param {any[]} args N/A
       * @returns Returns true if ability is used successful, false if not.
       */
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  export declare class PostSummonWeatherChangeAbAttr extends PostSummonAbAttr {
      public weatherType;
      constructor(weatherType: PokeRogue.data.WeatherType);
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  export declare class PostSummonTerrainChangeAbAttr extends PostSummonAbAttr {
      public terrainType;
      constructor(terrainType: PokeRogue.data.TerrainType);
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  export declare class PostSummonFormChangeAbAttr extends PostSummonAbAttr {
      public formFunc;
      constructor(formFunc: ((p: PokeRogue.field.Pokemon) => integer));
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  /** Attempts to copy a pokemon's ability */
  export declare class PostSummonCopyAbilityAbAttr extends PostSummonAbAttr {
      public target;
      public targetAbilityName;
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  /**
   * Removes supplied status effects from the user's field.
   */
  export declare class PostSummonUserFieldRemoveStatusEffectAbAttr extends PostSummonAbAttr {
      public statusEffect;
      /**
       * @param statusEffect - The status effects to be removed from the user's field.
       */
      constructor(...statusEffect: PokeRogue.data.StatusEffect[]);
      /**
       * Removes supplied status effect from the user's field when user of the ability is summoned.
       *
       * @param pokemon - The Pokémon that triggered the ability.
       * @param passive - n/a
       * @param args - n/a
       * @returns A boolean or a promise that resolves to a boolean indicating the result of the ability application.
       */
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean | Promise<boolean>;
  }
  /** Attempt to copy the stat changes on an ally pokemon */
  export declare class PostSummonCopyAllyStatsAbAttr extends PostSummonAbAttr {
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class PostSummonTransformAbAttr extends PostSummonAbAttr {
      constructor();
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  /**
   * Reverts weather-based forms to their normal forms when the user is summoned.
   * Used by Cloud Nine and Air Lock.
   * @extends PostSummonAbAttr
   */
  export declare class PostSummonWeatherSuppressedFormChangeAbAttr extends PostSummonAbAttr {
      /**
       * Triggers {@linkcode Arena.triggerWeatherBasedFormChangesToNormal | triggerWeatherBasedFormChangesToNormal}
       * @param {Pokemon} pokemon the Pokemon with this ability
       * @param passive n/a
       * @param args n/a
       * @returns whether a Pokemon was reverted to its normal form
       */
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  /**
   * Triggers weather-based form change when summoned into an active weather.
   * Used by Forecast and Flower Gift.
   * @extends PostSummonAbAttr
   */
  export declare class PostSummonFormChangeByWeatherAbAttr extends PostSummonAbAttr {
      public ability;
      constructor(ability: PokeRogue.enums.Abilities);
      /**
       * Calls the {@linkcode BattleScene.triggerPokemonFormChange | triggerPokemonFormChange} for both
       * {@linkcode SpeciesFormChange.SpeciesFormChangeWeatherTrigger | SpeciesFormChangeWeatherTrigger} and
       * {@linkcode SpeciesFormChange.SpeciesFormChangeWeatherTrigger | SpeciesFormChangeRevertWeatherFormTrigger} if it
       * is the specific Pokemon and ability
       * @param {Pokemon} pokemon the Pokemon with this ability
       * @param passive n/a
       * @param args n/a
       * @returns whether the form change was triggered
       */
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  export declare class PreSwitchOutAbAttr extends AbAttr {
      constructor();
      applyPreSwitchOut(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PreSwitchOutResetStatusAbAttr extends PreSwitchOutAbAttr {
      applyPreSwitchOut(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * Clears Desolate Land/Primordial Sea/Delta Stream upon the Pokemon switching out.
   */
  export declare class PreSwitchOutClearWeatherAbAttr extends PreSwitchOutAbAttr {
      /**
       * @param pokemon The {@linkcode Pokemon} with the ability
       * @param passive N/A
       * @param args N/A
       * @returns {boolean} Returns true if the weather clears, otherwise false.
       */
      applyPreSwitchOut(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PreSwitchOutHealAbAttr extends PreSwitchOutAbAttr {
      applyPreSwitchOut(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * Attribute for form changes that occur on switching out
   * @extends PreSwitchOutAbAttr
   * @see {@linkcode applyPreSwitchOut}
   */
  export declare class PreSwitchOutFormChangeAbAttr extends PreSwitchOutAbAttr {
      public formFunc;
      constructor(formFunc: ((p: PokeRogue.field.Pokemon) => integer));
      /**
       * On switch out, trigger the form change to the one defined in the ability
       * @param pokemon The pokemon switching out and changing form {@linkcode Pokemon}
       * @param passive N/A
       * @param args N/A
       * @returns true if the form change was successful
       */
      applyPreSwitchOut(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PreStatStageChangeAbAttr extends AbAttr {
      applyPreStatStageChange(pokemon: PokeRogue.field.Pokemon | null, passive: boolean, simulated: boolean, stat: BattleStat, cancelled: Utils.BooleanHolder, args: any[]): boolean | Promise<boolean>;
  }
  export declare class ProtectStatAbAttr extends PreStatStageChangeAbAttr {
      public protectedStat?;
      constructor(protectedStat?: BattleStat);
      applyPreStatStageChange(_pokemon: PokeRogue.field.Pokemon, _passive: boolean, simulated: boolean, stat: BattleStat, cancelled: Utils.BooleanHolder, _args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ..._args: any[]): string;
  }
  /**
   * This attribute applies confusion to the target whenever the user
   * directly poisons them with a move, e.g. Poison Puppeteer.
   * Called in {@linkcode StatusEffectAttr}.
   * @extends PostAttackAbAttr
   * @see {@linkcode applyPostAttack}
   */
  export declare class ConfusionOnStatusEffectAbAttr extends PostAttackAbAttr {
      /** List of effects to apply confusion after */
      public effects;
      constructor(...effects: PokeRogue.data.StatusEffect[]);
      /**
       * Applies confusion to the target pokemon.
       * @param pokemon {@link Pokemon} attacking
       * @param passive N/A
       * @param defender {@link Pokemon} defending
       * @param move {@link Move} used to apply status effect and confusion
       * @param hitResult N/A
       * @param args [0] {@linkcode StatusEffect} applied by move
       * @returns true if defender is confused
       */
      applyPostAttackAfterMoveTypeCheck(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PreSetStatusAbAttr extends AbAttr {
      applyPreSetStatus(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, effect: PokeRogue.data.StatusEffect | undefined, cancelled: Utils.BooleanHolder, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * Provides immunity to status effects to specified targets.
   */
  export declare class PreSetStatusEffectImmunityAbAttr extends PreSetStatusAbAttr {
      public immuneEffects;
      /**
       * @param immuneEffects - The status effects to which the Pokémon is immune.
       */
      constructor(...immuneEffects: PokeRogue.data.StatusEffect[]);
      /**
       * Applies immunity to supplied status effects.
       *
       * @param pokemon - The Pokémon to which the status is being applied.
       * @param passive - n/a
       * @param effect - The status effect being applied.
       * @param cancelled - A holder for a boolean value indicating if the status application was cancelled.
       * @param args - n/a
       * @returns A boolean indicating the result of the status application.
       */
      applyPreSetStatus(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, effect: PokeRogue.data.StatusEffect, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  /**
   * Provides immunity to status effects to the user.
   * @extends PreSetStatusEffectImmunityAbAttr
   */
  export declare class StatusEffectImmunityAbAttr extends PreSetStatusEffectImmunityAbAttr {
  }
  /**
   * Provides immunity to status effects to the user's field.
   * @extends PreSetStatusEffectImmunityAbAttr
   */
  export declare class UserFieldStatusEffectImmunityAbAttr extends PreSetStatusEffectImmunityAbAttr {
  }
  export declare class PreApplyBattlerTagAbAttr extends AbAttr {
      applyPreApplyBattlerTag(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, tag: PokeRogue.data.BattlerTag, cancelled: Utils.BooleanHolder, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * Provides immunity to BattlerTags {@linkcode BattlerTag} to specified targets.
   */
  export declare class PreApplyBattlerTagImmunityAbAttr extends PreApplyBattlerTagAbAttr {
      public immuneTagType;
      public battlerTag;
      constructor(immuneTagType: PokeRogue.enums.BattlerTagType);
      applyPreApplyBattlerTag(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, tag: PokeRogue.data.BattlerTag, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  /**
   * Provides immunity to BattlerTags {@linkcode BattlerTag} to the user.
   * @extends PreApplyBattlerTagImmunityAbAttr
   */
  export declare class BattlerTagImmunityAbAttr extends PreApplyBattlerTagImmunityAbAttr {
  }
  /**
   * Provides immunity to BattlerTags {@linkcode BattlerTag} to the user's field.
   * @extends PreApplyBattlerTagImmunityAbAttr
   */
  export declare class UserFieldBattlerTagImmunityAbAttr extends PreApplyBattlerTagImmunityAbAttr {
  }
  export declare class BlockCritAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class BonusCritAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class MultCritAbAttr extends AbAttr {
      multAmount: number;
      constructor(multAmount: number);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * Guarantees a critical hit according to the given condition, except if target prevents critical hits. ie. Merciless
   * @extends AbAttr
   * @see {@linkcode apply}
   */
  export declare class ConditionalCritAbAttr extends AbAttr {
      public condition;
      constructor(condition: PokemonAttackCondition, checkUser?: Boolean);
      /**
       * @param pokemon {@linkcode Pokemon} user.
       * @param args [0] {@linkcode Utils.BooleanHolder} If true critical hit is guaranteed.
       *             [1] {@linkcode Pokemon} Target.
       *             [2] {@linkcode Move} used by ability user.
       */
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class BlockNonDirectDamageAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * This attribute will block any status damage that you put in the parameter.
   */
  export declare class BlockStatusDamageAbAttr extends AbAttr {
      public effects;
      /**
       * @param {StatusEffect[]} effects The status effect(s) that will be blocked from damaging the ability pokemon
       */
      constructor(...effects: PokeRogue.data.StatusEffect[]);
      /**
       * @param {Pokemon} pokemon The pokemon with the ability
       * @param {boolean} passive N/A
       * @param {Utils.BooleanHolder} cancelled Whether to cancel the status damage
       * @param {any[]} args N/A
       * @returns Returns true if status damage is blocked
       */
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class BlockOneHitKOAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * This governs abilities that alter the priority of moves
   * Abilities: Prankster, Gale Wings, Triage, Mycelium Might, Stall
   * Note - Quick Claw has a separate and distinct implementation outside of priority
   */
  export declare class ChangeMovePriorityAbAttr extends AbAttr {
      public moveFunc;
      public changeAmount;
      /**
       * @param {(pokemon, move) => boolean} moveFunc applies priority-change to moves within a provided category
       * @param {number} changeAmount the amount of priority added or subtracted
       */
      constructor(moveFunc: (pokemon: PokeRogue.field.Pokemon, move: PokeRogue.data.Move) => boolean, changeAmount: number);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class IgnoreContactAbAttr extends AbAttr {
  }
  export declare class PreWeatherEffectAbAttr extends AbAttr {
      applyPreWeatherEffect(pokemon: PokeRogue.field.Pokemon, passive: Boolean, simulated: boolean, weather: PokeRogue.data.Weather | null, cancelled: Utils.BooleanHolder, args: any[]): boolean | Promise<boolean>;
  }
  export declare class PreWeatherDamageAbAttr extends PreWeatherEffectAbAttr {
  }
  export declare class BlockWeatherDamageAttr extends PreWeatherDamageAbAttr {
      public weatherTypes;
      constructor(...weatherTypes: PokeRogue.data.WeatherType[]);
      applyPreWeatherEffect(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, weather: PokeRogue.data.Weather, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class SuppressWeatherEffectAbAttr extends PreWeatherEffectAbAttr {
      affectsImmutable: boolean;
      constructor(affectsImmutable?: boolean);
      applyPreWeatherEffect(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, weather: PokeRogue.data.Weather, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class ForewarnAbAttr extends PostSummonAbAttr {
      constructor();
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  export declare class FriskAbAttr extends PostSummonAbAttr {
      constructor();
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  export declare class PostWeatherChangeAbAttr extends AbAttr {
      applyPostWeatherChange(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, weather: PokeRogue.data.WeatherType, args: any[]): boolean;
  }
  /**
   * Triggers weather-based form change when weather changes.
   * Used by Forecast and Flower Gift.
   * @extends PostWeatherChangeAbAttr
   */
  export declare class PostWeatherChangeFormChangeAbAttr extends PostWeatherChangeAbAttr {
      public ability;
      public formRevertingWeathers;
      constructor(ability: PokeRogue.enums.Abilities, formRevertingWeathers: PokeRogue.data.WeatherType[]);
      /**
       * Calls {@linkcode Arena.triggerWeatherBasedFormChangesToNormal | triggerWeatherBasedFormChangesToNormal} when the
       * weather changed to form-reverting weather, otherwise calls {@linkcode Arena.triggerWeatherBasedFormChanges | triggerWeatherBasedFormChanges}
       * @param {Pokemon} pokemon the Pokemon with this ability
       * @param passive n/a
       * @param weather n/a
       * @param args n/a
       * @returns whether the form change was triggered
       */
      applyPostWeatherChange(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, weather: PokeRogue.data.WeatherType, args: any[]): boolean;
  }
  export declare class PostWeatherChangeAddBattlerTagAttr extends PostWeatherChangeAbAttr {
      public tagType;
      public turnCount;
      public weatherTypes;
      constructor(tagType: PokeRogue.enums.BattlerTagType, turnCount: integer, ...weatherTypes: PokeRogue.data.WeatherType[]);
      applyPostWeatherChange(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, weather: PokeRogue.data.WeatherType, args: any[]): boolean;
  }
  export declare class PostWeatherLapseAbAttr extends AbAttr {
      protected weatherTypes: PokeRogue.data.WeatherType[];
      constructor(...weatherTypes: PokeRogue.data.WeatherType[]);
      applyPostWeatherLapse(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, weather: PokeRogue.data.Weather | null, args: any[]): boolean | Promise<boolean>;
      getCondition(): AbAttrCondition;
  }
  export declare class PostWeatherLapseHealAbAttr extends PostWeatherLapseAbAttr {
      public healFactor;
      constructor(healFactor: integer, ...weatherTypes: PokeRogue.data.WeatherType[]);
      applyPostWeatherLapse(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, weather: PokeRogue.data.Weather, args: any[]): boolean;
  }
  export declare class PostWeatherLapseDamageAbAttr extends PostWeatherLapseAbAttr {
      public damageFactor;
      constructor(damageFactor: integer, ...weatherTypes: PokeRogue.data.WeatherType[]);
      applyPostWeatherLapse(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, weather: PokeRogue.data.Weather, args: any[]): boolean;
  }
  export declare class PostTerrainChangeAbAttr extends AbAttr {
      applyPostTerrainChange(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, terrain: PokeRogue.data.TerrainType, args: any[]): boolean;
  }
  export declare class PostTerrainChangeAddBattlerTagAttr extends PostTerrainChangeAbAttr {
      public tagType;
      public turnCount;
      public terrainTypes;
      constructor(tagType: PokeRogue.enums.BattlerTagType, turnCount: integer, ...terrainTypes: PokeRogue.data.TerrainType[]);
      applyPostTerrainChange(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, terrain: PokeRogue.data.TerrainType, args: any[]): boolean;
  }
  export declare class PostTurnAbAttr extends AbAttr {
      applyPostTurn(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * This attribute will heal 1/8th HP if the ability pokemon has the correct status.
   */
  export declare class PostTurnStatusHealAbAttr extends PostTurnAbAttr {
      public effects;
      /**
       * @param {StatusEffect[]} effects The status effect(s) that will qualify healing the ability pokemon
       */
      constructor(...effects: PokeRogue.data.StatusEffect[]);
      /**
       * @param {Pokemon} pokemon The pokemon with the ability that will receive the healing
       * @param {Boolean} passive N/A
       * @param {any[]} args N/A
       * @returns Returns true if healed from status, false if not
       */
      applyPostTurn(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * After the turn ends, resets the status of either the ability holder or their ally
   * @param {boolean} allyTarget Whether to target ally, defaults to false (self-target)
   */
  export declare class PostTurnResetStatusAbAttr extends PostTurnAbAttr {
      public allyTarget;
      public target;
      constructor(allyTarget?: boolean);
      applyPostTurn(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  /**
   * After the turn ends, try to create an extra item
   */
  export declare class PostTurnLootAbAttr extends PostTurnAbAttr {
      /** Extend itemType to add more options */
      public itemType;
      public procChance;
      /**
       * @param itemType - The type of item to create
       * @param procChance - Chance to create an item
       * @see {@linkcode applyPostTurn()}
       */
      constructor(
      /** Extend itemType to add more options */
      itemType: "EATEN_BERRIES" | "HELD_BERRIES", procChance: (pokemon: PokeRogue.field.Pokemon) => number);
      applyPostTurn(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
      /**
       * Create a new berry chosen randomly from the berries the pokemon ate this battle
       * @param pokemon The pokemon with this ability
       * @param simulated whether the associated ability call is simulated
       * @returns whether a new berry was created
       */
      createEatenBerry(pokemon: PokeRogue.field.Pokemon, simulated: boolean): boolean;
  }
  /**
   * Attribute used for {@linkcode Abilities.MOODY}
   */
  export declare class MoodyAbAttr extends PostTurnAbAttr {
      constructor();
      /**
       * Randomly increases one stat stage by 2 and decreases a different stat stage by 1
       * @param {Pokemon} pokemon Pokemon that has this ability
       * @param passive N/A
       * @param simulated true if applying in a simulated call.
       * @param args N/A
       * @returns true
       *
       * Any stat stages at +6 or -6 are excluded from being increased or decreased, respectively
       * If the pokemon already has all stat stages raised to 6, it will only decrease one stat stage by 1
       * If the pokemon already has all stat stages lowered to -6, it will only increase one stat stage by 2
       */
      applyPostTurn(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  export declare class PostTurnStatStageChangeAbAttr extends PostTurnAbAttr {
      public stats;
      public stages;
      constructor(stats: BattleStat[], stages: number);
      applyPostTurn(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  export declare class PostTurnHealAbAttr extends PostTurnAbAttr {
      applyPostTurn(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  export declare class PostTurnFormChangeAbAttr extends PostTurnAbAttr {
      public formFunc;
      constructor(formFunc: ((p: PokeRogue.field.Pokemon) => integer));
      applyPostTurn(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  /**
   * Attribute used for abilities (Bad Dreams) that damages the opponents for being asleep
   */
  export declare class PostTurnHurtIfSleepingAbAttr extends PostTurnAbAttr {
      /**
       * Deals damage to all sleeping opponents equal to 1/8 of their max hp (min 1)
       * @param {Pokemon} pokemon Pokemon that has this ability
       * @param {boolean} passive N/A
       * @param {boolean} simulated true if applying in a simulated call.
       * @param {any[]} args N/A
       * @returns {boolean} true if any opponents are sleeping
       */
      applyPostTurn(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * Grabs the last failed Pokeball used
   * @extends PostTurnAbAttr
   * @see {@linkcode applyPostTurn} */
  export declare class FetchBallAbAttr extends PostTurnAbAttr {
      constructor();
      /**
       * Adds the last used Pokeball back into the player's inventory
       * @param pokemon {@linkcode Pokemon} with this ability
       * @param passive N/A
       * @param args N/A
       * @returns true if player has used a pokeball and this pokemon is owned by the player
       */
      applyPostTurn(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  export declare class PostBiomeChangeAbAttr extends AbAttr {
  }
  export declare class PostBiomeChangeWeatherChangeAbAttr extends PostBiomeChangeAbAttr {
      public weatherType;
      constructor(weatherType: PokeRogue.data.WeatherType);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class PostBiomeChangeTerrainChangeAbAttr extends PostBiomeChangeAbAttr {
      public terrainType;
      constructor(terrainType: PokeRogue.data.TerrainType);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * Triggers just after a move is used either by the opponent or the player
   * @extends AbAttr
   */
  export declare class PostMoveUsedAbAttr extends AbAttr {
      applyPostMoveUsed(pokemon: PokeRogue.field.Pokemon, move: PokeRogue.field.PokemonMove, source: PokeRogue.field.Pokemon, targets: PokeRogue.BattlerIndex[], simulated: boolean, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * Triggers after a dance move is used either by the opponent or the player
   * @extends PostMoveUsedAbAttr
   */
  export declare class PostDancingMoveAbAttr extends PostMoveUsedAbAttr {
      /**
       * Resolves the Dancer ability by replicating the move used by the source of the dance
       * either on the source itself or on the target of the dance
       * @param dancer {@linkcode Pokemon} with Dancer ability
       * @param move {@linkcode PokemonMove} Dancing move used by the source
       * @param source {@linkcode Pokemon} that used the dancing move
       * @param targets {@linkcode BattlerIndex}Targets of the dancing move
       * @param args N/A
       *
       * @return true if the Dancer ability was resolved
       */
      applyPostMoveUsed(dancer: PokeRogue.field.Pokemon, move: PokeRogue.field.PokemonMove, source: PokeRogue.field.Pokemon, targets: PokeRogue.BattlerIndex[], simulated: boolean, args: any[]): boolean | Promise<boolean>;
      /**
       * Get the correct targets of Dancer ability
       *
       * @param dancer {@linkcode Pokemon} Pokemon with Dancer ability
       * @param source {@linkcode Pokemon} Source of the dancing move
       * @param targets {@linkcode BattlerIndex} Targets of the dancing move
       */
      getTarget(dancer: PokeRogue.field.Pokemon, source: PokeRogue.field.Pokemon, targets: PokeRogue.BattlerIndex[]): BattlerIndex[];
  }
  export declare class StatStageChangeMultiplierAbAttr extends AbAttr {
      public multiplier;
      constructor(multiplier: integer);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class StatStageChangeCopyAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean | Promise<boolean>;
  }
  export declare class BypassBurnDamageReductionAbAttr extends AbAttr {
      constructor();
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * Causes Pokemon to take reduced damage from the {@linkcode StatusEffect.BURN | Burn} status
   * @param multiplier Multiplied with the damage taken
  */
  export declare class ReduceBurnDamageAbAttr extends AbAttr {
      protected multiplier: number;
      constructor(multiplier: number);
      /**
       * Applies the damage reduction
       * @param pokemon N/A
       * @param passive N/A
       * @param cancelled N/A
       * @param args `[0]` {@linkcode Utils.NumberHolder} The damage value being modified
       * @returns `true`
       */
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class DoubleBerryEffectAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class PreventBerryUseAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * A Pokemon with this ability heals by a percentage of their maximum hp after eating a berry
   * @param healPercent - Percent of Max HP to heal
   * @see {@linkcode apply()} for implementation
   */
  export declare class HealFromBerryUseAbAttr extends AbAttr {
      /** Percent of Max HP to heal */
      public healPercent;
      constructor(healPercent: number);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, ...args: [Utils.BooleanHolder, any[]]): boolean;
  }
  export declare class RunSuccessAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  type ArenaTrapCondition = (user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon) => boolean;
  /**
   * Base class for checking if a Pokemon is trapped by arena trap
   * @extends AbAttr
   * @field {@linkcode arenaTrapCondition} Conditional for trapping abilities.
   * For example, Magnet Pull will only activate if opponent is Steel type.
   * @see {@linkcode applyCheckTrapped}
   */
  export declare class CheckTrappedAbAttr extends AbAttr {
      protected arenaTrapCondition: ArenaTrapCondition;
      constructor(condition: ArenaTrapCondition);
      applyCheckTrapped(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, trapped: Utils.BooleanHolder, otherPokemon: PokeRogue.field.Pokemon, args: any[]): boolean | Promise<boolean>;
  }
  /**
   * Determines whether a Pokemon is blocked from switching/running away
   * because of a trapping ability or move.
   * @extends CheckTrappedAbAttr
   * @see {@linkcode applyCheckTrapped}
   */
  export declare class ArenaTrapAbAttr extends CheckTrappedAbAttr {
      /**
       * Checks if enemy Pokemon is trapped by an Arena Trap-esque ability
       * If the enemy is a Ghost type, it is not trapped
       * If the enemy has the ability Run Away, it is not trapped.
       * If the user has Magnet Pull and the enemy is not a Steel type, it is not trapped.
       * If the user has Arena Trap and the enemy is not grounded, it is not trapped.
       * @param pokemon The {@link Pokemon} with this {@link AbAttr}
       * @param passive N/A
       * @param trapped {@link Utils.BooleanHolder} indicating whether the other Pokemon is trapped or not
       * @param otherPokemon The {@link Pokemon} that is affected by an Arena Trap ability
       * @param args N/A
       * @returns if enemy Pokemon is trapped or not
       */
      applyCheckTrapped(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, trapped: Utils.BooleanHolder, otherPokemon: PokeRogue.field.Pokemon, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class MaxMultiHitAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class PostBattleAbAttr extends AbAttr {
      constructor();
      applyPostBattle(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  export declare class PostBattleLootAbAttr extends PostBattleAbAttr {
      applyPostBattle(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  export declare class PostFaintAbAttr extends AbAttr {
      applyPostFaint(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  /**
   * Used for weather suppressing abilities to trigger weather-based form changes upon being fainted.
   * Used by Cloud Nine and Air Lock.
   * @extends PostFaintAbAttr
   */
  export declare class PostFaintUnsuppressedWeatherFormChangeAbAttr extends PostFaintAbAttr {
      /**
       * Triggers {@linkcode Arena.triggerWeatherBasedFormChanges | triggerWeatherBasedFormChanges}
       * when the user of the ability faints
       * @param {Pokemon} pokemon the fainted Pokemon
       * @param passive n/a
       * @param attacker n/a
       * @param move n/a
       * @param hitResult n/a
       * @param args n/a
       * @returns whether the form change was triggered
       */
      applyPostFaint(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  /**
   * Clears Desolate Land/Primordial Sea/Delta Stream upon the Pokemon fainting
   */
  export declare class PostFaintClearWeatherAbAttr extends PostFaintAbAttr {
      /**
       * @param pokemon The {@linkcode Pokemon} with the ability
       * @param passive N/A
       * @param attacker N/A
       * @param move N/A
       * @param hitResult N/A
       * @param args N/A
       * @returns {boolean} Returns true if the weather clears, otherwise false.
       */
      applyPostFaint(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
  }
  export declare class PostFaintContactDamageAbAttr extends PostFaintAbAttr {
      public damageRatio;
      constructor(damageRatio: integer);
      applyPostFaint(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  /**
   * Attribute used for abilities (Innards Out) that damage the opponent based on how much HP the last attack used to knock out the owner of the ability.
   */
  export declare class PostFaintHPDamageAbAttr extends PostFaintAbAttr {
      constructor();
      applyPostFaint(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  export declare class RedirectMoveAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      canRedirect(moveId: PokeRogue.enums.Moves): boolean;
  }
  export declare class RedirectTypeMoveAbAttr extends RedirectMoveAbAttr {
      type: PokeRogue.data.Type;
      constructor(type: PokeRogue.data.Type);
      canRedirect(moveId: PokeRogue.enums.Moves): boolean;
  }
  export declare class BlockRedirectAbAttr extends AbAttr {
  }
  export declare class ReduceStatusEffectDurationAbAttr extends AbAttr {
      public statusEffect;
      constructor(statusEffect: PokeRogue.data.StatusEffect);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class FlinchEffectAbAttr extends AbAttr {
      constructor();
  }
  export declare class FlinchStatStageChangeAbAttr extends FlinchEffectAbAttr {
      public stats;
      public stages;
      constructor(stats: BattleStat[], stages: number);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class IncreasePpAbAttr extends AbAttr {
  }
  export declare class ForceSwitchOutImmunityAbAttr extends AbAttr {
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class ReduceBerryUseThresholdAbAttr extends AbAttr {
      constructor();
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class WeightMultiplierAbAttr extends AbAttr {
      public multiplier;
      constructor(multiplier: integer);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class SyncEncounterNatureAbAttr extends AbAttr {
      constructor();
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class MoveAbilityBypassAbAttr extends AbAttr {
      public moveIgnoreFunc;
      constructor(moveIgnoreFunc?: (pokemon: PokeRogue.field.Pokemon, move: PokeRogue.data.Move) => boolean);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class SuppressFieldAbilitiesAbAttr extends AbAttr {
      constructor();
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare class AlwaysHitAbAttr extends AbAttr {
  }
  /** Attribute for abilities that allow moves that make contact to ignore protection (i.e. Unseen Fist) */
  export declare class IgnoreProtectOnContactAbAttr extends AbAttr {
  }
  export declare class UncopiableAbilityAbAttr extends AbAttr {
      constructor();
  }
  export declare class UnsuppressableAbilityAbAttr extends AbAttr {
      constructor();
  }
  export declare class UnswappableAbilityAbAttr extends AbAttr {
      constructor();
  }
  export declare class NoTransformAbilityAbAttr extends AbAttr {
      constructor();
  }
  export declare class NoFusionAbilityAbAttr extends AbAttr {
      constructor();
  }
  export declare class IgnoreTypeImmunityAbAttr extends AbAttr {
      public defenderType;
      public allowedMoveTypes;
      constructor(defenderType: PokeRogue.data.Type, allowedMoveTypes: PokeRogue.data.Type[]);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * Ignores the type immunity to Status Effects of the defender if the defender is of a certain type
   */
  export declare class IgnoreTypeStatusEffectImmunityAbAttr extends AbAttr {
      public statusEffect;
      public defenderType;
      constructor(statusEffect: PokeRogue.data.StatusEffect[], defenderType: PokeRogue.data.Type[]);
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  /**
   * Gives money to the user after the battle.
   *
   * @extends PostBattleAbAttr
   * @see {@linkcode applyPostBattle}
   */
  export declare class MoneyAbAttr extends PostBattleAbAttr {
      constructor();
      /**
       * @param pokemon {@linkcode Pokemon} that is the user of this ability.
       * @param passive N/A
       * @param args N/A
       * @returns true
       */
      applyPostBattle(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  /**
   * Applies a stat change after a Pokémon is summoned,
   * conditioned on the presence of a specific arena tag.
   *
   * @extends {PostSummonStatStageChangeAbAttr}
   */
  export declare class PostSummonStatStageChangeOnArenaAbAttr extends PostSummonStatStageChangeAbAttr {
      /**
       * The type of arena tag that conditions the stat change.
       * @public
       * @type {ArenaTagType}
       */
      public tagType;
      /**
       * Creates an instance of PostSummonStatStageChangeOnArenaAbAttr.
       * Initializes the stat change to increase Attack by 1 stage if the specified arena tag is present.
       *
       * @param {ArenaTagType} tagType - The type of arena tag to check for.
       */
      constructor(tagType: PokeRogue.enums.ArenaTagType);
      /**
       * Applies the post-summon stat change if the specified arena tag is present on pokemon's side.
       * This is used in Wind Rider ability.
       *
       * @param {Pokemon} pokemon - The Pokémon being summoned.
       * @param {boolean} passive - Whether the effect is passive.
       * @param {any[]} args - Additional arguments.
       * @returns {boolean} - Returns true if the stat change was applied, otherwise false.
       */
      applyPostSummon(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, args: any[]): boolean;
  }
  /**
   * Takes no damage from the first hit of a damaging move.
   * This is used in the Disguise and Ice Face abilities.
   * @extends ReceivedMoveDamageMultiplierAbAttr
   */
  export declare class FormBlockDamageAbAttr extends ReceivedMoveDamageMultiplierAbAttr {
      public multiplier;
      public tagType;
      public recoilDamageFunc;
      public triggerMessageFunc;
      constructor(condition: PokemonDefendCondition, multiplier: number, tagType: PokeRogue.enums.BattlerTagType, triggerMessageFunc: (pokemon: PokeRogue.field.Pokemon, abilityName: string) => string, recoilDamageFunc?: (pokemon: PokeRogue.field.Pokemon) => number);
      /**
       * Applies the pre-defense ability to the Pokémon.
       * Removes the appropriate `BattlerTagType` when hit by an attack and is in its defense form.
       *
       * @param {Pokemon} pokemon The Pokémon with the ability.
       * @param {boolean} passive n/a
       * @param {Pokemon} attacker The attacking Pokémon.
       * @param {PokemonMove} move The move being used.
       * @param {Utils.BooleanHolder} cancelled n/a
       * @param {any[]} args Additional arguments.
       * @returns {boolean} Whether the immunity was applied.
       */
      applyPreDefend(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      /**
       * Gets the message triggered when the Pokémon avoids damage using the form-changing ability.
       * @param {Pokemon} pokemon The Pokémon with the ability.
       * @param {string} abilityName The name of the ability.
       * @param {...any} args n/a
       * @returns {string} The trigger message.
       */
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  /**
   * If a Pokémon with this Ability selects a damaging move, it has a 30% chance of going first in its priority bracket. If the Ability activates, this is announced at the start of the turn (after move selection).
   *
   * @extends AbAttr
   */
  export declare class BypassSpeedChanceAbAttr extends AbAttr {
      chance: integer;
      /**
       * @param {integer} chance probability of ability being active.
       */
      constructor(chance: integer);
      /**
       * bypass move order in their priority bracket when pokemon choose damaging move
       * @param {Pokemon} pokemon {@linkcode Pokemon}  the Pokemon applying this ability
       * @param {boolean} passive N/A
       * @param {Utils.BooleanHolder} cancelled N/A
       * @param {any[]} args [0] {@linkcode Utils.BooleanHolder} set to true when the ability activated
       * @returns {boolean} - whether the ability was activated.
       */
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
      getTriggerMessage(pokemon: PokeRogue.field.Pokemon, abilityName: string, ...args: any[]): string;
  }
  /**
   * This attribute checks if a Pokemon's move meets a provided condition to determine if the Pokemon can use Quick Claw
   * It was created because Pokemon with the ability Mycelium Might cannot access Quick Claw's benefits when using status moves.
  */
  export declare class PreventBypassSpeedChanceAbAttr extends AbAttr {
      public condition;
      /**
       * @param {function} condition - checks if a move meets certain conditions
       */
      constructor(condition: (pokemon: PokeRogue.field.Pokemon, move: PokeRogue.data.Move) => boolean);
      /**
       * @argument {boolean} bypassSpeed - determines if a Pokemon is able to bypass speed at the moment
       * @argument {boolean} canCheckHeldItems - determines if a Pokemon has access to Quick Claw's effects or not
       */
      apply(pokemon: PokeRogue.field.Pokemon, passive: boolean, simulated: boolean, cancelled: Utils.BooleanHolder, args: any[]): boolean;
  }
  export declare function applyAbAttrs(attrType: PokeRogue.Constructor<AbAttr>, pokemon: PokeRogue.field.Pokemon, cancelled: Utils.BooleanHolder | null, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyPostBattleInitAbAttrs(attrType: PokeRogue.Constructor<PostBattleInitAbAttr>, pokemon: PokeRogue.field.Pokemon, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyPreDefendAbAttrs(attrType: PokeRogue.Constructor<PreDefendAbAttr>, pokemon: PokeRogue.field.Pokemon, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move | null, cancelled: Utils.BooleanHolder | null, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyPostDefendAbAttrs(attrType: PokeRogue.Constructor<PostDefendAbAttr>, pokemon: PokeRogue.field.Pokemon, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult | null, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyPostMoveUsedAbAttrs(attrType: PokeRogue.Constructor<PostMoveUsedAbAttr>, pokemon: PokeRogue.field.Pokemon, move: PokeRogue.field.PokemonMove, source: PokeRogue.field.Pokemon, targets: PokeRogue.BattlerIndex[], simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyStatMultiplierAbAttrs(attrType: PokeRogue.Constructor<StatMultiplierAbAttr>, pokemon: PokeRogue.field.Pokemon, stat: BattleStat, statValue: Utils.NumberHolder, simulated?: boolean, ...args: any[]): Promise<void>;
  /**
   * Applies a field Stat multiplier attribute
   * @param attrType {@linkcode FieldMultiplyStatAbAttr} should always be FieldMultiplyBattleStatAbAttr for the time being
   * @param pokemon {@linkcode Pokemon} the Pokemon applying this ability
   * @param stat {@linkcode Stat} the type of the checked stat
   * @param statValue {@linkcode Utils.NumberHolder} the value of the checked stat
   * @param checkedPokemon {@linkcode Pokemon} the Pokemon with the checked stat
   * @param hasApplied {@linkcode Utils.BooleanHolder} whether or not a FieldMultiplyBattleStatAbAttr has already affected this stat
   * @param args unused
   */
  export declare function applyFieldStatMultiplierAbAttrs(attrType: PokeRogue.Constructor<FieldMultiplyStatAbAttr>, pokemon: PokeRogue.field.Pokemon, stat: PokeRogue.enums.Stat, statValue: Utils.NumberHolder, checkedPokemon: PokeRogue.field.Pokemon, hasApplied: Utils.BooleanHolder, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyPreAttackAbAttrs(attrType: PokeRogue.Constructor<PreAttackAbAttr>, pokemon: PokeRogue.field.Pokemon, defender: PokeRogue.field.Pokemon | null, move: PokeRogue.data.Move, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyPostAttackAbAttrs(attrType: PokeRogue.Constructor<PostAttackAbAttr>, pokemon: PokeRogue.field.Pokemon, defender: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult | null, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyPostKnockOutAbAttrs(attrType: PokeRogue.Constructor<PostKnockOutAbAttr>, pokemon: PokeRogue.field.Pokemon, knockedOut: PokeRogue.field.Pokemon, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyPostVictoryAbAttrs(attrType: PokeRogue.Constructor<PostVictoryAbAttr>, pokemon: PokeRogue.field.Pokemon, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyPostSummonAbAttrs(attrType: PokeRogue.Constructor<PostSummonAbAttr>, pokemon: PokeRogue.field.Pokemon, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyPreSwitchOutAbAttrs(attrType: PokeRogue.Constructor<PreSwitchOutAbAttr>, pokemon: PokeRogue.field.Pokemon, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyPreStatStageChangeAbAttrs(attrType: PokeRogue.Constructor<PreStatStageChangeAbAttr>, pokemon: PokeRogue.field.Pokemon | null, stat: BattleStat, cancelled: Utils.BooleanHolder, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyPostStatStageChangeAbAttrs(attrType: PokeRogue.Constructor<PostStatStageChangeAbAttr>, pokemon: PokeRogue.field.Pokemon, stats: BattleStat[], stages: integer, selfTarget: boolean, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyPreSetStatusAbAttrs(attrType: PokeRogue.Constructor<PreSetStatusAbAttr>, pokemon: PokeRogue.field.Pokemon, effect: PokeRogue.data.StatusEffect | undefined, cancelled: Utils.BooleanHolder, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyPreApplyBattlerTagAbAttrs(attrType: PokeRogue.Constructor<PreApplyBattlerTagAbAttr>, pokemon: PokeRogue.field.Pokemon, tag: PokeRogue.data.BattlerTag, cancelled: Utils.BooleanHolder, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyPreWeatherEffectAbAttrs(attrType: PokeRogue.Constructor<PreWeatherEffectAbAttr>, pokemon: PokeRogue.field.Pokemon, weather: PokeRogue.data.Weather | null, cancelled: Utils.BooleanHolder, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyPostTurnAbAttrs(attrType: PokeRogue.Constructor<PostTurnAbAttr>, pokemon: PokeRogue.field.Pokemon, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyPostWeatherChangeAbAttrs(attrType: PokeRogue.Constructor<PostWeatherChangeAbAttr>, pokemon: PokeRogue.field.Pokemon, weather: PokeRogue.data.WeatherType, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyPostWeatherLapseAbAttrs(attrType: PokeRogue.Constructor<PostWeatherLapseAbAttr>, pokemon: PokeRogue.field.Pokemon, weather: PokeRogue.data.Weather | null, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyPostTerrainChangeAbAttrs(attrType: PokeRogue.Constructor<PostTerrainChangeAbAttr>, pokemon: PokeRogue.field.Pokemon, terrain: PokeRogue.data.TerrainType, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyCheckTrappedAbAttrs(attrType: PokeRogue.Constructor<CheckTrappedAbAttr>, pokemon: PokeRogue.field.Pokemon, trapped: Utils.BooleanHolder, otherPokemon: PokeRogue.field.Pokemon, messages: string[], simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyPostBattleAbAttrs(attrType: PokeRogue.Constructor<PostBattleAbAttr>, pokemon: PokeRogue.field.Pokemon, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare function applyPostFaintAbAttrs(attrType: PokeRogue.Constructor<PostFaintAbAttr>, pokemon: PokeRogue.field.Pokemon, attacker: PokeRogue.field.Pokemon, move: PokeRogue.data.Move, hitResult: PokeRogue.field.HitResult, simulated?: boolean, ...args: any[]): Promise<void>;
  export declare const allAbilities: Ability[];
  export declare function initAbilities(): void;
  export {};
  
}

declare namespace PokeRogue.data {
  //import { Arena } from "../field/arena";
  //import { Type } from "./type";
  //import { MoveCategory } from "./move";
  //import Pokemon from "../field/pokemon";
  //import { BattlerIndex } from "../battle";
  //import { ArenaTagType } from "#enums/arena-tag-type";
  //import { Moves } from "#enums/moves";
  export declare enum ArenaTagSide {
      BOTH = 0,
      PLAYER = 1,
      ENEMY = 2
  }
  export declare abstract class ArenaTag {
      tagType: PokeRogue.enums.ArenaTagType;
      turnCount: integer;
      sourceMove?: Moves;
      sourceId?: integer;
      side: ArenaTagSide;
      constructor(tagType: PokeRogue.enums.ArenaTagType, turnCount: integer, sourceMove: PokeRogue.enums.Moves | undefined, sourceId?: integer, side?: ArenaTagSide);
      apply(arena: PokeRogue.field.Arena, args: any[]): boolean;
      onAdd(arena: PokeRogue.field.Arena, quiet?: boolean): void;
      onRemove(arena: PokeRogue.field.Arena, quiet?: boolean): void;
      onOverlap(arena: PokeRogue.field.Arena): void;
      lapse(arena: PokeRogue.field.Arena): boolean;
      getMoveName(): string | null;
  }
  /**
   * Arena Tag class for {@link https://bulbapedia.bulbagarden.net/wiki/Mist_(move) Mist}.
   * Prevents Pokémon on the opposing side from lowering the stats of the Pokémon in the Mist.
   */
  export declare class MistTag extends ArenaTag {
      constructor(turnCount: integer, sourceId: integer, side: ArenaTagSide);
      onAdd(arena: PokeRogue.field.Arena, quiet?: boolean): void;
      apply(arena: PokeRogue.field.Arena, args: any[]): boolean;
  }
  /**
   * Reduces the damage of specific move categories in the arena.
   * @extends ArenaTag
   */
  export declare class WeakenMoveScreenTag extends ArenaTag {
      protected weakenedCategories: PokeRogue.data.MoveCategory[];
      /**
       * Creates a new instance of the WeakenMoveScreenTag class.
       *
       * @param tagType - The type of the arena tag.
       * @param turnCount - The number of turns the tag is active.
       * @param sourceMove - The move that created the tag.
       * @param sourceId - The ID of the source of the tag.
       * @param side - The side (player or enemy) the tag affects.
       * @param weakenedCategories - The categories of moves that are weakened by this tag.
       */
      constructor(tagType: PokeRogue.enums.ArenaTagType, turnCount: integer, sourceMove: PokeRogue.enums.Moves, sourceId: integer, side: ArenaTagSide, weakenedCategories: PokeRogue.data.MoveCategory[]);
      /**
       * Applies the weakening effect to the move.
       *
       * @param arena - The arena where the move is applied.
       * @param args - The arguments for the move application.
       * @param args[0] - The category of the move.
       * @param args[1] - A boolean indicating whether it is a double battle.
       * @param args[2] - An object of type `Utils.NumberHolder` that holds the damage multiplier
       *
       * @returns True if the move was weakened, otherwise false.
       */
      apply(arena: PokeRogue.field.Arena, args: any[]): boolean;
  }
  type ProtectConditionFunc = (arena: PokeRogue.field.Arena, moveId: PokeRogue.enums.Moves) => boolean;
  /**
   * Class to implement conditional team protection
   * applies protection based on the attributes of incoming moves
   */
  export declare class ConditionalProtectTag extends ArenaTag {
      /** The condition function to determine which moves are negated */
      protected protectConditionFunc: ProtectConditionFunc;
      /** Does this apply to all moves, including those that ignore other forms of protection? */
      protected ignoresBypass: boolean;
      constructor(tagType: PokeRogue.enums.ArenaTagType, sourceMove: PokeRogue.enums.Moves, sourceId: integer, side: ArenaTagSide, condition: ProtectConditionFunc, ignoresBypass?: boolean);
      onAdd(arena: PokeRogue.field.Arena): void;
      onRemove(arena: PokeRogue.field.Arena): void;
      /**
       * apply(): Checks incoming moves against the condition function
       * and protects the target if conditions are met
       * @param arena The arena containing this tag
       * @param args\[0\] (Utils.BooleanHolder) Signals if the move is cancelled
       * @param args\[1\] (Pokemon) The Pokemon using the move
       * @param args\[2\] (Pokemon) The intended target of the move
       * @param args\[3\] (Moves) The parameters to the condition function
       * @param args\[4\] (Utils.BooleanHolder) Signals if the applied protection supercedes protection-ignoring effects
       * @returns
       */
      apply(arena: PokeRogue.field.Arena, args: any[]): boolean;
  }
  /**
   * Arena Tag class for {@link https://bulbapedia.bulbagarden.net/wiki/Lucky_Chant_(move) Lucky Chant}.
   * Prevents critical hits against the tag's side.
   */
  export declare class NoCritTag extends ArenaTag {
      /**
       * Constructor method for the NoCritTag class
       * @param turnCount `integer` the number of turns this effect lasts
       * @param sourceMove {@linkcode Moves} the move that created this effect
       * @param sourceId `integer` the ID of the {@linkcode Pokemon} that created this effect
       * @param side {@linkcode ArenaTagSide} the side to which this effect belongs
       */
      constructor(turnCount: integer, sourceMove: PokeRogue.enums.Moves, sourceId: integer, side: ArenaTagSide);
      /** Queues a message upon adding this effect to the field */
      onAdd(arena: PokeRogue.field.Arena): void;
      /** Queues a message upon removing this effect from the field */
      onRemove(arena: PokeRogue.field.Arena): void;
  }
  /**
   * Abstract class to implement weakened moves of a specific type.
   */
  export declare class WeakenMoveTypeTag extends ArenaTag {
      public weakenedType;
      /**
       * Creates a new instance of the WeakenMoveTypeTag class.
       *
       * @param tagType - The type of the arena tag.
       * @param turnCount - The number of turns the tag is active.
       * @param type - The type being weakened from this tag.
       * @param sourceMove - The move that created the tag.
       * @param sourceId - The ID of the source of the tag.
       */
      constructor(tagType: PokeRogue.enums.ArenaTagType, turnCount: integer, type: PokeRogue.data.Type, sourceMove: PokeRogue.enums.Moves, sourceId: integer);
      apply(arena: PokeRogue.field.Arena, args: any[]): boolean;
  }
  /**
   * Abstract class to implement arena traps.
   */
  export declare class ArenaTrapTag extends ArenaTag {
      layers: integer;
      maxLayers: integer;
      /**
       * Creates a new instance of the ArenaTrapTag class.
       *
       * @param tagType - The type of the arena tag.
       * @param sourceMove - The move that created the tag.
       * @param sourceId - The ID of the source of the tag.
       * @param side - The side (player or enemy) the tag affects.
       * @param maxLayers - The maximum amount of layers this tag can have.
       */
      constructor(tagType: PokeRogue.enums.ArenaTagType, sourceMove: PokeRogue.enums.Moves, sourceId: integer, side: ArenaTagSide, maxLayers: integer);
      onOverlap(arena: PokeRogue.field.Arena): void;
      apply(arena: PokeRogue.field.Arena, args: any[]): boolean;
      activateTrap(pokemon: PokeRogue.field.Pokemon): boolean;
      getMatchupScoreMultiplier(pokemon: PokeRogue.field.Pokemon): number;
  }
  /**
   * Arena Tag class for {@link https://bulbapedia.bulbagarden.net/wiki/Trick_Room_(move) Trick Room}.
   * Reverses the Speed stats for all Pokémon on the field as long as this arena tag is up,
   * also reversing the turn order for all Pokémon on the field as well.
   */
  export declare class TrickRoomTag extends ArenaTag {
      constructor(turnCount: integer, sourceId: integer);
      apply(arena: PokeRogue.field.Arena, args: any[]): boolean;
      onAdd(arena: PokeRogue.field.Arena): void;
      onRemove(arena: PokeRogue.field.Arena): void;
  }
  /**
   * Arena Tag class for {@link https://bulbapedia.bulbagarden.net/wiki/Gravity_(move) Gravity}.
   * Grounds all Pokémon on the field, including Flying-types and those with
   * {@linkcode Abilities.LEVITATE} for the duration of the arena tag, usually 5 turns.
   */
  export declare class GravityTag extends ArenaTag {
      constructor(turnCount: integer);
      onAdd(arena: PokeRogue.field.Arena): void;
      onRemove(arena: PokeRogue.field.Arena): void;
  }
  export declare function getArenaTag(tagType: PokeRogue.enums.ArenaTagType, turnCount: integer, sourceMove: PokeRogue.enums.Moves | undefined, sourceId: integer, targetIndex?: BattlerIndex, side?: ArenaTagSide): ArenaTag | null;
  export {};
  
}

declare namespace PokeRogue.data {
  //import BattleScene from "../battle-scene";
  //import Pokemon from "../field/pokemon";
  //import { BattlerIndex } from "../battle";
  //import { Moves } from "#enums/moves";
  export declare enum AnimFrameTarget {
      USER = 0,
      TARGET = 1,
      GRAPHIC = 2
  }
  declare enum AnimFocus {
      TARGET = 1,
      USER = 2,
      USER_TARGET = 3,
      SCREEN = 4
  }
  declare enum AnimBlendType {
      NORMAL = 0,
      ADD = 1,
      SUBTRACT = 2
  }
  export declare enum ChargeAnim {
      FLY_CHARGING = 1000,
      BOUNCE_CHARGING = 1001,
      DIG_CHARGING = 1002,
      FUTURE_SIGHT_CHARGING = 1003,
      DIVE_CHARGING = 1004,
      SOLAR_BEAM_CHARGING = 1005,
      SHADOW_FORCE_CHARGING = 1006,
      SKULL_BASH_CHARGING = 1007,
      FREEZE_SHOCK_CHARGING = 1008,
      SKY_DROP_CHARGING = 1009,
      SKY_ATTACK_CHARGING = 1010,
      ICE_BURN_CHARGING = 1011,
      DOOM_DESIRE_CHARGING = 1012,
      RAZOR_WIND_CHARGING = 1013,
      PHANTOM_FORCE_CHARGING = 1014,
      GEOMANCY_CHARGING = 1015,
      SHADOW_BLADE_CHARGING = 1016,
      SOLAR_BLADE_CHARGING = 1017,
      BEAK_BLAST_CHARGING = 1018,
      METEOR_BEAM_CHARGING = 1019,
      ELECTRO_SHOT_CHARGING = 1020
  }
  export declare enum CommonAnim {
      USE_ITEM = 2000,
      HEALTH_UP = 2001,
      POISON = 2010,
      TOXIC = 2011,
      PARALYSIS = 2012,
      SLEEP = 2013,
      FROZEN = 2014,
      BURN = 2015,
      CONFUSION = 2016,
      ATTRACT = 2017,
      BIND = 2018,
      WRAP = 2019,
      CURSE_NO_GHOST = 2020,
      LEECH_SEED = 2021,
      FIRE_SPIN = 2022,
      PROTECT = 2023,
      COVET = 2024,
      WHIRLPOOL = 2025,
      BIDE = 2026,
      SAND_TOMB = 2027,
      QUICK_GUARD = 2028,
      WIDE_GUARD = 2029,
      CURSE = 2030,
      MAGMA_STORM = 2031,
      CLAMP = 2032,
      SNAP_TRAP = 2033,
      THUNDER_CAGE = 2034,
      INFESTATION = 2035,
      ORDER_UP_CURLY = 2036,
      ORDER_UP_DROOPY = 2037,
      ORDER_UP_STRETCHY = 2038,
      RAGING_BULL_FIRE = 2039,
      RAGING_BULL_WATER = 2040,
      SALT_CURE = 2041,
      SUNNY = 2100,
      RAIN = 2101,
      SANDSTORM = 2102,
      HAIL = 2103,
      SNOW = 2104,
      WIND = 2105,
      HEAVY_RAIN = 2106,
      HARSH_SUN = 2107,
      STRONG_WINDS = 2108,
      MISTY_TERRAIN = 2110,
      ELECTRIC_TERRAIN = 2111,
      GRASSY_TERRAIN = 2112,
      PSYCHIC_TERRAIN = 2113,
      LOCK_ON = 2120
  }
  export declare class AnimConfig {
      id: integer;
      graphic: string;
      frames: AnimFrame[][];
      frameTimedEvents: Map<integer, AnimTimedEvent[]>;
      position: integer;
      hue: integer;
      constructor(source?: any);
      getSoundResourceNames(): string[];
      getBackgroundResourceNames(): string[];
  }
  declare class AnimFrame {
      x: number;
      y: number;
      zoomX: number;
      zoomY: number;
      angle: number;
      mirror: boolean;
      visible: boolean;
      blendType: AnimBlendType;
      target: AnimFrameTarget;
      graphicFrame: integer;
      opacity: integer;
      color: integer[];
      tone: integer[];
      flash: integer[];
      locked: boolean;
      priority: integer;
      focus: AnimFocus;
      constructor(x: number, y: number, zoomX: number, zoomY: number, angle: number, mirror: boolean, visible: boolean, blendType: AnimBlendType, pattern: integer, opacity: integer, colorR: integer, colorG: integer, colorB: integer, colorA: integer, toneR: integer, toneG: integer, toneB: integer, toneA: integer, flashR: integer, flashG: integer, flashB: integer, flashA: integer, locked: boolean, priority: integer, focus: AnimFocus, init?: boolean);
  }
  declare abstract class AnimTimedEvent {
      frameIndex: integer;
      resourceName: string;
      constructor(frameIndex: integer, resourceName: string);
      abstract execute(scene: PokeRogue.BattleScene, battleAnim: BattleAnim): integer;
      abstract getEventType(): string;
  }
  export declare const moveAnims: Map<Moves, AnimConfig | [AnimConfig, AnimConfig]>;
  export declare const chargeAnims: Map<ChargeAnim, AnimConfig | [AnimConfig, AnimConfig]>;
  export declare const commonAnims: Map<CommonAnim, AnimConfig>;
  export declare function initCommonAnims(scene: PokeRogue.BattleScene): Promise<void>;
  export declare function initMoveAnim(scene: PokeRogue.BattleScene, move: PokeRogue.enums.Moves): Promise<void>;
  export declare function initMoveChargeAnim(scene: PokeRogue.BattleScene, chargeAnim: ChargeAnim): Promise<void>;
  export declare function loadCommonAnimAssets(scene: PokeRogue.BattleScene, startLoad?: boolean): Promise<void>;
  export declare function loadMoveAnimAssets(scene: PokeRogue.BattleScene, moveIds: PokeRogue.enums.Moves[], startLoad?: boolean): Promise<void>;
  export declare abstract class BattleAnim {
      user: PokeRogue.field.Pokemon | null;
      target: PokeRogue.field.Pokemon | null;
      sprites: Phaser.GameObjects.Sprite[];
      bgSprite: Phaser.GameObjects.TileSprite | Phaser.GameObjects.Rectangle;
      public srcLine;
      public dstLine;
      constructor(user?: Pokemon, target?: Pokemon);
      abstract getAnim(): AnimConfig | null;
      abstract isOppAnim(): boolean;
      protected isHideUser(): boolean;
      protected isHideTarget(): boolean;
      public getGraphicFrameData;
      play(scene: PokeRogue.BattleScene, callback?: Function): void;
  }
  export declare class CommonBattleAnim extends BattleAnim {
      commonAnim: CommonAnim | null;
      constructor(commonAnim: CommonAnim | null, user: PokeRogue.field.Pokemon, target?: Pokemon);
      getAnim(): AnimConfig | null;
      isOppAnim(): boolean;
  }
  export declare class MoveAnim extends BattleAnim {
      move: PokeRogue.enums.Moves;
      constructor(move: PokeRogue.enums.Moves, user: PokeRogue.field.Pokemon, target: PokeRogue.BattlerIndex);
      getAnim(): AnimConfig;
      isOppAnim(): boolean;
      protected isHideUser(): boolean;
      protected isHideTarget(): boolean;
  }
  export declare class MoveChargeAnim extends MoveAnim {
      public chargeAnim;
      constructor(chargeAnim: ChargeAnim, move: PokeRogue.enums.Moves, user: PokeRogue.field.Pokemon);
      isOppAnim(): boolean;
      getAnim(): AnimConfig;
  }
  export declare function populateAnims(): Promise<void>;
  export {};
  
}

declare namespace PokeRogue.data {
  //import { CommonAnim } from "./battle-anims";
  //import Pokemon from "../field/pokemon";
  //import { Type } from "./type";
  //import { TerrainType } from "./terrain";
  //import { WeatherType } from "./weather";
  //import { Abilities } from "#enums/abilities";
  //import { BattlerTagType } from "#enums/battler-tag-type";
  //import { Moves } from "#enums/moves";
  //import { Stat, type BattleStat } from "#app/enums/stat";
  export declare enum BattlerTagLapseType {
      FAINT = 0,
      MOVE = 1,
      PRE_MOVE = 2,
      AFTER_MOVE = 3,
      MOVE_EFFECT = 4,
      TURN_END = 5,
      CUSTOM = 6
  }
  export declare class BattlerTag {
      tagType: PokeRogue.enums.BattlerTagType;
      lapseTypes: BattlerTagLapseType[];
      turnCount: number;
      sourceMove: PokeRogue.enums.Moves;
      sourceId?: number;
      isBatonPassable: boolean;
      constructor(tagType: PokeRogue.enums.BattlerTagType, lapseType: BattlerTagLapseType | BattlerTagLapseType[], turnCount: number, sourceMove?: Moves, sourceId?: number, isBatonPassable?: boolean);
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
      onOverlap(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      getDescriptor(): string;
      isSourceLinked(): boolean;
      getMoveName(): string | null;
      /**
      * When given a battler tag or json representing one, load the data for it.
      * This is meant to be inherited from by any battler tag with custom attributes
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
  }
  export interface WeatherBattlerTag {
      weatherTypes: PokeRogue.data.WeatherType[];
  }
  export interface TerrainBattlerTag {
      terrainTypes: PokeRogue.data.TerrainType[];
  }
  /**
   * Base class for tags that restrict the usage of moves. This effect is generally referred to as "disabling" a move
   * in-game. This is not to be confused with {@linkcode Moves.DISABLE}.
   *
   * Descendants can override {@linkcode isMoveRestricted} to restrict moves that
   * match a condition. A restricted move gets cancelled before it is used. Players and enemies should not be allowed
   * to select restricted moves.
   */
  export declare abstract class MoveRestrictionBattlerTag extends BattlerTag {
      constructor(tagType: PokeRogue.enums.BattlerTagType, turnCount: integer, sourceMove?: Moves, sourceId?: integer);
      /** @override */
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      /**
       * Gets whether this tag is restricting a move.
       *
       * @param {Moves} move {@linkcode Moves} ID to check restriction for.
       * @returns {boolean} `true` if the move is restricted by this tag, otherwise `false`.
       */
      abstract isMoveRestricted(move: PokeRogue.enums.Moves): boolean;
      /**
       * Gets the text to display when the player attempts to select a move that is restricted by this tag.
       *
       * @param {Pokemon} pokemon {@linkcode Pokemon} for which the player is attempting to select the restricted move
       * @param {Moves} move {@linkcode Moves} ID of the move that is having its selection denied
       * @returns {string} text to display when the player attempts to select the restricted move
       */
      abstract selectionDeniedText(pokemon: PokeRogue.field.Pokemon, move: PokeRogue.enums.Moves): string;
      /**
       * Gets the text to display when a move's execution is prevented as a result of the restriction.
       * Because restriction effects also prevent selection of the move, this situation can only arise if a
       * pokemon first selects a move, then gets outsped by a pokemon using a move that restricts the selected move.
       *
       * @param {Pokemon} pokemon {@linkcode Pokemon} attempting to use the restricted move
       * @param {Moves} move {@linkcode Moves} ID of the move being interrupted
       * @returns {string} text to display when the move is interrupted
       */
      abstract interruptedText(pokemon: PokeRogue.field.Pokemon, move: PokeRogue.enums.Moves): string;
  }
  /**
   * Tag representing the "disabling" effect performed by {@linkcode Moves.DISABLE} and {@linkcode Abilities.CURSED_BODY}.
   * When the tag is added, the last-used move of the tag holder is set as the disabled move.
   */
  export declare class DisabledTag extends MoveRestrictionBattlerTag {
      /** The move being disabled. Gets set when {@linkcode onAdd} is called for this tag. */
      public moveId;
      constructor(sourceId: number);
      /** @override */
      isMoveRestricted(move: PokeRogue.enums.Moves): boolean;
      /**
       * @override
       *
       * Ensures that move history exists on `pokemon` and has a valid move. If so, sets the {@link moveId} and shows a message.
       * Otherwise the move ID will not get assigned and this tag will get removed next turn.
       */
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      /** @override */
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
      /** @override */
      selectionDeniedText(pokemon: PokeRogue.field.Pokemon, move: PokeRogue.enums.Moves): string;
      /** @override */
      interruptedText(pokemon: PokeRogue.field.Pokemon, move: PokeRogue.enums.Moves): string;
      /** @override */
      loadTag(source: BattlerTag | any): void;
  }
  /**
   * BattlerTag that represents the "recharge" effects of moves like Hyper Beam.
   */
  export declare class RechargingTag extends BattlerTag {
      constructor(sourceMove: PokeRogue.enums.Moves);
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      /** Cancels the source's move this turn and queues a "__ must recharge!" message */
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  /**
   * BattlerTag representing the "charge phase" of Beak Blast.
   * Pokemon with this tag will inflict BURN status on any attacker that makes contact.
   * @see {@link https://bulbapedia.bulbagarden.net/wiki/Beak_Blast_(move) | Beak Blast}
   */
  export declare class BeakBlastChargingTag extends BattlerTag {
      constructor();
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      /**
       * Inflicts `BURN` status on attackers that make contact, and causes this tag
       * to be removed after the source makes a move (or the turn ends, whichever comes first)
       * @param pokemon {@linkcode Pokemon} the owner of this tag
       * @param lapseType {@linkcode BattlerTagLapseType} the type of functionality invoked in battle
       * @returns `true` if invoked with the CUSTOM lapse type; `false` otherwise
       */
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  /**
   * BattlerTag implementing Shell Trap's pre-move behavior.
   * Pokemon with this tag will act immediately after being hit by a physical move.
   * @see {@link https://bulbapedia.bulbagarden.net/wiki/Shell_Trap_(move) | Shell Trap}
   */
  export declare class ShellTrapTag extends BattlerTag {
      activated: boolean;
      constructor();
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      /**
       * "Activates" the shell trap, causing the tag owner to move next.
       * @param pokemon {@linkcode Pokemon} the owner of this tag
       * @param lapseType {@linkcode BattlerTagLapseType} the type of functionality invoked in battle
       * @returns `true` if invoked with the `CUSTOM` lapse type; `false` otherwise
       */
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class TrappedTag extends BattlerTag {
      constructor(tagType: PokeRogue.enums.BattlerTagType, lapseType: BattlerTagLapseType, turnCount: number, sourceMove: PokeRogue.enums.Moves, sourceId: number);
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
      getDescriptor(): string;
      isSourceLinked(): boolean;
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
  }
  /**
   * BattlerTag that represents the {@link https://bulbapedia.bulbagarden.net/wiki/Flinch Flinch} status condition
   */
  export declare class FlinchedTag extends BattlerTag {
      constructor(sourceMove: PokeRogue.enums.Moves);
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      /**
       * Cancels the Pokemon's next Move on the turn this tag is applied
       * @param pokemon The {@linkcode Pokemon} with this tag
       * @param lapseType The {@linkcode BattlerTagLapseType lapse type} used for this function call
       * @returns `false` (This tag is always removed after applying its effects)
       */
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      getDescriptor(): string;
  }
  export declare class InterruptedTag extends BattlerTag {
      constructor(sourceMove: PokeRogue.enums.Moves);
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  /**
   * BattlerTag that represents the {@link https://bulbapedia.bulbagarden.net/wiki/Confusion_(status_condition) Confusion} status condition
   */
  export declare class ConfusedTag extends BattlerTag {
      constructor(turnCount: number, sourceMove: PokeRogue.enums.Moves);
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
      onOverlap(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      getDescriptor(): string;
  }
  /**
   * Tag applied to the {@linkcode Move.DESTINY_BOND} user.
   * @extends BattlerTag
   * @see {@linkcode apply}
   */
  export declare class DestinyBondTag extends BattlerTag {
      constructor(sourceMove: PokeRogue.enums.Moves, sourceId: number);
      /**
       * Lapses either before the user's move and does nothing
       * or after receiving fatal damage. When the damage is fatal,
       * the attacking Pokemon is taken down as well, unless it's a boss.
       *
       * @param {Pokemon} pokemon Pokemon that is attacking the Destiny Bond user.
       * @param {BattlerTagLapseType} lapseType CUSTOM or PRE_MOVE
       * @returns false if the tag source fainted or one turn has passed since the application
       */
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class InfatuatedTag extends BattlerTag {
      constructor(sourceMove: number, sourceId: number);
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      onOverlap(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
      isSourceLinked(): boolean;
      getDescriptor(): string;
  }
  export declare class SeedTag extends BattlerTag {
      public sourceIndex;
      constructor(sourceId: number);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      getDescriptor(): string;
  }
  export declare class NightmareTag extends BattlerTag {
      constructor();
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      onOverlap(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      getDescriptor(): string;
  }
  export declare class FrenzyTag extends BattlerTag {
      constructor(turnCount: number, sourceMove: PokeRogue.enums.Moves, sourceId: number);
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
  }
  export declare class EncoreTag extends BattlerTag {
      moveId: PokeRogue.enums.Moves;
      constructor(sourceId: number);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
  }
  export declare class HelpingHandTag extends BattlerTag {
      constructor(sourceId: number);
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
  }
  /**
   * Applies the Ingrain tag to a pokemon
   * @extends TrappedTag
   */
  export declare class IngrainTag extends TrappedTag {
      constructor(sourceId: number);
      /**
       * Check if the Ingrain tag can be added to the pokemon
       * @param pokemon {@linkcode Pokemon} The pokemon to check if the tag can be added to
       * @returns boolean True if the tag can be added, false otherwise
       */
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
      getDescriptor(): string;
  }
  /**
   * Octolock traps the target pokemon and reduces its DEF and SPDEF by one stage at the
   * end of each turn.
   */
  export declare class OctolockTag extends TrappedTag {
      constructor(sourceId: number);
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class AquaRingTag extends BattlerTag {
      constructor();
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  /** Tag used to allow moves that interact with {@link Moves.MINIMIZE} to function */
  export declare class MinimizeTag extends BattlerTag {
      constructor();
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
  }
  export declare class DrowsyTag extends BattlerTag {
      constructor();
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      getDescriptor(): string;
  }
  export declare abstract class DamagingTrapTag extends TrappedTag {
      public commonAnim;
      constructor(tagType: PokeRogue.enums.BattlerTagType, commonAnim: PokeRogue.data.CommonAnim, turnCount: number, sourceMove: PokeRogue.enums.Moves, sourceId: number);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class BindTag extends DamagingTrapTag {
      constructor(turnCount: number, sourceId: number);
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
  }
  export declare class WrapTag extends DamagingTrapTag {
      constructor(turnCount: number, sourceId: number);
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
  }
  export declare abstract class VortexTrapTag extends DamagingTrapTag {
      constructor(tagType: PokeRogue.enums.BattlerTagType, commonAnim: PokeRogue.data.CommonAnim, turnCount: number, sourceMove: PokeRogue.enums.Moves, sourceId: number);
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
  }
  export declare class FireSpinTag extends VortexTrapTag {
      constructor(turnCount: number, sourceId: number);
  }
  export declare class WhirlpoolTag extends VortexTrapTag {
      constructor(turnCount: number, sourceId: number);
  }
  export declare class ClampTag extends DamagingTrapTag {
      constructor(turnCount: number, sourceId: number);
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
  }
  export declare class SandTombTag extends DamagingTrapTag {
      constructor(turnCount: number, sourceId: number);
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
  }
  export declare class MagmaStormTag extends DamagingTrapTag {
      constructor(turnCount: number, sourceId: number);
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
  }
  export declare class SnapTrapTag extends DamagingTrapTag {
      constructor(turnCount: number, sourceId: number);
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
  }
  export declare class ThunderCageTag extends DamagingTrapTag {
      constructor(turnCount: number, sourceId: number);
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
  }
  export declare class InfestationTag extends DamagingTrapTag {
      constructor(turnCount: number, sourceId: number);
      getTrapMessage(pokemon: PokeRogue.field.Pokemon): string;
  }
  export declare class ProtectedTag extends BattlerTag {
      constructor(sourceMove: PokeRogue.enums.Moves, tagType?: BattlerTagType);
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class ContactDamageProtectedTag extends ProtectedTag {
      public damageRatio;
      constructor(sourceMove: PokeRogue.enums.Moves, damageRatio: number);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class ContactStatStageChangeProtectedTag extends ProtectedTag {
      public stat;
      public levels;
      constructor(sourceMove: PokeRogue.enums.Moves, tagType: PokeRogue.enums.BattlerTagType, stat: BattleStat, levels: number);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class ContactPoisonProtectedTag extends ProtectedTag {
      constructor(sourceMove: PokeRogue.enums.Moves);
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class ContactBurnProtectedTag extends ProtectedTag {
      constructor(sourceMove: PokeRogue.enums.Moves);
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class EnduringTag extends BattlerTag {
      constructor(sourceMove: PokeRogue.enums.Moves);
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class SturdyTag extends BattlerTag {
      constructor(sourceMove: PokeRogue.enums.Moves);
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class PerishSongTag extends BattlerTag {
      constructor(turnCount: number);
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  /**
   * Applies the "Center of Attention" volatile status effect, the effect applied by Follow Me, Rage Powder, and Spotlight.
   * @see {@link https://bulbapedia.bulbagarden.net/wiki/Center_of_attention | Center of Attention}
   */
  export declare class CenterOfAttentionTag extends BattlerTag {
      powder: boolean;
      constructor(sourceMove: PokeRogue.enums.Moves);
      /** "Center of Attention" can't be added if an ally is already the Center of Attention. */
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
  }
  export declare class AbilityBattlerTag extends BattlerTag {
      ability: PokeRogue.enums.Abilities;
      constructor(tagType: PokeRogue.enums.BattlerTagType, ability: PokeRogue.enums.Abilities, lapseType: BattlerTagLapseType, turnCount: number);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
  }
  export declare class TruantTag extends AbilityBattlerTag {
      constructor();
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class SlowStartTag extends AbilityBattlerTag {
      constructor();
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
  }
  export declare class HighestStatBoostTag extends AbilityBattlerTag {
      stat: PokeRogue.enums.Stat;
      multiplier: number;
      constructor(tagType: PokeRogue.enums.BattlerTagType, ability: PokeRogue.enums.Abilities);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
  }
  export declare class WeatherHighestStatBoostTag extends HighestStatBoostTag implements WeatherBattlerTag {
      weatherTypes: PokeRogue.data.WeatherType[];
      constructor(tagType: PokeRogue.enums.BattlerTagType, ability: PokeRogue.enums.Abilities, ...weatherTypes: PokeRogue.data.WeatherType[]);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
  }
  export declare class TerrainHighestStatBoostTag extends HighestStatBoostTag implements TerrainBattlerTag {
      terrainTypes: PokeRogue.data.TerrainType[];
      constructor(tagType: PokeRogue.enums.BattlerTagType, ability: PokeRogue.enums.Abilities, ...terrainTypes: PokeRogue.data.TerrainType[]);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
  }
  export declare class SemiInvulnerableTag extends BattlerTag {
      constructor(tagType: PokeRogue.enums.BattlerTagType, turnCount: number, sourceMove: PokeRogue.enums.Moves);
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
  }
  export declare class TypeImmuneTag extends BattlerTag {
      immuneType: PokeRogue.data.Type;
      constructor(tagType: PokeRogue.enums.BattlerTagType, sourceMove: PokeRogue.enums.Moves, immuneType: PokeRogue.data.Type, length?: number);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
  }
  export declare class MagnetRisenTag extends TypeImmuneTag {
      constructor(tagType: PokeRogue.enums.BattlerTagType, sourceMove: PokeRogue.enums.Moves);
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
  }
  export declare class TypeBoostTag extends BattlerTag {
      boostedType: PokeRogue.data.Type;
      boostValue: number;
      oneUse: boolean;
      constructor(tagType: PokeRogue.enums.BattlerTagType, sourceMove: PokeRogue.enums.Moves, boostedType: PokeRogue.data.Type, boostValue: number, oneUse: boolean);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class CritBoostTag extends BattlerTag {
      constructor(tagType: PokeRogue.enums.BattlerTagType, sourceMove: PokeRogue.enums.Moves);
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
  }
  /**
   * Tag for the effects of Dragon Cheer, which boosts the critical hit ratio of the user's allies.
   * @extends {CritBoostTag}
   */
  export declare class DragonCheerTag extends CritBoostTag {
      /** The types of the user's ally when the tag is added */
      typesOnAdd: PokeRogue.data.Type[];
      constructor();
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
  }
  export declare class SaltCuredTag extends BattlerTag {
      public sourceIndex;
      constructor(sourceId: number);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  export declare class CursedTag extends BattlerTag {
      public sourceIndex;
      constructor(sourceId: number);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      lapse(pokemon: PokeRogue.field.Pokemon, lapseType: BattlerTagLapseType): boolean;
  }
  /**
   * Battler tag for effects that ground the source, allowing Ground-type moves to hit them. Encompasses two tag types:
   * @item `IGNORE_FLYING`: Persistent grounding effects (i.e. from Smack Down and Thousand Waves)
   * @item `ROOSTED`: One-turn grounding effects (i.e. from Roost)
   */
  export declare class GroundedTag extends BattlerTag {
      constructor(tagType: PokeRogue.enums.BattlerTagType, lapseType: BattlerTagLapseType, sourceMove: PokeRogue.enums.Moves);
  }
  /** Common attributes of form change abilities that block damage */
  export declare class FormBlockDamageTag extends BattlerTag {
      constructor(tagType: PokeRogue.enums.BattlerTagType);
      /**
       * Determines if the tag can be added to the Pokémon.
       * @param {Pokemon} pokemon The Pokémon to which the tag might be added.
       * @returns {boolean} True if the tag can be added, false otherwise.
       */
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      /**
       * Applies the tag to the Pokémon.
       * Triggers a form change if the Pokémon is not in its defense form.
       * @param {Pokemon} pokemon The Pokémon to which the tag is added.
       */
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      /**
       * Removes the tag from the Pokémon.
       * Triggers a form change when the tag is removed.
       * @param {Pokemon} pokemon The Pokémon from which the tag is removed.
       */
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
  }
  /** Provides the additional weather-based effects of the Ice Face ability */
  export declare class IceFaceBlockDamageTag extends FormBlockDamageTag {
      constructor(tagType: PokeRogue.enums.BattlerTagType);
      /**
       * Determines if the tag can be added to the Pokémon.
       * @param {Pokemon} pokemon The Pokémon to which the tag might be added.
       * @returns {boolean} True if the tag can be added, false otherwise.
       */
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  /**
   * Battler tag enabling the Stockpile mechanic. This tag handles:
   * - Stack tracking, including max limit enforcement (which is replicated in Stockpile for redundancy).
   *
   * - Stat changes on adding a stack. Adding a stockpile stack attempts to raise the pokemon's DEF and SPDEF by +1.
   *
   * - Stat changes on removal of (all) stacks.
   *   - Removing stacks decreases DEF and SPDEF, independently, by one stage for each stack that successfully changed
   *     the stat when added.
   */
  export declare class StockpilingTag extends BattlerTag {
      stockpiledCount: number;
      statChangeCounts: {
          [Stat.DEF]: number;
          [Stat.SPDEF]: number;
      };
      constructor(sourceMove?: Moves);
      public onStatStagesChanged;
      loadTag(source: BattlerTag | any): void;
      /**
       * Adds a stockpile stack to a pokemon, up to a maximum of 3 stacks. Note that onOverlap defers to this method.
       *
       * If a stack is added, a message is displayed and the pokemon's DEF and SPDEF are increased by 1.
       * For each stat, an internal counter is incremented (by 1) if the stat was successfully changed.
       */
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      onOverlap(pokemon: PokeRogue.field.Pokemon): void;
      /**
       * Removing the tag removes all stacks, and the pokemon's DEF and SPDEF are decreased by
       * one stage for each stack which had successfully changed that particular stat during onAdd.
       */
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
  }
  /**
   * Battler tag for Gulp Missile used by Cramorant.
   * @extends BattlerTag
   */
  export declare class GulpMissileTag extends BattlerTag {
      constructor(tagType: PokeRogue.enums.BattlerTagType, sourceMove: PokeRogue.enums.Moves);
      /**
       * Gulp Missile's initial form changes are triggered by using Surf and Dive.
       * @param {Pokemon} pokemon The Pokemon with Gulp Missile ability.
       * @returns Whether the BattlerTag can be added.
       */
      canAdd(pokemon: PokeRogue.field.Pokemon): boolean;
      onAdd(pokemon: PokeRogue.field.Pokemon): void;
      onRemove(pokemon: PokeRogue.field.Pokemon): void;
  }
  /**
   * Tag that makes the target drop all of it type immunities
   * and all accuracy checks ignore its evasiveness stat.
   *
   * Applied by moves: {@linkcode Moves.ODOR_SLEUTH | Odor Sleuth},
   * {@linkcode Moves.MIRACLE_EYE | Miracle Eye} and {@linkcode Moves.FORESIGHT | Foresight}.
   *
   * @extends BattlerTag
   * @see {@linkcode ignoreImmunity}
   */
  export declare class ExposedTag extends BattlerTag {
      public defenderType;
      public allowedTypes;
      constructor(tagType: PokeRogue.enums.BattlerTagType, sourceMove: PokeRogue.enums.Moves, defenderType: PokeRogue.data.Type, allowedTypes: PokeRogue.data.Type[]);
      /**
      * When given a battler tag or json representing one, load the data for it.
      * @param {BattlerTag | any} source A battler tag
      */
      loadTag(source: BattlerTag | any): void;
      /**
       * @param types {@linkcode Type} of the defending Pokemon
       * @param moveType {@linkcode Type} of the move targetting it
       * @returns `true` if the move should be allowed to target the defender.
       */
      ignoreImmunity(type: PokeRogue.data.Type, moveType: PokeRogue.data.Type): boolean;
  }
  export declare function getBattlerTag(tagType: PokeRogue.enums.BattlerTagType, turnCount: number, sourceMove: PokeRogue.enums.Moves, sourceId: number): BattlerTag;
  /**
  * When given a battler tag or json representing one, creates an actual BattlerTag object with the same data.
  * @param {BattlerTag | any} source A battler tag
  * @return {BattlerTag} The valid battler tag
  */
  export declare function loadBattlerTag(source: BattlerTag | any): BattlerTag;
  
}

declare namespace PokeRogue.data {
  //import Pokemon from "../field/pokemon";
  //import { BerryType } from "#enums/berry-type";
  export declare function getBerryName(berryType: PokeRogue.enums.BerryType): string;
  export declare function getBerryEffectDescription(berryType: PokeRogue.enums.BerryType): string;
  export type BerryPredicate = (pokemon: PokeRogue.field.Pokemon) => boolean;
  export declare function getBerryPredicate(berryType: PokeRogue.enums.BerryType): BerryPredicate;
  export type BerryEffectFunc = (pokemon: PokeRogue.field.Pokemon) => void;
  export declare function getBerryEffectFunc(berryType: PokeRogue.enums.BerryType): BerryEffectFunc;
  
}

declare namespace PokeRogue.data {
  //import { Biome } from "#enums/biome";
  //import { Species } from "#enums/species";
  //import { TrainerType } from "#enums/trainer-type";
  export declare function getBiomeName(biome: PokeRogue.enums.Biome | -1): string;
  interface BiomeLinks {
      [key: integer]: Biome | (Biome | [Biome, integer])[];
  }
  interface BiomeDepths {
      [key: integer]: [integer, integer];
  }
  export declare const biomeLinks: BiomeLinks;
  export declare const biomeDepths: BiomeDepths;
  export declare enum BiomePoolTier {
      COMMON = 0,
      UNCOMMON = 1,
      RARE = 2,
      SUPER_RARE = 3,
      ULTRA_RARE = 4,
      BOSS = 5,
      BOSS_RARE = 6,
      BOSS_SUPER_RARE = 7,
      BOSS_ULTRA_RARE = 8
  }
  export declare const uncatchableSpecies: PokeRogue.enums.Species[];
  export interface SpeciesTree {
      [key: integer]: Species[];
  }
  export interface PokemonPools {
      [key: integer]: (Species | SpeciesTree)[];
  }
  export interface BiomeTierPokemonPools {
      [key: integer]: PokemonPools;
  }
  export interface BiomePokemonPools {
      [key: integer]: BiomeTierPokemonPools;
  }
  export interface BiomeTierTrainerPools {
      [key: integer]: TrainerType[];
  }
  export interface BiomeTrainerPools {
      [key: integer]: BiomeTierTrainerPools;
  }
  export declare const biomePokemonPools: BiomePokemonPools;
  export declare const biomeTrainerPools: BiomeTrainerPools;
  export declare function initBiomes(): void;
  export {};
  
}

declare namespace PokeRogue.data {
  //import * as Utils from "../utils";
  //import { DexAttrProps, GameData } from "#app/system/game-data.js";
  //import PokemonSpecies from "./pokemon-species";
  //import Pokemon from "#app/field/pokemon.js";
  //import { FixedBattleConfig } from "#app/battle.js";
  //import { GameMode } from "#app/game-mode.js";
  //import { Challenges } from "#enums/challenges";
  //import { Species } from "#enums/species";
  //import { Moves } from "#app/enums/moves.js";
  /**
   * An enum for all the challenge types. The parameter entries on these describe the
   * parameters to use when calling the applyChallenges function.
   */
  export declare enum ChallengeType {
      /**
       * Challenges which modify what starters you can choose
       * @see {@link Challenge.applyStarterChoice}
      */
      STARTER_CHOICE = 0,
      /**
       * Challenges which modify how many starter points you have
       * @see {@link Challenge.applyStarterPoints}
      */
      STARTER_POINTS = 1,
      /**
       * Challenges which modify how many starter points you have
       * @see {@link Challenge.applyStarterPointCost}
      */
      STARTER_COST = 2,
      /**
       * Challenges which modify your starters in some way
       * @see {@link Challenge.applyStarterModify}
      */
      STARTER_MODIFY = 3,
      /**
       * Challenges which limit which pokemon you can have in battle.
       * @see {@link Challenge.applyPokemonInBattle}
      */
      POKEMON_IN_BATTLE = 4,
      /**
       * Adds or modifies the fixed battles in a run
       * @see {@link Challenge.applyFixedBattle}
      */
      FIXED_BATTLES = 5,
      /**
       * Modifies the effectiveness of Type matchups in battle
       * @see {@linkcode Challenge.applyTypeEffectiveness}
      */
      TYPE_EFFECTIVENESS = 6,
      /**
       * Modifies what level the AI pokemon are. UNIMPLEMENTED.
       */
      AI_LEVEL = 7,
      /**
       * Modifies how many move slots the AI has. UNIMPLEMENTED.
       */
      AI_MOVE_SLOTS = 8,
      /**
       * Modifies if a pokemon has its passive. UNIMPLEMENTED.
       */
      PASSIVE_ACCESS = 9,
      /**
       * Modifies the game mode settings in some way. UNIMPLEMENTED.
       */
      GAME_MODE_MODIFY = 10,
      /**
       * Modifies what level AI pokemon can access a move. UNIMPLEMENTED.
       */
      MOVE_ACCESS = 11,
      /**
       * Modifies what weight AI pokemon have when generating movesets. UNIMPLEMENTED.
       */
      MOVE_WEIGHT = 12
  }
  /**
   * Used for challenge types that modify movesets, these denote the various sources of moves for pokemon.
   */
  export declare enum MoveSourceType {
      LEVEL_UP = 0,// Currently unimplemented for move access
      RELEARNER = 1,// Relearner moves currently unimplemented
      COMMON_TM = 2,
      GREAT_TM = 3,
      ULTRA_TM = 4,
      COMMON_EGG = 5,
      RARE_EGG = 6
  }
  /**
   * A challenge object. Exists only to serve as a base class.
   */
  export declare abstract class Challenge {
      id: PokeRogue.enums.Challenges;
      value: integer;
      maxValue: integer;
      severity: integer;
      maxSeverity: integer;
      conditions: ChallengeCondition[];
      /**
       * @param id {@link Challenges} The enum value for the challenge
       */
      constructor(id: PokeRogue.enums.Challenges, maxValue?: integer);
      /**
       * Reset the challenge to a base state.
       */
      reset(): void;
      /**
       * Gets the localisation key for the challenge
       * @returns {@link string} The i18n key for this challenge
       */
      geti18nKey(): string;
      /**
       * Used for unlockable challenges to check if they're unlocked.
       * @param data {@link GameData} The save data.
       * @returns {@link boolean} Whether this challenge is unlocked.
       */
      isUnlocked(data: PokeRogue.system.GameData): boolean;
      /**
       * Adds an unlock condition to this challenge.
       * @param condition {@link ChallengeCondition} The condition to add.
       * @returns {@link Challenge} This challenge
       */
      condition(condition: ChallengeCondition): Challenge;
      /**
       * @returns {@link string} The localised name of this challenge.
       */
      getName(): string;
      /**
       * Returns the textual representation of a challenge's current value.
       * @param overrideValue {@link integer} The value to check for. If undefined, gets the current value.
       * @returns {@link string} The localised name for the current value.
       */
      getValue(overrideValue?: integer): string;
      /**
       * Returns the description of a challenge's current value.
       * @param overrideValue {@link integer} The value to check for. If undefined, gets the current value.
       * @returns {@link string} The localised description for the current value.
       */
      getDescription(overrideValue?: integer): string;
      /**
       * Increase the value of the challenge
       * @returns {@link boolean} Returns true if the value changed
       */
      increaseValue(): boolean;
      /**
       * Decrease the value of the challenge
       * @returns {@link boolean} Returns true if the value changed
       */
      decreaseValue(): boolean;
      /**
       * Whether to allow choosing this challenge's severity.
       */
      hasSeverity(): boolean;
      /**
       * Decrease the severity of the challenge
       * @returns {@link boolean} Returns true if the value changed
       */
      decreaseSeverity(): boolean;
      /**
       * Increase the severity of the challenge
       * @returns {@link boolean} Returns true if the value changed
       */
      increaseSeverity(): boolean;
      /**
       * Gets the "difficulty" value of this challenge.
       * @returns {@link integer} The difficulty value.
       */
      getDifficulty(): integer;
      /**
       * Gets the minimum difficulty added by this challenge.
       * @returns {@link integer} The difficulty value.
       */
      getMinDifficulty(): integer;
      /**
       * Clones a challenge, either from another challenge or json. Chainable.
       * @param source The source challenge or json.
       * @returns This challenge.
       */
      static loadChallenge(source: Challenge | any): Challenge;
      /**
       * An apply function for STARTER_CHOICE challenges. Derived classes should alter this.
       * @param pokemon {@link PokemonSpecies} The pokemon to check the validity of.
       * @param valid {@link Utils.BooleanHolder} A BooleanHolder, the value gets set to false if the pokemon isn't allowed.
       * @param dexAttr {@link DexAttrProps} The dex attributes of the pokemon.
       * @param soft {@link boolean} If true, allow it if it could become a valid pokemon.
       * @returns {@link boolean} Whether this function did anything.
       */
      applyStarterChoice(pokemon: PokeRogue.data.PokemonSpecies, valid: Utils.BooleanHolder, dexAttr: PokeRogue.system.DexAttrProps, soft?: boolean): boolean;
      /**
       * An apply function for STARTER_POINTS challenges. Derived classes should alter this.
       * @param points {@link Utils.NumberHolder} The amount of points you have available.
       * @returns {@link boolean} Whether this function did anything.
       */
      applyStarterPoints(points: Utils.NumberHolder): boolean;
      /**
       * An apply function for STARTER_COST challenges. Derived classes should alter this.
       * @param species {@link Species} The pokemon to change the cost of.
       * @param cost {@link Utils.NumberHolder} The cost of the starter.
       * @returns {@link boolean} Whether this function did anything.
       */
      applyStarterCost(species: PokeRogue.enums.Species, cost: Utils.NumberHolder): boolean;
      /**
       * An apply function for STARTER_MODIFY challenges. Derived classes should alter this.
       * @param pokemon {@link Pokemon} The starter pokemon to modify.
       * @returns {@link boolean} Whether this function did anything.
       */
      applyStarterModify(pokemon: PokeRogue.field.Pokemon): boolean;
      /**
       * An apply function for POKEMON_IN_BATTLE challenges. Derived classes should alter this.
       * @param pokemon {@link Pokemon} The pokemon to check the validity of.
       * @param valid {@link Utils.BooleanHolder} A BooleanHolder, the value gets set to false if the pokemon isn't allowed.
       * @returns {@link boolean} Whether this function did anything.
       */
      applyPokemonInBattle(pokemon: PokeRogue.field.Pokemon, valid: Utils.BooleanHolder): boolean;
      /**
       * An apply function for FIXED_BATTLE challenges. Derived classes should alter this.
       * @param waveIndex {@link Number} The current wave index.
       * @param battleConfig {@link FixedBattleConfig} The battle config to modify.
       * @returns {@link boolean} Whether this function did anything.
       */
      applyFixedBattle(waveIndex: Number, battleConfig: PokeRogue.FixedBattleConfig): boolean;
      /**
       * An apply function for TYPE_EFFECTIVENESS challenges. Derived classes should alter this.
       * @param effectiveness {@linkcode Utils.NumberHolder} The current effectiveness of the move.
       * @returns Whether this function did anything.
       */
      applyTypeEffectiveness(effectiveness: Utils.NumberHolder): boolean;
      /**
       * An apply function for AI_LEVEL challenges. Derived classes should alter this.
       * @param level {@link Utils.IntegerHolder} The generated level.
       * @param levelCap {@link Number} The current level cap.
       * @param isTrainer {@link Boolean} Whether this is a trainer pokemon.
       * @param isBoss {@link Boolean} Whether this is a non-trainer boss pokemon.
       * @returns {@link boolean} Whether this function did anything.
       */
      applyLevelChange(level: Utils.IntegerHolder, levelCap: number, isTrainer: boolean, isBoss: boolean): boolean;
      /**
       * An apply function for AI_MOVE_SLOTS challenges. Derived classes should alter this.
       * @param pokemon {@link Pokemon} The pokemon that is being considered.
       * @param moveSlots {@link Utils.IntegerHolder} The amount of move slots.
       * @returns {@link boolean} Whether this function did anything.
       */
      applyMoveSlot(pokemon: PokeRogue.field.Pokemon, moveSlots: Utils.IntegerHolder): boolean;
      /**
       * An apply function for PASSIVE_ACCESS challenges. Derived classes should alter this.
       * @param pokemon {@link Pokemon} The pokemon to change.
       * @param hasPassive {@link Utils.BooleanHolder} Whether it should have its passive.
       * @returns {@link boolean} Whether this function did anything.
       */
      applyPassiveAccess(pokemon: PokeRogue.field.Pokemon, hasPassive: Utils.BooleanHolder): boolean;
      /**
       * An apply function for GAME_MODE_MODIFY challenges. Derived classes should alter this.
       * @param gameMode {@link GameMode} The current game mode.
       * @returns {@link boolean} Whether this function did anything.
       */
      applyGameModeModify(gameMode: PokeRogue.GameMode): boolean;
      /**
       * An apply function for MOVE_ACCESS. Derived classes should alter this.
       * @param pokemon {@link Pokemon} What pokemon would learn the move.
       * @param moveSource {@link MoveSourceType} What source the pokemon would get the move from.
       * @param move {@link Moves} The move in question.
       * @param level {@link Utils.IntegerHolder} The level threshold for access.
       * @returns {@link boolean} Whether this function did anything.
       */
      applyMoveAccessLevel(pokemon: PokeRogue.field.Pokemon, moveSource: MoveSourceType, move: PokeRogue.enums.Moves, level: Utils.IntegerHolder): boolean;
      /**
       * An apply function for MOVE_WEIGHT. Derived classes should alter this.
       * @param pokemon {@link Pokemon} What pokemon would learn the move.
       * @param moveSource {@link MoveSourceType} What source the pokemon would get the move from.
       * @param move {@link Moves} The move in question.
       * @param weight {@link Utils.IntegerHolder} The base weight of the move
       * @returns {@link boolean} Whether this function did anything.
       */
      applyMoveWeight(pokemon: PokeRogue.field.Pokemon, moveSource: MoveSourceType, move: PokeRogue.enums.Moves, level: Utils.IntegerHolder): boolean;
  }
  type ChallengeCondition = (data: PokeRogue.system.GameData) => boolean;
  /**
   * Implements a mono generation challenge.
   */
  export declare class SingleGenerationChallenge extends Challenge {
      constructor();
      applyStarterChoice(pokemon: PokeRogue.data.PokemonSpecies, valid: Utils.BooleanHolder, dexAttr: PokeRogue.system.DexAttrProps, soft?: boolean): boolean;
      applyPokemonInBattle(pokemon: PokeRogue.field.Pokemon, valid: Utils.BooleanHolder): boolean;
      applyFixedBattle(waveIndex: Number, battleConfig: PokeRogue.FixedBattleConfig): boolean;
      /**
       * @overrides
       */
      getDifficulty(): number;
      /**
       * Returns the textual representation of a challenge's current value.
       * @param {value} overrideValue The value to check for. If undefined, gets the current value.
       * @returns {string} The localised name for the current value.
       */
      getValue(overrideValue?: integer): string;
      /**
       * Returns the description of a challenge's current value.
       * @param {value} overrideValue The value to check for. If undefined, gets the current value.
       * @returns {string} The localised description for the current value.
       */
      getDescription(overrideValue?: integer): string;
      static loadChallenge(source: SingleGenerationChallenge | any): SingleGenerationChallenge;
  }
  /**
   * Implements a mono type challenge.
   */
  export declare class SingleTypeChallenge extends Challenge {
      public static TYPE_OVERRIDES;
      constructor();
      applyStarterChoice(pokemon: PokeRogue.data.PokemonSpecies, valid: Utils.BooleanHolder, dexAttr: PokeRogue.system.DexAttrProps, soft?: boolean): boolean;
      applyPokemonInBattle(pokemon: PokeRogue.field.Pokemon, valid: Utils.BooleanHolder): boolean;
      /**
       * @overrides
       */
      getDifficulty(): number;
      /**
       * Returns the textual representation of a challenge's current value.
       * @param {value} overrideValue The value to check for. If undefined, gets the current value.
       * @returns {string} The localised name for the current value.
       */
      getValue(overrideValue?: integer): string;
      /**
       * Returns the description of a challenge's current value.
       * @param {value} overrideValue The value to check for. If undefined, gets the current value.
       * @returns {string} The localised description for the current value.
       */
      getDescription(overrideValue?: integer): string;
      static loadChallenge(source: SingleTypeChallenge | any): SingleTypeChallenge;
  }
  /**
   * Implements a fresh start challenge.
   */
  export declare class FreshStartChallenge extends Challenge {
      constructor();
      applyStarterChoice(pokemon: PokeRogue.data.PokemonSpecies, valid: Utils.BooleanHolder): boolean;
      applyStarterCost(species: PokeRogue.enums.Species, cost: Utils.NumberHolder): boolean;
      applyStarterModify(pokemon: PokeRogue.field.Pokemon): boolean;
      getDifficulty(): number;
      static loadChallenge(source: FreshStartChallenge | any): FreshStartChallenge;
  }
  /**
   * Implements an inverse battle challenge.
   */
  export declare class InverseBattleChallenge extends Challenge {
      constructor();
      static loadChallenge(source: InverseBattleChallenge | any): InverseBattleChallenge;
      getDifficulty(): number;
      applyTypeEffectiveness(effectiveness: Utils.NumberHolder): boolean;
  }
  /**
   * Lowers the amount of starter points available.
   */
  export declare class LowerStarterMaxCostChallenge extends Challenge {
      constructor();
      /**
       * @override
       */
      getValue(overrideValue?: integer): string;
      applyStarterChoice(pokemon: PokeRogue.data.PokemonSpecies, valid: Utils.BooleanHolder): boolean;
      static loadChallenge(source: LowerStarterMaxCostChallenge | any): LowerStarterMaxCostChallenge;
  }
  /**
   * Lowers the maximum cost of starters available.
   */
  export declare class LowerStarterPointsChallenge extends Challenge {
      constructor();
      /**
       * @override
       */
      getValue(overrideValue?: integer): string;
      applyStarterPoints(points: Utils.NumberHolder): boolean;
      static loadChallenge(source: LowerStarterPointsChallenge | any): LowerStarterPointsChallenge;
  }
  /**
   * Apply all challenges that modify starter choice.
   * @param gameMode {@link GameMode} The current gameMode
   * @param challengeType {@link ChallengeType} ChallengeType.STARTER_CHOICE
   * @param pokemon {@link PokemonSpecies} The pokemon to check the validity of.
   * @param valid {@link Utils.BooleanHolder} A BooleanHolder, the value gets set to false if the pokemon isn't allowed.
   * @param dexAttr {@link DexAttrProps} The dex attributes of the pokemon.
   * @param soft {@link boolean} If true, allow it if it could become a valid pokemon.
   * @returns True if any challenge was successfully applied.
   */
  export declare function applyChallenges(gameMode: PokeRogue.GameMode, challengeType: ChallengeType.STARTER_CHOICE, pokemon: PokeRogue.data.PokemonSpecies, valid: Utils.BooleanHolder, dexAttr: PokeRogue.system.DexAttrProps, soft: boolean): boolean;
  /**
   * Apply all challenges that modify available total starter points.
   * @param gameMode {@link GameMode} The current gameMode
   * @param challengeType {@link ChallengeType} ChallengeType.STARTER_POINTS
   * @param points {@link Utils.NumberHolder} The amount of points you have available.
   * @returns True if any challenge was successfully applied.
   */
  export declare function applyChallenges(gameMode: PokeRogue.GameMode, challengeType: ChallengeType.STARTER_POINTS, points: Utils.NumberHolder): boolean;
  /**
   * Apply all challenges that modify the cost of a starter.
   * @param gameMode {@link GameMode} The current gameMode
   * @param challengeType {@link ChallengeType} ChallengeType.STARTER_COST
   * @param species {@link Species} The pokemon to change the cost of.
   * @param points {@link Utils.NumberHolder} The cost of the pokemon.
   * @returns True if any challenge was successfully applied.
   */
  export declare function applyChallenges(gameMode: PokeRogue.GameMode, challengeType: ChallengeType.STARTER_COST, species: PokeRogue.enums.Species, cost: Utils.NumberHolder): boolean;
  /**
   * Apply all challenges that modify a starter after selection.
   * @param gameMode {@link GameMode} The current gameMode
   * @param challengeType {@link ChallengeType} ChallengeType.STARTER_MODIFY
   * @param pokemon {@link Pokemon} The starter pokemon to modify.
   * @returns True if any challenge was successfully applied.
   */
  export declare function applyChallenges(gameMode: PokeRogue.GameMode, challengeType: ChallengeType.STARTER_MODIFY, pokemon: PokeRogue.field.Pokemon): boolean;
  /**
   * Apply all challenges that what pokemon you can have in battle.
   * @param gameMode {@link GameMode} The current gameMode
   * @param challengeType {@link ChallengeType} ChallengeType.POKEMON_IN_BATTLE
   * @param pokemon {@link Pokemon} The pokemon to check the validity of.
   * @param valid {@link Utils.BooleanHolder} A BooleanHolder, the value gets set to false if the pokemon isn't allowed.
   * @returns True if any challenge was successfully applied.
   */
  export declare function applyChallenges(gameMode: PokeRogue.GameMode, challengeType: ChallengeType.POKEMON_IN_BATTLE, pokemon: PokeRogue.field.Pokemon, valid: Utils.BooleanHolder): boolean;
  /**
   * Apply all challenges that modify what fixed battles there are.
   * @param gameMode {@link GameMode} The current gameMode
   * @param challengeType {@link ChallengeType} ChallengeType.FIXED_BATTLES
   * @param waveIndex {@link Number} The current wave index.
   * @param battleConfig {@link FixedBattleConfig} The battle config to modify.
   * @returns True if any challenge was successfully applied.
   */
  export declare function applyChallenges(gameMode: PokeRogue.GameMode, challengeType: ChallengeType.FIXED_BATTLES, waveIndex: Number, battleConfig: PokeRogue.FixedBattleConfig): boolean;
  /**
   * Apply all challenges that modify type effectiveness.
   * @param gameMode {@linkcode GameMode} The current gameMode
   * @param challengeType {@linkcode ChallengeType} ChallengeType.TYPE_EFFECTIVENESS
   * @param effectiveness {@linkcode Utils.NumberHolder} The current effectiveness of the move.
   * @returns True if any challenge was successfully applied.
   */
  export declare function applyChallenges(gameMode: PokeRogue.GameMode, challengeType: ChallengeType.TYPE_EFFECTIVENESS, effectiveness: Utils.NumberHolder): boolean;
  /**
   * Apply all challenges that modify what level AI are.
   * @param gameMode {@link GameMode} The current gameMode
   * @param challengeType {@link ChallengeType} ChallengeType.AI_LEVEL
   * @param level {@link Utils.IntegerHolder} The generated level of the pokemon.
   * @param levelCap {@link Number} The maximum level cap for the current wave.
   * @param isTrainer {@link Boolean} Whether this is a trainer pokemon.
   * @param isBoss {@link Boolean} Whether this is a non-trainer boss pokemon.
   * @returns True if any challenge was successfully applied.
   */
  export declare function applyChallenges(gameMode: PokeRogue.GameMode, challengeType: ChallengeType.AI_LEVEL, level: Utils.IntegerHolder, levelCap: number, isTrainer: boolean, isBoss: boolean): boolean;
  /**
   * Apply all challenges that modify how many move slots the AI has.
   * @param gameMode {@link GameMode} The current gameMode
   * @param challengeType {@link ChallengeType} ChallengeType.AI_MOVE_SLOTS
   * @param pokemon {@link Pokemon} The pokemon being considered.
   * @param moveSlots {@link Utils.IntegerHolder} The amount of move slots.
   * @returns True if any challenge was successfully applied.
   */
  export declare function applyChallenges(gameMode: PokeRogue.GameMode, challengeType: ChallengeType.AI_MOVE_SLOTS, pokemon: PokeRogue.field.Pokemon, moveSlots: Utils.IntegerHolder): boolean;
  /**
   * Apply all challenges that modify whether a pokemon has its passive.
   * @param gameMode {@link GameMode} The current gameMode
   * @param challengeType {@link ChallengeType} ChallengeType.PASSIVE_ACCESS
   * @param pokemon {@link Pokemon} The pokemon to modify.
   * @param hasPassive {@link Utils.BooleanHolder} Whether it has its passive.
   * @returns True if any challenge was successfully applied.
   */
  export declare function applyChallenges(gameMode: PokeRogue.GameMode, challengeType: ChallengeType.PASSIVE_ACCESS, pokemon: PokeRogue.field.Pokemon, hasPassive: Utils.BooleanHolder): boolean;
  /**
   * Apply all challenges that modify the game modes settings.
   * @param gameMode {@link GameMode} The current gameMode
   * @param challengeType {@link ChallengeType} ChallengeType.GAME_MODE_MODIFY
   * @returns True if any challenge was successfully applied.
   */
  export declare function applyChallenges(gameMode: PokeRogue.GameMode, challengeType: ChallengeType.GAME_MODE_MODIFY): boolean;
  /**
   * Apply all challenges that modify what level a pokemon can access a move.
   * @param gameMode {@link GameMode} The current gameMode
   * @param challengeType {@link ChallengeType} ChallengeType.MOVE_ACCESS
   * @param pokemon {@link Pokemon} What pokemon would learn the move.
   * @param moveSource {@link MoveSourceType} What source the pokemon would get the move from.
   * @param move {@link Moves} The move in question.
   * @param level {@link Utils.IntegerHolder} The level threshold for access.
   * @returns True if any challenge was successfully applied.
   */
  export declare function applyChallenges(gameMode: PokeRogue.GameMode, challengeType: ChallengeType.MOVE_ACCESS, pokemon: PokeRogue.field.Pokemon, moveSource: MoveSourceType, move: PokeRogue.enums.Moves, level: Utils.IntegerHolder): boolean;
  /**
   * Apply all challenges that modify what weight a pokemon gives to move generation
   * @param gameMode {@link GameMode} The current gameMode
   * @param challengeType {@link ChallengeType} ChallengeType.MOVE_WEIGHT
   * @param pokemon {@link Pokemon} What pokemon would learn the move.
   * @param moveSource {@link MoveSourceType} What source the pokemon would get the move from.
   * @param move {@link Moves} The move in question.
   * @param weight {@link Utils.IntegerHolder} The weight of the move.
   * @returns True if any challenge was successfully applied.
   */
  export declare function applyChallenges(gameMode: PokeRogue.GameMode, challengeType: ChallengeType.MOVE_WEIGHT, pokemon: PokeRogue.field.Pokemon, moveSource: MoveSourceType, move: PokeRogue.enums.Moves, weight: Utils.IntegerHolder): boolean;
  /**
   *
   * @param source A challenge to copy, or an object of a challenge's properties. Missing values are treated as defaults.
   * @returns The challenge in question.
   */
  export declare function copyChallenge(source: Challenge | any): Challenge;
  export declare const allChallenges: Challenge[];
  export declare function initChallenges(): void;
  export {};
  
}

declare namespace PokeRogue.data {
  //import BattleScene from "../battle-scene";
  //import { Starter } from "../ui/starter-select-ui-handler";
  export interface DailyRunConfig {
      seed: integer;
      starters: PokeRogue.ui.Starter;
  }
  export declare function fetchDailyRunSeed(): Promise<string | null>;
  export declare function getDailyRunStarters(scene: PokeRogue.BattleScene, seed: string): Starter[];
  
}

declare namespace PokeRogue.data {
  export interface TrainerTypeMessages {
      encounter?: string | string[];
      victory?: string | string[];
      defeat?: string | string[];
  }
  export interface TrainerTypeDialogue {
      [key: integer]: TrainerTypeMessages | Array<TrainerTypeMessages>;
  }
  export declare function getTrainerTypeDialogue(): TrainerTypeDialogue;
  export declare const trainerTypeDialogue: TrainerTypeDialogue;
  export declare const doubleBattleDialogue: {
      blue_red_double: {
          encounter: string[];
          victory: string[];
      };
      red_blue_double: {
          encounter: string[];
          victory: string[];
      };
      tate_liza_double: {
          encounter: string[];
          victory: string[];
      };
      liza_tate_double: {
          encounter: string[];
          victory: string[];
      };
      wallace_steven_double: {
          encounter: string[];
          victory: string[];
      };
      steven_wallace_double: {
          encounter: string[];
          victory: string[];
      };
      alder_iris_double: {
          encounter: string[];
          victory: string[];
      };
      iris_alder_double: {
          encounter: string[];
          victory: string[];
      };
      marnie_piers_double: {
          encounter: string[];
          victory: string[];
      };
      piers_marnie_double: {
          encounter: string[];
          victory: string[];
      };
  };
  export declare const battleSpecDialogue: {
      1: {
          encounter: string;
          firstStageWin: string;
          secondStageWin: string;
      };
  };
  export declare const miscDialogue: {
      ending: string[];
  };
  export declare function getCharVariantFromDialogue(message: string): string;
  export declare function initTrainerTypeDialogue(): void;
  
}

declare namespace PokeRogue.data {
  //import BattleScene from "#app/battle-scene";
  //import { PlayerPokemon } from "#app/field/pokemon";
  //import { DexEntry, StarterDataEntry } from "#app/system/game-data";
  /**
   * Stores data associated with a specific egg and the hatched pokemon
   * Allows hatch info to be stored at hatch then retrieved for display during egg summary
   */
  export declare class EggHatchData {
      /** the pokemon that hatched from the file (including shiny, IVs, ability) */
      pokemon: PokeRogue.field.PlayerPokemon;
      /** index of the egg move from the hatched pokemon (not stored in PlayerPokemon) */
      eggMoveIndex: number;
      /** boolean indicating if the egg move for the hatch is new */
      eggMoveUnlocked: boolean;
      /** stored copy of the hatched pokemon's dex entry before it was updated due to hatch */
      dexEntryBeforeUpdate: PokeRogue.system.DexEntry;
      /** stored copy of the hatched pokemon's starter entry before it was updated due to hatch */
      starterDataEntryBeforeUpdate: PokeRogue.system.StarterDataEntry;
      /** reference to the battle scene to get gamedata and update dex */
      public scene;
      constructor(scene: PokeRogue.BattleScene, pokemon: PokeRogue.field.PlayerPokemon, eggMoveIndex: number);
      /**
         * Sets the boolean for if the egg move for the hatch is a new unlock
         * @param unlocked True if the EM is new
         */
      setEggMoveUnlocked(unlocked: boolean): void;
      /**
         * Stores a copy of the current DexEntry of the pokemon and StarterDataEntry of its starter
         * Used before updating the dex, so comparing the pokemon to these entries will show the new attributes
         */
      setDex(): void;
      /**
         * Gets the dex entry before update
         * @returns Dex Entry corresponding to this pokemon before the pokemon was added / updated to dex
         */
      getDex(): DexEntry;
      /**
         * Gets the starter dex entry before update
         * @returns Starter Dex Entry corresponding to this pokemon before the pokemon was added / updated to dex
         */
      getStarterEntry(): StarterDataEntry;
      /**
         * Update the pokedex data corresponding with the new hatch's pokemon data
         * Also sets whether the egg move is a new unlock or not
         * @param showMessage boolean to show messages for the new catches and egg moves (false by default)
         * @returns
         */
      updatePokemon(showMessage?: boolean): Promise<void>;
  }
  
}

declare namespace PokeRogue.data {
  //import { Moves } from "#enums/moves";
  export declare const speciesEggMoves: {
      1: PokeRogue.enums.Moves[];
      4: PokeRogue.enums.Moves[];
      7: PokeRogue.enums.Moves[];
      10: PokeRogue.enums.Moves[];
      13: PokeRogue.enums.Moves[];
      16: PokeRogue.enums.Moves[];
      19: PokeRogue.enums.Moves[];
      21: PokeRogue.enums.Moves[];
      23: PokeRogue.enums.Moves[];
      27: PokeRogue.enums.Moves[];
      29: PokeRogue.enums.Moves[];
      32: PokeRogue.enums.Moves[];
      37: PokeRogue.enums.Moves[];
      41: PokeRogue.enums.Moves[];
      43: PokeRogue.enums.Moves[];
      46: PokeRogue.enums.Moves[];
      48: PokeRogue.enums.Moves[];
      50: PokeRogue.enums.Moves[];
      52: PokeRogue.enums.Moves[];
      54: PokeRogue.enums.Moves[];
      56: PokeRogue.enums.Moves[];
      58: PokeRogue.enums.Moves[];
      60: PokeRogue.enums.Moves[];
      63: PokeRogue.enums.Moves[];
      66: PokeRogue.enums.Moves[];
      69: PokeRogue.enums.Moves[];
      72: PokeRogue.enums.Moves[];
      74: PokeRogue.enums.Moves[];
      77: PokeRogue.enums.Moves[];
      79: PokeRogue.enums.Moves[];
      81: PokeRogue.enums.Moves[];
      83: PokeRogue.enums.Moves[];
      84: PokeRogue.enums.Moves[];
      86: PokeRogue.enums.Moves[];
      88: PokeRogue.enums.Moves[];
      90: PokeRogue.enums.Moves[];
      92: PokeRogue.enums.Moves[];
      95: PokeRogue.enums.Moves[];
      96: PokeRogue.enums.Moves[];
      98: PokeRogue.enums.Moves[];
      100: PokeRogue.enums.Moves[];
      102: PokeRogue.enums.Moves[];
      104: PokeRogue.enums.Moves[];
      108: PokeRogue.enums.Moves[];
      109: PokeRogue.enums.Moves[];
      111: PokeRogue.enums.Moves[];
      114: PokeRogue.enums.Moves[];
      115: PokeRogue.enums.Moves[];
      116: PokeRogue.enums.Moves[];
      118: PokeRogue.enums.Moves[];
      120: PokeRogue.enums.Moves[];
      123: PokeRogue.enums.Moves[];
      127: PokeRogue.enums.Moves[];
      128: PokeRogue.enums.Moves[];
      129: PokeRogue.enums.Moves[];
      131: PokeRogue.enums.Moves[];
      132: PokeRogue.enums.Moves[];
      133: PokeRogue.enums.Moves[];
      137: PokeRogue.enums.Moves[];
      138: PokeRogue.enums.Moves[];
      140: PokeRogue.enums.Moves[];
      142: PokeRogue.enums.Moves[];
      144: PokeRogue.enums.Moves[];
      145: PokeRogue.enums.Moves[];
      146: PokeRogue.enums.Moves[];
      147: PokeRogue.enums.Moves[];
      150: PokeRogue.enums.Moves[];
      151: PokeRogue.enums.Moves[];
      152: PokeRogue.enums.Moves[];
      155: PokeRogue.enums.Moves[];
      158: PokeRogue.enums.Moves[];
      161: PokeRogue.enums.Moves[];
      163: PokeRogue.enums.Moves[];
      165: PokeRogue.enums.Moves[];
      167: PokeRogue.enums.Moves[];
      170: PokeRogue.enums.Moves[];
      172: PokeRogue.enums.Moves[];
      173: PokeRogue.enums.Moves[];
      174: PokeRogue.enums.Moves[];
      175: PokeRogue.enums.Moves[];
      177: PokeRogue.enums.Moves[];
      179: PokeRogue.enums.Moves[];
      187: PokeRogue.enums.Moves[];
      190: PokeRogue.enums.Moves[];
      191: PokeRogue.enums.Moves[];
      193: PokeRogue.enums.Moves[];
      194: PokeRogue.enums.Moves[];
      198: PokeRogue.enums.Moves[];
      200: PokeRogue.enums.Moves[];
      201: PokeRogue.enums.Moves[];
      203: PokeRogue.enums.Moves[];
      204: PokeRogue.enums.Moves[];
      206: PokeRogue.enums.Moves[];
      207: PokeRogue.enums.Moves[];
      209: PokeRogue.enums.Moves[];
      211: PokeRogue.enums.Moves[];
      213: PokeRogue.enums.Moves[];
      214: PokeRogue.enums.Moves[];
      215: PokeRogue.enums.Moves[];
      216: PokeRogue.enums.Moves[];
      218: PokeRogue.enums.Moves[];
      220: PokeRogue.enums.Moves[];
      222: PokeRogue.enums.Moves[];
      223: PokeRogue.enums.Moves[];
      225: PokeRogue.enums.Moves[];
      227: PokeRogue.enums.Moves[];
      228: PokeRogue.enums.Moves[];
      231: PokeRogue.enums.Moves[];
      234: PokeRogue.enums.Moves[];
      235: PokeRogue.enums.Moves[];
      236: PokeRogue.enums.Moves[];
      238: PokeRogue.enums.Moves[];
      239: PokeRogue.enums.Moves[];
      240: PokeRogue.enums.Moves[];
      241: PokeRogue.enums.Moves[];
      243: PokeRogue.enums.Moves[];
      244: PokeRogue.enums.Moves[];
      245: PokeRogue.enums.Moves[];
      246: PokeRogue.enums.Moves[];
      249: PokeRogue.enums.Moves[];
      250: PokeRogue.enums.Moves[];
      251: PokeRogue.enums.Moves[];
      252: PokeRogue.enums.Moves[];
      255: PokeRogue.enums.Moves[];
      258: PokeRogue.enums.Moves[];
      261: PokeRogue.enums.Moves[];
      263: PokeRogue.enums.Moves[];
      265: PokeRogue.enums.Moves[];
      270: PokeRogue.enums.Moves[];
      273: PokeRogue.enums.Moves[];
      276: PokeRogue.enums.Moves[];
      278: PokeRogue.enums.Moves[];
      280: PokeRogue.enums.Moves[];
      283: PokeRogue.enums.Moves[];
      285: PokeRogue.enums.Moves[];
      287: PokeRogue.enums.Moves[];
      290: PokeRogue.enums.Moves[];
      293: PokeRogue.enums.Moves[];
      296: PokeRogue.enums.Moves[];
      298: PokeRogue.enums.Moves[];
      299: PokeRogue.enums.Moves[];
      300: PokeRogue.enums.Moves[];
      302: PokeRogue.enums.Moves[];
      303: PokeRogue.enums.Moves[];
      304: PokeRogue.enums.Moves[];
      307: PokeRogue.enums.Moves[];
      309: PokeRogue.enums.Moves[];
      311: PokeRogue.enums.Moves[];
      312: PokeRogue.enums.Moves[];
      313: PokeRogue.enums.Moves[];
      314: PokeRogue.enums.Moves[];
      316: PokeRogue.enums.Moves[];
      318: PokeRogue.enums.Moves[];
      320: PokeRogue.enums.Moves[];
      322: PokeRogue.enums.Moves[];
      324: PokeRogue.enums.Moves[];
      325: PokeRogue.enums.Moves[];
      327: PokeRogue.enums.Moves[];
      328: PokeRogue.enums.Moves[];
      331: PokeRogue.enums.Moves[];
      333: PokeRogue.enums.Moves[];
      335: PokeRogue.enums.Moves[];
      336: PokeRogue.enums.Moves[];
      337: PokeRogue.enums.Moves[];
      338: PokeRogue.enums.Moves[];
      339: PokeRogue.enums.Moves[];
      341: PokeRogue.enums.Moves[];
      343: PokeRogue.enums.Moves[];
      345: PokeRogue.enums.Moves[];
      347: PokeRogue.enums.Moves[];
      349: PokeRogue.enums.Moves[];
      351: PokeRogue.enums.Moves[];
      352: PokeRogue.enums.Moves[];
      353: PokeRogue.enums.Moves[];
      355: PokeRogue.enums.Moves[];
      357: PokeRogue.enums.Moves[];
      359: PokeRogue.enums.Moves[];
      360: PokeRogue.enums.Moves[];
      361: PokeRogue.enums.Moves[];
      363: PokeRogue.enums.Moves[];
      366: PokeRogue.enums.Moves[];
      369: PokeRogue.enums.Moves[];
      370: PokeRogue.enums.Moves[];
      371: PokeRogue.enums.Moves[];
      374: PokeRogue.enums.Moves[];
      377: PokeRogue.enums.Moves[];
      378: PokeRogue.enums.Moves[];
      379: PokeRogue.enums.Moves[];
      380: PokeRogue.enums.Moves[];
      381: PokeRogue.enums.Moves[];
      382: PokeRogue.enums.Moves[];
      383: PokeRogue.enums.Moves[];
      384: PokeRogue.enums.Moves[];
      385: PokeRogue.enums.Moves[];
      386: PokeRogue.enums.Moves[];
      387: PokeRogue.enums.Moves[];
      390: PokeRogue.enums.Moves[];
      393: PokeRogue.enums.Moves[];
      396: PokeRogue.enums.Moves[];
      399: PokeRogue.enums.Moves[];
      401: PokeRogue.enums.Moves[];
      403: PokeRogue.enums.Moves[];
      406: PokeRogue.enums.Moves[];
      408: PokeRogue.enums.Moves[];
      410: PokeRogue.enums.Moves[];
      412: PokeRogue.enums.Moves[];
      415: PokeRogue.enums.Moves[];
      417: PokeRogue.enums.Moves[];
      418: PokeRogue.enums.Moves[];
      420: PokeRogue.enums.Moves[];
      422: PokeRogue.enums.Moves[];
      425: PokeRogue.enums.Moves[];
      427: PokeRogue.enums.Moves[];
      431: PokeRogue.enums.Moves[];
      433: PokeRogue.enums.Moves[];
      434: PokeRogue.enums.Moves[];
      436: PokeRogue.enums.Moves[];
      438: PokeRogue.enums.Moves[];
      439: PokeRogue.enums.Moves[];
      440: PokeRogue.enums.Moves[];
      441: PokeRogue.enums.Moves[];
      442: PokeRogue.enums.Moves[];
      443: PokeRogue.enums.Moves[];
      446: PokeRogue.enums.Moves[];
      447: PokeRogue.enums.Moves[];
      449: PokeRogue.enums.Moves[];
      451: PokeRogue.enums.Moves[];
      453: PokeRogue.enums.Moves[];
      455: PokeRogue.enums.Moves[];
      456: PokeRogue.enums.Moves[];
      458: PokeRogue.enums.Moves[];
      459: PokeRogue.enums.Moves[];
      479: PokeRogue.enums.Moves[];
      480: PokeRogue.enums.Moves[];
      481: PokeRogue.enums.Moves[];
      482: PokeRogue.enums.Moves[];
      483: PokeRogue.enums.Moves[];
      484: PokeRogue.enums.Moves[];
      485: PokeRogue.enums.Moves[];
      486: PokeRogue.enums.Moves[];
      487: PokeRogue.enums.Moves[];
      488: PokeRogue.enums.Moves[];
      489: PokeRogue.enums.Moves[];
      490: PokeRogue.enums.Moves[];
      491: PokeRogue.enums.Moves[];
      492: PokeRogue.enums.Moves[];
      493: PokeRogue.enums.Moves[];
      494: PokeRogue.enums.Moves[];
      495: PokeRogue.enums.Moves[];
      498: PokeRogue.enums.Moves[];
      501: PokeRogue.enums.Moves[];
      504: PokeRogue.enums.Moves[];
      506: PokeRogue.enums.Moves[];
      509: PokeRogue.enums.Moves[];
      511: PokeRogue.enums.Moves[];
      513: PokeRogue.enums.Moves[];
      515: PokeRogue.enums.Moves[];
      517: PokeRogue.enums.Moves[];
      519: PokeRogue.enums.Moves[];
      522: PokeRogue.enums.Moves[];
      524: PokeRogue.enums.Moves[];
      527: PokeRogue.enums.Moves[];
      529: PokeRogue.enums.Moves[];
      531: PokeRogue.enums.Moves[];
      532: PokeRogue.enums.Moves[];
      535: PokeRogue.enums.Moves[];
      538: PokeRogue.enums.Moves[];
      539: PokeRogue.enums.Moves[];
      540: PokeRogue.enums.Moves[];
      543: PokeRogue.enums.Moves[];
      546: PokeRogue.enums.Moves[];
      548: PokeRogue.enums.Moves[];
      550: PokeRogue.enums.Moves[];
      551: PokeRogue.enums.Moves[];
      554: PokeRogue.enums.Moves[];
      556: PokeRogue.enums.Moves[];
      557: PokeRogue.enums.Moves[];
      559: PokeRogue.enums.Moves[];
      561: PokeRogue.enums.Moves[];
      562: PokeRogue.enums.Moves[];
      564: PokeRogue.enums.Moves[];
      566: PokeRogue.enums.Moves[];
      568: PokeRogue.enums.Moves[];
      570: PokeRogue.enums.Moves[];
      572: PokeRogue.enums.Moves[];
      574: PokeRogue.enums.Moves[];
      577: PokeRogue.enums.Moves[];
      580: PokeRogue.enums.Moves[];
      582: PokeRogue.enums.Moves[];
      585: PokeRogue.enums.Moves[];
      587: PokeRogue.enums.Moves[];
      588: PokeRogue.enums.Moves[];
      590: PokeRogue.enums.Moves[];
      592: PokeRogue.enums.Moves[];
      594: PokeRogue.enums.Moves[];
      595: PokeRogue.enums.Moves[];
      597: PokeRogue.enums.Moves[];
      599: PokeRogue.enums.Moves[];
      602: PokeRogue.enums.Moves[];
      605: PokeRogue.enums.Moves[];
      607: PokeRogue.enums.Moves[];
      610: PokeRogue.enums.Moves[];
      613: PokeRogue.enums.Moves[];
      615: PokeRogue.enums.Moves[];
      616: PokeRogue.enums.Moves[];
      618: PokeRogue.enums.Moves[];
      619: PokeRogue.enums.Moves[];
      621: PokeRogue.enums.Moves[];
      622: PokeRogue.enums.Moves[];
      624: PokeRogue.enums.Moves[];
      626: PokeRogue.enums.Moves[];
      627: PokeRogue.enums.Moves[];
      629: PokeRogue.enums.Moves[];
      631: PokeRogue.enums.Moves[];
      632: PokeRogue.enums.Moves[];
      633: PokeRogue.enums.Moves[];
      636: PokeRogue.enums.Moves[];
      638: PokeRogue.enums.Moves[];
      639: PokeRogue.enums.Moves[];
      640: PokeRogue.enums.Moves[];
      641: PokeRogue.enums.Moves[];
      642: PokeRogue.enums.Moves[];
      643: PokeRogue.enums.Moves[];
      644: PokeRogue.enums.Moves[];
      645: PokeRogue.enums.Moves[];
      646: PokeRogue.enums.Moves[];
      647: PokeRogue.enums.Moves[];
      648: PokeRogue.enums.Moves[];
      649: PokeRogue.enums.Moves[];
      650: PokeRogue.enums.Moves[];
      653: PokeRogue.enums.Moves[];
      656: PokeRogue.enums.Moves[];
      659: PokeRogue.enums.Moves[];
      661: PokeRogue.enums.Moves[];
      664: PokeRogue.enums.Moves[];
      667: PokeRogue.enums.Moves[];
      669: PokeRogue.enums.Moves[];
      672: PokeRogue.enums.Moves[];
      674: PokeRogue.enums.Moves[];
      676: PokeRogue.enums.Moves[];
      677: PokeRogue.enums.Moves[];
      679: PokeRogue.enums.Moves[];
      682: PokeRogue.enums.Moves[];
      684: PokeRogue.enums.Moves[];
      686: PokeRogue.enums.Moves[];
      688: PokeRogue.enums.Moves[];
      690: PokeRogue.enums.Moves[];
      692: PokeRogue.enums.Moves[];
      694: PokeRogue.enums.Moves[];
      696: PokeRogue.enums.Moves[];
      698: PokeRogue.enums.Moves[];
      701: PokeRogue.enums.Moves[];
      702: PokeRogue.enums.Moves[];
      703: PokeRogue.enums.Moves[];
      704: PokeRogue.enums.Moves[];
      707: PokeRogue.enums.Moves[];
      708: PokeRogue.enums.Moves[];
      710: PokeRogue.enums.Moves[];
      712: PokeRogue.enums.Moves[];
      714: PokeRogue.enums.Moves[];
      716: PokeRogue.enums.Moves[];
      717: PokeRogue.enums.Moves[];
      718: PokeRogue.enums.Moves[];
      719: PokeRogue.enums.Moves[];
      720: PokeRogue.enums.Moves[];
      721: PokeRogue.enums.Moves[];
      722: PokeRogue.enums.Moves[];
      725: PokeRogue.enums.Moves[];
      728: PokeRogue.enums.Moves[];
      731: PokeRogue.enums.Moves[];
      734: PokeRogue.enums.Moves[];
      736: PokeRogue.enums.Moves[];
      739: PokeRogue.enums.Moves[];
      741: PokeRogue.enums.Moves[];
      742: PokeRogue.enums.Moves[];
      744: PokeRogue.enums.Moves[];
      746: PokeRogue.enums.Moves[];
      747: PokeRogue.enums.Moves[];
      749: PokeRogue.enums.Moves[];
      751: PokeRogue.enums.Moves[];
      753: PokeRogue.enums.Moves[];
      755: PokeRogue.enums.Moves[];
      757: PokeRogue.enums.Moves[];
      759: PokeRogue.enums.Moves[];
      761: PokeRogue.enums.Moves[];
      764: PokeRogue.enums.Moves[];
      765: PokeRogue.enums.Moves[];
      766: PokeRogue.enums.Moves[];
      767: PokeRogue.enums.Moves[];
      769: PokeRogue.enums.Moves[];
      771: PokeRogue.enums.Moves[];
      772: PokeRogue.enums.Moves[];
      774: PokeRogue.enums.Moves[];
      775: PokeRogue.enums.Moves[];
      776: PokeRogue.enums.Moves[];
      777: PokeRogue.enums.Moves[];
      778: PokeRogue.enums.Moves[];
      779: PokeRogue.enums.Moves[];
      780: PokeRogue.enums.Moves[];
      781: PokeRogue.enums.Moves[];
      782: PokeRogue.enums.Moves[];
      785: PokeRogue.enums.Moves[];
      786: PokeRogue.enums.Moves[];
      787: PokeRogue.enums.Moves[];
      788: PokeRogue.enums.Moves[];
      789: PokeRogue.enums.Moves[];
      793: PokeRogue.enums.Moves[];
      794: PokeRogue.enums.Moves[];
      795: PokeRogue.enums.Moves[];
      796: PokeRogue.enums.Moves[];
      797: PokeRogue.enums.Moves[];
      798: PokeRogue.enums.Moves[];
      799: PokeRogue.enums.Moves[];
      800: PokeRogue.enums.Moves[];
      801: PokeRogue.enums.Moves[];
      802: PokeRogue.enums.Moves[];
      803: PokeRogue.enums.Moves[];
      805: PokeRogue.enums.Moves[];
      806: PokeRogue.enums.Moves[];
      807: PokeRogue.enums.Moves[];
      808: PokeRogue.enums.Moves[];
      810: PokeRogue.enums.Moves[];
      813: PokeRogue.enums.Moves[];
      816: PokeRogue.enums.Moves[];
      819: PokeRogue.enums.Moves[];
      821: PokeRogue.enums.Moves[];
      824: PokeRogue.enums.Moves[];
      827: PokeRogue.enums.Moves[];
      829: PokeRogue.enums.Moves[];
      831: PokeRogue.enums.Moves[];
      833: PokeRogue.enums.Moves[];
      835: PokeRogue.enums.Moves[];
      837: PokeRogue.enums.Moves[];
      840: PokeRogue.enums.Moves[];
      843: PokeRogue.enums.Moves[];
      845: PokeRogue.enums.Moves[];
      846: PokeRogue.enums.Moves[];
      848: PokeRogue.enums.Moves[];
      850: PokeRogue.enums.Moves[];
      852: PokeRogue.enums.Moves[];
      854: PokeRogue.enums.Moves[];
      856: PokeRogue.enums.Moves[];
      859: PokeRogue.enums.Moves[];
      868: PokeRogue.enums.Moves[];
      870: PokeRogue.enums.Moves[];
      871: PokeRogue.enums.Moves[];
      872: PokeRogue.enums.Moves[];
      874: PokeRogue.enums.Moves[];
      875: PokeRogue.enums.Moves[];
      876: PokeRogue.enums.Moves[];
      877: PokeRogue.enums.Moves[];
      878: PokeRogue.enums.Moves[];
      880: PokeRogue.enums.Moves[];
      881: PokeRogue.enums.Moves[];
      882: PokeRogue.enums.Moves[];
      883: PokeRogue.enums.Moves[];
      884: PokeRogue.enums.Moves[];
      885: PokeRogue.enums.Moves[];
      888: PokeRogue.enums.Moves[];
      889: PokeRogue.enums.Moves[];
      890: PokeRogue.enums.Moves[];
      891: PokeRogue.enums.Moves[];
      893: PokeRogue.enums.Moves[];
      894: PokeRogue.enums.Moves[];
      895: PokeRogue.enums.Moves[];
      896: PokeRogue.enums.Moves[];
      897: PokeRogue.enums.Moves[];
      898: PokeRogue.enums.Moves[];
      905: PokeRogue.enums.Moves[];
      906: PokeRogue.enums.Moves[];
      909: PokeRogue.enums.Moves[];
      912: PokeRogue.enums.Moves[];
      915: PokeRogue.enums.Moves[];
      917: PokeRogue.enums.Moves[];
      919: PokeRogue.enums.Moves[];
      921: PokeRogue.enums.Moves[];
      924: PokeRogue.enums.Moves[];
      926: PokeRogue.enums.Moves[];
      928: PokeRogue.enums.Moves[];
      931: PokeRogue.enums.Moves[];
      932: PokeRogue.enums.Moves[];
      935: PokeRogue.enums.Moves[];
      938: PokeRogue.enums.Moves[];
      940: PokeRogue.enums.Moves[];
      942: PokeRogue.enums.Moves[];
      944: PokeRogue.enums.Moves[];
      946: PokeRogue.enums.Moves[];
      948: PokeRogue.enums.Moves[];
      950: PokeRogue.enums.Moves[];
      951: PokeRogue.enums.Moves[];
      953: PokeRogue.enums.Moves[];
      955: PokeRogue.enums.Moves[];
      957: PokeRogue.enums.Moves[];
      960: PokeRogue.enums.Moves[];
      962: PokeRogue.enums.Moves[];
      963: PokeRogue.enums.Moves[];
      965: PokeRogue.enums.Moves[];
      967: PokeRogue.enums.Moves[];
      968: PokeRogue.enums.Moves[];
      969: PokeRogue.enums.Moves[];
      971: PokeRogue.enums.Moves[];
      973: PokeRogue.enums.Moves[];
      974: PokeRogue.enums.Moves[];
      976: PokeRogue.enums.Moves[];
      977: PokeRogue.enums.Moves[];
      978: PokeRogue.enums.Moves[];
      984: PokeRogue.enums.Moves[];
      985: PokeRogue.enums.Moves[];
      986: PokeRogue.enums.Moves[];
      987: PokeRogue.enums.Moves[];
      988: PokeRogue.enums.Moves[];
      989: PokeRogue.enums.Moves[];
      990: PokeRogue.enums.Moves[];
      991: PokeRogue.enums.Moves[];
      992: PokeRogue.enums.Moves[];
      993: PokeRogue.enums.Moves[];
      994: PokeRogue.enums.Moves[];
      995: PokeRogue.enums.Moves[];
      996: PokeRogue.enums.Moves[];
      999: PokeRogue.enums.Moves[];
      1001: PokeRogue.enums.Moves[];
      1002: PokeRogue.enums.Moves[];
      1003: PokeRogue.enums.Moves[];
      1004: PokeRogue.enums.Moves[];
      1005: PokeRogue.enums.Moves[];
      1006: PokeRogue.enums.Moves[];
      1007: PokeRogue.enums.Moves[];
      1008: PokeRogue.enums.Moves[];
      1009: PokeRogue.enums.Moves[];
      1010: PokeRogue.enums.Moves[];
      1012: PokeRogue.enums.Moves[];
      1014: PokeRogue.enums.Moves[];
      1015: PokeRogue.enums.Moves[];
      1016: PokeRogue.enums.Moves[];
      1017: PokeRogue.enums.Moves[];
      1020: PokeRogue.enums.Moves[];
      1021: PokeRogue.enums.Moves[];
      1022: PokeRogue.enums.Moves[];
      1023: PokeRogue.enums.Moves[];
      1024: PokeRogue.enums.Moves[];
      1025: PokeRogue.enums.Moves[];
      2019: PokeRogue.enums.Moves[];
      2027: PokeRogue.enums.Moves[];
      2037: PokeRogue.enums.Moves[];
      2050: PokeRogue.enums.Moves[];
      2052: PokeRogue.enums.Moves[];
      2074: PokeRogue.enums.Moves[];
      2088: PokeRogue.enums.Moves[];
      2670: PokeRogue.enums.Moves[];
      4052: PokeRogue.enums.Moves[];
      4077: PokeRogue.enums.Moves[];
      4079: PokeRogue.enums.Moves[];
      4083: PokeRogue.enums.Moves[];
      4144: PokeRogue.enums.Moves[];
      4145: PokeRogue.enums.Moves[];
      4146: PokeRogue.enums.Moves[];
      4222: PokeRogue.enums.Moves[];
      4263: PokeRogue.enums.Moves[];
      4554: PokeRogue.enums.Moves[];
      4562: PokeRogue.enums.Moves[];
      4618: PokeRogue.enums.Moves[];
      6058: PokeRogue.enums.Moves[];
      6100: PokeRogue.enums.Moves[];
      6211: PokeRogue.enums.Moves[];
      6215: PokeRogue.enums.Moves[];
      6570: PokeRogue.enums.Moves[];
      8128: PokeRogue.enums.Moves[];
      8194: PokeRogue.enums.Moves[];
      8901: PokeRogue.enums.Moves[];
  };
  export declare function initEggMoves(): void;
  
}

declare namespace PokeRogue.data {
  //import BattleScene from "../battle-scene";
  //import PokemonSpecies from "./pokemon-species";
  //import { VariantTier } from "../enums/variant-tiers";
  //import { PlayerPokemon } from "#app/field/pokemon";
  //import { EggTier } from "#enums/egg-type";
  //import { Species } from "#enums/species";
  //import { EggSourceType } from "#app/enums/egg-source-types.js";
  export declare const EGG_SEED = 1073741824;
  /** Egg options to override egg properties */
  export interface IEggOptions {
      /** Id. Used to check if egg type will be manaphy (id % 204 === 0) */
      id?: number;
      /** Timestamp when this egg got created */
      timestamp?: number;
      /** Defines if the egg got pulled from a gacha or not. If true, egg pity and pull statistics will be applyed.
       * Egg will be automaticly added to the game data.
       * NEEDS scene eggOption to work.
       */
      pulled?: boolean;
      /** Defines where the egg comes from. Applies specific modifiers.
       * Will also define the text displayed in the egg list.
       */
      sourceType?: EggSourceType;
      /** Needs to be defined if eggOption pulled is defined or if no species or isShiny is degined since this will be needed to generate them. */
      scene?: BattleScene;
      /** Sets the tier of the egg. Only species of this tier can be hatched from this egg.
       * Tier will be overriden if species eggOption is set.
       */
      tier?: EggTier;
      /** Sets how many waves it will take till this egg hatches. */
      hatchWaves?: number;
      /** Sets the exact species that will hatch from this egg.
       * Needs scene eggOption if not provided.
       */
      species?: Species;
      /** Defines if the hatched pokemon will be a shiny. */
      isShiny?: boolean;
      /** Defines the variant of the pokemon that will hatch from this egg. If no variantTier is given the normal variant rates will apply. */
      variantTier?: VariantTier;
      /** Defines which egg move will be unlocked. 3 = rare egg move. */
      eggMoveIndex?: number;
      /** Defines if the egg will hatch with the hidden ability of this species.
       *  If no hidden ability exist, a random one will get choosen.
       */
      overrideHiddenAbility?: boolean;
  }
  export declare class Egg {
      public _id;
      public _tier;
      public _sourceType;
      public _hatchWaves;
      public _timestamp;
      public _species;
      public _isShiny;
      public _variantTier;
      public _eggMoveIndex;
      public _overrideHiddenAbility;
      get id(): number;
      get tier(): EggTier;
      get sourceType(): EggSourceType | undefined;
      get hatchWaves(): number;
      set hatchWaves(value: number);
      get timestamp(): number;
      get species(): Species;
      get isShiny(): boolean;
      get variantTier(): VariantTier;
      get eggMoveIndex(): number;
      get overrideHiddenAbility(): boolean;
      constructor(eggOptions?: IEggOptions);
      isManaphyEgg(): boolean;
      getKey(): string;
      generatePlayerPokemon(scene: PokeRogue.BattleScene): PlayerPokemon;
      addEggToGameData(scene: PokeRogue.BattleScene): void;
      getEggDescriptor(): string;
      getEggHatchWavesMessage(): string;
      getEggTypeDescriptor(scene: PokeRogue.BattleScene): string;
      public rollEggMoveIndex;
      public getEggTierDefaultHatchWaves;
      public rollEggTier;
      public rollSpecies;
      /**
      * Rolls whether the egg is shiny or not.
      * @returns True if the egg is shiny
      **/
      public rollShiny;
      public rollVariant;
      public checkForPityTierOverrides;
      public increasePullStatistic;
      public getEggTierFromSpeciesStarterValue;
  }
  export declare function getLegendaryGachaSpeciesForTimestamp(scene: PokeRogue.BattleScene, timestamp: number): Species;
  /**
   * Check for a given species EggTier Value
   * @param species - Species for wich we will check the egg tier it belongs to
   * @returns The egg tier of a given pokemon species
   */
  export declare function getEggTierForSpecies(pokemonSpecies: PokeRogue.data.PokemonSpecies): EggTier;
  
}

declare namespace PokeRogue.data {
  export declare enum GrowthRate {
      ERRATIC = 0,
      FAST = 1,
      MEDIUM_FAST = 2,
      MEDIUM_SLOW = 3,
      SLOW = 4,
      FLUCTUATING = 5
  }
  export declare function getLevelTotalExp(level: integer, growthRate: GrowthRate): integer;
  export declare function getLevelRelExp(level: integer, growthRate: GrowthRate): number;
  export declare function getGrowthRateColor(growthRate: GrowthRate, shadow?: boolean): "#78c850" | "#f85888" | "#906060" | "#f8d030" | "#b8a038" | "#588040" | "#6890f0" | "#807870" | "#f08030" | "#c03028" | "#a040a0" | "#483850";
  
}

declare namespace PokeRogue.data {
  export declare enum Gender {
      GENDERLESS = -1,
      MALE = 0,
      FEMALE = 1
  }
  export declare function getGenderSymbol(gender: Gender): "" | "♂" | "♀";
  export declare function getGenderColor(gender: Gender, shadow?: boolean): "#f89890" | "#984038" | "#40c8f8" | "#006090" | "#ffffff";
  
}

declare namespace PokeRogue.data {
  //import { ChargeAnim } from "./battle-anims";
  //import Pokemon from "../field/pokemon";
  //import { StatusEffect } from "./status-effect";
  //import { Type } from "./type";
  //import { Constructor } from "#app/utils";
  //import * as Utils from "../utils";
  //import { WeatherType } from "./weather";
  //import { PokemonHeldItemModifier, BerryModifier } from "../modifier/modifier";
  //import { BattlerIndex } from "../battle";
  //import { TerrainType } from "./terrain";
  //import { Localizable } from "#app/interfaces/locales";
  //import { Abilities } from "#enums/abilities";
  //import { ArenaTagType } from "#enums/arena-tag-type";
  //import { BattlerTagType } from "#enums/battler-tag-type";
  //import { Moves } from "#enums/moves";
  //import { type BattleStat, type EffectiveStat } from "#app/enums/stat";
  //import { GameMode } from "#app/game-mode";
  export declare enum MoveCategory {
      PHYSICAL = 0,
      SPECIAL = 1,
      STATUS = 2
  }
  export declare enum MoveTarget {
      /** {@link https://bulbapedia.bulbagarden.net/wiki/Category:Moves_that_target_the_user Moves that target the User} */
      USER = 0,
      OTHER = 1,
      ALL_OTHERS = 2,
      NEAR_OTHER = 3,
      /** {@link https://bulbapedia.bulbagarden.net/wiki/Category:Moves_that_target_all_adjacent_Pok%C3%A9mon Moves that target all adjacent Pokemon} */
      ALL_NEAR_OTHERS = 4,
      NEAR_ENEMY = 5,
      /** {@link https://bulbapedia.bulbagarden.net/wiki/Category:Moves_that_target_all_adjacent_foes Moves that target all adjacent foes} */
      ALL_NEAR_ENEMIES = 6,
      RANDOM_NEAR_ENEMY = 7,
      ALL_ENEMIES = 8,
      /** {@link https://bulbapedia.bulbagarden.net/wiki/Category:Counterattacks Counterattacks} */
      ATTACKER = 9,
      /** {@link https://bulbapedia.bulbagarden.net/wiki/Category:Moves_that_target_one_adjacent_ally Moves that target one adjacent ally} */
      NEAR_ALLY = 10,
      ALLY = 11,
      USER_OR_NEAR_ALLY = 12,
      USER_AND_ALLIES = 13,
      /** {@link https://bulbapedia.bulbagarden.net/wiki/Category:Moves_that_target_all_Pok%C3%A9mon Moves that target all Pokemon} */
      ALL = 14,
      USER_SIDE = 15,
      /** {@link https://bulbapedia.bulbagarden.net/wiki/Category:Entry_hazard-creating_moves Entry hazard-creating moves} */
      ENEMY_SIDE = 16,
      BOTH_SIDES = 17,
      PARTY = 18,
      CURSE = 19
  }
  export declare enum MoveFlags {
      NONE = 0,
      MAKES_CONTACT = 1,
      IGNORE_PROTECT = 2,
      IGNORE_VIRTUAL = 4,
      SOUND_BASED = 8,
      HIDE_USER = 16,
      HIDE_TARGET = 32,
      BITING_MOVE = 64,
      PULSE_MOVE = 128,
      PUNCHING_MOVE = 256,
      SLICING_MOVE = 512,
      /**
       * Indicates a move should be affected by {@linkcode Abilities.RECKLESS}
       * @see {@linkcode Move.recklessMove()}
       */
      RECKLESS_MOVE = 1024,
      BALLBOMB_MOVE = 2048,
      POWDER_MOVE = 4096,
      DANCE_MOVE = 8192,
      WIND_MOVE = 16384,
      TRIAGE_MOVE = 32768,
      IGNORE_ABILITIES = 65536,
      /**
       * Enables all hits of a multi-hit move to be accuracy checked individually
       */
      CHECK_ALL_HITS = 131072,
      /**
       * Indicates a move is able to be redirected to allies in a double battle if the attacker faints
       */
      REDIRECT_COUNTER = 262144
  }
  type MoveConditionFunc = (user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move) => boolean;
  type UserMoveConditionFunc = (user: PokeRogue.field.Pokemon, move: Move) => boolean;
  export class Move implements Localizable {
      id: PokeRogue.enums.Moves;
      name: string;
      public _type;
      public _category;
      moveTarget: MoveTarget;
      power: integer;
      accuracy: integer;
      pp: integer;
      effect: string;
      chance: integer;
      priority: integer;
      generation: integer;
      attrs: MoveAttr[];
      public conditions;
      public flags;
      public nameAppend;
      constructor(id: PokeRogue.enums.Moves, type: PokeRogue.data.Type, category: MoveCategory, defaultMoveTarget: MoveTarget, power: integer, accuracy: integer, pp: integer, chance: integer, priority: integer, generation: integer);
      get type(): Type;
      get category(): MoveCategory;
      localize(): void;
      /**
       * Get all move attributes that match `attrType`
       * @param attrType any attribute that extends {@linkcode MoveAttr}
       * @returns Array of attributes that match `attrType`, Empty Array if none match.
       */
      getAttrs<T extends MoveAttr>(attrType: PokeRogue.Constructor<T>): T[];
      /**
       * Check if a move has an attribute that matches `attrType`
       * @param attrType any attribute that extends {@linkcode MoveAttr}
       * @returns true if the move has attribute `attrType`
       */
      hasAttr<T extends MoveAttr>(attrType: PokeRogue.Constructor<T>): boolean;
      /**
       * Takes as input a boolean function and returns the first MoveAttr in attrs that matches true
       * @param attrPredicate
       * @returns the first {@linkcode MoveAttr} element in attrs that makes the input function return true
       */
      findAttr(attrPredicate: (attr: MoveAttr) => boolean): MoveAttr;
      /**
       * Adds a new MoveAttr to the move (appends to the attr array)
       * if the MoveAttr also comes with a condition, also adds that to the conditions array: {@linkcode MoveCondition}
       * @param AttrType {@linkcode MoveAttr} the constructor of a MoveAttr class
       * @param args the args needed to instantiate a the given class
       * @returns the called object {@linkcode Move}
       */
      attr<T extends PokeRogue.Constructor<MoveAttr>>(AttrType: T, ...args: ConstructorParameters<T>): this;
      /**
       * Adds a new MoveAttr to the move (appends to the attr array)
       * if the MoveAttr also comes with a condition, also adds that to the conditions array: {@linkcode MoveCondition}
       * Almost identical to {@link attr}, except you are passing in a MoveAttr object, instead of a constructor and it's arguments
       * @param attrAdd {@linkcode MoveAttr} the attribute to add
       * @returns the called object {@linkcode Move}
       */
      addAttr(attrAdd: MoveAttr): this;
      /**
       * Sets the move target of this move
       * @param moveTarget {@linkcode MoveTarget} the move target to set
       * @returns the called object {@linkcode Move}
       */
      target(moveTarget: MoveTarget): this;
      /**
       * Getter function that returns if this Move has a MoveFlag
       * @param flag {@linkcode MoveFlags} to check
       * @returns boolean
       */
      hasFlag(flag: MoveFlags): boolean;
      /**
       * Getter function that returns if the move hits multiple targets
       * @returns boolean
       */
      isMultiTarget(): boolean;
      /**
       * Getter function that returns if the move targets itself or an ally
       * @returns boolean
       */
      isAllyTarget(): boolean;
      /**
       * Checks if the move is immune to certain types.
       * Currently looks at cases of Grass types with powder moves and Dark types with moves affected by Prankster.
       * @param {Pokemon} user the source of this move
       * @param {Pokemon} target the target of this move
       * @param {Type} type the type of the move's target
       * @returns boolean
       */
      isTypeImmune(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, type: PokeRogue.data.Type): boolean;
      /**
       * Adds a move condition to the move
       * @param condition {@linkcode MoveCondition} or {@linkcode MoveConditionFunc}, appends to conditions array a new MoveCondition object
       * @returns the called object {@linkcode Move}
       */
      condition(condition: MoveCondition | MoveConditionFunc): this;
      /**
       * Marks the move as "partial": appends texts to the move name
       * @returns the called object {@linkcode Move}
       */
      partial(): this;
      /**
       * Marks the move as "unimplemented": appends texts to the move name
       * @returns the called object {@linkcode Move}
       */
      unimplemented(): this;
      /**
       * Sets the flags of the move
       * @param flag {@linkcode MoveFlags}
       * @param on a boolean, if True, then "ORs" the flag onto existing ones, if False then "XORs" the flag onto existing ones
       */
      public setFlag;
      /**
       * Sets the {@linkcode MoveFlags.MAKES_CONTACT} flag for the calling Move
       * @param makesContact The value (boolean) to set the flag to
       * @returns The {@linkcode Move} that called this function
       */
      makesContact(makesContact?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.IGNORE_PROTECT} flag for the calling Move
       * @param ignoresProtect The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.CURSE}
       * @returns The {@linkcode Move} that called this function
       */
      ignoresProtect(ignoresProtect?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.IGNORE_VIRTUAL} flag for the calling Move
       * @param ignoresVirtual The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.NATURE_POWER}
       * @returns The {@linkcode Move} that called this function
       */
      ignoresVirtual(ignoresVirtual?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.SOUND_BASED} flag for the calling Move
       * @param soundBased The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.UPROAR}
       * @returns The {@linkcode Move} that called this function
       */
      soundBased(soundBased?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.HIDE_USER} flag for the calling Move
       * @param hidesUser The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.TELEPORT}
       * @returns The {@linkcode Move} that called this function
       */
      hidesUser(hidesUser?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.HIDE_TARGET} flag for the calling Move
       * @param hidesTarget The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.WHIRLWIND}
       * @returns The {@linkcode Move} that called this function
       */
      hidesTarget(hidesTarget?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.BITING_MOVE} flag for the calling Move
       * @param bitingMove The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.BITE}
       * @returns The {@linkcode Move} that called this function
       */
      bitingMove(bitingMove?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.PULSE_MOVE} flag for the calling Move
       * @param pulseMove The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.WATER_PULSE}
       * @returns The {@linkcode Move} that called this function
       */
      pulseMove(pulseMove?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.PUNCHING_MOVE} flag for the calling Move
       * @param punchingMove The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.DRAIN_PUNCH}
       * @returns The {@linkcode Move} that called this function
       */
      punchingMove(punchingMove?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.SLICING_MOVE} flag for the calling Move
       * @param slicingMove The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.X_SCISSOR}
       * @returns The {@linkcode Move} that called this function
       */
      slicingMove(slicingMove?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.RECKLESS_MOVE} flag for the calling Move
       * @see {@linkcode Abilities.RECKLESS}
       * @param recklessMove The value to set the flag to
       * @returns The {@linkcode Move} that called this function
       */
      recklessMove(recklessMove?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.BALLBOMB_MOVE} flag for the calling Move
       * @param ballBombMove The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.ELECTRO_BALL}
       * @returns The {@linkcode Move} that called this function
       */
      ballBombMove(ballBombMove?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.POWDER_MOVE} flag for the calling Move
       * @param powderMove The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.STUN_SPORE}
       * @returns The {@linkcode Move} that called this function
       */
      powderMove(powderMove?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.DANCE_MOVE} flag for the calling Move
       * @param danceMove The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.PETAL_DANCE}
       * @returns The {@linkcode Move} that called this function
       */
      danceMove(danceMove?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.WIND_MOVE} flag for the calling Move
       * @param windMove The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.HURRICANE}
       * @returns The {@linkcode Move} that called this function
       */
      windMove(windMove?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.TRIAGE_MOVE} flag for the calling Move
       * @param triageMove The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.ABSORB}
       * @returns The {@linkcode Move} that called this function
       */
      triageMove(triageMove?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.IGNORE_ABILITIES} flag for the calling Move
       * @param ignoresAbilities sThe value (boolean) to set the flag to
       * example: @see {@linkcode Moves.SUNSTEEL_STRIKE}
       * @returns The {@linkcode Move} that called this function
       */
      ignoresAbilities(ignoresAbilities?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.CHECK_ALL_HITS} flag for the calling Move
       * @param checkAllHits The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.TRIPLE_AXEL}
       * @returns The {@linkcode Move} that called this function
       */
      checkAllHits(checkAllHits?: boolean): this;
      /**
       * Sets the {@linkcode MoveFlags.REDIRECT_COUNTER} flag for the calling Move
       * @param redirectCounter The value (boolean) to set the flag to
       * example: @see {@linkcode Moves.METAL_BURST}
       * @returns The {@linkcode Move} that called this function
       */
      redirectCounter(redirectCounter?: boolean): this;
      /**
       * Checks if the move flag applies to the pokemon(s) using/receiving the move
       * @param flag {@linkcode MoveFlags} MoveFlag to check on user and/or target
       * @param user {@linkcode Pokemon} the Pokemon using the move
       * @param target {@linkcode Pokemon} the Pokemon receiving the move
       * @returns boolean
       */
      checkFlag(flag: MoveFlags, user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon | null): boolean;
      /**
       * Applies each {@linkcode MoveCondition} of this move to the params
       * @param user {@linkcode Pokemon} to apply conditions to
       * @param target {@linkcode Pokemon} to apply conditions to
       * @param move {@linkcode Move} to apply conditions to
       * @returns boolean: false if any of the apply()'s return false, else true
       */
      applyConditions(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): boolean;
      /**
       * Sees if, given the target pokemon, a move fails on it (by looking at each {@linkcode MoveAttr} of this move
       * @param user {@linkcode Pokemon} using the move
       * @param target {@linkcode Pokemon} receiving the move
       * @param move {@linkcode Move} using the move
       * @param cancelled {@linkcode Utils.BooleanHolder} to hold boolean value
       * @returns string of the failed text, or null
       */
      getFailedText(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, cancelled: Utils.BooleanHolder): string | null;
      /**
       * Calculates the userBenefitScore across all the attributes and conditions
       * @param user {@linkcode Pokemon} using the move
       * @param target {@linkcode Pokemon} receiving the move
       * @param move {@linkcode Move} using the move
       * @returns integer representing the total benefitScore
       */
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
      /**
       * Calculates the targetBenefitScore across all the attributes
       * @param user {@linkcode Pokemon} using the move
       * @param target {@linkcode Pokemon} receiving the move
       * @param move {@linkcode Move} using the move
       * @returns integer representing the total benefitScore
       */
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
      /**
       * Calculates the accuracy of a move in battle based on various conditions and attributes.
       *
       * @param user {@linkcode Pokemon} The Pokémon using the move.
       * @param target {@linkcode Pokemon} The Pokémon being targeted by the move.
       * @returns The calculated accuracy of the move.
       */
      calculateBattleAccuracy(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, simulated?: boolean): number;
      /**
       * Calculates the power of a move in battle based on various conditions and attributes.
       *
       * @param source {@linkcode Pokemon} The Pokémon using the move.
       * @param target {@linkcode Pokemon} The Pokémon being targeted by the move.
       * @returns The calculated power of the move.
       */
      calculateBattlePower(source: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, simulated?: boolean): number;
  }
  export declare class AttackMove extends Move {
      constructor(id: PokeRogue.enums.Moves, type: PokeRogue.data.Type, category: MoveCategory, power: integer, accuracy: integer, pp: integer, chance: integer, priority: integer, generation: integer);
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class StatusMove extends Move {
      constructor(id: PokeRogue.enums.Moves, type: PokeRogue.data.Type, accuracy: integer, pp: integer, chance: integer, priority: integer, generation: integer);
  }
  export declare class SelfStatusMove extends Move {
      constructor(id: PokeRogue.enums.Moves, type: PokeRogue.data.Type, accuracy: integer, pp: integer, chance: integer, priority: integer, generation: integer);
  }
  /**
   * Base class defining all {@linkcode Move} Attributes
   * @abstract
   * @see {@linkcode apply}
   */
  export declare abstract class MoveAttr {
      /** Should this {@linkcode Move} target the user? */
      selfTarget: boolean;
      constructor(selfTarget?: boolean);
      /**
       * Applies move attributes
       * @see {@linkcode applyMoveAttrsInternal}
       * @virtual
       * @param user {@linkcode Pokemon} using the move
       * @param target {@linkcode Pokemon} target of the move
       * @param move {@linkcode Move} with this attribute
       * @param args Set of unique arguments needed by this attribute
       * @returns true if application of the ability succeeds
       */
      apply(user: PokeRogue.field.Pokemon | null, target: PokeRogue.field.Pokemon | null, move: Move, args: any[]): boolean | Promise<boolean>;
      /**
       * @virtual
       * @returns the {@linkcode MoveCondition} or {@linkcode MoveConditionFunc} for this {@linkcode Move}
       */
      getCondition(): MoveCondition | MoveConditionFunc | null;
      /**
       * @virtual
       * @param user {@linkcode Pokemon} using the move
       * @param target {@linkcode Pokemon} target of the move
       * @param move {@linkcode Move} with this attribute
       * @param cancelled {@linkcode Utils.BooleanHolder} which stores if the move should fail
       * @returns the string representing failure of this {@linkcode Move}
       */
      getFailedText(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, cancelled: Utils.BooleanHolder): string | null;
      /**
       * Used by the Enemy AI to rank an attack based on a given user
       * @see {@linkcode EnemyPokemon.getNextMove}
       * @virtual
       */
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
      /**
       * Used by the Enemy AI to rank an attack based on a given target
       * @see {@linkcode EnemyPokemon.getNextMove}
       * @virtual
       */
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare enum MoveEffectTrigger {
      PRE_APPLY = 0,
      POST_APPLY = 1,
      HIT = 2,
      /** Triggers one time after all target effects have applied */
      POST_TARGET = 3
  }
  /** Base class defining all Move Effect Attributes
   * @extends MoveAttr
   * @see {@linkcode apply}
   */
  export declare class MoveEffectAttr extends MoveAttr {
      /** Defines when this effect should trigger in the move's effect order
       * @see {@linkcode phases.MoveEffectPhase.start}
       */
      trigger: MoveEffectTrigger;
      /** Should this effect only apply on the first hit? */
      firstHitOnly: boolean;
      /** Should this effect only apply on the last hit? */
      lastHitOnly: boolean;
      /** Should this effect only apply on the first target hit? */
      firstTargetOnly: boolean;
      constructor(selfTarget?: boolean, trigger?: MoveEffectTrigger, firstHitOnly?: boolean, lastHitOnly?: boolean, firstTargetOnly?: boolean);
      /**
       * Determines whether the {@linkcode Move}'s effects are valid to {@linkcode apply}
       * @virtual
       * @param user {@linkcode Pokemon} using the move
       * @param target {@linkcode Pokemon} target of the move
       * @param move {@linkcode Move} with this attribute
       * @param args Set of unique arguments needed by this attribute
       * @returns true if basic application of the ability attribute should be possible
       */
      canApply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args?: any[]): boolean;
      /** Applies move effects so long as they are able based on {@linkcode canApply} */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args?: any[]): boolean | Promise<boolean>;
      /**
       * Gets the used move's additional effect chance.
       * If user's ability has MoveEffectChanceMultiplierAbAttr or IgnoreMoveEffectsAbAttr modifies the base chance.
       * @param user {@linkcode Pokemon} using this move
       * @param target {@linkcode Pokemon} target of this move
       * @param move {@linkcode Move} being used
       * @param selfEffect {@linkcode Boolean} if move targets user.
       * @returns Move chance value.
       */
      getMoveChance(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, selfEffect?: Boolean, showAbility?: Boolean): integer;
  }
  /**
   * Base class defining all Move Header attributes.
   * Move Header effects apply at the beginning of a turn before any moves are resolved.
   * They can be used to apply effects to the field (e.g. queueing a message) or to the user
   * (e.g. adding a battler tag).
   */
  export declare class MoveHeaderAttr extends MoveAttr {
      constructor();
  }
  /**
   * Header attribute to queue a message at the beginning of a turn.
   * @see {@link MoveHeaderAttr}
   */
  export declare class MessageHeaderAttr extends MoveHeaderAttr {
      public message;
      constructor(message: string | ((user: PokeRogue.field.Pokemon, move: Move) => string));
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Header attribute to add a battler tag to the user at the beginning of a turn.
   * @see {@linkcode MoveHeaderAttr}
   */
  export declare class AddBattlerTagHeaderAttr extends MoveHeaderAttr {
      public tagType;
      constructor(tagType: PokeRogue.enums.BattlerTagType);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Header attribute to implement the "charge phase" of Beak Blast at the
   * beginning of a turn.
   * @see {@link https://bulbapedia.bulbagarden.net/wiki/Beak_Blast_(move) | Beak Blast}
   * @see {@linkcode BeakBlastChargingTag}
   */
  export declare class BeakBlastHeaderAttr extends AddBattlerTagHeaderAttr {
      /** Required to initialize Beak Blast's charge animation correctly */
      chargeAnim: PokeRogue.data.ChargeAnim;
      constructor();
  }
  export declare class PreMoveMessageAttr extends MoveAttr {
      public message;
      constructor(message: string | ((user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move) => string));
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute for Status moves that take attack type effectiveness
   * into consideration (i.e. {@linkcode https://bulbapedia.bulbagarden.net/wiki/Thunder_Wave_(move) | Thunder Wave})
   * @extends MoveAttr
   */
  export declare class RespectAttackTypeImmunityAttr extends MoveAttr {
  }
  export declare class IgnoreOpponentStatStagesAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class HighCritAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class CritOnlyAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class FixedDamageAttr extends MoveAttr {
      public damage;
      constructor(damage: integer);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getDamage(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class UserHpDamageAttr extends FixedDamageAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class TargetHalfHpDamageAttr extends FixedDamageAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
  }
  export declare class MatchHpAttr extends FixedDamageAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  type MoveFilter = (move: Move) => boolean;
  export declare class CounterDamageAttr extends FixedDamageAttr {
      public moveFilter;
      public multiplier;
      constructor(moveFilter: MoveFilter, multiplier: integer);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class LevelDamageAttr extends FixedDamageAttr {
      constructor();
      getDamage(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
  }
  export declare class RandomLevelDamageAttr extends FixedDamageAttr {
      constructor();
      getDamage(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
  }
  export declare class ModifiedDamageAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getModifiedDamage(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, damage: integer): integer;
  }
  export declare class SurviveDamageAttr extends ModifiedDamageAttr {
      getModifiedDamage(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, damage: number): number;
      getCondition(): MoveConditionFunc;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class RecoilAttr extends MoveEffectAttr {
      public useHp;
      public damageRatio;
      public unblockable;
      constructor(useHp?: boolean, damageRatio?: number, unblockable?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  /**
   * Attribute used for moves which self KO the user regardless if the move hits a target
   * @extends MoveEffectAttr
   * @see {@linkcode apply}
   **/
  export declare class SacrificialAttr extends MoveEffectAttr {
      constructor();
      /**
       * Deals damage to the user equal to their current hp
       * @param user {@linkcode Pokemon} that used the move
       * @param target {@linkcode Pokemon} target of the move
       * @param move {@linkcode Move} with this attribute
       * @param args N/A
       * @returns true if the function succeeds
       **/
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  /**
   * Attribute used for moves which self KO the user but only if the move hits a target
   * @extends MoveEffectAttr
   * @see {@linkcode apply}
   **/
  export declare class SacrificialAttrOnHit extends MoveEffectAttr {
      constructor();
      /**
       * Deals damage to the user equal to their current hp if the move lands
       * @param user {@linkcode Pokemon} that used the move
       * @param target {@linkcode Pokemon} target of the move
       * @param move {@linkcode Move} with this attribute
       * @param args N/A
       * @returns true if the function succeeds
       **/
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  /**
   * Attribute used for moves which cut the user's Max HP in half.
   * Triggers using {@linkcode MoveEffectTrigger.POST_TARGET}.
   * @extends MoveEffectAttr
   * @see {@linkcode apply}
   */
  export declare class HalfSacrificialAttr extends MoveEffectAttr {
      constructor();
      /**
       * Cut's the user's Max HP in half and displays the appropriate recoil message
       * @param user {@linkcode Pokemon} that used the move
       * @param target N/A
       * @param move {@linkcode Move} with this attribute
       * @param args N/A
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare enum MultiHitType {
      _2 = 0,
      _2_TO_5 = 1,
      _3 = 2,
      _10 = 3,
      BEAT_UP = 4
  }
  /**
   * Heals the user or target by {@linkcode healRatio} depending on the value of {@linkcode selfTarget}
   * @extends MoveEffectAttr
   * @see {@linkcode apply}
   */
  export declare class HealAttr extends MoveEffectAttr {
      /** The percentage of {@linkcode Stat.HP} to heal */
      public healRatio;
      /** Should an animation be shown? */
      public showAnim;
      constructor(healRatio?: number, showAnim?: boolean, selfTarget?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      /**
       * Creates a new {@linkcode PokemonHealPhase}.
       * This heals the target and shows the appropriate message.
       */
      addHealPhase(target: PokeRogue.field.Pokemon, healRatio: number): void;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  /**
   * Cures the user's party of non-volatile status conditions, ie. Heal Bell, Aromatherapy
   * @extends MoveEffectAttr
   * @see {@linkcode apply}
   */
  export declare class PartyStatusCureAttr extends MoveEffectAttr {
      /** Message to display after using move */
      public message;
      /** Skips mons with this ability, ie. Soundproof */
      public abilityCondition;
      constructor(message: string | null, abilityCondition: PokeRogue.enums.Abilities);
      canApply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      addPartyCurePhase(user: PokeRogue.field.Pokemon): void;
  }
  /**
   * Applies damage to the target's ally equal to 1/16 of that ally's max HP.
   * @extends MoveEffectAttr
   */
  export declare class FlameBurstAttr extends MoveEffectAttr {
      /**
       * @param user - n/a
       * @param target - The target Pokémon.
       * @param move - n/a
       * @param args - n/a
       * @returns A boolean indicating whether the effect was successfully applied.
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean | Promise<boolean>;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class SacrificialFullRestoreAttr extends SacrificialAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
      getCondition(): MoveConditionFunc;
  }
  /**
   * Attribute used for moves which ignore type-based debuffs from weather, namely Hydro Steam.
   * Called during damage calculation after getting said debuff from getAttackTypeMultiplier in the Pokemon class.
   * @extends MoveAttr
   * @see {@linkcode apply}
   */
  export declare class IgnoreWeatherTypeDebuffAttr extends MoveAttr {
      /** The {@linkcode WeatherType} this move ignores */
      weather: PokeRogue.data.WeatherType;
      constructor(weather: PokeRogue.data.WeatherType);
      /**
       * Changes the type-based weather modifier if this move's power would be reduced by it
       * @param user {@linkcode Pokemon} that used the move
       * @param target N/A
       * @param move {@linkcode Move} with this attribute
       * @param args [0] {@linkcode Utils.NumberHolder} for arenaAttackTypeMultiplier
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare abstract class WeatherHealAttr extends HealAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      abstract getWeatherHealRatio(weatherType: PokeRogue.data.WeatherType): number;
  }
  export declare class PlantHealAttr extends WeatherHealAttr {
      getWeatherHealRatio(weatherType: PokeRogue.data.WeatherType): number;
  }
  export declare class SandHealAttr extends WeatherHealAttr {
      getWeatherHealRatio(weatherType: PokeRogue.data.WeatherType): number;
  }
  /**
   * Heals the target or the user by either {@linkcode normalHealRatio} or {@linkcode boostedHealRatio}
   * depending on the evaluation of {@linkcode condition}
   * @extends HealAttr
   * @see {@linkcode apply}
   */
  export declare class BoostHealAttr extends HealAttr {
      /** Healing received when {@linkcode condition} is false */
      public normalHealRatio;
      /** Healing received when {@linkcode condition} is true */
      public boostedHealRatio;
      /** The lambda expression to check against when boosting the healing value */
      public condition?;
      constructor(normalHealRatio?: number, boostedHealRatio?: number, showAnim?: boolean, selfTarget?: boolean, condition?: MoveConditionFunc);
      /**
       * @param user {@linkcode Pokemon} using the move
       * @param target {@linkcode Pokemon} target of the move
       * @param move {@linkcode Move} with this attribute
       * @param args N/A
       * @returns true if the move was successful
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Heals the target only if it is the ally
   * @extends HealAttr
   * @see {@linkcode apply}
   */
  export declare class HealOnAllyAttr extends HealAttr {
      /**
       * @param user {@linkcode Pokemon} using the move
       * @param target {@linkcode Pokemon} target of the move
       * @param move {@linkcode Move} with this attribute
       * @param args N/A
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Heals user as a side effect of a move that hits a target.
   * Healing is based on {@linkcode healRatio} * the amount of damage dealt or a stat of the target.
   * @extends MoveEffectAttr
   * @see {@linkcode apply}
   * @see {@linkcode getUserBenefitScore}
   */
  export declare class HitHealAttr extends MoveEffectAttr {
      public healRatio;
      public healStat;
      constructor(healRatio?: number | null, healStat?: EffectiveStat);
      /**
       * Heals the user the determined amount and possibly displays a message about regaining health.
       * If the target has the {@linkcode ReverseDrainAbAttr}, all healing is instead converted
       * to damage to the user.
       * @param user {@linkcode Pokemon} using this move
       * @param target {@linkcode Pokemon} target of this move
       * @param move {@linkcode Move} being used
       * @param args N/A
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      /**
       * Used by the Enemy AI to rank an attack based on a given user
       * @param user {@linkcode Pokemon} using this move
       * @param target {@linkcode Pokemon} target of this move
       * @param move {@linkcode Move} being used
       * @returns an integer. Higher means enemy is more likely to use that move.
       */
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  /**
   * Attribute used for moves that change priority in a turn given a condition,
   * e.g. Grassy Glide
   * Called when move order is calculated in {@linkcode TurnStartPhase}.
   * @extends MoveAttr
   * @see {@linkcode apply}
   */
  export declare class IncrementMovePriorityAttr extends MoveAttr {
      /** The condition for a move's priority being incremented */
      public moveIncrementFunc;
      /** The amount to increment priority by, if condition passes. */
      public increaseAmount;
      constructor(moveIncrementFunc: (pokemon: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move) => boolean, increaseAmount?: number);
      /**
       * Increments move priority by set amount if condition passes
       * @param user {@linkcode Pokemon} using this move
       * @param target {@linkcode Pokemon} target of this move
       * @param move {@linkcode Move} being used
       * @param args [0] {@linkcode Utils.IntegerHolder} for move priority.
       * @returns true if function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used for attack moves that hit multiple times per use, e.g. Bullet Seed.
   *
   * Applied at the beginning of {@linkcode MoveEffectPhase}.
   *
   * @extends MoveAttr
   * @see {@linkcode apply}
   */
  export declare class MultiHitAttr extends MoveAttr {
      public multiHitType;
      constructor(multiHitType?: MultiHitType);
      /**
       * Set the hit count of an attack based on this attribute instance's {@linkcode MultiHitType}.
       * If the target has an immunity to this attack's types, the hit count will always be 1.
       *
       * @param user {@linkcode Pokemon} that used the attack
       * @param target {@linkcode Pokemon} targeted by the attack
       * @param move {@linkcode Move} being used
       * @param args [0] {@linkcode Utils.IntegerHolder} storing the hit count of the attack
       * @returns True
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
      /**
       * Calculate the number of hits that an attack should have given this attribute's
       * {@linkcode MultiHitType}.
       *
       * @param user {@linkcode Pokemon} using the attack
       * @param target {@linkcode Pokemon} targeted by the attack
       * @returns The number of hits this attack should deal
       */
      getHitCount(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon): integer;
  }
  export declare class ChangeMultiHitTypeAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class WaterShurikenMultiHitTypeAttr extends ChangeMultiHitTypeAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class StatusEffectAttr extends MoveEffectAttr {
      effect: PokeRogue.data.StatusEffect;
      cureTurn: integer | null;
      overrideStatus: boolean;
      constructor(effect: PokeRogue.data.StatusEffect, selfTarget?: boolean, cureTurn?: integer, overrideStatus?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
  }
  export declare class MultiStatusEffectAttr extends StatusEffectAttr {
      effects: PokeRogue.data.StatusEffect[];
      constructor(effects: PokeRogue.data.StatusEffect[], selfTarget?: boolean, cureTurn?: integer, overrideStatus?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
  }
  export declare class PsychoShiftEffectAttr extends MoveEffectAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
  }
  /**
   * The following needs to be implemented for Thief
   * "If the user faints due to the target's Ability (Rough Skin or Iron Barbs) or held Rocky Helmet, it cannot remove the target's held item."
   * "If Knock Off causes a Pokémon with the Sticky Hold Ability to faint, it can now remove that Pokémon's held item."
   */
  export declare class StealHeldItemChanceAttr extends MoveEffectAttr {
      public chance;
      constructor(chance: number);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
      getTargetHeldItems(target: PokeRogue.field.Pokemon): PokemonHeldItemModifier[];
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
  }
  /**
   * Removes a random held item (or berry) from target.
   * Used for Incinerate and Knock Off.
   * Not Implemented Cases: (Same applies for Thief)
   * "If the user faints due to the target's Ability (Rough Skin or Iron Barbs) or held Rocky Helmet, it cannot remove the target's held item."
   * "If Knock Off causes a Pokémon with the Sticky Hold Ability to faint, it can now remove that Pokémon's held item."
   */
  export declare class RemoveHeldItemAttr extends MoveEffectAttr {
      /** Optional restriction for item pool to berries only i.e. Differentiating Incinerate and Knock Off */
      public berriesOnly;
      constructor(berriesOnly: boolean);
      /**
       *
       * @param user {@linkcode Pokemon} that used the move
       * @param target Target {@linkcode Pokemon} that the moves applies to
       * @param move {@linkcode Move} that is used
       * @param args N/A
       * @returns {boolean} True if an item was removed
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getTargetHeldItems(target: PokeRogue.field.Pokemon): PokemonHeldItemModifier[];
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
  }
  /**
   * Attribute that causes targets of the move to eat a berry. Used for Teatime, Stuff Cheeks
   */
  export declare class EatBerryAttr extends MoveEffectAttr {
      protected chosenBerry: PokeRogue.modifier.BerryModifier | undefined;
      constructor();
      /**
       * Causes the target to eat a berry.
       * @param user {@linkcode Pokemon} Pokemon that used the move
       * @param target {@linkcode Pokemon} Pokemon that will eat a berry
       * @param move {@linkcode Move} The move being used
       * @param args Unused
       * @returns {boolean} true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getTargetHeldBerries(target: PokeRogue.field.Pokemon): BerryModifier[];
      reduceBerryModifier(target: PokeRogue.field.Pokemon): void;
      eatBerry(consumer: PokeRogue.field.Pokemon): void;
  }
  /**
   *  Attribute used for moves that steal a random berry from the target. The user then eats the stolen berry.
   *  Used for Pluck & Bug Bite.
   */
  export declare class StealEatBerryAttr extends EatBerryAttr {
      constructor();
      /**
       * User steals a random berry from the target and then eats it.
       * @param {Pokemon} user Pokemon that used the move and will eat the stolen berry
       * @param {Pokemon} target Pokemon that will have its berry stolen
       * @param {Move} move Move being used
       * @param {any[]} args Unused
       * @returns {boolean} true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Move attribute that signals that the move should cure a status effect
   * @extends MoveEffectAttr
   * @see {@linkcode apply()}
   */
  export declare class HealStatusEffectAttr extends MoveEffectAttr {
      /** List of Status Effects to cure */
      public effects;
      /**
       * @param selfTarget - Whether this move targets the user
       * @param ...effects - List of status effects to cure
       */
      constructor(selfTarget: boolean, ...effects: PokeRogue.data.StatusEffect[]);
      /**
       * @param user {@linkcode Pokemon} source of the move
       * @param target {@linkcode Pokemon} target of the move
       * @param move the {@linkcode Move} being used
       * @returns true if the status is cured
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      isOfEffect(effect: PokeRogue.data.StatusEffect): boolean;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class BypassSleepAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used for moves that bypass the burn damage reduction of physical moves, currently only facade
   * Called during damage calculation
   * @extends MoveAttr
   * @see {@linkcode apply}
   */
  export declare class BypassBurnDamageReductionAttr extends MoveAttr {
      /** Prevents the move's damage from being reduced by burn
       * @param user N/A
       * @param target N/A
       * @param move {@linkcode Move} with this attribute
       * @param args [0] {@linkcode Utils.BooleanHolder} for burnDamageReductionCancelled
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class WeatherChangeAttr extends MoveEffectAttr {
      public weatherType;
      constructor(weatherType: PokeRogue.data.WeatherType);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class ClearWeatherAttr extends MoveEffectAttr {
      public weatherType;
      constructor(weatherType: PokeRogue.data.WeatherType);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class TerrainChangeAttr extends MoveEffectAttr {
      public terrainType;
      constructor(terrainType: PokeRogue.data.TerrainType);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
  }
  export declare class ClearTerrainAttr extends MoveEffectAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class OneHitKOAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class OverrideMoveEffectAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean | Promise<boolean>;
  }
  export declare class ChargeAttr extends OverrideMoveEffectAttr {
      chargeAnim: PokeRogue.data.ChargeAnim;
      public chargeText;
      public tagType;
      public chargeEffect;
      followUpPriority: integer | null;
      constructor(chargeAnim: PokeRogue.data.ChargeAnim, chargeText: string, tagType?: BattlerTagType | null, chargeEffect?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
      usedChargeEffect(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon | null, move: Move): boolean;
  }
  export declare class SunlightChargeAttr extends ChargeAttr {
      constructor(chargeAnim: PokeRogue.data.ChargeAnim, chargeText: string);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
  }
  export declare class ElectroShotChargeAttr extends ChargeAttr {
      public statIncreaseApplied;
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
  }
  export declare class DelayedAttackAttr extends OverrideMoveEffectAttr {
      tagType: PokeRogue.enums.ArenaTagType;
      chargeAnim: PokeRogue.data.ChargeAnim;
      public chargeText;
      constructor(tagType: PokeRogue.enums.ArenaTagType, chargeAnim: PokeRogue.data.ChargeAnim, chargeText: string);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
  }
  export declare class StatStageChangeAttr extends MoveEffectAttr {
      stats: BattleStat[];
      stages: integer;
      public condition;
      public showMessage;
      constructor(stats: BattleStat[], stages: integer, selfTarget?: boolean, condition?: MoveConditionFunc | null, showMessage?: boolean, firstHitOnly?: boolean, moveEffectTrigger?: MoveEffectTrigger, firstTargetOnly?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args?: any[]): boolean | Promise<boolean>;
      getLevels(_user: PokeRogue.field.Pokemon): integer;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class PostVictoryStatStageChangeAttr extends MoveAttr {
      public stats;
      public stages;
      public condition;
      public showMessage;
      constructor(stats: BattleStat[], stages: number, selfTarget?: boolean, condition?: MoveConditionFunc, showMessage?: boolean, firstHitOnly?: boolean);
      applyPostVictory(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): void;
  }
  export declare class AcupressureStatStageChangeAttr extends MoveEffectAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean | Promise<boolean>;
  }
  export declare class GrowthStatStageChangeAttr extends StatStageChangeAttr {
      constructor();
      getLevels(user: PokeRogue.field.Pokemon): number;
  }
  export declare class CutHpStatStageBoostAttr extends StatStageChangeAttr {
      public cutRatio;
      public messageCallback;
      constructor(stat: BattleStat[], levels: integer, cutRatio: integer, messageCallback?: ((user: PokeRogue.field.Pokemon) => void) | undefined);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
      getCondition(): MoveConditionFunc;
  }
  export declare class CopyStatsAttr extends MoveEffectAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class InvertStatsAttr extends MoveEffectAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class ResetStatsAttr extends MoveEffectAttr {
      public targetAllPokemon;
      constructor(targetAllPokemon: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      resetStats(pokemon: PokeRogue.field.Pokemon): void;
  }
  /**
   * Attribute used for status moves, specifically Heart, Guard, and Power Swap,
   * that swaps the user's and target's corresponding stat stages.
   * @extends MoveEffectAttr
   * @see {@linkcode apply}
   */
  export declare class SwapStatStagesAttr extends MoveEffectAttr {
      /** The stat stages to be swapped between the user and the target */
      public stats;
      constructor(stats: readonly BattleStat[]);
      /**
       * For all {@linkcode stats}, swaps the user's and target's corresponding stat
       * stage.
       * @param user the {@linkcode Pokemon} that used the move
       * @param target the {@linkcode Pokemon} that the move was used on
       * @param move N/A
       * @param args N/A
       * @returns true if attribute application succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class HpSplitAttr extends MoveEffectAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
  }
  export declare class VariablePowerAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class LessPPMorePowerAttr extends VariablePowerAttr {
      /**
       * Power up moves when less PP user has
       * @param user {@linkcode Pokemon} using this move
       * @param target {@linkcode Pokemon} target of this move
       * @param move {@linkcode Move} being used
       * @param args [0] {@linkcode Utils.NumberHolder} of power
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class MovePowerMultiplierAttr extends VariablePowerAttr {
      public powerMultiplierFunc;
      constructor(powerMultiplier: (user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move) => number);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class BeatUpAttr extends VariablePowerAttr {
      /**
       * Gets the next party member to contribute to a Beat Up hit, and calculates the base power for it.
       * @param user Pokemon that used the move
       * @param _target N/A
       * @param _move Move with this attribute
       * @param args N/A
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class DoublePowerChanceAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare abstract class ConsecutiveUsePowerMultiplierAttr extends MovePowerMultiplierAttr {
      constructor(limit: integer, resetOnFail: boolean, resetOnLimit?: boolean, ...comboMoves: PokeRogue.enums.Moves[]);
      abstract getMultiplier(count: integer): number;
  }
  export declare class ConsecutiveUseDoublePowerAttr extends ConsecutiveUsePowerMultiplierAttr {
      getMultiplier(count: number): number;
  }
  export declare class ConsecutiveUseMultiBasePowerAttr extends ConsecutiveUsePowerMultiplierAttr {
      getMultiplier(count: number): number;
  }
  export declare class WeightPowerAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used for Electro Ball move.
   * @extends VariablePowerAttr
   * @see {@linkcode apply}
   **/
  export declare class ElectroBallPowerAttr extends VariablePowerAttr {
      /**
       * Move that deals more damage the faster {@linkcode Stat.SPD}
       * the user is compared to the target.
       * @param user Pokemon that used the move
       * @param target The target of the move
       * @param move Move with this attribute
       * @param args N/A
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used for Gyro Ball move.
   * @extends VariablePowerAttr
   * @see {@linkcode apply}
   **/
  export declare class GyroBallPowerAttr extends VariablePowerAttr {
      /**
       * Move that deals more damage the slower {@linkcode Stat.SPD}
       * the user is compared to the target.
       * @param user Pokemon that used the move
       * @param target The target of the move
       * @param move Move with this attribute
       * @param args N/A
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class LowHpPowerAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class CompareWeightPowerAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class HpPowerAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used for moves whose base power scales with the opponent's HP
   * Used for Crush Grip, Wring Out, and Hard Press
   * maxBasePower 100 for Hard Press, 120 for others
   */
  export declare class OpponentHighHpPowerAttr extends VariablePowerAttr {
      maxBasePower: number;
      constructor(maxBasePower: number);
      /**
       * Changes the base power of the move to be the target's HP ratio times the maxBasePower with a min value of 1
       * @param user n/a
       * @param target the Pokemon being attacked
       * @param move n/a
       * @param args holds the base power of the move at args[0]
       * @returns true
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class FirstAttackDoublePowerAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class TurnDamagedDoublePowerAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class MagnitudePowerAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class AntiSunlightPowerDecreaseAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class FriendshipPowerAttr extends VariablePowerAttr {
      public invert;
      constructor(invert?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class HitCountPowerAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute that increases power based on the amount of positive stat stage increases.
   */
  export declare class PositiveStatStagePowerAttr extends VariablePowerAttr {
      /**
       * @param {Pokemon} user The pokemon that is being used to calculate the amount of positive stats
       * @param {Pokemon} target N/A
       * @param {Move} move N/A
       * @param {any[]} args The argument for VariablePowerAttr, accumulates and sets the amount of power multiplied by stats
       * @returns {boolean} Returns true if attribute is applied
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Punishment normally has a base power of 60,
   * but gains 20 power for every increased stat stage the target has,
   * up to a maximum of 200 base power in total.
   */
  export declare class PunishmentPowerAttr extends VariablePowerAttr {
      public PUNISHMENT_MIN_BASE_POWER;
      public PUNISHMENT_MAX_BASE_POWER;
      /**
         * @param {Pokemon} user N/A
         * @param {Pokemon} target The pokemon that the move is being used against, as well as calculating the stats for the min/max base power
         * @param {Move} move N/A
         * @param {any[]} args The value that is being changed due to VariablePowerAttr
         * @returns Returns true if attribute is applied
         */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class PresentPowerAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class WaterShurikenPowerAttr extends VariablePowerAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used to calculate the power of attacks that scale with Stockpile stacks (i.e. Spit Up).
   */
  export declare class SpitUpPowerAttr extends VariablePowerAttr {
      public multiplier;
      constructor(multiplier: number);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used to apply Swallow's healing, which scales with Stockpile stacks.
   * Does NOT remove stockpiled stacks.
   */
  export declare class SwallowHealAttr extends HealAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used for multi-hit moves that increase power in increments of the
   * move's base power for each hit, namely Triple Kick and Triple Axel.
   * @extends VariablePowerAttr
   * @see {@linkcode apply}
   */
  export declare class MultiHitPowerIncrementAttr extends VariablePowerAttr {
      /** The max number of base power increments allowed for this move */
      public maxHits;
      constructor(maxHits: integer);
      /**
       * Increases power of move in increments of the base power for the amount of times
       * the move hit. In the case that the move is extended, it will circle back to the
       * original base power of the move after incrementing past the maximum amount of
       * hits.
       * @param user {@linkcode Pokemon} that used the move
       * @param target {@linkcode Pokemon} that the move was used on
       * @param move {@linkcode Move} with this attribute
       * @param args [0] {@linkcode Utils.NumberHolder} for final calculated power of move
       * @returns true if attribute application succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used for moves that double in power if the given move immediately
   * preceded the move applying the attribute, namely Fusion Flare and
   * Fusion Bolt.
   * @extends VariablePowerAttr
   * @see {@linkcode apply}
   */
  export declare class LastMoveDoublePowerAttr extends VariablePowerAttr {
      /** The move that must precede the current move */
      public move;
      constructor(move: PokeRogue.enums.Moves);
      /**
       * Doubles power of move if the given move is found to precede the current
       * move with no other moves being executed in between, only ignoring failed
       * moves if any.
       * @param user {@linkcode Pokemon} that used the move
       * @param target N/A
       * @param move N/A
       * @param args [0] {@linkcode Utils.NumberHolder} that holds the resulting power of the move
       * @returns true if attribute application succeeds, false otherwise
       */
      apply(user: PokeRogue.field.Pokemon, _target: PokeRogue.field.Pokemon, _move: Move, args: any[]): boolean;
  }
  export declare class VariableAtkAttr extends MoveAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class TargetAtkUserAtkAttr extends VariableAtkAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class DefAtkAttr extends VariableAtkAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class VariableDefAttr extends MoveAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class DefDefAttr extends VariableDefAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class VariableAccuracyAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used for Thunder and Hurricane that sets accuracy to 50 in sun and never miss in rain
   */
  export declare class ThunderAccuracyAttr extends VariableAccuracyAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used for Bleakwind Storm, Wildbolt Storm, and Sandsear Storm that sets accuracy to never
   * miss in rain
   * Springtide Storm does NOT have this property
   */
  export declare class StormAccuracyAttr extends VariableAccuracyAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used for moves which never miss
   * against Pokemon with the {@linkcode BattlerTagType.MINIMIZED}
   * @extends VariableAccuracyAttr
   * @see {@linkcode apply}
   */
  export declare class MinimizeAccuracyAttr extends VariableAccuracyAttr {
      /**
       * @see {@linkcode apply}
       * @param user N/A
       * @param target {@linkcode Pokemon} target of the move
       * @param move N/A
       * @param args [0] Accuracy of the move to be modified
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class ToxicAccuracyAttr extends VariableAccuracyAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class BlizzardAccuracyAttr extends VariableAccuracyAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class VariableMoveCategoryAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class PhotonGeyserCategoryAttr extends VariableMoveCategoryAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class TeraBlastCategoryAttr extends VariableMoveCategoryAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Increases the power of Tera Blast if the user is Terastallized into Stellar type
   * @extends VariablePowerAttr
   */
  export declare class TeraBlastPowerAttr extends VariablePowerAttr {
      /**
       * Sets Tera Blast's power to 100 if the user is terastallized with
       * the Stellar tera type.
       * @param user {@linkcode Pokemon} the Pokemon using this move
       * @param target n/a
       * @param move {@linkcode Move} the Move with this attribute (i.e. Tera Blast)
       * @param args
       *   - [0] {@linkcode Utils.NumberHolder} the applied move's power, factoring in
       *       previously applied power modifiers.
       * @returns
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Change the move category to status when used on the ally
   * @extends VariableMoveCategoryAttr
   * @see {@linkcode apply}
   */
  export declare class StatusCategoryOnAllyAttr extends VariableMoveCategoryAttr {
      /**
       * @param user {@linkcode Pokemon} using the move
       * @param target {@linkcode Pokemon} target of the move
       * @param move {@linkcode Move} with this attribute
       * @param args [0] {@linkcode Utils.IntegerHolder} The category of the move
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class ShellSideArmCategoryAttr extends VariableMoveCategoryAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class VariableMoveTypeAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class FormChangeItemTypeAttr extends VariableMoveTypeAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class TechnoBlastTypeAttr extends VariableMoveTypeAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class AuraWheelTypeAttr extends VariableMoveTypeAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class RagingBullTypeAttr extends VariableMoveTypeAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class IvyCudgelTypeAttr extends VariableMoveTypeAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class WeatherBallTypeAttr extends VariableMoveTypeAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Changes the move's type to match the current terrain.
   * Has no effect if the user is not grounded.
   * @extends VariableMoveTypeAttr
   * @see {@linkcode apply}
   */
  export declare class TerrainPulseTypeAttr extends VariableMoveTypeAttr {
      /**
       * @param user {@linkcode Pokemon} using this move
       * @param target N/A
       * @param move N/A
       * @param args [0] {@linkcode Utils.NumberHolder} The move's type to be modified
       * @returns true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Changes type based on the user's IVs
   * @extends VariableMoveTypeAttr
   */
  export declare class HiddenPowerTypeAttr extends VariableMoveTypeAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Changes the type of Tera Blast to match the user's tera type
   * @extends VariableMoveTypeAttr
   */
  export declare class TeraBlastTypeAttr extends VariableMoveTypeAttr {
      /**
       * @param user {@linkcode Pokemon} the user of the move
       * @param target {@linkcode Pokemon} N/A
       * @param move {@linkcode Move} the move with this attribute
       * @param args `[0]` the move's type to be modified
       * @returns `true` if the move's type was modified; `false` otherwise
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class MatchUserTypeAttr extends VariableMoveTypeAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class VariableMoveTypeMultiplierAttr extends MoveAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class NeutralDamageAgainstFlyingTypeMultiplierAttr extends VariableMoveTypeMultiplierAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class WaterSuperEffectTypeMultiplierAttr extends VariableMoveTypeMultiplierAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class IceNoEffectTypeAttr extends VariableMoveTypeMultiplierAttr {
      /**
       * Checks to see if the Target is Ice-Type or not. If so, the move will have no effect.
       * @param {Pokemon} user N/A
       * @param {Pokemon} target Pokemon that is being checked whether Ice-Type or not.
       * @param {Move} move N/A
       * @param {any[]} args Sets to false if the target is Ice-Type, so it should do no damage/no effect.
       * @returns {boolean} Returns true if move is successful, false if Ice-Type.
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class FlyingTypeMultiplierAttr extends VariableMoveTypeMultiplierAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class OneHitKOAccuracyAttr extends VariableAccuracyAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class SheerColdAccuracyAttr extends OneHitKOAccuracyAttr {
      /**
       * Changes the normal One Hit KO Accuracy Attr to implement the Gen VII changes,
       * where if the user is Ice-Type, it has more accuracy.
       * @param {Pokemon} user Pokemon that is using the move; checks the Pokemon's level.
       * @param {Pokemon} target Pokemon that is receiving the move; checks the Pokemon's level.
       * @param {Move} move N/A
       * @param {any[]} args Uses the accuracy argument, allowing to change it from either 0 if it doesn't pass
       * the first if/else, or 30/20 depending on the type of the user Pokemon.
       * @returns Returns true if move is successful, false if misses.
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class MissEffectAttr extends MoveAttr {
      public missEffectFunc;
      constructor(missEffectFunc: UserMoveConditionFunc);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class NoEffectAttr extends MoveAttr {
      public noEffectFunc;
      constructor(noEffectFunc: UserMoveConditionFunc);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class TypelessAttr extends MoveAttr {
  }
  /**
  * Attribute used for moves which ignore redirection effects, and always target their original target, i.e. Snipe Shot
  * Bypasses Storm Drain, Follow Me, Ally Switch, and the like.
  */
  export declare class BypassRedirectAttr extends MoveAttr {
  }
  export declare class FrenzyAttr extends MoveEffectAttr {
      constructor();
      canApply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare const frenzyMissFunc: UserMoveConditionFunc;
  export declare class AddBattlerTagAttr extends MoveEffectAttr {
      tagType: PokeRogue.enums.BattlerTagType;
      turnCountMin: integer;
      turnCountMax: integer;
      protected cancelOnFail: boolean;
      public failOnOverlap;
      constructor(tagType: PokeRogue.enums.BattlerTagType, selfTarget?: boolean, failOnOverlap?: boolean, turnCountMin?: integer, turnCountMax?: integer, lastHitOnly?: boolean, cancelOnFail?: boolean);
      canApply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc | null;
      getTagTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer | void;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  /**
   * Adds the appropriate battler tag for Gulp Missile when Surf or Dive is used.
   * @extends MoveEffectAttr
   */
  export declare class GulpMissileTagAttr extends MoveEffectAttr {
      constructor();
      /**
       * Adds BattlerTagType from GulpMissileTag based on the Pokemon's HP ratio.
       * @param {Pokemon} user The Pokemon using the move.
       * @param {Pokemon} target The Pokemon being targeted by the move.
       * @param {Move} move The move being used.
       * @param {any[]} args Additional arguments, if any.
       * @returns Whether the BattlerTag is applied.
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean | Promise<boolean>;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  /**
   * Attribute to implement Jaw Lock's linked trapping effect between the user and target
   * @extends AddBattlerTagAttr
   */
  export declare class JawLockAttr extends AddBattlerTagAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class CurseAttr extends MoveEffectAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class LapseBattlerTagAttr extends MoveEffectAttr {
      tagTypes: PokeRogue.enums.BattlerTagType[];
      constructor(tagTypes: PokeRogue.enums.BattlerTagType[], selfTarget?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class RemoveBattlerTagAttr extends MoveEffectAttr {
      tagTypes: PokeRogue.enums.BattlerTagType[];
      constructor(tagTypes: PokeRogue.enums.BattlerTagType[], selfTarget?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class FlinchAttr extends AddBattlerTagAttr {
      constructor();
  }
  export declare class ConfuseAttr extends AddBattlerTagAttr {
      constructor(selfTarget?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class RechargeAttr extends AddBattlerTagAttr {
      constructor();
  }
  export declare class TrapAttr extends AddBattlerTagAttr {
      constructor(tagType: PokeRogue.enums.BattlerTagType);
  }
  export declare class ProtectAttr extends AddBattlerTagAttr {
      constructor(tagType?: BattlerTagType);
      getCondition(): MoveConditionFunc;
  }
  export declare class IgnoreAccuracyAttr extends AddBattlerTagAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class FaintCountdownAttr extends AddBattlerTagAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used when a move hits a {@linkcode BattlerTagType} for double damage
   * @extends MoveAttr
  */
  export declare class HitsTagAttr extends MoveAttr {
      /** The {@linkcode BattlerTagType} this move hits */
      tagType: PokeRogue.enums.BattlerTagType;
      /** Should this move deal double damage against {@linkcode HitsTagAttr.tagType}? */
      doubleDamage: boolean;
      constructor(tagType: PokeRogue.enums.BattlerTagType, doubleDamage?: boolean);
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class AddArenaTagAttr extends MoveEffectAttr {
      tagType: PokeRogue.enums.ArenaTagType;
      turnCount: integer;
      public failOnOverlap;
      selfSideTarget: boolean;
      constructor(tagType: PokeRogue.enums.ArenaTagType, turnCount?: integer | null, failOnOverlap?: boolean, selfSideTarget?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc | null;
  }
  /**
   * Generic class for removing arena tags
   * @param tagTypes: The types of tags that can be removed
   * @param selfSideTarget: Is the user removing tags from its own side?
   */
  export declare class RemoveArenaTagsAttr extends MoveEffectAttr {
      tagTypes: PokeRogue.enums.ArenaTagType[];
      selfSideTarget: boolean;
      constructor(tagTypes: PokeRogue.enums.ArenaTagType[], selfSideTarget: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class AddArenaTrapTagAttr extends AddArenaTagAttr {
      getCondition(): MoveConditionFunc;
  }
  /**
   * Attribute used for Stone Axe and Ceaseless Edge.
   * Applies the given ArenaTrapTag when move is used.
   * @extends AddArenaTagAttr
   * @see {@linkcode apply}
   */
  export declare class AddArenaTrapTagHitAttr extends AddArenaTagAttr {
      /**
       * @param user {@linkcode Pokemon} using this move
       * @param target {@linkcode Pokemon} target of this move
       * @param move {@linkcode Move} being used
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class RemoveArenaTrapAttr extends MoveEffectAttr {
      public targetBothSides;
      constructor(targetBothSides?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class RemoveScreensAttr extends MoveEffectAttr {
      public targetBothSides;
      constructor(targetBothSides?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class SwapArenaTagsAttr extends MoveEffectAttr {
      SwapTags: PokeRogue.enums.ArenaTagType[];
      constructor(SwapTags: PokeRogue.enums.ArenaTagType[]);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used for Revival Blessing.
   * @extends MoveEffectAttr
   * @see {@linkcode apply}
   */
  export declare class RevivalBlessingAttr extends MoveEffectAttr {
      constructor(user?: boolean);
      /**
       *
       * @param user {@linkcode Pokemon} using this move
       * @param target {@linkcode Pokemon} target of this move
       * @param move {@linkcode Move} being used
       * @param args N/A
       * @returns Promise, true if function succeeds.
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class ForceSwitchOutAttr extends MoveEffectAttr {
      public user;
      public batonPass;
      constructor(user?: boolean, batonPass?: boolean);
      isBatonPass(): boolean;
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
      getCondition(): MoveConditionFunc;
      getFailedText(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, cancelled: Utils.BooleanHolder): string | null;
      getSwitchOutCondition(): MoveConditionFunc;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class RemoveTypeAttr extends MoveEffectAttr {
      public removedType;
      public messageCallback;
      constructor(removedType: PokeRogue.data.Type, messageCallback?: (user: PokeRogue.field.Pokemon) => void);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class CopyTypeAttr extends MoveEffectAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class CopyBiomeTypeAttr extends MoveEffectAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class ChangeTypeAttr extends MoveEffectAttr {
      public type;
      constructor(type: PokeRogue.data.Type);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class AddTypeAttr extends MoveEffectAttr {
      public type;
      constructor(type: PokeRogue.data.Type);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class FirstMoveTypeAttr extends MoveEffectAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class RandomMovesetMoveAttr extends OverrideMoveEffectAttr {
      public enemyMoveset;
      constructor(enemyMoveset?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class RandomMoveAttr extends OverrideMoveEffectAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
  }
  export declare class NaturePowerAttr extends OverrideMoveEffectAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
  }
  export declare class CopyMoveAttr extends OverrideMoveEffectAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  /**
   *  Attribute used for moves that reduce PP of the target's last used move.
   *  Used for Spite.
   */
  export declare class ReducePpMoveAttr extends MoveEffectAttr {
      protected reduction: number;
      constructor(reduction: number);
      /**
       * Reduces the PP of the target's last-used move by an amount based on this attribute instance's {@linkcode reduction}.
       *
       * @param user {@linkcode Pokemon} that used the attack
       * @param target {@linkcode Pokemon} targeted by the attack
       * @param move {@linkcode Move} being used
       * @param args N/A
       * @returns {boolean} true
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
      getTargetBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): number;
  }
  /**
   *  Attribute used for moves that damage target, and then reduce PP of the target's last used move.
   *  Used for Eerie Spell.
   */
  export declare class AttackReducePpMoveAttr extends ReducePpMoveAttr {
      constructor(reduction: number);
      /**
       * Checks if the target has used a move prior to the attack. PP-reduction is applied through the super class if so.
       *
       * @param user {@linkcode Pokemon} that used the attack
       * @param target {@linkcode Pokemon} targeted by the attack
       * @param move {@linkcode Move} being used
       * @param args N/A
       * @returns {boolean} true
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class MovesetCopyMoveAttr extends OverrideMoveEffectAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  /**
   * Attribute for {@linkcode Moves.SKETCH} that causes the user to copy the opponent's last used move
   * This move copies the last used non-virtual move
   *  e.g. if Metronome is used, it copies Metronome itself, not the virtual move called by Metronome
   * Fails if the opponent has not yet used a move.
   * Fails if used on an uncopiable move, listed in unsketchableMoves in getCondition
   * Fails if the move is already in the user's moveset
   */
  export declare class SketchAttr extends MoveEffectAttr {
      constructor();
      /**
       * User copies the opponent's last used move, if possible
       * @param {Pokemon} user Pokemon that used the move and will replace Sketch with the copied move
       * @param {Pokemon} target Pokemon that the user wants to copy a move from
       * @param {Move} move Move being used
       * @param {any[]} args Unused
       * @returns {boolean} true if the function succeeds, otherwise false
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class AbilityChangeAttr extends MoveEffectAttr {
      ability: PokeRogue.enums.Abilities;
      constructor(ability: PokeRogue.enums.Abilities, selfTarget?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class AbilityCopyAttr extends MoveEffectAttr {
      copyToPartner: boolean;
      constructor(copyToPartner?: boolean);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class AbilityGiveAttr extends MoveEffectAttr {
      copyToPartner: boolean;
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  export declare class SwitchAbilitiesAttr extends MoveEffectAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      getCondition(): MoveConditionFunc;
  }
  /**
   * Attribute used for moves that suppress abilities like {@linkcode Moves.GASTRO_ACID}.
   * A suppressed ability cannot be activated.
   *
   * @extends MoveEffectAttr
   * @see {@linkcode apply}
   * @see {@linkcode getCondition}
   */
  export declare class SuppressAbilitiesAttr extends MoveEffectAttr {
      /** Sets ability suppression for the target pokemon and displays a message. */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      /** Causes the effect to fail when the target's ability is unsupressable or already suppressed. */
      getCondition(): MoveConditionFunc;
  }
  /**
   * Applies the effects of {@linkcode SuppressAbilitiesAttr} if the target has already moved this turn.
   * @extends MoveEffectAttr
   * @see {@linkcode Moves.CORE_ENFORCER} (the move which uses this effect)
   */
  export declare class SuppressAbilitiesIfActedAttr extends MoveEffectAttr {
      /**
       * If the target has already acted this turn, apply a {@linkcode SuppressAbilitiesAttr} effect unless the
       * abillity cannot be suppressed. This is a secondary effect and has no bearing on the success or failure of the move.
       *
       * @returns True if the move occurred, otherwise false. Note that true will be returned even if the target has not
       * yet moved or if the suppression failed to apply.
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class TransformAttr extends MoveEffectAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): Promise<boolean>;
  }
  /**
   * Attribute used for status moves, namely Speed Swap,
   * that swaps the user's and target's corresponding stats.
   * @extends MoveEffectAttr
   * @see {@linkcode apply}
   */
  export declare class SwapStatAttr extends MoveEffectAttr {
      /** The stat to be swapped between the user and the target */
      public stat;
      constructor(stat: EffectiveStat);
      /**
       * Takes the average of the user's and target's corresponding current
       * {@linkcode stat} values and sets that stat to the average for both
       * temporarily.
       * @param user the {@linkcode Pokemon} that used the move
       * @param target the {@linkcode Pokemon} that the move was used on
       * @param move N/A
       * @param args N/A
       * @returns true if attribute application succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used for status moves, namely Power Split and Guard Split,
   * that take the average of a user's and target's corresponding
   * stats and assign that average back to each corresponding stat.
   * @extends MoveEffectAttr
   * @see {@linkcode apply}
   */
  export declare class AverageStatsAttr extends MoveEffectAttr {
      /** The stats to be averaged individually between the user and the target */
      public stats;
      public msgKey;
      constructor(stats: readonly EffectiveStat[], msgKey: string);
      /**
       * Takes the average of the user's and target's corresponding {@linkcode stat}
       * values and sets those stats to the corresponding average for both
       * temporarily.
       * @param user the {@linkcode Pokemon} that used the move
       * @param target the {@linkcode Pokemon} that the move was used on
       * @param move N/A
       * @param args N/A
       * @returns true if attribute application succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class DiscourageFrequentUseAttr extends MoveAttr {
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class MoneyAttr extends MoveEffectAttr {
      constructor();
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): boolean;
  }
  /**
   * Applies {@linkcode BattlerTagType.DESTINY_BOND} to the user.
   *
   * @extends MoveEffectAttr
   */
  export declare class DestinyBondAttr extends MoveEffectAttr {
      constructor();
      /**
       * Applies {@linkcode BattlerTagType.DESTINY_BOND} to the user.
       * @param user {@linkcode Pokemon} that is having the tag applied to.
       * @param target {@linkcode Pokemon} N/A
       * @param move {@linkcode Move} {@linkcode Move.DESTINY_BOND}
       * @param {any[]} args N/A
       * @returns true
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute to apply a battler tag to the target if they have had their stats boosted this turn.
   * @extends AddBattlerTagAttr
   */
  export declare class AddBattlerTagIfBoostedAttr extends AddBattlerTagAttr {
      constructor(tag: PokeRogue.enums.BattlerTagType);
      /**
       * @param user {@linkcode Pokemon} using this move
       * @param target {@linkcode Pokemon} target of this move
       * @param move {@linkcode Move} being used
       * @param {any[]} args N/A
       * @returns true
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute to apply a status effect to the target if they have had their stats boosted this turn.
   * @extends MoveEffectAttr
   */
  export declare class StatusIfBoostedAttr extends MoveEffectAttr {
      effect: PokeRogue.data.StatusEffect;
      constructor(effect: PokeRogue.data.StatusEffect);
      /**
       * @param user {@linkcode Pokemon} using this move
       * @param target {@linkcode Pokemon} target of this move
       * @param move {@linkcode Move} N/A
       * @param {any[]} args N/A
       * @returns true
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export declare class LastResortAttr extends MoveAttr {
      getCondition(): MoveConditionFunc;
  }
  /**
   * The move only works if the target has a transferable held item
   * @extends MoveAttr
   * @see {@linkcode getCondition}
   */
  export declare class AttackedByItemAttr extends MoveAttr {
      /**
       * @returns the {@linkcode MoveConditionFunc} for this {@linkcode Move}
       */
      getCondition(): MoveConditionFunc;
  }
  export declare class VariableTargetAttr extends MoveAttr {
      public targetChangeFunc;
      constructor(targetChange: (user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move) => number);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export type MoveAttrFilter = (attr: MoveAttr) => boolean;
  export declare function applyMoveAttrs(attrType: PokeRogue.Constructor<MoveAttr>, user: PokeRogue.field.Pokemon | null, target: PokeRogue.field.Pokemon | null, move: Move, ...args: any[]): Promise<void>;
  export declare function applyFilteredMoveAttrs(attrFilter: MoveAttrFilter, user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon | null, move: Move, ...args: any[]): Promise<void>;
  export declare class MoveCondition {
      protected func: MoveConditionFunc;
      constructor(func: MoveConditionFunc);
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): boolean;
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class FirstMoveCondition extends MoveCondition {
      constructor();
      getUserBenefitScore(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move): integer;
  }
  export declare class hitsSameTypeAttr extends VariableMoveTypeMultiplierAttr {
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  /**
   * Attribute used for Conversion 2, to convert the user's type to a random type that resists the target's last used move.
   * Fails if the user already has ALL types that resist the target's last used move.
   * Fails if the opponent has not used a move yet
   * Fails if the type is unknown or stellar
   *
   * TODO:
   * If a move has its type changed (e.g. {@linkcode Moves.HIDDEN_POWER}), it will check the new type.
   */
  export declare class ResistLastMoveTypeAttr extends MoveEffectAttr {
      constructor();
      /**
       * User changes its type to a random type that resists the target's last used move
       * @param {Pokemon} user Pokemon that used the move and will change types
       * @param {Pokemon} target Opposing pokemon that recently used a move
       * @param {Move} move Move being used
       * @param {any[]} args Unused
       * @returns {boolean} true if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
      /**
       * Retrieve the types resisting a given type. Used by Conversion 2
       * @returns An array populated with Types, or an empty array if no resistances exist (Unknown or Stellar type)
       */
      getTypeResistances(gameMode: PokeRogue.GameMode, type: number): Type[];
      getCondition(): MoveConditionFunc;
  }
  /**
   * Drops the target's immunity to types it is immune to
   * and makes its evasiveness be ignored during accuracy
   * checks. Used by: {@linkcode Moves.ODOR_SLEUTH | Odor Sleuth}, {@linkcode Moves.MIRACLE_EYE | Miracle Eye} and {@linkcode Moves.FORESIGHT | Foresight}
   *
   * @extends AddBattlerTagAttr
   * @see {@linkcode apply}
   */
  export declare class ExposedMoveAttr extends AddBattlerTagAttr {
      constructor(tagType: PokeRogue.enums.BattlerTagType);
      /**
       * Applies {@linkcode ExposedTag} to the target.
       * @param user {@linkcode Pokemon} using this move
       * @param target {@linkcode Pokemon} target of this move
       * @param move {@linkcode Move} being used
       * @param args N/A
       * @returns `true` if the function succeeds
       */
      apply(user: PokeRogue.field.Pokemon, target: PokeRogue.field.Pokemon, move: Move, args: any[]): boolean;
  }
  export type MoveTargetSet = {
      targets: PokeRogue.BattlerIndex[];
      multiple: boolean;
  };
  export declare function getMoveTargets(user: PokeRogue.field.Pokemon, move: PokeRogue.enums.Moves): MoveTargetSet;
  export declare const allMoves: Move[];
  export declare const selfStatLowerMoves: PokeRogue.enums.Moves[];
  export declare function initMoves(): void;
  export {};
  
}

declare namespace PokeRogue.data {
  //import { Nature } from "#enums/nature";
  //import { UiTheme } from "#enums/ui-theme";
  //import { Stat } from "#app/enums/stat";
  export { Nature };
  export declare function getNatureName(nature: PokeRogue.enums.Nature, includeStatEffects?: boolean, forStarterSelect?: boolean, ignoreBBCode?: boolean, uiTheme?: UiTheme): string;
  export declare function getNatureStatMultiplier(nature: PokeRogue.enums.Nature, stat: PokeRogue.enums.Stat): number;
  
}

declare namespace PokeRogue.data {
  //import { PokeballType } from "#enums/pokeball";
  //import BattleScene from "../battle-scene";
  export { PokeballType };
  export declare const MAX_PER_TYPE_POKEBALLS: integer;
  export declare function getPokeballAtlasKey(type: PokeRogue.enums.PokeballType): string;
  export declare function getPokeballName(type: PokeRogue.enums.PokeballType): string;
  export declare function getPokeballCatchMultiplier(type: PokeRogue.enums.PokeballType): number;
  export declare function getPokeballTintColor(type: PokeRogue.enums.PokeballType): number;
  export declare function doPokeballBounceAnim(scene: PokeRogue.BattleScene, pokeball: Phaser.GameObjects.Sprite, y1: number, y2: number, baseBounceDuration: integer, callback: Function): void;
  
}

declare namespace PokeRogue.data {
  //import Pokemon from "../field/pokemon";
  //import { Species } from "#enums/species";
  export declare enum SpeciesWildEvolutionDelay {
      NONE = 0,
      SHORT = 1,
      MEDIUM = 2,
      LONG = 3,
      VERY_LONG = 4
  }
  export declare enum EvolutionItem {
      NONE = 0,
      LINKING_CORD = 1,
      SUN_STONE = 2,
      MOON_STONE = 3,
      LEAF_STONE = 4,
      FIRE_STONE = 5,
      WATER_STONE = 6,
      THUNDER_STONE = 7,
      ICE_STONE = 8,
      DUSK_STONE = 9,
      DAWN_STONE = 10,
      SHINY_STONE = 11,
      CRACKED_POT = 12,
      SWEET_APPLE = 13,
      TART_APPLE = 14,
      STRAWBERRY_SWEET = 15,
      UNREMARKABLE_TEACUP = 16,
      CHIPPED_POT = 51,
      BLACK_AUGURITE = 52,
      GALARICA_CUFF = 53,
      GALARICA_WREATH = 54,
      PEAT_BLOCK = 55,
      AUSPICIOUS_ARMOR = 56,
      MALICIOUS_ARMOR = 57,
      MASTERPIECE_TEACUP = 58,
      METAL_ALLOY = 59,
      SCROLL_OF_DARKNESS = 60,
      SCROLL_OF_WATERS = 61,
      SYRUPY_APPLE = 62
  }
  /**
   * Pokemon Evolution tuple type consisting of:
   * @property 0 {@linkcode Species} The species of the Pokemon.
   * @property 1 {@linkcode integer} The level at which the Pokemon evolves.
   */
  export type EvolutionLevel = [species: PokeRogue.enums.Species, level: integer];
  export type EvolutionConditionPredicate = (p: PokeRogue.field.Pokemon) => boolean;
  export type EvolutionConditionEnforceFunc = (p: PokeRogue.field.Pokemon) => void;
  export declare class SpeciesFormEvolution {
      speciesId: PokeRogue.enums.Species;
      preFormKey: string | null;
      evoFormKey: string | null;
      level: integer;
      item: EvolutionItem | null;
      condition: SpeciesEvolutionCondition | null;
      wildDelay: SpeciesWildEvolutionDelay;
      constructor(speciesId: PokeRogue.enums.Species, preFormKey: string | null, evoFormKey: string | null, level: integer, item: EvolutionItem | null, condition: SpeciesEvolutionCondition | null, wildDelay?: SpeciesWildEvolutionDelay);
  }
  export declare class SpeciesEvolution extends SpeciesFormEvolution {
      constructor(speciesId: PokeRogue.enums.Species, level: integer, item: EvolutionItem | null, condition: SpeciesEvolutionCondition | null, wildDelay?: SpeciesWildEvolutionDelay);
  }
  export declare class FusionSpeciesFormEvolution extends SpeciesFormEvolution {
      primarySpeciesId: PokeRogue.enums.Species;
      constructor(primarySpeciesId: PokeRogue.enums.Species, evolution: SpeciesFormEvolution);
  }
  export declare class SpeciesEvolutionCondition {
      predicate: EvolutionConditionPredicate;
      enforceFunc: EvolutionConditionEnforceFunc | undefined;
      constructor(predicate: EvolutionConditionPredicate, enforceFunc?: EvolutionConditionEnforceFunc);
  }
  export declare class SpeciesFriendshipEvolutionCondition extends SpeciesEvolutionCondition {
      constructor(friendshipAmount: integer, predicate?: EvolutionConditionPredicate, enforceFunc?: EvolutionConditionEnforceFunc);
  }
  interface PokemonEvolutions {
      [key: string]: SpeciesFormEvolution[];
  }
  export declare const pokemonEvolutions: PokemonEvolutions;
  interface PokemonPrevolutions {
      [key: string]: Species;
  }
  export declare const pokemonPrevolutions: PokemonPrevolutions;
  export declare function initPokemonPrevolutions(): void;
  export {};
  
}

declare namespace PokeRogue.data {
  //import Pokemon from "../field/pokemon";
  //import { StatusEffect } from "./status-effect";
  //import { Constructor } from "#app/utils";
  //import { Abilities } from "#enums/abilities";
  //import { Moves } from "#enums/moves";
  //import { Species } from "#enums/species";
  //import { TimeOfDay } from "#enums/time-of-day";
  //import { WeatherType } from "./weather";
  export declare enum FormChangeItem {
      NONE = 0,
      ABOMASITE = 1,
      ABSOLITE = 2,
      AERODACTYLITE = 3,
      AGGRONITE = 4,
      ALAKAZITE = 5,
      ALTARIANITE = 6,
      AMPHAROSITE = 7,
      AUDINITE = 8,
      BANETTITE = 9,
      BEEDRILLITE = 10,
      BLASTOISINITE = 11,
      BLAZIKENITE = 12,
      CAMERUPTITE = 13,
      CHARIZARDITE_X = 14,
      CHARIZARDITE_Y = 15,
      DIANCITE = 16,
      GALLADITE = 17,
      GARCHOMPITE = 18,
      GARDEVOIRITE = 19,
      GENGARITE = 20,
      GLALITITE = 21,
      GYARADOSITE = 22,
      HERACRONITE = 23,
      HOUNDOOMINITE = 24,
      KANGASKHANITE = 25,
      LATIASITE = 26,
      LATIOSITE = 27,
      LOPUNNITE = 28,
      LUCARIONITE = 29,
      MANECTITE = 30,
      MAWILITE = 31,
      MEDICHAMITE = 32,
      METAGROSSITE = 33,
      MEWTWONITE_X = 34,
      MEWTWONITE_Y = 35,
      PIDGEOTITE = 36,
      PINSIRITE = 37,
      RAYQUAZITE = 38,
      SABLENITE = 39,
      SALAMENCITE = 40,
      SCEPTILITE = 41,
      SCIZORITE = 42,
      SHARPEDONITE = 43,
      SLOWBRONITE = 44,
      STEELIXITE = 45,
      SWAMPERTITE = 46,
      TYRANITARITE = 47,
      VENUSAURITE = 48,
      BLUE_ORB = 50,
      RED_ORB = 51,
      ADAMANT_CRYSTAL = 52,
      LUSTROUS_GLOBE = 53,
      GRISEOUS_CORE = 54,
      REVEAL_GLASS = 55,
      MAX_MUSHROOMS = 56,
      DARK_STONE = 57,
      LIGHT_STONE = 58,
      PRISON_BOTTLE = 59,
      RUSTED_SWORD = 60,
      RUSTED_SHIELD = 61,
      ICY_REINS_OF_UNITY = 62,
      SHADOW_REINS_OF_UNITY = 63,
      ULTRANECROZIUM_Z = 64,
      SHARP_METEORITE = 100,
      HARD_METEORITE = 101,
      SMOOTH_METEORITE = 102,
      GRACIDEA = 103,
      SHOCK_DRIVE = 104,
      BURN_DRIVE = 105,
      CHILL_DRIVE = 106,
      DOUSE_DRIVE = 107,
      N_SOLARIZER = 108,
      N_LUNARIZER = 109,
      WELLSPRING_MASK = 110,
      HEARTHFLAME_MASK = 111,
      CORNERSTONE_MASK = 112,
      FIST_PLATE = 113,
      SKY_PLATE = 114,
      TOXIC_PLATE = 115,
      EARTH_PLATE = 116,
      STONE_PLATE = 117,
      INSECT_PLATE = 118,
      SPOOKY_PLATE = 119,
      IRON_PLATE = 120,
      FLAME_PLATE = 121,
      SPLASH_PLATE = 122,
      MEADOW_PLATE = 123,
      ZAP_PLATE = 124,
      MIND_PLATE = 125,
      ICICLE_PLATE = 126,
      DRACO_PLATE = 127,
      DREAD_PLATE = 128,
      PIXIE_PLATE = 129,
      BLANK_PLATE = 130,// TODO: Find a potential use for this
      LEGEND_PLATE = 131,// TODO: Find a potential use for this
      FIGHTING_MEMORY = 132,
      FLYING_MEMORY = 133,
      POISON_MEMORY = 134,
      GROUND_MEMORY = 135,
      ROCK_MEMORY = 136,
      BUG_MEMORY = 137,
      GHOST_MEMORY = 138,
      STEEL_MEMORY = 139,
      FIRE_MEMORY = 140,
      WATER_MEMORY = 141,
      GRASS_MEMORY = 142,
      ELECTRIC_MEMORY = 143,
      PSYCHIC_MEMORY = 144,
      ICE_MEMORY = 145,
      DRAGON_MEMORY = 146,
      DARK_MEMORY = 147,
      FAIRY_MEMORY = 148,
      NORMAL_MEMORY = 149
  }
  export type SpeciesFormChangeConditionPredicate = (p: PokeRogue.field.Pokemon) => boolean;
  export type SpeciesFormChangeConditionEnforceFunc = (p: PokeRogue.field.Pokemon) => void;
  export declare class SpeciesFormChange {
      speciesId: PokeRogue.enums.Species;
      preFormKey: string;
      formKey: string;
      trigger: SpeciesFormChangeTrigger;
      quiet: boolean;
      readonly conditions: SpeciesFormChangeCondition[];
      constructor(speciesId: PokeRogue.enums.Species, preFormKey: string, evoFormKey: string, trigger: SpeciesFormChangeTrigger, quiet?: boolean, ...conditions: SpeciesFormChangeCondition[]);
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
      findTrigger(triggerType: PokeRogue.Constructor<SpeciesFormChangeTrigger>): SpeciesFormChangeTrigger | null;
  }
  export declare class SpeciesFormChangeCondition {
      predicate: SpeciesFormChangeConditionPredicate;
      enforceFunc: SpeciesFormChangeConditionEnforceFunc | null;
      constructor(predicate: SpeciesFormChangeConditionPredicate, enforceFunc?: SpeciesFormChangeConditionEnforceFunc);
  }
  export declare abstract class SpeciesFormChangeTrigger {
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
      hasTriggerType(triggerType: PokeRogue.Constructor<SpeciesFormChangeTrigger>): boolean;
  }
  export declare class SpeciesFormChangeManualTrigger extends SpeciesFormChangeTrigger {
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  export declare class SpeciesFormChangeCompoundTrigger {
      triggers: SpeciesFormChangeTrigger[];
      constructor(...triggers: SpeciesFormChangeTrigger[]);
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
      hasTriggerType(triggerType: PokeRogue.Constructor<SpeciesFormChangeTrigger>): boolean;
  }
  export declare class SpeciesFormChangeItemTrigger extends SpeciesFormChangeTrigger {
      item: FormChangeItem;
      active: boolean;
      constructor(item: FormChangeItem, active?: boolean);
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  export declare class SpeciesFormChangeTimeOfDayTrigger extends SpeciesFormChangeTrigger {
      timesOfDay: PokeRogue.enums.TimeOfDay[];
      constructor(...timesOfDay: PokeRogue.enums.TimeOfDay[]);
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  export declare class SpeciesFormChangeActiveTrigger extends SpeciesFormChangeTrigger {
      active: boolean;
      constructor(active?: boolean);
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  export declare class SpeciesFormChangeStatusEffectTrigger extends SpeciesFormChangeTrigger {
      statusEffects: PokeRogue.data.StatusEffect[];
      invert: boolean;
      constructor(statusEffects: PokeRogue.data.StatusEffect | StatusEffect[], invert?: boolean);
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  export declare class SpeciesFormChangeMoveLearnedTrigger extends SpeciesFormChangeTrigger {
      move: PokeRogue.enums.Moves;
      known: boolean;
      constructor(move: PokeRogue.enums.Moves, known?: boolean);
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  export declare abstract class SpeciesFormChangeMoveTrigger extends SpeciesFormChangeTrigger {
      movePredicate: (m: PokeRogue.enums.Moves) => boolean;
      used: boolean;
      constructor(move: PokeRogue.enums.Moves | ((m: PokeRogue.enums.Moves) => boolean), used?: boolean);
  }
  export declare class SpeciesFormChangePreMoveTrigger extends SpeciesFormChangeMoveTrigger {
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  export declare class SpeciesFormChangePostMoveTrigger extends SpeciesFormChangeMoveTrigger {
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  export declare class SpeciesDefaultFormMatchTrigger extends SpeciesFormChangeTrigger {
      public formKey;
      constructor(formKey: string);
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  /**
   * Class used for triggering form changes based on weather.
   * Used by Castform and Cherrim.
   * @extends SpeciesFormChangeTrigger
   */
  export declare class SpeciesFormChangeWeatherTrigger extends SpeciesFormChangeTrigger {
      /** The ability that  triggers the form change */
      ability: PokeRogue.enums.Abilities;
      /** The list of weathers that trigger the form change */
      weathers: PokeRogue.data.WeatherType[];
      constructor(ability: PokeRogue.enums.Abilities, weathers: PokeRogue.data.WeatherType[]);
      /**
       * Checks if the Pokemon has the required ability and is in the correct weather while
       * the weather or ability is also not suppressed.
       * @param {Pokemon} pokemon the pokemon that is trying to do the form change
       * @returns `true` if the Pokemon can change forms, `false` otherwise
       */
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  /**
   * Class used for reverting to the original form when the weather runs out
   * or when the user loses the ability/is suppressed.
   * Used by Castform and Cherrim.
   * @extends SpeciesFormChangeTrigger
   */
  export declare class SpeciesFormChangeRevertWeatherFormTrigger extends SpeciesFormChangeTrigger {
      /** The ability that triggers the form change*/
      ability: PokeRogue.enums.Abilities;
      /** The list of weathers that will also trigger a form change to original form */
      weathers: PokeRogue.data.WeatherType[];
      constructor(ability: PokeRogue.enums.Abilities, weathers: PokeRogue.data.WeatherType[]);
      /**
       * Checks if the Pokemon has the required ability and the weather is one that will revert
       * the Pokemon to its original form or the weather or ability is suppressed
       * @param {Pokemon} pokemon the pokemon that is trying to do the form change
       * @returns `true` if the Pokemon will revert to its original form, `false` otherwise
       */
      canChange(pokemon: PokeRogue.field.Pokemon): boolean;
  }
  export declare function getSpeciesFormChangeMessage(pokemon: PokeRogue.field.Pokemon, formChange: SpeciesFormChange, preName: string): string;
  interface PokemonFormChanges {
      [key: string]: SpeciesFormChange[];
  }
  export declare const pokemonFormChanges: PokemonFormChanges;
  export declare function initPokemonForms(): void;
  export {};
  
}

declare namespace PokeRogue.data {
  //import { Moves } from "#enums/moves";
  export type LevelMoves = ([integer, Moves])[];
  interface PokemonSpeciesLevelMoves {
      [key: integer]: LevelMoves;
  }
  interface PokemonFormLevelMoves {
      [key: integer]: LevelMoves;
  }
  interface PokemonSpeciesFormLevelMoves {
      [key: integer]: PokemonFormLevelMoves;
  }
  export declare const pokemonSpeciesLevelMoves: PokemonSpeciesLevelMoves;
  export declare const pokemonFormLevelMoves: PokemonSpeciesFormLevelMoves;
  export {};
  
}

declare namespace PokeRogue.data {
  //import { Localizable } from "#app/interfaces/locales";
  //import { Abilities } from "#enums/abilities";
  //import { PartyMemberStrength } from "#enums/party-member-strength";
  //import { Species } from "#enums/species";
  //import BattleScene, { AnySound } from "../battle-scene";
  //import { GameMode } from "../game-mode";
  //import { StarterMoveset } from "../system/game-data";
  //import { GrowthRate } from "./exp";
  //import { EvolutionLevel } from "./pokemon-evolutions";
  //import { Type } from "./type";
  //import { LevelMoves } from "./pokemon-level-moves";
  //import { Stat } from "#enums/stat";
  //import { Variant } from "./variant";
  export declare enum Region {
      NORMAL = 0,
      ALOLA = 1,
      GALAR = 2,
      HISUI = 3,
      PALDEA = 4
  }
  /**
   * Gets the {@linkcode PokemonSpecies} object associated with the {@linkcode Species} enum given
   * @param species The species to fetch
   * @returns The associated {@linkcode PokemonSpecies} object
   */
  export declare function getPokemonSpecies(species: PokeRogue.enums.Species | Species[] | undefined): PokemonSpecies;
  export declare function getPokemonSpeciesForm(species: PokeRogue.enums.Species, formIndex: integer): PokemonSpeciesForm;
  export declare function getFusedSpeciesName(speciesAName: string, speciesBName: string): string;
  export type PokemonSpeciesFilter = (species: PokemonSpecies) => boolean;
  export declare abstract class PokemonSpeciesForm {
      speciesId: PokeRogue.enums.Species;
      formIndex: integer;
      generation: integer;
      type1: PokeRogue.data.Type;
      type2: PokeRogue.data.Type | null;
      height: number;
      weight: number;
      ability1: PokeRogue.enums.Abilities;
      ability2: PokeRogue.enums.Abilities;
      abilityHidden: PokeRogue.enums.Abilities;
      baseTotal: integer;
      baseStats: integer[];
      catchRate: integer;
      baseFriendship: integer;
      baseExp: integer;
      genderDiffs: boolean;
      isStarterSelectable: boolean;
      constructor(type1: PokeRogue.data.Type, type2: PokeRogue.data.Type | null, height: number, weight: number, ability1: PokeRogue.enums.Abilities, ability2: PokeRogue.enums.Abilities, abilityHidden: PokeRogue.enums.Abilities, baseTotal: integer, baseHp: integer, baseAtk: integer, baseDef: integer, baseSpatk: integer, baseSpdef: integer, baseSpd: integer, catchRate: integer, baseFriendship: integer, baseExp: integer, genderDiffs: boolean, isStarterSelectable: boolean);
      /**
       * Method to get the root species id of a Pokemon.
       * Magmortar.getRootSpeciesId(true) => Magmar
       * Magmortar.getRootSpeciesId(false) => Magby
       * @param forStarter boolean to get the nonbaby form of a starter
       * @returns The species
       */
      getRootSpeciesId(forStarter?: boolean): Species;
      isOfType(type: integer): boolean;
      /**
       * Method to get the total number of abilities a Pokemon species has.
       * @returns Number of abilities
       */
      getAbilityCount(): integer;
      /**
       * Method to get the ability of a Pokemon species.
       * @param abilityIndex Which ability to get (should only be 0-2)
       * @returns The id of the Ability
       */
      getAbility(abilityIndex: integer): Abilities;
      getLevelMoves(): LevelMoves;
      getRegion(): Region;
      isObtainable(): boolean;
      isCatchable(): boolean;
      isRegional(): boolean;
      isTrainerForbidden(): boolean;
      isRareRegional(): boolean;
      /**
       * Gets the species' base stat amount for the given stat.
       * @param stat  The desired stat.
       * @returns The species' base stat amount.
       */
      getBaseStat(stat: PokeRogue.enums.Stat): integer;
      getBaseExp(): integer;
      getSpriteAtlasPath(female: boolean, formIndex?: integer, shiny?: boolean, variant?: integer): string;
      getSpriteId(female: boolean, formIndex?: integer, shiny?: boolean, variant?: integer, back?: boolean): string;
      getSpriteKey(female: boolean, formIndex?: integer, shiny?: boolean, variant?: integer): string;
      abstract getFormSpriteKey(formIndex?: integer): string;
      /**
       * Variant Data key/index is either species id or species id followed by -formkey
       * @param formIndex optional form index for pokemon with different forms
       * @returns species id if no additional forms, index with formkey if a pokemon with a form
       */
      getVariantDataIndex(formIndex?: integer): string | number;
      getIconAtlasKey(formIndex?: integer, shiny?: boolean, variant?: integer): string;
      getIconId(female: boolean, formIndex?: integer, shiny?: boolean, variant?: integer): string;
      getCryKey(formIndex?: integer): string;
      validateStarterMoveset(moveset: PokeRogue.system.StarterMoveset, eggMoves: integer): boolean;
      loadAssets(scene: PokeRogue.BattleScene, female: boolean, formIndex?: integer, shiny?: boolean, variant?: Variant, startLoad?: boolean): Promise<void>;
      cry(scene: PokeRogue.BattleScene, soundConfig?: Phaser.Types.Sound.SoundConfig, ignorePlay?: boolean): AnySound;
      generateCandyColors(scene: PokeRogue.BattleScene): integer[][];
  }
  export class PokemonSpecies extends PokemonSpeciesForm implements Localizable {
      name: string;
      subLegendary: boolean;
      legendary: boolean;
      mythical: boolean;
      species: string;
      growthRate: PokeRogue.data.GrowthRate;
      malePercent: number | null;
      genderDiffs: boolean;
      canChangeForm: boolean;
      forms: PokemonForm[];
      constructor(id: PokeRogue.enums.Species, generation: integer, subLegendary: boolean, legendary: boolean, mythical: boolean, species: string, type1: PokeRogue.data.Type, type2: PokeRogue.data.Type | null, height: number, weight: number, ability1: PokeRogue.enums.Abilities, ability2: PokeRogue.enums.Abilities, abilityHidden: PokeRogue.enums.Abilities, baseTotal: integer, baseHp: integer, baseAtk: integer, baseDef: integer, baseSpatk: integer, baseSpdef: integer, baseSpd: integer, catchRate: integer, baseFriendship: integer, baseExp: integer, growthRate: PokeRogue.data.GrowthRate, malePercent: number | null, genderDiffs: boolean, canChangeForm?: boolean, ...forms: PokemonForm[]);
      getName(formIndex?: integer): string;
      localize(): void;
      getWildSpeciesForLevel(level: integer, allowEvolving: boolean, isBoss: boolean, gameMode: PokeRogue.GameMode): Species;
      getTrainerSpeciesForLevel(level: integer, allowEvolving: boolean, strength: PokeRogue.enums.PartyMemberStrength, currentWave?: number): Species;
      public getStrengthLevelDiff;
      getSpeciesForLevel(level: integer, allowEvolving?: boolean, forTrainer?: boolean, strength?: PartyMemberStrength, currentWave?: number): Species;
      getEvolutionLevels(): EvolutionLevel[];
      getPrevolutionLevels(): EvolutionLevel[];
      getSimulatedEvolutionChain(currentLevel: integer, forTrainer?: boolean, isBoss?: boolean, player?: boolean): EvolutionLevel[];
      getCompatibleFusionSpeciesFilter(): PokemonSpeciesFilter;
      isObtainable(): boolean;
      hasVariants(): any;
      getFormSpriteKey(formIndex?: integer): string;
  }
  export declare class PokemonForm extends PokemonSpeciesForm {
      formName: string;
      formKey: string;
      formSpriteKey: string | null;
      public starterSelectableKeys;
      constructor(formName: string, formKey: string, type1: PokeRogue.data.Type, type2: PokeRogue.data.Type | null, height: number, weight: number, ability1: PokeRogue.enums.Abilities, ability2: PokeRogue.enums.Abilities, abilityHidden: PokeRogue.enums.Abilities, baseTotal: integer, baseHp: integer, baseAtk: integer, baseDef: integer, baseSpatk: integer, baseSpdef: integer, baseSpd: integer, catchRate: integer, baseFriendship: integer, baseExp: integer, genderDiffs?: boolean, formSpriteKey?: string | null, isStarterSelectable?: boolean);
      getFormSpriteKey(_formIndex?: integer): string;
  }
  export declare enum SpeciesFormKey {
      MEGA = "mega",
      MEGA_X = "mega-x",
      MEGA_Y = "mega-y",
      PRIMAL = "primal",
      ORIGIN = "origin",
      INCARNATE = "incarnate",
      THERIAN = "therian",
      GIGANTAMAX = "gigantamax",
      GIGANTAMAX_SINGLE = "gigantamax-single",
      GIGANTAMAX_RAPID = "gigantamax-rapid",
      ETERNAMAX = "eternamax"
  }
  export declare const allSpecies: PokemonSpecies[];
  export declare function initSpecies(): void;
  export declare const speciesStarters: {
      1: number;
      4: number;
      7: number;
      10: number;
      13: number;
      16: number;
      19: number;
      21: number;
      23: number;
      25: number;
      27: number;
      29: number;
      32: number;
      35: number;
      37: number;
      39: number;
      41: number;
      43: number;
      46: number;
      48: number;
      50: number;
      52: number;
      54: number;
      56: number;
      58: number;
      60: number;
      63: number;
      66: number;
      69: number;
      72: number;
      74: number;
      77: number;
      79: number;
      81: number;
      83: number;
      84: number;
      86: number;
      88: number;
      90: number;
      92: number;
      95: number;
      96: number;
      98: number;
      100: number;
      102: number;
      104: number;
      106: number;
      107: number;
      108: number;
      109: number;
      111: number;
      113: number;
      114: number;
      115: number;
      116: number;
      118: number;
      120: number;
      122: number;
      123: number;
      124: number;
      125: number;
      126: number;
      127: number;
      128: number;
      129: number;
      131: number;
      132: number;
      133: number;
      137: number;
      138: number;
      140: number;
      142: number;
      143: number;
      144: number;
      145: number;
      146: number;
      147: number;
      150: number;
      151: number;
      152: number;
      155: number;
      158: number;
      161: number;
      163: number;
      165: number;
      167: number;
      170: number;
      172: number;
      173: number;
      174: number;
      175: number;
      177: number;
      179: number;
      183: number;
      185: number;
      187: number;
      190: number;
      191: number;
      193: number;
      194: number;
      198: number;
      200: number;
      201: number;
      202: number;
      203: number;
      204: number;
      206: number;
      207: number;
      209: number;
      211: number;
      213: number;
      214: number;
      215: number;
      216: number;
      218: number;
      220: number;
      222: number;
      223: number;
      225: number;
      226: number;
      227: number;
      228: number;
      231: number;
      234: number;
      235: number;
      236: number;
      238: number;
      239: number;
      240: number;
      241: number;
      243: number;
      244: number;
      245: number;
      246: number;
      249: number;
      250: number;
      251: number;
      252: number;
      255: number;
      258: number;
      261: number;
      263: number;
      265: number;
      270: number;
      273: number;
      276: number;
      278: number;
      280: number;
      283: number;
      285: number;
      287: number;
      290: number;
      293: number;
      296: number;
      298: number;
      299: number;
      300: number;
      302: number;
      303: number;
      304: number;
      307: number;
      309: number;
      311: number;
      312: number;
      313: number;
      314: number;
      315: number;
      316: number;
      318: number;
      320: number;
      322: number;
      324: number;
      325: number;
      327: number;
      328: number;
      331: number;
      333: number;
      335: number;
      336: number;
      337: number;
      338: number;
      339: number;
      341: number;
      343: number;
      345: number;
      347: number;
      349: number;
      351: number;
      352: number;
      353: number;
      355: number;
      357: number;
      358: number;
      359: number;
      360: number;
      361: number;
      363: number;
      366: number;
      369: number;
      370: number;
      371: number;
      374: number;
      377: number;
      378: number;
      379: number;
      380: number;
      381: number;
      382: number;
      383: number;
      384: number;
      385: number;
      386: number;
      387: number;
      390: number;
      393: number;
      396: number;
      399: number;
      401: number;
      403: number;
      406: number;
      408: number;
      410: number;
      412: number;
      415: number;
      417: number;
      418: number;
      420: number;
      422: number;
      425: number;
      427: number;
      431: number;
      433: number;
      434: number;
      436: number;
      438: number;
      439: number;
      440: number;
      441: number;
      442: number;
      443: number;
      446: number;
      447: number;
      449: number;
      451: number;
      453: number;
      455: number;
      456: number;
      458: number;
      459: number;
      479: number;
      480: number;
      481: number;
      482: number;
      483: number;
      484: number;
      485: number;
      486: number;
      487: number;
      488: number;
      489: number;
      490: number;
      491: number;
      492: number;
      493: number;
      494: number;
      495: number;
      498: number;
      501: number;
      504: number;
      506: number;
      509: number;
      511: number;
      513: number;
      515: number;
      517: number;
      519: number;
      522: number;
      524: number;
      527: number;
      529: number;
      531: number;
      532: number;
      535: number;
      538: number;
      539: number;
      540: number;
      543: number;
      546: number;
      548: number;
      550: number;
      551: number;
      554: number;
      556: number;
      557: number;
      559: number;
      561: number;
      562: number;
      564: number;
      566: number;
      568: number;
      570: number;
      572: number;
      574: number;
      577: number;
      580: number;
      582: number;
      585: number;
      587: number;
      588: number;
      590: number;
      592: number;
      594: number;
      595: number;
      597: number;
      599: number;
      602: number;
      605: number;
      607: number;
      610: number;
      613: number;
      615: number;
      616: number;
      618: number;
      619: number;
      621: number;
      622: number;
      624: number;
      626: number;
      627: number;
      629: number;
      631: number;
      632: number;
      633: number;
      636: number;
      638: number;
      639: number;
      640: number;
      641: number;
      642: number;
      643: number;
      644: number;
      645: number;
      646: number;
      647: number;
      648: number;
      649: number;
      650: number;
      653: number;
      656: number;
      659: number;
      661: number;
      664: number;
      667: number;
      669: number;
      672: number;
      674: number;
      676: number;
      677: number;
      679: number;
      682: number;
      684: number;
      686: number;
      688: number;
      690: number;
      692: number;
      694: number;
      696: number;
      698: number;
      701: number;
      702: number;
      703: number;
      704: number;
      707: number;
      708: number;
      710: number;
      712: number;
      714: number;
      716: number;
      717: number;
      718: number;
      719: number;
      720: number;
      721: number;
      2670: number;
      722: number;
      725: number;
      728: number;
      731: number;
      734: number;
      736: number;
      739: number;
      741: number;
      742: number;
      744: number;
      746: number;
      747: number;
      749: number;
      751: number;
      753: number;
      755: number;
      757: number;
      759: number;
      761: number;
      764: number;
      765: number;
      766: number;
      767: number;
      769: number;
      771: number;
      772: number;
      774: number;
      775: number;
      776: number;
      777: number;
      778: number;
      779: number;
      780: number;
      781: number;
      782: number;
      785: number;
      786: number;
      787: number;
      788: number;
      789: number;
      793: number;
      794: number;
      795: number;
      796: number;
      797: number;
      798: number;
      799: number;
      800: number;
      801: number;
      802: number;
      803: number;
      805: number;
      806: number;
      807: number;
      808: number;
      2019: number;
      2027: number;
      2037: number;
      2050: number;
      2052: number;
      2074: number;
      2088: number;
      810: number;
      813: number;
      816: number;
      819: number;
      821: number;
      824: number;
      827: number;
      829: number;
      831: number;
      833: number;
      835: number;
      837: number;
      840: number;
      843: number;
      845: number;
      846: number;
      848: number;
      850: number;
      852: number;
      854: number;
      856: number;
      859: number;
      868: number;
      870: number;
      871: number;
      872: number;
      874: number;
      875: number;
      876: number;
      877: number;
      878: number;
      880: number;
      881: number;
      882: number;
      883: number;
      884: number;
      885: number;
      888: number;
      889: number;
      890: number;
      891: number;
      893: number;
      894: number;
      895: number;
      896: number;
      897: number;
      898: number;
      4052: number;
      4077: number;
      4079: number;
      4083: number;
      4222: number;
      4263: number;
      4554: number;
      4562: number;
      4618: number;
      4122: number;
      4144: number;
      4145: number;
      4146: number;
      6058: number;
      6100: number;
      6211: number;
      6215: number;
      6570: number;
      905: number;
      906: number;
      909: number;
      912: number;
      915: number;
      917: number;
      919: number;
      921: number;
      924: number;
      926: number;
      928: number;
      931: number;
      932: number;
      935: number;
      938: number;
      940: number;
      942: number;
      944: number;
      946: number;
      948: number;
      950: number;
      951: number;
      953: number;
      955: number;
      957: number;
      960: number;
      962: number;
      963: number;
      965: number;
      967: number;
      968: number;
      969: number;
      971: number;
      973: number;
      974: number;
      976: number;
      977: number;
      978: number;
      984: number;
      985: number;
      986: number;
      987: number;
      988: number;
      989: number;
      990: number;
      991: number;
      992: number;
      993: number;
      994: number;
      995: number;
      996: number;
      999: number;
      1001: number;
      1002: number;
      1003: number;
      1004: number;
      1005: number;
      1006: number;
      1007: number;
      1008: number;
      1009: number;
      1010: number;
      1012: number;
      1014: number;
      1015: number;
      1016: number;
      1017: number;
      1020: number;
      1021: number;
      1022: number;
      1023: number;
      1024: number;
      1025: number;
      8128: number;
      8194: number;
      8901: number;
  };
  export declare const noStarterFormKeys: string[];
  export declare function getStarterValueFriendshipCap(value: integer): integer;
  /**
  * Method to get the daily list of starters with Pokerus.
  * @param scene {@linkcode BattleScene} used as part of RNG
  * @returns A list of starters with Pokerus
  */
  export declare function getPokerusStarters(scene: PokeRogue.BattleScene): PokemonSpecies[];
  export declare const starterPassiveAbilities: {
      1: PokeRogue.enums.Abilities;
      4: PokeRogue.enums.Abilities;
      7: PokeRogue.enums.Abilities;
      10: PokeRogue.enums.Abilities;
      13: PokeRogue.enums.Abilities;
      16: PokeRogue.enums.Abilities;
      19: PokeRogue.enums.Abilities;
      21: PokeRogue.enums.Abilities;
      23: PokeRogue.enums.Abilities;
      27: PokeRogue.enums.Abilities;
      29: PokeRogue.enums.Abilities;
      32: PokeRogue.enums.Abilities;
      37: PokeRogue.enums.Abilities;
      41: PokeRogue.enums.Abilities;
      43: PokeRogue.enums.Abilities;
      46: PokeRogue.enums.Abilities;
      48: PokeRogue.enums.Abilities;
      50: PokeRogue.enums.Abilities;
      52: PokeRogue.enums.Abilities;
      54: PokeRogue.enums.Abilities;
      56: PokeRogue.enums.Abilities;
      58: PokeRogue.enums.Abilities;
      60: PokeRogue.enums.Abilities;
      63: PokeRogue.enums.Abilities;
      66: PokeRogue.enums.Abilities;
      69: PokeRogue.enums.Abilities;
      72: PokeRogue.enums.Abilities;
      74: PokeRogue.enums.Abilities;
      77: PokeRogue.enums.Abilities;
      79: PokeRogue.enums.Abilities;
      81: PokeRogue.enums.Abilities;
      83: PokeRogue.enums.Abilities;
      84: PokeRogue.enums.Abilities;
      86: PokeRogue.enums.Abilities;
      88: PokeRogue.enums.Abilities;
      90: PokeRogue.enums.Abilities;
      92: PokeRogue.enums.Abilities;
      95: PokeRogue.enums.Abilities;
      96: PokeRogue.enums.Abilities;
      98: PokeRogue.enums.Abilities;
      100: PokeRogue.enums.Abilities;
      102: PokeRogue.enums.Abilities;
      104: PokeRogue.enums.Abilities;
      108: PokeRogue.enums.Abilities;
      109: PokeRogue.enums.Abilities;
      111: PokeRogue.enums.Abilities;
      114: PokeRogue.enums.Abilities;
      115: PokeRogue.enums.Abilities;
      116: PokeRogue.enums.Abilities;
      118: PokeRogue.enums.Abilities;
      120: PokeRogue.enums.Abilities;
      123: PokeRogue.enums.Abilities;
      127: PokeRogue.enums.Abilities;
      128: PokeRogue.enums.Abilities;
      129: PokeRogue.enums.Abilities;
      131: PokeRogue.enums.Abilities;
      132: PokeRogue.enums.Abilities;
      133: PokeRogue.enums.Abilities;
      137: PokeRogue.enums.Abilities;
      138: PokeRogue.enums.Abilities;
      140: PokeRogue.enums.Abilities;
      142: PokeRogue.enums.Abilities;
      144: PokeRogue.enums.Abilities;
      145: PokeRogue.enums.Abilities;
      146: PokeRogue.enums.Abilities;
      147: PokeRogue.enums.Abilities;
      150: PokeRogue.enums.Abilities;
      151: PokeRogue.enums.Abilities;
      152: PokeRogue.enums.Abilities;
      155: PokeRogue.enums.Abilities;
      158: PokeRogue.enums.Abilities;
      161: PokeRogue.enums.Abilities;
      163: PokeRogue.enums.Abilities;
      165: PokeRogue.enums.Abilities;
      167: PokeRogue.enums.Abilities;
      170: PokeRogue.enums.Abilities;
      172: PokeRogue.enums.Abilities;
      173: PokeRogue.enums.Abilities;
      174: PokeRogue.enums.Abilities;
      175: PokeRogue.enums.Abilities;
      177: PokeRogue.enums.Abilities;
      179: PokeRogue.enums.Abilities;
      187: PokeRogue.enums.Abilities;
      190: PokeRogue.enums.Abilities;
      191: PokeRogue.enums.Abilities;
      193: PokeRogue.enums.Abilities;
      194: PokeRogue.enums.Abilities;
      198: PokeRogue.enums.Abilities;
      200: PokeRogue.enums.Abilities;
      201: PokeRogue.enums.Abilities;
      203: PokeRogue.enums.Abilities;
      204: PokeRogue.enums.Abilities;
      206: PokeRogue.enums.Abilities;
      207: PokeRogue.enums.Abilities;
      209: PokeRogue.enums.Abilities;
      211: PokeRogue.enums.Abilities;
      213: PokeRogue.enums.Abilities;
      214: PokeRogue.enums.Abilities;
      215: PokeRogue.enums.Abilities;
      216: PokeRogue.enums.Abilities;
      218: PokeRogue.enums.Abilities;
      220: PokeRogue.enums.Abilities;
      222: PokeRogue.enums.Abilities;
      223: PokeRogue.enums.Abilities;
      225: PokeRogue.enums.Abilities;
      227: PokeRogue.enums.Abilities;
      228: PokeRogue.enums.Abilities;
      231: PokeRogue.enums.Abilities;
      234: PokeRogue.enums.Abilities;
      235: PokeRogue.enums.Abilities;
      236: PokeRogue.enums.Abilities;
      238: PokeRogue.enums.Abilities;
      239: PokeRogue.enums.Abilities;
      240: PokeRogue.enums.Abilities;
      241: PokeRogue.enums.Abilities;
      243: PokeRogue.enums.Abilities;
      244: PokeRogue.enums.Abilities;
      245: PokeRogue.enums.Abilities;
      246: PokeRogue.enums.Abilities;
      249: PokeRogue.enums.Abilities;
      250: PokeRogue.enums.Abilities;
      251: PokeRogue.enums.Abilities;
      252: PokeRogue.enums.Abilities;
      255: PokeRogue.enums.Abilities;
      258: PokeRogue.enums.Abilities;
      261: PokeRogue.enums.Abilities;
      263: PokeRogue.enums.Abilities;
      265: PokeRogue.enums.Abilities;
      270: PokeRogue.enums.Abilities;
      273: PokeRogue.enums.Abilities;
      276: PokeRogue.enums.Abilities;
      278: PokeRogue.enums.Abilities;
      280: PokeRogue.enums.Abilities;
      283: PokeRogue.enums.Abilities;
      285: PokeRogue.enums.Abilities;
      287: PokeRogue.enums.Abilities;
      290: PokeRogue.enums.Abilities;
      293: PokeRogue.enums.Abilities;
      296: PokeRogue.enums.Abilities;
      298: PokeRogue.enums.Abilities;
      299: PokeRogue.enums.Abilities;
      300: PokeRogue.enums.Abilities;
      302: PokeRogue.enums.Abilities;
      303: PokeRogue.enums.Abilities;
      304: PokeRogue.enums.Abilities;
      307: PokeRogue.enums.Abilities;
      309: PokeRogue.enums.Abilities;
      311: PokeRogue.enums.Abilities;
      312: PokeRogue.enums.Abilities;
      313: PokeRogue.enums.Abilities;
      314: PokeRogue.enums.Abilities;
      316: PokeRogue.enums.Abilities;
      318: PokeRogue.enums.Abilities;
      320: PokeRogue.enums.Abilities;
      322: PokeRogue.enums.Abilities;
      324: PokeRogue.enums.Abilities;
      325: PokeRogue.enums.Abilities;
      327: PokeRogue.enums.Abilities;
      328: PokeRogue.enums.Abilities;
      331: PokeRogue.enums.Abilities;
      333: PokeRogue.enums.Abilities;
      335: PokeRogue.enums.Abilities;
      336: PokeRogue.enums.Abilities;
      337: PokeRogue.enums.Abilities;
      338: PokeRogue.enums.Abilities;
      339: PokeRogue.enums.Abilities;
      341: PokeRogue.enums.Abilities;
      343: PokeRogue.enums.Abilities;
      345: PokeRogue.enums.Abilities;
      347: PokeRogue.enums.Abilities;
      349: PokeRogue.enums.Abilities;
      351: PokeRogue.enums.Abilities;
      352: PokeRogue.enums.Abilities;
      353: PokeRogue.enums.Abilities;
      355: PokeRogue.enums.Abilities;
      357: PokeRogue.enums.Abilities;
      359: PokeRogue.enums.Abilities;
      360: PokeRogue.enums.Abilities;
      361: PokeRogue.enums.Abilities;
      363: PokeRogue.enums.Abilities;
      366: PokeRogue.enums.Abilities;
      369: PokeRogue.enums.Abilities;
      370: PokeRogue.enums.Abilities;
      371: PokeRogue.enums.Abilities;
      374: PokeRogue.enums.Abilities;
      377: PokeRogue.enums.Abilities;
      378: PokeRogue.enums.Abilities;
      379: PokeRogue.enums.Abilities;
      380: PokeRogue.enums.Abilities;
      381: PokeRogue.enums.Abilities;
      382: PokeRogue.enums.Abilities;
      383: PokeRogue.enums.Abilities;
      384: PokeRogue.enums.Abilities;
      385: PokeRogue.enums.Abilities;
      386: PokeRogue.enums.Abilities;
      387: PokeRogue.enums.Abilities;
      390: PokeRogue.enums.Abilities;
      393: PokeRogue.enums.Abilities;
      396: PokeRogue.enums.Abilities;
      399: PokeRogue.enums.Abilities;
      401: PokeRogue.enums.Abilities;
      403: PokeRogue.enums.Abilities;
      406: PokeRogue.enums.Abilities;
      408: PokeRogue.enums.Abilities;
      410: PokeRogue.enums.Abilities;
      412: PokeRogue.enums.Abilities;
      415: PokeRogue.enums.Abilities;
      417: PokeRogue.enums.Abilities;
      418: PokeRogue.enums.Abilities;
      420: PokeRogue.enums.Abilities;
      422: PokeRogue.enums.Abilities;
      425: PokeRogue.enums.Abilities;
      427: PokeRogue.enums.Abilities;
      431: PokeRogue.enums.Abilities;
      433: PokeRogue.enums.Abilities;
      434: PokeRogue.enums.Abilities;
      436: PokeRogue.enums.Abilities;
      438: PokeRogue.enums.Abilities;
      439: PokeRogue.enums.Abilities;
      440: PokeRogue.enums.Abilities;
      441: PokeRogue.enums.Abilities;
      442: PokeRogue.enums.Abilities;
      443: PokeRogue.enums.Abilities;
      446: PokeRogue.enums.Abilities;
      447: PokeRogue.enums.Abilities;
      449: PokeRogue.enums.Abilities;
      451: PokeRogue.enums.Abilities;
      453: PokeRogue.enums.Abilities;
      455: PokeRogue.enums.Abilities;
      456: PokeRogue.enums.Abilities;
      458: PokeRogue.enums.Abilities;
      459: PokeRogue.enums.Abilities;
      479: PokeRogue.enums.Abilities;
      480: PokeRogue.enums.Abilities;
      481: PokeRogue.enums.Abilities;
      482: PokeRogue.enums.Abilities;
      483: PokeRogue.enums.Abilities;
      484: PokeRogue.enums.Abilities;
      485: PokeRogue.enums.Abilities;
      486: PokeRogue.enums.Abilities;
      487: PokeRogue.enums.Abilities;
      488: PokeRogue.enums.Abilities;
      489: PokeRogue.enums.Abilities;
      490: PokeRogue.enums.Abilities;
      491: PokeRogue.enums.Abilities;
      492: PokeRogue.enums.Abilities;
      493: PokeRogue.enums.Abilities;
      494: PokeRogue.enums.Abilities;
      495: PokeRogue.enums.Abilities;
      498: PokeRogue.enums.Abilities;
      501: PokeRogue.enums.Abilities;
      504: PokeRogue.enums.Abilities;
      506: PokeRogue.enums.Abilities;
      509: PokeRogue.enums.Abilities;
      511: PokeRogue.enums.Abilities;
      513: PokeRogue.enums.Abilities;
      515: PokeRogue.enums.Abilities;
      517: PokeRogue.enums.Abilities;
      519: PokeRogue.enums.Abilities;
      522: PokeRogue.enums.Abilities;
      524: PokeRogue.enums.Abilities;
      527: PokeRogue.enums.Abilities;
      529: PokeRogue.enums.Abilities;
      531: PokeRogue.enums.Abilities;
      532: PokeRogue.enums.Abilities;
      535: PokeRogue.enums.Abilities;
      538: PokeRogue.enums.Abilities;
      539: PokeRogue.enums.Abilities;
      540: PokeRogue.enums.Abilities;
      543: PokeRogue.enums.Abilities;
      546: PokeRogue.enums.Abilities;
      548: PokeRogue.enums.Abilities;
      550: PokeRogue.enums.Abilities;
      551: PokeRogue.enums.Abilities;
      554: PokeRogue.enums.Abilities;
      556: PokeRogue.enums.Abilities;
      557: PokeRogue.enums.Abilities;
      559: PokeRogue.enums.Abilities;
      561: PokeRogue.enums.Abilities;
      562: PokeRogue.enums.Abilities;
      564: PokeRogue.enums.Abilities;
      566: PokeRogue.enums.Abilities;
      568: PokeRogue.enums.Abilities;
      570: PokeRogue.enums.Abilities;
      572: PokeRogue.enums.Abilities;
      574: PokeRogue.enums.Abilities;
      577: PokeRogue.enums.Abilities;
      580: PokeRogue.enums.Abilities;
      582: PokeRogue.enums.Abilities;
      585: PokeRogue.enums.Abilities;
      587: PokeRogue.enums.Abilities;
      588: PokeRogue.enums.Abilities;
      590: PokeRogue.enums.Abilities;
      592: PokeRogue.enums.Abilities;
      594: PokeRogue.enums.Abilities;
      595: PokeRogue.enums.Abilities;
      597: PokeRogue.enums.Abilities;
      599: PokeRogue.enums.Abilities;
      602: PokeRogue.enums.Abilities;
      605: PokeRogue.enums.Abilities;
      607: PokeRogue.enums.Abilities;
      610: PokeRogue.enums.Abilities;
      613: PokeRogue.enums.Abilities;
      615: PokeRogue.enums.Abilities;
      616: PokeRogue.enums.Abilities;
      618: PokeRogue.enums.Abilities;
      619: PokeRogue.enums.Abilities;
      621: PokeRogue.enums.Abilities;
      622: PokeRogue.enums.Abilities;
      624: PokeRogue.enums.Abilities;
      626: PokeRogue.enums.Abilities;
      627: PokeRogue.enums.Abilities;
      629: PokeRogue.enums.Abilities;
      631: PokeRogue.enums.Abilities;
      632: PokeRogue.enums.Abilities;
      633: PokeRogue.enums.Abilities;
      636: PokeRogue.enums.Abilities;
      638: PokeRogue.enums.Abilities;
      639: PokeRogue.enums.Abilities;
      640: PokeRogue.enums.Abilities;
      641: PokeRogue.enums.Abilities;
      642: PokeRogue.enums.Abilities;
      643: PokeRogue.enums.Abilities;
      644: PokeRogue.enums.Abilities;
      645: PokeRogue.enums.Abilities;
      646: PokeRogue.enums.Abilities;
      647: PokeRogue.enums.Abilities;
      648: PokeRogue.enums.Abilities;
      649: PokeRogue.enums.Abilities;
      650: PokeRogue.enums.Abilities;
      653: PokeRogue.enums.Abilities;
      656: PokeRogue.enums.Abilities;
      659: PokeRogue.enums.Abilities;
      661: PokeRogue.enums.Abilities;
      664: PokeRogue.enums.Abilities;
      667: PokeRogue.enums.Abilities;
      669: PokeRogue.enums.Abilities;
      672: PokeRogue.enums.Abilities;
      674: PokeRogue.enums.Abilities;
      676: PokeRogue.enums.Abilities;
      677: PokeRogue.enums.Abilities;
      679: PokeRogue.enums.Abilities;
      682: PokeRogue.enums.Abilities;
      684: PokeRogue.enums.Abilities;
      686: PokeRogue.enums.Abilities;
      688: PokeRogue.enums.Abilities;
      690: PokeRogue.enums.Abilities;
      692: PokeRogue.enums.Abilities;
      694: PokeRogue.enums.Abilities;
      696: PokeRogue.enums.Abilities;
      698: PokeRogue.enums.Abilities;
      701: PokeRogue.enums.Abilities;
      702: PokeRogue.enums.Abilities;
      703: PokeRogue.enums.Abilities;
      704: PokeRogue.enums.Abilities;
      707: PokeRogue.enums.Abilities;
      708: PokeRogue.enums.Abilities;
      710: PokeRogue.enums.Abilities;
      712: PokeRogue.enums.Abilities;
      714: PokeRogue.enums.Abilities;
      716: PokeRogue.enums.Abilities;
      717: PokeRogue.enums.Abilities;
      718: PokeRogue.enums.Abilities;
      719: PokeRogue.enums.Abilities;
      720: PokeRogue.enums.Abilities;
      721: PokeRogue.enums.Abilities;
      722: PokeRogue.enums.Abilities;
      725: PokeRogue.enums.Abilities;
      728: PokeRogue.enums.Abilities;
      731: PokeRogue.enums.Abilities;
      734: PokeRogue.enums.Abilities;
      736: PokeRogue.enums.Abilities;
      739: PokeRogue.enums.Abilities;
      741: PokeRogue.enums.Abilities;
      742: PokeRogue.enums.Abilities;
      744: PokeRogue.enums.Abilities;
      746: PokeRogue.enums.Abilities;
      747: PokeRogue.enums.Abilities;
      749: PokeRogue.enums.Abilities;
      751: PokeRogue.enums.Abilities;
      753: PokeRogue.enums.Abilities;
      755: PokeRogue.enums.Abilities;
      757: PokeRogue.enums.Abilities;
      759: PokeRogue.enums.Abilities;
      761: PokeRogue.enums.Abilities;
      764: PokeRogue.enums.Abilities;
      765: PokeRogue.enums.Abilities;
      766: PokeRogue.enums.Abilities;
      767: PokeRogue.enums.Abilities;
      769: PokeRogue.enums.Abilities;
      771: PokeRogue.enums.Abilities;
      772: PokeRogue.enums.Abilities;
      774: PokeRogue.enums.Abilities;
      775: PokeRogue.enums.Abilities;
      776: PokeRogue.enums.Abilities;
      777: PokeRogue.enums.Abilities;
      778: PokeRogue.enums.Abilities;
      779: PokeRogue.enums.Abilities;
      780: PokeRogue.enums.Abilities;
      781: PokeRogue.enums.Abilities;
      782: PokeRogue.enums.Abilities;
      785: PokeRogue.enums.Abilities;
      786: PokeRogue.enums.Abilities;
      787: PokeRogue.enums.Abilities;
      788: PokeRogue.enums.Abilities;
      789: PokeRogue.enums.Abilities;
      793: PokeRogue.enums.Abilities;
      794: PokeRogue.enums.Abilities;
      795: PokeRogue.enums.Abilities;
      796: PokeRogue.enums.Abilities;
      797: PokeRogue.enums.Abilities;
      798: PokeRogue.enums.Abilities;
      799: PokeRogue.enums.Abilities;
      800: PokeRogue.enums.Abilities;
      801: PokeRogue.enums.Abilities;
      802: PokeRogue.enums.Abilities;
      803: PokeRogue.enums.Abilities;
      805: PokeRogue.enums.Abilities;
      806: PokeRogue.enums.Abilities;
      807: PokeRogue.enums.Abilities;
      808: PokeRogue.enums.Abilities;
      810: PokeRogue.enums.Abilities;
      813: PokeRogue.enums.Abilities;
      816: PokeRogue.enums.Abilities;
      819: PokeRogue.enums.Abilities;
      821: PokeRogue.enums.Abilities;
      824: PokeRogue.enums.Abilities;
      827: PokeRogue.enums.Abilities;
      829: PokeRogue.enums.Abilities;
      831: PokeRogue.enums.Abilities;
      833: PokeRogue.enums.Abilities;
      835: PokeRogue.enums.Abilities;
      837: PokeRogue.enums.Abilities;
      840: PokeRogue.enums.Abilities;
      843: PokeRogue.enums.Abilities;
      845: PokeRogue.enums.Abilities;
      846: PokeRogue.enums.Abilities;
      848: PokeRogue.enums.Abilities;
      850: PokeRogue.enums.Abilities;
      852: PokeRogue.enums.Abilities;
      854: PokeRogue.enums.Abilities;
      856: PokeRogue.enums.Abilities;
      859: PokeRogue.enums.Abilities;
      868: PokeRogue.enums.Abilities;
      870: PokeRogue.enums.Abilities;
      871: PokeRogue.enums.Abilities;
      872: PokeRogue.enums.Abilities;
      874: PokeRogue.enums.Abilities;
      875: PokeRogue.enums.Abilities;
      876: PokeRogue.enums.Abilities;
      877: PokeRogue.enums.Abilities;
      878: PokeRogue.enums.Abilities;
      880: PokeRogue.enums.Abilities;
      881: PokeRogue.enums.Abilities;
      882: PokeRogue.enums.Abilities;
      883: PokeRogue.enums.Abilities;
      884: PokeRogue.enums.Abilities;
      885: PokeRogue.enums.Abilities;
      888: PokeRogue.enums.Abilities;
      889: PokeRogue.enums.Abilities;
      890: PokeRogue.enums.Abilities;
      891: PokeRogue.enums.Abilities;
      893: PokeRogue.enums.Abilities;
      894: PokeRogue.enums.Abilities;
      895: PokeRogue.enums.Abilities;
      896: PokeRogue.enums.Abilities;
      897: PokeRogue.enums.Abilities;
      898: PokeRogue.enums.Abilities;
      905: PokeRogue.enums.Abilities;
      906: PokeRogue.enums.Abilities;
      909: PokeRogue.enums.Abilities;
      912: PokeRogue.enums.Abilities;
      915: PokeRogue.enums.Abilities;
      917: PokeRogue.enums.Abilities;
      919: PokeRogue.enums.Abilities;
      921: PokeRogue.enums.Abilities;
      924: PokeRogue.enums.Abilities;
      926: PokeRogue.enums.Abilities;
      928: PokeRogue.enums.Abilities;
      931: PokeRogue.enums.Abilities;
      932: PokeRogue.enums.Abilities;
      935: PokeRogue.enums.Abilities;
      938: PokeRogue.enums.Abilities;
      940: PokeRogue.enums.Abilities;
      942: PokeRogue.enums.Abilities;
      944: PokeRogue.enums.Abilities;
      946: PokeRogue.enums.Abilities;
      948: PokeRogue.enums.Abilities;
      950: PokeRogue.enums.Abilities;
      951: PokeRogue.enums.Abilities;
      953: PokeRogue.enums.Abilities;
      955: PokeRogue.enums.Abilities;
      957: PokeRogue.enums.Abilities;
      960: PokeRogue.enums.Abilities;
      962: PokeRogue.enums.Abilities;
      963: PokeRogue.enums.Abilities;
      965: PokeRogue.enums.Abilities;
      967: PokeRogue.enums.Abilities;
      968: PokeRogue.enums.Abilities;
      969: PokeRogue.enums.Abilities;
      971: PokeRogue.enums.Abilities;
      973: PokeRogue.enums.Abilities;
      974: PokeRogue.enums.Abilities;
      976: PokeRogue.enums.Abilities;
      977: PokeRogue.enums.Abilities;
      978: PokeRogue.enums.Abilities;
      984: PokeRogue.enums.Abilities;
      985: PokeRogue.enums.Abilities;
      986: PokeRogue.enums.Abilities;
      987: PokeRogue.enums.Abilities;
      988: PokeRogue.enums.Abilities;
      989: PokeRogue.enums.Abilities;
      990: PokeRogue.enums.Abilities;
      991: PokeRogue.enums.Abilities;
      992: PokeRogue.enums.Abilities;
      993: PokeRogue.enums.Abilities;
      994: PokeRogue.enums.Abilities;
      995: PokeRogue.enums.Abilities;
      996: PokeRogue.enums.Abilities;
      999: PokeRogue.enums.Abilities;
      1001: PokeRogue.enums.Abilities;
      1002: PokeRogue.enums.Abilities;
      1003: PokeRogue.enums.Abilities;
      1004: PokeRogue.enums.Abilities;
      1005: PokeRogue.enums.Abilities;
      1006: PokeRogue.enums.Abilities;
      1007: PokeRogue.enums.Abilities;
      1008: PokeRogue.enums.Abilities;
      1009: PokeRogue.enums.Abilities;
      1010: PokeRogue.enums.Abilities;
      1012: PokeRogue.enums.Abilities;
      1014: PokeRogue.enums.Abilities;
      1015: PokeRogue.enums.Abilities;
      1016: PokeRogue.enums.Abilities;
      1017: PokeRogue.enums.Abilities;
      1020: PokeRogue.enums.Abilities;
      1021: PokeRogue.enums.Abilities;
      1022: PokeRogue.enums.Abilities;
      1023: PokeRogue.enums.Abilities;
      1024: PokeRogue.enums.Abilities;
      1025: PokeRogue.enums.Abilities;
      2019: PokeRogue.enums.Abilities;
      2027: PokeRogue.enums.Abilities;
      2037: PokeRogue.enums.Abilities;
      2050: PokeRogue.enums.Abilities;
      2052: PokeRogue.enums.Abilities;
      2074: PokeRogue.enums.Abilities;
      2088: PokeRogue.enums.Abilities;
      2670: PokeRogue.enums.Abilities;
      4052: PokeRogue.enums.Abilities;
      4077: PokeRogue.enums.Abilities;
      4079: PokeRogue.enums.Abilities;
      4083: PokeRogue.enums.Abilities;
      4144: PokeRogue.enums.Abilities;
      4145: PokeRogue.enums.Abilities;
      4146: PokeRogue.enums.Abilities;
      4222: PokeRogue.enums.Abilities;
      4263: PokeRogue.enums.Abilities;
      4554: PokeRogue.enums.Abilities;
      4562: PokeRogue.enums.Abilities;
      4618: PokeRogue.enums.Abilities;
      6058: PokeRogue.enums.Abilities;
      6100: PokeRogue.enums.Abilities;
      6211: PokeRogue.enums.Abilities;
      6215: PokeRogue.enums.Abilities;
      6570: PokeRogue.enums.Abilities;
      8128: PokeRogue.enums.Abilities;
      8194: PokeRogue.enums.Abilities;
      8901: PokeRogue.enums.Abilities;
  };
  
}

declare namespace PokeRogue.data {
  export declare function getBattleCountSplashMessage(): string;
  export declare function getSplashMessages(): string[];
  
}

declare namespace PokeRogue.data {
  //import { StatusEffect } from "#enums/status-effect";
  export { StatusEffect };
  export declare class Status {
      effect: PokeRogue.enums.StatusEffect;
      turnCount: integer;
      cureTurn: integer | null;
      constructor(effect: PokeRogue.enums.StatusEffect, turnCount?: integer, cureTurn?: integer);
      incrementTurn(): void;
      isPostTurn(): boolean;
  }
  export declare function getStatusEffectObtainText(statusEffect: PokeRogue.enums.StatusEffect | undefined, pokemonNameWithAffix: string, sourceText?: string): string;
  export declare function getStatusEffectActivationText(statusEffect: PokeRogue.enums.StatusEffect, pokemonNameWithAffix: string): string;
  export declare function getStatusEffectOverlapText(statusEffect: PokeRogue.enums.StatusEffect, pokemonNameWithAffix: string): string;
  export declare function getStatusEffectHealText(statusEffect: PokeRogue.enums.StatusEffect, pokemonNameWithAffix: string): string;
  export declare function getStatusEffectDescriptor(statusEffect: PokeRogue.enums.StatusEffect): string;
  export declare function getStatusEffectCatchRateMultiplier(statusEffect: PokeRogue.enums.StatusEffect): number;
  /**
  * Returns a random non-volatile StatusEffect
  */
  export declare function generateRandomStatusEffect(): StatusEffect;
  /**
  * Returns a random non-volatile StatusEffect between the two provided
  * @param statusEffectA The first StatusEffect
  * @param statusEffectA The second StatusEffect
  */
  export declare function getRandomStatusEffect(statusEffectA: PokeRogue.enums.StatusEffect, statusEffectB: PokeRogue.enums.StatusEffect): StatusEffect;
  /**
  * Returns a random non-volatile StatusEffect between the two provided
  * @param statusA The first Status
  * @param statusB The second Status
  */
  export declare function getRandomStatus(statusA: Status | null, statusB: Status | null): Status | null;
  /**
   * Gets all non volatile status effects
   * @returns A list containing all non volatile status effects
   */
  export declare function getNonVolatileStatusEffects(): Array<StatusEffect>;
  /**
   * Returns whether a statuss effect is non volatile.
   * Non-volatile status condition is a status that remains after being switched out.
   * @param status The status to check
   */
  export declare function isNonVolatileStatusEffect(status: PokeRogue.enums.StatusEffect): boolean;
  
}

declare namespace PokeRogue.data {
  //import Pokemon from "../field/pokemon";
  //import Move from "./move";
  //import { Type } from "./type";
  //import { BattlerIndex } from "#app/battle.js";
  export declare enum TerrainType {
      NONE = 0,
      MISTY = 1,
      ELECTRIC = 2,
      GRASSY = 3,
      PSYCHIC = 4
  }
  export declare class Terrain {
      terrainType: TerrainType;
      turnsLeft: integer;
      constructor(terrainType: TerrainType, turnsLeft?: integer);
      lapse(): boolean;
      getAttackTypeMultiplier(attackType: PokeRogue.data.Type): number;
      isMoveTerrainCancelled(user: PokeRogue.field.Pokemon, targets: PokeRogue.BattlerIndex[], move: PokeRogue.data.Move): boolean;
  }
  export declare function getTerrainName(terrainType: TerrainType): string;
  export declare function getTerrainColor(terrainType: TerrainType): [integer, integer, integer];
  
}

declare namespace PokeRogue.data {
  //import { ModifierTier } from "../modifier/modifier-tier";
  //import { Moves } from "#enums/moves";
  //import { Species } from "#enums/species";
  interface TmSpecies {
      [key: integer]: Array<Species | Array<Species | string>>;
  }
  export declare const reverseCompatibleTms: PokeRogue.enums.Moves[];
  export declare const tmSpecies: TmSpecies;
  interface TmPoolTiers {
      [key: integer]: ModifierTier;
  }
  export declare const tmPoolTiers: TmPoolTiers;
  export {};
  
}

declare namespace PokeRogue.data {
  //import BattleScene from "../battle-scene";
  //import { ModifierTypeFunc } from "../modifier/modifier-type";
  //import { EnemyPokemon } from "../field/pokemon";
  //import { PokemonSpeciesFilter } from "./pokemon-species";
  //import { Type } from "./type";
  //import { PersistentModifier } from "../modifier/modifier";
  //import { TrainerVariant } from "../field/trainer";
  //import { PartyMemberStrength } from "#enums/party-member-strength";
  //import { Species } from "#enums/species";
  //import { TrainerType } from "#enums/trainer-type";
  export declare enum TrainerPoolTier {
      COMMON = 0,
      UNCOMMON = 1,
      RARE = 2,
      SUPER_RARE = 3,
      ULTRA_RARE = 4
  }
  export interface TrainerTierPools {
      [key: integer]: Species[];
  }
  export declare enum TrainerSlot {
      NONE = 0,
      TRAINER = 1,
      TRAINER_PARTNER = 2
  }
  export declare class TrainerPartyTemplate {
      size: integer;
      strength: PokeRogue.enums.PartyMemberStrength;
      sameSpecies: boolean;
      balanced: boolean;
      constructor(size: integer, strength: PokeRogue.enums.PartyMemberStrength, sameSpecies?: boolean, balanced?: boolean);
      getStrength(index: integer): PartyMemberStrength;
      isSameSpecies(index: integer): boolean;
      isBalanced(index: integer): boolean;
  }
  export declare class TrainerPartyCompoundTemplate extends TrainerPartyTemplate {
      templates: TrainerPartyTemplate[];
      constructor(...templates: TrainerPartyTemplate[]);
      getStrength(index: integer): PartyMemberStrength;
      isSameSpecies(index: integer): boolean;
      isBalanced(index: integer): boolean;
  }
  export declare const trainerPartyTemplates: {
      ONE_WEAK_ONE_STRONG: TrainerPartyCompoundTemplate;
      ONE_AVG: TrainerPartyTemplate;
      ONE_AVG_ONE_STRONG: TrainerPartyCompoundTemplate;
      ONE_STRONG: TrainerPartyTemplate;
      ONE_STRONGER: TrainerPartyTemplate;
      TWO_WEAKER: TrainerPartyTemplate;
      TWO_WEAK: TrainerPartyTemplate;
      TWO_WEAK_ONE_AVG: TrainerPartyCompoundTemplate;
      TWO_WEAK_SAME_ONE_AVG: TrainerPartyCompoundTemplate;
      TWO_WEAK_SAME_TWO_WEAK_SAME: TrainerPartyCompoundTemplate;
      TWO_WEAK_ONE_STRONG: TrainerPartyCompoundTemplate;
      TWO_AVG: TrainerPartyTemplate;
      TWO_AVG_ONE_STRONG: TrainerPartyCompoundTemplate;
      TWO_AVG_SAME_ONE_AVG: TrainerPartyCompoundTemplate;
      TWO_AVG_SAME_ONE_STRONG: TrainerPartyCompoundTemplate;
      TWO_AVG_SAME_TWO_AVG_SAME: TrainerPartyCompoundTemplate;
      TWO_STRONG: TrainerPartyTemplate;
      THREE_WEAK: TrainerPartyTemplate;
      THREE_WEAK_SAME: TrainerPartyTemplate;
      THREE_AVG: TrainerPartyTemplate;
      THREE_AVG_SAME: TrainerPartyTemplate;
      THREE_WEAK_BALANCED: TrainerPartyTemplate;
      FOUR_WEAKER: TrainerPartyTemplate;
      FOUR_WEAKER_SAME: TrainerPartyTemplate;
      FOUR_WEAK: TrainerPartyTemplate;
      FOUR_WEAK_SAME: TrainerPartyTemplate;
      FOUR_WEAK_BALANCED: TrainerPartyTemplate;
      FIVE_WEAKER: TrainerPartyTemplate;
      FIVE_WEAK: TrainerPartyTemplate;
      FIVE_WEAK_BALANCED: TrainerPartyTemplate;
      SIX_WEAKER: TrainerPartyTemplate;
      SIX_WEAKER_SAME: TrainerPartyTemplate;
      SIX_WEAK_SAME: TrainerPartyTemplate;
      SIX_WEAK_BALANCED: TrainerPartyTemplate;
      GYM_LEADER_1: TrainerPartyCompoundTemplate;
      GYM_LEADER_2: TrainerPartyCompoundTemplate;
      GYM_LEADER_3: TrainerPartyCompoundTemplate;
      GYM_LEADER_4: TrainerPartyCompoundTemplate;
      GYM_LEADER_5: TrainerPartyCompoundTemplate;
      ELITE_FOUR: TrainerPartyCompoundTemplate;
      CHAMPION: TrainerPartyCompoundTemplate;
      RIVAL: TrainerPartyCompoundTemplate;
      RIVAL_2: TrainerPartyCompoundTemplate;
      RIVAL_3: TrainerPartyCompoundTemplate;
      RIVAL_4: TrainerPartyCompoundTemplate;
      RIVAL_5: TrainerPartyCompoundTemplate;
      RIVAL_6: TrainerPartyCompoundTemplate;
  };
  type PartyTemplateFunc = (scene: PokeRogue.BattleScene) => TrainerPartyTemplate;
  type PartyMemberFunc = (scene: PokeRogue.BattleScene, level: integer, strength: PokeRogue.enums.PartyMemberStrength) => EnemyPokemon;
  type GenModifiersFunc = (party: PokeRogue.field.EnemyPokemon[]) => PersistentModifier[];
  export interface PartyMemberFuncs {
      [key: integer]: PartyMemberFunc;
  }
  export declare class TrainerConfig {
      trainerType: PokeRogue.enums.TrainerType;
      trainerTypeDouble: PokeRogue.enums.TrainerType;
      name: string;
      nameFemale: string;
      nameDouble: string;
      title: string;
      titleDouble: string;
      hasGenders: boolean;
      hasDouble: boolean;
      hasCharSprite: boolean;
      doubleOnly: boolean;
      moneyMultiplier: number;
      isBoss: boolean;
      hasStaticParty: boolean;
      useSameSeedForAllMembers: boolean;
      mixedBattleBgm: string;
      battleBgm: string;
      encounterBgm: string;
      femaleEncounterBgm: string;
      doubleEncounterBgm: string;
      victoryBgm: string;
      genModifiersFunc: GenModifiersFunc;
      modifierRewardFuncs: PokeRogue.modifier.ModifierTypeFunc[];
      partyTemplates: TrainerPartyTemplate[];
      partyTemplateFunc: PartyTemplateFunc;
      partyMemberFuncs: PartyMemberFuncs;
      speciesPools: TrainerTierPools;
      speciesFilter: PokeRogue.data.PokemonSpeciesFilter;
      specialtyTypes: PokeRogue.data.Type[];
      hasVoucher: boolean;
      encounterMessages: string[];
      victoryMessages: string[];
      defeatMessages: string[];
      femaleEncounterMessages: string[];
      femaleVictoryMessages: string[];
      femaleDefeatMessages: string[];
      doubleEncounterMessages: string[];
      doubleVictoryMessages: string[];
      doubleDefeatMessages: string[];
      constructor(trainerType: PokeRogue.enums.TrainerType, allowLegendaries?: boolean);
      getKey(): string;
      getSpriteKey(female?: boolean, isDouble?: boolean): string;
      setName(name: string): TrainerConfig;
      /**
       * Sets if a boss trainer will have a voucher or not.
       * @param hasVoucher - If the boss trainer will have a voucher.
       */
      setHasVoucher(hasVoucher: boolean): void;
      setTitle(title: string): TrainerConfig;
      /**
         * Returns the derived trainer type for a given trainer type.
         * @param trainerTypeToDeriveFrom - The trainer type to derive from. (If null, the this.trainerType property will be used.)
         * @returns {TrainerType} - The derived trainer type.
         */
      getDerivedType(trainerTypeToDeriveFrom?: TrainerType | null): TrainerType;
      /**
         * Sets the configuration for trainers with genders, including the female name and encounter background music (BGM).
         * @param {string} [nameFemale] - The name of the female trainer. If 'Ivy', a localized name will be assigned.
         * @param {TrainerType | string} [femaleEncounterBgm] - The encounter BGM for the female trainer, which can be a TrainerType or a string.
         * @returns {TrainerConfig} - The updated TrainerConfig instance.
         **/
      setHasGenders(nameFemale?: string, femaleEncounterBgm?: TrainerType | string): TrainerConfig;
      /**
         * Sets the configuration for trainers with double battles, including the name of the double trainer and the encounter BGM.
         * @param nameDouble - The name of the double trainer (e.g., "Ace Duo" for Trainer Class Doubles or "red_blue_double" for NAMED trainer doubles).
         * @param doubleEncounterBgm - The encounter BGM for the double trainer, which can be a TrainerType or a string.
         * @returns {TrainerConfig} - The updated TrainerConfig instance.
         */
      setHasDouble(nameDouble: string, doubleEncounterBgm?: TrainerType | string): TrainerConfig;
      /**
         * Sets the trainer type for double battles.
         * @param trainerTypeDouble - The TrainerType of the partner in a double battle.
         * @returns {TrainerConfig} - The updated TrainerConfig instance.
         */
      setDoubleTrainerType(trainerTypeDouble: PokeRogue.enums.TrainerType): TrainerConfig;
      /**
         * Sets the encounter and victory messages for double trainers.
         * @param nameDouble - The name of the pair (e.g. "red_blue_double").
         */
      setDoubleMessages(nameDouble: string): void;
      /**
         * Sets the title for double trainers
         * @param titleDouble - the key for the title in the i18n file. (e.g., "champion_double").
         * @returns {TrainerConfig} - The updated TrainerConfig instance.
         */
      setDoubleTitle(titleDouble: string): TrainerConfig;
      setHasCharSprite(): TrainerConfig;
      setDoubleOnly(): TrainerConfig;
      setMoneyMultiplier(moneyMultiplier: number): TrainerConfig;
      setBoss(): TrainerConfig;
      setStaticParty(): TrainerConfig;
      setUseSameSeedForAllMembers(): TrainerConfig;
      setMixedBattleBgm(mixedBattleBgm: string): TrainerConfig;
      setBattleBgm(battleBgm: string): TrainerConfig;
      setEncounterBgm(encounterBgm: PokeRogue.enums.TrainerType | string): TrainerConfig;
      setVictoryBgm(victoryBgm: string): TrainerConfig;
      setPartyTemplates(...partyTemplates: TrainerPartyTemplate[]): TrainerConfig;
      setPartyTemplateFunc(partyTemplateFunc: PartyTemplateFunc): TrainerConfig;
      setPartyMemberFunc(slotIndex: integer, partyMemberFunc: PartyMemberFunc): TrainerConfig;
      setSpeciesPools(speciesPools: TrainerTierPools | Species[]): TrainerConfig;
      setSpeciesFilter(speciesFilter: PokeRogue.data.PokemonSpeciesFilter, allowLegendaries?: boolean): TrainerConfig;
      setSpecialtyTypes(...specialtyTypes: PokeRogue.data.Type[]): TrainerConfig;
      setGenModifiersFunc(genModifiersFunc: GenModifiersFunc): TrainerConfig;
      setModifierRewardFuncs(...modifierTypeFuncs: (() => ModifierTypeFunc)[]): TrainerConfig;
      /**
      * Returns the pool of species for an evil team admin
      * @param team - The evil team the admin belongs to.
      * @returns {TrainerTierPools}
      */
      speciesPoolPerEvilTeamAdmin(team: any): TrainerTierPools;
      /**
         * Initializes the trainer configuration for an evil team admin.
         * @param title - The title of the evil team admin.
         * @param poolName - The evil team the admin belongs to.
         * @param {Species | Species[]} signatureSpecies - The signature species for the evil team leader.
         * @returns {TrainerConfig} - The updated TrainerConfig instance.
         * **/
      initForEvilTeamAdmin(title: string, poolName: string, signatureSpecies: (Species | Species[])[]): TrainerConfig;
      /**
         * Initializes the trainer configuration for an evil team leader. Temporarily hardcoding evil leader teams though.
         * @param {Species | Species[]} signatureSpecies - The signature species for the evil team leader.
         * @param {Type[]} specialtyTypes - The specialty types for the evil team Leader.
         * @param boolean whether or not this is the rematch fight
         * @returns {TrainerConfig} - The updated TrainerConfig instance.
         * **/
      initForEvilTeamLeader(title: string, signatureSpecies: (Species | Species[])[], rematch?: boolean, ...specialtyTypes: PokeRogue.data.Type[]): TrainerConfig;
      /**
         * Initializes the trainer configuration for a Gym Leader.
         * @param {Species | Species[]} signatureSpecies - The signature species for the Gym Leader.
         * @param {Type[]} specialtyTypes - The specialty types for the Gym Leader.
         * @param isMale - Whether the Gym Leader is Male or Not (for localization of the title).
         * @returns {TrainerConfig} - The updated TrainerConfig instance.
         * **/
      initForGymLeader(signatureSpecies: (Species | Species[])[], isMale: boolean, ...specialtyTypes: PokeRogue.data.Type[]): TrainerConfig;
      /**
         * Initializes the trainer configuration for an Elite Four member.
         * @param {Species | Species[]} signatureSpecies - The signature species for the Elite Four member.
         * @param {Type[]} specialtyTypes - The specialty types for the Elite Four member.
         * @param isMale - Whether the Elite Four Member is Male or Female (for localization of the title).
         * @returns {TrainerConfig} - The updated TrainerConfig instance.
         **/
      initForEliteFour(signatureSpecies: (Species | Species[])[], isMale: boolean, ...specialtyTypes: PokeRogue.data.Type[]): TrainerConfig;
      /**
         * Initializes the trainer configuration for a Champion.
         * @param {Species | Species[]} signatureSpecies - The signature species for the Champion.
         * @param isMale - Whether the Champion is Male or Female (for localization of the title).
         * @returns {TrainerConfig} - The updated TrainerConfig instance.
         **/
      initForChampion(signatureSpecies: (Species | Species[])[], isMale: boolean): TrainerConfig;
      /**
         * Retrieves the title for the trainer based on the provided trainer slot and variant.
         * @param {TrainerSlot} trainerSlot - The slot to determine which title to use. Defaults to TrainerSlot.NONE.
         * @param {TrainerVariant} variant - The variant of the trainer to determine the specific title.
         * @returns {string} - The title of the trainer.
         **/
      getTitle(trainerSlot: TrainerSlot, variant: PokeRogue.field.TrainerVariant): string;
      loadAssets(scene: PokeRogue.BattleScene, variant: PokeRogue.field.TrainerVariant): Promise<void>;
  }
  interface TrainerConfigs {
      [key: integer]: TrainerConfig;
  }
  type SignatureSpecies = {
      [key in string]: (Species | Species[])[];
  };
  export declare const signatureSpecies: SignatureSpecies;
  export declare const trainerConfigs: TrainerConfigs;
  export {};
  
}

declare namespace PokeRogue.data {
  export declare const trainerNamePools: {
      1: string[][];
      2: string[][];
      3: string[][];
      4: string[][];
      5: string[];
      6: string[];
      7: string[];
      8: string[][];
      9: string[][];
      10: string[][];
      11: string[][];
      12: string[];
      13: string[];
      14: string[][];
      15: string[];
      16: string[];
      17: string[];
      18: string[];
      19: string[];
      20: string[];
      21: string[];
      22: string[];
      23: string[];
      24: string[];
      25: string[];
      26: string[];
      28: string[];
      29: string[];
      30: string[];
      31: string[];
      32: string[][];
      33: string[][];
      34: string[][];
      35: string[][];
      36: string[][];
      37: string[][];
      38: string[];
      39: string[];
      40: string[][];
      41: string[];
      42: string[][];
      43: string[];
      44: string[][];
      45: string[][];
      46: string[];
      47: string[][];
      48: string[][];
      49: string[][];
      50: string[][];
      27: string[];
  };
  
}

declare namespace PokeRogue.data {
  export declare enum Type {
      UNKNOWN = -1,
      NORMAL = 0,
      FIGHTING = 1,
      FLYING = 2,
      POISON = 3,
      GROUND = 4,
      ROCK = 5,
      BUG = 6,
      GHOST = 7,
      STEEL = 8,
      FIRE = 9,
      WATER = 10,
      GRASS = 11,
      ELECTRIC = 12,
      PSYCHIC = 13,
      ICE = 14,
      DRAGON = 15,
      DARK = 16,
      FAIRY = 17,
      STELLAR = 18
  }
  export type TypeDamageMultiplier = 0 | 0.125 | 0.25 | 0.5 | 1 | 2 | 4 | 8;
  export declare function getTypeDamageMultiplier(attackType: Type, defType: Type): TypeDamageMultiplier;
  /**
   * Retrieve the color corresponding to a specific damage multiplier
   * @returns A color or undefined if the default color should be used
   */
  export declare function getTypeDamageMultiplierColor(multiplier: TypeDamageMultiplier, side: "defense" | "offense"): string | undefined;
  export declare function getTypeRgb(type: Type): [integer, integer, integer];
  
}

declare namespace PokeRogue.data {
  export type Variant = 0 | 1 | 2;
  export type VariantSet = [Variant, Variant, Variant];
  export declare const variantData: any;
  export declare const variantColorCache: {};
  export declare function getVariantTint(variant: Variant): integer;
  export declare function getVariantIcon(variant: Variant): integer;
  
}

declare namespace PokeRogue.data {
  //import { WeatherType } from "#enums/weather-type";
  //import Pokemon from "../field/pokemon";
  //import { Type } from "./type";
  //import Move from "./move";
  //import BattleScene from "../battle-scene";
  //import { TerrainType } from "./terrain";
  export { WeatherType };
  export declare class Weather {
      weatherType: PokeRogue.enums.WeatherType;
      turnsLeft: integer;
      constructor(weatherType: PokeRogue.enums.WeatherType, turnsLeft?: integer);
      lapse(): boolean;
      isImmutable(): boolean;
      isDamaging(): boolean;
      isTypeDamageImmune(type: PokeRogue.data.Type): boolean;
      getAttackTypeMultiplier(attackType: PokeRogue.data.Type): number;
      isMoveWeatherCancelled(user: PokeRogue.field.Pokemon, move: PokeRogue.data.Move): boolean;
      isEffectSuppressed(scene: PokeRogue.BattleScene): boolean;
  }
  export declare function getWeatherStartMessage(weatherType: PokeRogue.enums.WeatherType): string | null;
  export declare function getWeatherLapseMessage(weatherType: PokeRogue.enums.WeatherType): string | null;
  export declare function getWeatherDamageMessage(weatherType: PokeRogue.enums.WeatherType, pokemon: PokeRogue.field.Pokemon): string | null;
  export declare function getWeatherClearMessage(weatherType: PokeRogue.enums.WeatherType): string | null;
  export declare function getTerrainStartMessage(terrainType: PokeRogue.data.TerrainType): string | null;
  export declare function getTerrainClearMessage(terrainType: PokeRogue.data.TerrainType): string | null;
  export declare function getTerrainBlockMessage(pokemon: PokeRogue.field.Pokemon, terrainType: PokeRogue.data.TerrainType): string;
  export declare function getRandomWeatherType(arena: any): WeatherType;
  
}

declare namespace PokeRogue.enums {
  export declare enum Abilities {
      /**{@link https://bulbapedia.bulbagarden.net/wiki/None_(ability) | Source} */
      NONE = 0,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stench_(ability) | Source} */
      STENCH = 1,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drizzle_(ability) | Source} */
      DRIZZLE = 2,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Speed_Boost_(ability) | Source} */
      SPEED_BOOST = 3,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Battle_Armor_(ability) | Source} */
      BATTLE_ARMOR = 4,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sturdy_(ability) | Source} */
      STURDY = 5,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Damp_(ability) | Source} */
      DAMP = 6,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Limber_(ability) | Source} */
      LIMBER = 7,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sand_Veil_(ability) | Source} */
      SAND_VEIL = 8,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Static_(ability) | Source} */
      STATIC = 9,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Volt_Absorb_(ability) | Source} */
      VOLT_ABSORB = 10,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Water_Absorb_(ability) | Source} */
      WATER_ABSORB = 11,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Oblivious_(ability) | Source} */
      OBLIVIOUS = 12,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cloud_Nine_(ability) | Source} */
      CLOUD_NINE = 13,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Compound_Eyes_(ability) | Source} */
      COMPOUND_EYES = 14,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Insomnia_(ability) | Source} */
      INSOMNIA = 15,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Color_Change_(ability) | Source} */
      COLOR_CHANGE = 16,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Immunity_(ability) | Source} */
      IMMUNITY = 17,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flash_Fire_(ability) | Source} */
      FLASH_FIRE = 18,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shield_Dust_(ability) | Source} */
      SHIELD_DUST = 19,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Own_Tempo_(ability) | Source} */
      OWN_TEMPO = 20,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Suction_Cups_(ability) | Source} */
      SUCTION_CUPS = 21,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Intimidate_(ability) | Source} */
      INTIMIDATE = 22,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shadow_Tag_(ability) | Source} */
      SHADOW_TAG = 23,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rough_Skin_(ability) | Source} */
      ROUGH_SKIN = 24,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wonder_Guard_(ability) | Source} */
      WONDER_GUARD = 25,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Levitate_(ability) | Source} */
      LEVITATE = 26,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Effect_Spore_(ability) | Source} */
      EFFECT_SPORE = 27,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Synchronize_(ability) | Source} */
      SYNCHRONIZE = 28,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clear_Body_(ability) | Source} */
      CLEAR_BODY = 29,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Natural_Cure_(ability) | Source} */
      NATURAL_CURE = 30,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lightning_Rod_(ability) | Source} */
      LIGHTNING_ROD = 31,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Serene_Grace_(ability) | Source} */
      SERENE_GRACE = 32,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swift_Swim_(ability) | Source} */
      SWIFT_SWIM = 33,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chlorophyll_(ability) | Source} */
      CHLOROPHYLL = 34,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Illuminate_(ability) | Source} */
      ILLUMINATE = 35,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trace_(ability) | Source} */
      TRACE = 36,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Huge_Power_(ability) | Source} */
      HUGE_POWER = 37,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poison_Point_(ability) | Source} */
      POISON_POINT = 38,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Inner_Focus_(ability) | Source} */
      INNER_FOCUS = 39,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magma_Armor_(ability) | Source} */
      MAGMA_ARMOR = 40,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Water_Veil_(ability) | Source} */
      WATER_VEIL = 41,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magnet_Pull_(ability) | Source} */
      MAGNET_PULL = 42,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Soundproof_(ability) | Source} */
      SOUNDPROOF = 43,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rain_Dish_(ability) | Source} */
      RAIN_DISH = 44,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sand_Stream_(ability) | Source} */
      SAND_STREAM = 45,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pressure_(ability) | Source} */
      PRESSURE = 46,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thick_Fat_(ability) | Source} */
      THICK_FAT = 47,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Early_Bird_(ability) | Source} */
      EARLY_BIRD = 48,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flame_Body_(ability) | Source} */
      FLAME_BODY = 49,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Run_Away_(ability) | Source} */
      RUN_AWAY = 50,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Keen_Eye_(ability) | Source} */
      KEEN_EYE = 51,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hyper_Cutter_(ability) | Source} */
      HYPER_CUTTER = 52,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pickup_(ability) | Source} */
      PICKUP = 53,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Truant_(ability) | Source} */
      TRUANT = 54,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hustle_(ability) | Source} */
      HUSTLE = 55,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cute_Charm_(ability) | Source} */
      CUTE_CHARM = 56,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Plus_(ability) | Source} */
      PLUS = 57,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Minus_(ability) | Source} */
      MINUS = 58,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Forecast_(ability) | Source} */
      FORECAST = 59,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sticky_Hold_(ability) | Source} */
      STICKY_HOLD = 60,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shed_Skin_(ability) | Source} */
      SHED_SKIN = 61,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Guts_(ability) | Source} */
      GUTS = 62,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Marvel_Scale_(ability) | Source} */
      MARVEL_SCALE = 63,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Liquid_Ooze_(ability) | Source} */
      LIQUID_OOZE = 64,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Overgrow_(ability) | Source} */
      OVERGROW = 65,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blaze_(ability) | Source} */
      BLAZE = 66,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Torrent_(ability) | Source} */
      TORRENT = 67,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swarm_(ability) | Source} */
      SWARM = 68,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rock_Head_(ability) | Source} */
      ROCK_HEAD = 69,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drought_(ability) | Source} */
      DROUGHT = 70,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arena_Trap_(ability) | Source} */
      ARENA_TRAP = 71,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vital_Spirit_(ability) | Source} */
      VITAL_SPIRIT = 72,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/White_Smoke_(ability) | Source} */
      WHITE_SMOKE = 73,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pure_Power_(ability) | Source} */
      PURE_POWER = 74,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shell_Armor_(ability) | Source} */
      SHELL_ARMOR = 75,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Air_Lock_(ability) | Source} */
      AIR_LOCK = 76,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tangled_Feet_(ability) | Source} */
      TANGLED_FEET = 77,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Motor_Drive_(ability) | Source} */
      MOTOR_DRIVE = 78,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rivalry_(ability) | Source} */
      RIVALRY = 79,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steadfast_(ability) | Source} */
      STEADFAST = 80,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snow_Cloak_(ability) | Source} */
      SNOW_CLOAK = 81,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gluttony_(ability) | Source} */
      GLUTTONY = 82,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Anger_Point_(ability) | Source} */
      ANGER_POINT = 83,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Unburden_(ability) | Source} */
      UNBURDEN = 84,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heatproof_(ability) | Source} */
      HEATPROOF = 85,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Simple_(ability) | Source} */
      SIMPLE = 86,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dry_Skin_(ability) | Source} */
      DRY_SKIN = 87,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Download_(ability) | Source} */
      DOWNLOAD = 88,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Fist_(ability) | Source} */
      IRON_FIST = 89,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poison_Heal_(ability) | Source} */
      POISON_HEAL = 90,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Adaptability_(ability) | Source} */
      ADAPTABILITY = 91,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skill_Link_(ability) | Source} */
      SKILL_LINK = 92,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hydration_(ability) | Source} */
      HYDRATION = 93,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Solar_Power_(ability) | Source} */
      SOLAR_POWER = 94,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quick_Feet_(ability) | Source} */
      QUICK_FEET = 95,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Normalize_(ability) | Source} */
      NORMALIZE = 96,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sniper_(ability) | Source} */
      SNIPER = 97,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magic_Guard_(ability) | Source} */
      MAGIC_GUARD = 98,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/No_Guard_(ability) | Source} */
      NO_GUARD = 99,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stall_(ability) | Source} */
      STALL = 100,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Technician_(ability) | Source} */
      TECHNICIAN = 101,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Leaf_Guard_(ability) | Source} */
      LEAF_GUARD = 102,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Klutz_(ability) | Source} */
      KLUTZ = 103,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mold_Breaker_(ability) | Source} */
      MOLD_BREAKER = 104,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Super_Luck_(ability) | Source} */
      SUPER_LUCK = 105,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aftermath_(ability) | Source} */
      AFTERMATH = 106,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Anticipation_(ability) | Source} */
      ANTICIPATION = 107,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Forewarn_(ability) | Source} */
      FOREWARN = 108,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Unaware_(ability) | Source} */
      UNAWARE = 109,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tinted_Lens_(ability) | Source} */
      TINTED_LENS = 110,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Filter_(ability) | Source} */
      FILTER = 111,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slow_Start_(ability) | Source} */
      SLOW_START = 112,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scrappy_(ability) | Source} */
      SCRAPPY = 113,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Storm_Drain_(ability) | Source} */
      STORM_DRAIN = 114,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Body_(ability) | Source} */
      ICE_BODY = 115,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Solid_Rock_(ability) | Source} */
      SOLID_ROCK = 116,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snow_Warning_(ability) | Source} */
      SNOW_WARNING = 117,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Honey_Gather_(ability) | Source} */
      HONEY_GATHER = 118,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Frisk_(ability) | Source} */
      FRISK = 119,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Reckless_(ability) | Source} */
      RECKLESS = 120,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Multitype_(ability) | Source} */
      MULTITYPE = 121,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flower_Gift_(ability) | Source} */
      FLOWER_GIFT = 122,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bad_Dreams_(ability) | Source} */
      BAD_DREAMS = 123,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pickpocket_(ability) | Source} */
      PICKPOCKET = 124,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sheer_Force_(ability) | Source} */
      SHEER_FORCE = 125,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Contrary_(ability) | Source} */
      CONTRARY = 126,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Unnerve_(ability) | Source} */
      UNNERVE = 127,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Defiant_(ability) | Source} */
      DEFIANT = 128,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Defeatist_(ability) | Source} */
      DEFEATIST = 129,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cursed_Body_(ability) | Source} */
      CURSED_BODY = 130,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Healer_(ability) | Source} */
      HEALER = 131,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Friend_Guard_(ability) | Source} */
      FRIEND_GUARD = 132,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Weak_Armor_(ability) | Source} */
      WEAK_ARMOR = 133,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heavy_Metal_(ability) | Source} */
      HEAVY_METAL = 134,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Light_Metal_(ability) | Source} */
      LIGHT_METAL = 135,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Multiscale_(ability) | Source} */
      MULTISCALE = 136,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toxic_Boost_(ability) | Source} */
      TOXIC_BOOST = 137,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flare_Boost_(ability) | Source} */
      FLARE_BOOST = 138,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Harvest_(ability) | Source} */
      HARVEST = 139,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Telepathy_(ability) | Source} */
      TELEPATHY = 140,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Moody_(ability) | Source} */
      MOODY = 141,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Overcoat_(ability) | Source} */
      OVERCOAT = 142,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poison_Touch_(ability) | Source} */
      POISON_TOUCH = 143,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Regenerator_(ability) | Source} */
      REGENERATOR = 144,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Big_Pecks_(ability) | Source} */
      BIG_PECKS = 145,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sand_Rush_(ability) | Source} */
      SAND_RUSH = 146,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wonder_Skin_(ability) | Source} */
      WONDER_SKIN = 147,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Analytic_(ability) | Source} */
      ANALYTIC = 148,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Illusion_(ability) | Source} */
      ILLUSION = 149,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Imposter_(ability) | Source} */
      IMPOSTER = 150,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Infiltrator_(ability) | Source} */
      INFILTRATOR = 151,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mummy_(ability) | Source} */
      MUMMY = 152,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Moxie_(ability) | Source} */
      MOXIE = 153,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Justified_(ability) | Source} */
      JUSTIFIED = 154,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rattled_(ability) | Source} */
      RATTLED = 155,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magic_Bounce_(ability) | Source} */
      MAGIC_BOUNCE = 156,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sap_Sipper_(ability) | Source} */
      SAP_SIPPER = 157,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Prankster_(ability) | Source} */
      PRANKSTER = 158,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sand_Force_(ability) | Source} */
      SAND_FORCE = 159,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Barbs_(ability) | Source} */
      IRON_BARBS = 160,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zen_Mode_(ability) | Source} */
      ZEN_MODE = 161,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Victory_Star_(ability) | Source} */
      VICTORY_STAR = 162,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Turboblaze_(ability) | Source} */
      TURBOBLAZE = 163,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Teravolt_(ability) | Source} */
      TERAVOLT = 164,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aroma_Veil_(ability) | Source} */
      AROMA_VEIL = 165,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flower_Veil_(ability) | Source} */
      FLOWER_VEIL = 166,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cheek_Pouch_(ability) | Source} */
      CHEEK_POUCH = 167,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Protean_(ability) | Source} */
      PROTEAN = 168,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fur_Coat_(ability) | Source} */
      FUR_COAT = 169,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magician_(ability) | Source} */
      MAGICIAN = 170,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bulletproof_(ability) | Source} */
      BULLETPROOF = 171,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Competitive_(ability) | Source} */
      COMPETITIVE = 172,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Strong_Jaw_(ability) | Source} */
      STRONG_JAW = 173,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Refrigerate_(ability) | Source} */
      REFRIGERATE = 174,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sweet_Veil_(ability) | Source} */
      SWEET_VEIL = 175,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stance_Change_(ability) | Source} */
      STANCE_CHANGE = 176,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gale_Wings_(ability) | Source} */
      GALE_WINGS = 177,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mega_Launcher_(ability) | Source} */
      MEGA_LAUNCHER = 178,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grass_Pelt_(ability) | Source} */
      GRASS_PELT = 179,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Symbiosis_(ability) | Source} */
      SYMBIOSIS = 180,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tough_Claws_(ability) | Source} */
      TOUGH_CLAWS = 181,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pixilate_(ability) | Source} */
      PIXILATE = 182,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gooey_(ability) | Source} */
      GOOEY = 183,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aerilate_(ability) | Source} */
      AERILATE = 184,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Parental_Bond_(ability) | Source} */
      PARENTAL_BOND = 185,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dark_Aura_(ability) | Source} */
      DARK_AURA = 186,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fairy_Aura_(ability) | Source} */
      FAIRY_AURA = 187,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aura_Break_(ability) | Source} */
      AURA_BREAK = 188,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Primordial_Sea_(ability) | Source} */
      PRIMORDIAL_SEA = 189,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Desolate_Land_(ability) | Source} */
      DESOLATE_LAND = 190,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Delta_Stream_(ability) | Source} */
      DELTA_STREAM = 191,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stamina_(ability) | Source} */
      STAMINA = 192,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wimp_Out_(ability) | Source} */
      WIMP_OUT = 193,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Emergency_Exit_(ability) | Source} */
      EMERGENCY_EXIT = 194,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Water_Compaction_(ability) | Source} */
      WATER_COMPACTION = 195,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Merciless_(ability) | Source} */
      MERCILESS = 196,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shields_Down_(ability) | Source} */
      SHIELDS_DOWN = 197,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stakeout_(ability) | Source} */
      STAKEOUT = 198,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Water_Bubble_(ability) | Source} */
      WATER_BUBBLE = 199,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steelworker_(ability) | Source} */
      STEELWORKER = 200,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Berserk_(ability) | Source} */
      BERSERK = 201,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slush_Rush_(ability) | Source} */
      SLUSH_RUSH = 202,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Long_Reach_(ability) | Source} */
      LONG_REACH = 203,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Liquid_Voice_(ability) | Source} */
      LIQUID_VOICE = 204,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Triage_(ability) | Source} */
      TRIAGE = 205,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Galvanize_(ability) | Source} */
      GALVANIZE = 206,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Surge_Surfer_(ability) | Source} */
      SURGE_SURFER = 207,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Schooling_(ability) | Source} */
      SCHOOLING = 208,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Disguise_(ability) | Source} */
      DISGUISE = 209,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Battle_Bond_(ability) | Source} */
      BATTLE_BOND = 210,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Construct_(ability) | Source} */
      POWER_CONSTRUCT = 211,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Corrosion_(ability) | Source} */
      CORROSION = 212,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Comatose_(ability) | Source} */
      COMATOSE = 213,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Queenly_Majesty_(ability) | Source} */
      QUEENLY_MAJESTY = 214,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Innards_Out_(ability) | Source} */
      INNARDS_OUT = 215,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dancer_(ability) | Source} */
      DANCER = 216,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Battery_(ability) | Source} */
      BATTERY = 217,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fluffy_(ability) | Source} */
      FLUFFY = 218,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dazzling_(ability) | Source} */
      DAZZLING = 219,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Soul_Heart_(ability) | Source} */
      SOUL_HEART = 220,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tangling_Hair_(ability) | Source} */
      TANGLING_HAIR = 221,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Receiver_(ability) | Source} */
      RECEIVER = 222,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Of_Alchemy_(ability) | Source} */
      POWER_OF_ALCHEMY = 223,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Beast_Boost_(ability) | Source} */
      BEAST_BOOST = 224,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rks_System_(ability) | Source} */
      RKS_SYSTEM = 225,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electric_Surge_(ability) | Source} */
      ELECTRIC_SURGE = 226,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psychic_Surge_(ability) | Source} */
      PSYCHIC_SURGE = 227,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Misty_Surge_(ability) | Source} */
      MISTY_SURGE = 228,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grassy_Surge_(ability) | Source} */
      GRASSY_SURGE = 229,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Full_Metal_Body_(ability) | Source} */
      FULL_METAL_BODY = 230,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shadow_Shield_(ability) | Source} */
      SHADOW_SHIELD = 231,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Prism_Armor_(ability) | Source} */
      PRISM_ARMOR = 232,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Neuroforce_(ability) | Source} */
      NEUROFORCE = 233,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Intrepid_Sword_(ability) | Source} */
      INTREPID_SWORD = 234,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dauntless_Shield_(ability) | Source} */
      DAUNTLESS_SHIELD = 235,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Libero_(ability) | Source} */
      LIBERO = 236,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ball_Fetch_(ability) | Source} */
      BALL_FETCH = 237,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cotton_Down_(ability) | Source} */
      COTTON_DOWN = 238,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Propeller_Tail_(ability) | Source} */
      PROPELLER_TAIL = 239,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mirror_Armor_(ability) | Source} */
      MIRROR_ARMOR = 240,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gulp_Missile_(ability) | Source} */
      GULP_MISSILE = 241,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stalwart_(ability) | Source} */
      STALWART = 242,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steam_Engine_(ability) | Source} */
      STEAM_ENGINE = 243,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Punk_Rock_(ability) | Source} */
      PUNK_ROCK = 244,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sand_Spit_(ability) | Source} */
      SAND_SPIT = 245,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Scales_(ability) | Source} */
      ICE_SCALES = 246,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ripen_(ability) | Source} */
      RIPEN = 247,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Face_(ability) | Source} */
      ICE_FACE = 248,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Spot_(ability) | Source} */
      POWER_SPOT = 249,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mimicry_(ability) | Source} */
      MIMICRY = 250,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Screen_Cleaner_(ability) | Source} */
      SCREEN_CLEANER = 251,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steely_Spirit_(ability) | Source} */
      STEELY_SPIRIT = 252,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Perish_Body_(ability) | Source} */
      PERISH_BODY = 253,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wandering_Spirit_(ability) | Source} */
      WANDERING_SPIRIT = 254,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gorilla_Tactics_(ability) | Source} */
      GORILLA_TACTICS = 255,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Neutralizing_Gas_(ability) | Source} */
      NEUTRALIZING_GAS = 256,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pastel_Veil_(ability) | Source} */
      PASTEL_VEIL = 257,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hunger_Switch_(ability) | Source} */
      HUNGER_SWITCH = 258,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quick_Draw_(ability) | Source} */
      QUICK_DRAW = 259,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Unseen_Fist_(ability) | Source} */
      UNSEEN_FIST = 260,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Curious_Medicine_(ability) | Source} */
      CURIOUS_MEDICINE = 261,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Transistor_(ability) | Source} */
      TRANSISTOR = 262,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragons_Maw_(ability) | Source} */
      DRAGONS_MAW = 263,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chilling_Neigh_(ability) | Source} */
      CHILLING_NEIGH = 264,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grim_Neigh_(ability) | Source} */
      GRIM_NEIGH = 265,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/As_One_Glastrier_(ability) | Source} */
      AS_ONE_GLASTRIER = 266,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/As_One_Spectrier_(ability) | Source} */
      AS_ONE_SPECTRIER = 267,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lingering_Aroma_(ability) | Source} */
      LINGERING_AROMA = 268,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Seed_Sower_(ability) | Source} */
      SEED_SOWER = 269,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thermal_Exchange_(ability) | Source} */
      THERMAL_EXCHANGE = 270,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Anger_Shell_(ability) | Source} */
      ANGER_SHELL = 271,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Purifying_Salt_(ability) | Source} */
      PURIFYING_SALT = 272,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Well_Baked_Body_(ability) | Source} */
      WELL_BAKED_BODY = 273,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wind_Rider_(ability) | Source} */
      WIND_RIDER = 274,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Guard_Dog_(ability) | Source} */
      GUARD_DOG = 275,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rocky_Payload_(ability) | Source} */
      ROCKY_PAYLOAD = 276,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wind_Power_(ability) | Source} */
      WIND_POWER = 277,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zero_To_Hero_(ability) | Source} */
      ZERO_TO_HERO = 278,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Commander_(ability) | Source} */
      COMMANDER = 279,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electromorphosis_(ability) | Source} */
      ELECTROMORPHOSIS = 280,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Protosynthesis_(ability) | Source} */
      PROTOSYNTHESIS = 281,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quark_Drive_(ability) | Source} */
      QUARK_DRIVE = 282,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Good_As_Gold_(ability) | Source} */
      GOOD_AS_GOLD = 283,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vessel_Of_Ruin_(ability) | Source} */
      VESSEL_OF_RUIN = 284,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sword_Of_Ruin_(ability) | Source} */
      SWORD_OF_RUIN = 285,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tablets_Of_Ruin_(ability) | Source} */
      TABLETS_OF_RUIN = 286,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Beads_Of_Ruin_(ability) | Source} */
      BEADS_OF_RUIN = 287,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Orichalcum_Pulse_(ability) | Source} */
      ORICHALCUM_PULSE = 288,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hadron_Engine_(ability) | Source} */
      HADRON_ENGINE = 289,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Opportunist_(ability) | Source} */
      OPPORTUNIST = 290,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cud_Chew_(ability) | Source} */
      CUD_CHEW = 291,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sharpness_(ability) | Source} */
      SHARPNESS = 292,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Supreme_Overlord_(ability) | Source} */
      SUPREME_OVERLORD = 293,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Costar_(ability) | Source} */
      COSTAR = 294,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toxic_Debris_(ability) | Source} */
      TOXIC_DEBRIS = 295,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Armor_Tail_(ability) | Source} */
      ARMOR_TAIL = 296,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Earth_Eater_(ability) | Source} */
      EARTH_EATER = 297,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mycelium_Might_(ability) | Source} */
      MYCELIUM_MIGHT = 298,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Minds_Eye_(ability) | Source} */
      MINDS_EYE = 299,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Supersweet_Syrup_(ability) | Source} */
      SUPERSWEET_SYRUP = 300,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hospitality_(ability) | Source} */
      HOSPITALITY = 301,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toxic_Chain_(ability) | Source} */
      TOXIC_CHAIN = 302,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Embody_Aspect_Teal_(ability) | Source} */
      EMBODY_ASPECT_TEAL = 303,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Embody_Aspect_Wellspring_(ability) | Source} */
      EMBODY_ASPECT_WELLSPRING = 304,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Embody_Aspect_Hearthflame_(ability) | Source} */
      EMBODY_ASPECT_HEARTHFLAME = 305,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Embody_Aspect_Cornerstone_(ability) | Source} */
      EMBODY_ASPECT_CORNERSTONE = 306,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tera_Shift_(ability) | Source} */
      TERA_SHIFT = 307,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tera_Shell_(ability) | Source} */
      TERA_SHELL = 308,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Teraform_Zero_(ability) | Source} */
      TERAFORM_ZERO = 309,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poison_Puppeteer_(ability) | Source} */
      POISON_PUPPETEER = 310
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum ArenaTagType {
      NONE = "NONE",
      MUD_SPORT = "MUD_SPORT",
      WATER_SPORT = "WATER_SPORT",
      SPIKES = "SPIKES",
      TOXIC_SPIKES = "TOXIC_SPIKES",
      MIST = "MIST",
      FUTURE_SIGHT = "FUTURE_SIGHT",
      DOOM_DESIRE = "DOOM_DESIRE",
      WISH = "WISH",
      STEALTH_ROCK = "STEALTH_ROCK",
      STICKY_WEB = "STICKY_WEB",
      TRICK_ROOM = "TRICK_ROOM",
      GRAVITY = "GRAVITY",
      REFLECT = "REFLECT",
      LIGHT_SCREEN = "LIGHT_SCREEN",
      AURORA_VEIL = "AURORA_VEIL",
      QUICK_GUARD = "QUICK_GUARD",
      WIDE_GUARD = "WIDE_GUARD",
      MAT_BLOCK = "MAT_BLOCK",
      CRAFTY_SHIELD = "CRAFTY_SHIELD",
      TAILWIND = "TAILWIND",
      HAPPY_HOUR = "HAPPY_HOUR",
      SAFEGUARD = "SAFEGUARD",
      NO_CRIT = "NO_CRIT"
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum BattleSpec {
      DEFAULT = 0,
      FINAL_BOSS = 1
  }
  
}

declare namespace PokeRogue.enums {
  /**
   * Determines the selected battle style.
   * - 'Switch' - The option to switch the active pokemon at the start of a battle will be displayed.
   * - 'Set' - The option to switch the active pokemon at the start of a battle will not display.
  */
  export declare enum BattleStyle {
      SWITCH = 0,
      SET = 1
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum BattlerTagType {
      NONE = "NONE",
      RECHARGING = "RECHARGING",
      FLINCHED = "FLINCHED",
      INTERRUPTED = "INTERRUPTED",
      CONFUSED = "CONFUSED",
      INFATUATED = "INFATUATED",
      SEEDED = "SEEDED",
      NIGHTMARE = "NIGHTMARE",
      FRENZY = "FRENZY",
      CHARGING = "CHARGING",
      ENCORE = "ENCORE",
      HELPING_HAND = "HELPING_HAND",
      INGRAIN = "INGRAIN",
      OCTOLOCK = "OCTOLOCK",
      AQUA_RING = "AQUA_RING",
      DROWSY = "DROWSY",
      TRAPPED = "TRAPPED",
      BIND = "BIND",
      WRAP = "WRAP",
      FIRE_SPIN = "FIRE_SPIN",
      WHIRLPOOL = "WHIRLPOOL",
      CLAMP = "CLAMP",
      SAND_TOMB = "SAND_TOMB",
      MAGMA_STORM = "MAGMA_STORM",
      SNAP_TRAP = "SNAP_TRAP",
      THUNDER_CAGE = "THUNDER_CAGE",
      INFESTATION = "INFESTATION",
      PROTECTED = "PROTECTED",
      SPIKY_SHIELD = "SPIKY_SHIELD",
      KINGS_SHIELD = "KINGS_SHIELD",
      OBSTRUCT = "OBSTRUCT",
      SILK_TRAP = "SILK_TRAP",
      BANEFUL_BUNKER = "BANEFUL_BUNKER",
      BURNING_BULWARK = "BURNING_BULWARK",
      ENDURING = "ENDURING",
      STURDY = "STURDY",
      PERISH_SONG = "PERISH_SONG",
      TRUANT = "TRUANT",
      SLOW_START = "SLOW_START",
      PROTOSYNTHESIS = "PROTOSYNTHESIS",
      QUARK_DRIVE = "QUARK_DRIVE",
      FLYING = "FLYING",
      UNDERGROUND = "UNDERGROUND",
      UNDERWATER = "UNDERWATER",
      HIDDEN = "HIDDEN",
      FIRE_BOOST = "FIRE_BOOST",
      CRIT_BOOST = "CRIT_BOOST",
      ALWAYS_CRIT = "ALWAYS_CRIT",
      IGNORE_ACCURACY = "IGNORE_ACCURACY",
      BYPASS_SLEEP = "BYPASS_SLEEP",
      IGNORE_FLYING = "IGNORE_FLYING",
      SALT_CURED = "SALT_CURED",
      CURSED = "CURSED",
      CHARGED = "CHARGED",
      ROOSTED = "ROOSTED",
      MAGNET_RISEN = "MAGNET_RISEN",
      MINIMIZED = "MINIMIZED",
      DESTINY_BOND = "DESTINY_BOND",
      CENTER_OF_ATTENTION = "CENTER_OF_ATTENTION",
      ICE_FACE = "ICE_FACE",
      DISGUISE = "DISGUISE",
      STOCKPILING = "STOCKPILING",
      RECEIVE_DOUBLE_DAMAGE = "RECEIVE_DOUBLE_DAMAGE",
      ALWAYS_GET_HIT = "ALWAYS_GET_HIT",
      DISABLED = "DISABLED",
      IGNORE_GHOST = "IGNORE_GHOST",
      IGNORE_DARK = "IGNORE_DARK",
      GULP_MISSILE_ARROKUDA = "GULP_MISSILE_ARROKUDA",
      GULP_MISSILE_PIKACHU = "GULP_MISSILE_PIKACHU",
      BEAK_BLAST_CHARGING = "BEAK_BLAST_CHARGING",
      SHELL_TRAP = "SHELL_TRAP",
      DRAGON_CHEER = "DRAGON_CHEER",
      NO_RETREAT = "NO_RETREAT"
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum BerryType {
      SITRUS = 0,
      LUM = 1,
      ENIGMA = 2,
      LIECHI = 3,
      GANLON = 4,
      PETAYA = 5,
      APICOT = 6,
      SALAC = 7,
      LANSAT = 8,
      STARF = 9,
      LEPPA = 10
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum Biome {
      TOWN = 0,
      PLAINS = 1,
      GRASS = 2,
      TALL_GRASS = 3,
      METROPOLIS = 4,
      FOREST = 5,
      SEA = 6,
      SWAMP = 7,
      BEACH = 8,
      LAKE = 9,
      SEABED = 10,
      MOUNTAIN = 11,
      BADLANDS = 12,
      CAVE = 13,
      DESERT = 14,
      ICE_CAVE = 15,
      MEADOW = 16,
      POWER_PLANT = 17,
      VOLCANO = 18,
      GRAVEYARD = 19,
      DOJO = 20,
      FACTORY = 21,
      RUINS = 22,
      WASTELAND = 23,
      ABYSS = 24,
      SPACE = 25,
      CONSTRUCTION_SITE = 26,
      JUNGLE = 27,
      FAIRY_CAVE = 28,
      TEMPLE = 29,
      SLUM = 30,
      SNOWY_FOREST = 31,
      ISLAND = 40,
      LABORATORY = 41,
      END = 50
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum Button {
      UP = 0,
      DOWN = 1,
      LEFT = 2,
      RIGHT = 3,
      SUBMIT = 4,
      ACTION = 5,
      CANCEL = 6,
      MENU = 7,
      STATS = 8,
      CYCLE_SHINY = 9,
      CYCLE_FORM = 10,
      CYCLE_GENDER = 11,
      CYCLE_ABILITY = 12,
      CYCLE_NATURE = 13,
      V = 14,
      SPEED_UP = 15,
      SLOW_DOWN = 16
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum Challenges {
      SINGLE_GENERATION = 0,
      SINGLE_TYPE = 1,
      LOWER_MAX_STARTER_COST = 2,
      LOWER_STARTER_POINTS = 3,
      FRESH_START = 4,
      INVERSE_BATTLE = 5
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum Color {
      WHITE = "#ffffff",
      OFF_WHITE = "#f8f8f8",
      LIGHT_GREY = "#a0a0a0",
      GREY = "#484848",
      DARK_GREY = "#404040",
      PINK = "#f89890",
      RED = "#e13d3d",
      RED2 = "#e70808",
      REDORANGE = "#d64b00",
      ORANGE = "#f8b050",
      LIGHT_YELLOW = "#e8e8a8",
      YELLOW = "#ccbe00",
      DARK_YELLOW = "#a68e17",
      GREEN = "#78c850",
      BLUE = "#40c8f8",
      COMMON = "#ffffff",
      GREAT = "#3890f8",
      ULTRA = "#f8d038",
      ROGUE = "#d52929",
      MASTER = "#e020c0",
      LUXURY = "#e64a18"
  }
  export declare enum TypeColor {
      NORMAL = "#ADA594",
      FIGHTING = "#A55239",
      FLYING = "#9CADF7",
      POISON = "#9141CB",
      GROUND = "#AE7A3B",
      ROCK = "#BDA55A",
      BUG = "#ADBD21",
      GHOST = "#6363B5",
      STEEL = "#81A6BE",
      FIRE = "#F75231",
      WATER = "#399CFF",
      GRASS = "#7BCE52",
      ELECTRIC = "#FFC631",
      PSYCHIC = "#EF4179",
      ICE = "#5ACEE7",
      DRAGON = "#7B63E7",
      DARK = "#735A4A",
      FAIRY = "#EF70EF"
  }
  export declare enum TypeShadow {
      NORMAL = "#574F4A",
      FIGHTING = "#4E637C",
      FLYING = "#4E637C",
      POISON = "#352166",
      GROUND = "#572D1E",
      ROCK = "#5F442D",
      BUG = "#5F5010",
      GHOST = "#323D5B",
      STEEL = "#415C5F",
      FIRE = "#7C1818",
      WATER = "#1C4E80",
      GRASS = "#4F6729",
      ELECTRIC = "#804618",
      PSYCHIC = "#782155",
      ICE = "#2D5C74",
      DRAGON = "#313874",
      DARK = "#392725",
      FAIRY = "#663878"
  }
  export declare enum ShadowColor {
      GREY = "#636363",
      PURPLE = "#6b5a73",
      LIGHT_GREY = "#d0d0c8",
      BROWN = "#69402a",
      PINK = "#fca2a2",
      BRIGHT_RED = "#f83018",
      RED = "#984038",
      MAROON = "#632929",
      GREEN = "#306850",
      BLUE = "#006090",
      LIGHT_YELLOW = "#ded6b5",
      YELLOW = "#ebd773",
      DARK_YELLOW = "#a0a060",
      ORANGE = "#c07800",
      LIGHT_ORANGE = "#ffbd73"
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum Device {
      GAMEPAD = 0,
      KEYBOARD = 1
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum EaseType {
      NONE = 0,
      LINEAR = "Linear",
      QUADRATIC = "Quad",
      CUBIC = "Cubic",
      QUARTIC = "Quart",
      QUINTIC = "Quint",
      SINUSOIDAL = "Sine",
      EXPONENTIAL = "Expo",
      CIRCULAR = "Circ",
      ELASTIC = "Elastic",
      BACK = "Back",
      BOUNCE = "Bounce",
      STEPPED = "Stepped"
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum EggSourceType {
      GACHA_MOVE = 0,
      GACHA_LEGENDARY = 1,
      GACHA_SHINY = 2,
      SAME_SPECIES_EGG = 3,
      EVENT = 4
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum EggTier {
      COMMON = 0,
      GREAT = 1,
      ULTRA = 2,
      MASTER = 3
  }
  
}

declare namespace PokeRogue.enums {
  /**
   * Determines exp notification style.
   * - Default - the normal exp gain display, nothing changed
   * - Only level up - we display the level up in the small frame instead of a message
   * - Skip - no level up frame nor message
  */
  export declare enum ExpNotification {
      DEFAULT = 0,
      ONLY_LEVEL_UP = 1,
      SKIP = 2
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum GachaType {
      MOVE = 0,
      LEGENDARY = 1,
      SHINY = 2
  }
  
}

declare namespace PokeRogue.enums {
  /**
   * enum for the game data types
   */
  export declare enum GameDataType {
      SYSTEM = 0,
      SESSION = 1,
      SETTINGS = 2,
      TUTORIALS = 3,
      SEEN_DIALOGUES = 4,
      RUN_HISTORY = 5
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum MoneyFormat {
      NORMAL = 0,
      ABBREVIATED = 1
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum Moves {
      /**{@link https://bulbapedia.bulbagarden.net/wiki/None_(move) | Source} */
      NONE = 0,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pound_(move) | Source} */
      POUND = 1,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Karate_Chop_(move) | Source} */
      KARATE_CHOP = 2,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Double_Slap_(move) | Source} */
      DOUBLE_SLAP = 3,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Comet_Punch_(move) | Source} */
      COMET_PUNCH = 4,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mega_Punch_(move) | Source} */
      MEGA_PUNCH = 5,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pay_Day_(move) | Source} */
      PAY_DAY = 6,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fire_Punch_(move) | Source} */
      FIRE_PUNCH = 7,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Punch_(move) | Source} */
      ICE_PUNCH = 8,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thunder_Punch_(move) | Source} */
      THUNDER_PUNCH = 9,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scratch_(move) | Source} */
      SCRATCH = 10,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vise_Grip_(move) | Source} */
      VISE_GRIP = 11,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Guillotine_(move) | Source} */
      GUILLOTINE = 12,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Razor_Wind_(move) | Source} */
      RAZOR_WIND = 13,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swords_Dance_(move) | Source} */
      SWORDS_DANCE = 14,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cut_(move) | Source} */
      CUT = 15,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gust_(move) | Source} */
      GUST = 16,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wing_Attack_(move) | Source} */
      WING_ATTACK = 17,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Whirlwind_(move) | Source} */
      WHIRLWIND = 18,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fly_(move) | Source} */
      FLY = 19,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bind_(move) | Source} */
      BIND = 20,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slam_(move) | Source} */
      SLAM = 21,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vine_Whip_(move) | Source} */
      VINE_WHIP = 22,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stomp_(move) | Source} */
      STOMP = 23,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Double_Kick_(move) | Source} */
      DOUBLE_KICK = 24,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mega_Kick_(move) | Source} */
      MEGA_KICK = 25,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jump_Kick_(move) | Source} */
      JUMP_KICK = 26,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rolling_Kick_(move) | Source} */
      ROLLING_KICK = 27,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sand_Attack_(move) | Source} */
      SAND_ATTACK = 28,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Headbutt_(move) | Source} */
      HEADBUTT = 29,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Horn_Attack_(move) | Source} */
      HORN_ATTACK = 30,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fury_Attack_(move) | Source} */
      FURY_ATTACK = 31,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Horn_Drill_(move) | Source} */
      HORN_DRILL = 32,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tackle_(move) | Source} */
      TACKLE = 33,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Body_Slam_(move) | Source} */
      BODY_SLAM = 34,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wrap_(move) | Source} */
      WRAP = 35,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Take_Down_(move) | Source} */
      TAKE_DOWN = 36,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thrash_(move) | Source} */
      THRASH = 37,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Double_Edge_(move) | Source} */
      DOUBLE_EDGE = 38,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tail_Whip_(move) | Source} */
      TAIL_WHIP = 39,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poison_Sting_(move) | Source} */
      POISON_STING = 40,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Twineedle_(move) | Source} */
      TWINEEDLE = 41,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pin_Missile_(move) | Source} */
      PIN_MISSILE = 42,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Leer_(move) | Source} */
      LEER = 43,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bite_(move) | Source} */
      BITE = 44,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Growl_(move) | Source} */
      GROWL = 45,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Roar_(move) | Source} */
      ROAR = 46,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sing_(move) | Source} */
      SING = 47,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Supersonic_(move) | Source} */
      SUPERSONIC = 48,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sonic_Boom_(move) | Source} */
      SONIC_BOOM = 49,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Disable_(move) | Source} */
      DISABLE = 50,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Acid_(move) | Source} */
      ACID = 51,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ember_(move) | Source} */
      EMBER = 52,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flamethrower_(move) | Source} */
      FLAMETHROWER = 53,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mist_(move) | Source} */
      MIST = 54,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Water_Gun_(move) | Source} */
      WATER_GUN = 55,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hydro_Pump_(move) | Source} */
      HYDRO_PUMP = 56,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Surf_(move) | Source} */
      SURF = 57,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Beam_(move) | Source} */
      ICE_BEAM = 58,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blizzard_(move) | Source} */
      BLIZZARD = 59,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psybeam_(move) | Source} */
      PSYBEAM = 60,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bubble_Beam_(move) | Source} */
      BUBBLE_BEAM = 61,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aurora_Beam_(move) | Source} */
      AURORA_BEAM = 62,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hyper_Beam_(move) | Source} */
      HYPER_BEAM = 63,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Peck_(move) | Source} */
      PECK = 64,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drill_Peck_(move) | Source} */
      DRILL_PECK = 65,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Submission_(move) | Source} */
      SUBMISSION = 66,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Low_Kick_(move) | Source} */
      LOW_KICK = 67,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Counter_(move) | Source} */
      COUNTER = 68,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Seismic_Toss_(move) | Source} */
      SEISMIC_TOSS = 69,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Strength_(move) | Source} */
      STRENGTH = 70,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Absorb_(move) | Source} */
      ABSORB = 71,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mega_Drain_(move) | Source} */
      MEGA_DRAIN = 72,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Leech_Seed_(move) | Source} */
      LEECH_SEED = 73,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Growth_(move) | Source} */
      GROWTH = 74,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Razor_Leaf_(move) | Source} */
      RAZOR_LEAF = 75,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Solar_Beam_(move) | Source} */
      SOLAR_BEAM = 76,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poison_Powder_(move) | Source} */
      POISON_POWDER = 77,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stun_Spore_(move) | Source} */
      STUN_SPORE = 78,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sleep_Powder_(move) | Source} */
      SLEEP_POWDER = 79,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Petal_Dance_(move) | Source} */
      PETAL_DANCE = 80,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/String_Shot_(move) | Source} */
      STRING_SHOT = 81,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Rage_(move) | Source} */
      DRAGON_RAGE = 82,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fire_Spin_(move) | Source} */
      FIRE_SPIN = 83,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thunder_Shock_(move) | Source} */
      THUNDER_SHOCK = 84,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thunderbolt_(move) | Source} */
      THUNDERBOLT = 85,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thunder_Wave_(move) | Source} */
      THUNDER_WAVE = 86,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thunder_(move) | Source} */
      THUNDER = 87,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rock_Throw_(move) | Source} */
      ROCK_THROW = 88,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Earthquake_(move) | Source} */
      EARTHQUAKE = 89,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fissure_(move) | Source} */
      FISSURE = 90,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dig_(move) | Source} */
      DIG = 91,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toxic_(move) | Source} */
      TOXIC = 92,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Confusion_(move) | Source} */
      CONFUSION = 93,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psychic_(move) | Source} */
      PSYCHIC = 94,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hypnosis_(move) | Source} */
      HYPNOSIS = 95,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meditate_(move) | Source} */
      MEDITATE = 96,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Agility_(move) | Source} */
      AGILITY = 97,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quick_Attack_(move) | Source} */
      QUICK_ATTACK = 98,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rage_(move) | Source} */
      RAGE = 99,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Teleport_(move) | Source} */
      TELEPORT = 100,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Night_Shade_(move) | Source} */
      NIGHT_SHADE = 101,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mimic_(move) | Source} */
      MIMIC = 102,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Screech_(move) | Source} */
      SCREECH = 103,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Double_Team_(move) | Source} */
      DOUBLE_TEAM = 104,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Recover_(move) | Source} */
      RECOVER = 105,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Harden_(move) | Source} */
      HARDEN = 106,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Minimize_(move) | Source} */
      MINIMIZE = 107,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Smokescreen_(move) | Source} */
      SMOKESCREEN = 108,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Confuse_Ray_(move) | Source} */
      CONFUSE_RAY = 109,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Withdraw_(move) | Source} */
      WITHDRAW = 110,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Defense_Curl_(move) | Source} */
      DEFENSE_CURL = 111,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Barrier_(move) | Source} */
      BARRIER = 112,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Light_Screen_(move) | Source} */
      LIGHT_SCREEN = 113,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Haze_(move) | Source} */
      HAZE = 114,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Reflect_(move) | Source} */
      REFLECT = 115,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Focus_Energy_(move) | Source} */
      FOCUS_ENERGY = 116,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bide_(move) | Source} */
      BIDE = 117,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Metronome_(move) | Source} */
      METRONOME = 118,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mirror_Move_(move) | Source} */
      MIRROR_MOVE = 119,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Self_Destruct_(move) | Source} */
      SELF_DESTRUCT = 120,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Egg_Bomb_(move) | Source} */
      EGG_BOMB = 121,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lick_(move) | Source} */
      LICK = 122,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Smog_(move) | Source} */
      SMOG = 123,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sludge_(move) | Source} */
      SLUDGE = 124,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bone_Club_(move) | Source} */
      BONE_CLUB = 125,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fire_Blast_(move) | Source} */
      FIRE_BLAST = 126,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Waterfall_(move) | Source} */
      WATERFALL = 127,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clamp_(move) | Source} */
      CLAMP = 128,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swift_(move) | Source} */
      SWIFT = 129,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skull_Bash_(move) | Source} */
      SKULL_BASH = 130,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spike_Cannon_(move) | Source} */
      SPIKE_CANNON = 131,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Constrict_(move) | Source} */
      CONSTRICT = 132,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Amnesia_(move) | Source} */
      AMNESIA = 133,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kinesis_(move) | Source} */
      KINESIS = 134,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Soft_Boiled_(move) | Source} */
      SOFT_BOILED = 135,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/High_Jump_Kick_(move) | Source} */
      HIGH_JUMP_KICK = 136,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glare_(move) | Source} */
      GLARE = 137,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dream_Eater_(move) | Source} */
      DREAM_EATER = 138,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poison_Gas_(move) | Source} */
      POISON_GAS = 139,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Barrage_(move) | Source} */
      BARRAGE = 140,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Leech_Life_(move) | Source} */
      LEECH_LIFE = 141,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lovely_Kiss_(move) | Source} */
      LOVELY_KISS = 142,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sky_Attack_(move) | Source} */
      SKY_ATTACK = 143,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Transform_(move) | Source} */
      TRANSFORM = 144,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bubble_(move) | Source} */
      BUBBLE = 145,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dizzy_Punch_(move) | Source} */
      DIZZY_PUNCH = 146,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spore_(move) | Source} */
      SPORE = 147,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flash_(move) | Source} */
      FLASH = 148,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psywave_(move) | Source} */
      PSYWAVE = 149,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Splash_(move) | Source} */
      SPLASH = 150,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Acid_Armor_(move) | Source} */
      ACID_ARMOR = 151,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crabhammer_(move) | Source} */
      CRABHAMMER = 152,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Explosion_(move) | Source} */
      EXPLOSION = 153,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fury_Swipes_(move) | Source} */
      FURY_SWIPES = 154,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bonemerang_(move) | Source} */
      BONEMERANG = 155,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rest_(move) | Source} */
      REST = 156,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rock_Slide_(move) | Source} */
      ROCK_SLIDE = 157,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hyper_Fang_(move) | Source} */
      HYPER_FANG = 158,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sharpen_(move) | Source} */
      SHARPEN = 159,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Conversion_(move) | Source} */
      CONVERSION = 160,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tri_Attack_(move) | Source} */
      TRI_ATTACK = 161,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Super_Fang_(move) | Source} */
      SUPER_FANG = 162,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slash_(move) | Source} */
      SLASH = 163,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Substitute_(move) | Source} */
      SUBSTITUTE = 164,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Struggle_(move) | Source} */
      STRUGGLE = 165,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sketch_(move) | Source} */
      SKETCH = 166,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Triple_Kick_(move) | Source} */
      TRIPLE_KICK = 167,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thief_(move) | Source} */
      THIEF = 168,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spider_Web_(move) | Source} */
      SPIDER_WEB = 169,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mind_Reader_(move) | Source} */
      MIND_READER = 170,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nightmare_(move) | Source} */
      NIGHTMARE = 171,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flame_Wheel_(move) | Source} */
      FLAME_WHEEL = 172,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snore_(move) | Source} */
      SNORE = 173,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Curse_(move) | Source} */
      CURSE = 174,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flail_(move) | Source} */
      FLAIL = 175,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Conversion_2_(move) | Source} */
      CONVERSION_2 = 176,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aeroblast_(move) | Source} */
      AEROBLAST = 177,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cotton_Spore_(move) | Source} */
      COTTON_SPORE = 178,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Reversal_(move) | Source} */
      REVERSAL = 179,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spite_(move) | Source} */
      SPITE = 180,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Powder_Snow_(move) | Source} */
      POWDER_SNOW = 181,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Protect_(move) | Source} */
      PROTECT = 182,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mach_Punch_(move) | Source} */
      MACH_PUNCH = 183,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scary_Face_(move) | Source} */
      SCARY_FACE = 184,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Feint_Attack_(move) | Source} */
      FEINT_ATTACK = 185,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sweet_Kiss_(move) | Source} */
      SWEET_KISS = 186,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Belly_Drum_(move) | Source} */
      BELLY_DRUM = 187,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sludge_Bomb_(move) | Source} */
      SLUDGE_BOMB = 188,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mud_Slap_(move) | Source} */
      MUD_SLAP = 189,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Octazooka_(move) | Source} */
      OCTAZOOKA = 190,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spikes_(move) | Source} */
      SPIKES = 191,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zap_Cannon_(move) | Source} */
      ZAP_CANNON = 192,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Foresight_(move) | Source} */
      FORESIGHT = 193,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Destiny_Bond_(move) | Source} */
      DESTINY_BOND = 194,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Perish_Song_(move) | Source} */
      PERISH_SONG = 195,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Icy_Wind_(move) | Source} */
      ICY_WIND = 196,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Detect_(move) | Source} */
      DETECT = 197,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bone_Rush_(move) | Source} */
      BONE_RUSH = 198,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lock_On_(move) | Source} */
      LOCK_ON = 199,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Outrage_(move) | Source} */
      OUTRAGE = 200,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sandstorm_(move) | Source} */
      SANDSTORM = 201,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Giga_Drain_(move) | Source} */
      GIGA_DRAIN = 202,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Endure_(move) | Source} */
      ENDURE = 203,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Charm_(move) | Source} */
      CHARM = 204,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rollout_(move) | Source} */
      ROLLOUT = 205,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/False_Swipe_(move) | Source} */
      FALSE_SWIPE = 206,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swagger_(move) | Source} */
      SWAGGER = 207,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Milk_Drink_(move) | Source} */
      MILK_DRINK = 208,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spark_(move) | Source} */
      SPARK = 209,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fury_Cutter_(move) | Source} */
      FURY_CUTTER = 210,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steel_Wing_(move) | Source} */
      STEEL_WING = 211,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mean_Look_(move) | Source} */
      MEAN_LOOK = 212,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Attract_(move) | Source} */
      ATTRACT = 213,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sleep_Talk_(move) | Source} */
      SLEEP_TALK = 214,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heal_Bell_(move) | Source} */
      HEAL_BELL = 215,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Return_(move) | Source} */
      RETURN = 216,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Present_(move) | Source} */
      PRESENT = 217,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Frustration_(move) | Source} */
      FRUSTRATION = 218,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Safeguard_(move) | Source} */
      SAFEGUARD = 219,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pain_Split_(move) | Source} */
      PAIN_SPLIT = 220,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sacred_Fire_(move) | Source} */
      SACRED_FIRE = 221,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magnitude_(move) | Source} */
      MAGNITUDE = 222,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dynamic_Punch_(move) | Source} */
      DYNAMIC_PUNCH = 223,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Megahorn_(move) | Source} */
      MEGAHORN = 224,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Breath_(move) | Source} */
      DRAGON_BREATH = 225,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Baton_Pass_(move) | Source} */
      BATON_PASS = 226,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Encore_(move) | Source} */
      ENCORE = 227,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pursuit_(move) | Source} */
      PURSUIT = 228,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rapid_Spin_(move) | Source} */
      RAPID_SPIN = 229,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sweet_Scent_(move) | Source} */
      SWEET_SCENT = 230,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Tail_(move) | Source} */
      IRON_TAIL = 231,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Metal_Claw_(move) | Source} */
      METAL_CLAW = 232,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vital_Throw_(move) | Source} */
      VITAL_THROW = 233,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Morning_Sun_(move) | Source} */
      MORNING_SUN = 234,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Synthesis_(move) | Source} */
      SYNTHESIS = 235,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Moonlight_(move) | Source} */
      MOONLIGHT = 236,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hidden_Power_(move) | Source} */
      HIDDEN_POWER = 237,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cross_Chop_(move) | Source} */
      CROSS_CHOP = 238,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Twister_(move) | Source} */
      TWISTER = 239,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rain_Dance_(move) | Source} */
      RAIN_DANCE = 240,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sunny_Day_(move) | Source} */
      SUNNY_DAY = 241,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crunch_(move) | Source} */
      CRUNCH = 242,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mirror_Coat_(move) | Source} */
      MIRROR_COAT = 243,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psych_Up_(move) | Source} */
      PSYCH_UP = 244,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Extreme_Speed_(move) | Source} */
      EXTREME_SPEED = 245,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ancient_Power_(move) | Source} */
      ANCIENT_POWER = 246,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shadow_Ball_(move) | Source} */
      SHADOW_BALL = 247,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Future_Sight_(move) | Source} */
      FUTURE_SIGHT = 248,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rock_Smash_(move) | Source} */
      ROCK_SMASH = 249,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Whirlpool_(move) | Source} */
      WHIRLPOOL = 250,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Beat_Up_(move) | Source} */
      BEAT_UP = 251,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fake_Out_(move) | Source} */
      FAKE_OUT = 252,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Uproar_(move) | Source} */
      UPROAR = 253,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stockpile_(move) | Source} */
      STOCKPILE = 254,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spit_Up_(move) | Source} */
      SPIT_UP = 255,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swallow_(move) | Source} */
      SWALLOW = 256,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heat_Wave_(move) | Source} */
      HEAT_WAVE = 257,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hail_(move) | Source} */
      HAIL = 258,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Torment_(move) | Source} */
      TORMENT = 259,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flatter_(move) | Source} */
      FLATTER = 260,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Will_O_Wisp_(move) | Source} */
      WILL_O_WISP = 261,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Memento_(move) | Source} */
      MEMENTO = 262,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Facade_(move) | Source} */
      FACADE = 263,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Focus_Punch_(move) | Source} */
      FOCUS_PUNCH = 264,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Smelling_Salts_(move) | Source} */
      SMELLING_SALTS = 265,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Follow_Me_(move) | Source} */
      FOLLOW_ME = 266,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nature_Power_(move) | Source} */
      NATURE_POWER = 267,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Charge_(move) | Source} */
      CHARGE = 268,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Taunt_(move) | Source} */
      TAUNT = 269,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Helping_Hand_(move) | Source} */
      HELPING_HAND = 270,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trick_(move) | Source} */
      TRICK = 271,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Role_Play_(move) | Source} */
      ROLE_PLAY = 272,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wish_(move) | Source} */
      WISH = 273,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Assist_(move) | Source} */
      ASSIST = 274,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ingrain_(move) | Source} */
      INGRAIN = 275,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Superpower_(move) | Source} */
      SUPERPOWER = 276,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magic_Coat_(move) | Source} */
      MAGIC_COAT = 277,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Recycle_(move) | Source} */
      RECYCLE = 278,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Revenge_(move) | Source} */
      REVENGE = 279,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Brick_Break_(move) | Source} */
      BRICK_BREAK = 280,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Yawn_(move) | Source} */
      YAWN = 281,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Knock_Off_(move) | Source} */
      KNOCK_OFF = 282,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Endeavor_(move) | Source} */
      ENDEAVOR = 283,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Eruption_(move) | Source} */
      ERUPTION = 284,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skill_Swap_(move) | Source} */
      SKILL_SWAP = 285,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Imprison_(move) | Source} */
      IMPRISON = 286,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Refresh_(move) | Source} */
      REFRESH = 287,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grudge_(move) | Source} */
      GRUDGE = 288,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snatch_(move) | Source} */
      SNATCH = 289,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Secret_Power_(move) | Source} */
      SECRET_POWER = 290,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dive_(move) | Source} */
      DIVE = 291,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arm_Thrust_(move) | Source} */
      ARM_THRUST = 292,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Camouflage_(move) | Source} */
      CAMOUFLAGE = 293,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tail_Glow_(move) | Source} */
      TAIL_GLOW = 294,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Luster_Purge_(move) | Source} */
      LUSTER_PURGE = 295,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mist_Ball_(move) | Source} */
      MIST_BALL = 296,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Feather_Dance_(move) | Source} */
      FEATHER_DANCE = 297,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Teeter_Dance_(move) | Source} */
      TEETER_DANCE = 298,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blaze_Kick_(move) | Source} */
      BLAZE_KICK = 299,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mud_Sport_(move) | Source} */
      MUD_SPORT = 300,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Ball_(move) | Source} */
      ICE_BALL = 301,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Needle_Arm_(move) | Source} */
      NEEDLE_ARM = 302,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slack_Off_(move) | Source} */
      SLACK_OFF = 303,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hyper_Voice_(move) | Source} */
      HYPER_VOICE = 304,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poison_Fang_(move) | Source} */
      POISON_FANG = 305,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crush_Claw_(move) | Source} */
      CRUSH_CLAW = 306,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blast_Burn_(move) | Source} */
      BLAST_BURN = 307,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hydro_Cannon_(move) | Source} */
      HYDRO_CANNON = 308,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meteor_Mash_(move) | Source} */
      METEOR_MASH = 309,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Astonish_(move) | Source} */
      ASTONISH = 310,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Weather_Ball_(move) | Source} */
      WEATHER_BALL = 311,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aromatherapy_(move) | Source} */
      AROMATHERAPY = 312,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fake_Tears_(move) | Source} */
      FAKE_TEARS = 313,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Air_Cutter_(move) | Source} */
      AIR_CUTTER = 314,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Overheat_(move) | Source} */
      OVERHEAT = 315,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Odor_Sleuth_(move) | Source} */
      ODOR_SLEUTH = 316,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rock_Tomb_(move) | Source} */
      ROCK_TOMB = 317,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Silver_Wind_(move) | Source} */
      SILVER_WIND = 318,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Metal_Sound_(move) | Source} */
      METAL_SOUND = 319,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grass_Whistle_(move) | Source} */
      GRASS_WHISTLE = 320,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tickle_(move) | Source} */
      TICKLE = 321,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cosmic_Power_(move) | Source} */
      COSMIC_POWER = 322,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Water_Spout_(move) | Source} */
      WATER_SPOUT = 323,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Signal_Beam_(move) | Source} */
      SIGNAL_BEAM = 324,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shadow_Punch_(move) | Source} */
      SHADOW_PUNCH = 325,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Extrasensory_(move) | Source} */
      EXTRASENSORY = 326,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sky_Uppercut_(move) | Source} */
      SKY_UPPERCUT = 327,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sand_Tomb_(move) | Source} */
      SAND_TOMB = 328,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sheer_Cold_(move) | Source} */
      SHEER_COLD = 329,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Muddy_Water_(move) | Source} */
      MUDDY_WATER = 330,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bullet_Seed_(move) | Source} */
      BULLET_SEED = 331,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aerial_Ace_(move) | Source} */
      AERIAL_ACE = 332,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Icicle_Spear_(move) | Source} */
      ICICLE_SPEAR = 333,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Defense_(move) | Source} */
      IRON_DEFENSE = 334,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Block_(move) | Source} */
      BLOCK = 335,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Howl_(move) | Source} */
      HOWL = 336,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Claw_(move) | Source} */
      DRAGON_CLAW = 337,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Frenzy_Plant_(move) | Source} */
      FRENZY_PLANT = 338,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bulk_Up_(move) | Source} */
      BULK_UP = 339,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bounce_(move) | Source} */
      BOUNCE = 340,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mud_Shot_(move) | Source} */
      MUD_SHOT = 341,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poison_Tail_(move) | Source} */
      POISON_TAIL = 342,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Covet_(move) | Source} */
      COVET = 343,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Volt_Tackle_(move) | Source} */
      VOLT_TACKLE = 344,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magical_Leaf_(move) | Source} */
      MAGICAL_LEAF = 345,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Water_Sport_(move) | Source} */
      WATER_SPORT = 346,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Calm_Mind_(move) | Source} */
      CALM_MIND = 347,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Leaf_Blade_(move) | Source} */
      LEAF_BLADE = 348,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Dance_(move) | Source} */
      DRAGON_DANCE = 349,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rock_Blast_(move) | Source} */
      ROCK_BLAST = 350,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shock_Wave_(move) | Source} */
      SHOCK_WAVE = 351,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Water_Pulse_(move) | Source} */
      WATER_PULSE = 352,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Doom_Desire_(move) | Source} */
      DOOM_DESIRE = 353,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psycho_Boost_(move) | Source} */
      PSYCHO_BOOST = 354,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Roost_(move) | Source} */
      ROOST = 355,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gravity_(move) | Source} */
      GRAVITY = 356,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Miracle_Eye_(move) | Source} */
      MIRACLE_EYE = 357,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wake_Up_Slap_(move) | Source} */
      WAKE_UP_SLAP = 358,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hammer_Arm_(move) | Source} */
      HAMMER_ARM = 359,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gyro_Ball_(move) | Source} */
      GYRO_BALL = 360,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Healing_Wish_(move) | Source} */
      HEALING_WISH = 361,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Brine_(move) | Source} */
      BRINE = 362,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Natural_Gift_(move) | Source} */
      NATURAL_GIFT = 363,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Feint_(move) | Source} */
      FEINT = 364,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pluck_(move) | Source} */
      PLUCK = 365,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tailwind_(move) | Source} */
      TAILWIND = 366,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Acupressure_(move) | Source} */
      ACUPRESSURE = 367,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Metal_Burst_(move) | Source} */
      METAL_BURST = 368,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/U_Turn_(move) | Source} */
      U_TURN = 369,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Close_Combat_(move) | Source} */
      CLOSE_COMBAT = 370,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Payback_(move) | Source} */
      PAYBACK = 371,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Assurance_(move) | Source} */
      ASSURANCE = 372,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Embargo_(move) | Source} */
      EMBARGO = 373,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fling_(move) | Source} */
      FLING = 374,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psycho_Shift_(move) | Source} */
      PSYCHO_SHIFT = 375,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trump_Card_(move) | Source} */
      TRUMP_CARD = 376,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heal_Block_(move) | Source} */
      HEAL_BLOCK = 377,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wring_Out_(move) | Source} */
      WRING_OUT = 378,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Trick_(move) | Source} */
      POWER_TRICK = 379,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gastro_Acid_(move) | Source} */
      GASTRO_ACID = 380,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lucky_Chant_(move) | Source} */
      LUCKY_CHANT = 381,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Me_First_(move) | Source} */
      ME_FIRST = 382,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Copycat_(move) | Source} */
      COPYCAT = 383,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Swap_(move) | Source} */
      POWER_SWAP = 384,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Guard_Swap_(move) | Source} */
      GUARD_SWAP = 385,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Punishment_(move) | Source} */
      PUNISHMENT = 386,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Last_Resort_(move) | Source} */
      LAST_RESORT = 387,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Worry_Seed_(move) | Source} */
      WORRY_SEED = 388,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sucker_Punch_(move) | Source} */
      SUCKER_PUNCH = 389,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toxic_Spikes_(move) | Source} */
      TOXIC_SPIKES = 390,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heart_Swap_(move) | Source} */
      HEART_SWAP = 391,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aqua_Ring_(move) | Source} */
      AQUA_RING = 392,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magnet_Rise_(move) | Source} */
      MAGNET_RISE = 393,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flare_Blitz_(move) | Source} */
      FLARE_BLITZ = 394,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Force_Palm_(move) | Source} */
      FORCE_PALM = 395,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aura_Sphere_(move) | Source} */
      AURA_SPHERE = 396,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rock_Polish_(move) | Source} */
      ROCK_POLISH = 397,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poison_Jab_(move) | Source} */
      POISON_JAB = 398,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dark_Pulse_(move) | Source} */
      DARK_PULSE = 399,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Night_Slash_(move) | Source} */
      NIGHT_SLASH = 400,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aqua_Tail_(move) | Source} */
      AQUA_TAIL = 401,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Seed_Bomb_(move) | Source} */
      SEED_BOMB = 402,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Air_Slash_(move) | Source} */
      AIR_SLASH = 403,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/X_Scissor_(move) | Source} */
      X_SCISSOR = 404,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bug_Buzz_(move) | Source} */
      BUG_BUZZ = 405,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Pulse_(move) | Source} */
      DRAGON_PULSE = 406,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Rush_(move) | Source} */
      DRAGON_RUSH = 407,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Gem_(move) | Source} */
      POWER_GEM = 408,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drain_Punch_(move) | Source} */
      DRAIN_PUNCH = 409,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vacuum_Wave_(move) | Source} */
      VACUUM_WAVE = 410,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Focus_Blast_(move) | Source} */
      FOCUS_BLAST = 411,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Energy_Ball_(move) | Source} */
      ENERGY_BALL = 412,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Brave_Bird_(move) | Source} */
      BRAVE_BIRD = 413,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Earth_Power_(move) | Source} */
      EARTH_POWER = 414,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Switcheroo_(move) | Source} */
      SWITCHEROO = 415,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Giga_Impact_(move) | Source} */
      GIGA_IMPACT = 416,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nasty_Plot_(move) | Source} */
      NASTY_PLOT = 417,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bullet_Punch_(move) | Source} */
      BULLET_PUNCH = 418,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Avalanche_(move) | Source} */
      AVALANCHE = 419,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Shard_(move) | Source} */
      ICE_SHARD = 420,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shadow_Claw_(move) | Source} */
      SHADOW_CLAW = 421,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thunder_Fang_(move) | Source} */
      THUNDER_FANG = 422,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Fang_(move) | Source} */
      ICE_FANG = 423,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fire_Fang_(move) | Source} */
      FIRE_FANG = 424,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shadow_Sneak_(move) | Source} */
      SHADOW_SNEAK = 425,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mud_Bomb_(move) | Source} */
      MUD_BOMB = 426,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psycho_Cut_(move) | Source} */
      PSYCHO_CUT = 427,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zen_Headbutt_(move) | Source} */
      ZEN_HEADBUTT = 428,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mirror_Shot_(move) | Source} */
      MIRROR_SHOT = 429,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flash_Cannon_(move) | Source} */
      FLASH_CANNON = 430,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rock_Climb_(move) | Source} */
      ROCK_CLIMB = 431,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Defog_(move) | Source} */
      DEFOG = 432,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trick_Room_(move) | Source} */
      TRICK_ROOM = 433,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Draco_Meteor_(move) | Source} */
      DRACO_METEOR = 434,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Discharge_(move) | Source} */
      DISCHARGE = 435,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lava_Plume_(move) | Source} */
      LAVA_PLUME = 436,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Leaf_Storm_(move) | Source} */
      LEAF_STORM = 437,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Whip_(move) | Source} */
      POWER_WHIP = 438,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rock_Wrecker_(move) | Source} */
      ROCK_WRECKER = 439,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cross_Poison_(move) | Source} */
      CROSS_POISON = 440,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gunk_Shot_(move) | Source} */
      GUNK_SHOT = 441,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Head_(move) | Source} */
      IRON_HEAD = 442,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magnet_Bomb_(move) | Source} */
      MAGNET_BOMB = 443,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stone_Edge_(move) | Source} */
      STONE_EDGE = 444,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Captivate_(move) | Source} */
      CAPTIVATE = 445,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stealth_Rock_(move) | Source} */
      STEALTH_ROCK = 446,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grass_Knot_(move) | Source} */
      GRASS_KNOT = 447,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chatter_(move) | Source} */
      CHATTER = 448,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Judgment_(move) | Source} */
      JUDGMENT = 449,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bug_Bite_(move) | Source} */
      BUG_BITE = 450,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Charge_Beam_(move) | Source} */
      CHARGE_BEAM = 451,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wood_Hammer_(move) | Source} */
      WOOD_HAMMER = 452,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aqua_Jet_(move) | Source} */
      AQUA_JET = 453,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Attack_Order_(move) | Source} */
      ATTACK_ORDER = 454,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Defend_Order_(move) | Source} */
      DEFEND_ORDER = 455,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heal_Order_(move) | Source} */
      HEAL_ORDER = 456,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Head_Smash_(move) | Source} */
      HEAD_SMASH = 457,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Double_Hit_(move) | Source} */
      DOUBLE_HIT = 458,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Roar_Of_Time_(move) | Source} */
      ROAR_OF_TIME = 459,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spacial_Rend_(move) | Source} */
      SPACIAL_REND = 460,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lunar_Dance_(move) | Source} */
      LUNAR_DANCE = 461,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crush_Grip_(move) | Source} */
      CRUSH_GRIP = 462,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magma_Storm_(move) | Source} */
      MAGMA_STORM = 463,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dark_Void_(move) | Source} */
      DARK_VOID = 464,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Seed_Flare_(move) | Source} */
      SEED_FLARE = 465,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ominous_Wind_(move) | Source} */
      OMINOUS_WIND = 466,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shadow_Force_(move) | Source} */
      SHADOW_FORCE = 467,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hone_Claws_(move) | Source} */
      HONE_CLAWS = 468,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wide_Guard_(move) | Source} */
      WIDE_GUARD = 469,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Guard_Split_(move) | Source} */
      GUARD_SPLIT = 470,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Split_(move) | Source} */
      POWER_SPLIT = 471,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wonder_Room_(move) | Source} */
      WONDER_ROOM = 472,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psyshock_(move) | Source} */
      PSYSHOCK = 473,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Venoshock_(move) | Source} */
      VENOSHOCK = 474,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Autotomize_(move) | Source} */
      AUTOTOMIZE = 475,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rage_Powder_(move) | Source} */
      RAGE_POWDER = 476,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Telekinesis_(move) | Source} */
      TELEKINESIS = 477,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magic_Room_(move) | Source} */
      MAGIC_ROOM = 478,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Smack_Down_(move) | Source} */
      SMACK_DOWN = 479,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Storm_Throw_(move) | Source} */
      STORM_THROW = 480,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flame_Burst_(move) | Source} */
      FLAME_BURST = 481,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sludge_Wave_(move) | Source} */
      SLUDGE_WAVE = 482,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quiver_Dance_(move) | Source} */
      QUIVER_DANCE = 483,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heavy_Slam_(move) | Source} */
      HEAVY_SLAM = 484,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Synchronoise_(move) | Source} */
      SYNCHRONOISE = 485,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electro_Ball_(move) | Source} */
      ELECTRO_BALL = 486,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Soak_(move) | Source} */
      SOAK = 487,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flame_Charge_(move) | Source} */
      FLAME_CHARGE = 488,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Coil_(move) | Source} */
      COIL = 489,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Low_Sweep_(move) | Source} */
      LOW_SWEEP = 490,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Acid_Spray_(move) | Source} */
      ACID_SPRAY = 491,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Foul_Play_(move) | Source} */
      FOUL_PLAY = 492,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Simple_Beam_(move) | Source} */
      SIMPLE_BEAM = 493,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Entrainment_(move) | Source} */
      ENTRAINMENT = 494,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/After_You_(move) | Source} */
      AFTER_YOU = 495,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Round_(move) | Source} */
      ROUND = 496,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Echoed_Voice_(move) | Source} */
      ECHOED_VOICE = 497,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chip_Away_(move) | Source} */
      CHIP_AWAY = 498,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clear_Smog_(move) | Source} */
      CLEAR_SMOG = 499,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stored_Power_(move) | Source} */
      STORED_POWER = 500,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quick_Guard_(move) | Source} */
      QUICK_GUARD = 501,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ally_Switch_(move) | Source} */
      ALLY_SWITCH = 502,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scald_(move) | Source} */
      SCALD = 503,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shell_Smash_(move) | Source} */
      SHELL_SMASH = 504,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heal_Pulse_(move) | Source} */
      HEAL_PULSE = 505,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hex_(move) | Source} */
      HEX = 506,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sky_Drop_(move) | Source} */
      SKY_DROP = 507,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shift_Gear_(move) | Source} */
      SHIFT_GEAR = 508,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Circle_Throw_(move) | Source} */
      CIRCLE_THROW = 509,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Incinerate_(move) | Source} */
      INCINERATE = 510,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quash_(move) | Source} */
      QUASH = 511,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Acrobatics_(move) | Source} */
      ACROBATICS = 512,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Reflect_Type_(move) | Source} */
      REFLECT_TYPE = 513,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Retaliate_(move) | Source} */
      RETALIATE = 514,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Final_Gambit_(move) | Source} */
      FINAL_GAMBIT = 515,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bestow_(move) | Source} */
      BESTOW = 516,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Inferno_(move) | Source} */
      INFERNO = 517,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Water_Pledge_(move) | Source} */
      WATER_PLEDGE = 518,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fire_Pledge_(move) | Source} */
      FIRE_PLEDGE = 519,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grass_Pledge_(move) | Source} */
      GRASS_PLEDGE = 520,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Volt_Switch_(move) | Source} */
      VOLT_SWITCH = 521,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Struggle_Bug_(move) | Source} */
      STRUGGLE_BUG = 522,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bulldoze_(move) | Source} */
      BULLDOZE = 523,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Frost_Breath_(move) | Source} */
      FROST_BREATH = 524,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Tail_(move) | Source} */
      DRAGON_TAIL = 525,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Work_Up_(move) | Source} */
      WORK_UP = 526,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electroweb_(move) | Source} */
      ELECTROWEB = 527,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wild_Charge_(move) | Source} */
      WILD_CHARGE = 528,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drill_Run_(move) | Source} */
      DRILL_RUN = 529,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dual_Chop_(move) | Source} */
      DUAL_CHOP = 530,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heart_Stamp_(move) | Source} */
      HEART_STAMP = 531,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Horn_Leech_(move) | Source} */
      HORN_LEECH = 532,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sacred_Sword_(move) | Source} */
      SACRED_SWORD = 533,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Razor_Shell_(move) | Source} */
      RAZOR_SHELL = 534,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heat_Crash_(move) | Source} */
      HEAT_CRASH = 535,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Leaf_Tornado_(move) | Source} */
      LEAF_TORNADO = 536,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steamroller_(move) | Source} */
      STEAMROLLER = 537,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cotton_Guard_(move) | Source} */
      COTTON_GUARD = 538,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Night_Daze_(move) | Source} */
      NIGHT_DAZE = 539,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psystrike_(move) | Source} */
      PSYSTRIKE = 540,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tail_Slap_(move) | Source} */
      TAIL_SLAP = 541,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hurricane_(move) | Source} */
      HURRICANE = 542,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Head_Charge_(move) | Source} */
      HEAD_CHARGE = 543,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gear_Grind_(move) | Source} */
      GEAR_GRIND = 544,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Searing_Shot_(move) | Source} */
      SEARING_SHOT = 545,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Techno_Blast_(move) | Source} */
      TECHNO_BLAST = 546,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Relic_Song_(move) | Source} */
      RELIC_SONG = 547,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Secret_Sword_(move) | Source} */
      SECRET_SWORD = 548,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glaciate_(move) | Source} */
      GLACIATE = 549,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bolt_Strike_(move) | Source} */
      BOLT_STRIKE = 550,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blue_Flare_(move) | Source} */
      BLUE_FLARE = 551,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fiery_Dance_(move) | Source} */
      FIERY_DANCE = 552,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Freeze_Shock_(move) | Source} */
      FREEZE_SHOCK = 553,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Burn_(move) | Source} */
      ICE_BURN = 554,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snarl_(move) | Source} */
      SNARL = 555,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Icicle_Crash_(move) | Source} */
      ICICLE_CRASH = 556,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/V_Create_(move) | Source} */
      V_CREATE = 557,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fusion_Flare_(move) | Source} */
      FUSION_FLARE = 558,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fusion_Bolt_(move) | Source} */
      FUSION_BOLT = 559,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flying_Press_(move) | Source} */
      FLYING_PRESS = 560,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mat_Block_(move) | Source} */
      MAT_BLOCK = 561,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Belch_(move) | Source} */
      BELCH = 562,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rototiller_(move) | Source} */
      ROTOTILLER = 563,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sticky_Web_(move) | Source} */
      STICKY_WEB = 564,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fell_Stinger_(move) | Source} */
      FELL_STINGER = 565,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Phantom_Force_(move) | Source} */
      PHANTOM_FORCE = 566,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trick_Or_Treat_(move) | Source} */
      TRICK_OR_TREAT = 567,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Noble_Roar_(move) | Source} */
      NOBLE_ROAR = 568,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ion_Deluge_(move) | Source} */
      ION_DELUGE = 569,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Parabolic_Charge_(move) | Source} */
      PARABOLIC_CHARGE = 570,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Forests_Curse_(move) | Source} */
      FORESTS_CURSE = 571,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Petal_Blizzard_(move) | Source} */
      PETAL_BLIZZARD = 572,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Freeze_Dry_(move) | Source} */
      FREEZE_DRY = 573,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Disarming_Voice_(move) | Source} */
      DISARMING_VOICE = 574,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Parting_Shot_(move) | Source} */
      PARTING_SHOT = 575,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Topsy_Turvy_(move) | Source} */
      TOPSY_TURVY = 576,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Draining_Kiss_(move) | Source} */
      DRAINING_KISS = 577,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crafty_Shield_(move) | Source} */
      CRAFTY_SHIELD = 578,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flower_Shield_(move) | Source} */
      FLOWER_SHIELD = 579,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grassy_Terrain_(move) | Source} */
      GRASSY_TERRAIN = 580,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Misty_Terrain_(move) | Source} */
      MISTY_TERRAIN = 581,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electrify_(move) | Source} */
      ELECTRIFY = 582,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Play_Rough_(move) | Source} */
      PLAY_ROUGH = 583,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fairy_Wind_(move) | Source} */
      FAIRY_WIND = 584,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Moonblast_(move) | Source} */
      MOONBLAST = 585,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Boomburst_(move) | Source} */
      BOOMBURST = 586,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fairy_Lock_(move) | Source} */
      FAIRY_LOCK = 587,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kings_Shield_(move) | Source} */
      KINGS_SHIELD = 588,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Play_Nice_(move) | Source} */
      PLAY_NICE = 589,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Confide_(move) | Source} */
      CONFIDE = 590,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Diamond_Storm_(move) | Source} */
      DIAMOND_STORM = 591,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steam_Eruption_(move) | Source} */
      STEAM_ERUPTION = 592,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hyperspace_Hole_(move) | Source} */
      HYPERSPACE_HOLE = 593,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Water_Shuriken_(move) | Source} */
      WATER_SHURIKEN = 594,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mystical_Fire_(move) | Source} */
      MYSTICAL_FIRE = 595,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spiky_Shield_(move) | Source} */
      SPIKY_SHIELD = 596,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aromatic_Mist_(move) | Source} */
      AROMATIC_MIST = 597,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Eerie_Impulse_(move) | Source} */
      EERIE_IMPULSE = 598,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Venom_Drench_(move) | Source} */
      VENOM_DRENCH = 599,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Powder_(move) | Source} */
      POWDER = 600,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Geomancy_(move) | Source} */
      GEOMANCY = 601,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magnetic_Flux_(move) | Source} */
      MAGNETIC_FLUX = 602,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Happy_Hour_(move) | Source} */
      HAPPY_HOUR = 603,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electric_Terrain_(move) | Source} */
      ELECTRIC_TERRAIN = 604,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dazzling_Gleam_(move) | Source} */
      DAZZLING_GLEAM = 605,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Celebrate_(move) | Source} */
      CELEBRATE = 606,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hold_Hands_(move) | Source} */
      HOLD_HANDS = 607,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Baby_Doll_Eyes_(move) | Source} */
      BABY_DOLL_EYES = 608,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nuzzle_(move) | Source} */
      NUZZLE = 609,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hold_Back_(move) | Source} */
      HOLD_BACK = 610,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Infestation_(move) | Source} */
      INFESTATION = 611,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Up_Punch_(move) | Source} */
      POWER_UP_PUNCH = 612,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Oblivion_Wing_(move) | Source} */
      OBLIVION_WING = 613,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thousand_Arrows_(move) | Source} */
      THOUSAND_ARROWS = 614,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thousand_Waves_(move) | Source} */
      THOUSAND_WAVES = 615,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lands_Wrath_(move) | Source} */
      LANDS_WRATH = 616,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Light_Of_Ruin_(move) | Source} */
      LIGHT_OF_RUIN = 617,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Origin_Pulse_(move) | Source} */
      ORIGIN_PULSE = 618,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Precipice_Blades_(move) | Source} */
      PRECIPICE_BLADES = 619,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Ascent_(move) | Source} */
      DRAGON_ASCENT = 620,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hyperspace_Fury_(move) | Source} */
      HYPERSPACE_FURY = 621,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Breakneck_Blitz__Physical_(move) | Source} */
      BREAKNECK_BLITZ__PHYSICAL = 622,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Breakneck_Blitz__Special_(move) | Source} */
      BREAKNECK_BLITZ__SPECIAL = 623,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/All_Out_Pummeling__Physical_(move) | Source} */
      ALL_OUT_PUMMELING__PHYSICAL = 624,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/All_Out_Pummeling__Special_(move) | Source} */
      ALL_OUT_PUMMELING__SPECIAL = 625,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Supersonic_Skystrike__Physical_(move) | Source} */
      SUPERSONIC_SKYSTRIKE__PHYSICAL = 626,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Supersonic_Skystrike__Special_(move) | Source} */
      SUPERSONIC_SKYSTRIKE__SPECIAL = 627,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Acid_Downpour__Physical_(move) | Source} */
      ACID_DOWNPOUR__PHYSICAL = 628,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Acid_Downpour__Special_(move) | Source} */
      ACID_DOWNPOUR__SPECIAL = 629,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tectonic_Rage__Physical_(move) | Source} */
      TECTONIC_RAGE__PHYSICAL = 630,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tectonic_Rage__Special_(move) | Source} */
      TECTONIC_RAGE__SPECIAL = 631,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Continental_Crush__Physical_(move) | Source} */
      CONTINENTAL_CRUSH__PHYSICAL = 632,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Continental_Crush__Special_(move) | Source} */
      CONTINENTAL_CRUSH__SPECIAL = 633,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Savage_Spin_Out__Physical_(move) | Source} */
      SAVAGE_SPIN_OUT__PHYSICAL = 634,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Savage_Spin_Out__Special_(move) | Source} */
      SAVAGE_SPIN_OUT__SPECIAL = 635,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Never_Ending_Nightmare__Physical_(move) | Source} */
      NEVER_ENDING_NIGHTMARE__PHYSICAL = 636,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Never_Ending_Nightmare__Special_(move) | Source} */
      NEVER_ENDING_NIGHTMARE__SPECIAL = 637,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Corkscrew_Crash__Physical_(move) | Source} */
      CORKSCREW_CRASH__PHYSICAL = 638,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Corkscrew_Crash__Special_(move) | Source} */
      CORKSCREW_CRASH__SPECIAL = 639,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Inferno_Overdrive__Physical_(move) | Source} */
      INFERNO_OVERDRIVE__PHYSICAL = 640,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Inferno_Overdrive__Special_(move) | Source} */
      INFERNO_OVERDRIVE__SPECIAL = 641,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hydro_Vortex__Physical_(move) | Source} */
      HYDRO_VORTEX__PHYSICAL = 642,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hydro_Vortex__Special_(move) | Source} */
      HYDRO_VORTEX__SPECIAL = 643,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bloom_Doom__Physical_(move) | Source} */
      BLOOM_DOOM__PHYSICAL = 644,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bloom_Doom__Special_(move) | Source} */
      BLOOM_DOOM__SPECIAL = 645,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gigavolt_Havoc__Physical_(move) | Source} */
      GIGAVOLT_HAVOC__PHYSICAL = 646,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gigavolt_Havoc__Special_(move) | Source} */
      GIGAVOLT_HAVOC__SPECIAL = 647,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shattered_Psyche__Physical_(move) | Source} */
      SHATTERED_PSYCHE__PHYSICAL = 648,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shattered_Psyche__Special_(move) | Source} */
      SHATTERED_PSYCHE__SPECIAL = 649,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Subzero_Slammer__Physical_(move) | Source} */
      SUBZERO_SLAMMER__PHYSICAL = 650,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Subzero_Slammer__Special_(move) | Source} */
      SUBZERO_SLAMMER__SPECIAL = 651,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Devastating_Drake__Physical_(move) | Source} */
      DEVASTATING_DRAKE__PHYSICAL = 652,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Devastating_Drake__Special_(move) | Source} */
      DEVASTATING_DRAKE__SPECIAL = 653,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Black_Hole_Eclipse__Physical_(move) | Source} */
      BLACK_HOLE_ECLIPSE__PHYSICAL = 654,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Black_Hole_Eclipse__Special_(move) | Source} */
      BLACK_HOLE_ECLIPSE__SPECIAL = 655,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Twinkle_Tackle__Physical_(move) | Source} */
      TWINKLE_TACKLE__PHYSICAL = 656,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Twinkle_Tackle__Special_(move) | Source} */
      TWINKLE_TACKLE__SPECIAL = 657,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Catastropika_(move) | Source} */
      CATASTROPIKA = 658,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shore_Up_(move) | Source} */
      SHORE_UP = 659,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/First_Impression_(move) | Source} */
      FIRST_IMPRESSION = 660,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Baneful_Bunker_(move) | Source} */
      BANEFUL_BUNKER = 661,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spirit_Shackle_(move) | Source} */
      SPIRIT_SHACKLE = 662,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Darkest_Lariat_(move) | Source} */
      DARKEST_LARIAT = 663,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sparkling_Aria_(move) | Source} */
      SPARKLING_ARIA = 664,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Hammer_(move) | Source} */
      ICE_HAMMER = 665,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Floral_Healing_(move) | Source} */
      FLORAL_HEALING = 666,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/High_Horsepower_(move) | Source} */
      HIGH_HORSEPOWER = 667,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Strength_Sap_(move) | Source} */
      STRENGTH_SAP = 668,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Solar_Blade_(move) | Source} */
      SOLAR_BLADE = 669,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Leafage_(move) | Source} */
      LEAFAGE = 670,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spotlight_(move) | Source} */
      SPOTLIGHT = 671,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toxic_Thread_(move) | Source} */
      TOXIC_THREAD = 672,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Laser_Focus_(move) | Source} */
      LASER_FOCUS = 673,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gear_Up_(move) | Source} */
      GEAR_UP = 674,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Throat_Chop_(move) | Source} */
      THROAT_CHOP = 675,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pollen_Puff_(move) | Source} */
      POLLEN_PUFF = 676,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Anchor_Shot_(move) | Source} */
      ANCHOR_SHOT = 677,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psychic_Terrain_(move) | Source} */
      PSYCHIC_TERRAIN = 678,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lunge_(move) | Source} */
      LUNGE = 679,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fire_Lash_(move) | Source} */
      FIRE_LASH = 680,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Trip_(move) | Source} */
      POWER_TRIP = 681,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Burn_Up_(move) | Source} */
      BURN_UP = 682,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Speed_Swap_(move) | Source} */
      SPEED_SWAP = 683,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Smart_Strike_(move) | Source} */
      SMART_STRIKE = 684,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Purify_(move) | Source} */
      PURIFY = 685,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Revelation_Dance_(move) | Source} */
      REVELATION_DANCE = 686,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Core_Enforcer_(move) | Source} */
      CORE_ENFORCER = 687,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trop_Kick_(move) | Source} */
      TROP_KICK = 688,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Instruct_(move) | Source} */
      INSTRUCT = 689,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Beak_Blast_(move) | Source} */
      BEAK_BLAST = 690,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clanging_Scales_(move) | Source} */
      CLANGING_SCALES = 691,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Hammer_(move) | Source} */
      DRAGON_HAMMER = 692,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Brutal_Swing_(move) | Source} */
      BRUTAL_SWING = 693,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aurora_Veil_(move) | Source} */
      AURORA_VEIL = 694,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sinister_Arrow_Raid_(move) | Source} */
      SINISTER_ARROW_RAID = 695,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Malicious_Moonsault_(move) | Source} */
      MALICIOUS_MOONSAULT = 696,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Oceanic_Operetta_(move) | Source} */
      OCEANIC_OPERETTA = 697,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Guardian_Of_Alola_(move) | Source} */
      GUARDIAN_OF_ALOLA = 698,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Soul_Stealing_7_Star_Strike_(move) | Source} */
      SOUL_STEALING_7_STAR_STRIKE = 699,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stoked_Sparksurfer_(move) | Source} */
      STOKED_SPARKSURFER = 700,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pulverizing_Pancake_(move) | Source} */
      PULVERIZING_PANCAKE = 701,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Extreme_Evoboost_(move) | Source} */
      EXTREME_EVOBOOST = 702,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Genesis_Supernova_(move) | Source} */
      GENESIS_SUPERNOVA = 703,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shell_Trap_(move) | Source} */
      SHELL_TRAP = 704,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fleur_Cannon_(move) | Source} */
      FLEUR_CANNON = 705,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psychic_Fangs_(move) | Source} */
      PSYCHIC_FANGS = 706,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stomping_Tantrum_(move) | Source} */
      STOMPING_TANTRUM = 707,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shadow_Bone_(move) | Source} */
      SHADOW_BONE = 708,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Accelerock_(move) | Source} */
      ACCELEROCK = 709,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Liquidation_(move) | Source} */
      LIQUIDATION = 710,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Prismatic_Laser_(move) | Source} */
      PRISMATIC_LASER = 711,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spectral_Thief_(move) | Source} */
      SPECTRAL_THIEF = 712,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sunsteel_Strike_(move) | Source} */
      SUNSTEEL_STRIKE = 713,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Moongeist_Beam_(move) | Source} */
      MOONGEIST_BEAM = 714,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tearful_Look_(move) | Source} */
      TEARFUL_LOOK = 715,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zing_Zap_(move) | Source} */
      ZING_ZAP = 716,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Natures_Madness_(move) | Source} */
      NATURES_MADNESS = 717,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Multi_Attack_(move) | Source} */
      MULTI_ATTACK = 718,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ten_Million_Volt_Thunderbolt_(move) | Source} */
      TEN_MILLION_VOLT_THUNDERBOLT = 719,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mind_Blown_(move) | Source} */
      MIND_BLOWN = 720,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Plasma_Fists_(move) | Source} */
      PLASMA_FISTS = 721,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Photon_Geyser_(move) | Source} */
      PHOTON_GEYSER = 722,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Light_That_Burns_The_Sky_(move) | Source} */
      LIGHT_THAT_BURNS_THE_SKY = 723,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Searing_Sunraze_Smash_(move) | Source} */
      SEARING_SUNRAZE_SMASH = 724,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Menacing_Moonraze_Maelstrom_(move) | Source} */
      MENACING_MOONRAZE_MAELSTROM = 725,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lets_Snuggle_Forever_(move) | Source} */
      LETS_SNUGGLE_FOREVER = 726,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Splintered_Stormshards_(move) | Source} */
      SPLINTERED_STORMSHARDS = 727,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clangorous_Soulblaze_(move) | Source} */
      CLANGOROUS_SOULBLAZE = 728,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zippy_Zap_(move) | Source} */
      ZIPPY_ZAP = 729,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Splishy_Splash_(move) | Source} */
      SPLISHY_SPLASH = 730,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Floaty_Fall_(move) | Source} */
      FLOATY_FALL = 731,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pika_Papow_(move) | Source} */
      PIKA_PAPOW = 732,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bouncy_Bubble_(move) | Source} */
      BOUNCY_BUBBLE = 733,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Buzzy_Buzz_(move) | Source} */
      BUZZY_BUZZ = 734,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sizzly_Slide_(move) | Source} */
      SIZZLY_SLIDE = 735,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glitzy_Glow_(move) | Source} */
      GLITZY_GLOW = 736,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Baddy_Bad_(move) | Source} */
      BADDY_BAD = 737,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sappy_Seed_(move) | Source} */
      SAPPY_SEED = 738,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Freezy_Frost_(move) | Source} */
      FREEZY_FROST = 739,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sparkly_Swirl_(move) | Source} */
      SPARKLY_SWIRL = 740,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Veevee_Volley_(move) | Source} */
      VEEVEE_VOLLEY = 741,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Double_Iron_Bash_(move) | Source} */
      DOUBLE_IRON_BASH = 742,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Guard_(move) | Source} */
      MAX_GUARD = 743,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dynamax_Cannon_(move) | Source} */
      DYNAMAX_CANNON = 744,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snipe_Shot_(move) | Source} */
      SNIPE_SHOT = 745,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jaw_Lock_(move) | Source} */
      JAW_LOCK = 746,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stuff_Cheeks_(move) | Source} */
      STUFF_CHEEKS = 747,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/No_Retreat_(move) | Source} */
      NO_RETREAT = 748,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tar_Shot_(move) | Source} */
      TAR_SHOT = 749,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magic_Powder_(move) | Source} */
      MAGIC_POWDER = 750,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Darts_(move) | Source} */
      DRAGON_DARTS = 751,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Teatime_(move) | Source} */
      TEATIME = 752,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Octolock_(move) | Source} */
      OCTOLOCK = 753,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bolt_Beak_(move) | Source} */
      BOLT_BEAK = 754,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fishious_Rend_(move) | Source} */
      FISHIOUS_REND = 755,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Court_Change_(move) | Source} */
      COURT_CHANGE = 756,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Flare_(move) | Source} */
      MAX_FLARE = 757,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Flutterby_(move) | Source} */
      MAX_FLUTTERBY = 758,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Lightning_(move) | Source} */
      MAX_LIGHTNING = 759,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Strike_(move) | Source} */
      MAX_STRIKE = 760,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Knuckle_(move) | Source} */
      MAX_KNUCKLE = 761,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Phantasm_(move) | Source} */
      MAX_PHANTASM = 762,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Hailstorm_(move) | Source} */
      MAX_HAILSTORM = 763,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Ooze_(move) | Source} */
      MAX_OOZE = 764,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Geyser_(move) | Source} */
      MAX_GEYSER = 765,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Airstream_(move) | Source} */
      MAX_AIRSTREAM = 766,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Starfall_(move) | Source} */
      MAX_STARFALL = 767,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Wyrmwind_(move) | Source} */
      MAX_WYRMWIND = 768,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Mindstorm_(move) | Source} */
      MAX_MINDSTORM = 769,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Rockfall_(move) | Source} */
      MAX_ROCKFALL = 770,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Quake_(move) | Source} */
      MAX_QUAKE = 771,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Darkness_(move) | Source} */
      MAX_DARKNESS = 772,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Overgrowth_(move) | Source} */
      MAX_OVERGROWTH = 773,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Max_Steelspike_(move) | Source} */
      MAX_STEELSPIKE = 774,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clangorous_Soul_(move) | Source} */
      CLANGOROUS_SOUL = 775,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Body_Press_(move) | Source} */
      BODY_PRESS = 776,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Decorate_(move) | Source} */
      DECORATE = 777,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drum_Beating_(move) | Source} */
      DRUM_BEATING = 778,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snap_Trap_(move) | Source} */
      SNAP_TRAP = 779,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pyro_Ball_(move) | Source} */
      PYRO_BALL = 780,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Behemoth_Blade_(move) | Source} */
      BEHEMOTH_BLADE = 781,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Behemoth_Bash_(move) | Source} */
      BEHEMOTH_BASH = 782,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aura_Wheel_(move) | Source} */
      AURA_WHEEL = 783,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Breaking_Swipe_(move) | Source} */
      BREAKING_SWIPE = 784,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Branch_Poke_(move) | Source} */
      BRANCH_POKE = 785,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Overdrive_(move) | Source} */
      OVERDRIVE = 786,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Apple_Acid_(move) | Source} */
      APPLE_ACID = 787,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grav_Apple_(move) | Source} */
      GRAV_APPLE = 788,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spirit_Break_(move) | Source} */
      SPIRIT_BREAK = 789,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Strange_Steam_(move) | Source} */
      STRANGE_STEAM = 790,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Life_Dew_(move) | Source} */
      LIFE_DEW = 791,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Obstruct_(move) | Source} */
      OBSTRUCT = 792,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/False_Surrender_(move) | Source} */
      FALSE_SURRENDER = 793,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meteor_Assault_(move) | Source} */
      METEOR_ASSAULT = 794,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Eternabeam_(move) | Source} */
      ETERNABEAM = 795,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steel_Beam_(move) | Source} */
      STEEL_BEAM = 796,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Expanding_Force_(move) | Source} */
      EXPANDING_FORCE = 797,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steel_Roller_(move) | Source} */
      STEEL_ROLLER = 798,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scale_Shot_(move) | Source} */
      SCALE_SHOT = 799,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meteor_Beam_(move) | Source} */
      METEOR_BEAM = 800,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shell_Side_Arm_(move) | Source} */
      SHELL_SIDE_ARM = 801,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Misty_Explosion_(move) | Source} */
      MISTY_EXPLOSION = 802,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grassy_Glide_(move) | Source} */
      GRASSY_GLIDE = 803,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rising_Voltage_(move) | Source} */
      RISING_VOLTAGE = 804,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Terrain_Pulse_(move) | Source} */
      TERRAIN_PULSE = 805,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skitter_Smack_(move) | Source} */
      SKITTER_SMACK = 806,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Burning_Jealousy_(move) | Source} */
      BURNING_JEALOUSY = 807,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lash_Out_(move) | Source} */
      LASH_OUT = 808,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poltergeist_(move) | Source} */
      POLTERGEIST = 809,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Corrosive_Gas_(move) | Source} */
      CORROSIVE_GAS = 810,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Coaching_(move) | Source} */
      COACHING = 811,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flip_Turn_(move) | Source} */
      FLIP_TURN = 812,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Triple_Axel_(move) | Source} */
      TRIPLE_AXEL = 813,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dual_Wingbeat_(move) | Source} */
      DUAL_WINGBEAT = 814,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scorching_Sands_(move) | Source} */
      SCORCHING_SANDS = 815,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jungle_Healing_(move) | Source} */
      JUNGLE_HEALING = 816,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wicked_Blow_(move) | Source} */
      WICKED_BLOW = 817,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Surging_Strikes_(move) | Source} */
      SURGING_STRIKES = 818,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thunder_Cage_(move) | Source} */
      THUNDER_CAGE = 819,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Energy_(move) | Source} */
      DRAGON_ENERGY = 820,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Freezing_Glare_(move) | Source} */
      FREEZING_GLARE = 821,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fiery_Wrath_(move) | Source} */
      FIERY_WRATH = 822,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thunderous_Kick_(move) | Source} */
      THUNDEROUS_KICK = 823,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glacial_Lance_(move) | Source} */
      GLACIAL_LANCE = 824,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Astral_Barrage_(move) | Source} */
      ASTRAL_BARRAGE = 825,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Eerie_Spell_(move) | Source} */
      EERIE_SPELL = 826,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dire_Claw_(move) | Source} */
      DIRE_CLAW = 827,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psyshield_Bash_(move) | Source} */
      PSYSHIELD_BASH = 828,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Power_Shift_(move) | Source} */
      POWER_SHIFT = 829,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stone_Axe_(move) | Source} */
      STONE_AXE = 830,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Springtide_Storm_(move) | Source} */
      SPRINGTIDE_STORM = 831,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mystical_Power_(move) | Source} */
      MYSTICAL_POWER = 832,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Raging_Fury_(move) | Source} */
      RAGING_FURY = 833,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wave_Crash_(move) | Source} */
      WAVE_CRASH = 834,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chloroblast_(move) | Source} */
      CHLOROBLAST = 835,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mountain_Gale_(move) | Source} */
      MOUNTAIN_GALE = 836,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Victory_Dance_(move) | Source} */
      VICTORY_DANCE = 837,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Headlong_Rush_(move) | Source} */
      HEADLONG_RUSH = 838,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Barb_Barrage_(move) | Source} */
      BARB_BARRAGE = 839,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Esper_Wing_(move) | Source} */
      ESPER_WING = 840,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bitter_Malice_(move) | Source} */
      BITTER_MALICE = 841,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shelter_(move) | Source} */
      SHELTER = 842,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Triple_Arrows_(move) | Source} */
      TRIPLE_ARROWS = 843,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Infernal_Parade_(move) | Source} */
      INFERNAL_PARADE = 844,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ceaseless_Edge_(move) | Source} */
      CEASELESS_EDGE = 845,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bleakwind_Storm_(move) | Source} */
      BLEAKWIND_STORM = 846,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wildbolt_Storm_(move) | Source} */
      WILDBOLT_STORM = 847,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sandsear_Storm_(move) | Source} */
      SANDSEAR_STORM = 848,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lunar_Blessing_(move) | Source} */
      LUNAR_BLESSING = 849,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Take_Heart_(move) | Source} */
      TAKE_HEART = 850,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tera_Blast_(move) | Source} */
      TERA_BLAST = 851,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Silk_Trap_(move) | Source} */
      SILK_TRAP = 852,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Axe_Kick_(move) | Source} */
      AXE_KICK = 853,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Last_Respects_(move) | Source} */
      LAST_RESPECTS = 854,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lumina_Crash_(move) | Source} */
      LUMINA_CRASH = 855,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Order_Up_(move) | Source} */
      ORDER_UP = 856,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jet_Punch_(move) | Source} */
      JET_PUNCH = 857,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spicy_Extract_(move) | Source} */
      SPICY_EXTRACT = 858,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spin_Out_(move) | Source} */
      SPIN_OUT = 859,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Population_Bomb_(move) | Source} */
      POPULATION_BOMB = 860,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ice_Spinner_(move) | Source} */
      ICE_SPINNER = 861,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glaive_Rush_(move) | Source} */
      GLAIVE_RUSH = 862,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Revival_Blessing_(move) | Source} */
      REVIVAL_BLESSING = 863,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Salt_Cure_(move) | Source} */
      SALT_CURE = 864,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Triple_Dive_(move) | Source} */
      TRIPLE_DIVE = 865,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mortal_Spin_(move) | Source} */
      MORTAL_SPIN = 866,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Doodle_(move) | Source} */
      DOODLE = 867,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fillet_Away_(move) | Source} */
      FILLET_AWAY = 868,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kowtow_Cleave_(move) | Source} */
      KOWTOW_CLEAVE = 869,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flower_Trick_(move) | Source} */
      FLOWER_TRICK = 870,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Torch_Song_(move) | Source} */
      TORCH_SONG = 871,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aqua_Step_(move) | Source} */
      AQUA_STEP = 872,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Raging_Bull_(move) | Source} */
      RAGING_BULL = 873,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Make_It_Rain_(move) | Source} */
      MAKE_IT_RAIN = 874,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psyblade_(move) | Source} */
      PSYBLADE = 875,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hydro_Steam_(move) | Source} */
      HYDRO_STEAM = 876,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ruination_(move) | Source} */
      RUINATION = 877,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Collision_Course_(move) | Source} */
      COLLISION_COURSE = 878,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electro_Drift_(move) | Source} */
      ELECTRO_DRIFT = 879,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shed_Tail_(move) | Source} */
      SHED_TAIL = 880,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chilly_Reception_(move) | Source} */
      CHILLY_RECEPTION = 881,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tidy_Up_(move) | Source} */
      TIDY_UP = 882,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snowscape_(move) | Source} */
      SNOWSCAPE = 883,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pounce_(move) | Source} */
      POUNCE = 884,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trailblaze_(move) | Source} */
      TRAILBLAZE = 885,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chilling_Water_(move) | Source} */
      CHILLING_WATER = 886,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hyper_Drill_(move) | Source} */
      HYPER_DRILL = 887,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Twin_Beam_(move) | Source} */
      TWIN_BEAM = 888,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rage_Fist_(move) | Source} */
      RAGE_FIST = 889,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Armor_Cannon_(move) | Source} */
      ARMOR_CANNON = 890,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bitter_Blade_(move) | Source} */
      BITTER_BLADE = 891,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Double_Shock_(move) | Source} */
      DOUBLE_SHOCK = 892,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gigaton_Hammer_(move) | Source} */
      GIGATON_HAMMER = 893,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Comeuppance_(move) | Source} */
      COMEUPPANCE = 894,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aqua_Cutter_(move) | Source} */
      AQUA_CUTTER = 895,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blazing_Torque_(move) | Source} */
      BLAZING_TORQUE = 896,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wicked_Torque_(move) | Source} */
      WICKED_TORQUE = 897,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Noxious_Torque_(move) | Source} */
      NOXIOUS_TORQUE = 898,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Combat_Torque_(move) | Source} */
      COMBAT_TORQUE = 899,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magical_Torque_(move) | Source} */
      MAGICAL_TORQUE = 900,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blood_Moon_(move) | Source} */
      BLOOD_MOON = 901,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Matcha_Gotcha_(move) | Source} */
      MATCHA_GOTCHA = 902,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Syrup_Bomb_(move) | Source} */
      SYRUP_BOMB = 903,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ivy_Cudgel_(move) | Source} */
      IVY_CUDGEL = 904,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electro_Shot_(move) | Source} */
      ELECTRO_SHOT = 905,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tera_Starstorm_(move) | Source} */
      TERA_STARSTORM = 906,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fickle_Beam_(move) | Source} */
      FICKLE_BEAM = 907,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Burning_Bulwark_(move) | Source} */
      BURNING_BULWARK = 908,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thunderclap_(move) | Source} */
      THUNDERCLAP = 909,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mighty_Cleave_(move) | Source} */
      MIGHTY_CLEAVE = 910,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tachyon_Cutter_(move) | Source} */
      TACHYON_CUTTER = 911,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hard_Press_(move) | Source} */
      HARD_PRESS = 912,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragon_Cheer_(move) | Source} */
      DRAGON_CHEER = 913,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Alluring_Voice_(move) | Source} */
      ALLURING_VOICE = 914,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Temper_Flare_(move) | Source} */
      TEMPER_FLARE = 915,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Supercell_Slam_(move) | Source} */
      SUPERCELL_SLAM = 916,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psychic_Noise_(move) | Source} */
      PSYCHIC_NOISE = 917,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Upper_Hand_(move) | Source} */
      UPPER_HAND = 918,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Malignant_Chain_(move) | Source} */
      MALIGNANT_CHAIN = 919
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum Nature {
      HARDY = 0,
      LONELY = 1,
      BRAVE = 2,
      ADAMANT = 3,
      NAUGHTY = 4,
      BOLD = 5,
      DOCILE = 6,
      RELAXED = 7,
      IMPISH = 8,
      LAX = 9,
      TIMID = 10,
      HASTY = 11,
      SERIOUS = 12,
      JOLLY = 13,
      NAIVE = 14,
      MODEST = 15,
      MILD = 16,
      QUIET = 17,
      BASHFUL = 18,
      RASH = 19,
      CALM = 20,
      GENTLE = 21,
      SASSY = 22,
      CAREFUL = 23,
      QUIRKY = 24
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum PartyMemberStrength {
      WEAKEST = 0,
      WEAKER = 1,
      WEAK = 2,
      AVERAGE = 3,
      STRONG = 4,
      STRONGER = 5
  }
  
}

declare namespace PokeRogue.enums {
  /**
   * enum for passive
   */
  export declare enum Passive {
      UNLOCKED = 1,
      ENABLED = 2
  }
  
}

declare namespace PokeRogue.enums {
  /**
   * enum for the players gender
   */
  export declare enum PlayerGender {
      UNSET = 0,
      MALE = 1,
      FEMALE = 2
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum PokeballType {
      POKEBALL = 0,
      GREAT_BALL = 1,
      ULTRA_BALL = 2,
      ROGUE_BALL = 3,
      MASTER_BALL = 4,
      LUXURY_BALL = 5
  }
  
}

declare namespace PokeRogue.enums {
  /**
   * Determines the row cursor target when entering the shop phase.
   */
  export declare enum ShopCursorTarget {
      /** Cursor points to Reroll row */
      REROLL = 0,
      /** Cursor points to Rewards row */
      REWARDS = 1,
      /** Cursor points to Shop row */
      SHOP = 2,
      /** Cursor points to Check Team row */
      CHECK_TEAM = 3
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum Species {
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bulbasaur_(Pokémon) | Source} */
      BULBASAUR = 1,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ivysaur_(Pokémon) | Source} */
      IVYSAUR = 2,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Venusaur_(Pokémon) | Source} */
      VENUSAUR = 3,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Charmander_(Pokémon) | Source} */
      CHARMANDER = 4,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Charmeleon_(Pokémon) | Source} */
      CHARMELEON = 5,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Charizard_(Pokémon) | Source} */
      CHARIZARD = 6,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Squirtle_(Pokémon) | Source} */
      SQUIRTLE = 7,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wartortle_(Pokémon) | Source} */
      WARTORTLE = 8,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blastoise_(Pokémon) | Source} */
      BLASTOISE = 9,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Caterpie_(Pokémon) | Source} */
      CATERPIE = 10,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Metapod_(Pokémon) | Source} */
      METAPOD = 11,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Butterfree_(Pokémon) | Source} */
      BUTTERFREE = 12,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Weedle_(Pokémon) | Source} */
      WEEDLE = 13,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kakuna_(Pokémon) | Source} */
      KAKUNA = 14,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Beedrill_(Pokémon) | Source} */
      BEEDRILL = 15,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pidgey_(Pokémon) | Source} */
      PIDGEY = 16,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pidgeotto_(Pokémon) | Source} */
      PIDGEOTTO = 17,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pidgeot_(Pokémon) | Source} */
      PIDGEOT = 18,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rattata_(Pokémon) | Source} */
      RATTATA = 19,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Raticate_(Pokémon) | Source} */
      RATICATE = 20,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spearow_(Pokémon) | Source} */
      SPEAROW = 21,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fearow_(Pokémon) | Source} */
      FEAROW = 22,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ekans_(Pokémon) | Source} */
      EKANS = 23,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arbok_(Pokémon) | Source} */
      ARBOK = 24,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pikachu_(Pokémon) | Source} */
      PIKACHU = 25,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Raichu_(Pokémon) | Source} */
      RAICHU = 26,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sandshrew_(Pokémon) | Source} */
      SANDSHREW = 27,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sandslash_(Pokémon) | Source} */
      SANDSLASH = 28,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nidoran_F_(Pokémon) | Source} */
      NIDORAN_F = 29,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nidorina_(Pokémon) | Source} */
      NIDORINA = 30,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nidoqueen_(Pokémon) | Source} */
      NIDOQUEEN = 31,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nidoran_M_(Pokémon) | Source} */
      NIDORAN_M = 32,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nidorino_(Pokémon) | Source} */
      NIDORINO = 33,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nidoking_(Pokémon) | Source} */
      NIDOKING = 34,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clefairy_(Pokémon) | Source} */
      CLEFAIRY = 35,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clefable_(Pokémon) | Source} */
      CLEFABLE = 36,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vulpix_(Pokémon) | Source} */
      VULPIX = 37,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ninetales_(Pokémon) | Source} */
      NINETALES = 38,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jigglypuff_(Pokémon) | Source} */
      JIGGLYPUFF = 39,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wigglytuff_(Pokémon) | Source} */
      WIGGLYTUFF = 40,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zubat_(Pokémon) | Source} */
      ZUBAT = 41,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Golbat_(Pokémon) | Source} */
      GOLBAT = 42,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Oddish_(Pokémon) | Source} */
      ODDISH = 43,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gloom_(Pokémon) | Source} */
      GLOOM = 44,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vileplume_(Pokémon) | Source} */
      VILEPLUME = 45,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Paras_(Pokémon) | Source} */
      PARAS = 46,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Parasect_(Pokémon) | Source} */
      PARASECT = 47,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Venonat_(Pokémon) | Source} */
      VENONAT = 48,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Venomoth_(Pokémon) | Source} */
      VENOMOTH = 49,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Diglett_(Pokémon) | Source} */
      DIGLETT = 50,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dugtrio_(Pokémon) | Source} */
      DUGTRIO = 51,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meowth_(Pokémon) | Source} */
      MEOWTH = 52,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Persian_(Pokémon) | Source} */
      PERSIAN = 53,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Psyduck_(Pokémon) | Source} */
      PSYDUCK = 54,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Golduck_(Pokémon) | Source} */
      GOLDUCK = 55,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mankey_(Pokémon) | Source} */
      MANKEY = 56,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Primeape_(Pokémon) | Source} */
      PRIMEAPE = 57,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Growlithe_(Pokémon) | Source} */
      GROWLITHE = 58,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arcanine_(Pokémon) | Source} */
      ARCANINE = 59,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poliwag_(Pokémon) | Source} */
      POLIWAG = 60,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poliwhirl_(Pokémon) | Source} */
      POLIWHIRL = 61,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poliwrath_(Pokémon) | Source} */
      POLIWRATH = 62,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Abra_(Pokémon) | Source} */
      ABRA = 63,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kadabra_(Pokémon) | Source} */
      KADABRA = 64,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Alakazam_(Pokémon) | Source} */
      ALAKAZAM = 65,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Machop_(Pokémon) | Source} */
      MACHOP = 66,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Machoke_(Pokémon) | Source} */
      MACHOKE = 67,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Machamp_(Pokémon) | Source} */
      MACHAMP = 68,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bellsprout_(Pokémon) | Source} */
      BELLSPROUT = 69,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Weepinbell_(Pokémon) | Source} */
      WEEPINBELL = 70,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Victreebel_(Pokémon) | Source} */
      VICTREEBEL = 71,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tentacool_(Pokémon) | Source} */
      TENTACOOL = 72,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tentacruel_(Pokémon) | Source} */
      TENTACRUEL = 73,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Geodude_(Pokémon) | Source} */
      GEODUDE = 74,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Graveler_(Pokémon) | Source} */
      GRAVELER = 75,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Golem_(Pokémon) | Source} */
      GOLEM = 76,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ponyta_(Pokémon) | Source} */
      PONYTA = 77,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rapidash_(Pokémon) | Source} */
      RAPIDASH = 78,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slowpoke_(Pokémon) | Source} */
      SLOWPOKE = 79,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slowbro_(Pokémon) | Source} */
      SLOWBRO = 80,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magnemite_(Pokémon) | Source} */
      MAGNEMITE = 81,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magneton_(Pokémon) | Source} */
      MAGNETON = 82,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Farfetchd_(Pokémon) | Source} */
      FARFETCHD = 83,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Doduo_(Pokémon) | Source} */
      DODUO = 84,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dodrio_(Pokémon) | Source} */
      DODRIO = 85,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Seel_(Pokémon) | Source} */
      SEEL = 86,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dewgong_(Pokémon) | Source} */
      DEWGONG = 87,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grimer_(Pokémon) | Source} */
      GRIMER = 88,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Muk_(Pokémon) | Source} */
      MUK = 89,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shellder_(Pokémon) | Source} */
      SHELLDER = 90,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cloyster_(Pokémon) | Source} */
      CLOYSTER = 91,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gastly_(Pokémon) | Source} */
      GASTLY = 92,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Haunter_(Pokémon) | Source} */
      HAUNTER = 93,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gengar_(Pokémon) | Source} */
      GENGAR = 94,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Onix_(Pokémon) | Source} */
      ONIX = 95,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drowzee_(Pokémon) | Source} */
      DROWZEE = 96,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hypno_(Pokémon) | Source} */
      HYPNO = 97,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Krabby_(Pokémon) | Source} */
      KRABBY = 98,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kingler_(Pokémon) | Source} */
      KINGLER = 99,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Voltorb_(Pokémon) | Source} */
      VOLTORB = 100,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electrode_(Pokémon) | Source} */
      ELECTRODE = 101,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Exeggcute_(Pokémon) | Source} */
      EXEGGCUTE = 102,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Exeggutor_(Pokémon) | Source} */
      EXEGGUTOR = 103,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cubone_(Pokémon) | Source} */
      CUBONE = 104,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Marowak_(Pokémon) | Source} */
      MAROWAK = 105,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hitmonlee_(Pokémon) | Source} */
      HITMONLEE = 106,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hitmonchan_(Pokémon) | Source} */
      HITMONCHAN = 107,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lickitung_(Pokémon) | Source} */
      LICKITUNG = 108,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Koffing_(Pokémon) | Source} */
      KOFFING = 109,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Weezing_(Pokémon) | Source} */
      WEEZING = 110,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rhyhorn_(Pokémon) | Source} */
      RHYHORN = 111,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rhydon_(Pokémon) | Source} */
      RHYDON = 112,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chansey_(Pokémon) | Source} */
      CHANSEY = 113,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tangela_(Pokémon) | Source} */
      TANGELA = 114,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kangaskhan_(Pokémon) | Source} */
      KANGASKHAN = 115,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Horsea_(Pokémon) | Source} */
      HORSEA = 116,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Seadra_(Pokémon) | Source} */
      SEADRA = 117,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Goldeen_(Pokémon) | Source} */
      GOLDEEN = 118,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Seaking_(Pokémon) | Source} */
      SEAKING = 119,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Staryu_(Pokémon) | Source} */
      STARYU = 120,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Starmie_(Pokémon) | Source} */
      STARMIE = 121,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mr_Mime_(Pokémon) | Source} */
      MR_MIME = 122,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scyther_(Pokémon) | Source} */
      SCYTHER = 123,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jynx_(Pokémon) | Source} */
      JYNX = 124,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electabuzz_(Pokémon) | Source} */
      ELECTABUZZ = 125,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magmar_(Pokémon) | Source} */
      MAGMAR = 126,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pinsir_(Pokémon) | Source} */
      PINSIR = 127,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tauros_(Pokémon) | Source} */
      TAUROS = 128,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magikarp_(Pokémon) | Source} */
      MAGIKARP = 129,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gyarados_(Pokémon) | Source} */
      GYARADOS = 130,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lapras_(Pokémon) | Source} */
      LAPRAS = 131,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ditto_(Pokémon) | Source} */
      DITTO = 132,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Eevee_(Pokémon) | Source} */
      EEVEE = 133,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vaporeon_(Pokémon) | Source} */
      VAPOREON = 134,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jolteon_(Pokémon) | Source} */
      JOLTEON = 135,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flareon_(Pokémon) | Source} */
      FLAREON = 136,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Porygon_(Pokémon) | Source} */
      PORYGON = 137,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Omanyte_(Pokémon) | Source} */
      OMANYTE = 138,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Omastar_(Pokémon) | Source} */
      OMASTAR = 139,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kabuto_(Pokémon) | Source} */
      KABUTO = 140,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kabutops_(Pokémon) | Source} */
      KABUTOPS = 141,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aerodactyl_(Pokémon) | Source} */
      AERODACTYL = 142,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snorlax_(Pokémon) | Source} */
      SNORLAX = 143,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Articuno_(Pokémon) | Source} */
      ARTICUNO = 144,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zapdos_(Pokémon) | Source} */
      ZAPDOS = 145,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Moltres_(Pokémon) | Source} */
      MOLTRES = 146,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dratini_(Pokémon) | Source} */
      DRATINI = 147,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragonair_(Pokémon) | Source} */
      DRAGONAIR = 148,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragonite_(Pokémon) | Source} */
      DRAGONITE = 149,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mewtwo_(Pokémon) | Source} */
      MEWTWO = 150,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mew_(Pokémon) | Source} */
      MEW = 151,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chikorita_(Pokémon) | Source} */
      CHIKORITA = 152,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bayleef_(Pokémon) | Source} */
      BAYLEEF = 153,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meganium_(Pokémon) | Source} */
      MEGANIUM = 154,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cyndaquil_(Pokémon) | Source} */
      CYNDAQUIL = 155,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quilava_(Pokémon) | Source} */
      QUILAVA = 156,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Typhlosion_(Pokémon) | Source} */
      TYPHLOSION = 157,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Totodile_(Pokémon) | Source} */
      TOTODILE = 158,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Croconaw_(Pokémon) | Source} */
      CROCONAW = 159,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Feraligatr_(Pokémon) | Source} */
      FERALIGATR = 160,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sentret_(Pokémon) | Source} */
      SENTRET = 161,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Furret_(Pokémon) | Source} */
      FURRET = 162,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hoothoot_(Pokémon) | Source} */
      HOOTHOOT = 163,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Noctowl_(Pokémon) | Source} */
      NOCTOWL = 164,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ledyba_(Pokémon) | Source} */
      LEDYBA = 165,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ledian_(Pokémon) | Source} */
      LEDIAN = 166,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spinarak_(Pokémon) | Source} */
      SPINARAK = 167,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ariados_(Pokémon) | Source} */
      ARIADOS = 168,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crobat_(Pokémon) | Source} */
      CROBAT = 169,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chinchou_(Pokémon) | Source} */
      CHINCHOU = 170,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lanturn_(Pokémon) | Source} */
      LANTURN = 171,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pichu_(Pokémon) | Source} */
      PICHU = 172,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cleffa_(Pokémon) | Source} */
      CLEFFA = 173,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Igglybuff_(Pokémon) | Source} */
      IGGLYBUFF = 174,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Togepi_(Pokémon) | Source} */
      TOGEPI = 175,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Togetic_(Pokémon) | Source} */
      TOGETIC = 176,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Natu_(Pokémon) | Source} */
      NATU = 177,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Xatu_(Pokémon) | Source} */
      XATU = 178,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mareep_(Pokémon) | Source} */
      MAREEP = 179,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flaaffy_(Pokémon) | Source} */
      FLAAFFY = 180,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ampharos_(Pokémon) | Source} */
      AMPHAROS = 181,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bellossom_(Pokémon) | Source} */
      BELLOSSOM = 182,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Marill_(Pokémon) | Source} */
      MARILL = 183,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Azumarill_(Pokémon) | Source} */
      AZUMARILL = 184,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sudowoodo_(Pokémon) | Source} */
      SUDOWOODO = 185,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Politoed_(Pokémon) | Source} */
      POLITOED = 186,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hoppip_(Pokémon) | Source} */
      HOPPIP = 187,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skiploom_(Pokémon) | Source} */
      SKIPLOOM = 188,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jumpluff_(Pokémon) | Source} */
      JUMPLUFF = 189,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aipom_(Pokémon) | Source} */
      AIPOM = 190,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sunkern_(Pokémon) | Source} */
      SUNKERN = 191,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sunflora_(Pokémon) | Source} */
      SUNFLORA = 192,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Yanma_(Pokémon) | Source} */
      YANMA = 193,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wooper_(Pokémon) | Source} */
      WOOPER = 194,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quagsire_(Pokémon) | Source} */
      QUAGSIRE = 195,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Espeon_(Pokémon) | Source} */
      ESPEON = 196,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Umbreon_(Pokémon) | Source} */
      UMBREON = 197,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Murkrow_(Pokémon) | Source} */
      MURKROW = 198,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slowking_(Pokémon) | Source} */
      SLOWKING = 199,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Misdreavus_(Pokémon) | Source} */
      MISDREAVUS = 200,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Unown_(Pokémon) | Source} */
      UNOWN = 201,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wobbuffet_(Pokémon) | Source} */
      WOBBUFFET = 202,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Girafarig_(Pokémon) | Source} */
      GIRAFARIG = 203,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pineco_(Pokémon) | Source} */
      PINECO = 204,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Forretress_(Pokémon) | Source} */
      FORRETRESS = 205,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dunsparce_(Pokémon) | Source} */
      DUNSPARCE = 206,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gligar_(Pokémon) | Source} */
      GLIGAR = 207,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steelix_(Pokémon) | Source} */
      STEELIX = 208,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snubbull_(Pokémon) | Source} */
      SNUBBULL = 209,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Granbull_(Pokémon) | Source} */
      GRANBULL = 210,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Qwilfish_(Pokémon) | Source} */
      QWILFISH = 211,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scizor_(Pokémon) | Source} */
      SCIZOR = 212,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shuckle_(Pokémon) | Source} */
      SHUCKLE = 213,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heracross_(Pokémon) | Source} */
      HERACROSS = 214,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sneasel_(Pokémon) | Source} */
      SNEASEL = 215,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Teddiursa_(Pokémon) | Source} */
      TEDDIURSA = 216,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ursaring_(Pokémon) | Source} */
      URSARING = 217,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slugma_(Pokémon) | Source} */
      SLUGMA = 218,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magcargo_(Pokémon) | Source} */
      MAGCARGO = 219,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swinub_(Pokémon) | Source} */
      SWINUB = 220,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Piloswine_(Pokémon) | Source} */
      PILOSWINE = 221,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Corsola_(Pokémon) | Source} */
      CORSOLA = 222,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Remoraid_(Pokémon) | Source} */
      REMORAID = 223,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Octillery_(Pokémon) | Source} */
      OCTILLERY = 224,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Delibird_(Pokémon) | Source} */
      DELIBIRD = 225,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mantine_(Pokémon) | Source} */
      MANTINE = 226,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skarmory_(Pokémon) | Source} */
      SKARMORY = 227,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Houndour_(Pokémon) | Source} */
      HOUNDOUR = 228,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Houndoom_(Pokémon) | Source} */
      HOUNDOOM = 229,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kingdra_(Pokémon) | Source} */
      KINGDRA = 230,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Phanpy_(Pokémon) | Source} */
      PHANPY = 231,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Donphan_(Pokémon) | Source} */
      DONPHAN = 232,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Porygon2_(Pokémon) | Source} */
      PORYGON2 = 233,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stantler_(Pokémon) | Source} */
      STANTLER = 234,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Smeargle_(Pokémon) | Source} */
      SMEARGLE = 235,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tyrogue_(Pokémon) | Source} */
      TYROGUE = 236,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hitmontop_(Pokémon) | Source} */
      HITMONTOP = 237,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Smoochum_(Pokémon) | Source} */
      SMOOCHUM = 238,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Elekid_(Pokémon) | Source} */
      ELEKID = 239,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magby_(Pokémon) | Source} */
      MAGBY = 240,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Miltank_(Pokémon) | Source} */
      MILTANK = 241,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blissey_(Pokémon) | Source} */
      BLISSEY = 242,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Raikou_(Pokémon) | Source} */
      RAIKOU = 243,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Entei_(Pokémon) | Source} */
      ENTEI = 244,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Suicune_(Pokémon) | Source} */
      SUICUNE = 245,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Larvitar_(Pokémon) | Source} */
      LARVITAR = 246,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pupitar_(Pokémon) | Source} */
      PUPITAR = 247,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tyranitar_(Pokémon) | Source} */
      TYRANITAR = 248,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lugia_(Pokémon) | Source} */
      LUGIA = 249,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ho_Oh_(Pokémon) | Source} */
      HO_OH = 250,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Celebi_(Pokémon) | Source} */
      CELEBI = 251,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Treecko_(Pokémon) | Source} */
      TREECKO = 252,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grovyle_(Pokémon) | Source} */
      GROVYLE = 253,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sceptile_(Pokémon) | Source} */
      SCEPTILE = 254,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Torchic_(Pokémon) | Source} */
      TORCHIC = 255,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Combusken_(Pokémon) | Source} */
      COMBUSKEN = 256,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blaziken_(Pokémon) | Source} */
      BLAZIKEN = 257,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mudkip_(Pokémon) | Source} */
      MUDKIP = 258,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Marshtomp_(Pokémon) | Source} */
      MARSHTOMP = 259,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swampert_(Pokémon) | Source} */
      SWAMPERT = 260,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poochyena_(Pokémon) | Source} */
      POOCHYENA = 261,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mightyena_(Pokémon) | Source} */
      MIGHTYENA = 262,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zigzagoon_(Pokémon) | Source} */
      ZIGZAGOON = 263,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Linoone_(Pokémon) | Source} */
      LINOONE = 264,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wurmple_(Pokémon) | Source} */
      WURMPLE = 265,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Silcoon_(Pokémon) | Source} */
      SILCOON = 266,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Beautifly_(Pokémon) | Source} */
      BEAUTIFLY = 267,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cascoon_(Pokémon) | Source} */
      CASCOON = 268,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dustox_(Pokémon) | Source} */
      DUSTOX = 269,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lotad_(Pokémon) | Source} */
      LOTAD = 270,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lombre_(Pokémon) | Source} */
      LOMBRE = 271,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ludicolo_(Pokémon) | Source} */
      LUDICOLO = 272,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Seedot_(Pokémon) | Source} */
      SEEDOT = 273,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nuzleaf_(Pokémon) | Source} */
      NUZLEAF = 274,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shiftry_(Pokémon) | Source} */
      SHIFTRY = 275,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Taillow_(Pokémon) | Source} */
      TAILLOW = 276,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swellow_(Pokémon) | Source} */
      SWELLOW = 277,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wingull_(Pokémon) | Source} */
      WINGULL = 278,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pelipper_(Pokémon) | Source} */
      PELIPPER = 279,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ralts_(Pokémon) | Source} */
      RALTS = 280,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kirlia_(Pokémon) | Source} */
      KIRLIA = 281,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gardevoir_(Pokémon) | Source} */
      GARDEVOIR = 282,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Surskit_(Pokémon) | Source} */
      SURSKIT = 283,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Masquerain_(Pokémon) | Source} */
      MASQUERAIN = 284,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shroomish_(Pokémon) | Source} */
      SHROOMISH = 285,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Breloom_(Pokémon) | Source} */
      BRELOOM = 286,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slakoth_(Pokémon) | Source} */
      SLAKOTH = 287,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vigoroth_(Pokémon) | Source} */
      VIGOROTH = 288,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slaking_(Pokémon) | Source} */
      SLAKING = 289,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nincada_(Pokémon) | Source} */
      NINCADA = 290,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ninjask_(Pokémon) | Source} */
      NINJASK = 291,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shedinja_(Pokémon) | Source} */
      SHEDINJA = 292,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Whismur_(Pokémon) | Source} */
      WHISMUR = 293,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Loudred_(Pokémon) | Source} */
      LOUDRED = 294,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Exploud_(Pokémon) | Source} */
      EXPLOUD = 295,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Makuhita_(Pokémon) | Source} */
      MAKUHITA = 296,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hariyama_(Pokémon) | Source} */
      HARIYAMA = 297,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Azurill_(Pokémon) | Source} */
      AZURILL = 298,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nosepass_(Pokémon) | Source} */
      NOSEPASS = 299,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skitty_(Pokémon) | Source} */
      SKITTY = 300,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Delcatty_(Pokémon) | Source} */
      DELCATTY = 301,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sableye_(Pokémon) | Source} */
      SABLEYE = 302,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mawile_(Pokémon) | Source} */
      MAWILE = 303,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aron_(Pokémon) | Source} */
      ARON = 304,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lairon_(Pokémon) | Source} */
      LAIRON = 305,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aggron_(Pokémon) | Source} */
      AGGRON = 306,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meditite_(Pokémon) | Source} */
      MEDITITE = 307,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Medicham_(Pokémon) | Source} */
      MEDICHAM = 308,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electrike_(Pokémon) | Source} */
      ELECTRIKE = 309,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Manectric_(Pokémon) | Source} */
      MANECTRIC = 310,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Plusle_(Pokémon) | Source} */
      PLUSLE = 311,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Minun_(Pokémon) | Source} */
      MINUN = 312,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Volbeat_(Pokémon) | Source} */
      VOLBEAT = 313,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Illumise_(Pokémon) | Source} */
      ILLUMISE = 314,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Roselia_(Pokémon) | Source} */
      ROSELIA = 315,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gulpin_(Pokémon) | Source} */
      GULPIN = 316,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swalot_(Pokémon) | Source} */
      SWALOT = 317,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Carvanha_(Pokémon) | Source} */
      CARVANHA = 318,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sharpedo_(Pokémon) | Source} */
      SHARPEDO = 319,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wailmer_(Pokémon) | Source} */
      WAILMER = 320,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wailord_(Pokémon) | Source} */
      WAILORD = 321,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Numel_(Pokémon) | Source} */
      NUMEL = 322,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Camerupt_(Pokémon) | Source} */
      CAMERUPT = 323,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Torkoal_(Pokémon) | Source} */
      TORKOAL = 324,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spoink_(Pokémon) | Source} */
      SPOINK = 325,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grumpig_(Pokémon) | Source} */
      GRUMPIG = 326,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spinda_(Pokémon) | Source} */
      SPINDA = 327,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trapinch_(Pokémon) | Source} */
      TRAPINCH = 328,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vibrava_(Pokémon) | Source} */
      VIBRAVA = 329,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flygon_(Pokémon) | Source} */
      FLYGON = 330,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cacnea_(Pokémon) | Source} */
      CACNEA = 331,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cacturne_(Pokémon) | Source} */
      CACTURNE = 332,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swablu_(Pokémon) | Source} */
      SWABLU = 333,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Altaria_(Pokémon) | Source} */
      ALTARIA = 334,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zangoose_(Pokémon) | Source} */
      ZANGOOSE = 335,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Seviper_(Pokémon) | Source} */
      SEVIPER = 336,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lunatone_(Pokémon) | Source} */
      LUNATONE = 337,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Solrock_(Pokémon) | Source} */
      SOLROCK = 338,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Barboach_(Pokémon) | Source} */
      BARBOACH = 339,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Whiscash_(Pokémon) | Source} */
      WHISCASH = 340,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Corphish_(Pokémon) | Source} */
      CORPHISH = 341,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crawdaunt_(Pokémon) | Source} */
      CRAWDAUNT = 342,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Baltoy_(Pokémon) | Source} */
      BALTOY = 343,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Claydol_(Pokémon) | Source} */
      CLAYDOL = 344,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lileep_(Pokémon) | Source} */
      LILEEP = 345,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cradily_(Pokémon) | Source} */
      CRADILY = 346,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Anorith_(Pokémon) | Source} */
      ANORITH = 347,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Armaldo_(Pokémon) | Source} */
      ARMALDO = 348,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Feebas_(Pokémon) | Source} */
      FEEBAS = 349,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Milotic_(Pokémon) | Source} */
      MILOTIC = 350,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Castform_(Pokémon) | Source} */
      CASTFORM = 351,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kecleon_(Pokémon) | Source} */
      KECLEON = 352,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shuppet_(Pokémon) | Source} */
      SHUPPET = 353,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Banette_(Pokémon) | Source} */
      BANETTE = 354,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Duskull_(Pokémon) | Source} */
      DUSKULL = 355,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dusclops_(Pokémon) | Source} */
      DUSCLOPS = 356,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tropius_(Pokémon) | Source} */
      TROPIUS = 357,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chimecho_(Pokémon) | Source} */
      CHIMECHO = 358,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Absol_(Pokémon) | Source} */
      ABSOL = 359,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wynaut_(Pokémon) | Source} */
      WYNAUT = 360,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snorunt_(Pokémon) | Source} */
      SNORUNT = 361,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glalie_(Pokémon) | Source} */
      GLALIE = 362,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spheal_(Pokémon) | Source} */
      SPHEAL = 363,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sealeo_(Pokémon) | Source} */
      SEALEO = 364,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Walrein_(Pokémon) | Source} */
      WALREIN = 365,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clamperl_(Pokémon) | Source} */
      CLAMPERL = 366,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Huntail_(Pokémon) | Source} */
      HUNTAIL = 367,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gorebyss_(Pokémon) | Source} */
      GOREBYSS = 368,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Relicanth_(Pokémon) | Source} */
      RELICANTH = 369,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Luvdisc_(Pokémon) | Source} */
      LUVDISC = 370,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bagon_(Pokémon) | Source} */
      BAGON = 371,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shelgon_(Pokémon) | Source} */
      SHELGON = 372,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Salamence_(Pokémon) | Source} */
      SALAMENCE = 373,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Beldum_(Pokémon) | Source} */
      BELDUM = 374,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Metang_(Pokémon) | Source} */
      METANG = 375,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Metagross_(Pokémon) | Source} */
      METAGROSS = 376,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Regirock_(Pokémon) | Source} */
      REGIROCK = 377,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Regice_(Pokémon) | Source} */
      REGICE = 378,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Registeel_(Pokémon) | Source} */
      REGISTEEL = 379,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Latias_(Pokémon) | Source} */
      LATIAS = 380,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Latios_(Pokémon) | Source} */
      LATIOS = 381,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kyogre_(Pokémon) | Source} */
      KYOGRE = 382,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Groudon_(Pokémon) | Source} */
      GROUDON = 383,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rayquaza_(Pokémon) | Source} */
      RAYQUAZA = 384,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jirachi_(Pokémon) | Source} */
      JIRACHI = 385,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Deoxys_(Pokémon) | Source} */
      DEOXYS = 386,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Turtwig_(Pokémon) | Source} */
      TURTWIG = 387,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grotle_(Pokémon) | Source} */
      GROTLE = 388,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Torterra_(Pokémon) | Source} */
      TORTERRA = 389,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chimchar_(Pokémon) | Source} */
      CHIMCHAR = 390,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Monferno_(Pokémon) | Source} */
      MONFERNO = 391,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Infernape_(Pokémon) | Source} */
      INFERNAPE = 392,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Piplup_(Pokémon) | Source} */
      PIPLUP = 393,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Prinplup_(Pokémon) | Source} */
      PRINPLUP = 394,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Empoleon_(Pokémon) | Source} */
      EMPOLEON = 395,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Starly_(Pokémon) | Source} */
      STARLY = 396,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Staravia_(Pokémon) | Source} */
      STARAVIA = 397,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Staraptor_(Pokémon) | Source} */
      STARAPTOR = 398,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bidoof_(Pokémon) | Source} */
      BIDOOF = 399,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bibarel_(Pokémon) | Source} */
      BIBAREL = 400,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kricketot_(Pokémon) | Source} */
      KRICKETOT = 401,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kricketune_(Pokémon) | Source} */
      KRICKETUNE = 402,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shinx_(Pokémon) | Source} */
      SHINX = 403,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Luxio_(Pokémon) | Source} */
      LUXIO = 404,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Luxray_(Pokémon) | Source} */
      LUXRAY = 405,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Budew_(Pokémon) | Source} */
      BUDEW = 406,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Roserade_(Pokémon) | Source} */
      ROSERADE = 407,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cranidos_(Pokémon) | Source} */
      CRANIDOS = 408,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rampardos_(Pokémon) | Source} */
      RAMPARDOS = 409,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shieldon_(Pokémon) | Source} */
      SHIELDON = 410,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bastiodon_(Pokémon) | Source} */
      BASTIODON = 411,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Burmy_(Pokémon) | Source} */
      BURMY = 412,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wormadam_(Pokémon) | Source} */
      WORMADAM = 413,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mothim_(Pokémon) | Source} */
      MOTHIM = 414,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Combee_(Pokémon) | Source} */
      COMBEE = 415,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vespiquen_(Pokémon) | Source} */
      VESPIQUEN = 416,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pachirisu_(Pokémon) | Source} */
      PACHIRISU = 417,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Buizel_(Pokémon) | Source} */
      BUIZEL = 418,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Floatzel_(Pokémon) | Source} */
      FLOATZEL = 419,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cherubi_(Pokémon) | Source} */
      CHERUBI = 420,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cherrim_(Pokémon) | Source} */
      CHERRIM = 421,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shellos_(Pokémon) | Source} */
      SHELLOS = 422,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gastrodon_(Pokémon) | Source} */
      GASTRODON = 423,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ambipom_(Pokémon) | Source} */
      AMBIPOM = 424,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drifloon_(Pokémon) | Source} */
      DRIFLOON = 425,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drifblim_(Pokémon) | Source} */
      DRIFBLIM = 426,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Buneary_(Pokémon) | Source} */
      BUNEARY = 427,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lopunny_(Pokémon) | Source} */
      LOPUNNY = 428,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mismagius_(Pokémon) | Source} */
      MISMAGIUS = 429,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Honchkrow_(Pokémon) | Source} */
      HONCHKROW = 430,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glameow_(Pokémon) | Source} */
      GLAMEOW = 431,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Purugly_(Pokémon) | Source} */
      PURUGLY = 432,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chingling_(Pokémon) | Source} */
      CHINGLING = 433,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stunky_(Pokémon) | Source} */
      STUNKY = 434,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skuntank_(Pokémon) | Source} */
      SKUNTANK = 435,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bronzor_(Pokémon) | Source} */
      BRONZOR = 436,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bronzong_(Pokémon) | Source} */
      BRONZONG = 437,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bonsly_(Pokémon) | Source} */
      BONSLY = 438,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mime_Jr_(Pokémon) | Source} */
      MIME_JR = 439,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Happiny_(Pokémon) | Source} */
      HAPPINY = 440,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chatot_(Pokémon) | Source} */
      CHATOT = 441,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spiritomb_(Pokémon) | Source} */
      SPIRITOMB = 442,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gible_(Pokémon) | Source} */
      GIBLE = 443,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gabite_(Pokémon) | Source} */
      GABITE = 444,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Garchomp_(Pokémon) | Source} */
      GARCHOMP = 445,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Munchlax_(Pokémon) | Source} */
      MUNCHLAX = 446,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Riolu_(Pokémon) | Source} */
      RIOLU = 447,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lucario_(Pokémon) | Source} */
      LUCARIO = 448,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hippopotas_(Pokémon) | Source} */
      HIPPOPOTAS = 449,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hippowdon_(Pokémon) | Source} */
      HIPPOWDON = 450,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skorupi_(Pokémon) | Source} */
      SKORUPI = 451,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drapion_(Pokémon) | Source} */
      DRAPION = 452,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Croagunk_(Pokémon) | Source} */
      CROAGUNK = 453,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toxicroak_(Pokémon) | Source} */
      TOXICROAK = 454,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Carnivine_(Pokémon) | Source} */
      CARNIVINE = 455,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Finneon_(Pokémon) | Source} */
      FINNEON = 456,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lumineon_(Pokémon) | Source} */
      LUMINEON = 457,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mantyke_(Pokémon) | Source} */
      MANTYKE = 458,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snover_(Pokémon) | Source} */
      SNOVER = 459,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Abomasnow_(Pokémon) | Source} */
      ABOMASNOW = 460,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Weavile_(Pokémon) | Source} */
      WEAVILE = 461,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magnezone_(Pokémon) | Source} */
      MAGNEZONE = 462,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lickilicky_(Pokémon) | Source} */
      LICKILICKY = 463,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rhyperior_(Pokémon) | Source} */
      RHYPERIOR = 464,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tangrowth_(Pokémon) | Source} */
      TANGROWTH = 465,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electivire_(Pokémon) | Source} */
      ELECTIVIRE = 466,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magmortar_(Pokémon) | Source} */
      MAGMORTAR = 467,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Togekiss_(Pokémon) | Source} */
      TOGEKISS = 468,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Yanmega_(Pokémon) | Source} */
      YANMEGA = 469,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Leafeon_(Pokémon) | Source} */
      LEAFEON = 470,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glaceon_(Pokémon) | Source} */
      GLACEON = 471,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gliscor_(Pokémon) | Source} */
      GLISCOR = 472,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mamoswine_(Pokémon) | Source} */
      MAMOSWINE = 473,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Porygon_Z_(Pokémon) | Source} */
      PORYGON_Z = 474,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gallade_(Pokémon) | Source} */
      GALLADE = 475,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Probopass_(Pokémon) | Source} */
      PROBOPASS = 476,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dusknoir_(Pokémon) | Source} */
      DUSKNOIR = 477,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Froslass_(Pokémon) | Source} */
      FROSLASS = 478,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rotom_(Pokémon) | Source} */
      ROTOM = 479,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Uxie_(Pokémon) | Source} */
      UXIE = 480,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mesprit_(Pokémon) | Source} */
      MESPRIT = 481,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Azelf_(Pokémon) | Source} */
      AZELF = 482,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dialga_(Pokémon) | Source} */
      DIALGA = 483,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Palkia_(Pokémon) | Source} */
      PALKIA = 484,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heatran_(Pokémon) | Source} */
      HEATRAN = 485,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Regigigas_(Pokémon) | Source} */
      REGIGIGAS = 486,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Giratina_(Pokémon) | Source} */
      GIRATINA = 487,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cresselia_(Pokémon) | Source} */
      CRESSELIA = 488,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Phione_(Pokémon) | Source} */
      PHIONE = 489,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Manaphy_(Pokémon) | Source} */
      MANAPHY = 490,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Darkrai_(Pokémon) | Source} */
      DARKRAI = 491,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shaymin_(Pokémon) | Source} */
      SHAYMIN = 492,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arceus_(Pokémon) | Source} */
      ARCEUS = 493,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Victini_(Pokémon) | Source} */
      VICTINI = 494,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snivy_(Pokémon) | Source} */
      SNIVY = 495,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Servine_(Pokémon) | Source} */
      SERVINE = 496,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Serperior_(Pokémon) | Source} */
      SERPERIOR = 497,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tepig_(Pokémon) | Source} */
      TEPIG = 498,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pignite_(Pokémon) | Source} */
      PIGNITE = 499,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Emboar_(Pokémon) | Source} */
      EMBOAR = 500,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Oshawott_(Pokémon) | Source} */
      OSHAWOTT = 501,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dewott_(Pokémon) | Source} */
      DEWOTT = 502,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Samurott_(Pokémon) | Source} */
      SAMUROTT = 503,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Patrat_(Pokémon) | Source} */
      PATRAT = 504,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Watchog_(Pokémon) | Source} */
      WATCHOG = 505,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lillipup_(Pokémon) | Source} */
      LILLIPUP = 506,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Herdier_(Pokémon) | Source} */
      HERDIER = 507,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stoutland_(Pokémon) | Source} */
      STOUTLAND = 508,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Purrloin_(Pokémon) | Source} */
      PURRLOIN = 509,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Liepard_(Pokémon) | Source} */
      LIEPARD = 510,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pansage_(Pokémon) | Source} */
      PANSAGE = 511,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Simisage_(Pokémon) | Source} */
      SIMISAGE = 512,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pansear_(Pokémon) | Source} */
      PANSEAR = 513,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Simisear_(Pokémon) | Source} */
      SIMISEAR = 514,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Panpour_(Pokémon) | Source} */
      PANPOUR = 515,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Simipour_(Pokémon) | Source} */
      SIMIPOUR = 516,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Munna_(Pokémon) | Source} */
      MUNNA = 517,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Musharna_(Pokémon) | Source} */
      MUSHARNA = 518,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pidove_(Pokémon) | Source} */
      PIDOVE = 519,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tranquill_(Pokémon) | Source} */
      TRANQUILL = 520,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Unfezant_(Pokémon) | Source} */
      UNFEZANT = 521,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blitzle_(Pokémon) | Source} */
      BLITZLE = 522,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zebstrika_(Pokémon) | Source} */
      ZEBSTRIKA = 523,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Roggenrola_(Pokémon) | Source} */
      ROGGENROLA = 524,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Boldore_(Pokémon) | Source} */
      BOLDORE = 525,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gigalith_(Pokémon) | Source} */
      GIGALITH = 526,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Woobat_(Pokémon) | Source} */
      WOOBAT = 527,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swoobat_(Pokémon) | Source} */
      SWOOBAT = 528,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drilbur_(Pokémon) | Source} */
      DRILBUR = 529,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Excadrill_(Pokémon) | Source} */
      EXCADRILL = 530,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Audino_(Pokémon) | Source} */
      AUDINO = 531,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Timburr_(Pokémon) | Source} */
      TIMBURR = 532,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gurdurr_(Pokémon) | Source} */
      GURDURR = 533,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Conkeldurr_(Pokémon) | Source} */
      CONKELDURR = 534,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tympole_(Pokémon) | Source} */
      TYMPOLE = 535,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Palpitoad_(Pokémon) | Source} */
      PALPITOAD = 536,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Seismitoad_(Pokémon) | Source} */
      SEISMITOAD = 537,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Throh_(Pokémon) | Source} */
      THROH = 538,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sawk_(Pokémon) | Source} */
      SAWK = 539,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sewaddle_(Pokémon) | Source} */
      SEWADDLE = 540,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swadloon_(Pokémon) | Source} */
      SWADLOON = 541,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Leavanny_(Pokémon) | Source} */
      LEAVANNY = 542,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Venipede_(Pokémon) | Source} */
      VENIPEDE = 543,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Whirlipede_(Pokémon) | Source} */
      WHIRLIPEDE = 544,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scolipede_(Pokémon) | Source} */
      SCOLIPEDE = 545,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cottonee_(Pokémon) | Source} */
      COTTONEE = 546,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Whimsicott_(Pokémon) | Source} */
      WHIMSICOTT = 547,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Petilil_(Pokémon) | Source} */
      PETILIL = 548,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lilligant_(Pokémon) | Source} */
      LILLIGANT = 549,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Basculin_(Pokémon) | Source} */
      BASCULIN = 550,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sandile_(Pokémon) | Source} */
      SANDILE = 551,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Krokorok_(Pokémon) | Source} */
      KROKOROK = 552,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Krookodile_(Pokémon) | Source} */
      KROOKODILE = 553,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Darumaka_(Pokémon) | Source} */
      DARUMAKA = 554,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Darmanitan_(Pokémon) | Source} */
      DARMANITAN = 555,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Maractus_(Pokémon) | Source} */
      MARACTUS = 556,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dwebble_(Pokémon) | Source} */
      DWEBBLE = 557,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crustle_(Pokémon) | Source} */
      CRUSTLE = 558,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scraggy_(Pokémon) | Source} */
      SCRAGGY = 559,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scrafty_(Pokémon) | Source} */
      SCRAFTY = 560,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sigilyph_(Pokémon) | Source} */
      SIGILYPH = 561,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Yamask_(Pokémon) | Source} */
      YAMASK = 562,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cofagrigus_(Pokémon) | Source} */
      COFAGRIGUS = 563,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tirtouga_(Pokémon) | Source} */
      TIRTOUGA = 564,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Carracosta_(Pokémon) | Source} */
      CARRACOSTA = 565,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Archen_(Pokémon) | Source} */
      ARCHEN = 566,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Archeops_(Pokémon) | Source} */
      ARCHEOPS = 567,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trubbish_(Pokémon) | Source} */
      TRUBBISH = 568,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Garbodor_(Pokémon) | Source} */
      GARBODOR = 569,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zorua_(Pokémon) | Source} */
      ZORUA = 570,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zoroark_(Pokémon) | Source} */
      ZOROARK = 571,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Minccino_(Pokémon) | Source} */
      MINCCINO = 572,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cinccino_(Pokémon) | Source} */
      CINCCINO = 573,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gothita_(Pokémon) | Source} */
      GOTHITA = 574,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gothorita_(Pokémon) | Source} */
      GOTHORITA = 575,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gothitelle_(Pokémon) | Source} */
      GOTHITELLE = 576,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Solosis_(Pokémon) | Source} */
      SOLOSIS = 577,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Duosion_(Pokémon) | Source} */
      DUOSION = 578,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Reuniclus_(Pokémon) | Source} */
      REUNICLUS = 579,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ducklett_(Pokémon) | Source} */
      DUCKLETT = 580,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swanna_(Pokémon) | Source} */
      SWANNA = 581,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vanillite_(Pokémon) | Source} */
      VANILLITE = 582,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vanillish_(Pokémon) | Source} */
      VANILLISH = 583,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vanilluxe_(Pokémon) | Source} */
      VANILLUXE = 584,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Deerling_(Pokémon) | Source} */
      DEERLING = 585,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sawsbuck_(Pokémon) | Source} */
      SAWSBUCK = 586,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Emolga_(Pokémon) | Source} */
      EMOLGA = 587,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Karrablast_(Pokémon) | Source} */
      KARRABLAST = 588,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Escavalier_(Pokémon) | Source} */
      ESCAVALIER = 589,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Foongus_(Pokémon) | Source} */
      FOONGUS = 590,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Amoonguss_(Pokémon) | Source} */
      AMOONGUSS = 591,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Frillish_(Pokémon) | Source} */
      FRILLISH = 592,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jellicent_(Pokémon) | Source} */
      JELLICENT = 593,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Alomomola_(Pokémon) | Source} */
      ALOMOMOLA = 594,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Joltik_(Pokémon) | Source} */
      JOLTIK = 595,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Galvantula_(Pokémon) | Source} */
      GALVANTULA = 596,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ferroseed_(Pokémon) | Source} */
      FERROSEED = 597,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ferrothorn_(Pokémon) | Source} */
      FERROTHORN = 598,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Klink_(Pokémon) | Source} */
      KLINK = 599,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Klang_(Pokémon) | Source} */
      KLANG = 600,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Klinklang_(Pokémon) | Source} */
      KLINKLANG = 601,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tynamo_(Pokémon) | Source} */
      TYNAMO = 602,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Eelektrik_(Pokémon) | Source} */
      EELEKTRIK = 603,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Eelektross_(Pokémon) | Source} */
      EELEKTROSS = 604,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Elgyem_(Pokémon) | Source} */
      ELGYEM = 605,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Beheeyem_(Pokémon) | Source} */
      BEHEEYEM = 606,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Litwick_(Pokémon) | Source} */
      LITWICK = 607,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lampent_(Pokémon) | Source} */
      LAMPENT = 608,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chandelure_(Pokémon) | Source} */
      CHANDELURE = 609,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Axew_(Pokémon) | Source} */
      AXEW = 610,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fraxure_(Pokémon) | Source} */
      FRAXURE = 611,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Haxorus_(Pokémon) | Source} */
      HAXORUS = 612,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cubchoo_(Pokémon) | Source} */
      CUBCHOO = 613,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Beartic_(Pokémon) | Source} */
      BEARTIC = 614,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cryogonal_(Pokémon) | Source} */
      CRYOGONAL = 615,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shelmet_(Pokémon) | Source} */
      SHELMET = 616,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Accelgor_(Pokémon) | Source} */
      ACCELGOR = 617,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stunfisk_(Pokémon) | Source} */
      STUNFISK = 618,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mienfoo_(Pokémon) | Source} */
      MIENFOO = 619,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mienshao_(Pokémon) | Source} */
      MIENSHAO = 620,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Druddigon_(Pokémon) | Source} */
      DRUDDIGON = 621,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Golett_(Pokémon) | Source} */
      GOLETT = 622,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Golurk_(Pokémon) | Source} */
      GOLURK = 623,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pawniard_(Pokémon) | Source} */
      PAWNIARD = 624,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bisharp_(Pokémon) | Source} */
      BISHARP = 625,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bouffalant_(Pokémon) | Source} */
      BOUFFALANT = 626,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rufflet_(Pokémon) | Source} */
      RUFFLET = 627,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Braviary_(Pokémon) | Source} */
      BRAVIARY = 628,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vullaby_(Pokémon) | Source} */
      VULLABY = 629,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mandibuzz_(Pokémon) | Source} */
      MANDIBUZZ = 630,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heatmor_(Pokémon) | Source} */
      HEATMOR = 631,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Durant_(Pokémon) | Source} */
      DURANT = 632,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Deino_(Pokémon) | Source} */
      DEINO = 633,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zweilous_(Pokémon) | Source} */
      ZWEILOUS = 634,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hydreigon_(Pokémon) | Source} */
      HYDREIGON = 635,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Larvesta_(Pokémon) | Source} */
      LARVESTA = 636,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Volcarona_(Pokémon) | Source} */
      VOLCARONA = 637,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cobalion_(Pokémon) | Source} */
      COBALION = 638,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Terrakion_(Pokémon) | Source} */
      TERRAKION = 639,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Virizion_(Pokémon) | Source} */
      VIRIZION = 640,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tornadus_(Pokémon) | Source} */
      TORNADUS = 641,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thundurus_(Pokémon) | Source} */
      THUNDURUS = 642,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Reshiram_(Pokémon) | Source} */
      RESHIRAM = 643,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zekrom_(Pokémon) | Source} */
      ZEKROM = 644,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Landorus_(Pokémon) | Source} */
      LANDORUS = 645,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kyurem_(Pokémon) | Source} */
      KYUREM = 646,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Keldeo_(Pokémon) | Source} */
      KELDEO = 647,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meloetta_(Pokémon) | Source} */
      MELOETTA = 648,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Genesect_(Pokémon) | Source} */
      GENESECT = 649,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chespin_(Pokémon) | Source} */
      CHESPIN = 650,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quilladin_(Pokémon) | Source} */
      QUILLADIN = 651,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chesnaught_(Pokémon) | Source} */
      CHESNAUGHT = 652,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fennekin_(Pokémon) | Source} */
      FENNEKIN = 653,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Braixen_(Pokémon) | Source} */
      BRAIXEN = 654,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Delphox_(Pokémon) | Source} */
      DELPHOX = 655,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Froakie_(Pokémon) | Source} */
      FROAKIE = 656,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Frogadier_(Pokémon) | Source} */
      FROGADIER = 657,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Greninja_(Pokémon) | Source} */
      GRENINJA = 658,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bunnelby_(Pokémon) | Source} */
      BUNNELBY = 659,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Diggersby_(Pokémon) | Source} */
      DIGGERSBY = 660,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fletchling_(Pokémon) | Source} */
      FLETCHLING = 661,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fletchinder_(Pokémon) | Source} */
      FLETCHINDER = 662,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Talonflame_(Pokémon) | Source} */
      TALONFLAME = 663,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scatterbug_(Pokémon) | Source} */
      SCATTERBUG = 664,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spewpa_(Pokémon) | Source} */
      SPEWPA = 665,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vivillon_(Pokémon) | Source} */
      VIVILLON = 666,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Litleo_(Pokémon) | Source} */
      LITLEO = 667,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pyroar_(Pokémon) | Source} */
      PYROAR = 668,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flabebe_(Pokémon) | Source} */
      FLABEBE = 669,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Floette_(Pokémon) | Source} */
      FLOETTE = 670,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Florges_(Pokémon) | Source} */
      FLORGES = 671,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skiddo_(Pokémon) | Source} */
      SKIDDO = 672,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gogoat_(Pokémon) | Source} */
      GOGOAT = 673,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pancham_(Pokémon) | Source} */
      PANCHAM = 674,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pangoro_(Pokémon) | Source} */
      PANGORO = 675,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Furfrou_(Pokémon) | Source} */
      FURFROU = 676,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Espurr_(Pokémon) | Source} */
      ESPURR = 677,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meowstic_(Pokémon) | Source} */
      MEOWSTIC = 678,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Honedge_(Pokémon) | Source} */
      HONEDGE = 679,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Doublade_(Pokémon) | Source} */
      DOUBLADE = 680,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aegislash_(Pokémon) | Source} */
      AEGISLASH = 681,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spritzee_(Pokémon) | Source} */
      SPRITZEE = 682,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aromatisse_(Pokémon) | Source} */
      AROMATISSE = 683,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Swirlix_(Pokémon) | Source} */
      SWIRLIX = 684,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slurpuff_(Pokémon) | Source} */
      SLURPUFF = 685,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Inkay_(Pokémon) | Source} */
      INKAY = 686,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Malamar_(Pokémon) | Source} */
      MALAMAR = 687,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Binacle_(Pokémon) | Source} */
      BINACLE = 688,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Barbaracle_(Pokémon) | Source} */
      BARBARACLE = 689,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skrelp_(Pokémon) | Source} */
      SKRELP = 690,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragalge_(Pokémon) | Source} */
      DRAGALGE = 691,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clauncher_(Pokémon) | Source} */
      CLAUNCHER = 692,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clawitzer_(Pokémon) | Source} */
      CLAWITZER = 693,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Helioptile_(Pokémon) | Source} */
      HELIOPTILE = 694,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Heliolisk_(Pokémon) | Source} */
      HELIOLISK = 695,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tyrunt_(Pokémon) | Source} */
      TYRUNT = 696,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tyrantrum_(Pokémon) | Source} */
      TYRANTRUM = 697,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Amaura_(Pokémon) | Source} */
      AMAURA = 698,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Aurorus_(Pokémon) | Source} */
      AURORUS = 699,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sylveon_(Pokémon) | Source} */
      SYLVEON = 700,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hawlucha_(Pokémon) | Source} */
      HAWLUCHA = 701,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dedenne_(Pokémon) | Source} */
      DEDENNE = 702,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Carbink_(Pokémon) | Source} */
      CARBINK = 703,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Goomy_(Pokémon) | Source} */
      GOOMY = 704,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sliggoo_(Pokémon) | Source} */
      SLIGGOO = 705,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Goodra_(Pokémon) | Source} */
      GOODRA = 706,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Klefki_(Pokémon) | Source} */
      KLEFKI = 707,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Phantump_(Pokémon) | Source} */
      PHANTUMP = 708,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trevenant_(Pokémon) | Source} */
      TREVENANT = 709,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pumpkaboo_(Pokémon) | Source} */
      PUMPKABOO = 710,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gourgeist_(Pokémon) | Source} */
      GOURGEIST = 711,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bergmite_(Pokémon) | Source} */
      BERGMITE = 712,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Avalugg_(Pokémon) | Source} */
      AVALUGG = 713,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Noibat_(Pokémon) | Source} */
      NOIBAT = 714,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Noivern_(Pokémon) | Source} */
      NOIVERN = 715,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Xerneas_(Pokémon) | Source} */
      XERNEAS = 716,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Yveltal_(Pokémon) | Source} */
      YVELTAL = 717,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zygarde_(Pokémon) | Source} */
      ZYGARDE = 718,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Diancie_(Pokémon) | Source} */
      DIANCIE = 719,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hoopa_(Pokémon) | Source} */
      HOOPA = 720,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Volcanion_(Pokémon) | Source} */
      VOLCANION = 721,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rowlet_(Pokémon) | Source} */
      ROWLET = 722,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dartrix_(Pokémon) | Source} */
      DARTRIX = 723,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Decidueye_(Pokémon) | Source} */
      DECIDUEYE = 724,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Litten_(Pokémon) | Source} */
      LITTEN = 725,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Torracat_(Pokémon) | Source} */
      TORRACAT = 726,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Incineroar_(Pokémon) | Source} */
      INCINEROAR = 727,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Popplio_(Pokémon) | Source} */
      POPPLIO = 728,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Brionne_(Pokémon) | Source} */
      BRIONNE = 729,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Primarina_(Pokémon) | Source} */
      PRIMARINA = 730,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pikipek_(Pokémon) | Source} */
      PIKIPEK = 731,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Trumbeak_(Pokémon) | Source} */
      TRUMBEAK = 732,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toucannon_(Pokémon) | Source} */
      TOUCANNON = 733,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Yungoos_(Pokémon) | Source} */
      YUNGOOS = 734,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gumshoos_(Pokémon) | Source} */
      GUMSHOOS = 735,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grubbin_(Pokémon) | Source} */
      GRUBBIN = 736,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Charjabug_(Pokémon) | Source} */
      CHARJABUG = 737,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vikavolt_(Pokémon) | Source} */
      VIKAVOLT = 738,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crabrawler_(Pokémon) | Source} */
      CRABRAWLER = 739,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crabominable_(Pokémon) | Source} */
      CRABOMINABLE = 740,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Oricorio_(Pokémon) | Source} */
      ORICORIO = 741,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cutiefly_(Pokémon) | Source} */
      CUTIEFLY = 742,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ribombee_(Pokémon) | Source} */
      RIBOMBEE = 743,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rockruff_(Pokémon) | Source} */
      ROCKRUFF = 744,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lycanroc_(Pokémon) | Source} */
      LYCANROC = 745,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wishiwashi_(Pokémon) | Source} */
      WISHIWASHI = 746,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mareanie_(Pokémon) | Source} */
      MAREANIE = 747,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toxapex_(Pokémon) | Source} */
      TOXAPEX = 748,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mudbray_(Pokémon) | Source} */
      MUDBRAY = 749,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mudsdale_(Pokémon) | Source} */
      MUDSDALE = 750,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dewpider_(Pokémon) | Source} */
      DEWPIDER = 751,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Araquanid_(Pokémon) | Source} */
      ARAQUANID = 752,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fomantis_(Pokémon) | Source} */
      FOMANTIS = 753,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lurantis_(Pokémon) | Source} */
      LURANTIS = 754,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Morelull_(Pokémon) | Source} */
      MORELULL = 755,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shiinotic_(Pokémon) | Source} */
      SHIINOTIC = 756,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Salandit_(Pokémon) | Source} */
      SALANDIT = 757,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Salazzle_(Pokémon) | Source} */
      SALAZZLE = 758,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stufful_(Pokémon) | Source} */
      STUFFUL = 759,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bewear_(Pokémon) | Source} */
      BEWEAR = 760,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bounsweet_(Pokémon) | Source} */
      BOUNSWEET = 761,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Steenee_(Pokémon) | Source} */
      STEENEE = 762,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tsareena_(Pokémon) | Source} */
      TSAREENA = 763,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Comfey_(Pokémon) | Source} */
      COMFEY = 764,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Oranguru_(Pokémon) | Source} */
      ORANGURU = 765,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Passimian_(Pokémon) | Source} */
      PASSIMIAN = 766,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wimpod_(Pokémon) | Source} */
      WIMPOD = 767,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Golisopod_(Pokémon) | Source} */
      GOLISOPOD = 768,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sandygast_(Pokémon) | Source} */
      SANDYGAST = 769,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Palossand_(Pokémon) | Source} */
      PALOSSAND = 770,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pyukumuku_(Pokémon) | Source} */
      PYUKUMUKU = 771,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Type_Null_(Pokémon) | Source} */
      TYPE_NULL = 772,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Silvally_(Pokémon) | Source} */
      SILVALLY = 773,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Minior_(Pokémon) | Source} */
      MINIOR = 774,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Komala_(Pokémon) | Source} */
      KOMALA = 775,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Turtonator_(Pokémon) | Source} */
      TURTONATOR = 776,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Togedemaru_(Pokémon) | Source} */
      TOGEDEMARU = 777,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mimikyu_(Pokémon) | Source} */
      MIMIKYU = 778,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bruxish_(Pokémon) | Source} */
      BRUXISH = 779,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drampa_(Pokémon) | Source} */
      DRAMPA = 780,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dhelmise_(Pokémon) | Source} */
      DHELMISE = 781,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Jangmo_O_(Pokémon) | Source} */
      JANGMO_O = 782,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hakamo_O_(Pokémon) | Source} */
      HAKAMO_O = 783,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kommo_O_(Pokémon) | Source} */
      KOMMO_O = 784,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tapu_Koko_(Pokémon) | Source} */
      TAPU_KOKO = 785,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tapu_Lele_(Pokémon) | Source} */
      TAPU_LELE = 786,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tapu_Bulu_(Pokémon) | Source} */
      TAPU_BULU = 787,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tapu_Fini_(Pokémon) | Source} */
      TAPU_FINI = 788,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cosmog_(Pokémon) | Source} */
      COSMOG = 789,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cosmoem_(Pokémon) | Source} */
      COSMOEM = 790,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Solgaleo_(Pokémon) | Source} */
      SOLGALEO = 791,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lunala_(Pokémon) | Source} */
      LUNALA = 792,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nihilego_(Pokémon) | Source} */
      NIHILEGO = 793,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Buzzwole_(Pokémon) | Source} */
      BUZZWOLE = 794,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pheromosa_(Pokémon) | Source} */
      PHEROMOSA = 795,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Xurkitree_(Pokémon) | Source} */
      XURKITREE = 796,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Celesteela_(Pokémon) | Source} */
      CELESTEELA = 797,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kartana_(Pokémon) | Source} */
      KARTANA = 798,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Guzzlord_(Pokémon) | Source} */
      GUZZLORD = 799,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Necrozma_(Pokémon) | Source} */
      NECROZMA = 800,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Magearna_(Pokémon) | Source} */
      MAGEARNA = 801,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Marshadow_(Pokémon) | Source} */
      MARSHADOW = 802,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poipole_(Pokémon) | Source} */
      POIPOLE = 803,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Naganadel_(Pokémon) | Source} */
      NAGANADEL = 804,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stakataka_(Pokémon) | Source} */
      STAKATAKA = 805,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blacephalon_(Pokémon) | Source} */
      BLACEPHALON = 806,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zeraora_(Pokémon) | Source} */
      ZERAORA = 807,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meltan_(Pokémon) | Source} */
      MELTAN = 808,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Melmetal_(Pokémon) | Source} */
      MELMETAL = 809,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grookey_(Pokémon) | Source} */
      GROOKEY = 810,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thwackey_(Pokémon) | Source} */
      THWACKEY = 811,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rillaboom_(Pokémon) | Source} */
      RILLABOOM = 812,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scorbunny_(Pokémon) | Source} */
      SCORBUNNY = 813,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Raboot_(Pokémon) | Source} */
      RABOOT = 814,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cinderace_(Pokémon) | Source} */
      CINDERACE = 815,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sobble_(Pokémon) | Source} */
      SOBBLE = 816,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drizzile_(Pokémon) | Source} */
      DRIZZILE = 817,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Inteleon_(Pokémon) | Source} */
      INTELEON = 818,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skwovet_(Pokémon) | Source} */
      SKWOVET = 819,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Greedent_(Pokémon) | Source} */
      GREEDENT = 820,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rookidee_(Pokémon) | Source} */
      ROOKIDEE = 821,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Corvisquire_(Pokémon) | Source} */
      CORVISQUIRE = 822,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Corviknight_(Pokémon) | Source} */
      CORVIKNIGHT = 823,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Blipbug_(Pokémon) | Source} */
      BLIPBUG = 824,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dottler_(Pokémon) | Source} */
      DOTTLER = 825,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Orbeetle_(Pokémon) | Source} */
      ORBEETLE = 826,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nickit_(Pokémon) | Source} */
      NICKIT = 827,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Thievul_(Pokémon) | Source} */
      THIEVUL = 828,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gossifleur_(Pokémon) | Source} */
      GOSSIFLEUR = 829,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Eldegoss_(Pokémon) | Source} */
      ELDEGOSS = 830,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wooloo_(Pokémon) | Source} */
      WOOLOO = 831,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dubwool_(Pokémon) | Source} */
      DUBWOOL = 832,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chewtle_(Pokémon) | Source} */
      CHEWTLE = 833,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drednaw_(Pokémon) | Source} */
      DREDNAW = 834,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Yamper_(Pokémon) | Source} */
      YAMPER = 835,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Boltund_(Pokémon) | Source} */
      BOLTUND = 836,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rolycoly_(Pokémon) | Source} */
      ROLYCOLY = 837,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Carkol_(Pokémon) | Source} */
      CARKOL = 838,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Coalossal_(Pokémon) | Source} */
      COALOSSAL = 839,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Applin_(Pokémon) | Source} */
      APPLIN = 840,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flapple_(Pokémon) | Source} */
      FLAPPLE = 841,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Appletun_(Pokémon) | Source} */
      APPLETUN = 842,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Silicobra_(Pokémon) | Source} */
      SILICOBRA = 843,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sandaconda_(Pokémon) | Source} */
      SANDACONDA = 844,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cramorant_(Pokémon) | Source} */
      CRAMORANT = 845,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arrokuda_(Pokémon) | Source} */
      ARROKUDA = 846,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Barraskewda_(Pokémon) | Source} */
      BARRASKEWDA = 847,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toxel_(Pokémon) | Source} */
      TOXEL = 848,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toxtricity_(Pokémon) | Source} */
      TOXTRICITY = 849,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sizzlipede_(Pokémon) | Source} */
      SIZZLIPEDE = 850,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Centiskorch_(Pokémon) | Source} */
      CENTISKORCH = 851,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clobbopus_(Pokémon) | Source} */
      CLOBBOPUS = 852,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grapploct_(Pokémon) | Source} */
      GRAPPLOCT = 853,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sinistea_(Pokémon) | Source} */
      SINISTEA = 854,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Polteageist_(Pokémon) | Source} */
      POLTEAGEIST = 855,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hatenna_(Pokémon) | Source} */
      HATENNA = 856,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hattrem_(Pokémon) | Source} */
      HATTREM = 857,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hatterene_(Pokémon) | Source} */
      HATTERENE = 858,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Impidimp_(Pokémon) | Source} */
      IMPIDIMP = 859,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Morgrem_(Pokémon) | Source} */
      MORGREM = 860,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grimmsnarl_(Pokémon) | Source} */
      GRIMMSNARL = 861,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Obstagoon_(Pokémon) | Source} */
      OBSTAGOON = 862,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Perrserker_(Pokémon) | Source} */
      PERRSERKER = 863,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cursola_(Pokémon) | Source} */
      CURSOLA = 864,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sirfetchd_(Pokémon) | Source} */
      SIRFETCHD = 865,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mr_Rime_(Pokémon) | Source} */
      MR_RIME = 866,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Runerigus_(Pokémon) | Source} */
      RUNERIGUS = 867,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Milcery_(Pokémon) | Source} */
      MILCERY = 868,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Alcremie_(Pokémon) | Source} */
      ALCREMIE = 869,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Falinks_(Pokémon) | Source} */
      FALINKS = 870,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pincurchin_(Pokémon) | Source} */
      PINCURCHIN = 871,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Snom_(Pokémon) | Source} */
      SNOM = 872,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Frosmoth_(Pokémon) | Source} */
      FROSMOTH = 873,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stonjourner_(Pokémon) | Source} */
      STONJOURNER = 874,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Eiscue_(Pokémon) | Source} */
      EISCUE = 875,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Indeedee_(Pokémon) | Source} */
      INDEEDEE = 876,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Morpeko_(Pokémon) | Source} */
      MORPEKO = 877,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cufant_(Pokémon) | Source} */
      CUFANT = 878,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Copperajah_(Pokémon) | Source} */
      COPPERAJAH = 879,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dracozolt_(Pokémon) | Source} */
      DRACOZOLT = 880,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arctozolt_(Pokémon) | Source} */
      ARCTOZOLT = 881,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dracovish_(Pokémon) | Source} */
      DRACOVISH = 882,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arctovish_(Pokémon) | Source} */
      ARCTOVISH = 883,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Duraludon_(Pokémon) | Source} */
      DURALUDON = 884,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dreepy_(Pokémon) | Source} */
      DREEPY = 885,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Drakloak_(Pokémon) | Source} */
      DRAKLOAK = 886,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dragapult_(Pokémon) | Source} */
      DRAGAPULT = 887,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zacian_(Pokémon) | Source} */
      ZACIAN = 888,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zamazenta_(Pokémon) | Source} */
      ZAMAZENTA = 889,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Eternatus_(Pokémon) | Source} */
      ETERNATUS = 890,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kubfu_(Pokémon) | Source} */
      KUBFU = 891,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Urshifu_(Pokémon) | Source} */
      URSHIFU = 892,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zarude_(Pokémon) | Source} */
      ZARUDE = 893,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Regieleki_(Pokémon) | Source} */
      REGIELEKI = 894,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Regidrago_(Pokémon) | Source} */
      REGIDRAGO = 895,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glastrier_(Pokémon) | Source} */
      GLASTRIER = 896,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spectrier_(Pokémon) | Source} */
      SPECTRIER = 897,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Calyrex_(Pokémon) | Source} */
      CALYREX = 898,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wyrdeer_(Pokémon) | Source} */
      WYRDEER = 899,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kleavor_(Pokémon) | Source} */
      KLEAVOR = 900,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ursaluna_(Pokémon) | Source} */
      URSALUNA = 901,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Basculegion_(Pokémon) | Source} */
      BASCULEGION = 902,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sneasler_(Pokémon) | Source} */
      SNEASLER = 903,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Overqwil_(Pokémon) | Source} */
      OVERQWIL = 904,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Enamorus_(Pokémon) | Source} */
      ENAMORUS = 905,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sprigatito_(Pokémon) | Source} */
      SPRIGATITO = 906,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Floragato_(Pokémon) | Source} */
      FLORAGATO = 907,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meowscarada_(Pokémon) | Source} */
      MEOWSCARADA = 908,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fuecoco_(Pokémon) | Source} */
      FUECOCO = 909,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Crocalor_(Pokémon) | Source} */
      CROCALOR = 910,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Skeledirge_(Pokémon) | Source} */
      SKELEDIRGE = 911,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quaxly_(Pokémon) | Source} */
      QUAXLY = 912,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quaxwell_(Pokémon) | Source} */
      QUAXWELL = 913,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Quaquaval_(Pokémon) | Source} */
      QUAQUAVAL = 914,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lechonk_(Pokémon) | Source} */
      LECHONK = 915,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Oinkologne_(Pokémon) | Source} */
      OINKOLOGNE = 916,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tarountula_(Pokémon) | Source} */
      TAROUNTULA = 917,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Spidops_(Pokémon) | Source} */
      SPIDOPS = 918,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nymble_(Pokémon) | Source} */
      NYMBLE = 919,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lokix_(Pokémon) | Source} */
      LOKIX = 920,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pawmi_(Pokémon) | Source} */
      PAWMI = 921,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pawmo_(Pokémon) | Source} */
      PAWMO = 922,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pawmot_(Pokémon) | Source} */
      PAWMOT = 923,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tandemaus_(Pokémon) | Source} */
      TANDEMAUS = 924,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Maushold_(Pokémon) | Source} */
      MAUSHOLD = 925,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fidough_(Pokémon) | Source} */
      FIDOUGH = 926,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dachsbun_(Pokémon) | Source} */
      DACHSBUN = 927,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Smoliv_(Pokémon) | Source} */
      SMOLIV = 928,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dolliv_(Pokémon) | Source} */
      DOLLIV = 929,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arboliva_(Pokémon) | Source} */
      ARBOLIVA = 930,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Squawkabilly_(Pokémon) | Source} */
      SQUAWKABILLY = 931,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Nacli_(Pokémon) | Source} */
      NACLI = 932,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Naclstack_(Pokémon) | Source} */
      NACLSTACK = 933,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Garganacl_(Pokémon) | Source} */
      GARGANACL = 934,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Charcadet_(Pokémon) | Source} */
      CHARCADET = 935,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Armarouge_(Pokémon) | Source} */
      ARMAROUGE = 936,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ceruledge_(Pokémon) | Source} */
      CERULEDGE = 937,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tadbulb_(Pokémon) | Source} */
      TADBULB = 938,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bellibolt_(Pokémon) | Source} */
      BELLIBOLT = 939,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wattrel_(Pokémon) | Source} */
      WATTREL = 940,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kilowattrel_(Pokémon) | Source} */
      KILOWATTREL = 941,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Maschiff_(Pokémon) | Source} */
      MASCHIFF = 942,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mabosstiff_(Pokémon) | Source} */
      MABOSSTIFF = 943,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Shroodle_(Pokémon) | Source} */
      SHROODLE = 944,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grafaiai_(Pokémon) | Source} */
      GRAFAIAI = 945,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bramblin_(Pokémon) | Source} */
      BRAMBLIN = 946,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Brambleghast_(Pokémon) | Source} */
      BRAMBLEGHAST = 947,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toedscool_(Pokémon) | Source} */
      TOEDSCOOL = 948,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Toedscruel_(Pokémon) | Source} */
      TOEDSCRUEL = 949,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Klawf_(Pokémon) | Source} */
      KLAWF = 950,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Capsakid_(Pokémon) | Source} */
      CAPSAKID = 951,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scovillain_(Pokémon) | Source} */
      SCOVILLAIN = 952,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rellor_(Pokémon) | Source} */
      RELLOR = 953,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rabsca_(Pokémon) | Source} */
      RABSCA = 954,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flittle_(Pokémon) | Source} */
      FLITTLE = 955,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Espathra_(Pokémon) | Source} */
      ESPATHRA = 956,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tinkatink_(Pokémon) | Source} */
      TINKATINK = 957,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tinkatuff_(Pokémon) | Source} */
      TINKATUFF = 958,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tinkaton_(Pokémon) | Source} */
      TINKATON = 959,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wiglett_(Pokémon) | Source} */
      WIGLETT = 960,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wugtrio_(Pokémon) | Source} */
      WUGTRIO = 961,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Bombirdier_(Pokémon) | Source} */
      BOMBIRDIER = 962,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Finizen_(Pokémon) | Source} */
      FINIZEN = 963,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Palafin_(Pokémon) | Source} */
      PALAFIN = 964,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Varoom_(Pokémon) | Source} */
      VAROOM = 965,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Revavroom_(Pokémon) | Source} */
      REVAVROOM = 966,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cyclizar_(Pokémon) | Source} */
      CYCLIZAR = 967,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Orthworm_(Pokémon) | Source} */
      ORTHWORM = 968,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glimmet_(Pokémon) | Source} */
      GLIMMET = 969,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Glimmora_(Pokémon) | Source} */
      GLIMMORA = 970,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Greavard_(Pokémon) | Source} */
      GREAVARD = 971,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Houndstone_(Pokémon) | Source} */
      HOUNDSTONE = 972,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flamigo_(Pokémon) | Source} */
      FLAMIGO = 973,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cetoddle_(Pokémon) | Source} */
      CETODDLE = 974,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Cetitan_(Pokémon) | Source} */
      CETITAN = 975,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Veluza_(Pokémon) | Source} */
      VELUZA = 976,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dondozo_(Pokémon) | Source} */
      DONDOZO = 977,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tatsugiri_(Pokémon) | Source} */
      TATSUGIRI = 978,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Annihilape_(Pokémon) | Source} */
      ANNIHILAPE = 979,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Clodsire_(Pokémon) | Source} */
      CLODSIRE = 980,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Farigiraf_(Pokémon) | Source} */
      FARIGIRAF = 981,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dudunsparce_(Pokémon) | Source} */
      DUDUNSPARCE = 982,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Kingambit_(Pokémon) | Source} */
      KINGAMBIT = 983,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Great_Tusk_(Pokémon) | Source} */
      GREAT_TUSK = 984,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Scream_Tail_(Pokémon) | Source} */
      SCREAM_TAIL = 985,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Brute_Bonnet_(Pokémon) | Source} */
      BRUTE_BONNET = 986,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Flutter_Mane_(Pokémon) | Source} */
      FLUTTER_MANE = 987,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slither_Wing_(Pokémon) | Source} */
      SLITHER_WING = 988,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sandy_Shocks_(Pokémon) | Source} */
      SANDY_SHOCKS = 989,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Treads_(Pokémon) | Source} */
      IRON_TREADS = 990,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Bundle_(Pokémon) | Source} */
      IRON_BUNDLE = 991,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Hands_(Pokémon) | Source} */
      IRON_HANDS = 992,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Jugulis_(Pokémon) | Source} */
      IRON_JUGULIS = 993,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Moth_(Pokémon) | Source} */
      IRON_MOTH = 994,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Thorns_(Pokémon) | Source} */
      IRON_THORNS = 995,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Frigibax_(Pokémon) | Source} */
      FRIGIBAX = 996,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arctibax_(Pokémon) | Source} */
      ARCTIBAX = 997,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Baxcalibur_(Pokémon) | Source} */
      BAXCALIBUR = 998,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gimmighoul_(Pokémon) | Source} */
      GIMMIGHOUL = 999,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gholdengo_(Pokémon) | Source} */
      GHOLDENGO = 1000,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wo_Chien_(Pokémon) | Source} */
      WO_CHIEN = 1001,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chien_Pao_(Pokémon) | Source} */
      CHIEN_PAO = 1002,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ting_Lu_(Pokémon) | Source} */
      TING_LU = 1003,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Chi_Yu_(Pokémon) | Source} */
      CHI_YU = 1004,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Roaring_Moon_(Pokémon) | Source} */
      ROARING_MOON = 1005,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Valiant_(Pokémon) | Source} */
      IRON_VALIANT = 1006,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Koraidon_(Pokémon) | Source} */
      KORAIDON = 1007,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Miraidon_(Pokémon) | Source} */
      MIRAIDON = 1008,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Walking_Wake_(Pokémon) | Source} */
      WALKING_WAKE = 1009,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Leaves_(Pokémon) | Source} */
      IRON_LEAVES = 1010,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dipplin_(Pokémon) | Source} */
      DIPPLIN = 1011,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Poltchageist_(Pokémon) | Source} */
      POLTCHAGEIST = 1012,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sinistcha_(Pokémon) | Source} */
      SINISTCHA = 1013,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Okidogi_(Pokémon) | Source} */
      OKIDOGI = 1014,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Munkidori_(Pokémon) | Source} */
      MUNKIDORI = 1015,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Fezandipiti_(Pokémon) | Source} */
      FEZANDIPITI = 1016,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ogerpon_(Pokémon) | Source} */
      OGERPON = 1017,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Archaludon_(Pokémon) | Source} */
      ARCHALUDON = 1018,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Hydrapple_(Pokémon) | Source} */
      HYDRAPPLE = 1019,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Gouging_Fire_(Pokémon) | Source} */
      GOUGING_FIRE = 1020,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Raging_Bolt_(Pokémon) | Source} */
      RAGING_BOLT = 1021,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Boulder_(Pokémon) | Source} */
      IRON_BOULDER = 1022,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Iron_Crown_(Pokémon) | Source} */
      IRON_CROWN = 1023,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Terapagos_(Pokémon) | Source} */
      TERAPAGOS = 1024,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Pecharunt_(Pokémon) | Source} */
      PECHARUNT = 1025,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rattata_(Pokémon) | Source} */
      ALOLA_RATTATA = 2019,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Raticate_(Pokémon) | Source} */
      ALOLA_RATICATE = 2020,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Raichu_(Pokémon) | Source} */
      ALOLA_RAICHU = 2026,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sandshrew_(Pokémon) | Source} */
      ALOLA_SANDSHREW = 2027,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sandslash_(Pokémon) | Source} */
      ALOLA_SANDSLASH = 2028,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Vulpix_(Pokémon) | Source} */
      ALOLA_VULPIX = 2037,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ninetales_(Pokémon) | Source} */
      ALOLA_NINETALES = 2038,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Diglett_(Pokémon) | Source} */
      ALOLA_DIGLETT = 2050,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Dugtrio_(Pokémon) | Source} */
      ALOLA_DUGTRIO = 2051,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meowth_(Pokémon) | Source} */
      ALOLA_MEOWTH = 2052,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Persian_(Pokémon) | Source} */
      ALOLA_PERSIAN = 2053,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Geodude_(Pokémon) | Source} */
      ALOLA_GEODUDE = 2074,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Graveler_(Pokémon) | Source} */
      ALOLA_GRAVELER = 2075,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Golem_(Pokémon) | Source} */
      ALOLA_GOLEM = 2076,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Grimer_(Pokémon) | Source} */
      ALOLA_GRIMER = 2088,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Muk_(Pokémon) | Source} */
      ALOLA_MUK = 2089,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Exeggutor_(Pokémon) | Source} */
      ALOLA_EXEGGUTOR = 2103,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Marowak_(Pokémon) | Source} */
      ALOLA_MAROWAK = 2105,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Floette_(Pokémon) | Source} */
      ETERNAL_FLOETTE = 2670,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Meowth_(Pokémon) | Source} */
      GALAR_MEOWTH = 4052,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ponyta_(Pokémon) | Source} */
      GALAR_PONYTA = 4077,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Rapidash_(Pokémon) | Source} */
      GALAR_RAPIDASH = 4078,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slowpoke_(Pokémon) | Source} */
      GALAR_SLOWPOKE = 4079,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slowbro_(Pokémon) | Source} */
      GALAR_SLOWBRO = 4080,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Farfetchd_(Pokémon) | Source} */
      GALAR_FARFETCHD = 4083,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Weezing_(Pokémon) | Source} */
      GALAR_WEEZING = 4110,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Mr_Mime_(Pokémon) | Source} */
      GALAR_MR_MIME = 4122,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Articuno_(Pokémon) | Source} */
      GALAR_ARTICUNO = 4144,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zapdos_(Pokémon) | Source} */
      GALAR_ZAPDOS = 4145,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Moltres_(Pokémon) | Source} */
      GALAR_MOLTRES = 4146,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Slowking_(Pokémon) | Source} */
      GALAR_SLOWKING = 4199,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Corsola_(Pokémon) | Source} */
      GALAR_CORSOLA = 4222,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zigzagoon_(Pokémon) | Source} */
      GALAR_ZIGZAGOON = 4263,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Linoone_(Pokémon) | Source} */
      GALAR_LINOONE = 4264,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Darumaka_(Pokémon) | Source} */
      GALAR_DARUMAKA = 4554,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Darmanitan_(Pokémon) | Source} */
      GALAR_DARMANITAN = 4555,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Yamask_(Pokémon) | Source} */
      GALAR_YAMASK = 4562,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Stunfisk_(Pokémon) | Source} */
      GALAR_STUNFISK = 4618,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Growlithe_(Pokémon) | Source} */
      HISUI_GROWLITHE = 6058,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Arcanine_(Pokémon) | Source} */
      HISUI_ARCANINE = 6059,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Voltorb_(Pokémon) | Source} */
      HISUI_VOLTORB = 6100,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Electrode_(Pokémon) | Source} */
      HISUI_ELECTRODE = 6101,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Typhlosion_(Pokémon) | Source} */
      HISUI_TYPHLOSION = 6157,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Qwilfish_(Pokémon) | Source} */
      HISUI_QWILFISH = 6211,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sneasel_(Pokémon) | Source} */
      HISUI_SNEASEL = 6215,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Samurott_(Pokémon) | Source} */
      HISUI_SAMUROTT = 6503,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Lilligant_(Pokémon) | Source} */
      HISUI_LILLIGANT = 6549,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zorua_(Pokémon) | Source} */
      HISUI_ZORUA = 6570,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Zoroark_(Pokémon) | Source} */
      HISUI_ZOROARK = 6571,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Braviary_(Pokémon) | Source} */
      HISUI_BRAVIARY = 6628,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Sliggoo_(Pokémon) | Source} */
      HISUI_SLIGGOO = 6705,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Goodra_(Pokémon) | Source} */
      HISUI_GOODRA = 6706,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Avalugg_(Pokémon) | Source} */
      HISUI_AVALUGG = 6713,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Decidueye_(Pokémon) | Source} */
      HISUI_DECIDUEYE = 6724,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Tauros_(Pokémon) | Source} */
      PALDEA_TAUROS = 8128,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Wooper_(Pokémon) | Source} */
      PALDEA_WOOPER = 8194,
      /**{@link https://bulbapedia.bulbagarden.net/wiki/Ursaluna_(Pokémon) | Source} */
      BLOODMOON_URSALUNA = 8901
  }
  
}

declare namespace PokeRogue.enums {
  /** Enum that comprises all possible stat-related attributes, in-battle and permanent, of a Pokemon. */
  export declare enum Stat {
      /** Hit Points */
      HP = 0,
      /** Attack */
      ATK = 1,
      /** Defense */
      DEF = 2,
      /** Special Attack */
      SPATK = 3,
      /** Special Defense */
      SPDEF = 4,
      /** Speed */
      SPD = 5,
      /** Accuracy */
      ACC = 6,
      /** Evasiveness */
      EVA = 7
  }
  /** A constant array comprised of the {@linkcode Stat} values that make up {@linkcode PermanentStat}. */
  export declare const PERMANENT_STATS: readonly [Stat.HP, Stat.ATK, Stat.DEF, Stat.SPATK, Stat.SPDEF, Stat.SPD];
  /** Type used to describe the core, permanent stats of a Pokemon. */
  export type PermanentStat = typeof PERMANENT_STATS[number];
  /** A constant array comprised of the {@linkcode Stat} values that make up {@linkcode EFfectiveStat}. */
  export declare const EFFECTIVE_STATS: readonly [Stat.ATK, Stat.DEF, Stat.SPATK, Stat.SPDEF, Stat.SPD];
  /** Type used to describe the intersection of core stats and stats that have stages in battle. */
  export type EffectiveStat = typeof EFFECTIVE_STATS[number];
  /** A constant array comprised of {@linkcode Stat} the values that make up {@linkcode BattleStat}. */
  export declare const BATTLE_STATS: readonly [Stat.ATK, Stat.DEF, Stat.SPATK, Stat.SPDEF, Stat.SPD, Stat.ACC, Stat.EVA];
  /** Type used to describe the stats that have stages which can be incremented and decremented in battle. */
  export type BattleStat = typeof BATTLE_STATS[number];
  /** A constant array comprised of {@linkcode Stat} the values that make up {@linkcode TempBattleStat}. */
  export declare const TEMP_BATTLE_STATS: readonly [Stat.ATK, Stat.DEF, Stat.SPATK, Stat.SPDEF, Stat.SPD, Stat.ACC];
  /** Type used to describe the stats that have X item (`TEMP_STAT_STAGE_BOOSTER`) equivalents. */
  export type TempBattleStat = typeof TEMP_BATTLE_STATS[number];
  /**
   * Provides the translation key corresponding to the amount of stat stages and whether those stat stages
   * are positive or negative.
   * @param stages the amount of stages
   * @param isIncrease dictates a negative (`false`) or a positive (`true`) stat stage change
   * @returns the translation key fitting the conditions described by {@linkcode stages} and {@linkcode isIncrease}
   */
  export declare function getStatStageChangeDescriptionKey(stages: number, isIncrease: boolean): "battle:statRose" | "battle:statFell" | "battle:statSharplyRose" | "battle:statHarshlyFell" | "battle:statRoseDrastically" | "battle:statSeverelyFell" | "battle:statWontGoAnyHigher" | "battle:statWontGoAnyLower";
  /**
   * Provides the translation key corresponding to a given stat which can be translated into its full name.
   * @param stat the {@linkcode Stat} to be translated
   * @returns the translation key corresponding to the given {@linkcode Stat}
   */
  export declare function getStatKey(stat: Stat): string;
  /**
   * Provides the translation key corresponding to a given stat which can be translated into its shortened name.
   * @param stat the {@linkcode Stat} to be translated
   * @returns the translation key corresponding to the given {@linkcode Stat}
   */
  export declare function getShortenedStatKey(stat: PermanentStat): string;
  
}

declare namespace PokeRogue.enums {
  export declare enum StatusEffect {
      NONE = 0,
      POISON = 1,
      TOXIC = 2,
      PARALYSIS = 3,
      SLEEP = 4,
      FREEZE = 5,
      BURN = 6,
      FAINT = 7
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum TimeOfDay {
      ALL = -1,
      DAWN = 0,
      DAY = 1,
      DUSK = 2,
      NIGHT = 3
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum TrainerType {
      UNKNOWN = 0,
      ACE_TRAINER = 1,
      ARTIST = 2,
      BACKERS = 3,
      BACKPACKER = 4,
      BAKER = 5,
      BEAUTY = 6,
      BIKER = 7,
      BLACK_BELT = 8,
      BREEDER = 9,
      CLERK = 10,
      CYCLIST = 11,
      DANCER = 12,
      DEPOT_AGENT = 13,
      DOCTOR = 14,
      FIREBREATHER = 15,
      FISHERMAN = 16,
      GUITARIST = 17,
      HARLEQUIN = 18,
      HIKER = 19,
      HOOLIGANS = 20,
      HOOPSTER = 21,
      INFIELDER = 22,
      JANITOR = 23,
      LINEBACKER = 24,
      MAID = 25,
      MUSICIAN = 26,
      HEX_MANIAC = 27,
      NURSERY_AIDE = 28,
      OFFICER = 29,
      PARASOL_LADY = 30,
      PILOT = 31,
      POKEFAN = 32,
      PRESCHOOLER = 33,
      PSYCHIC = 34,
      RANGER = 35,
      RICH = 36,
      RICH_KID = 37,
      ROUGHNECK = 38,
      SAILOR = 39,
      SCIENTIST = 40,
      SMASHER = 41,
      SNOW_WORKER = 42,
      STRIKER = 43,
      SCHOOL_KID = 44,
      SWIMMER = 45,
      TWINS = 46,
      VETERAN = 47,
      WAITER = 48,
      WORKER = 49,
      YOUNGSTER = 50,
      ROCKET_GRUNT = 51,
      ARCHER = 52,
      ARIANA = 53,
      PROTON = 54,
      PETREL = 55,
      MAGMA_GRUNT = 56,
      TABITHA = 57,
      COURTNEY = 58,
      AQUA_GRUNT = 59,
      MATT = 60,
      SHELLY = 61,
      GALACTIC_GRUNT = 62,
      JUPITER = 63,
      MARS = 64,
      SATURN = 65,
      PLASMA_GRUNT = 66,
      ZINZOLIN = 67,
      ROOD = 68,
      FLARE_GRUNT = 69,
      BRYONY = 70,
      XEROSIC = 71,
      AETHER_GRUNT = 72,
      FABA = 73,
      SKULL_GRUNT = 74,
      PLUMERIA = 75,
      MACRO_GRUNT = 76,
      OLEANA = 77,
      ROCKET_BOSS_GIOVANNI_1 = 78,
      ROCKET_BOSS_GIOVANNI_2 = 79,
      MAXIE = 80,
      MAXIE_2 = 81,
      ARCHIE = 82,
      ARCHIE_2 = 83,
      CYRUS = 84,
      CYRUS_2 = 85,
      GHETSIS = 86,
      GHETSIS_2 = 87,
      LYSANDRE = 88,
      LYSANDRE_2 = 89,
      LUSAMINE = 90,
      LUSAMINE_2 = 91,
      GUZMA = 92,
      GUZMA_2 = 93,
      ROSE = 94,
      ROSE_2 = 95,
      BROCK = 200,
      MISTY = 201,
      LT_SURGE = 202,
      ERIKA = 203,
      JANINE = 204,
      SABRINA = 205,
      BLAINE = 206,
      GIOVANNI = 207,
      FALKNER = 208,
      BUGSY = 209,
      WHITNEY = 210,
      MORTY = 211,
      CHUCK = 212,
      JASMINE = 213,
      PRYCE = 214,
      CLAIR = 215,
      ROXANNE = 216,
      BRAWLY = 217,
      WATTSON = 218,
      FLANNERY = 219,
      NORMAN = 220,
      WINONA = 221,
      TATE = 222,
      LIZA = 223,
      JUAN = 224,
      ROARK = 225,
      GARDENIA = 226,
      MAYLENE = 227,
      CRASHER_WAKE = 228,
      FANTINA = 229,
      BYRON = 230,
      CANDICE = 231,
      VOLKNER = 232,
      CILAN = 233,
      CHILI = 234,
      CRESS = 235,
      CHEREN = 236,
      LENORA = 237,
      ROXIE = 238,
      BURGH = 239,
      ELESA = 240,
      CLAY = 241,
      SKYLA = 242,
      BRYCEN = 243,
      DRAYDEN = 244,
      MARLON = 245,
      VIOLA = 246,
      GRANT = 247,
      KORRINA = 248,
      RAMOS = 249,
      CLEMONT = 250,
      VALERIE = 251,
      OLYMPIA = 252,
      WULFRIC = 253,
      MILO = 254,
      NESSA = 255,
      KABU = 256,
      BEA = 257,
      ALLISTER = 258,
      OPAL = 259,
      BEDE = 260,
      GORDIE = 261,
      MELONY = 262,
      PIERS = 263,
      MARNIE = 264,
      RAIHAN = 265,
      KATY = 266,
      BRASSIUS = 267,
      IONO = 268,
      KOFU = 269,
      LARRY = 270,
      RYME = 271,
      TULIP = 272,
      GRUSHA = 273,
      LORELEI = 300,
      BRUNO = 301,
      AGATHA = 302,
      LANCE = 303,
      WILL = 304,
      KOGA = 305,
      KAREN = 306,
      SIDNEY = 307,
      PHOEBE = 308,
      GLACIA = 309,
      DRAKE = 310,
      AARON = 311,
      BERTHA = 312,
      FLINT = 313,
      LUCIAN = 314,
      SHAUNTAL = 315,
      MARSHAL = 316,
      GRIMSLEY = 317,
      CAITLIN = 318,
      MALVA = 319,
      SIEBOLD = 320,
      WIKSTROM = 321,
      DRASNA = 322,
      HALA = 323,
      MOLAYNE = 324,
      OLIVIA = 325,
      ACEROLA = 326,
      KAHILI = 327,
      MARNIE_ELITE = 328,
      NESSA_ELITE = 329,
      BEA_ELITE = 330,
      ALLISTER_ELITE = 331,
      RAIHAN_ELITE = 332,
      RIKA = 333,
      POPPY = 334,
      LARRY_ELITE = 335,
      HASSEL = 336,
      CRISPIN = 337,
      AMARYS = 338,
      LACEY = 339,
      DRAYTON = 340,
      BLUE = 350,
      RED = 351,
      LANCE_CHAMPION = 352,
      STEVEN = 353,
      WALLACE = 354,
      CYNTHIA = 355,
      ALDER = 356,
      IRIS = 357,
      DIANTHA = 358,
      HAU = 359,
      LEON = 360,
      GEETA = 361,
      NEMONA = 362,
      KIERAN = 363,
      RIVAL = 375,
      RIVAL_2 = 376,
      RIVAL_3 = 377,
      RIVAL_4 = 378,
      RIVAL_5 = 379,
      RIVAL_6 = 380
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum UiTheme {
      DEFAULT = 0,
      LEGACY = 1
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum VariantTier {
      STANDARD = 0,
      RARE = 1,
      EPIC = 2
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum VariantTier {
      COMMON = 0,
      RARE = 1,
      EPIC = 2
  }
  
}

declare namespace PokeRogue.enums {
  export declare enum WeatherType {
      NONE = 0,
      SUNNY = 1,
      RAIN = 2,
      SANDSTORM = 3,
      HAIL = 4,
      SNOW = 5,
      FOG = 6,
      HEAVY_RAIN = 7,
      HARSH_SUN = 8,
      STRONG_WINDS = 9
  }
  
}

declare namespace PokeRogue.events {
  //import { ArenaTagSide } from "#app/data/arena-tag.js";
  //import { ArenaTagType } from "#enums/arena-tag-type";
  //import { TerrainType } from "#app/data/terrain.js";
  //import { WeatherType } from "#app/data/weather.js";
  /** Alias for all {@linkcode ArenaEvent} type strings */
  export declare enum ArenaEventType {
      /** Triggers when a {@linkcode WeatherType} is added, overlapped, or removed */
      WEATHER_CHANGED = "onWeatherChanged",
      /** Triggers when a {@linkcode TerrainType} is added, overlapped, or removed */
      TERRAIN_CHANGED = "onTerrainChanged",
      /** Triggers when a {@linkcode ArenaTagType} is added */
      TAG_ADDED = "onTagAdded",
      /** Triggers when a {@linkcode ArenaTagType} is removed */
      TAG_REMOVED = "onTagRemoved"
  }
  /**
   * Base container class for all {@linkcode ArenaEventType} events
   * @extends Event
   */
  export declare class ArenaEvent extends Event {
      /** The total duration of the {@linkcode ArenaEventType} */
      duration: number;
      constructor(eventType: ArenaEventType, duration: number);
  }
  /**
   * Container class for {@linkcode ArenaEventType.WEATHER_CHANGED} events
   * @extends ArenaEvent
  */
  export declare class WeatherChangedEvent extends ArenaEvent {
      /** The {@linkcode WeatherType} being overridden */
      oldWeatherType: PokeRogue.data.WeatherType;
      /** The {@linkcode WeatherType} being set */
      newWeatherType: PokeRogue.data.WeatherType;
      constructor(oldWeatherType: PokeRogue.data.WeatherType, newWeatherType: PokeRogue.data.WeatherType, duration: number);
  }
  /**
   * Container class for {@linkcode ArenaEventType.TERRAIN_CHANGED} events
   * @extends ArenaEvent
  */
  export declare class TerrainChangedEvent extends ArenaEvent {
      /** The {@linkcode TerrainType} being overridden */
      oldTerrainType: PokeRogue.data.TerrainType;
      /** The {@linkcode TerrainType} being set */
      newTerrainType: PokeRogue.data.TerrainType;
      constructor(oldTerrainType: PokeRogue.data.TerrainType, newTerrainType: PokeRogue.data.TerrainType, duration: number);
  }
  /**
   * Container class for {@linkcode ArenaEventType.TAG_ADDED} events
   * @extends ArenaEvent
  */
  export declare class TagAddedEvent extends ArenaEvent {
      /** The {@linkcode ArenaTagType} being added */
      arenaTagType: PokeRogue.enums.ArenaTagType;
      /** The {@linkcode ArenaTagSide} the tag is being placed on */
      arenaTagSide: PokeRogue.data.ArenaTagSide;
      /** The current number of layers of the arena trap. */
      arenaTagLayers: number;
      /** The maximum amount of layers of the arena trap. */
      arenaTagMaxLayers: number;
      constructor(arenaTagType: PokeRogue.enums.ArenaTagType, arenaTagSide: PokeRogue.data.ArenaTagSide, duration: number, arenaTagLayers?: number, arenaTagMaxLayers?: number);
  }
  /**
   * Container class for {@linkcode ArenaEventType.TAG_REMOVED} events
   * @extends ArenaEvent
  */
  export declare class TagRemovedEvent extends ArenaEvent {
      /** The {@linkcode ArenaTagType} being removed */
      arenaTagType: PokeRogue.enums.ArenaTagType;
      /** The {@linkcode ArenaTagSide} the tag was being placed on */
      arenaTagSide: PokeRogue.data.ArenaTagSide;
      constructor(arenaTagType: PokeRogue.enums.ArenaTagType, arenaTagSide: PokeRogue.data.ArenaTagSide, duration: number);
  }
  
}

declare namespace PokeRogue.events {
  //import Move from "../data/move";
  //import { BerryModifier } from "../modifier/modifier";
  /** Alias for all {@linkcode BattleScene} events */
  export declare enum BattleSceneEventType {
      /**
       * Triggers when the corresponding setting is changed
       * @see {@linkcode CandyUpgradeNotificationChangedEvent}
       */
      CANDY_UPGRADE_NOTIFICATION_CHANGED = "onCandyUpgradeNotificationChanged",
      /**
       * Triggers when a move is successfully used
       * @see {@linkcode MoveUsedEvent}
       */
      MOVE_USED = "onMoveUsed",
      /**
       * Triggers when a berry gets successfully used
       * @see {@linkcode BerryUsedEvent}
       */
      BERRY_USED = "onBerryUsed",
      /**
       * Triggers at the start of each new encounter
       * @see {@linkcode EncounterPhaseEvent}
       */
      ENCOUNTER_PHASE = "onEncounterPhase",
      /**
       * Triggers on the first turn of a new battle
       * @see {@linkcode TurnInitEvent}
       */
      TURN_INIT = "onTurnInit",
      /**
       * Triggers after a turn ends in battle
       * @see {@linkcode TurnEndEvent}
       */
      TURN_END = "onTurnEnd",
      /**
       * Triggers when a new {@linkcode Arena} is created during initialization
       * @see {@linkcode NewArenaEvent}
       */
      NEW_ARENA = "onNewArena"
  }
  /**
   * Container class for {@linkcode BattleSceneEventType.CANDY_UPGRADE_NOTIFICATION_CHANGED} events
   * @extends Event
  */
  export declare class CandyUpgradeNotificationChangedEvent extends Event {
      /** The new value the setting was changed to */
      newValue: number;
      constructor(newValue: number);
  }
  /**
   * Container class for {@linkcode BattleSceneEventType.MOVE_USED} events
   * @extends Event
  */
  export declare class MoveUsedEvent extends Event {
      /** The ID of the {@linkcode Pokemon} that used the {@linkcode Move} */
      pokemonId: number;
      /** The {@linkcode Move} used */
      move: PokeRogue.data.Move;
      /** The amount of PP used on the {@linkcode Move} this turn */
      ppUsed: number;
      constructor(userId: number, move: PokeRogue.data.Move, ppUsed: number);
  }
  /**
   * Container class for {@linkcode BattleSceneEventType.BERRY_USED} events
   * @extends Event
  */
  export declare class BerryUsedEvent extends Event {
      /** The {@linkcode BerryModifier} being used */
      berryModifier: PokeRogue.modifier.BerryModifier;
      constructor(berry: PokeRogue.modifier.BerryModifier);
  }
  /**
   * Container class for {@linkcode BattleSceneEventType.ENCOUNTER_PHASE} events
   * @extends Event
  */
  export declare class EncounterPhaseEvent extends Event {
      constructor();
  }
  /**
   * Container class for {@linkcode BattleSceneEventType.TURN_INIT} events
   * @extends Event
  */
  export declare class TurnInitEvent extends Event {
      constructor();
  }
  /**
   * Container class for {@linkcode BattleSceneEventType.TURN_END} events
   * @extends Event
  */
  export declare class TurnEndEvent extends Event {
      /** The amount of turns in the current battle */
      turnCount: number;
      constructor(turnCount: number);
  }
  /**
   * Container class for {@linkcode BattleSceneEventType.NEW_ARENA} events
   * @extends Event
  */
  export declare class NewArenaEvent extends Event {
      constructor();
  }
  
}

declare namespace PokeRogue.events {
  export declare enum EggEventType {
      /**
       * Triggers when egg count is changed.
       * @see {@linkcode MoveUsedEvent}
       */
      EGG_COUNT_CHANGED = "onEggCountChanged"
  }
  /**
   * Container class for {@linkcode EggEventType.EGG_COUNT_CHANGED} events
   * @extends Event
  */
  export declare class EggCountChangedEvent extends Event {
      /** The updated egg count. */
      eggCount: integer;
      constructor(eggCount: number);
  }
  
}

declare namespace PokeRogue.field {
  //import BattleScene from "../battle-scene";
  //import { PokeballType } from "../data/pokeball";
  export declare function addPokeballOpenParticles(scene: PokeRogue.BattleScene, x: number, y: number, pokeballType: PokeRogue.data.PokeballType): void;
  export declare function addPokeballCaptureStars(scene: PokeRogue.BattleScene, pokeball: Phaser.GameObjects.Sprite): void;
  export declare function sin(index: integer, amplitude: integer): number;
  export declare function cos(index: integer, amplitude: integer): number;
  
}

declare namespace PokeRogue.field {
  //import BattleScene from "../battle-scene";
  //import { Constructor } from "#app/utils";
  //import PokemonSpecies from "../data/pokemon-species";
  //import { Weather, WeatherType } from "../data/weather";
  //import { Type } from "../data/type";
  //import Move from "../data/move";
  //import { ArenaTag, ArenaTagSide } from "../data/arena-tag";
  //import { BattlerIndex } from "../battle";
  //import { Terrain, TerrainType } from "../data/terrain";
  //import Pokemon from "./pokemon";
  //import { ArenaTagType } from "#enums/arena-tag-type";
  //import { Biome } from "#enums/biome";
  //import { Moves } from "#enums/moves";
  //import { TimeOfDay } from "#enums/time-of-day";
  //import { TrainerType } from "#enums/trainer-type";
  export declare class Arena {
      scene: PokeRogue.BattleScene;
      biomeType: PokeRogue.enums.Biome;
      weather: PokeRogue.data.Weather | null;
      terrain: PokeRogue.data.Terrain | null;
      tags: PokeRogue.data.ArenaTag[];
      bgm: string;
      ignoreAbilities: boolean;
      public lastTimeOfDay;
      public pokemonPool;
      public trainerPool;
      readonly eventTarget: EventTarget;
      constructor(scene: PokeRogue.BattleScene, biome: PokeRogue.enums.Biome, bgm: string);
      init(): void;
      updatePoolsForTimeOfDay(): void;
      randomSpecies(waveIndex: integer, level: integer, attempt?: integer, luckValue?: integer): PokemonSpecies;
      randomTrainerType(waveIndex: integer): TrainerType;
      getSpeciesFormIndex(species: PokeRogue.data.PokemonSpecies): integer;
      getTypeForBiome(): Type.UNKNOWN | Type.NORMAL | Type.FIGHTING | Type.FLYING | Type.POISON | Type.GROUND | Type.ROCK | Type.BUG | Type.GHOST | Type.STEEL | Type.FIRE | Type.WATER | Type.GRASS | Type.ELECTRIC | Type.PSYCHIC | Type.ICE | Type.DRAGON | Type.DARK | Type.FAIRY;
      getBgTerrainColorRatioForBiome(): number;
      /**
       * Sets weather to the override specified in overrides.ts
       * @param weather new weather to set of type WeatherType
       * @returns true to force trySetWeather to return true
       */
      trySetWeatherOverride(weather: PokeRogue.data.WeatherType): boolean;
      /**
       * Attempts to set a new weather to the battle
       * @param weather new weather to set of type WeatherType
       * @param hasPokemonSource is the new weather from a pokemon
       * @returns true if new weather set, false if no weather provided or attempting to set the same weather as currently in use
       */
      trySetWeather(weather: PokeRogue.data.WeatherType, hasPokemonSource: boolean): boolean;
      /**
       * Function to trigger all weather based form changes
       */
      triggerWeatherBasedFormChanges(): void;
      /**
       * Function to trigger all weather based form changes back into their normal forms
       */
      triggerWeatherBasedFormChangesToNormal(): void;
      trySetTerrain(terrain: PokeRogue.data.TerrainType, hasPokemonSource: boolean, ignoreAnim?: boolean): boolean;
      isMoveWeatherCancelled(user: PokeRogue.field.Pokemon, move: PokeRogue.data.Move): boolean;
      isMoveTerrainCancelled(user: PokeRogue.field.Pokemon, targets: PokeRogue.BattlerIndex[], move: PokeRogue.data.Move): boolean;
      getTerrainType(): TerrainType;
      getAttackTypeMultiplier(attackType: PokeRogue.data.Type, grounded: boolean): number;
      /**
       * Gets the denominator for the chance for a trainer spawn
       * @returns n where 1/n is the chance of a trainer battle
       */
      getTrainerChance(): integer;
      getTimeOfDay(): TimeOfDay;
      isOutside(): boolean;
      overrideTint(): [integer, integer, integer];
      getDayTint(): [integer, integer, integer];
      getDuskTint(): [integer, integer, integer];
      getNightTint(): [integer, integer, integer];
      setIgnoreAbilities(ignoreAbilities?: boolean): void;
      applyTagsForSide(tagType: PokeRogue.enums.ArenaTagType | Constructor<ArenaTag>, side: PokeRogue.data.ArenaTagSide, ...args: unknown[]): void;
      applyTags(tagType: PokeRogue.enums.ArenaTagType | Constructor<ArenaTag>, ...args: unknown[]): void;
      addTag(tagType: PokeRogue.enums.ArenaTagType, turnCount: integer, sourceMove: PokeRogue.enums.Moves | undefined, sourceId: integer, side?: ArenaTagSide, quiet?: boolean, targetIndex?: BattlerIndex): boolean;
      getTag(tagType: PokeRogue.enums.ArenaTagType | Constructor<ArenaTag>): ArenaTag | undefined;
      hasTag(tagType: PokeRogue.enums.ArenaTagType): boolean;
      getTagOnSide(tagType: PokeRogue.enums.ArenaTagType | Constructor<ArenaTag>, side: PokeRogue.data.ArenaTagSide): ArenaTag | undefined;
      findTags(tagPredicate: (t: PokeRogue.data.ArenaTag) => boolean): ArenaTag[];
      findTagsOnSide(tagPredicate: (t: PokeRogue.data.ArenaTag) => boolean, side: PokeRogue.data.ArenaTagSide): ArenaTag[];
      lapseTags(): void;
      removeTag(tagType: PokeRogue.enums.ArenaTagType): boolean;
      removeTagOnSide(tagType: PokeRogue.enums.ArenaTagType, side: PokeRogue.data.ArenaTagSide, quiet?: boolean): boolean;
      removeAllTags(): void;
      /**
       * Clears weather, terrain and arena tags when entering new biome or trainer battle.
       */
      resetArenaEffects(): void;
      preloadBgm(): void;
      getBgmLoopPoint(): number;
  }
  export declare function getBiomeKey(biome: PokeRogue.enums.Biome): string;
  export declare function getBiomeHasProps(biomeType: PokeRogue.enums.Biome): boolean;
  export declare class ArenaBase extends Phaser.GameObjects.Container {
      player: boolean;
      biome: PokeRogue.enums.Biome;
      propValue: integer;
      base: Phaser.GameObjects.Sprite;
      props: Phaser.GameObjects.Sprite[];
      constructor(scene: PokeRogue.BattleScene, player: boolean);
      setBiome(biome: PokeRogue.enums.Biome, propValue?: integer): void;
  }
  
}

declare namespace PokeRogue.field {
  //import Pokemon, { DamageResult, HitResult } from "./pokemon";
  export class DamageNumberHandler {
      public damageNumbers;
      constructor();
      add(target: PokeRogue.field.Pokemon, amount: integer, result?: DamageResult | HitResult.HEAL, critical?: boolean): void;
  }
  
}

declare namespace PokeRogue.field {
  //import BattleScene from "../battle-scene";
  export class PokemonSpriteSparkleHandler {
      public sprites;
      setup(scene: PokeRogue.BattleScene): void;
      onLapse(): void;
      add(sprites: Phaser.GameObjects.Sprite | Phaser.GameObjects.Sprite[]): void;
      remove(sprites: Phaser.GameObjects.Sprite | Phaser.GameObjects.Sprite[]): void;
      removeAll(): void;
  }
  
}

declare namespace PokeRogue.field {
  import Phaser from "phaser";
  //import BattleScene, { AnySound } from "../battle-scene";
  //import { Variant } from "#app/data/variant";
  //import BattleInfo from "../ui/battle-info";
  //import Move from "../data/move";
  //import { default as PokemonSpecies, PokemonSpeciesForm } from "../data/pokemon-species";
  //import { Constructor } from "#app/utils";
  //import * as Utils from "../utils";
  //import { Type, TypeDamageMultiplier } from "../data/type";
  //import { type PermanentStat, type BattleStat, type EffectiveStat } from "#enums/stat";
  //import { PokemonHeldItemModifier } from "../modifier/modifier";
  //import { PokeballType } from "../data/pokeball";
  //import { Gender } from "../data/gender";
  //import { Status, StatusEffect } from "../data/status-effect";
  //import { SpeciesFormEvolution } from "../data/pokemon-evolutions";
  //import { BattlerTag, BattlerTagLapseType, MoveRestrictionBattlerTag } from "../data/battler-tags";
  //import { Ability, AbAttr } from "../data/ability";
  //import PokemonData from "../system/pokemon-data";
  //import { BattlerIndex } from "../battle";
  //import { LevelMoves } from "../data/pokemon-level-moves";
  //import { StarterMoveset } from "../system/game-data";
  //import { Nature } from "../data/nature";
  //import { SpeciesFormChange } from "../data/pokemon-forms";
  //import { TrainerSlot } from "../data/trainer-config";
  //import { Abilities } from "#enums/abilities";
  //import { BattlerTagType } from "#enums/battler-tag-type";
  //import { BerryType } from "#enums/berry-type";
  //import { Biome } from "#enums/biome";
  //import { Moves } from "#enums/moves";
  //import { Species } from "#enums/species";
  export declare enum FieldPosition {
      CENTER = 0,
      LEFT = 1,
      RIGHT = 2
  }
  export abstract class Pokemon extends Phaser.GameObjects.Container {
      id: integer;
      name: string;
      nickname: string;
      species: PokeRogue.data.PokemonSpecies;
      formIndex: integer;
      abilityIndex: integer;
      passive: boolean;
      shiny: boolean;
      variant: PokeRogue.data.Variant;
      pokeball: PokeRogue.data.PokeballType;
      protected battleInfo: PokeRogue.ui.BattleInfo;
      level: integer;
      exp: integer;
      levelExp: integer;
      gender: PokeRogue.data.Gender;
      hp: integer;
      stats: integer[];
      ivs: integer[];
      nature: PokeRogue.data.Nature;
      natureOverride: PokeRogue.data.Nature | -1;
      moveset: (PokemonMove | null)[];
      status: PokeRogue.data.Status | null;
      friendship: integer;
      metLevel: integer;
      metBiome: PokeRogue.enums.Biome | -1;
      metSpecies: PokeRogue.enums.Species;
      luck: integer;
      pauseEvolutions: boolean;
      pokerus: boolean;
      wildFlee: boolean;
      fusionSpecies: PokeRogue.data.PokemonSpecies | null;
      fusionFormIndex: integer;
      fusionAbilityIndex: integer;
      fusionShiny: boolean;
      fusionVariant: PokeRogue.data.Variant;
      fusionGender: PokeRogue.data.Gender;
      fusionLuck: integer;
      public summonDataPrimer;
      summonData: PokemonSummonData;
      battleData: PokemonBattleData;
      battleSummonData: PokemonBattleSummonData;
      turnData: PokemonTurnData;
      fieldPosition: FieldPosition;
      maskEnabled: boolean;
      maskSprite: Phaser.GameObjects.Sprite | null;
      usedTMs: PokeRogue.enums.Moves[];
      public shinySparkle;
      constructor(scene: PokeRogue.BattleScene, x: number, y: number, species: PokeRogue.data.PokemonSpecies, level: integer, abilityIndex?: integer, formIndex?: integer, gender?: Gender, shiny?: boolean, variant?: Variant, ivs?: integer[], nature?: Nature, dataSource?: Pokemon | PokemonData);
      getNameToRender(): string;
      init(): void;
      abstract initBattleInfo(): void;
      isOnField(): boolean;
      isFainted(checkStatus?: boolean): boolean;
      /**
       * Check if this pokemon is both not fainted (or a fled wild pokemon) and allowed to be in battle.
       * This is frequently a better alternative to {@link isFainted}
       * @returns {boolean} True if pokemon is allowed in battle
       */
      isAllowedInBattle(): boolean;
      isActive(onField?: boolean): boolean;
      getDexAttr(): bigint;
      /**
       * Sets the Pokemon's name. Only called when loading a Pokemon so this function needs to be called when
       * initializing hardcoded Pokemon or else it will not display the form index name properly.
       * @returns n/a
       */
      generateName(): void;
      abstract isPlayer(): boolean;
      abstract hasTrainer(): boolean;
      abstract getFieldIndex(): integer;
      abstract getBattlerIndex(): BattlerIndex;
      loadAssets(ignoreOverride?: boolean): Promise<void>;
      getFormKey(): string;
      getFusionFormKey(): string | null;
      getSpriteAtlasPath(ignoreOverride?: boolean): string;
      getBattleSpriteAtlasPath(back?: boolean, ignoreOverride?: boolean): string;
      getSpriteId(ignoreOverride?: boolean): string;
      getBattleSpriteId(back?: boolean, ignoreOverride?: boolean): string;
      getSpriteKey(ignoreOverride?: boolean): string;
      getBattleSpriteKey(back?: boolean, ignoreOverride?: boolean): string;
      getFusionSpriteId(ignoreOverride?: boolean): string;
      getFusionBattleSpriteId(back?: boolean, ignoreOverride?: boolean): string;
      getFusionBattleSpriteKey(back?: boolean, ignoreOverride?: boolean): string;
      getFusionBattleSpriteAtlasPath(back?: boolean, ignoreOverride?: boolean): string;
      getIconAtlasKey(ignoreOverride?: boolean): string;
      getFusionIconAtlasKey(ignoreOverride?: boolean): string;
      getIconId(ignoreOverride?: boolean): string;
      getFusionIconId(ignoreOverride?: boolean): string;
      getSpeciesForm(ignoreOverride?: boolean): PokemonSpeciesForm;
      getFusionSpeciesForm(ignoreOverride?: boolean): PokemonSpeciesForm;
      getSprite(): Phaser.GameObjects.Sprite;
      getTintSprite(): Phaser.GameObjects.Sprite | null;
      getSpriteScale(): number;
      getHeldItems(): PokemonHeldItemModifier[];
      updateScale(): void;
      updateSpritePipelineData(): void;
      initShinySparkle(): void;
      /**
       * Attempts to animate a given {@linkcode Phaser.GameObjects.Sprite}
       * @see {@linkcode Phaser.GameObjects.Sprite.play}
       * @param sprite {@linkcode Phaser.GameObjects.Sprite} to animate
       * @param tintSprite {@linkcode Phaser.GameObjects.Sprite} placed on top of the sprite to add a color tint
       * @param animConfig {@linkcode String} to pass to {@linkcode Phaser.GameObjects.Sprite.play}
       * @returns true if the sprite was able to be animated
       */
      tryPlaySprite(sprite: Phaser.GameObjects.Sprite, tintSprite: Phaser.GameObjects.Sprite, key: string): boolean;
      playAnim(): void;
      getFieldPositionOffset(): [number, number];
      setFieldPosition(fieldPosition: FieldPosition, duration?: integer): Promise<void>;
      /**
       * Retrieves the entire set of stats of the {@linkcode Pokemon}.
       * @param bypassSummonData prefer actual stats (`true` by default) or in-battle overriden stats (`false`)
       * @returns the numeric values of the {@linkcode Pokemon}'s stats
       */
      getStats(bypassSummonData?: boolean): number[];
      /**
       * Retrieves the corresponding {@linkcode PermanentStat} of the {@linkcode Pokemon}.
       * @param stat the desired {@linkcode PermanentStat}
       * @param bypassSummonData prefer actual stats (`true` by default) or in-battle overridden stats (`false`)
       * @returns the numeric value of the desired {@linkcode Stat}
       */
      getStat(stat: PermanentStat, bypassSummonData?: boolean): number;
      /**
       * Writes the value to the corrseponding {@linkcode PermanentStat} of the {@linkcode Pokemon}.
       *
       * Note that this does nothing if {@linkcode value} is less than 0.
       * @param stat the desired {@linkcode PermanentStat} to be overwritten
       * @param value the desired numeric value
       * @param bypassSummonData write to actual stats (`true` by default) or in-battle overridden stats (`false`)
       */
      setStat(stat: PermanentStat, value: number, bypassSummonData?: boolean): void;
      /**
       * Retrieves the entire set of in-battle stat stages of the {@linkcode Pokemon}.
       * @returns the numeric values of the {@linkcode Pokemon}'s in-battle stat stages if available, a fresh stat stage array otherwise
       */
      getStatStages(): number[];
      /**
       * Retrieves the in-battle stage of the specified {@linkcode BattleStat}.
       * @param stat the {@linkcode BattleStat} whose stage is desired
       * @returns the stage of the desired {@linkcode BattleStat} if available, 0 otherwise
       */
      getStatStage(stat: BattleStat): number;
      /**
       * Writes the value to the in-battle stage of the corresponding {@linkcode BattleStat} of the {@linkcode Pokemon}.
       *
       * Note that, if the value is not within a range of [-6, 6], it will be forced to the closest range bound.
       * @param stat the {@linkcode BattleStat} whose stage is to be overwritten
       * @param value the desired numeric value
       */
      setStatStage(stat: BattleStat, value: number): void;
      /**
       * Retrieves the critical-hit stage considering the move used and the Pokemon
       * who used it.
       * @param source the {@linkcode Pokemon} who using the move
       * @param move the {@linkcode Move} being used
       * @returns the final critical-hit stage value
       */
      getCritStage(source: Pokemon, move: PokeRogue.data.Move): number;
      /**
       * Calculates and retrieves the final value of a stat considering any held
       * items, move effects, opponent abilities, and whether there was a critical
       * hit.
       * @param stat the desired {@linkcode EffectiveStat}
       * @param opponent the target {@linkcode Pokemon}
       * @param move the {@linkcode Move} being used
       * @param isCritical determines whether a critical hit has occurred or not (`false` by default)
       * @returns the final in-battle value of a stat
       */
      getEffectiveStat(stat: EffectiveStat, opponent?: Pokemon, move?: Move, isCritical?: boolean): integer;
      calculateStats(): void;
      getNature(): Nature;
      setNature(nature: PokeRogue.data.Nature): void;
      generateNature(naturePool?: Nature[]): void;
      isFullHp(): boolean;
      getMaxHp(): integer;
      getInverseHp(): integer;
      getHpRatio(precise?: boolean): number;
      generateGender(): void;
      getGender(ignoreOverride?: boolean): Gender;
      getFusionGender(ignoreOverride?: boolean): Gender;
      isShiny(): boolean;
      getVariant(): Variant;
      getLuck(): integer;
      isFusion(): boolean;
      abstract isBoss(): boolean;
      getMoveset(ignoreOverride?: boolean): (PokemonMove | null)[];
      /**
       * Checks which egg moves have been unlocked for the {@linkcode Pokemon} based
       * on the species it was met at or by the first {@linkcode Pokemon} in its evolution
       * line that can act as a starter and provides those egg moves.
       * @returns an array of {@linkcode Moves}, the length of which is determined by how many
       * egg moves are unlocked for that species.
       */
      getUnlockedEggMoves(): Moves[];
      /**
       * Gets all possible learnable level moves for the {@linkcode Pokemon},
       * excluding any moves already known.
       *
       * Available egg moves are only included if the {@linkcode Pokemon} was
       * in the starting party of the run and if Fresh Start is not active.
       * @returns an array of {@linkcode Moves}, the length of which is determined
       * by how many learnable moves there are for the {@linkcode Pokemon}.
       */
      getLearnableLevelMoves(): Moves[];
      /**
       * Gets the types of a pokemon
       * @param includeTeraType boolean to include tera-formed type, default false
       * @param forDefend boolean if the pokemon is defending from an attack
       * @param ignoreOverride boolean if true, ignore ability changing effects
       * @returns array of {@linkcode Type}
       */
      getTypes(includeTeraType?: boolean, forDefend?: boolean, ignoreOverride?: boolean): Type[];
      isOfType(type: PokeRogue.data.Type, includeTeraType?: boolean, forDefend?: boolean, ignoreOverride?: boolean): boolean;
      /**
       * Gets the non-passive ability of the pokemon. This accounts for fusions and ability changing effects.
       * This should rarely be called, most of the time {@link hasAbility} or {@link hasAbilityWithAttr} are better used as
       * those check both the passive and non-passive abilities and account for ability suppression.
       * @see {@link hasAbility} {@link hasAbilityWithAttr} Intended ways to check abilities in most cases
       * @param {boolean} ignoreOverride If true, ignore ability changing effects
       * @returns {Ability} The non-passive ability of the pokemon
       */
      getAbility(ignoreOverride?: boolean): Ability;
      /**
       * Gets the passive ability of the pokemon. This should rarely be called, most of the time
       * {@link hasAbility} or {@link hasAbilityWithAttr} are better used as those check both the passive and
       * non-passive abilities and account for ability suppression.
       * @see {@link hasAbility} {@link hasAbilityWithAttr} Intended ways to check abilities in most cases
       * @returns {Ability} The passive ability of the pokemon
       */
      getPassiveAbility(): Ability;
      /**
       * Gets a list of all instances of a given ability attribute among abilities this pokemon has.
       * Accounts for all the various effects which can affect whether an ability will be present or
       * in effect, and both passive and non-passive.
       * @param attrType {@linkcode AbAttr} The ability attribute to check for.
       * @param canApply {@linkcode Boolean} If false, it doesn't check whether the ability is currently active
       * @param ignoreOverride {@linkcode Boolean} If true, it ignores ability changing effects
       * @returns {AbAttr[]} A list of all the ability attributes on this ability.
       */
      getAbilityAttrs(attrType: {
          new (...args: any[]): AbAttr;
      }, canApply?: boolean, ignoreOverride?: boolean): AbAttr[];
      /**
       * Checks if a pokemon has a passive either from:
       *  - bought with starter candy
       *  - set by override
       *  - is a boss pokemon
       * @returns whether or not a pokemon should have a passive
       */
      hasPassive(): boolean;
      /**
       * Checks whether an ability of a pokemon can be currently applied. This should rarely be
       * directly called, as {@link hasAbility} and {@link hasAbilityWithAttr} already call this.
       * @see {@link hasAbility} {@link hasAbilityWithAttr} Intended ways to check abilities in most cases
       * @param {boolean} passive If true, check if passive can be applied instead of non-passive
       * @returns {Ability} The passive ability of the pokemon
       */
      canApplyAbility(passive?: boolean): boolean;
      /**
       * Checks whether a pokemon has the specified ability and it's in effect. Accounts for all the various
       * effects which can affect whether an ability will be present or in effect, and both passive and
       * non-passive. This is the primary way to check whether a pokemon has a particular ability.
       * @param {Abilities} ability The ability to check for
       * @param {boolean} canApply If false, it doesn't check whether the ability is currently active
       * @param {boolean} ignoreOverride If true, it ignores ability changing effects
       * @returns {boolean} Whether the ability is present and active
       */
      hasAbility(ability: PokeRogue.enums.Abilities, canApply?: boolean, ignoreOverride?: boolean): boolean;
      /**
       * Checks whether a pokemon has an ability with the specified attribute and it's in effect.
       * Accounts for all the various effects which can affect whether an ability will be present or
       * in effect, and both passive and non-passive. This is one of the two primary ways to check
       * whether a pokemon has a particular ability.
       * @param {AbAttr} attrType The ability attribute to check for
       * @param {boolean} canApply If false, it doesn't check whether the ability is currently active
       * @param {boolean} ignoreOverride If true, it ignores ability changing effects
       * @returns {boolean} Whether an ability with that attribute is present and active
       */
      hasAbilityWithAttr(attrType: PokeRogue.Constructor<AbAttr>, canApply?: boolean, ignoreOverride?: boolean): boolean;
      getWeight(): number;
      /**
       * Gets the tera-formed type of the pokemon, or UNKNOWN if not present
       * @returns the {@linkcode Type}
       */
      getTeraType(): Type;
      isTerastallized(): boolean;
      isGrounded(): boolean;
      /**
       * Determines whether this Pokemon is prevented from running or switching due
       * to effects from moves and/or abilities.
       * @param trappedAbMessages `string[]` If defined, ability trigger messages
       * (e.g. from Shadow Tag) are forwarded through this array.
       * @param simulated `boolean` if `true`, applies abilities via simulated calls.
       * @returns
       */
      isTrapped(trappedAbMessages?: string[], simulated?: boolean): boolean;
      /**
       * Calculates the type of a move when used by this Pokemon after
       * type-changing move and ability attributes have applied.
       * @param move {@linkcode Move} The move being used.
       * @param simulated If `true`, prevents showing abilities applied in this calculation.
       * @returns the {@linkcode Type} of the move after attributes are applied
       */
      getMoveType(move: PokeRogue.data.Move, simulated?: boolean): Type;
      /**
       * Calculates the effectiveness of a move against the Pokémon.
       *
       * @param source {@linkcode Pokemon} The attacking Pokémon.
       * @param move {@linkcode Move} The move being used by the attacking Pokémon.
       * @param ignoreAbility Whether to ignore abilities that might affect type effectiveness or immunity (defaults to `false`).
       * @param simulated Whether to apply abilities via simulated calls (defaults to `true`)
       * @param cancelled {@linkcode Utils.BooleanHolder} Stores whether the move was cancelled by a non-type-based immunity.
       * Currently only used by {@linkcode Pokemon.apply} to determine whether a "No effect" message should be shown.
       * @returns The type damage multiplier, indicating the effectiveness of the move
       */
      getMoveEffectiveness(source: Pokemon, move: PokeRogue.data.Move, ignoreAbility?: boolean, simulated?: boolean, cancelled?: Utils.BooleanHolder): TypeDamageMultiplier;
      /**
       * Calculates the type effectiveness multiplier for an attack type
       * @param moveType {@linkcode Type} the type of the move being used
       * @param source {@linkcode Pokemon} the Pokemon using the move
       * @param ignoreStrongWinds whether or not this ignores strong winds (anticipation, forewarn, stealth rocks)
       * @param simulated tag to only apply the strong winds effect message when the move is used
       * @returns a multiplier for the type effectiveness
       */
      getAttackTypeEffectiveness(moveType: PokeRogue.data.Type, source?: Pokemon, ignoreStrongWinds?: boolean, simulated?: boolean): TypeDamageMultiplier;
      /**
       * Computes the given Pokemon's matchup score against this Pokemon.
       * In most cases, this score ranges from near-zero to 16, but the maximum possible matchup score is 64.
       * @param opponent {@linkcode Pokemon} The Pokemon to compare this Pokemon against
       * @returns A score value based on how favorable this Pokemon is when fighting the given Pokemon
       */
      getMatchupScore(opponent: Pokemon): number;
      getEvolution(): SpeciesFormEvolution | null;
      /**
       * Gets all level up moves in a given range for a particular pokemon.
       * @param {integer} startingLevel Don't include moves below this level
       * @param {boolean} includeEvolutionMoves Whether to include evolution moves
       * @param {boolean} simulateEvolutionChain Whether to include moves from prior evolutions
       * @param {boolean} includeRelearnerMoves Whether to include moves that would require a relearner. Note the move relearner inherently allows evolution moves
       * @returns {LevelMoves} A list of moves and the levels they can be learned at
       */
      getLevelMoves(startingLevel?: integer, includeEvolutionMoves?: boolean, simulateEvolutionChain?: boolean, includeRelearnerMoves?: boolean): LevelMoves;
      /**
       * Helper function for getLevelMoves.
       * Finds all non-duplicate items from the input, and pushes them into the output.
       * Two items count as duplicate if they have the same Move, regardless of level.
       *
       * @param levelMoves the input array to search for non-duplicates from
       * @param ret the output array to be pushed into.
       */
      public getUniqueMoves;
      setMove(moveIndex: integer, moveId: PokeRogue.enums.Moves): void;
      /**
       * Function that tries to set a Pokemon shiny based on the trainer's trainer ID and secret ID.
       * Endless Pokemon in the end biome are unable to be set to shiny
       *
       * The exact mechanic is that it calculates E as the XOR of the player's trainer ID and secret ID.
       * F is calculated as the XOR of the first 16 bits of the Pokemon's ID with the last 16 bits.
       * The XOR of E and F are then compared to the {@linkcode shinyThreshold} (or {@linkcode thresholdOverride} if set) to see whether or not to generate a shiny.
       * The base shiny odds are {@linkcode baseShinyChance} / 65536
       * @param thresholdOverride number that is divided by 2^16 (65536) to get the shiny chance, overrides {@linkcode shinyThreshold} if set (bypassing shiny rate modifiers such as Shiny Charm)
       * @returns true if the Pokemon has been set as a shiny, false otherwise
       */
      trySetShiny(thresholdOverride?: integer): boolean;
      /**
       * Generates a variant
       * Has a 10% of returning 2 (epic variant)
       * And a 30% of returning 1 (rare variant)
       * Returns 0 (basic shiny) if there is no variant or 60% of the time otherwise
       * @returns the shiny variant
       */
      generateVariant(): Variant;
      generateFusionSpecies(forStarter?: boolean): void;
      clearFusionSpecies(): void;
      generateAndPopulateMoveset(): void;
      trySelectMove(moveIndex: integer, ignorePp?: boolean): boolean;
      showInfo(): void;
      hideInfo(): Promise<void>;
      /**
       * sets if the pokemon has fled (implies it's a wild pokemon)
       * @param status - boolean
       */
      setWildFlee(status: boolean): void;
      updateInfo(instant?: boolean): Promise<void>;
      /**
       * Show or hide the type effectiveness multiplier window
       * Passing undefined will hide the window
       */
      updateEffectiveness(effectiveness?: string): void;
      toggleStats(visible: boolean): void;
      toggleFlyout(visible: boolean): void;
      addExp(exp: integer): void;
      getOpponent(targetIndex: integer): Pokemon | null;
      getOpponents(): Pokemon[];
      getOpponentDescriptor(): string;
      getAlly(): Pokemon;
      /**
       * Gets the Pokémon on the allied field.
       *
       * @returns An array of Pokémon on the allied field.
       */
      getAlliedField(): Pokemon[];
      /**
       * Calculates the stat stage multiplier of the user against an opponent.
       *
       * Note that this does not apply to evasion or accuracy
       * @see {@linkcode getAccuracyMultiplier}
       * @param stat the desired {@linkcode EffectiveStat}
       * @param opponent the target {@linkcode Pokemon}
       * @param move the {@linkcode Move} being used
       * @param isCritical determines whether a critical hit has occurred or not (`false` by default)
       * @return the stat stage multiplier to be used for effective stat calculation
       */
      getStatStageMultiplier(stat: EffectiveStat, opponent?: Pokemon, move?: Move, isCritical?: boolean): number;
      /**
       * Calculates the accuracy multiplier of the user against a target.
       *
       * This method considers various factors such as the user's accuracy level, the target's evasion level,
       * abilities, and modifiers to compute the final accuracy multiplier.
       *
       * @param target {@linkcode Pokemon} - The target Pokémon against which the move is used.
       * @param sourceMove {@linkcode Move}  - The move being used by the user.
       * @returns The calculated accuracy multiplier.
       */
      getAccuracyMultiplier(target: Pokemon, sourceMove: PokeRogue.data.Move): number;
      /**
      * Apply the results of a move to this pokemon
      * @param {Pokemon} source The pokemon using the move
      * @param {PokemonMove} battlerMove The move being used
      * @returns {HitResult} The result of the attack
      */
      apply(source: Pokemon, move: PokeRogue.data.Move): HitResult;
      /**
       * Called by damageAndUpdate()
       * @param damage integer
       * @param ignoreSegments boolean, not currently used
       * @param preventEndure  used to update damage if endure or sturdy
       * @param ignoreFaintPhase  flag on wheter to add FaintPhase if pokemon after applying damage faints
       * @returns integer representing damage
       */
      damage(damage: integer, ignoreSegments?: boolean, preventEndure?: boolean, ignoreFaintPhase?: boolean): integer;
      /**
       * Called by apply(), given the damage, adds a new DamagePhase and actually updates HP values, etc.
       * @param damage integer - passed to damage()
       * @param result an enum if it's super effective, not very, etc.
       * @param critical boolean if move is a critical hit
       * @param ignoreSegments boolean, passed to damage() and not used currently
       * @param preventEndure boolean, ignore endure properties of pokemon, passed to damage()
       * @param ignoreFaintPhase boolean to ignore adding a FaintPhase, passsed to damage()
       * @returns integer of damage done
       */
      damageAndUpdate(damage: integer, result?: DamageResult, critical?: boolean, ignoreSegments?: boolean, preventEndure?: boolean, ignoreFaintPhase?: boolean): integer;
      heal(amount: integer): integer;
      isBossImmune(): boolean;
      isMax(): boolean;
      canAddTag(tagType: PokeRogue.enums.BattlerTagType): boolean;
      addTag(tagType: PokeRogue.enums.BattlerTagType, turnCount?: integer, sourceMove?: Moves, sourceId?: integer): boolean;
      /** @overload */
      getTag(tagType: PokeRogue.enums.BattlerTagType): BattlerTag | null;
      /** @overload */
      getTag<T extends PokeRogue.data.BattlerTag>(tagType: PokeRogue.Constructor<T>): T | null;
      findTag(tagFilter: ((tag: PokeRogue.data.BattlerTag) => boolean)): BattlerTag;
      findTags(tagFilter: ((tag: PokeRogue.data.BattlerTag) => boolean)): BattlerTag[];
      lapseTag(tagType: PokeRogue.enums.BattlerTagType): boolean;
      lapseTags(lapseType: PokeRogue.data.BattlerTagLapseType): void;
      removeTag(tagType: PokeRogue.enums.BattlerTagType): boolean;
      findAndRemoveTags(tagFilter: ((tag: PokeRogue.data.BattlerTag) => boolean)): boolean;
      removeTagsBySourceId(sourceId: integer): void;
      transferTagsBySourceId(sourceId: integer, newSourceId: integer): void;
      /**
       * Transferring stat changes and Tags
       * @param source {@linkcode Pokemon} the pokemon whose stats/Tags are to be passed on from, ie: the Pokemon using Baton Pass
       */
      transferSummon(source: Pokemon): void;
      /**
       * Gets whether the given move is currently disabled for this Pokemon.
       *
       * @param {Moves} moveId {@linkcode Moves} ID of the move to check
       * @returns {boolean} `true` if the move is disabled for this Pokemon, otherwise `false`
       *
       * @see {@linkcode MoveRestrictionBattlerTag}
       */
      isMoveRestricted(moveId: PokeRogue.enums.Moves): boolean;
      /**
       * Gets the {@link MoveRestrictionBattlerTag} that is restricting a move, if it exists.
       *
       * @param {Moves} moveId {@linkcode Moves} ID of the move to check
       * @returns {MoveRestrictionBattlerTag | null} the first tag on this Pokemon that restricts the move, or `null` if the move is not restricted.
       */
      getRestrictingTag(moveId: PokeRogue.enums.Moves): MoveRestrictionBattlerTag | null;
      getMoveHistory(): TurnMove[];
      pushMoveHistory(turnMove: TurnMove): void;
      getLastXMoves(turnCount?: integer): TurnMove[];
      getMoveQueue(): QueuedMove[];
      /**
       * If this Pokemon is using a multi-hit move, cancels all subsequent strikes
       * @param {Pokemon} target If specified, this only cancels subsequent strikes against the given target
       */
      stopMultiHit(target?: Pokemon): void;
      changeForm(formChange: PokeRogue.data.SpeciesFormChange): Promise<void>;
      cry(soundConfig?: Phaser.Types.Sound.SoundConfig, sceneOverride?: BattleScene): AnySound;
      faintCry(callback: Function): void;
      public fusionFaintCry;
      isOppositeGender(pokemon: Pokemon): boolean;
      canSetStatus(effect: PokeRogue.data.StatusEffect | undefined, quiet?: boolean, overrideStatus?: boolean, sourcePokemon?: Pokemon | null): boolean;
      trySetStatus(effect: PokeRogue.data.StatusEffect | undefined, asPhase?: boolean, sourcePokemon?: Pokemon | null, cureTurn?: integer | null, sourceText?: string | null): boolean;
      /**
      * Resets the status of a pokemon.
      * @param revive Whether revive should be cured; defaults to true.
      * @param confusion Whether resetStatus should include confusion or not; defaults to false.
      * @param reloadAssets Whether to reload the assets or not; defaults to false.
      */
      resetStatus(revive?: boolean, confusion?: boolean, reloadAssets?: boolean): void;
      primeSummonData(summonDataPrimer: PokemonSummonData): void;
      resetSummonData(): void;
      resetBattleData(): void;
      resetBattleSummonData(): void;
      resetTurnData(): void;
      getExpValue(): integer;
      setFrameRate(frameRate: integer): void;
      tint(color: number, alpha?: number, duration?: integer, ease?: string): void;
      untint(duration: integer, ease?: string): void;
      enableMask(): void;
      disableMask(): void;
      sparkle(): void;
      updateFusionPalette(ignoreOveride?: boolean): void;
      /**
       * Generates a random number using the current battle's seed, or the global seed if `this.scene.currentBattle` is falsy
       * <!-- @import "../battle".Battle -->
       * This calls either {@linkcode BattleScene.randBattleSeedInt}({@linkcode range}, {@linkcode min}) in `src/battle-scene.ts`
       * which calls {@linkcode Battle.randSeedInt}(`scene`, {@linkcode range}, {@linkcode min}) in `src/battle.ts`
       * which calls {@linkcode Utils.randSeedInt randSeedInt}({@linkcode range}, {@linkcode min}) in `src/utils.ts`,
       * or it directly calls {@linkcode Utils.randSeedInt randSeedInt}({@linkcode range}, {@linkcode min}) in `src/utils.ts` if there is no current battle
       *
       * @param range How large of a range of random numbers to choose from. If {@linkcode range} <= 1, returns {@linkcode min}
       * @param min The minimum integer to pick, default `0`
       * @returns A random integer between {@linkcode min} and ({@linkcode min} + {@linkcode range} - 1)
       */
      randSeedInt(range: integer, min?: integer): integer;
      /**
       * Generates a random number using the current battle's seed, or the global seed if `this.scene.currentBattle` is falsy
       * @param min The minimum integer to generate
       * @param max The maximum integer to generate
       * @returns a random integer between {@linkcode min} and {@linkcode max} inclusive
       */
      randSeedIntRange(min: integer, max: integer): integer;
      /**
       * Causes a Pokemon to leave the field (such as in preparation for a switch out/escape).
       * @param clearEffects Indicates if effects should be cleared (true) or passed
       * to the next pokemon, such as during a baton pass (false)
       * @param hideInfo Indicates if this should also play the animation to hide the Pokemon's
       * info container.
       */
      leaveField(clearEffects?: boolean, hideInfo?: boolean): void;
      destroy(): void;
      getBattleInfo(): BattleInfo;
      /**
       * Checks whether or not the Pokemon's root form has the same ability
       * @param abilityIndex the given ability index we are checking
       * @returns true if the abilities are the same
       */
      hasSameAbilityInRootForm(abilityIndex: number): boolean;
  }
  export interface Pokemon {
      scene: PokeRogue.BattleScene;
  }
  export declare class PlayerPokemon extends Pokemon {
      compatibleTms: PokeRogue.enums.Moves[];
      usedTms: PokeRogue.enums.Moves[];
      constructor(scene: PokeRogue.BattleScene, species: PokeRogue.data.PokemonSpecies, level: integer, abilityIndex?: integer, formIndex?: integer, gender?: Gender, shiny?: boolean, variant?: Variant, ivs?: integer[], nature?: Nature, dataSource?: Pokemon | PokemonData);
      initBattleInfo(): void;
      isPlayer(): boolean;
      hasTrainer(): boolean;
      isBoss(): boolean;
      getFieldIndex(): integer;
      getBattlerIndex(): BattlerIndex;
      generateCompatibleTms(): void;
      tryPopulateMoveset(moveset: PokeRogue.system.StarterMoveset): boolean;
      /**
       * Causes this mon to leave the field (via {@linkcode leaveField}) and then
       * opens the party switcher UI to switch a new mon in
       * @param batonPass Indicates if this switch was caused by a baton pass (and
       * thus should maintain active mon effects)
       */
      switchOut(batonPass: boolean): Promise<void>;
      addFriendship(friendship: integer): void;
      /**
       * Handles Revival Blessing when used by player.
       * @returns Promise to revive a pokemon.
       * @see {@linkcode RevivalBlessingAttr}
       */
      revivalBlessing(): Promise<void>;
      getPossibleEvolution(evolution: PokeRogue.data.SpeciesFormEvolution | null): Promise<Pokemon>;
      evolve(evolution: PokeRogue.data.SpeciesFormEvolution | null, preEvolution: PokeRogue.data.PokemonSpeciesForm): Promise<void>;
      public handleSpecialEvolutions;
      getPossibleForm(formChange: PokeRogue.data.SpeciesFormChange): Promise<Pokemon>;
      changeForm(formChange: PokeRogue.data.SpeciesFormChange): Promise<void>;
      clearFusionSpecies(): void;
      /**
      * Returns a Promise to fuse two PlayerPokemon together
      * @param pokemon The PlayerPokemon to fuse to this one
      */
      fuse(pokemon: PlayerPokemon): Promise<void>;
      unfuse(): Promise<void>;
      /** Returns a deep copy of this Pokemon's moveset array */
      copyMoveset(): PokemonMove[];
  }
  export declare class EnemyPokemon extends Pokemon {
      trainerSlot: PokeRogue.data.TrainerSlot;
      aiType: AiType;
      bossSegments: integer;
      bossSegmentIndex: integer;
      /** To indicate of the instance was populated with a dataSource -> e.g. loaded & populated from session data */
      readonly isPopulatedFromDataSource: boolean;
      constructor(scene: PokeRogue.BattleScene, species: PokeRogue.data.PokemonSpecies, level: integer, trainerSlot: PokeRogue.data.TrainerSlot, boss: boolean, dataSource?: PokemonData);
      initBattleInfo(): void;
      /**
       * Sets the pokemons boss status. If true initializes the boss segments either from the arguments
       * or through the the Scene.getEncounterBossSegments function
       *
       * @param boss if the pokemon is a boss
       * @param bossSegments amount of boss segments (health-bar segments)
       */
      setBoss(boss?: boolean, bossSegments?: integer): void;
      generateAndPopulateMoveset(formIndex?: integer): void;
      /**
       * Determines the move this Pokemon will use on the next turn, as well as
       * the Pokemon the move will target.
       * @returns this Pokemon's next move in the format {move, moveTargets}
       */
      getNextMove(): QueuedMove;
      /**
       * Determines the Pokemon the given move would target if used by this Pokemon
       * @param moveId {@linkcode Moves} The move to be used
       * @returns The indexes of the Pokemon the given move would target
       */
      getNextTargets(moveId: PokeRogue.enums.Moves): BattlerIndex[];
      isPlayer(): boolean;
      hasTrainer(): boolean;
      isBoss(): boolean;
      getBossSegmentIndex(): integer;
      damage(damage: integer, ignoreSegments?: boolean, preventEndure?: boolean, ignoreFaintPhase?: boolean): integer;
      canBypassBossSegments(segmentCount?: integer): boolean;
      handleBossSegmentCleared(segmentIndex: integer): void;
      heal(amount: integer): integer;
      getFieldIndex(): integer;
      getBattlerIndex(): BattlerIndex;
      addToParty(pokeballType: PokeRogue.data.PokeballType): PlayerPokemon;
  }
  export interface TurnMove {
      move: PokeRogue.enums.Moves;
      targets?: BattlerIndex[];
      result: MoveResult;
      virtual?: boolean;
      turn?: number;
  }
  export interface QueuedMove {
      move: PokeRogue.enums.Moves;
      targets: PokeRogue.BattlerIndex[];
      ignorePP?: boolean;
  }
  export interface AttackMoveResult {
      move: PokeRogue.enums.Moves;
      result: DamageResult;
      damage: number;
      critical: boolean;
      sourceId: number;
      sourceBattlerIndex: PokeRogue.BattlerIndex;
  }
  export declare class PokemonSummonData {
      statStages: number[];
      moveQueue: QueuedMove[];
      tags: PokeRogue.data.BattlerTag[];
      abilitySuppressed: boolean;
      abilitiesApplied: PokeRogue.enums.Abilities[];
      speciesForm: PokeRogue.data.PokemonSpeciesForm | null;
      fusionSpeciesForm: PokeRogue.data.PokemonSpeciesForm;
      ability: PokeRogue.enums.Abilities;
      gender: PokeRogue.data.Gender;
      fusionGender: PokeRogue.data.Gender;
      stats: number[];
      moveset: (PokemonMove | null)[];
      types: PokeRogue.data.Type[];
  }
  export declare class PokemonBattleData {
      hitCount: number;
      endured: boolean;
      berriesEaten: PokeRogue.enums.BerryType[];
      abilitiesApplied: PokeRogue.enums.Abilities[];
      abilityRevealed: boolean;
  }
  export declare class PokemonBattleSummonData {
      /** The number of turns the pokemon has passed since entering the battle */
      turnCount: number;
      /** The list of moves the pokemon has used since entering the battle */
      moveHistory: TurnMove[];
  }
  export declare class PokemonTurnData {
      flinched: boolean;
      acted: boolean;
      hitCount: number;
      hitsLeft: number;
      damageDealt: number;
      currDamageDealt: number;
      damageTaken: number;
      attacksReceived: AttackMoveResult[];
      order: number;
      statStagesIncreased: boolean;
      statStagesDecreased: boolean;
  }
  export declare enum AiType {
      RANDOM = 0,
      SMART_RANDOM = 1,
      SMART = 2
  }
  export declare enum MoveResult {
      PENDING = 0,
      SUCCESS = 1,
      FAIL = 2,
      MISS = 3,
      OTHER = 4
  }
  export declare enum HitResult {
      EFFECTIVE = 1,
      SUPER_EFFECTIVE = 2,
      NOT_VERY_EFFECTIVE = 3,
      ONE_HIT_KO = 4,
      NO_EFFECT = 5,
      STATUS = 6,
      HEAL = 7,
      FAIL = 8,
      MISS = 9,
      OTHER = 10,
      IMMUNE = 11
  }
  export type DamageResult = HitResult.EFFECTIVE | HitResult.SUPER_EFFECTIVE | HitResult.NOT_VERY_EFFECTIVE | HitResult.ONE_HIT_KO | HitResult.OTHER;
  /**
   * Wrapper class for the {@linkcode Move} class for Pokemon to interact with.
   * These are the moves assigned to a {@linkcode Pokemon} object.
   * It links to {@linkcode Move} class via the move ID.
   * Compared to {@linkcode Move}, this class also tracks if a move has received.
   * PP Ups, amount of PP used, and things like that.
   * @see {@linkcode isUsable} - checks if move is restricted, out of PP, or not implemented.
   * @see {@linkcode getMove} - returns {@linkcode Move} object by looking it up via ID.
   * @see {@linkcode usePp} - removes a point of PP from the move.
   * @see {@linkcode getMovePp} - returns amount of PP a move currently has.
   * @see {@linkcode getPpRatio} - returns the current PP amount / max PP amount.
   * @see {@linkcode getName} - returns name of {@linkcode Move}.
   **/
  export declare class PokemonMove {
      moveId: PokeRogue.enums.Moves;
      ppUsed: integer;
      ppUp: integer;
      virtual: boolean;
      constructor(moveId: PokeRogue.enums.Moves, ppUsed?: integer, ppUp?: integer, virtual?: boolean);
      /**
       * Checks whether the move can be selected or performed by a Pokemon, without consideration for the move's targets.
       * The move is unusable if it is out of PP, restricted by an effect, or unimplemented.
       *
       * @param {Pokemon} pokemon {@linkcode Pokemon} that would be using this move
       * @param {boolean} ignorePp If `true`, skips the PP check
       * @param {boolean} ignoreRestrictionTags If `true`, skips the check for move restriction tags (see {@link MoveRestrictionBattlerTag})
       * @returns `true` if the move can be selected and used by the Pokemon, otherwise `false`.
       */
      isUsable(pokemon: Pokemon, ignorePp?: boolean, ignoreRestrictionTags?: boolean): boolean;
      getMove(): Move;
      /**
       * Sets {@link ppUsed} for this move and ensures the value does not exceed {@link getMovePp}
       * @param {number} count Amount of PP to use
       */
      usePp(count?: number): void;
      getMovePp(): integer;
      getPpRatio(): number;
      getName(): string;
      /**
      * Copies an existing move or creates a valid PokemonMove object from json representing one
      * @param {PokemonMove | any} source The data for the move to copy
      * @return {PokemonMove} A valid pokemonmove object
      */
      static loadMove(source: PokemonMove | any): PokemonMove;
  }
  
}

declare namespace PokeRogue.field {
  //import BattleScene from "../battle-scene";
  //import PokemonSpecies from "../data/pokemon-species";
  //import { TrainerConfig, TrainerPartyTemplate, TrainerSlot } from "../data/trainer-config";
  //import { EnemyPokemon } from "./pokemon";
  //import { PersistentModifier } from "../modifier/modifier";
  //import { PartyMemberStrength } from "#enums/party-member-strength";
  //import { TrainerType } from "#enums/trainer-type";
  export declare enum TrainerVariant {
      DEFAULT = 0,
      FEMALE = 1,
      DOUBLE = 2
  }
  export class Trainer extends Phaser.GameObjects.Container {
      config: PokeRogue.data.TrainerConfig;
      variant: TrainerVariant;
      partyTemplateIndex: integer;
      name: string;
      partnerName: string;
      constructor(scene: PokeRogue.BattleScene, trainerType: PokeRogue.enums.TrainerType, variant: TrainerVariant, partyTemplateIndex?: integer, name?: string, partnerName?: string);
      getKey(forceFemale?: boolean): string;
      /**
       * Returns the name of the trainer based on the provided trainer slot and the option to include a title.
       * @param {TrainerSlot} trainerSlot - The slot to determine which name to use. Defaults to TrainerSlot.NONE.
       * @param {boolean} includeTitle - Whether to include the title in the returned name. Defaults to false.
       * @returns {string} - The formatted name of the trainer.
       **/
      getName(trainerSlot?: TrainerSlot, includeTitle?: boolean): string;
      isDouble(): boolean;
      getMixedBattleBgm(): string;
      getBattleBgm(): string;
      getEncounterBgm(): string;
      getEncounterMessages(): string[];
      getVictoryMessages(): string[];
      getDefeatMessages(): string[];
      getPartyTemplate(): TrainerPartyTemplate;
      getPartyLevels(waveIndex: integer): integer[];
      genPartyMember(index: integer): EnemyPokemon;
      genNewPartyMemberSpecies(level: integer, strength: PokeRogue.enums.PartyMemberStrength, attempt?: integer): PokemonSpecies;
      getPartyMemberMatchupScores(trainerSlot?: TrainerSlot, forSwitch?: boolean): [integer, integer][];
      getSortedPartyMemberMatchupScores(partyMemberScores?: [integer, integer][]): [number, number][];
      getNextSummonIndex(trainerSlot?: TrainerSlot, partyMemberScores?: [integer, integer][]): integer;
      getPartyMemberModifierChanceMultiplier(index: integer): number;
      genModifiers(party: PokeRogue.field.EnemyPokemon[]): PersistentModifier[];
      loadAssets(): Promise<void>;
      initSprite(): void;
      /**
       * Attempts to animate a given set of {@linkcode Phaser.GameObjects.Sprite}
       * @see {@linkcode Phaser.GameObjects.Sprite.play}
       * @param sprite {@linkcode Phaser.GameObjects.Sprite} to animate
       * @param tintSprite {@linkcode Phaser.GameObjects.Sprite} placed on top of the sprite to add a color tint
       * @param animConfig {@linkcode Phaser.Types.Animations.PlayAnimationConfig} to pass to {@linkcode Phaser.GameObjects.Sprite.play}
       * @returns true if the sprite was able to be animated
       */
      tryPlaySprite(sprite: Phaser.GameObjects.Sprite, tintSprite: Phaser.GameObjects.Sprite, animConfig: Phaser.Types.Animations.PlayAnimationConfig): boolean;
      playAnim(): void;
      getSprites(): Phaser.GameObjects.Sprite[];
      getTintSprites(): Phaser.GameObjects.Sprite[];
      tint(color: number, alpha?: number, duration?: integer, ease?: string): void;
      untint(duration: integer, ease?: string): void;
  }
  export interface Trainer {
      scene: PokeRogue.BattleScene;
  }
  
}

declare namespace PokeRogue {
  //import { FixedBattleConfig, FixedBattleConfigs } from "./battle";
  //import BattleScene from "./battle-scene";
  //import { Challenge } from "./data/challenge";
  //import PokemonSpecies from "./data/pokemon-species";
  //import { Arena } from "./field/arena";
  //import { Biome } from "#enums/biome";
  //import { Challenges } from "./enums/challenges";
  export declare enum GameModes {
      CLASSIC = 0,
      ENDLESS = 1,
      SPLICED_ENDLESS = 2,
      DAILY = 3,
      CHALLENGE = 4
  }
  interface GameModeConfig {
      isClassic?: boolean;
      isEndless?: boolean;
      isDaily?: boolean;
      hasTrainers?: boolean;
      hasNoShop?: boolean;
      hasShortBiomes?: boolean;
      hasRandomBiomes?: boolean;
      hasRandomBosses?: boolean;
      isSplicedOnly?: boolean;
      isChallenge?: boolean;
  }
  export declare class GameMode implements GameModeConfig {
      modeId: GameModes;
      isClassic: boolean;
      isEndless: boolean;
      isDaily: boolean;
      hasTrainers: boolean;
      hasNoShop: boolean;
      hasShortBiomes: boolean;
      hasRandomBiomes: boolean;
      hasRandomBosses: boolean;
      isSplicedOnly: boolean;
      isChallenge: boolean;
      challenges: PokeRogue.data.Challenge[];
      battleConfig: PokeRogue.FixedBattleConfigs;
      constructor(modeId: GameModes, config: GameModeConfig, battleConfig?: FixedBattleConfigs);
      /**
       * Helper function to see if a GameMode has a specific challenge type
       * @param challenge the Challenges it looks for
       * @returns true if the game mode has that challenge
       */
      hasChallenge(challenge: PokeRogue.enums.Challenges): boolean;
      /**
       * Helper function to see if the game mode is using fresh start
       * @returns true if a fresh start challenge is being applied
       */
      isFreshStartChallenge(): boolean;
      /**
       * @returns either:
       * - override from overrides.ts
       * - 20 for Daily Runs
       * - 5 for all other modes
       */
      getStartingLevel(): integer;
      /**
       * @returns either:
       * - override from overrides.ts
       * - 1000
       */
      getStartingMoney(): integer;
      /**
       * @param scene current BattleScene
       * @returns either:
       * - random biome for Daily mode
       * - override from overrides.ts
       * - Town
       */
      getStartingBiome(scene: PokeRogue.BattleScene): Biome;
      getWaveForDifficulty(waveIndex: integer, ignoreCurveChanges?: boolean): integer;
      /**
       * Determines whether or not to generate a trainer
       * @param waveIndex the current floor the player is on (trainer sprites fail to generate on X1 floors)
       * @param arena the arena that contains the scene and functions
       * @returns true if a trainer should be generated, false otherwise
       */
      isWaveTrainer(waveIndex: integer, arena: PokeRogue.field.Arena): boolean;
      isTrainerBoss(waveIndex: integer, biomeType: PokeRogue.enums.Biome, offsetGym: boolean): boolean;
      getOverrideSpecies(waveIndex: integer): PokemonSpecies | null;
      /**
       * Checks if wave provided is the final for current or specified game mode
       * @param waveIndex
       * @param modeId game mode
       * @returns if the current wave is final for classic or daily OR a minor boss in endless
       */
      isWaveFinal(waveIndex: integer, modeId?: GameModes): boolean;
      /**
         * Every 10 waves is a boss battle
         * @returns true if waveIndex is a multiple of 10
         */
      isBoss(waveIndex: integer): boolean;
      /**
         * Every 50 waves of an Endless mode is a boss
         * At this time it is paradox pokemon
         * @returns true if waveIndex is a multiple of 50 in Endless
         */
      isEndlessBoss(waveIndex: integer): boolean;
      /**
         * Every 250 waves of an Endless mode is a minor boss
         * At this time it is Eternatus
         * @returns true if waveIndex is a multiple of 250 in Endless
         */
      isEndlessMinorBoss(waveIndex: integer): boolean;
      /**
         * Every 1000 waves of an Endless mode is a major boss
         * At this time it is Eternamax Eternatus
         * @returns true if waveIndex is a multiple of 1000 in Endless
         */
      isEndlessMajorBoss(waveIndex: integer): boolean;
      /**
       * Checks whether there is a fixed battle on this gamemode on a given wave.
       * @param {integer} waveIndex The wave to check.
       * @returns {boolean} If this game mode has a fixed battle on this wave
       */
      isFixedBattle(waveIndex: integer): boolean;
      /**
       * Returns the config for the fixed battle for a particular wave.
       * @param {integer} waveIndex The wave to check.
       * @returns {boolean} The fixed battle for this wave.
       */
      getFixedBattle(waveIndex: integer): FixedBattleConfig;
      getClearScoreBonus(): integer;
      getEnemyModifierChance(isBoss: boolean): integer;
      getName(): string;
      static getModeName(modeId: GameModes): string;
  }
  export declare function getGameMode(gameMode: GameModes): GameMode;
  export {};
  
}

declare namespace PokeRogue {
  import Phaser from "phaser";
  //import BattleScene from "./battle-scene";
  //import { SettingGamepad } from "#app/system/settings/settings-gamepad.js";
  //import { SettingKeyboard } from "#app/system/settings/settings-keyboard";
  //import { Button } from "#enums/buttons";
  //import { Device } from "#enums/devices";
  //import MoveTouchControlsHandler from "./ui/settings/move-touch-controls-handler";
  export interface DeviceMapping {
      [key: string]: number;
  }
  export interface IconsMapping {
      [key: string]: string;
  }
  export interface SettingMapping {
      [key: string]: Button;
  }
  export interface MappingLayout {
      [key: string]: SettingGamepad | SettingKeyboard | number;
  }
  export interface InterfaceConfig {
      padID: string;
      padType: string;
      deviceMapping: DeviceMapping;
      icons: IconsMapping;
      settings: SettingMapping;
      default: MappingLayout;
      custom?: MappingLayout;
  }
  /**
   * Manages and handles all input controls for the game, including keyboard and gamepad interactions.
   *
   * @remarks
   * This class is designed to centralize input management across the game. It facilitates the setup,
   * configuration, and handling of all game inputs, making it easier to manage various input devices
   * such as keyboards and gamepads. The class provides methods for setting up input devices, handling
   * their events, and responding to changes in input state (e.g., button presses, releases).
   *
   * The `InputsController` class also includes mechanisms to handle game focus events to ensure input
   * states are correctly reset and managed when the game loses or regains focus, maintaining robust
   * and responsive control handling throughout the game's lifecycle.
   *
   * Key responsibilities include:
   * - Initializing and configuring gamepad and keyboard controls.
   * - Emitting events related to specific input actions.
   * - Responding to external changes such as gamepad connection/disconnection.
   * - Managing game state transitions in response to input events, particularly focus loss and recovery.
   *
   * Usage of this class is intended to simplify input management across various parts of the game,
   * providing a unified interface for all input-related interactions.
   */
  export declare class InputsController {
      public gamepads;
      public scene;
      events: Phaser.Events.EventEmitter;
      public buttonLock;
      public interactions;
      public configs;
      gamepadSupport: boolean;
      selectedDevice: any;
      public disconnectedGamepads;
      lastSource: string;
      public inputInterval;
      public touchControls;
      moveTouchControlsHandler: PokeRogue.ui.settings.MoveTouchControlsHandler;
      /**
         * Initializes a new instance of the game control system, setting up initial state and configurations.
         *
         * @param scene - The Phaser scene associated with this instance.
         *
         * @remarks
         * This constructor initializes the game control system with necessary setups for handling inputs.
         * It prepares an interactions array indexed by button identifiers and configures default states for each button.
         * Specific buttons like MENU and STATS are set not to repeat their actions.
         * It concludes by calling the `init` method to complete the setup.
         */
      constructor(scene: PokeRogue.BattleScene);
      /**
         * Sets up event handlers and initializes gamepad and keyboard controls.
         *
         * @remarks
         * This method configures event listeners for both gamepad and keyboard inputs.
         * It handles gamepad connections/disconnections and button press events, and ensures keyboard controls are set up.
         * Additionally, it manages the game's behavior when it loses focus to prevent unwanted game actions during this state.
         */
      init(): void;
      /**
         * Handles actions to take when the game loses focus, such as deactivating pressed keys.
         *
         * @remarks
         * This method is triggered when the game or the browser tab loses focus. It ensures that any keys pressed are deactivated to prevent stuck keys affecting gameplay when the game is not active.
         */
      loseFocus(): void;
      /**
         * Enables or disables support for gamepad input.
         *
         * @param value - A boolean indicating whether gamepad support should be enabled (true) or disabled (false).
         *
         * @remarks
         * This method toggles gamepad support. If disabled, it also ensures that all currently pressed gamepad buttons are deactivated to avoid stuck inputs.
         */
      setGamepadSupport(value: boolean): void;
      /**
         * Sets the currently chosen gamepad and initializes related settings.
         * This method first deactivates any active key presses and then initializes the gamepad settings.
         *
         * @param gamepad - The identifier of the gamepad to set as chosen.
         */
      setChosenGamepad(gamepad: String): void;
      /**
         * Sets the currently chosen keyboard layout and initializes related settings.
         *
         * @param layoutKeyboard - The identifier of the keyboard layout to set as chosen.
         */
      setChosenKeyboardLayout(layoutKeyboard: String): void;
      /**
         * Retrieves the identifiers of all connected gamepads, excluding any that are currently marked as disconnected.
         * @returns Array<String> An array of strings representing the IDs of the connected gamepads.
         */
      getGamepadsName(): Array<String>;
      /**
         * Initializes the chosen gamepad by setting its identifier in the local storage and updating the UI to reflect the chosen gamepad.
         * If a gamepad name is provided, it uses that as the chosen gamepad; otherwise, it defaults to the currently chosen gamepad.
         * @param gamepadName Optional parameter to specify the name of the gamepad to initialize as chosen.
         */
      initChosenGamepad(gamepadName?: String): void;
      /**
         * Initializes the chosen keyboard layout by setting its identifier in the local storage and updating the UI to reflect the chosen layout.
         * If a layout name is provided, it uses that as the chosen layout; otherwise, it defaults to the currently chosen layout.
         * @param layoutKeyboard Optional parameter to specify the name of the keyboard layout to initialize as chosen.
         */
      initChosenLayoutKeyboard(layoutKeyboard?: String): void;
      /**
         * Handles the disconnection of a gamepad by adding its identifier to a list of disconnected gamepads.
         * This is necessary because Phaser retains memory of previously connected gamepads, and without tracking
         * disconnections, it would be impossible to determine the connection status of gamepads. This method ensures
         * that disconnected gamepads are recognized and can be appropriately hidden in the gamepad selection menu.
         *
         * @param thisGamepad The gamepad that has been disconnected.
         */
      onDisconnect(thisGamepad: Phaser.Input.Gamepad.Gamepad): void;
      /**
         * Updates the tracking of disconnected gamepads when a gamepad is reconnected.
         * It removes the reconnected gamepad's identifier from the `disconnectedGamepads` array,
         * effectively updating its status to connected.
         *
         * @param thisGamepad The gamepad that has been reconnected.
         */
      onReconnect(thisGamepad: Phaser.Input.Gamepad.Gamepad): void;
      /**
         * Initializes or updates configurations for connected gamepads.
         * It retrieves the names of all connected gamepads, sets up their configurations according to stored or default settings,
         * and ensures these configurations are saved. If the connected gamepad is the currently chosen one,
         * it reinitializes the chosen gamepad settings.
         *
         * @param thisGamepad The gamepad that is being set up.
         */
      setupGamepad(thisGamepad: Phaser.Input.Gamepad.Gamepad): void;
      /**
         * Initializes or updates configurations for connected keyboards.
         */
      setupKeyboard(): void;
      /**
         * Refreshes and re-indexes the list of connected gamepads.
         *
         * @remarks
         * This method updates the list of gamepads to exclude any that are undefined.
         * It corrects the index of each gamepad to account for any previously undefined entries,
         * ensuring that all gamepads are properly indexed and can be accurately referenced within the game.
         */
      refreshGamepads(): void;
      /**
         * Ensures the keyboard is initialized by checking if there is an active configuration for the keyboard.
         * If not, it sets up the keyboard with default configurations.
         */
      ensureKeyboardIsInit(): void;
      /**
         * Handles the keydown event for the keyboard.
         *
         * @param event The keyboard event.
         */
      keyboardKeyDown(event: any): void;
      /**
         * Handles the keyup event for the keyboard.
         *
         * @param event The keyboard event.
         */
      keyboardKeyUp(event: any): void;
      /**
         * Handles button press events on a gamepad. This method sets the gamepad as chosen on the first input if no gamepad is currently chosen.
         * It checks if gamepad support is enabled and if the event comes from the chosen gamepad. If so, it maps the button press to a specific
         * action using a custom configuration, emits an event for the button press, and records the time of the action.
         *
         * @param pad The gamepad on which the button was pressed.
         * @param button The specific button that was pressed.
         * @param value The intensity or value of the button press, if applicable.
         */
      gamepadButtonDown(pad: Phaser.Input.Gamepad.Gamepad, button: Phaser.Input.Gamepad.Button, value: number): void;
      /**
         * Responds to a button release event on a gamepad by checking if the gamepad is supported and currently chosen.
         * If conditions are met, it identifies the configured action for the button, emits an event signaling the button release,
         * and clears the record of the button.
         *
         * @param pad The gamepad from which the button was released.
         * @param button The specific button that was released.
         * @param value The intensity or value of the button release, if applicable.
         */
      gamepadButtonUp(pad: Phaser.Input.Gamepad.Gamepad, button: Phaser.Input.Gamepad.Button, value: number): void;
      /**
         * Retrieves the configuration object for a gamepad based on its identifier. The method identifies specific gamepad models
         * based on substrings in the identifier and returns predefined configurations for recognized models.
         * If no specific configuration matches, it defaults to a generic gamepad configuration.
         *
         * @param id The identifier string of the gamepad.
         * @returns InterfaceConfig The configuration object corresponding to the identified gamepad type.
         */
      getConfig(id: string): InterfaceConfig;
      /**
         * Retrieves the configuration object for a keyboard layout based on its identifier.
         *
         * @param id The identifier string of the keyboard layout.
         * @returns InterfaceConfig The configuration object corresponding to the identified keyboard layout.
         */
      getConfigKeyboard(id: string): InterfaceConfig;
      /**
         * Deactivates all currently pressed keys.
         */
      deactivatePressedKey(): void;
      /**
         * Retrieves the active configuration for the currently chosen device.
         * It checks if a specific device ID is stored in configurations and returns it.
         *
         * @returns InterfaceConfig The configuration object for the active gamepad, or null if not set.
         */
      getActiveConfig(device: PokeRogue.enums.Device): any;
      getIconForLatestInputRecorded(settingName: any): any;
      getLastSourceDevice(): Device;
      getLastSourceConfig(): any;
      getLastSourceType(): any;
      /**
         * Injects a custom mapping configuration into the configuration for a specific gamepad.
         * If the device does not have an existing configuration, it initializes one first.
         *
         * @param selectedDevice The identifier of the device to configure.
         * @param mappingConfigs The mapping configuration to apply to the device.
         */
      injectConfig(selectedDevice: string, mappingConfigs: any): void;
      resetConfigs(): void;
      /**
         * Swaps a binding in the configuration.
         *
         * @param config The configuration object.
         * @param settingName The name of the setting to swap.
         * @param pressedButton The button that was pressed.
         */
      assignBinding(config: any, settingName: any, pressedButton: any): boolean;
  }
  
}

declare namespace PokeRogue.interfaces {
  export interface Localizable {
      localize(): void;
  }
  export interface TranslationEntries {
      [key: string]: string | {
          [key: string]: string;
      };
  }
  export interface SimpleTranslationEntries {
      [key: string]: string;
  }
  export interface MoveTranslationEntry {
      name: string;
      effect: string;
  }
  export interface MoveTranslationEntries {
      [key: string]: MoveTranslationEntry;
  }
  export interface AbilityTranslationEntry {
      name: string;
      description: string;
  }
  export interface AbilityTranslationEntries {
      [key: string]: AbilityTranslationEntry;
  }
  export interface ModifierTypeTranslationEntry {
      name?: string;
      description?: string;
      extra?: SimpleTranslationEntries;
  }
  export interface ModifierTypeTranslationEntries {
      ModifierType: {
          [key: string]: ModifierTypeTranslationEntry;
      };
      SpeciesBoosterItem: {
          [key: string]: ModifierTypeTranslationEntry;
      };
      AttackTypeBoosterItem: SimpleTranslationEntries;
      TempStatStageBoosterItem: SimpleTranslationEntries;
      BaseStatBoosterItem: SimpleTranslationEntries;
      EvolutionItem: SimpleTranslationEntries;
      FormChangeItem: SimpleTranslationEntries;
  }
  export interface PokemonInfoTranslationEntries {
      Stat: SimpleTranslationEntries;
      Type: SimpleTranslationEntries;
  }
  export interface BerryTranslationEntry {
      name: string;
      effect: string;
  }
  export interface BerryTranslationEntries {
      [key: string]: BerryTranslationEntry;
  }
  export interface StatusEffectTranslationEntries {
      [key: string]: StatusEffectTranslationEntry;
  }
  export interface StatusEffectTranslationEntry {
      name: string;
      obtain: string;
      obtainSource: string;
      activation: string;
      overlap: string;
      heal: string;
      description: string;
  }
  export interface AchievementTranslationEntry {
      name?: string;
      description?: string;
  }
  export interface AchievementTranslationEntries {
      [key: string]: AchievementTranslationEntry;
  }
  export interface DialogueTranslationEntry {
      [key: number]: string;
  }
  export interface DialogueTranslationCategory {
      [category: string]: DialogueTranslationEntry;
  }
  export interface DialogueTranslationEntries {
      [trainertype: string]: DialogueTranslationCategory;
  }
  
}

declare namespace PokeRogue {
  //import { SceneBase } from "./scene-base";
  export declare class LoadingScene extends PokeRogue.SceneBase {
      static readonly KEY = "loading";
      readonly LOAD_EVENTS: typeof import("phaser").Loader.Events;
      constructor();
      preload(): void;
      loadLoadingScreen(): void;
      get gameHeight(): number;
      get gameWidth(): number;
      create(): Promise<void>;
      handleDestroy(): void;
  }
  
}

declare namespace PokeRogue.locales.ca_ES {
  export declare const caEsConfig: {
      ability: {};
      abilityTriggers: {};
      arenaFlyout: {};
      arenaTag: {};
      battle: {};
      battleScene: {};
      battleInfo: {};
      battleMessageUiHandler: {};
      battlePokemonForm: {};
      battlerTags: {};
      berry: {};
      bgmName: {};
      biome: {};
      challenges: {};
      commandUiHandler: {};
      common: {};
      achv: {};
      dialogue: {};
      battleSpecDialogue: {};
      miscDialogue: {};
      doubleBattleDialogue: {};
      egg: {};
      fightUiHandler: {};
      filterBar: {};
      gameMode: {};
      gameStatsUiHandler: {};
      growth: {};
      menu: {};
      menuUiHandler: {};
      modifier: {};
      modifierType: {};
      move: {};
      nature: {};
      pokeball: {};
      pokemon: {};
      pokemonForm: {};
      pokemonInfo: {};
      pokemonInfoContainer: {};
      pokemonSummary: {};
      saveSlotSelectUiHandler: {};
      settings: {};
      splashMessages: {};
      starterSelectUiHandler: {};
      statusEffect: {};
      terrain: {};
      titles: {};
      trainerClasses: {};
      trainerNames: {};
      tutorial: {};
      voucher: {};
      weather: {};
      partyUiHandler: {};
      modifierSelectUiHandler: {};
      moveTriggers: {};
      runHistory: {};
  };
  
}

declare namespace PokeRogue.locales.de {
  export declare const deConfig: {
      ability: {
          stench: {
              name: string;
              description: string;
          };
          drizzle: {
              name: string;
              description: string;
          };
          speedBoost: {
              name: string;
              description: string;
          };
          battleArmor: {
              name: string;
              description: string;
          };
          sturdy: {
              name: string;
              description: string;
          };
          damp: {
              name: string;
              description: string;
          };
          limber: {
              name: string;
              description: string;
          };
          sandVeil: {
              name: string;
              description: string;
          };
          static: {
              name: string;
              description: string;
          };
          voltAbsorb: {
              name: string;
              description: string;
          };
          waterAbsorb: {
              name: string;
              description: string;
          };
          oblivious: {
              name: string;
              description: string;
          };
          cloudNine: {
              name: string;
              description: string;
          };
          compoundEyes: {
              name: string;
              description: string;
          };
          insomnia: {
              name: string;
              description: string;
          };
          colorChange: {
              name: string;
              description: string;
          };
          immunity: {
              name: string;
              description: string;
          };
          flashFire: {
              name: string;
              description: string;
          };
          shieldDust: {
              name: string;
              description: string;
          };
          ownTempo: {
              name: string;
              description: string;
          };
          suctionCups: {
              name: string;
              description: string;
          };
          intimidate: {
              name: string;
              description: string;
          };
          shadowTag: {
              name: string;
              description: string;
          };
          roughSkin: {
              name: string;
              description: string;
          };
          wonderGuard: {
              name: string;
              description: string;
          };
          levitate: {
              name: string;
              description: string;
          };
          effectSpore: {
              name: string;
              description: string;
          };
          synchronize: {
              name: string;
              description: string;
          };
          clearBody: {
              name: string;
              description: string;
          };
          naturalCure: {
              name: string;
              description: string;
          };
          lightningRod: {
              name: string;
              description: string;
          };
          sereneGrace: {
              name: string;
              description: string;
          };
          swiftSwim: {
              name: string;
              description: string;
          };
          chlorophyll: {
              name: string;
              description: string;
          };
          illuminate: {
              name: string;
              description: string;
          };
          trace: {
              name: string;
              description: string;
          };
          hugePower: {
              name: string;
              description: string;
          };
          poisonPoint: {
              name: string;
              description: string;
          };
          innerFocus: {
              name: string;
              description: string;
          };
          magmaArmor: {
              name: string;
              description: string;
          };
          waterVeil: {
              name: string;
              description: string;
          };
          magnetPull: {
              name: string;
              description: string;
          };
          soundproof: {
              name: string;
              description: string;
          };
          rainDish: {
              name: string;
              description: string;
          };
          sandStream: {
              name: string;
              description: string;
          };
          pressure: {
              name: string;
              description: string;
          };
          thickFat: {
              name: string;
              description: string;
          };
          earlyBird: {
              name: string;
              description: string;
          };
          flameBody: {
              name: string;
              description: string;
          };
          runAway: {
              name: string;
              description: string;
          };
          keenEye: {
              name: string;
              description: string;
          };
          hyperCutter: {
              name: string;
              description: string;
          };
          pickup: {
              name: string;
              description: string;
          };
          truant: {
              name: string;
              description: string;
          };
          hustle: {
              name: string;
              description: string;
          };
          cuteCharm: {
              name: string;
              description: string;
          };
          plus: {
              name: string;
              description: string;
          };
          minus: {
              name: string;
              description: string;
          };
          forecast: {
              name: string;
              description: string;
          };
          stickyHold: {
              name: string;
              description: string;
          };
          shedSkin: {
              name: string;
              description: string;
          };
          guts: {
              name: string;
              description: string;
          };
          marvelScale: {
              name: string;
              description: string;
          };
          liquidOoze: {
              name: string;
              description: string;
          };
          overgrow: {
              name: string;
              description: string;
          };
          blaze: {
              name: string;
              description: string;
          };
          torrent: {
              name: string;
              description: string;
          };
          swarm: {
              name: string;
              description: string;
          };
          rockHead: {
              name: string;
              description: string;
          };
          drought: {
              name: string;
              description: string;
          };
          arenaTrap: {
              name: string;
              description: string;
          };
          vitalSpirit: {
              name: string;
              description: string;
          };
          whiteSmoke: {
              name: string;
              description: string;
          };
          purePower: {
              name: string;
              description: string;
          };
          shellArmor: {
              name: string;
              description: string;
          };
          airLock: {
              name: string;
              description: string;
          };
          tangledFeet: {
              name: string;
              description: string;
          };
          motorDrive: {
              name: string;
              description: string;
          };
          rivalry: {
              name: string;
              description: string;
          };
          steadfast: {
              name: string;
              description: string;
          };
          snowCloak: {
              name: string;
              description: string;
          };
          gluttony: {
              name: string;
              description: string;
          };
          angerPoint: {
              name: string;
              description: string;
          };
          unburden: {
              name: string;
              description: string;
          };
          heatproof: {
              name: string;
              description: string;
          };
          simple: {
              name: string;
              description: string;
          };
          drySkin: {
              name: string;
              description: string;
          };
          download: {
              name: string;
              description: string;
          };
          ironFist: {
              name: string;
              description: string;
          };
          poisonHeal: {
              name: string;
              description: string;
          };
          adaptability: {
              name: string;
              description: string;
          };
          skillLink: {
              name: string;
              description: string;
          };
          hydration: {
              name: string;
              description: string;
          };
          solarPower: {
              name: string;
              description: string;
          };
          quickFeet: {
              name: string;
              description: string;
          };
          normalize: {
              name: string;
              description: string;
          };
          sniper: {
              name: string;
              description: string;
          };
          magicGuard: {
              name: string;
              description: string;
          };
          noGuard: {
              name: string;
              description: string;
          };
          stall: {
              name: string;
              description: string;
          };
          technician: {
              name: string;
              description: string;
          };
          leafGuard: {
              name: string;
              description: string;
          };
          klutz: {
              name: string;
              description: string;
          };
          moldBreaker: {
              name: string;
              description: string;
          };
          superLuck: {
              name: string;
              description: string;
          };
          aftermath: {
              name: string;
              description: string;
          };
          anticipation: {
              name: string;
              description: string;
          };
          forewarn: {
              name: string;
              description: string;
          };
          unaware: {
              name: string;
              description: string;
          };
          tintedLens: {
              name: string;
              description: string;
          };
          filter: {
              name: string;
              description: string;
          };
          slowStart: {
              name: string;
              description: string;
          };
          scrappy: {
              name: string;
              description: string;
          };
          stormDrain: {
              name: string;
              description: string;
          };
          iceBody: {
              name: string;
              description: string;
          };
          solidRock: {
              name: string;
              description: string;
          };
          snowWarning: {
              name: string;
              description: string;
          };
          honeyGather: {
              name: string;
              description: string;
          };
          frisk: {
              name: string;
              description: string;
          };
          reckless: {
              name: string;
              description: string;
          };
          multitype: {
              name: string;
              description: string;
          };
          flowerGift: {
              name: string;
              description: string;
          };
          badDreams: {
              name: string;
              description: string;
          };
          pickpocket: {
              name: string;
              description: string;
          };
          sheerForce: {
              name: string;
              description: string;
          };
          contrary: {
              name: string;
              description: string;
          };
          unnerve: {
              name: string;
              description: string;
          };
          defiant: {
              name: string;
              description: string;
          };
          defeatist: {
              name: string;
              description: string;
          };
          cursedBody: {
              name: string;
              description: string;
          };
          healer: {
              name: string;
              description: string;
          };
          friendGuard: {
              name: string;
              description: string;
          };
          weakArmor: {
              name: string;
              description: string;
          };
          heavyMetal: {
              name: string;
              description: string;
          };
          lightMetal: {
              name: string;
              description: string;
          };
          multiscale: {
              name: string;
              description: string;
          };
          toxicBoost: {
              name: string;
              description: string;
          };
          flareBoost: {
              name: string;
              description: string;
          };
          harvest: {
              name: string;
              description: string;
          };
          telepathy: {
              name: string;
              description: string;
          };
          moody: {
              name: string;
              description: string;
          };
          overcoat: {
              name: string;
              description: string;
          };
          poisonTouch: {
              name: string;
              description: string;
          };
          regenerator: {
              name: string;
              description: string;
          };
          bigPecks: {
              name: string;
              description: string;
          };
          sandRush: {
              name: string;
              description: string;
          };
          wonderSkin: {
              name: string;
              description: string;
          };
          analytic: {
              name: string;
              description: string;
          };
          illusion: {
              name: string;
              description: string;
          };
          imposter: {
              name: string;
              description: string;
          };
          infiltrator: {
              name: string;
              description: string;
          };
          mummy: {
              name: string;
              description: string;
          };
          moxie: {
              name: string;
              description: string;
          };
          justified: {
              name: string;
              description: string;
          };
          rattled: {
              name: string;
              description: string;
          };
          magicBounce: {
              name: string;
              description: string;
          };
          sapSipper: {
              name: string;
              description: string;
          };
          prankster: {
              name: string;
              description: string;
          };
          sandForce: {
              name: string;
              description: string;
          };
          ironBarbs: {
              name: string;
              description: string;
          };
          zenMode: {
              name: string;
              description: string;
          };
          victoryStar: {
              name: string;
              description: string;
          };
          turboblaze: {
              name: string;
              description: string;
          };
          teravolt: {
              name: string;
              description: string;
          };
          aromaVeil: {
              name: string;
              description: string;
          };
          flowerVeil: {
              name: string;
              description: string;
          };
          cheekPouch: {
              name: string;
              description: string;
          };
          protean: {
              name: string;
              description: string;
          };
          furCoat: {
              name: string;
              description: string;
          };
          magician: {
              name: string;
              description: string;
          };
          bulletproof: {
              name: string;
              description: string;
          };
          competitive: {
              name: string;
              description: string;
          };
          strongJaw: {
              name: string;
              description: string;
          };
          refrigerate: {
              name: string;
              description: string;
          };
          sweetVeil: {
              name: string;
              description: string;
          };
          stanceChange: {
              name: string;
              description: string;
          };
          galeWings: {
              name: string;
              description: string;
          };
          megaLauncher: {
              name: string;
              description: string;
          };
          grassPelt: {
              name: string;
              description: string;
          };
          symbiosis: {
              name: string;
              description: string;
          };
          toughClaws: {
              name: string;
              description: string;
          };
          pixilate: {
              name: string;
              description: string;
          };
          gooey: {
              name: string;
              description: string;
          };
          aerilate: {
              name: string;
              description: string;
          };
          parentalBond: {
              name: string;
              description: string;
          };
          darkAura: {
              name: string;
              description: string;
          };
          fairyAura: {
              name: string;
              description: string;
          };
          auraBreak: {
              name: string;
              description: string;
          };
          primordialSea: {
              name: string;
              description: string;
          };
          desolateLand: {
              name: string;
              description: string;
          };
          deltaStream: {
              name: string;
              description: string;
          };
          stamina: {
              name: string;
              description: string;
          };
          wimpOut: {
              name: string;
              description: string;
          };
          emergencyExit: {
              name: string;
              description: string;
          };
          waterCompaction: {
              name: string;
              description: string;
          };
          merciless: {
              name: string;
              description: string;
          };
          shieldsDown: {
              name: string;
              description: string;
          };
          stakeout: {
              name: string;
              description: string;
          };
          waterBubble: {
              name: string;
              description: string;
          };
          steelworker: {
              name: string;
              description: string;
          };
          berserk: {
              name: string;
              description: string;
          };
          slushRush: {
              name: string;
              description: string;
          };
          longReach: {
              name: string;
              description: string;
          };
          liquidVoice: {
              name: string;
              description: string;
          };
          triage: {
              name: string;
              description: string;
          };
          galvanize: {
              name: string;
              description: string;
          };
          surgeSurfer: {
              name: string;
              description: string;
          };
          schooling: {
              name: string;
              description: string;
          };
          disguise: {
              name: string;
              description: string;
          };
          battleBond: {
              name: string;
              description: string;
          };
          powerConstruct: {
              name: string;
              description: string;
          };
          corrosion: {
              name: string;
              description: string;
          };
          comatose: {
              name: string;
              description: string;
          };
          queenlyMajesty: {
              name: string;
              description: string;
          };
          innardsOut: {
              name: string;
              description: string;
          };
          dancer: {
              name: string;
              description: string;
          };
          battery: {
              name: string;
              description: string;
          };
          fluffy: {
              name: string;
              description: string;
          };
          dazzling: {
              name: string;
              description: string;
          };
          soulHeart: {
              name: string;
              description: string;
          };
          tanglingHair: {
              name: string;
              description: string;
          };
          receiver: {
              name: string;
              description: string;
          };
          powerOfAlchemy: {
              name: string;
              description: string;
          };
          beastBoost: {
              name: string;
              description: string;
          };
          rksSystem: {
              name: string;
              description: string;
          };
          electricSurge: {
              name: string;
              description: string;
          };
          psychicSurge: {
              name: string;
              description: string;
          };
          mistySurge: {
              name: string;
              description: string;
          };
          grassySurge: {
              name: string;
              description: string;
          };
          fullMetalBody: {
              name: string;
              description: string;
          };
          shadowShield: {
              name: string;
              description: string;
          };
          prismArmor: {
              name: string;
              description: string;
          };
          neuroforce: {
              name: string;
              description: string;
          };
          intrepidSword: {
              name: string;
              description: string;
          };
          dauntlessShield: {
              name: string;
              description: string;
          };
          libero: {
              name: string;
              description: string;
          };
          ballFetch: {
              name: string;
              description: string;
          };
          cottonDown: {
              name: string;
              description: string;
          };
          propellerTail: {
              name: string;
              description: string;
          };
          mirrorArmor: {
              name: string;
              description: string;
          };
          gulpMissile: {
              name: string;
              description: string;
          };
          stalwart: {
              name: string;
              description: string;
          };
          steamEngine: {
              name: string;
              description: string;
          };
          punkRock: {
              name: string;
              description: string;
          };
          sandSpit: {
              name: string;
              description: string;
          };
          iceScales: {
              name: string;
              description: string;
          };
          ripen: {
              name: string;
              description: string;
          };
          iceFace: {
              name: string;
              description: string;
          };
          powerSpot: {
              name: string;
              description: string;
          };
          mimicry: {
              name: string;
              description: string;
          };
          screenCleaner: {
              name: string;
              description: string;
          };
          steelySpirit: {
              name: string;
              description: string;
          };
          perishBody: {
              name: string;
              description: string;
          };
          wanderingSpirit: {
              name: string;
              description: string;
          };
          gorillaTactics: {
              name: string;
              description: string;
          };
          neutralizingGas: {
              name: string;
              description: string;
          };
          pastelVeil: {
              name: string;
              description: string;
          };
          hungerSwitch: {
              name: string;
              description: string;
          };
          quickDraw: {
              name: string;
              description: string;
          };
          unseenFist: {
              name: string;
              description: string;
          };
          curiousMedicine: {
              name: string;
              description: string;
          };
          transistor: {
              name: string;
              description: string;
          };
          dragonsMaw: {
              name: string;
              description: string;
          };
          chillingNeigh: {
              name: string;
              description: string;
          };
          grimNeigh: {
              name: string;
              description: string;
          };
          asOneGlastrier: {
              name: string;
              description: string;
          };
          asOneSpectrier: {
              name: string;
              description: string;
          };
          lingeringAroma: {
              name: string;
              description: string;
          };
          seedSower: {
              name: string;
              description: string;
          };
          thermalExchange: {
              name: string;
              description: string;
          };
          angerShell: {
              name: string;
              description: string;
          };
          purifyingSalt: {
              name: string;
              description: string;
          };
          wellBakedBody: {
              name: string;
              description: string;
          };
          windRider: {
              name: string;
              description: string;
          };
          guardDog: {
              name: string;
              description: string;
          };
          rockyPayload: {
              name: string;
              description: string;
          };
          windPower: {
              name: string;
              description: string;
          };
          zeroToHero: {
              name: string;
              description: string;
          };
          commander: {
              name: string;
              description: string;
          };
          electromorphosis: {
              name: string;
              description: string;
          };
          protosynthesis: {
              name: string;
              description: string;
          };
          quarkDrive: {
              name: string;
              description: string;
          };
          goodAsGold: {
              name: string;
              description: string;
          };
          vesselOfRuin: {
              name: string;
              description: string;
          };
          swordOfRuin: {
              name: string;
              description: string;
          };
          tabletsOfRuin: {
              name: string;
              description: string;
          };
          beadsOfRuin: {
              name: string;
              description: string;
          };
          orichalcumPulse: {
              name: string;
              description: string;
          };
          hadronEngine: {
              name: string;
              description: string;
          };
          opportunist: {
              name: string;
              description: string;
          };
          cudChew: {
              name: string;
              description: string;
          };
          sharpness: {
              name: string;
              description: string;
          };
          supremeOverlord: {
              name: string;
              description: string;
          };
          costar: {
              name: string;
              description: string;
          };
          toxicDebris: {
              name: string;
              description: string;
          };
          armorTail: {
              name: string;
              description: string;
          };
          earthEater: {
              name: string;
              description: string;
          };
          myceliumMight: {
              name: string;
              description: string;
          };
          mindsEye: {
              name: string;
              description: string;
          };
          supersweetSyrup: {
              name: string;
              description: string;
          };
          hospitality: {
              name: string;
              description: string;
          };
          toxicChain: {
              name: string;
              description: string;
          };
          embodyAspectTeal: {
              name: string;
              description: string;
          };
          embodyAspectWellspring: {
              name: string;
              description: string;
          };
          embodyAspectHearthflame: {
              name: string;
              description: string;
          };
          embodyAspectCornerstone: {
              name: string;
              description: string;
          };
          teraShift: {
              name: string;
              description: string;
          };
          teraShell: {
              name: string;
              description: string;
          };
          teraformZero: {
              name: string;
              description: string;
          };
          poisonPuppeteer: {
              name: string;
              description: string;
          };
      };
      abilityTriggers: {
          blockRecoilDamage: string;
          badDreams: string;
          costar: string;
          iceFaceAvoidedDamage: string;
          perishBody: string;
          poisonHeal: string;
          trace: string;
          windPowerCharged: string;
          quickDraw: string;
          blockItemTheft: string;
          typeImmunityHeal: string;
          nonSuperEffectiveImmunity: string;
          disguiseAvoidedDamage: string;
          moveImmunity: string;
          reverseDrain: string;
          postDefendTypeChange: string;
          postDefendContactDamage: string;
          postDefendAbilitySwap: string;
          postDefendAbilityGive: string;
          postDefendMoveDisable: string;
          pokemonTypeChange: string;
          postAttackStealHeldItem: string;
          postDefendStealHeldItem: string;
          copyFaintedAllyAbility: string;
          intimidateImmunity: string;
          postSummonAllyHeal: string;
          postSummonClearAllyStats: string;
          postSummonTransform: string;
          protectStat: string;
          statusEffectImmunityWithName: string;
          statusEffectImmunity: string;
          battlerTagImmunity: string;
          forewarn: string;
          frisk: string;
          postWeatherLapseHeal: string;
          postWeatherLapseDamage: string;
          postTurnLootCreateEatenBerry: string;
          postTurnHeal: string;
          fetchBall: string;
          healFromBerryUse: string;
          arenaTrap: string;
          postBattleLoot: string;
          postFaintContactDamage: string;
          postFaintHpDamage: string;
          postSummonPressure: string;
          weatherEffectDisappeared: string;
          postSummonMoldBreaker: string;
          postSummonAnticipation: string;
          postSummonTurboblaze: string;
          postSummonTeravolt: string;
          postSummonDarkAura: string;
          postSummonFairyAura: string;
          postSummonNeutralizingGas: string;
          postSummonAsOneGlastrier: string;
          postSummonAsOneSpectrier: string;
          postSummonVesselOfRuin: string;
          postSummonSwordOfRuin: string;
          postSummonTabletsOfRuin: string;
          postSummonBeadsOfRuin: string;
          preventBerryUse: string;
      };
      arenaFlyout: {
          activeBattleEffects: string;
          player: string;
          neutral: string;
          enemy: string;
          sunny: string;
          rain: string;
          sandstorm: string;
          hail: string;
          snow: string;
          fog: string;
          heavyRain: string;
          harshSun: string;
          strongWinds: string;
          misty: string;
          electric: string;
          grassy: string;
          psychic: string;
          mudSport: string;
          waterSport: string;
          spikes: string;
          toxicSpikes: string;
          mist: string;
          futureSight: string;
          doomDesire: string;
          wish: string;
          stealthRock: string;
          stickyWeb: string;
          trickRoom: string;
          gravity: string;
          reflect: string;
          lightScreen: string;
          auroraVeil: string;
          quickGuard: string;
          wideGuard: string;
          matBlock: string;
          craftyShield: string;
          tailwind: string;
          happyHour: string;
          safeguard: string;
      };
      arenaTag: {
          yourTeam: string;
          opposingTeam: string;
          arenaOnRemove: string;
          arenaOnRemovePlayer: string;
          arenaOnRemoveEnemy: string;
          mistOnAdd: string;
          mistApply: string;
          reflectOnAdd: string;
          reflectOnAddPlayer: string;
          reflectOnAddEnemy: string;
          lightScreenOnAdd: string;
          lightScreenOnAddPlayer: string;
          lightScreenOnAddEnemy: string;
          auroraVeilOnAdd: string;
          auroraVeilOnAddPlayer: string;
          auroraVeilOnAddEnemy: string;
          conditionalProtectOnAdd: string;
          conditionalProtectOnAddPlayer: string;
          conditionalProtectOnAddEnemy: string;
          conditionalProtectApply: string;
          matBlockOnAdd: string;
          noCritOnAddPlayer: string;
          noCritOnAddEnemy: string;
          noCritOnRemove: string;
          wishTagOnAdd: string;
          mudSportOnAdd: string;
          mudSportOnRemove: string;
          waterSportOnAdd: string;
          waterSportOnRemove: string;
          spikesOnAdd: string;
          spikesActivateTrap: string;
          toxicSpikesOnAdd: string;
          toxicSpikesActivateTrapPoison: string;
          stealthRockOnAdd: string;
          stealthRockActivateTrap: string;
          stickyWebOnAdd: string;
          stickyWebActivateTrap: string;
          trickRoomOnAdd: string;
          trickRoomOnRemove: string;
          gravityOnAdd: string;
          gravityOnRemove: string;
          tailwindOnAdd: string;
          tailwindOnAddPlayer: string;
          tailwindOnAddEnemy: string;
          tailwindOnRemove: string;
          tailwindOnRemovePlayer: string;
          tailwindOnRemoveEnemy: string;
          happyHourOnAdd: string;
          happyHourOnRemove: string;
          safeguardOnAdd: string;
          safeguardOnAddPlayer: string;
          safeguardOnAddEnemy: string;
          safeguardOnRemove: string;
          safeguardOnRemovePlayer: string;
          safeguardOnRemoveEnemy: string;
      };
      battle: {
          bossAppeared: string;
          trainerAppeared: string;
          trainerAppearedDouble: string;
          trainerSendOut: string;
          singleWildAppeared: string;
          multiWildAppeared: string;
          playerComeBack: string;
          trainerComeBack: string;
          playerGo: string;
          trainerGo: string;
          switchQuestion: string;
          trainerDefeated: string;
          moneyWon: string;
          moneyPickedUp: string;
          pokemonCaught: string;
          addedAsAStarter: string;
          partyFull: string;
          pokemon: string;
          sendOutPokemon: string;
          hitResultCriticalHit: string;
          hitResultSuperEffective: string;
          hitResultNotVeryEffective: string;
          hitResultNoEffect: string;
          hitResultImmune: string;
          hitResultOneHitKO: string;
          attackFailed: string;
          attackMissed: string;
          attackHitsCount: string;
          rewardGain: string;
          expGain: string;
          levelUp: string;
          learnMove: string;
          learnMovePrompt: string;
          learnMoveLimitReached: string;
          learnMoveReplaceQuestion: string;
          learnMoveStopTeaching: string;
          learnMoveNotLearned: string;
          learnMoveForgetQuestion: string;
          learnMoveForgetSuccess: string;
          countdownPoof: string;
          learnMoveAnd: string;
          levelCapUp: string;
          moveNotImplemented: string;
          moveNoPP: string;
          moveDisabled: string;
          noPokeballForce: string;
          noPokeballTrainer: string;
          noPokeballMulti: string;
          noPokeballStrong: string;
          noEscapeForce: string;
          noEscapeTrainer: string;
          noEscapePokemon: string;
          runAwaySuccess: string;
          runAwayCannotEscape: string;
          escapeVerbSwitch: string;
          escapeVerbFlee: string;
          skipItemQuestion: string;
          itemStackFull: string;
          notDisabled: string;
          turnEndHpRestore: string;
          hpIsFull: string;
          eggHatching: string;
          ivScannerUseQuestion: string;
          wildPokemonWithAffix: string;
          foePokemonWithAffix: string;
          useMove: string;
          drainMessage: string;
          regainHealth: string;
          stealEatBerry: string;
          ppHealBerry: string;
          hpHealBerry: string;
          fainted: string;
          statsAnd: string;
          stats: string;
          statRose_one: string;
          statRose_other: string;
          statSharplyRose_one: string;
          statSharplyRose_other: string;
          statRoseDrastically_one: string;
          statRoseDrastically_other: string;
          statWontGoAnyHigher_one: string;
          statWontGoAnyHigher_other: string;
          statFell_one: string;
          statFell_other: string;
          statHarshlyFell_one: string;
          statHarshlyFell_other: string;
          statSeverelyFell_one: string;
          statSeverelyFell_other: string;
          statWontGoAnyLower_one: string;
          statWontGoAnyLower_other: string;
          transformedIntoType: string;
          ppReduced: string;
          retryBattle: string;
          unlockedSomething: string;
          congratulations: string;
          beatModeFirstTime: string;
          eggSkipPrompt: string;
      };
      battleScene: {
          moneyOwned: string;
      };
      battleInfo: {
          generation: string;
      };
      battleMessageUiHandler: {
          ivBest: string;
          ivFantastic: string;
          ivVeryGood: string;
          ivPrettyGood: string;
          ivDecent: string;
          ivNoGood: string;
      };
      battlePokemonForm: {
          mega: string;
          "mega-x": string;
          "mega-y": string;
          primal: string;
          gigantamax: string;
          eternamax: string;
          megaChange: string;
          gigantamaxChange: string;
          eternamaxChange: string;
          revertChange: string;
          formChange: string;
          disguiseChange: string;
      };
      battlerTags: {
          trappedDesc: string;
          flinchedDesc: string;
          confusedDesc: string;
          infatuatedDesc: string;
          seedDesc: string;
          nightmareDesc: string;
          ingrainDesc: string;
          drowsyDesc: string;
          rechargingLapse: string;
          trappedOnAdd: string;
          trappedOnRemove: string;
          flinchedLapse: string;
          confusedOnAdd: string;
          confusedOnRemove: string;
          confusedOnOverlap: string;
          confusedLapse: string;
          confusedLapseHurtItself: string;
          destinyBondLapseIsBoss: string;
          destinyBondLapse: string;
          infatuatedOnAdd: string;
          infatuatedOnOverlap: string;
          infatuatedLapse: string;
          infatuatedLapseImmobilize: string;
          infatuatedOnRemove: string;
          seededOnAdd: string;
          seededLapse: string;
          seededLapseShed: string;
          nightmareOnAdd: string;
          nightmareOnOverlap: string;
          nightmareLapse: string;
          encoreOnAdd: string;
          encoreOnRemove: string;
          helpingHandOnAdd: string;
          ingrainLapse: string;
          ingrainOnTrap: string;
          aquaRingOnAdd: string;
          aquaRingLapse: string;
          drowsyOnAdd: string;
          damagingTrapLapse: string;
          bindOnTrap: string;
          wrapOnTrap: string;
          vortexOnTrap: string;
          clampOnTrap: string;
          sandTombOnTrap: string;
          magmaStormOnTrap: string;
          snapTrapOnTrap: string;
          thunderCageOnTrap: string;
          infestationOnTrap: string;
          protectedOnAdd: string;
          protectedLapse: string;
          enduringOnAdd: string;
          enduringLapse: string;
          sturdyLapse: string;
          perishSongLapse: string;
          centerOfAttentionOnAdd: string;
          truantLapse: string;
          slowStartOnAdd: string;
          slowStartOnRemove: string;
          highestStatBoostOnAdd: string;
          highestStatBoostOnRemove: string;
          magnetRisenOnAdd: string;
          magnetRisenOnRemove: string;
          critBoostOnAdd: string;
          critBoostOnRemove: string;
          saltCuredOnAdd: string;
          saltCuredLapse: string;
          cursedOnAdd: string;
          cursedLapse: string;
          stockpilingOnAdd: string;
      };
      berry: {
          SITRUS: {
              name: string;
              effect: string;
          };
          LUM: {
              name: string;
              effect: string;
          };
          ENIGMA: {
              name: string;
              effect: string;
          };
          LIECHI: {
              name: string;
              effect: string;
          };
          GANLON: {
              name: string;
              effect: string;
          };
          PETAYA: {
              name: string;
              effect: string;
          };
          APICOT: {
              name: string;
              effect: string;
          };
          SALAC: {
              name: string;
              effect: string;
          };
          LANSAT: {
              name: string;
              effect: string;
          };
          STARF: {
              name: string;
              effect: string;
          };
          LEPPA: {
              name: string;
              effect: string;
          };
      };
      bgmName: {
          music: string;
          missing_entries: string;
          battle_kanto_champion: string;
          battle_johto_champion: string;
          battle_hoenn_champion_g5: string;
          battle_hoenn_champion_g6: string;
          battle_sinnoh_champion: string;
          battle_champion_alder: string;
          battle_champion_iris: string;
          battle_kalos_champion: string;
          battle_alola_champion: string;
          battle_galar_champion: string;
          battle_champion_geeta: string;
          battle_champion_nemona: string;
          battle_champion_kieran: string;
          battle_hoenn_elite: string;
          battle_unova_elite: string;
          battle_kalos_elite: string;
          battle_alola_elite: string;
          battle_galar_elite: string;
          battle_paldea_elite: string;
          battle_bb_elite: string;
          battle_final_encounter: string;
          battle_final: string;
          battle_kanto_gym: string;
          battle_johto_gym: string;
          battle_hoenn_gym: string;
          battle_sinnoh_gym: string;
          battle_unova_gym: string;
          battle_kalos_gym: string;
          battle_galar_gym: string;
          battle_paldea_gym: string;
          battle_legendary_kanto: string;
          battle_legendary_raikou: string;
          battle_legendary_entei: string;
          battle_legendary_suicune: string;
          battle_legendary_lugia: string;
          battle_legendary_ho_oh: string;
          battle_legendary_regis_g5: string;
          battle_legendary_regis_g6: string;
          battle_legendary_gro_kyo: string;
          battle_legendary_rayquaza: string;
          battle_legendary_deoxys: string;
          battle_legendary_lake_trio: string;
          battle_legendary_sinnoh: string;
          battle_legendary_dia_pal: string;
          battle_legendary_origin_forme: string;
          battle_legendary_giratina: string;
          battle_legendary_arceus: string;
          battle_legendary_unova: string;
          battle_legendary_kyurem: string;
          battle_legendary_res_zek: string;
          battle_legendary_xern_yvel: string;
          battle_legendary_tapu: string;
          battle_legendary_sol_lun: string;
          battle_legendary_ub: string;
          battle_legendary_dusk_dawn: string;
          battle_legendary_ultra_nec: string;
          battle_legendary_zac_zam: string;
          battle_legendary_glas_spec: string;
          battle_legendary_calyrex: string;
          battle_legendary_riders: string;
          battle_legendary_birds_galar: string;
          battle_legendary_ruinous: string;
          battle_legendary_kor_mir: string;
          battle_legendary_loyal_three: string;
          battle_legendary_ogerpon: string;
          battle_legendary_terapagos: string;
          battle_legendary_pecharunt: string;
          battle_rival: string;
          battle_rival_2: string;
          battle_rival_3: string;
          battle_trainer: string;
          battle_wild: string;
          battle_wild_strong: string;
          end_summit: string;
          battle_rocket_grunt: string;
          battle_aqua_magma_grunt: string;
          battle_galactic_grunt: string;
          battle_plasma_grunt: string;
          battle_flare_grunt: string;
          battle_aether_grunt: string;
          battle_skull_grunt: string;
          battle_macro_grunt: string;
          battle_galactic_admin: string;
          battle_skull_admin: string;
          battle_oleana: string;
          battle_rocket_boss: string;
          battle_aqua_magma_boss: string;
          battle_galactic_boss: string;
          battle_plasma_boss: string;
          battle_flare_boss: string;
          battle_aether_boss: string;
          battle_skull_boss: string;
          battle_macro_boss: string;
          abyss: string;
          badlands: string;
          beach: string;
          cave: string;
          construction_site: string;
          desert: string;
          dojo: string;
          end: string;
          factory: string;
          fairy_cave: string;
          forest: string;
          grass: string;
          graveyard: string;
          ice_cave: string;
          island: string;
          jungle: string;
          laboratory: string;
          lake: string;
          meadow: string;
          metropolis: string;
          mountain: string;
          plains: string;
          power_plant: string;
          ruins: string;
          sea: string;
          seabed: string;
          slum: string;
          snowy_forest: string;
          space: string;
          swamp: string;
          tall_grass: string;
          temple: string;
          town: string;
          volcano: string;
          wasteland: string;
          encounter_ace_trainer: string;
          encounter_backpacker: string;
          encounter_clerk: string;
          encounter_cyclist: string;
          encounter_lass: string;
          encounter_parasol_lady: string;
          encounter_pokefan: string;
          encounter_psychic: string;
          encounter_rich: string;
          encounter_rival: string;
          encounter_roughneck: string;
          encounter_scientist: string;
          encounter_twins: string;
          encounter_youngster: string;
          heal: string;
          menu: string;
          title: string;
      };
      biome: {
          unknownLocation: string;
          TOWN: string;
          PLAINS: string;
          GRASS: string;
          TALL_GRASS: string;
          METROPOLIS: string;
          FOREST: string;
          SEA: string;
          SWAMP: string;
          BEACH: string;
          LAKE: string;
          SEABED: string;
          MOUNTAIN: string;
          BADLANDS: string;
          CAVE: string;
          DESERT: string;
          ICE_CAVE: string;
          MEADOW: string;
          POWER_PLANT: string;
          VOLCANO: string;
          GRAVEYARD: string;
          DOJO: string;
          FACTORY: string;
          RUINS: string;
          WASTELAND: string;
          ABYSS: string;
          SPACE: string;
          CONSTRUCTION_SITE: string;
          JUNGLE: string;
          FAIRY_CAVE: string;
          TEMPLE: string;
          SLUM: string;
          SNOWY_FOREST: string;
          ISLAND: string;
          LABORATORY: string;
          END: string;
      };
      challenges: {
          noneSelected: string;
          title: string;
          illegalEvolution: string;
          singleGeneration: {
              name: string;
              desc: string;
              desc_default: string;
              gen_1: string;
              gen_2: string;
              gen_3: string;
              gen_4: string;
              gen_5: string;
              gen_6: string;
              gen_7: string;
              gen_8: string;
              gen_9: string;
          };
          singleType: {
              name: string;
              desc: string;
              desc_default: string;
          };
          freshStart: {
              name: string;
              desc: string;
              "value.0": string;
              "value.1": string;
          };
          inverseBattle: {
              name: string;
              shortName: string;
              desc: string;
              "value.0": string;
              "value.1": string;
          };
      };
      commandUiHandler: {
          fight: string;
          ball: string;
          pokemon: string;
          run: string;
          actionMessage: string;
      };
      common: {
          start: string;
          luckIndicator: string;
          shinyOnHover: string;
          commonShiny: string;
          rareShiny: string;
          epicShiny: string;
      };
      achv: {
          Achievements: {
              name: string;
          };
          Locked: {
              name: string;
          };
          MoneyAchv: {
              description: string;
          };
          "10K_MONEY": {
              name: string;
              name_female: string;
          };
          "100K_MONEY": {
              name: string;
          };
          "1M_MONEY": {
              name: string;
              name_female: string;
          };
          "10M_MONEY": {
              name: string;
          };
          DamageAchv: {
              description: string;
          };
          "250_DMG": {
              name: string;
          };
          "1000_DMG": {
              name: string;
          };
          "2500_DMG": {
              name: string;
          };
          "10000_DMG": {
              name: string;
              name_female: string;
          };
          HealAchv: {
              description: string;
          };
          "250_HEAL": {
              name: string;
              name_female: string;
          };
          "1000_HEAL": {
              name: string;
          };
          "2500_HEAL": {
              name: string;
              name_female: string;
          };
          "10000_HEAL": {
              name: string;
              name_female: string;
          };
          LevelAchv: {
              description: string;
          };
          LV_100: {
              name: string;
          };
          LV_250: {
              name: string;
          };
          LV_1000: {
              name: string;
          };
          RibbonAchv: {
              description: string;
          };
          "10_RIBBONS": {
              name: string;
          };
          "25_RIBBONS": {
              name: string;
              name_female: string;
          };
          "50_RIBBONS": {
              name: string;
              name_female: string;
          };
          "75_RIBBONS": {
              name: string;
          };
          "100_RIBBONS": {
              name: string;
              name_female: string;
          };
          TRANSFER_MAX_STAT_STAGE: {
              name: string;
              description: string;
          };
          MAX_FRIENDSHIP: {
              name: string;
              description: string;
          };
          MEGA_EVOLVE: {
              name: string;
              description: string;
          };
          GIGANTAMAX: {
              name: string;
              description: string;
          };
          TERASTALLIZE: {
              name: string;
              description: string;
          };
          STELLAR_TERASTALLIZE: {
              name: string;
              description: string;
          };
          SPLICE: {
              name: string;
              description: string;
          };
          MINI_BLACK_HOLE: {
              name: string;
              description: string;
          };
          CATCH_MYTHICAL: {
              name: string;
              description: string;
          };
          CATCH_SUB_LEGENDARY: {
              name: string;
              description: string;
          };
          CATCH_LEGENDARY: {
              name: string;
              description: string;
          };
          SEE_SHINY: {
              name: string;
              description: string;
          };
          SHINY_PARTY: {
              name: string;
              description: string;
          };
          HATCH_MYTHICAL: {
              name: string;
              description: string;
          };
          HATCH_SUB_LEGENDARY: {
              name: string;
              description: string;
          };
          HATCH_LEGENDARY: {
              name: string;
              description: string;
          };
          HATCH_SHINY: {
              name: string;
              description: string;
          };
          HIDDEN_ABILITY: {
              name: string;
              description: string;
          };
          PERFECT_IVS: {
              name: string;
              description: string;
          };
          CLASSIC_VICTORY: {
              name: string;
              description: string;
          };
          UNEVOLVED_CLASSIC_VICTORY: {
              name: string;
              description: string;
          };
          MONO_GEN_ONE: {
              name: string;
              description: string;
          };
          MONO_GEN_TWO: {
              name: string;
              description: string;
          };
          MONO_GEN_THREE: {
              name: string;
              description: string;
          };
          MONO_GEN_FOUR: {
              name: string;
              description: string;
          };
          MONO_GEN_FIVE: {
              name: string;
              description: string;
          };
          MONO_GEN_SIX: {
              name: string;
              description: string;
          };
          MONO_GEN_SEVEN: {
              name: string;
              description: string;
          };
          MONO_GEN_EIGHT: {
              name: string;
              description: string;
          };
          MONO_GEN_NINE: {
              name: string;
              description: string;
          };
          MonoType: {
              description: string;
          };
          MONO_NORMAL: {
              name: string;
          };
          MONO_FIGHTING: {
              name: string;
          };
          MONO_FLYING: {
              name: string;
          };
          MONO_POISON: {
              name: string;
          };
          MONO_GROUND: {
              name: string;
          };
          MONO_ROCK: {
              name: string;
          };
          MONO_BUG: {
              name: string;
          };
          MONO_GHOST: {
              name: string;
          };
          MONO_STEEL: {
              name: string;
          };
          MONO_FIRE: {
              name: string;
          };
          MONO_WATER: {
              name: string;
          };
          MONO_GRASS: {
              name: string;
          };
          MONO_ELECTRIC: {
              name: string;
          };
          MONO_PSYCHIC: {
              name: string;
          };
          MONO_ICE: {
              name: string;
          };
          MONO_DRAGON: {
              name: string;
          };
          MONO_DARK: {
              name: string;
          };
          MONO_FAIRY: {
              name: string;
          };
          FRESH_START: {
              name: string;
              description: string;
          };
          INVERSE_BATTLE: {
              name: string;
              description: string;
          };
      };
      dialogue: {
          youngster: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
                  "10": string;
                  "11": string;
                  "12": string;
                  "13": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
                  "10": string;
                  "11": string;
                  "12": string;
                  "13": string;
              };
          };
          lass: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
              };
          };
          breeder: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          breeder_female: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          fisherman: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          fisherman_female: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          swimmer: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          backpacker: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          ace_trainer: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          parasol_lady: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          twins: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          cyclist: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          black_belt: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          battle_girl: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          hiker: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          ranger: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          scientist: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          school_kid: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          artist: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          guitarist: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          worker: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          worker_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          worker_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          hex_maniac: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          psychic: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          officer: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          beauty: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          baker: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          biker: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          firebreather: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          sailor: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          archer: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          ariana: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          proton: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          petrel: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          tabitha: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          courtney: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          shelly: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          matt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          mars: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          jupiter: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          saturn: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          zinzolin: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          rood: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          xerosic: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          bryony: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          rocket_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          magma_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          aqua_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          galactic_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          plasma_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          flare_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          aether_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          faba: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          skull_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          plumeria: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          macro_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          oleana: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          rocket_boss_giovanni_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rocket_boss_giovanni_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          magma_boss_maxie_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          magma_boss_maxie_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aqua_boss_archie_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aqua_boss_archie_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          galactic_boss_cyrus_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          galactic_boss_cyrus_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          plasma_boss_ghetsis_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          plasma_boss_ghetsis_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          flare_boss_lysandre_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          flare_boss_lysandre_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aether_boss_lusamine_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aether_boss_lusamine_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          skull_boss_guzma_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          skull_boss_guzma_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          macro_boss_rose_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          macro_boss_rose_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          brock: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          misty: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          lt_surge: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          erika: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          janine: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          sabrina: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          blaine: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          giovanni: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          roxanne: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          brawly: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          wattson: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          flannery: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          norman: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          winona: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          tate: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          liza: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          juan: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          crasher_wake: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          falkner: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          nessa: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          melony: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          marlon: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          shauntal: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          marshal: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          cheren: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          chili: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          cilan: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          roark: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          morty: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
              };
          };
          crispin: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          amarys: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lacey: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drayton: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          ramos: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          viola: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          candice: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          gardenia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aaron: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          cress: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          allister: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          clay: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kofu: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          tulip: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          sidney: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          phoebe: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          glacia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drake: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          wallace: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lorelei: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          will: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          malva: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          hala: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          molayne: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rika: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bruno: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bugsy: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          koga: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bertha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lenora: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          siebold: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          roxie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          olivia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          poppy: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          agatha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          flint: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          grimsley: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          caitlin: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          diantha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          wikstrom: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          acerola: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          larry_elite: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lance: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          karen: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          milo: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lucian: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drasna: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kahili: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          hassel: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          blue: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          piers: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          red: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          jasmine: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lance_champion: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          steven: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          cynthia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          iris: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          hau: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          geeta: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          nemona: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          leon: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          whitney: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          chuck: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          katy: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          pryce: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          clair: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          maylene: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          fantina: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          byron: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          olympia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          volkner: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          burgh: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          elesa: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          skyla: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          brycen: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drayden: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          grant: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          korrina: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          clemont: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          valerie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          wulfric: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kabu: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bea: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          opal: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bede: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          gordie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          marnie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          raihan: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          brassius: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          iono: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          larry: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          ryme: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          grusha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          marnie_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          nessa_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          bea_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          allister_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          raihan_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          alder: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kieran: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_2_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_3: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_3_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_4: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_4_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_5: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_5_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_6: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_6_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
      };
      battleSpecDialogue: {
          encounter: string;
          firstStageWin: string;
          secondStageWin: string;
      };
      miscDialogue: {
          ending: string;
          ending_female: string;
          ending_endless: string;
          ending_name: string;
      };
      doubleBattleDialogue: {
          blue_red_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          red_blue_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          tate_liza_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          liza_tate_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          wallace_steven_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          steven_wallace_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          alder_iris_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          iris_alder_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          marnie_piers_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          piers_marnie_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
      };
      egg: {
          egg: string;
          greatTier: string;
          ultraTier: string;
          masterTier: string;
          defaultTier: string;
          hatchWavesMessageSoon: string;
          hatchWavesMessageClose: string;
          hatchWavesMessageNotClose: string;
          hatchWavesMessageLongTime: string;
          gachaTypeLegendary: string;
          gachaTypeMove: string;
          gachaTypeShiny: string;
          selectMachine: string;
          notEnoughVouchers: string;
          tooManyEggs: string;
          pull: string;
          pulls: string;
          sameSpeciesEgg: string;
          hatchFromTheEgg: string;
          eggMoveUnlock: string;
          rareEggMoveUnlock: string;
          moveUPGacha: string;
          shinyUPGacha: string;
          legendaryUPGacha: string;
      };
      fightUiHandler: {
          pp: string;
          power: string;
          accuracy: string;
          abilityFlyInText: string;
          passive: string;
      };
      filterBar: {
          genFilter: string;
          typeFilter: string;
          caughtFilter: string;
          unlocksFilter: string;
          miscFilter: string;
          sortFilter: string;
          all: string;
          normal: string;
          uncaught: string;
          passive: string;
          passiveUnlocked: string;
          passiveLocked: string;
          passiveUnlockable: string;
          costReduction: string;
          costReductionUnlocked: string;
          costReductionLocked: string;
          costReductionUnlockable: string;
          favorite: string;
          isFavorite: string;
          notFavorite: string;
          ribbon: string;
          hasWon: string;
          hasNotWon: string;
          hiddenAbility: string;
          hasHiddenAbility: string;
          noHiddenAbility: string;
          egg: string;
          eggPurchasable: string;
          pokerus: string;
          hasPokerus: string;
          noPokerus: string;
          sortByNumber: string;
          sortByCost: string;
          sortByCandies: string;
          sortByIVs: string;
          sortByName: string;
      };
      gameMode: {
          classic: string;
          endless: string;
          endlessSpliced: string;
          dailyRun: string;
          unknown: string;
          challenge: string;
      };
      gameStatsUiHandler: {
          stats: string;
          playTime: string;
          totalBattles: string;
          starters: string;
          shinyStarters: string;
          speciesSeen: string;
          speciesCaught: string;
          ribbonsOwned: string;
          classicRuns: string;
          classicWins: string;
          dailyRunAttempts: string;
          dailyRunWins: string;
          endlessRuns: string;
          highestWaveEndless: string;
          highestMoney: string;
          highestDamage: string;
          highestHPHealed: string;
          pokemonEncountered: string;
          pokemonDefeated: string;
          pokemonCaught: string;
          eggsHatched: string;
          subLegendsSeen: string;
          subLegendsCaught: string;
          subLegendsHatched: string;
          legendsSeen: string;
          legendsCaught: string;
          legendsHatched: string;
          mythicalsSeen: string;
          mythicalsCaught: string;
          mythicalsHatched: string;
          shiniesSeen: string;
          shiniesCaught: string;
          shiniesHatched: string;
          pokemonFused: string;
          trainersDefeated: string;
          eggsPulled: string;
          rareEggsPulled: string;
          epicEggsPulled: string;
          legendaryEggsPulled: string;
          manaphyEggsPulled: string;
      };
      growth: {
          Erratic: string;
          Fast: string;
          Medium_Fast: string;
          Medium_Slow: string;
          Slow: string;
          Fluctuating: string;
      };
      menu: {
          cancel: string;
          continue: string;
          dailyRun: string;
          loadGame: string;
          newGame: string;
          settings: string;
          selectGameMode: string;
          logInOrCreateAccount: string;
          username: string;
          password: string;
          login: string;
          orUse: string;
          register: string;
          emptyUsername: string;
          invalidLoginUsername: string;
          invalidRegisterUsername: string;
          invalidLoginPassword: string;
          invalidRegisterPassword: string;
          usernameAlreadyUsed: string;
          accountNonExistent: string;
          unmatchingPassword: string;
          passwordNotMatchingConfirmPassword: string;
          confirmPassword: string;
          registrationAgeWarning: string;
          backToLogin: string;
          failedToLoadSaveData: string;
          sessionSuccess: string;
          failedToLoadSession: string;
          boyOrGirl: string;
          evolving: string;
          stoppedEvolving: string;
          pauseEvolutionsQuestion: string;
          evolutionsPaused: string;
          evolutionDone: string;
          dailyRankings: string;
          weeklyRankings: string;
          noRankings: string;
          positionIcon: string;
          usernameScoreboard: string;
          score: string;
          wave: string;
          loading: string;
          loadingAsset: string;
          playersOnline: string;
          yes: string;
          no: string;
          disclaimer: string;
          disclaimerDescription: string;
          choosePokemon: string;
          renamePokemon: string;
          rename: string;
          nickname: string;
          errorServerDown: string;
      };
      menuUiHandler: {
          GAME_SETTINGS: string;
          ACHIEVEMENTS: string;
          STATS: string;
          RUN_HISTORY: string;
          EGG_LIST: string;
          EGG_GACHA: string;
          MANAGE_DATA: string;
          COMMUNITY: string;
          SAVE_AND_QUIT: string;
          LOG_OUT: string;
          slot: string;
          importSession: string;
          importSlotSelect: string;
          exportSession: string;
          exportSlotSelect: string;
          importRunHistory: string;
          exportRunHistory: string;
          importData: string;
          exportData: string;
          consentPreferences: string;
          linkDiscord: string;
          unlinkDiscord: string;
          linkGoogle: string;
          unlinkGoogle: string;
          cancel: string;
          losingProgressionWarning: string;
          noEggs: string;
          donate: string;
      };
      modifier: {
          surviveDamageApply: string;
          turnHealApply: string;
          hitHealApply: string;
          pokemonInstantReviveApply: string;
          resetNegativeStatStageApply: string;
          moneyInterestApply: string;
          turnHeldItemTransferApply: string;
          contactHeldItemTransferApply: string;
          enemyTurnHealApply: string;
          bypassSpeedChanceApply: string;
      };
      modifierType: {
          ModifierType: {
              AddPokeballModifierType: {
                  name: string;
                  description: string;
              };
              AddVoucherModifierType: {
                  name: string;
                  description: string;
              };
              PokemonHeldItemModifierType: {
                  extra: {
                      inoperable: string;
                      tooMany: string;
                  };
              };
              PokemonHpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                      fullyWithStatus: string;
                  };
              };
              PokemonReviveModifierType: {
                  description: string;
              };
              PokemonStatusHealModifierType: {
                  description: string;
              };
              PokemonPpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                  };
              };
              PokemonAllMovePpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                  };
              };
              PokemonPpUpModifierType: {
                  description: string;
              };
              PokemonNatureChangeModifierType: {
                  name: string;
                  description: string;
              };
              DoubleBattleChanceBoosterModifierType: {
                  description: string;
              };
              TempStatStageBoosterModifierType: {
                  description: string;
              };
              AttackTypeBoosterModifierType: {
                  description: string;
              };
              PokemonLevelIncrementModifierType: {
                  description: string;
              };
              AllPokemonLevelIncrementModifierType: {
                  description: string;
              };
              BaseStatBoosterModifierType: {
                  description: string;
              };
              AllPokemonFullHpRestoreModifierType: {
                  description: string;
              };
              AllPokemonFullReviveModifierType: {
                  description: string;
              };
              MoneyRewardModifierType: {
                  description: string;
                  extra: {
                      small: string;
                      moderate: string;
                      large: string;
                  };
              };
              ExpBoosterModifierType: {
                  description: string;
              };
              PokemonExpBoosterModifierType: {
                  description: string;
              };
              PokemonFriendshipBoosterModifierType: {
                  description: string;
              };
              PokemonMoveAccuracyBoosterModifierType: {
                  description: string;
              };
              PokemonMultiHitModifierType: {
                  description: string;
              };
              TmModifierType: {
                  name: string;
                  description: string;
              };
              TmModifierTypeWithInfo: {
                  name: string;
                  description: string;
              };
              EvolutionItemModifierType: {
                  description: string;
              };
              FormChangeItemModifierType: {
                  description: string;
              };
              FusePokemonModifierType: {
                  description: string;
              };
              TerastallizeModifierType: {
                  name: string;
                  description: string;
              };
              ContactHeldItemTransferChanceModifierType: {
                  description: string;
              };
              TurnHeldItemTransferModifierType: {
                  description: string;
              };
              EnemyAttackStatusEffectChanceModifierType: {
                  description: string;
              };
              EnemyEndureChanceModifierType: {
                  description: string;
              };
              RARE_CANDY: {
                  name: string;
              };
              RARER_CANDY: {
                  name: string;
              };
              MEGA_BRACELET: {
                  name: string;
                  description: string;
              };
              DYNAMAX_BAND: {
                  name: string;
                  description: string;
              };
              TERA_ORB: {
                  name: string;
                  description: string;
              };
              MAP: {
                  name: string;
                  description: string;
              };
              POTION: {
                  name: string;
              };
              SUPER_POTION: {
                  name: string;
              };
              HYPER_POTION: {
                  name: string;
              };
              MAX_POTION: {
                  name: string;
              };
              FULL_RESTORE: {
                  name: string;
              };
              REVIVE: {
                  name: string;
              };
              MAX_REVIVE: {
                  name: string;
              };
              FULL_HEAL: {
                  name: string;
              };
              SACRED_ASH: {
                  name: string;
              };
              REVIVER_SEED: {
                  name: string;
                  description: string;
              };
              WHITE_HERB: {
                  name: string;
                  description: string;
              };
              ETHER: {
                  name: string;
              };
              MAX_ETHER: {
                  name: string;
              };
              ELIXIR: {
                  name: string;
              };
              MAX_ELIXIR: {
                  name: string;
              };
              PP_UP: {
                  name: string;
              };
              PP_MAX: {
                  name: string;
              };
              LURE: {
                  name: string;
              };
              SUPER_LURE: {
                  name: string;
              };
              MAX_LURE: {
                  name: string;
              };
              MEMORY_MUSHROOM: {
                  name: string;
                  description: string;
              };
              EXP_SHARE: {
                  name: string;
                  description: string;
              };
              EXP_BALANCE: {
                  name: string;
                  description: string;
              };
              OVAL_CHARM: {
                  name: string;
                  description: string;
              };
              EXP_CHARM: {
                  name: string;
              };
              SUPER_EXP_CHARM: {
                  name: string;
              };
              GOLDEN_EXP_CHARM: {
                  name: string;
              };
              LUCKY_EGG: {
                  name: string;
              };
              GOLDEN_EGG: {
                  name: string;
              };
              SOOTHE_BELL: {
                  name: string;
              };
              SCOPE_LENS: {
                  name: string;
                  description: string;
              };
              DIRE_HIT: {
                  name: string;
                  extra: {
                      raises: string;
                  };
              };
              LEEK: {
                  name: string;
                  description: string;
              };
              EVIOLITE: {
                  name: string;
                  description: string;
              };
              SOUL_DEW: {
                  name: string;
                  description: string;
              };
              NUGGET: {
                  name: string;
              };
              BIG_NUGGET: {
                  name: string;
              };
              RELIC_GOLD: {
                  name: string;
              };
              AMULET_COIN: {
                  name: string;
                  description: string;
              };
              GOLDEN_PUNCH: {
                  name: string;
                  description: string;
              };
              COIN_CASE: {
                  name: string;
                  description: string;
              };
              LOCK_CAPSULE: {
                  name: string;
                  description: string;
              };
              GRIP_CLAW: {
                  name: string;
              };
              WIDE_LENS: {
                  name: string;
              };
              MULTI_LENS: {
                  name: string;
              };
              HEALING_CHARM: {
                  name: string;
                  description: string;
              };
              CANDY_JAR: {
                  name: string;
                  description: string;
              };
              BERRY_POUCH: {
                  name: string;
                  description: string;
              };
              FOCUS_BAND: {
                  name: string;
                  description: string;
              };
              QUICK_CLAW: {
                  name: string;
                  description: string;
              };
              KINGS_ROCK: {
                  name: string;
                  description: string;
              };
              LEFTOVERS: {
                  name: string;
                  description: string;
              };
              SHELL_BELL: {
                  name: string;
                  description: string;
              };
              TOXIC_ORB: {
                  name: string;
                  description: string;
              };
              FLAME_ORB: {
                  name: string;
                  description: string;
              };
              BATON: {
                  name: string;
                  description: string;
              };
              SHINY_CHARM: {
                  name: string;
                  description: string;
              };
              ABILITY_CHARM: {
                  name: string;
                  description: string;
              };
              IV_SCANNER: {
                  name: string;
                  description: string;
              };
              DNA_SPLICERS: {
                  name: string;
              };
              MINI_BLACK_HOLE: {
                  name: string;
              };
              GOLDEN_POKEBALL: {
                  name: string;
                  description: string;
              };
              ENEMY_DAMAGE_BOOSTER: {
                  name: string;
                  description: string;
              };
              ENEMY_DAMAGE_REDUCTION: {
                  name: string;
                  description: string;
              };
              ENEMY_HEAL: {
                  name: string;
                  description: string;
              };
              ENEMY_ATTACK_POISON_CHANCE: {
                  name: string;
              };
              ENEMY_ATTACK_PARALYZE_CHANCE: {
                  name: string;
              };
              ENEMY_ATTACK_BURN_CHANCE: {
                  name: string;
              };
              ENEMY_STATUS_EFFECT_HEAL_CHANCE: {
                  name: string;
                  description: string;
              };
              ENEMY_ENDURE_CHANCE: {
                  name: string;
              };
              ENEMY_FUSED_CHANCE: {
                  name: string;
                  description: string;
              };
          };
          SpeciesBoosterItem: {
              LIGHT_BALL: {
                  name: string;
                  description: string;
              };
              THICK_CLUB: {
                  name: string;
                  description: string;
              };
              METAL_POWDER: {
                  name: string;
                  description: string;
              };
              QUICK_POWDER: {
                  name: string;
                  description: string;
              };
          };
          TempStatStageBoosterItem: {
              x_attack: string;
              x_defense: string;
              x_sp_atk: string;
              x_sp_def: string;
              x_speed: string;
              x_accuracy: string;
          };
          AttackTypeBoosterItem: {
              silk_scarf: string;
              black_belt: string;
              sharp_beak: string;
              poison_barb: string;
              soft_sand: string;
              hard_stone: string;
              silver_powder: string;
              spell_tag: string;
              metal_coat: string;
              charcoal: string;
              mystic_water: string;
              miracle_seed: string;
              magnet: string;
              twisted_spoon: string;
              never_melt_ice: string;
              dragon_fang: string;
              black_glasses: string;
              fairy_feather: string;
          };
          BaseStatBoosterItem: {
              hp_up: string;
              protein: string;
              iron: string;
              calcium: string;
              zinc: string;
              carbos: string;
          };
          EvolutionItem: {
              NONE: string;
              LINKING_CORD: string;
              SUN_STONE: string;
              MOON_STONE: string;
              LEAF_STONE: string;
              FIRE_STONE: string;
              WATER_STONE: string;
              THUNDER_STONE: string;
              ICE_STONE: string;
              DUSK_STONE: string;
              DAWN_STONE: string;
              SHINY_STONE: string;
              CRACKED_POT: string;
              SWEET_APPLE: string;
              TART_APPLE: string;
              STRAWBERRY_SWEET: string;
              UNREMARKABLE_TEACUP: string;
              CHIPPED_POT: string;
              BLACK_AUGURITE: string;
              GALARICA_CUFF: string;
              GALARICA_WREATH: string;
              PEAT_BLOCK: string;
              AUSPICIOUS_ARMOR: string;
              MALICIOUS_ARMOR: string;
              MASTERPIECE_TEACUP: string;
              METAL_ALLOY: string;
              SCROLL_OF_DARKNESS: string;
              SCROLL_OF_WATERS: string;
              SYRUPY_APPLE: string;
          };
          FormChangeItem: {
              NONE: string;
              ABOMASITE: string;
              ABSOLITE: string;
              AERODACTYLITE: string;
              AGGRONITE: string;
              ALAKAZITE: string;
              ALTARIANITE: string;
              AMPHAROSITE: string;
              AUDINITE: string;
              BANETTITE: string;
              BEEDRILLITE: string;
              BLASTOISINITE: string;
              BLAZIKENITE: string;
              CAMERUPTITE: string;
              CHARIZARDITE_X: string;
              CHARIZARDITE_Y: string;
              DIANCITE: string;
              GALLADITE: string;
              GARCHOMPITE: string;
              GARDEVOIRITE: string;
              GENGARITE: string;
              GLALITITE: string;
              GYARADOSITE: string;
              HERACRONITE: string;
              HOUNDOOMINITE: string;
              KANGASKHANITE: string;
              LATIASITE: string;
              LATIOSITE: string;
              LOPUNNITE: string;
              LUCARIONITE: string;
              MANECTITE: string;
              MAWILITE: string;
              MEDICHAMITE: string;
              METAGROSSITE: string;
              MEWTWONITE_X: string;
              MEWTWONITE_Y: string;
              PIDGEOTITE: string;
              PINSIRITE: string;
              RAYQUAZITE: string;
              SABLENITE: string;
              SALAMENCITE: string;
              SCEPTILITE: string;
              SCIZORITE: string;
              SHARPEDONITE: string;
              SLOWBRONITE: string;
              STEELIXITE: string;
              SWAMPERTITE: string;
              TYRANITARITE: string;
              VENUSAURITE: string;
              BLUE_ORB: string;
              RED_ORB: string;
              SHARP_METEORITE: string;
              HARD_METEORITE: string;
              SMOOTH_METEORITE: string;
              ADAMANT_CRYSTAL: string;
              LUSTROUS_GLOBE: string;
              GRISEOUS_CORE: string;
              REVEAL_GLASS: string;
              GRACIDEA: string;
              MAX_MUSHROOMS: string;
              DARK_STONE: string;
              LIGHT_STONE: string;
              PRISON_BOTTLE: string;
              N_LUNARIZER: string;
              N_SOLARIZER: string;
              RUSTED_SWORD: string;
              RUSTED_SHIELD: string;
              ICY_REINS_OF_UNITY: string;
              SHADOW_REINS_OF_UNITY: string;
              WELLSPRING_MASK: string;
              HEARTHFLAME_MASK: string;
              CORNERSTONE_MASK: string;
              SHOCK_DRIVE: string;
              BURN_DRIVE: string;
              CHILL_DRIVE: string;
              DOUSE_DRIVE: string;
              ULTRANECROZIUM_Z: string;
              FIST_PLATE: string;
              SKY_PLATE: string;
              TOXIC_PLATE: string;
              EARTH_PLATE: string;
              STONE_PLATE: string;
              INSECT_PLATE: string;
              SPOOKY_PLATE: string;
              IRON_PLATE: string;
              FLAME_PLATE: string;
              SPLASH_PLATE: string;
              MEADOW_PLATE: string;
              ZAP_PLATE: string;
              MIND_PLATE: string;
              ICICLE_PLATE: string;
              DRACO_PLATE: string;
              DREAD_PLATE: string;
              PIXIE_PLATE: string;
              BLANK_PLATE: string;
              LEGEND_PLATE: string;
              FIGHTING_MEMORY: string;
              FLYING_MEMORY: string;
              POISON_MEMORY: string;
              GROUND_MEMORY: string;
              ROCK_MEMORY: string;
              BUG_MEMORY: string;
              GHOST_MEMORY: string;
              STEEL_MEMORY: string;
              FIRE_MEMORY: string;
              WATER_MEMORY: string;
              GRASS_MEMORY: string;
              ELECTRIC_MEMORY: string;
              PSYCHIC_MEMORY: string;
              ICE_MEMORY: string;
              DRAGON_MEMORY: string;
              DARK_MEMORY: string;
              FAIRY_MEMORY: string;
              NORMAL_MEMORY: string;
          };
      };
      move: {
          pound: {
              name: string;
              effect: string;
          };
          karateChop: {
              name: string;
              effect: string;
          };
          doubleSlap: {
              name: string;
              effect: string;
          };
          cometPunch: {
              name: string;
              effect: string;
          };
          megaPunch: {
              name: string;
              effect: string;
          };
          payDay: {
              name: string;
              effect: string;
          };
          firePunch: {
              name: string;
              effect: string;
          };
          icePunch: {
              name: string;
              effect: string;
          };
          thunderPunch: {
              name: string;
              effect: string;
          };
          scratch: {
              name: string;
              effect: string;
          };
          viseGrip: {
              name: string;
              effect: string;
          };
          guillotine: {
              name: string;
              effect: string;
          };
          razorWind: {
              name: string;
              effect: string;
          };
          swordsDance: {
              name: string;
              effect: string;
          };
          cut: {
              name: string;
              effect: string;
          };
          gust: {
              name: string;
              effect: string;
          };
          wingAttack: {
              name: string;
              effect: string;
          };
          whirlwind: {
              name: string;
              effect: string;
          };
          fly: {
              name: string;
              effect: string;
          };
          bind: {
              name: string;
              effect: string;
          };
          slam: {
              name: string;
              effect: string;
          };
          vineWhip: {
              name: string;
              effect: string;
          };
          stomp: {
              name: string;
              effect: string;
          };
          doubleKick: {
              name: string;
              effect: string;
          };
          megaKick: {
              name: string;
              effect: string;
          };
          jumpKick: {
              name: string;
              effect: string;
          };
          rollingKick: {
              name: string;
              effect: string;
          };
          sandAttack: {
              name: string;
              effect: string;
          };
          headbutt: {
              name: string;
              effect: string;
          };
          hornAttack: {
              name: string;
              effect: string;
          };
          furyAttack: {
              name: string;
              effect: string;
          };
          hornDrill: {
              name: string;
              effect: string;
          };
          tackle: {
              name: string;
              effect: string;
          };
          bodySlam: {
              name: string;
              effect: string;
          };
          wrap: {
              name: string;
              effect: string;
          };
          takeDown: {
              name: string;
              effect: string;
          };
          thrash: {
              name: string;
              effect: string;
          };
          doubleEdge: {
              name: string;
              effect: string;
          };
          tailWhip: {
              name: string;
              effect: string;
          };
          poisonSting: {
              name: string;
              effect: string;
          };
          twineedle: {
              name: string;
              effect: string;
          };
          pinMissile: {
              name: string;
              effect: string;
          };
          leer: {
              name: string;
              effect: string;
          };
          bite: {
              name: string;
              effect: string;
          };
          growl: {
              name: string;
              effect: string;
          };
          roar: {
              name: string;
              effect: string;
          };
          sing: {
              name: string;
              effect: string;
          };
          supersonic: {
              name: string;
              effect: string;
          };
          sonicBoom: {
              name: string;
              effect: string;
          };
          disable: {
              name: string;
              effect: string;
          };
          acid: {
              name: string;
              effect: string;
          };
          ember: {
              name: string;
              effect: string;
          };
          flamethrower: {
              name: string;
              effect: string;
          };
          mist: {
              name: string;
              effect: string;
          };
          waterGun: {
              name: string;
              effect: string;
          };
          hydroPump: {
              name: string;
              effect: string;
          };
          surf: {
              name: string;
              effect: string;
          };
          iceBeam: {
              name: string;
              effect: string;
          };
          blizzard: {
              name: string;
              effect: string;
          };
          psybeam: {
              name: string;
              effect: string;
          };
          bubbleBeam: {
              name: string;
              effect: string;
          };
          auroraBeam: {
              name: string;
              effect: string;
          };
          hyperBeam: {
              name: string;
              effect: string;
          };
          peck: {
              name: string;
              effect: string;
          };
          drillPeck: {
              name: string;
              effect: string;
          };
          submission: {
              name: string;
              effect: string;
          };
          lowKick: {
              name: string;
              effect: string;
          };
          counter: {
              name: string;
              effect: string;
          };
          seismicToss: {
              name: string;
              effect: string;
          };
          strength: {
              name: string;
              effect: string;
          };
          absorb: {
              name: string;
              effect: string;
          };
          megaDrain: {
              name: string;
              effect: string;
          };
          leechSeed: {
              name: string;
              effect: string;
          };
          growth: {
              name: string;
              effect: string;
          };
          razorLeaf: {
              name: string;
              effect: string;
          };
          solarBeam: {
              name: string;
              effect: string;
          };
          poisonPowder: {
              name: string;
              effect: string;
          };
          stunSpore: {
              name: string;
              effect: string;
          };
          sleepPowder: {
              name: string;
              effect: string;
          };
          petalDance: {
              name: string;
              effect: string;
          };
          stringShot: {
              name: string;
              effect: string;
          };
          dragonRage: {
              name: string;
              effect: string;
          };
          fireSpin: {
              name: string;
              effect: string;
          };
          thunderShock: {
              name: string;
              effect: string;
          };
          thunderbolt: {
              name: string;
              effect: string;
          };
          thunderWave: {
              name: string;
              effect: string;
          };
          thunder: {
              name: string;
              effect: string;
          };
          rockThrow: {
              name: string;
              effect: string;
          };
          earthquake: {
              name: string;
              effect: string;
          };
          fissure: {
              name: string;
              effect: string;
          };
          dig: {
              name: string;
              effect: string;
          };
          toxic: {
              name: string;
              effect: string;
          };
          confusion: {
              name: string;
              effect: string;
          };
          psychic: {
              name: string;
              effect: string;
          };
          hypnosis: {
              name: string;
              effect: string;
          };
          meditate: {
              name: string;
              effect: string;
          };
          agility: {
              name: string;
              effect: string;
          };
          quickAttack: {
              name: string;
              effect: string;
          };
          rage: {
              name: string;
              effect: string;
          };
          teleport: {
              name: string;
              effect: string;
          };
          nightShade: {
              name: string;
              effect: string;
          };
          mimic: {
              name: string;
              effect: string;
          };
          screech: {
              name: string;
              effect: string;
          };
          doubleTeam: {
              name: string;
              effect: string;
          };
          recover: {
              name: string;
              effect: string;
          };
          harden: {
              name: string;
              effect: string;
          };
          minimize: {
              name: string;
              effect: string;
          };
          smokescreen: {
              name: string;
              effect: string;
          };
          confuseRay: {
              name: string;
              effect: string;
          };
          withdraw: {
              name: string;
              effect: string;
          };
          defenseCurl: {
              name: string;
              effect: string;
          };
          barrier: {
              name: string;
              effect: string;
          };
          lightScreen: {
              name: string;
              effect: string;
          };
          haze: {
              name: string;
              effect: string;
          };
          reflect: {
              name: string;
              effect: string;
          };
          focusEnergy: {
              name: string;
              effect: string;
          };
          bide: {
              name: string;
              effect: string;
          };
          metronome: {
              name: string;
              effect: string;
          };
          mirrorMove: {
              name: string;
              effect: string;
          };
          selfDestruct: {
              name: string;
              effect: string;
          };
          eggBomb: {
              name: string;
              effect: string;
          };
          lick: {
              name: string;
              effect: string;
          };
          smog: {
              name: string;
              effect: string;
          };
          sludge: {
              name: string;
              effect: string;
          };
          boneClub: {
              name: string;
              effect: string;
          };
          fireBlast: {
              name: string;
              effect: string;
          };
          waterfall: {
              name: string;
              effect: string;
          };
          clamp: {
              name: string;
              effect: string;
          };
          swift: {
              name: string;
              effect: string;
          };
          skullBash: {
              name: string;
              effect: string;
          };
          spikeCannon: {
              name: string;
              effect: string;
          };
          constrict: {
              name: string;
              effect: string;
          };
          amnesia: {
              name: string;
              effect: string;
          };
          kinesis: {
              name: string;
              effect: string;
          };
          softBoiled: {
              name: string;
              effect: string;
          };
          highJumpKick: {
              name: string;
              effect: string;
          };
          glare: {
              name: string;
              effect: string;
          };
          dreamEater: {
              name: string;
              effect: string;
          };
          poisonGas: {
              name: string;
              effect: string;
          };
          barrage: {
              name: string;
              effect: string;
          };
          leechLife: {
              name: string;
              effect: string;
          };
          lovelyKiss: {
              name: string;
              effect: string;
          };
          skyAttack: {
              name: string;
              effect: string;
          };
          transform: {
              name: string;
              effect: string;
          };
          bubble: {
              name: string;
              effect: string;
          };
          dizzyPunch: {
              name: string;
              effect: string;
          };
          spore: {
              name: string;
              effect: string;
          };
          flash: {
              name: string;
              effect: string;
          };
          psywave: {
              name: string;
              effect: string;
          };
          splash: {
              name: string;
              effect: string;
          };
          acidArmor: {
              name: string;
              effect: string;
          };
          crabhammer: {
              name: string;
              effect: string;
          };
          explosion: {
              name: string;
              effect: string;
          };
          furySwipes: {
              name: string;
              effect: string;
          };
          bonemerang: {
              name: string;
              effect: string;
          };
          rest: {
              name: string;
              effect: string;
          };
          rockSlide: {
              name: string;
              effect: string;
          };
          hyperFang: {
              name: string;
              effect: string;
          };
          sharpen: {
              name: string;
              effect: string;
          };
          conversion: {
              name: string;
              effect: string;
          };
          triAttack: {
              name: string;
              effect: string;
          };
          superFang: {
              name: string;
              effect: string;
          };
          slash: {
              name: string;
              effect: string;
          };
          substitute: {
              name: string;
              effect: string;
          };
          struggle: {
              name: string;
              effect: string;
          };
          sketch: {
              name: string;
              effect: string;
          };
          tripleKick: {
              name: string;
              effect: string;
          };
          thief: {
              name: string;
              effect: string;
          };
          spiderWeb: {
              name: string;
              effect: string;
          };
          mindReader: {
              name: string;
              effect: string;
          };
          nightmare: {
              name: string;
              effect: string;
          };
          flameWheel: {
              name: string;
              effect: string;
          };
          snore: {
              name: string;
              effect: string;
          };
          curse: {
              name: string;
              effect: string;
          };
          flail: {
              name: string;
              effect: string;
          };
          conversion2: {
              name: string;
              effect: string;
          };
          aeroblast: {
              name: string;
              effect: string;
          };
          cottonSpore: {
              name: string;
              effect: string;
          };
          reversal: {
              name: string;
              effect: string;
          };
          spite: {
              name: string;
              effect: string;
          };
          powderSnow: {
              name: string;
              effect: string;
          };
          protect: {
              name: string;
              effect: string;
          };
          machPunch: {
              name: string;
              effect: string;
          };
          scaryFace: {
              name: string;
              effect: string;
          };
          feintAttack: {
              name: string;
              effect: string;
          };
          sweetKiss: {
              name: string;
              effect: string;
          };
          bellyDrum: {
              name: string;
              effect: string;
          };
          sludgeBomb: {
              name: string;
              effect: string;
          };
          mudSlap: {
              name: string;
              effect: string;
          };
          octazooka: {
              name: string;
              effect: string;
          };
          spikes: {
              name: string;
              effect: string;
          };
          zapCannon: {
              name: string;
              effect: string;
          };
          foresight: {
              name: string;
              effect: string;
          };
          destinyBond: {
              name: string;
              effect: string;
          };
          perishSong: {
              name: string;
              effect: string;
          };
          icyWind: {
              name: string;
              effect: string;
          };
          detect: {
              name: string;
              effect: string;
          };
          boneRush: {
              name: string;
              effect: string;
          };
          lockOn: {
              name: string;
              effect: string;
          };
          outrage: {
              name: string;
              effect: string;
          };
          sandstorm: {
              name: string;
              effect: string;
          };
          gigaDrain: {
              name: string;
              effect: string;
          };
          endure: {
              name: string;
              effect: string;
          };
          charm: {
              name: string;
              effect: string;
          };
          rollout: {
              name: string;
              effect: string;
          };
          falseSwipe: {
              name: string;
              effect: string;
          };
          swagger: {
              name: string;
              effect: string;
          };
          milkDrink: {
              name: string;
              effect: string;
          };
          spark: {
              name: string;
              effect: string;
          };
          furyCutter: {
              name: string;
              effect: string;
          };
          steelWing: {
              name: string;
              effect: string;
          };
          meanLook: {
              name: string;
              effect: string;
          };
          attract: {
              name: string;
              effect: string;
          };
          sleepTalk: {
              name: string;
              effect: string;
          };
          healBell: {
              name: string;
              effect: string;
          };
          return: {
              name: string;
              effect: string;
          };
          present: {
              name: string;
              effect: string;
          };
          frustration: {
              name: string;
              effect: string;
          };
          safeguard: {
              name: string;
              effect: string;
          };
          painSplit: {
              name: string;
              effect: string;
          };
          sacredFire: {
              name: string;
              effect: string;
          };
          magnitude: {
              name: string;
              effect: string;
          };
          dynamicPunch: {
              name: string;
              effect: string;
          };
          megahorn: {
              name: string;
              effect: string;
          };
          dragonBreath: {
              name: string;
              effect: string;
          };
          batonPass: {
              name: string;
              effect: string;
          };
          encore: {
              name: string;
              effect: string;
          };
          pursuit: {
              name: string;
              effect: string;
          };
          rapidSpin: {
              name: string;
              effect: string;
          };
          sweetScent: {
              name: string;
              effect: string;
          };
          ironTail: {
              name: string;
              effect: string;
          };
          metalClaw: {
              name: string;
              effect: string;
          };
          vitalThrow: {
              name: string;
              effect: string;
          };
          morningSun: {
              name: string;
              effect: string;
          };
          synthesis: {
              name: string;
              effect: string;
          };
          moonlight: {
              name: string;
              effect: string;
          };
          hiddenPower: {
              name: string;
              effect: string;
          };
          crossChop: {
              name: string;
              effect: string;
          };
          twister: {
              name: string;
              effect: string;
          };
          rainDance: {
              name: string;
              effect: string;
          };
          sunnyDay: {
              name: string;
              effect: string;
          };
          crunch: {
              name: string;
              effect: string;
          };
          mirrorCoat: {
              name: string;
              effect: string;
          };
          psychUp: {
              name: string;
              effect: string;
          };
          extremeSpeed: {
              name: string;
              effect: string;
          };
          ancientPower: {
              name: string;
              effect: string;
          };
          shadowBall: {
              name: string;
              effect: string;
          };
          futureSight: {
              name: string;
              effect: string;
          };
          rockSmash: {
              name: string;
              effect: string;
          };
          whirlpool: {
              name: string;
              effect: string;
          };
          beatUp: {
              name: string;
              effect: string;
          };
          fakeOut: {
              name: string;
              effect: string;
          };
          uproar: {
              name: string;
              effect: string;
          };
          stockpile: {
              name: string;
              effect: string;
          };
          spitUp: {
              name: string;
              effect: string;
          };
          swallow: {
              name: string;
              effect: string;
          };
          heatWave: {
              name: string;
              effect: string;
          };
          hail: {
              name: string;
              effect: string;
          };
          torment: {
              name: string;
              effect: string;
          };
          flatter: {
              name: string;
              effect: string;
          };
          willOWisp: {
              name: string;
              effect: string;
          };
          memento: {
              name: string;
              effect: string;
          };
          facade: {
              name: string;
              effect: string;
          };
          focusPunch: {
              name: string;
              effect: string;
          };
          smellingSalts: {
              name: string;
              effect: string;
          };
          followMe: {
              name: string;
              effect: string;
          };
          naturePower: {
              name: string;
              effect: string;
          };
          charge: {
              name: string;
              effect: string;
          };
          taunt: {
              name: string;
              effect: string;
          };
          helpingHand: {
              name: string;
              effect: string;
          };
          trick: {
              name: string;
              effect: string;
          };
          rolePlay: {
              name: string;
              effect: string;
          };
          wish: {
              name: string;
              effect: string;
          };
          assist: {
              name: string;
              effect: string;
          };
          ingrain: {
              name: string;
              effect: string;
          };
          superpower: {
              name: string;
              effect: string;
          };
          magicCoat: {
              name: string;
              effect: string;
          };
          recycle: {
              name: string;
              effect: string;
          };
          revenge: {
              name: string;
              effect: string;
          };
          brickBreak: {
              name: string;
              effect: string;
          };
          yawn: {
              name: string;
              effect: string;
          };
          knockOff: {
              name: string;
              effect: string;
          };
          endeavor: {
              name: string;
              effect: string;
          };
          eruption: {
              name: string;
              effect: string;
          };
          skillSwap: {
              name: string;
              effect: string;
          };
          imprison: {
              name: string;
              effect: string;
          };
          refresh: {
              name: string;
              effect: string;
          };
          grudge: {
              name: string;
              effect: string;
          };
          snatch: {
              name: string;
              effect: string;
          };
          secretPower: {
              name: string;
              effect: string;
          };
          dive: {
              name: string;
              effect: string;
          };
          armThrust: {
              name: string;
              effect: string;
          };
          camouflage: {
              name: string;
              effect: string;
          };
          tailGlow: {
              name: string;
              effect: string;
          };
          lusterPurge: {
              name: string;
              effect: string;
          };
          mistBall: {
              name: string;
              effect: string;
          };
          featherDance: {
              name: string;
              effect: string;
          };
          teeterDance: {
              name: string;
              effect: string;
          };
          blazeKick: {
              name: string;
              effect: string;
          };
          mudSport: {
              name: string;
              effect: string;
          };
          iceBall: {
              name: string;
              effect: string;
          };
          needleArm: {
              name: string;
              effect: string;
          };
          slackOff: {
              name: string;
              effect: string;
          };
          hyperVoice: {
              name: string;
              effect: string;
          };
          poisonFang: {
              name: string;
              effect: string;
          };
          crushClaw: {
              name: string;
              effect: string;
          };
          blastBurn: {
              name: string;
              effect: string;
          };
          hydroCannon: {
              name: string;
              effect: string;
          };
          meteorMash: {
              name: string;
              effect: string;
          };
          astonish: {
              name: string;
              effect: string;
          };
          weatherBall: {
              name: string;
              effect: string;
          };
          aromatherapy: {
              name: string;
              effect: string;
          };
          fakeTears: {
              name: string;
              effect: string;
          };
          airCutter: {
              name: string;
              effect: string;
          };
          overheat: {
              name: string;
              effect: string;
          };
          odorSleuth: {
              name: string;
              effect: string;
          };
          rockTomb: {
              name: string;
              effect: string;
          };
          silverWind: {
              name: string;
              effect: string;
          };
          metalSound: {
              name: string;
              effect: string;
          };
          grassWhistle: {
              name: string;
              effect: string;
          };
          tickle: {
              name: string;
              effect: string;
          };
          cosmicPower: {
              name: string;
              effect: string;
          };
          waterSpout: {
              name: string;
              effect: string;
          };
          signalBeam: {
              name: string;
              effect: string;
          };
          shadowPunch: {
              name: string;
              effect: string;
          };
          extrasensory: {
              name: string;
              effect: string;
          };
          skyUppercut: {
              name: string;
              effect: string;
          };
          sandTomb: {
              name: string;
              effect: string;
          };
          sheerCold: {
              name: string;
              effect: string;
          };
          muddyWater: {
              name: string;
              effect: string;
          };
          bulletSeed: {
              name: string;
              effect: string;
          };
          aerialAce: {
              name: string;
              effect: string;
          };
          icicleSpear: {
              name: string;
              effect: string;
          };
          ironDefense: {
              name: string;
              effect: string;
          };
          block: {
              name: string;
              effect: string;
          };
          howl: {
              name: string;
              effect: string;
          };
          dragonClaw: {
              name: string;
              effect: string;
          };
          frenzyPlant: {
              name: string;
              effect: string;
          };
          bulkUp: {
              name: string;
              effect: string;
          };
          bounce: {
              name: string;
              effect: string;
          };
          mudShot: {
              name: string;
              effect: string;
          };
          poisonTail: {
              name: string;
              effect: string;
          };
          covet: {
              name: string;
              effect: string;
          };
          voltTackle: {
              name: string;
              effect: string;
          };
          magicalLeaf: {
              name: string;
              effect: string;
          };
          waterSport: {
              name: string;
              effect: string;
          };
          calmMind: {
              name: string;
              effect: string;
          };
          leafBlade: {
              name: string;
              effect: string;
          };
          dragonDance: {
              name: string;
              effect: string;
          };
          rockBlast: {
              name: string;
              effect: string;
          };
          shockWave: {
              name: string;
              effect: string;
          };
          waterPulse: {
              name: string;
              effect: string;
          };
          doomDesire: {
              name: string;
              effect: string;
          };
          psychoBoost: {
              name: string;
              effect: string;
          };
          roost: {
              name: string;
              effect: string;
          };
          gravity: {
              name: string;
              effect: string;
          };
          miracleEye: {
              name: string;
              effect: string;
          };
          wakeUpSlap: {
              name: string;
              effect: string;
          };
          hammerArm: {
              name: string;
              effect: string;
          };
          gyroBall: {
              name: string;
              effect: string;
          };
          healingWish: {
              name: string;
              effect: string;
          };
          brine: {
              name: string;
              effect: string;
          };
          naturalGift: {
              name: string;
              effect: string;
          };
          feint: {
              name: string;
              effect: string;
          };
          pluck: {
              name: string;
              effect: string;
          };
          tailwind: {
              name: string;
              effect: string;
          };
          acupressure: {
              name: string;
              effect: string;
          };
          metalBurst: {
              name: string;
              effect: string;
          };
          uTurn: {
              name: string;
              effect: string;
          };
          closeCombat: {
              name: string;
              effect: string;
          };
          payback: {
              name: string;
              effect: string;
          };
          assurance: {
              name: string;
              effect: string;
          };
          embargo: {
              name: string;
              effect: string;
          };
          fling: {
              name: string;
              effect: string;
          };
          psychoShift: {
              name: string;
              effect: string;
          };
          trumpCard: {
              name: string;
              effect: string;
          };
          healBlock: {
              name: string;
              effect: string;
          };
          wringOut: {
              name: string;
              effect: string;
          };
          powerTrick: {
              name: string;
              effect: string;
          };
          gastroAcid: {
              name: string;
              effect: string;
          };
          luckyChant: {
              name: string;
              effect: string;
          };
          meFirst: {
              name: string;
              effect: string;
          };
          copycat: {
              name: string;
              effect: string;
          };
          powerSwap: {
              name: string;
              effect: string;
          };
          guardSwap: {
              name: string;
              effect: string;
          };
          punishment: {
              name: string;
              effect: string;
          };
          lastResort: {
              name: string;
              effect: string;
          };
          worrySeed: {
              name: string;
              effect: string;
          };
          suckerPunch: {
              name: string;
              effect: string;
          };
          toxicSpikes: {
              name: string;
              effect: string;
          };
          heartSwap: {
              name: string;
              effect: string;
          };
          aquaRing: {
              name: string;
              effect: string;
          };
          magnetRise: {
              name: string;
              effect: string;
          };
          flareBlitz: {
              name: string;
              effect: string;
          };
          forcePalm: {
              name: string;
              effect: string;
          };
          auraSphere: {
              name: string;
              effect: string;
          };
          rockPolish: {
              name: string;
              effect: string;
          };
          poisonJab: {
              name: string;
              effect: string;
          };
          darkPulse: {
              name: string;
              effect: string;
          };
          nightSlash: {
              name: string;
              effect: string;
          };
          aquaTail: {
              name: string;
              effect: string;
          };
          seedBomb: {
              name: string;
              effect: string;
          };
          airSlash: {
              name: string;
              effect: string;
          };
          xScissor: {
              name: string;
              effect: string;
          };
          bugBuzz: {
              name: string;
              effect: string;
          };
          dragonPulse: {
              name: string;
              effect: string;
          };
          dragonRush: {
              name: string;
              effect: string;
          };
          powerGem: {
              name: string;
              effect: string;
          };
          drainPunch: {
              name: string;
              effect: string;
          };
          vacuumWave: {
              name: string;
              effect: string;
          };
          focusBlast: {
              name: string;
              effect: string;
          };
          energyBall: {
              name: string;
              effect: string;
          };
          braveBird: {
              name: string;
              effect: string;
          };
          earthPower: {
              name: string;
              effect: string;
          };
          switcheroo: {
              name: string;
              effect: string;
          };
          gigaImpact: {
              name: string;
              effect: string;
          };
          nastyPlot: {
              name: string;
              effect: string;
          };
          bulletPunch: {
              name: string;
              effect: string;
          };
          avalanche: {
              name: string;
              effect: string;
          };
          iceShard: {
              name: string;
              effect: string;
          };
          shadowClaw: {
              name: string;
              effect: string;
          };
          thunderFang: {
              name: string;
              effect: string;
          };
          iceFang: {
              name: string;
              effect: string;
          };
          fireFang: {
              name: string;
              effect: string;
          };
          shadowSneak: {
              name: string;
              effect: string;
          };
          mudBomb: {
              name: string;
              effect: string;
          };
          psychoCut: {
              name: string;
              effect: string;
          };
          zenHeadbutt: {
              name: string;
              effect: string;
          };
          mirrorShot: {
              name: string;
              effect: string;
          };
          flashCannon: {
              name: string;
              effect: string;
          };
          rockClimb: {
              name: string;
              effect: string;
          };
          defog: {
              name: string;
              effect: string;
          };
          trickRoom: {
              name: string;
              effect: string;
          };
          dracoMeteor: {
              name: string;
              effect: string;
          };
          discharge: {
              name: string;
              effect: string;
          };
          lavaPlume: {
              name: string;
              effect: string;
          };
          leafStorm: {
              name: string;
              effect: string;
          };
          powerWhip: {
              name: string;
              effect: string;
          };
          rockWrecker: {
              name: string;
              effect: string;
          };
          crossPoison: {
              name: string;
              effect: string;
          };
          gunkShot: {
              name: string;
              effect: string;
          };
          ironHead: {
              name: string;
              effect: string;
          };
          magnetBomb: {
              name: string;
              effect: string;
          };
          stoneEdge: {
              name: string;
              effect: string;
          };
          captivate: {
              name: string;
              effect: string;
          };
          stealthRock: {
              name: string;
              effect: string;
          };
          grassKnot: {
              name: string;
              effect: string;
          };
          chatter: {
              name: string;
              effect: string;
          };
          judgment: {
              name: string;
              effect: string;
          };
          bugBite: {
              name: string;
              effect: string;
          };
          chargeBeam: {
              name: string;
              effect: string;
          };
          woodHammer: {
              name: string;
              effect: string;
          };
          aquaJet: {
              name: string;
              effect: string;
          };
          attackOrder: {
              name: string;
              effect: string;
          };
          defendOrder: {
              name: string;
              effect: string;
          };
          healOrder: {
              name: string;
              effect: string;
          };
          headSmash: {
              name: string;
              effect: string;
          };
          doubleHit: {
              name: string;
              effect: string;
          };
          roarOfTime: {
              name: string;
              effect: string;
          };
          spacialRend: {
              name: string;
              effect: string;
          };
          lunarDance: {
              name: string;
              effect: string;
          };
          crushGrip: {
              name: string;
              effect: string;
          };
          magmaStorm: {
              name: string;
              effect: string;
          };
          darkVoid: {
              name: string;
              effect: string;
          };
          seedFlare: {
              name: string;
              effect: string;
          };
          ominousWind: {
              name: string;
              effect: string;
          };
          shadowForce: {
              name: string;
              effect: string;
          };
          honeClaws: {
              name: string;
              effect: string;
          };
          wideGuard: {
              name: string;
              effect: string;
          };
          guardSplit: {
              name: string;
              effect: string;
          };
          powerSplit: {
              name: string;
              effect: string;
          };
          wonderRoom: {
              name: string;
              effect: string;
          };
          psyshock: {
              name: string;
              effect: string;
          };
          venoshock: {
              name: string;
              effect: string;
          };
          autotomize: {
              name: string;
              effect: string;
          };
          ragePowder: {
              name: string;
              effect: string;
          };
          telekinesis: {
              name: string;
              effect: string;
          };
          magicRoom: {
              name: string;
              effect: string;
          };
          smackDown: {
              name: string;
              effect: string;
          };
          stormThrow: {
              name: string;
              effect: string;
          };
          flameBurst: {
              name: string;
              effect: string;
          };
          sludgeWave: {
              name: string;
              effect: string;
          };
          quiverDance: {
              name: string;
              effect: string;
          };
          heavySlam: {
              name: string;
              effect: string;
          };
          synchronoise: {
              name: string;
              effect: string;
          };
          electroBall: {
              name: string;
              effect: string;
          };
          soak: {
              name: string;
              effect: string;
          };
          flameCharge: {
              name: string;
              effect: string;
          };
          coil: {
              name: string;
              effect: string;
          };
          lowSweep: {
              name: string;
              effect: string;
          };
          acidSpray: {
              name: string;
              effect: string;
          };
          foulPlay: {
              name: string;
              effect: string;
          };
          simpleBeam: {
              name: string;
              effect: string;
          };
          entrainment: {
              name: string;
              effect: string;
          };
          afterYou: {
              name: string;
              effect: string;
          };
          round: {
              name: string;
              effect: string;
          };
          echoedVoice: {
              name: string;
              effect: string;
          };
          chipAway: {
              name: string;
              effect: string;
          };
          clearSmog: {
              name: string;
              effect: string;
          };
          storedPower: {
              name: string;
              effect: string;
          };
          quickGuard: {
              name: string;
              effect: string;
          };
          allySwitch: {
              name: string;
              effect: string;
          };
          scald: {
              name: string;
              effect: string;
          };
          shellSmash: {
              name: string;
              effect: string;
          };
          healPulse: {
              name: string;
              effect: string;
          };
          hex: {
              name: string;
              effect: string;
          };
          skyDrop: {
              name: string;
              effect: string;
          };
          shiftGear: {
              name: string;
              effect: string;
          };
          circleThrow: {
              name: string;
              effect: string;
          };
          incinerate: {
              name: string;
              effect: string;
          };
          quash: {
              name: string;
              effect: string;
          };
          acrobatics: {
              name: string;
              effect: string;
          };
          reflectType: {
              name: string;
              effect: string;
          };
          retaliate: {
              name: string;
              effect: string;
          };
          finalGambit: {
              name: string;
              effect: string;
          };
          bestow: {
              name: string;
              effect: string;
          };
          inferno: {
              name: string;
              effect: string;
          };
          waterPledge: {
              name: string;
              effect: string;
          };
          firePledge: {
              name: string;
              effect: string;
          };
          grassPledge: {
              name: string;
              effect: string;
          };
          voltSwitch: {
              name: string;
              effect: string;
          };
          struggleBug: {
              name: string;
              effect: string;
          };
          bulldoze: {
              name: string;
              effect: string;
          };
          frostBreath: {
              name: string;
              effect: string;
          };
          dragonTail: {
              name: string;
              effect: string;
          };
          workUp: {
              name: string;
              effect: string;
          };
          electroweb: {
              name: string;
              effect: string;
          };
          wildCharge: {
              name: string;
              effect: string;
          };
          drillRun: {
              name: string;
              effect: string;
          };
          dualChop: {
              name: string;
              effect: string;
          };
          heartStamp: {
              name: string;
              effect: string;
          };
          hornLeech: {
              name: string;
              effect: string;
          };
          sacredSword: {
              name: string;
              effect: string;
          };
          razorShell: {
              name: string;
              effect: string;
          };
          heatCrash: {
              name: string;
              effect: string;
          };
          leafTornado: {
              name: string;
              effect: string;
          };
          steamroller: {
              name: string;
              effect: string;
          };
          cottonGuard: {
              name: string;
              effect: string;
          };
          nightDaze: {
              name: string;
              effect: string;
          };
          psystrike: {
              name: string;
              effect: string;
          };
          tailSlap: {
              name: string;
              effect: string;
          };
          hurricane: {
              name: string;
              effect: string;
          };
          headCharge: {
              name: string;
              effect: string;
          };
          gearGrind: {
              name: string;
              effect: string;
          };
          searingShot: {
              name: string;
              effect: string;
          };
          technoBlast: {
              name: string;
              effect: string;
          };
          relicSong: {
              name: string;
              effect: string;
          };
          secretSword: {
              name: string;
              effect: string;
          };
          glaciate: {
              name: string;
              effect: string;
          };
          boltStrike: {
              name: string;
              effect: string;
          };
          blueFlare: {
              name: string;
              effect: string;
          };
          fieryDance: {
              name: string;
              effect: string;
          };
          freezeShock: {
              name: string;
              effect: string;
          };
          iceBurn: {
              name: string;
              effect: string;
          };
          snarl: {
              name: string;
              effect: string;
          };
          icicleCrash: {
              name: string;
              effect: string;
          };
          vCreate: {
              name: string;
              effect: string;
          };
          fusionFlare: {
              name: string;
              effect: string;
          };
          fusionBolt: {
              name: string;
              effect: string;
          };
          flyingPress: {
              name: string;
              effect: string;
          };
          matBlock: {
              name: string;
              effect: string;
          };
          belch: {
              name: string;
              effect: string;
          };
          rototiller: {
              name: string;
              effect: string;
          };
          stickyWeb: {
              name: string;
              effect: string;
          };
          fellStinger: {
              name: string;
              effect: string;
          };
          phantomForce: {
              name: string;
              effect: string;
          };
          trickOrTreat: {
              name: string;
              effect: string;
          };
          nobleRoar: {
              name: string;
              effect: string;
          };
          ionDeluge: {
              name: string;
              effect: string;
          };
          parabolicCharge: {
              name: string;
              effect: string;
          };
          forestsCurse: {
              name: string;
              effect: string;
          };
          petalBlizzard: {
              name: string;
              effect: string;
          };
          freezeDry: {
              name: string;
              effect: string;
          };
          disarmingVoice: {
              name: string;
              effect: string;
          };
          partingShot: {
              name: string;
              effect: string;
          };
          topsyTurvy: {
              name: string;
              effect: string;
          };
          drainingKiss: {
              name: string;
              effect: string;
          };
          craftyShield: {
              name: string;
              effect: string;
          };
          flowerShield: {
              name: string;
              effect: string;
          };
          grassyTerrain: {
              name: string;
              effect: string;
          };
          mistyTerrain: {
              name: string;
              effect: string;
          };
          electrify: {
              name: string;
              effect: string;
          };
          playRough: {
              name: string;
              effect: string;
          };
          fairyWind: {
              name: string;
              effect: string;
          };
          moonblast: {
              name: string;
              effect: string;
          };
          boomburst: {
              name: string;
              effect: string;
          };
          fairyLock: {
              name: string;
              effect: string;
          };
          kingsShield: {
              name: string;
              effect: string;
          };
          playNice: {
              name: string;
              effect: string;
          };
          confide: {
              name: string;
              effect: string;
          };
          diamondStorm: {
              name: string;
              effect: string;
          };
          steamEruption: {
              name: string;
              effect: string;
          };
          hyperspaceHole: {
              name: string;
              effect: string;
          };
          waterShuriken: {
              name: string;
              effect: string;
          };
          mysticalFire: {
              name: string;
              effect: string;
          };
          spikyShield: {
              name: string;
              effect: string;
          };
          aromaticMist: {
              name: string;
              effect: string;
          };
          eerieImpulse: {
              name: string;
              effect: string;
          };
          venomDrench: {
              name: string;
              effect: string;
          };
          powder: {
              name: string;
              effect: string;
          };
          geomancy: {
              name: string;
              effect: string;
          };
          magneticFlux: {
              name: string;
              effect: string;
          };
          happyHour: {
              name: string;
              effect: string;
          };
          electricTerrain: {
              name: string;
              effect: string;
          };
          dazzlingGleam: {
              name: string;
              effect: string;
          };
          celebrate: {
              name: string;
              effect: string;
          };
          holdHands: {
              name: string;
              effect: string;
          };
          babyDollEyes: {
              name: string;
              effect: string;
          };
          nuzzle: {
              name: string;
              effect: string;
          };
          holdBack: {
              name: string;
              effect: string;
          };
          infestation: {
              name: string;
              effect: string;
          };
          powerUpPunch: {
              name: string;
              effect: string;
          };
          oblivionWing: {
              name: string;
              effect: string;
          };
          thousandArrows: {
              name: string;
              effect: string;
          };
          thousandWaves: {
              name: string;
              effect: string;
          };
          landsWrath: {
              name: string;
              effect: string;
          };
          lightOfRuin: {
              name: string;
              effect: string;
          };
          originPulse: {
              name: string;
              effect: string;
          };
          precipiceBlades: {
              name: string;
              effect: string;
          };
          dragonAscent: {
              name: string;
              effect: string;
          };
          hyperspaceFury: {
              name: string;
              effect: string;
          };
          breakneckBlitzPhysical: {
              name: string;
              effect: string;
          };
          breakneckBlitzSpecial: {
              name: string;
              effect: string;
          };
          allOutPummelingPhysical: {
              name: string;
              effect: string;
          };
          allOutPummelingSpecial: {
              name: string;
              effect: string;
          };
          supersonicSkystrikePhysical: {
              name: string;
              effect: string;
          };
          supersonicSkystrikeSpecial: {
              name: string;
              effect: string;
          };
          acidDownpourPhysical: {
              name: string;
              effect: string;
          };
          acidDownpourSpecial: {
              name: string;
              effect: string;
          };
          tectonicRagePhysical: {
              name: string;
              effect: string;
          };
          tectonicRageSpecial: {
              name: string;
              effect: string;
          };
          continentalCrushPhysical: {
              name: string;
              effect: string;
          };
          continentalCrushSpecial: {
              name: string;
              effect: string;
          };
          savageSpinOutPhysical: {
              name: string;
              effect: string;
          };
          savageSpinOutSpecial: {
              name: string;
              effect: string;
          };
          neverEndingNightmarePhysical: {
              name: string;
              effect: string;
          };
          neverEndingNightmareSpecial: {
              name: string;
              effect: string;
          };
          corkscrewCrashPhysical: {
              name: string;
              effect: string;
          };
          corkscrewCrashSpecial: {
              name: string;
              effect: string;
          };
          infernoOverdrivePhysical: {
              name: string;
              effect: string;
          };
          infernoOverdriveSpecial: {
              name: string;
              effect: string;
          };
          hydroVortexPhysical: {
              name: string;
              effect: string;
          };
          hydroVortexSpecial: {
              name: string;
              effect: string;
          };
          bloomDoomPhysical: {
              name: string;
              effect: string;
          };
          bloomDoomSpecial: {
              name: string;
              effect: string;
          };
          gigavoltHavocPhysical: {
              name: string;
              effect: string;
          };
          gigavoltHavocSpecial: {
              name: string;
              effect: string;
          };
          shatteredPsychePhysical: {
              name: string;
              effect: string;
          };
          shatteredPsycheSpecial: {
              name: string;
              effect: string;
          };
          subzeroSlammerPhysical: {
              name: string;
              effect: string;
          };
          subzeroSlammerSpecial: {
              name: string;
              effect: string;
          };
          devastatingDrakePhysical: {
              name: string;
              effect: string;
          };
          devastatingDrakeSpecial: {
              name: string;
              effect: string;
          };
          blackHoleEclipsePhysical: {
              name: string;
              effect: string;
          };
          blackHoleEclipseSpecial: {
              name: string;
              effect: string;
          };
          twinkleTacklePhysical: {
              name: string;
              effect: string;
          };
          twinkleTackleSpecial: {
              name: string;
              effect: string;
          };
          catastropika: {
              name: string;
              effect: string;
          };
          shoreUp: {
              name: string;
              effect: string;
          };
          firstImpression: {
              name: string;
              effect: string;
          };
          banefulBunker: {
              name: string;
              effect: string;
          };
          spiritShackle: {
              name: string;
              effect: string;
          };
          darkestLariat: {
              name: string;
              effect: string;
          };
          sparklingAria: {
              name: string;
              effect: string;
          };
          iceHammer: {
              name: string;
              effect: string;
          };
          floralHealing: {
              name: string;
              effect: string;
          };
          highHorsepower: {
              name: string;
              effect: string;
          };
          strengthSap: {
              name: string;
              effect: string;
          };
          solarBlade: {
              name: string;
              effect: string;
          };
          leafage: {
              name: string;
              effect: string;
          };
          spotlight: {
              name: string;
              effect: string;
          };
          toxicThread: {
              name: string;
              effect: string;
          };
          laserFocus: {
              name: string;
              effect: string;
          };
          gearUp: {
              name: string;
              effect: string;
          };
          throatChop: {
              name: string;
              effect: string;
          };
          pollenPuff: {
              name: string;
              effect: string;
          };
          anchorShot: {
              name: string;
              effect: string;
          };
          psychicTerrain: {
              name: string;
              effect: string;
          };
          lunge: {
              name: string;
              effect: string;
          };
          fireLash: {
              name: string;
              effect: string;
          };
          powerTrip: {
              name: string;
              effect: string;
          };
          burnUp: {
              name: string;
              effect: string;
          };
          speedSwap: {
              name: string;
              effect: string;
          };
          smartStrike: {
              name: string;
              effect: string;
          };
          purify: {
              name: string;
              effect: string;
          };
          revelationDance: {
              name: string;
              effect: string;
          };
          coreEnforcer: {
              name: string;
              effect: string;
          };
          tropKick: {
              name: string;
              effect: string;
          };
          instruct: {
              name: string;
              effect: string;
          };
          beakBlast: {
              name: string;
              effect: string;
          };
          clangingScales: {
              name: string;
              effect: string;
          };
          dragonHammer: {
              name: string;
              effect: string;
          };
          brutalSwing: {
              name: string;
              effect: string;
          };
          auroraVeil: {
              name: string;
              effect: string;
          };
          sinisterArrowRaid: {
              name: string;
              effect: string;
          };
          maliciousMoonsault: {
              name: string;
              effect: string;
          };
          oceanicOperetta: {
              name: string;
              effect: string;
          };
          guardianOfAlola: {
              name: string;
              effect: string;
          };
          soulStealing7StarStrike: {
              name: string;
              effect: string;
          };
          stokedSparksurfer: {
              name: string;
              effect: string;
          };
          pulverizingPancake: {
              name: string;
              effect: string;
          };
          extremeEvoboost: {
              name: string;
              effect: string;
          };
          genesisSupernova: {
              name: string;
              effect: string;
          };
          shellTrap: {
              name: string;
              effect: string;
          };
          fleurCannon: {
              name: string;
              effect: string;
          };
          psychicFangs: {
              name: string;
              effect: string;
          };
          stompingTantrum: {
              name: string;
              effect: string;
          };
          shadowBone: {
              name: string;
              effect: string;
          };
          accelerock: {
              name: string;
              effect: string;
          };
          liquidation: {
              name: string;
              effect: string;
          };
          prismaticLaser: {
              name: string;
              effect: string;
          };
          spectralThief: {
              name: string;
              effect: string;
          };
          sunsteelStrike: {
              name: string;
              effect: string;
          };
          moongeistBeam: {
              name: string;
              effect: string;
          };
          tearfulLook: {
              name: string;
              effect: string;
          };
          zingZap: {
              name: string;
              effect: string;
          };
          naturesMadness: {
              name: string;
              effect: string;
          };
          multiAttack: {
              name: string;
              effect: string;
          };
          tenMillionVoltThunderbolt: {
              name: string;
              effect: string;
          };
          mindBlown: {
              name: string;
              effect: string;
          };
          plasmaFists: {
              name: string;
              effect: string;
          };
          photonGeyser: {
              name: string;
              effect: string;
          };
          lightThatBurnsTheSky: {
              name: string;
              effect: string;
          };
          searingSunrazeSmash: {
              name: string;
              effect: string;
          };
          menacingMoonrazeMaelstrom: {
              name: string;
              effect: string;
          };
          letsSnuggleForever: {
              name: string;
              effect: string;
          };
          splinteredStormshards: {
              name: string;
              effect: string;
          };
          clangorousSoulblaze: {
              name: string;
              effect: string;
          };
          zippyZap: {
              name: string;
              effect: string;
          };
          splishySplash: {
              name: string;
              effect: string;
          };
          floatyFall: {
              name: string;
              effect: string;
          };
          pikaPapow: {
              name: string;
              effect: string;
          };
          bouncyBubble: {
              name: string;
              effect: string;
          };
          buzzyBuzz: {
              name: string;
              effect: string;
          };
          sizzlySlide: {
              name: string;
              effect: string;
          };
          glitzyGlow: {
              name: string;
              effect: string;
          };
          baddyBad: {
              name: string;
              effect: string;
          };
          sappySeed: {
              name: string;
              effect: string;
          };
          freezyFrost: {
              name: string;
              effect: string;
          };
          sparklySwirl: {
              name: string;
              effect: string;
          };
          veeveeVolley: {
              name: string;
              effect: string;
          };
          doubleIronBash: {
              name: string;
              effect: string;
          };
          maxGuard: {
              name: string;
              effect: string;
          };
          dynamaxCannon: {
              name: string;
              effect: string;
          };
          snipeShot: {
              name: string;
              effect: string;
          };
          jawLock: {
              name: string;
              effect: string;
          };
          stuffCheeks: {
              name: string;
              effect: string;
          };
          noRetreat: {
              name: string;
              effect: string;
          };
          tarShot: {
              name: string;
              effect: string;
          };
          magicPowder: {
              name: string;
              effect: string;
          };
          dragonDarts: {
              name: string;
              effect: string;
          };
          teatime: {
              name: string;
              effect: string;
          };
          octolock: {
              name: string;
              effect: string;
          };
          boltBeak: {
              name: string;
              effect: string;
          };
          fishiousRend: {
              name: string;
              effect: string;
          };
          courtChange: {
              name: string;
              effect: string;
          };
          maxFlare: {
              name: string;
              effect: string;
          };
          maxFlutterby: {
              name: string;
              effect: string;
          };
          maxLightning: {
              name: string;
              effect: string;
          };
          maxStrike: {
              name: string;
              effect: string;
          };
          maxKnuckle: {
              name: string;
              effect: string;
          };
          maxPhantasm: {
              name: string;
              effect: string;
          };
          maxHailstorm: {
              name: string;
              effect: string;
          };
          maxOoze: {
              name: string;
              effect: string;
          };
          maxGeyser: {
              name: string;
              effect: string;
          };
          maxAirstream: {
              name: string;
              effect: string;
          };
          maxStarfall: {
              name: string;
              effect: string;
          };
          maxWyrmwind: {
              name: string;
              effect: string;
          };
          maxMindstorm: {
              name: string;
              effect: string;
          };
          maxRockfall: {
              name: string;
              effect: string;
          };
          maxQuake: {
              name: string;
              effect: string;
          };
          maxDarkness: {
              name: string;
              effect: string;
          };
          maxOvergrowth: {
              name: string;
              effect: string;
          };
          maxSteelspike: {
              name: string;
              effect: string;
          };
          clangorousSoul: {
              name: string;
              effect: string;
          };
          bodyPress: {
              name: string;
              effect: string;
          };
          decorate: {
              name: string;
              effect: string;
          };
          drumBeating: {
              name: string;
              effect: string;
          };
          snapTrap: {
              name: string;
              effect: string;
          };
          pyroBall: {
              name: string;
              effect: string;
          };
          behemothBlade: {
              name: string;
              effect: string;
          };
          behemothBash: {
              name: string;
              effect: string;
          };
          auraWheel: {
              name: string;
              effect: string;
          };
          breakingSwipe: {
              name: string;
              effect: string;
          };
          branchPoke: {
              name: string;
              effect: string;
          };
          overdrive: {
              name: string;
              effect: string;
          };
          appleAcid: {
              name: string;
              effect: string;
          };
          gravApple: {
              name: string;
              effect: string;
          };
          spiritBreak: {
              name: string;
              effect: string;
          };
          strangeSteam: {
              name: string;
              effect: string;
          };
          lifeDew: {
              name: string;
              effect: string;
          };
          obstruct: {
              name: string;
              effect: string;
          };
          falseSurrender: {
              name: string;
              effect: string;
          };
          meteorAssault: {
              name: string;
              effect: string;
          };
          eternabeam: {
              name: string;
              effect: string;
          };
          steelBeam: {
              name: string;
              effect: string;
          };
          expandingForce: {
              name: string;
              effect: string;
          };
          steelRoller: {
              name: string;
              effect: string;
          };
          scaleShot: {
              name: string;
              effect: string;
          };
          meteorBeam: {
              name: string;
              effect: string;
          };
          shellSideArm: {
              name: string;
              effect: string;
          };
          mistyExplosion: {
              name: string;
              effect: string;
          };
          grassyGlide: {
              name: string;
              effect: string;
          };
          risingVoltage: {
              name: string;
              effect: string;
          };
          terrainPulse: {
              name: string;
              effect: string;
          };
          skitterSmack: {
              name: string;
              effect: string;
          };
          burningJealousy: {
              name: string;
              effect: string;
          };
          lashOut: {
              name: string;
              effect: string;
          };
          poltergeist: {
              name: string;
              effect: string;
          };
          corrosiveGas: {
              name: string;
              effect: string;
          };
          coaching: {
              name: string;
              effect: string;
          };
          flipTurn: {
              name: string;
              effect: string;
          };
          tripleAxel: {
              name: string;
              effect: string;
          };
          dualWingbeat: {
              name: string;
              effect: string;
          };
          scorchingSands: {
              name: string;
              effect: string;
          };
          jungleHealing: {
              name: string;
              effect: string;
          };
          wickedBlow: {
              name: string;
              effect: string;
          };
          surgingStrikes: {
              name: string;
              effect: string;
          };
          thunderCage: {
              name: string;
              effect: string;
          };
          dragonEnergy: {
              name: string;
              effect: string;
          };
          freezingGlare: {
              name: string;
              effect: string;
          };
          fieryWrath: {
              name: string;
              effect: string;
          };
          thunderousKick: {
              name: string;
              effect: string;
          };
          glacialLance: {
              name: string;
              effect: string;
          };
          astralBarrage: {
              name: string;
              effect: string;
          };
          eerieSpell: {
              name: string;
              effect: string;
          };
          direClaw: {
              name: string;
              effect: string;
          };
          psyshieldBash: {
              name: string;
              effect: string;
          };
          powerShift: {
              name: string;
              effect: string;
          };
          stoneAxe: {
              name: string;
              effect: string;
          };
          springtideStorm: {
              name: string;
              effect: string;
          };
          mysticalPower: {
              name: string;
              effect: string;
          };
          ragingFury: {
              name: string;
              effect: string;
          };
          waveCrash: {
              name: string;
              effect: string;
          };
          chloroblast: {
              name: string;
              effect: string;
          };
          mountainGale: {
              name: string;
              effect: string;
          };
          victoryDance: {
              name: string;
              effect: string;
          };
          headlongRush: {
              name: string;
              effect: string;
          };
          barbBarrage: {
              name: string;
              effect: string;
          };
          esperWing: {
              name: string;
              effect: string;
          };
          bitterMalice: {
              name: string;
              effect: string;
          };
          shelter: {
              name: string;
              effect: string;
          };
          tripleArrows: {
              name: string;
              effect: string;
          };
          infernalParade: {
              name: string;
              effect: string;
          };
          ceaselessEdge: {
              name: string;
              effect: string;
          };
          bleakwindStorm: {
              name: string;
              effect: string;
          };
          wildboltStorm: {
              name: string;
              effect: string;
          };
          sandsearStorm: {
              name: string;
              effect: string;
          };
          lunarBlessing: {
              name: string;
              effect: string;
          };
          takeHeart: {
              name: string;
              effect: string;
          };
          gMaxWildfire: {
              name: string;
              effect: string;
          };
          gMaxBefuddle: {
              name: string;
              effect: string;
          };
          gMaxVoltCrash: {
              name: string;
              effect: string;
          };
          gMaxGoldRush: {
              name: string;
              effect: string;
          };
          gMaxChiStrike: {
              name: string;
              effect: string;
          };
          gMaxTerror: {
              name: string;
              effect: string;
          };
          gMaxResonance: {
              name: string;
              effect: string;
          };
          gMaxCuddle: {
              name: string;
              effect: string;
          };
          gMaxReplenish: {
              name: string;
              effect: string;
          };
          gMaxMalodor: {
              name: string;
              effect: string;
          };
          gMaxStonesurge: {
              name: string;
              effect: string;
          };
          gMaxWindRage: {
              name: string;
              effect: string;
          };
          gMaxStunShock: {
              name: string;
              effect: string;
          };
          gMaxFinale: {
              name: string;
              effect: string;
          };
          gMaxDepletion: {
              name: string;
              effect: string;
          };
          gMaxGravitas: {
              name: string;
              effect: string;
          };
          gMaxVolcalith: {
              name: string;
              effect: string;
          };
          gMaxSandblast: {
              name: string;
              effect: string;
          };
          gMaxSnooze: {
              name: string;
              effect: string;
          };
          gMaxTartness: {
              name: string;
              effect: string;
          };
          gMaxSweetness: {
              name: string;
              effect: string;
          };
          gMaxSmite: {
              name: string;
              effect: string;
          };
          gMaxSteelsurge: {
              name: string;
              effect: string;
          };
          gMaxMeltdown: {
              name: string;
              effect: string;
          };
          gMaxFoamBurst: {
              name: string;
              effect: string;
          };
          gMaxCentiferno: {
              name: string;
              effect: string;
          };
          gMaxVineLash: {
              name: string;
              effect: string;
          };
          gMaxCannonade: {
              name: string;
              effect: string;
          };
          gMaxDrumSolo: {
              name: string;
              effect: string;
          };
          gMaxFireball: {
              name: string;
              effect: string;
          };
          gMaxHydrosnipe: {
              name: string;
              effect: string;
          };
          gMaxOneBlow: {
              name: string;
              effect: string;
          };
          gMaxRapidFlow: {
              name: string;
              effect: string;
          };
          teraBlast: {
              name: string;
              effect: string;
          };
          silkTrap: {
              name: string;
              effect: string;
          };
          axeKick: {
              name: string;
              effect: string;
          };
          lastRespects: {
              name: string;
              effect: string;
          };
          luminaCrash: {
              name: string;
              effect: string;
          };
          orderUp: {
              name: string;
              effect: string;
          };
          jetPunch: {
              name: string;
              effect: string;
          };
          spicyExtract: {
              name: string;
              effect: string;
          };
          spinOut: {
              name: string;
              effect: string;
          };
          populationBomb: {
              name: string;
              effect: string;
          };
          iceSpinner: {
              name: string;
              effect: string;
          };
          glaiveRush: {
              name: string;
              effect: string;
          };
          revivalBlessing: {
              name: string;
              effect: string;
          };
          saltCure: {
              name: string;
              effect: string;
          };
          tripleDive: {
              name: string;
              effect: string;
          };
          mortalSpin: {
              name: string;
              effect: string;
          };
          doodle: {
              name: string;
              effect: string;
          };
          filletAway: {
              name: string;
              effect: string;
          };
          kowtowCleave: {
              name: string;
              effect: string;
          };
          flowerTrick: {
              name: string;
              effect: string;
          };
          torchSong: {
              name: string;
              effect: string;
          };
          aquaStep: {
              name: string;
              effect: string;
          };
          ragingBull: {
              name: string;
              effect: string;
          };
          makeItRain: {
              name: string;
              effect: string;
          };
          psyblade: {
              name: string;
              effect: string;
          };
          hydroSteam: {
              name: string;
              effect: string;
          };
          ruination: {
              name: string;
              effect: string;
          };
          collisionCourse: {
              name: string;
              effect: string;
          };
          electroDrift: {
              name: string;
              effect: string;
          };
          shedTail: {
              name: string;
              effect: string;
          };
          chillyReception: {
              name: string;
              effect: string;
          };
          tidyUp: {
              name: string;
              effect: string;
          };
          snowscape: {
              name: string;
              effect: string;
          };
          pounce: {
              name: string;
              effect: string;
          };
          trailblaze: {
              name: string;
              effect: string;
          };
          chillingWater: {
              name: string;
              effect: string;
          };
          hyperDrill: {
              name: string;
              effect: string;
          };
          twinBeam: {
              name: string;
              effect: string;
          };
          rageFist: {
              name: string;
              effect: string;
          };
          armorCannon: {
              name: string;
              effect: string;
          };
          bitterBlade: {
              name: string;
              effect: string;
          };
          doubleShock: {
              name: string;
              effect: string;
          };
          gigatonHammer: {
              name: string;
              effect: string;
          };
          comeuppance: {
              name: string;
              effect: string;
          };
          aquaCutter: {
              name: string;
              effect: string;
          };
          blazingTorque: {
              name: string;
              effect: string;
          };
          wickedTorque: {
              name: string;
              effect: string;
          };
          noxiousTorque: {
              name: string;
              effect: string;
          };
          combatTorque: {
              name: string;
              effect: string;
          };
          magicalTorque: {
              name: string;
              effect: string;
          };
          bloodMoon: {
              name: string;
              effect: string;
          };
          matchaGotcha: {
              name: string;
              effect: string;
          };
          syrupBomb: {
              name: string;
              effect: string;
          };
          ivyCudgel: {
              name: string;
              effect: string;
          };
          electroShot: {
              name: string;
              effect: string;
          };
          teraStarstorm: {
              name: string;
              effect: string;
          };
          fickleBeam: {
              name: string;
              effect: string;
          };
          burningBulwark: {
              name: string;
              effect: string;
          };
          thunderclap: {
              name: string;
              effect: string;
          };
          mightyCleave: {
              name: string;
              effect: string;
          };
          tachyonCutter: {
              name: string;
              effect: string;
          };
          hardPress: {
              name: string;
              effect: string;
          };
          dragonCheer: {
              name: string;
              effect: string;
          };
          alluringVoice: {
              name: string;
              effect: string;
          };
          temperFlare: {
              name: string;
              effect: string;
          };
          supercellSlam: {
              name: string;
              effect: string;
          };
          psychicNoise: {
              name: string;
              effect: string;
          };
          upperHand: {
              name: string;
              effect: string;
          };
          malignantChain: {
              name: string;
              effect: string;
          };
      };
      nature: {
          Hardy: string;
          Lonely: string;
          Brave: string;
          Adamant: string;
          Naughty: string;
          Bold: string;
          Docile: string;
          Relaxed: string;
          Impish: string;
          Lax: string;
          Timid: string;
          Hasty: string;
          Serious: string;
          Jolly: string;
          Naive: string;
          Modest: string;
          Mild: string;
          Quiet: string;
          Bashful: string;
          Rash: string;
          Calm: string;
          Gentle: string;
          Sassy: string;
          Careful: string;
          Quirky: string;
      };
      pokeball: {
          pokeBall: string;
          greatBall: string;
          ultraBall: string;
          rogueBall: string;
          masterBall: string;
          luxuryBall: string;
      };
      pokemon: {
          bulbasaur: string;
          ivysaur: string;
          venusaur: string;
          charmander: string;
          charmeleon: string;
          charizard: string;
          squirtle: string;
          wartortle: string;
          blastoise: string;
          caterpie: string;
          metapod: string;
          butterfree: string;
          weedle: string;
          kakuna: string;
          beedrill: string;
          pidgey: string;
          pidgeotto: string;
          pidgeot: string;
          rattata: string;
          raticate: string;
          spearow: string;
          fearow: string;
          ekans: string;
          arbok: string;
          pikachu: string;
          raichu: string;
          sandshrew: string;
          sandslash: string;
          nidoran_f: string;
          nidorina: string;
          nidoqueen: string;
          nidoran_m: string;
          nidorino: string;
          nidoking: string;
          clefairy: string;
          clefable: string;
          vulpix: string;
          ninetales: string;
          jigglypuff: string;
          wigglytuff: string;
          zubat: string;
          golbat: string;
          oddish: string;
          gloom: string;
          vileplume: string;
          paras: string;
          parasect: string;
          venonat: string;
          venomoth: string;
          diglett: string;
          dugtrio: string;
          meowth: string;
          persian: string;
          psyduck: string;
          golduck: string;
          mankey: string;
          primeape: string;
          growlithe: string;
          arcanine: string;
          poliwag: string;
          poliwhirl: string;
          poliwrath: string;
          abra: string;
          kadabra: string;
          alakazam: string;
          machop: string;
          machoke: string;
          machamp: string;
          bellsprout: string;
          weepinbell: string;
          victreebel: string;
          tentacool: string;
          tentacruel: string;
          geodude: string;
          graveler: string;
          golem: string;
          ponyta: string;
          rapidash: string;
          slowpoke: string;
          slowbro: string;
          magnemite: string;
          magneton: string;
          farfetchd: string;
          doduo: string;
          dodrio: string;
          seel: string;
          dewgong: string;
          grimer: string;
          muk: string;
          shellder: string;
          cloyster: string;
          gastly: string;
          haunter: string;
          gengar: string;
          onix: string;
          drowzee: string;
          hypno: string;
          krabby: string;
          kingler: string;
          voltorb: string;
          electrode: string;
          exeggcute: string;
          exeggutor: string;
          cubone: string;
          marowak: string;
          hitmonlee: string;
          hitmonchan: string;
          lickitung: string;
          koffing: string;
          weezing: string;
          rhyhorn: string;
          rhydon: string;
          chansey: string;
          tangela: string;
          kangaskhan: string;
          horsea: string;
          seadra: string;
          goldeen: string;
          seaking: string;
          staryu: string;
          starmie: string;
          mr_mime: string;
          scyther: string;
          jynx: string;
          electabuzz: string;
          magmar: string;
          pinsir: string;
          tauros: string;
          magikarp: string;
          gyarados: string;
          lapras: string;
          ditto: string;
          eevee: string;
          vaporeon: string;
          jolteon: string;
          flareon: string;
          porygon: string;
          omanyte: string;
          omastar: string;
          kabuto: string;
          kabutops: string;
          aerodactyl: string;
          snorlax: string;
          articuno: string;
          zapdos: string;
          moltres: string;
          dratini: string;
          dragonair: string;
          dragonite: string;
          mewtwo: string;
          mew: string;
          chikorita: string;
          bayleef: string;
          meganium: string;
          cyndaquil: string;
          quilava: string;
          typhlosion: string;
          totodile: string;
          croconaw: string;
          feraligatr: string;
          sentret: string;
          furret: string;
          hoothoot: string;
          noctowl: string;
          ledyba: string;
          ledian: string;
          spinarak: string;
          ariados: string;
          crobat: string;
          chinchou: string;
          lanturn: string;
          pichu: string;
          cleffa: string;
          igglybuff: string;
          togepi: string;
          togetic: string;
          natu: string;
          xatu: string;
          mareep: string;
          flaaffy: string;
          ampharos: string;
          bellossom: string;
          marill: string;
          azumarill: string;
          sudowoodo: string;
          politoed: string;
          hoppip: string;
          skiploom: string;
          jumpluff: string;
          aipom: string;
          sunkern: string;
          sunflora: string;
          yanma: string;
          wooper: string;
          quagsire: string;
          espeon: string;
          umbreon: string;
          murkrow: string;
          slowking: string;
          misdreavus: string;
          unown: string;
          wobbuffet: string;
          girafarig: string;
          pineco: string;
          forretress: string;
          dunsparce: string;
          gligar: string;
          steelix: string;
          snubbull: string;
          granbull: string;
          qwilfish: string;
          scizor: string;
          shuckle: string;
          heracross: string;
          sneasel: string;
          teddiursa: string;
          ursaring: string;
          slugma: string;
          magcargo: string;
          swinub: string;
          piloswine: string;
          corsola: string;
          remoraid: string;
          octillery: string;
          delibird: string;
          mantine: string;
          skarmory: string;
          houndour: string;
          houndoom: string;
          kingdra: string;
          phanpy: string;
          donphan: string;
          porygon2: string;
          stantler: string;
          smeargle: string;
          tyrogue: string;
          hitmontop: string;
          smoochum: string;
          elekid: string;
          magby: string;
          miltank: string;
          blissey: string;
          raikou: string;
          entei: string;
          suicune: string;
          larvitar: string;
          pupitar: string;
          tyranitar: string;
          lugia: string;
          ho_oh: string;
          celebi: string;
          treecko: string;
          grovyle: string;
          sceptile: string;
          torchic: string;
          combusken: string;
          blaziken: string;
          mudkip: string;
          marshtomp: string;
          swampert: string;
          poochyena: string;
          mightyena: string;
          zigzagoon: string;
          linoone: string;
          wurmple: string;
          silcoon: string;
          beautifly: string;
          cascoon: string;
          dustox: string;
          lotad: string;
          lombre: string;
          ludicolo: string;
          seedot: string;
          nuzleaf: string;
          shiftry: string;
          taillow: string;
          swellow: string;
          wingull: string;
          pelipper: string;
          ralts: string;
          kirlia: string;
          gardevoir: string;
          surskit: string;
          masquerain: string;
          shroomish: string;
          breloom: string;
          slakoth: string;
          vigoroth: string;
          slaking: string;
          nincada: string;
          ninjask: string;
          shedinja: string;
          whismur: string;
          loudred: string;
          exploud: string;
          makuhita: string;
          hariyama: string;
          azurill: string;
          nosepass: string;
          skitty: string;
          delcatty: string;
          sableye: string;
          mawile: string;
          aron: string;
          lairon: string;
          aggron: string;
          meditite: string;
          medicham: string;
          electrike: string;
          manectric: string;
          plusle: string;
          minun: string;
          volbeat: string;
          illumise: string;
          roselia: string;
          gulpin: string;
          swalot: string;
          carvanha: string;
          sharpedo: string;
          wailmer: string;
          wailord: string;
          numel: string;
          camerupt: string;
          torkoal: string;
          spoink: string;
          grumpig: string;
          spinda: string;
          trapinch: string;
          vibrava: string;
          flygon: string;
          cacnea: string;
          cacturne: string;
          swablu: string;
          altaria: string;
          zangoose: string;
          seviper: string;
          lunatone: string;
          solrock: string;
          barboach: string;
          whiscash: string;
          corphish: string;
          crawdaunt: string;
          baltoy: string;
          claydol: string;
          lileep: string;
          cradily: string;
          anorith: string;
          armaldo: string;
          feebas: string;
          milotic: string;
          castform: string;
          kecleon: string;
          shuppet: string;
          banette: string;
          duskull: string;
          dusclops: string;
          tropius: string;
          chimecho: string;
          absol: string;
          wynaut: string;
          snorunt: string;
          glalie: string;
          spheal: string;
          sealeo: string;
          walrein: string;
          clamperl: string;
          huntail: string;
          gorebyss: string;
          relicanth: string;
          luvdisc: string;
          bagon: string;
          shelgon: string;
          salamence: string;
          beldum: string;
          metang: string;
          metagross: string;
          regirock: string;
          regice: string;
          registeel: string;
          latias: string;
          latios: string;
          kyogre: string;
          groudon: string;
          rayquaza: string;
          jirachi: string;
          deoxys: string;
          turtwig: string;
          grotle: string;
          torterra: string;
          chimchar: string;
          monferno: string;
          infernape: string;
          piplup: string;
          prinplup: string;
          empoleon: string;
          starly: string;
          staravia: string;
          staraptor: string;
          bidoof: string;
          bibarel: string;
          kricketot: string;
          kricketune: string;
          shinx: string;
          luxio: string;
          luxray: string;
          budew: string;
          roserade: string;
          cranidos: string;
          rampardos: string;
          shieldon: string;
          bastiodon: string;
          burmy: string;
          wormadam: string;
          mothim: string;
          combee: string;
          vespiquen: string;
          pachirisu: string;
          buizel: string;
          floatzel: string;
          cherubi: string;
          cherrim: string;
          shellos: string;
          gastrodon: string;
          ambipom: string;
          drifloon: string;
          drifblim: string;
          buneary: string;
          lopunny: string;
          mismagius: string;
          honchkrow: string;
          glameow: string;
          purugly: string;
          chingling: string;
          stunky: string;
          skuntank: string;
          bronzor: string;
          bronzong: string;
          bonsly: string;
          mime_jr: string;
          happiny: string;
          chatot: string;
          spiritomb: string;
          gible: string;
          gabite: string;
          garchomp: string;
          munchlax: string;
          riolu: string;
          lucario: string;
          hippopotas: string;
          hippowdon: string;
          skorupi: string;
          drapion: string;
          croagunk: string;
          toxicroak: string;
          carnivine: string;
          finneon: string;
          lumineon: string;
          mantyke: string;
          snover: string;
          abomasnow: string;
          weavile: string;
          magnezone: string;
          lickilicky: string;
          rhyperior: string;
          tangrowth: string;
          electivire: string;
          magmortar: string;
          togekiss: string;
          yanmega: string;
          leafeon: string;
          glaceon: string;
          gliscor: string;
          mamoswine: string;
          porygon_z: string;
          gallade: string;
          probopass: string;
          dusknoir: string;
          froslass: string;
          rotom: string;
          uxie: string;
          mesprit: string;
          azelf: string;
          dialga: string;
          palkia: string;
          heatran: string;
          regigigas: string;
          giratina: string;
          cresselia: string;
          phione: string;
          manaphy: string;
          darkrai: string;
          shaymin: string;
          arceus: string;
          victini: string;
          snivy: string;
          servine: string;
          serperior: string;
          tepig: string;
          pignite: string;
          emboar: string;
          oshawott: string;
          dewott: string;
          samurott: string;
          patrat: string;
          watchog: string;
          lillipup: string;
          herdier: string;
          stoutland: string;
          purrloin: string;
          liepard: string;
          pansage: string;
          simisage: string;
          pansear: string;
          simisear: string;
          panpour: string;
          simipour: string;
          munna: string;
          musharna: string;
          pidove: string;
          tranquill: string;
          unfezant: string;
          blitzle: string;
          zebstrika: string;
          roggenrola: string;
          boldore: string;
          gigalith: string;
          woobat: string;
          swoobat: string;
          drilbur: string;
          excadrill: string;
          audino: string;
          timburr: string;
          gurdurr: string;
          conkeldurr: string;
          tympole: string;
          palpitoad: string;
          seismitoad: string;
          throh: string;
          sawk: string;
          sewaddle: string;
          swadloon: string;
          leavanny: string;
          venipede: string;
          whirlipede: string;
          scolipede: string;
          cottonee: string;
          whimsicott: string;
          petilil: string;
          lilligant: string;
          basculin: string;
          sandile: string;
          krokorok: string;
          krookodile: string;
          darumaka: string;
          darmanitan: string;
          maractus: string;
          dwebble: string;
          crustle: string;
          scraggy: string;
          scrafty: string;
          sigilyph: string;
          yamask: string;
          cofagrigus: string;
          tirtouga: string;
          carracosta: string;
          archen: string;
          archeops: string;
          trubbish: string;
          garbodor: string;
          zorua: string;
          zoroark: string;
          minccino: string;
          cinccino: string;
          gothita: string;
          gothorita: string;
          gothitelle: string;
          solosis: string;
          duosion: string;
          reuniclus: string;
          ducklett: string;
          swanna: string;
          vanillite: string;
          vanillish: string;
          vanilluxe: string;
          deerling: string;
          sawsbuck: string;
          emolga: string;
          karrablast: string;
          escavalier: string;
          foongus: string;
          amoonguss: string;
          frillish: string;
          jellicent: string;
          alomomola: string;
          joltik: string;
          galvantula: string;
          ferroseed: string;
          ferrothorn: string;
          klink: string;
          klang: string;
          klinklang: string;
          tynamo: string;
          eelektrik: string;
          eelektross: string;
          elgyem: string;
          beheeyem: string;
          litwick: string;
          lampent: string;
          chandelure: string;
          axew: string;
          fraxure: string;
          haxorus: string;
          cubchoo: string;
          beartic: string;
          cryogonal: string;
          shelmet: string;
          accelgor: string;
          stunfisk: string;
          mienfoo: string;
          mienshao: string;
          druddigon: string;
          golett: string;
          golurk: string;
          pawniard: string;
          bisharp: string;
          bouffalant: string;
          rufflet: string;
          braviary: string;
          vullaby: string;
          mandibuzz: string;
          heatmor: string;
          durant: string;
          deino: string;
          zweilous: string;
          hydreigon: string;
          larvesta: string;
          volcarona: string;
          cobalion: string;
          terrakion: string;
          virizion: string;
          tornadus: string;
          thundurus: string;
          reshiram: string;
          zekrom: string;
          landorus: string;
          kyurem: string;
          keldeo: string;
          meloetta: string;
          genesect: string;
          chespin: string;
          quilladin: string;
          chesnaught: string;
          fennekin: string;
          braixen: string;
          delphox: string;
          froakie: string;
          frogadier: string;
          greninja: string;
          bunnelby: string;
          diggersby: string;
          fletchling: string;
          fletchinder: string;
          talonflame: string;
          scatterbug: string;
          spewpa: string;
          vivillon: string;
          litleo: string;
          pyroar: string;
          flabebe: string;
          floette: string;
          florges: string;
          skiddo: string;
          gogoat: string;
          pancham: string;
          pangoro: string;
          furfrou: string;
          espurr: string;
          meowstic: string;
          honedge: string;
          doublade: string;
          aegislash: string;
          spritzee: string;
          aromatisse: string;
          swirlix: string;
          slurpuff: string;
          inkay: string;
          malamar: string;
          binacle: string;
          barbaracle: string;
          skrelp: string;
          dragalge: string;
          clauncher: string;
          clawitzer: string;
          helioptile: string;
          heliolisk: string;
          tyrunt: string;
          tyrantrum: string;
          amaura: string;
          aurorus: string;
          sylveon: string;
          hawlucha: string;
          dedenne: string;
          carbink: string;
          goomy: string;
          sliggoo: string;
          goodra: string;
          klefki: string;
          phantump: string;
          trevenant: string;
          pumpkaboo: string;
          gourgeist: string;
          bergmite: string;
          avalugg: string;
          noibat: string;
          noivern: string;
          xerneas: string;
          yveltal: string;
          zygarde: string;
          diancie: string;
          hoopa: string;
          volcanion: string;
          rowlet: string;
          dartrix: string;
          decidueye: string;
          litten: string;
          torracat: string;
          incineroar: string;
          popplio: string;
          brionne: string;
          primarina: string;
          pikipek: string;
          trumbeak: string;
          toucannon: string;
          yungoos: string;
          gumshoos: string;
          grubbin: string;
          charjabug: string;
          vikavolt: string;
          crabrawler: string;
          crabominable: string;
          oricorio: string;
          cutiefly: string;
          ribombee: string;
          rockruff: string;
          lycanroc: string;
          wishiwashi: string;
          mareanie: string;
          toxapex: string;
          mudbray: string;
          mudsdale: string;
          dewpider: string;
          araquanid: string;
          fomantis: string;
          lurantis: string;
          morelull: string;
          shiinotic: string;
          salandit: string;
          salazzle: string;
          stufful: string;
          bewear: string;
          bounsweet: string;
          steenee: string;
          tsareena: string;
          comfey: string;
          oranguru: string;
          passimian: string;
          wimpod: string;
          golisopod: string;
          sandygast: string;
          palossand: string;
          pyukumuku: string;
          type_null: string;
          silvally: string;
          minior: string;
          komala: string;
          turtonator: string;
          togedemaru: string;
          mimikyu: string;
          bruxish: string;
          drampa: string;
          dhelmise: string;
          jangmo_o: string;
          hakamo_o: string;
          kommo_o: string;
          tapu_koko: string;
          tapu_lele: string;
          tapu_bulu: string;
          tapu_fini: string;
          cosmog: string;
          cosmoem: string;
          solgaleo: string;
          lunala: string;
          nihilego: string;
          buzzwole: string;
          pheromosa: string;
          xurkitree: string;
          celesteela: string;
          kartana: string;
          guzzlord: string;
          necrozma: string;
          magearna: string;
          marshadow: string;
          poipole: string;
          naganadel: string;
          stakataka: string;
          blacephalon: string;
          zeraora: string;
          meltan: string;
          melmetal: string;
          grookey: string;
          thwackey: string;
          rillaboom: string;
          scorbunny: string;
          raboot: string;
          cinderace: string;
          sobble: string;
          drizzile: string;
          inteleon: string;
          skwovet: string;
          greedent: string;
          rookidee: string;
          corvisquire: string;
          corviknight: string;
          blipbug: string;
          dottler: string;
          orbeetle: string;
          nickit: string;
          thievul: string;
          gossifleur: string;
          eldegoss: string;
          wooloo: string;
          dubwool: string;
          chewtle: string;
          drednaw: string;
          yamper: string;
          boltund: string;
          rolycoly: string;
          carkol: string;
          coalossal: string;
          applin: string;
          flapple: string;
          appletun: string;
          silicobra: string;
          sandaconda: string;
          cramorant: string;
          arrokuda: string;
          barraskewda: string;
          toxel: string;
          toxtricity: string;
          sizzlipede: string;
          centiskorch: string;
          clobbopus: string;
          grapploct: string;
          sinistea: string;
          polteageist: string;
          hatenna: string;
          hattrem: string;
          hatterene: string;
          impidimp: string;
          morgrem: string;
          grimmsnarl: string;
          obstagoon: string;
          perrserker: string;
          cursola: string;
          sirfetchd: string;
          mr_rime: string;
          runerigus: string;
          milcery: string;
          alcremie: string;
          falinks: string;
          pincurchin: string;
          snom: string;
          frosmoth: string;
          stonjourner: string;
          eiscue: string;
          indeedee: string;
          morpeko: string;
          cufant: string;
          copperajah: string;
          dracozolt: string;
          arctozolt: string;
          dracovish: string;
          arctovish: string;
          duraludon: string;
          dreepy: string;
          drakloak: string;
          dragapult: string;
          zacian: string;
          zamazenta: string;
          eternatus: string;
          kubfu: string;
          urshifu: string;
          zarude: string;
          regieleki: string;
          regidrago: string;
          glastrier: string;
          spectrier: string;
          calyrex: string;
          wyrdeer: string;
          kleavor: string;
          ursaluna: string;
          basculegion: string;
          sneasler: string;
          overqwil: string;
          enamorus: string;
          sprigatito: string;
          floragato: string;
          meowscarada: string;
          fuecoco: string;
          crocalor: string;
          skeledirge: string;
          quaxly: string;
          quaxwell: string;
          quaquaval: string;
          lechonk: string;
          oinkologne: string;
          tarountula: string;
          spidops: string;
          nymble: string;
          lokix: string;
          pawmi: string;
          pawmo: string;
          pawmot: string;
          tandemaus: string;
          maushold: string;
          fidough: string;
          dachsbun: string;
          smoliv: string;
          dolliv: string;
          arboliva: string;
          squawkabilly: string;
          nacli: string;
          naclstack: string;
          garganacl: string;
          charcadet: string;
          armarouge: string;
          ceruledge: string;
          tadbulb: string;
          bellibolt: string;
          wattrel: string;
          kilowattrel: string;
          maschiff: string;
          mabosstiff: string;
          shroodle: string;
          grafaiai: string;
          bramblin: string;
          brambleghast: string;
          toedscool: string;
          toedscruel: string;
          klawf: string;
          capsakid: string;
          scovillain: string;
          rellor: string;
          rabsca: string;
          flittle: string;
          espathra: string;
          tinkatink: string;
          tinkatuff: string;
          tinkaton: string;
          wiglett: string;
          wugtrio: string;
          bombirdier: string;
          finizen: string;
          palafin: string;
          varoom: string;
          revavroom: string;
          cyclizar: string;
          orthworm: string;
          glimmet: string;
          glimmora: string;
          greavard: string;
          houndstone: string;
          flamigo: string;
          cetoddle: string;
          cetitan: string;
          veluza: string;
          dondozo: string;
          tatsugiri: string;
          annihilape: string;
          clodsire: string;
          farigiraf: string;
          dudunsparce: string;
          kingambit: string;
          great_tusk: string;
          scream_tail: string;
          brute_bonnet: string;
          flutter_mane: string;
          slither_wing: string;
          sandy_shocks: string;
          iron_treads: string;
          iron_bundle: string;
          iron_hands: string;
          iron_jugulis: string;
          iron_moth: string;
          iron_thorns: string;
          frigibax: string;
          arctibax: string;
          baxcalibur: string;
          gimmighoul: string;
          gholdengo: string;
          wo_chien: string;
          chien_pao: string;
          ting_lu: string;
          chi_yu: string;
          roaring_moon: string;
          iron_valiant: string;
          koraidon: string;
          miraidon: string;
          walking_wake: string;
          iron_leaves: string;
          dipplin: string;
          poltchageist: string;
          sinistcha: string;
          okidogi: string;
          munkidori: string;
          fezandipiti: string;
          ogerpon: string;
          archaludon: string;
          hydrapple: string;
          gouging_fire: string;
          raging_bolt: string;
          iron_boulder: string;
          iron_crown: string;
          terapagos: string;
          pecharunt: string;
          alola_rattata: string;
          alola_raticate: string;
          alola_raichu: string;
          alola_sandshrew: string;
          alola_sandslash: string;
          alola_vulpix: string;
          alola_ninetales: string;
          alola_diglett: string;
          alola_dugtrio: string;
          alola_meowth: string;
          alola_persian: string;
          alola_geodude: string;
          alola_graveler: string;
          alola_golem: string;
          alola_grimer: string;
          alola_muk: string;
          alola_exeggutor: string;
          alola_marowak: string;
          eternal_floette: string;
          galar_meowth: string;
          galar_ponyta: string;
          galar_rapidash: string;
          galar_slowpoke: string;
          galar_slowbro: string;
          galar_farfetchd: string;
          galar_weezing: string;
          galar_mr_mime: string;
          galar_articuno: string;
          galar_zapdos: string;
          galar_moltres: string;
          galar_slowking: string;
          galar_corsola: string;
          galar_zigzagoon: string;
          galar_linoone: string;
          galar_darumaka: string;
          galar_darmanitan: string;
          galar_yamask: string;
          galar_stunfisk: string;
          hisui_growlithe: string;
          hisui_arcanine: string;
          hisui_voltorb: string;
          hisui_electrode: string;
          hisui_typhlosion: string;
          hisui_qwilfish: string;
          hisui_sneasel: string;
          hisui_samurott: string;
          hisui_lilligant: string;
          hisui_zorua: string;
          hisui_zoroark: string;
          hisui_braviary: string;
          hisui_sliggoo: string;
          hisui_goodra: string;
          hisui_avalugg: string;
          hisui_decidueye: string;
          paldea_tauros: string;
          paldea_wooper: string;
          bloodmoon_ursaluna: string;
      };
      pokemonForm: {
          pikachuCosplay: string;
          pikachuCoolCosplay: string;
          pikachuBeautyCosplay: string;
          pikachuCuteCosplay: string;
          pikachuSmartCosplay: string;
          pikachuToughCosplay: string;
          pikachuPartner: string;
          eeveePartner: string;
          pichuSpiky: string;
          unownA: string;
          unownB: string;
          unownC: string;
          unownD: string;
          unownE: string;
          unownF: string;
          unownG: string;
          unownH: string;
          unownI: string;
          unownJ: string;
          unownK: string;
          unownL: string;
          unownM: string;
          unownN: string;
          unownO: string;
          unownP: string;
          unownQ: string;
          unownR: string;
          unownS: string;
          unownT: string;
          unownU: string;
          unownV: string;
          unownW: string;
          unownX: string;
          unownY: string;
          unownZ: string;
          unownExclamation: string;
          unownQuestion: string;
          castformSunny: string;
          castformRainy: string;
          castformSnowy: string;
          deoxysNormal: string;
          burmyPlant: string;
          burmySandy: string;
          burmyTrash: string;
          shellosEast: string;
          shellosWest: string;
          rotomHeat: string;
          rotomWash: string;
          rotomFrost: string;
          rotomFan: string;
          rotomMow: string;
          giratinaAltered: string;
          shayminLand: string;
          basculinRedStriped: string;
          basculinBlueStriped: string;
          basculinWhiteStriped: string;
          deerlingSpring: string;
          deerlingSummer: string;
          deerlingAutumn: string;
          deerlingWinter: string;
          tornadusIncarnate: string;
          thundurusIncarnate: string;
          landorusIncarnate: string;
          keldeoOrdinary: string;
          meloettaAria: string;
          meloettaPirouette: string;
          froakieBattleBond: string;
          scatterbugMeadow: string;
          scatterbugIcySnow: string;
          scatterbugPolar: string;
          scatterbugTundra: string;
          scatterbugContinental: string;
          scatterbugGarden: string;
          scatterbugElegant: string;
          scatterbugModern: string;
          scatterbugMarine: string;
          scatterbugArchipelago: string;
          scatterbugHighPlains: string;
          scatterbugSandstorm: string;
          scatterbugRiver: string;
          scatterbugMonsoon: string;
          scatterbugSavanna: string;
          scatterbugSun: string;
          scatterbugOcean: string;
          scatterbugJungle: string;
          scatterbugFancy: string;
          scatterbugPokeBall: string;
          flabebeRed: string;
          flabebeYellow: string;
          flabebeOrange: string;
          flabebeBlue: string;
          flabebeWhite: string;
          furfrouHeart: string;
          furfrouStar: string;
          furfrouDiamond: string;
          furfrouDebutante: string;
          furfrouMatron: string;
          furfrouDandy: string;
          furfrouLaReine: string;
          furfrouKabuki: string;
          furfrouPharaoh: string;
          pumpkabooSmall: string;
          pumpkabooLarge: string;
          pumpkabooSuper: string;
          xerneasNeutral: string;
          xerneasActive: string;
          zygarde50: string;
          zygarde10: string;
          zygarde50Pc: string;
          zygarde10Pc: string;
          zygardeComplete: string;
          oricorioBaile: string;
          oricorioPompom: string;
          oricorioPau: string;
          oricorioSensu: string;
          rockruffOwnTempo: string;
          miniorRedMeteor: string;
          miniorOrangeMeteor: string;
          miniorYellowMeteor: string;
          miniorGreenMeteor: string;
          miniorBlueMeteor: string;
          miniorIndigoMeteor: string;
          miniorVioletMeteor: string;
          miniorRed: string;
          miniorOrange: string;
          miniorYellow: string;
          miniorGreen: string;
          miniorBlue: string;
          miniorIndigo: string;
          miniorViolet: string;
          mimikyuDisguised: string;
          mimikyuBusted: string;
          magearnaOriginal: string;
          marshadowZenith: string;
          sinisteaPhony: string;
          sinisteaAntique: string;
          eiscueNoIce: string;
          indeedeeMale: string;
          indeedeeFemale: string;
          morpekoFullBelly: string;
          zacianHeroOfManyBattles: string;
          zamazentaHeroOfManyBattles: string;
          zarudeDada: string;
          enamorusIncarnate: string;
          squawkabillyGreenPlumage: string;
          squawkabillyBluePlumage: string;
          squawkabillyYellowPlumage: string;
          squawkabillyWhitePlumage: string;
          tatsugiriCurly: string;
          tatsugiriDroopy: string;
          tatsugiriStretchy: string;
          gimmighoulChest: string;
          gimmighoulRoaming: string;
          koraidonApexBuild: string;
          koraidonLimitedBuild: string;
          koraidonSprintingBuild: string;
          koraidonSwimmingBuild: string;
          koraidonGlidingBuild: string;
          miraidonUltimateMode: string;
          miraidonLowPowerMode: string;
          miraidonDriveMode: string;
          miraidonAquaticMode: string;
          miraidonGlideMode: string;
          poltchageistCounterfeit: string;
          poltchageistArtisan: string;
          paldeaTaurosCombat: string;
          paldeaTaurosBlaze: string;
          paldeaTaurosAqua: string;
      };
      pokemonInfo: {
          Stat: {
              HP: string;
              HPshortened: string;
              ATK: string;
              ATKshortened: string;
              DEF: string;
              DEFshortened: string;
              SPATK: string;
              SPATKshortened: string;
              SPDEF: string;
              SPDEFshortened: string;
              SPD: string;
              SPDshortened: string;
              ACC: string;
              EVA: string;
          };
          Type: {
              UNKNOWN: string;
              NORMAL: string;
              FIGHTING: string;
              FLYING: string;
              POISON: string;
              GROUND: string;
              ROCK: string;
              BUG: string;
              GHOST: string;
              STEEL: string;
              FIRE: string;
              WATER: string;
              GRASS: string;
              ELECTRIC: string;
              PSYCHIC: string;
              ICE: string;
              DRAGON: string;
              DARK: string;
              FAIRY: string;
              STELLAR: string;
          };
      };
      pokemonInfoContainer: {
          moveset: string;
          gender: string;
          ability: string;
          nature: string;
          form: string;
      };
      pokemonSummary: {
          pokemonInfo: string;
          status: string;
          powerAccuracyCategory: string;
          type: string;
          unknownTrainer: string;
          ot: string;
          nature: string;
          expPoints: string;
          nextLv: string;
          cancel: string;
          memoString: string;
          metFragment: {
              normal: string;
              apparently: string;
          };
          natureFragment: {
              Hardy: string;
              Lonely: string;
              Brave: string;
              Adamant: string;
              Naughty: string;
              Bold: string;
              Docile: string;
              Relaxed: string;
              Impish: string;
              Lax: string;
              Timid: string;
              Hasty: string;
              Serious: string;
              Jolly: string;
              Naive: string;
              Modest: string;
              Mild: string;
              Quiet: string;
              Bashful: string;
              Rash: string;
              Calm: string;
              Gentle: string;
              Sassy: string;
              Careful: string;
              Quirky: string;
          };
      };
      saveSlotSelectUiHandler: {
          overwriteData: string;
          loading: string;
          wave: string;
          lv: string;
          empty: string;
      };
      settings: {
          boy: string;
          girl: string;
          general: string;
          display: string;
          audio: string;
          gamepad: string;
          keyboard: string;
          gameSpeed: string;
          hpBarSpeed: string;
          expGainsSpeed: string;
          expPartyDisplay: string;
          skipSeenDialogues: string;
          battleStyle: string;
          enableRetries: string;
          hideIvs: string;
          tutorials: string;
          touchControls: string;
          vibrations: string;
          normal: string;
          fast: string;
          faster: string;
          skip: string;
          levelUpNotifications: string;
          on: string;
          off: string;
          switch: string;
          set: string;
          auto: string;
          disabled: string;
          language: string;
          change: string;
          uiTheme: string;
          default: string;
          legacy: string;
          windowType: string;
          moneyFormat: string;
          damageNumbers: string;
          simple: string;
          fancy: string;
          abbreviated: string;
          moveAnimations: string;
          showStatsOnLevelUp: string;
          candyUpgradeNotification: string;
          passivesOnly: string;
          candyUpgradeDisplay: string;
          icon: string;
          animation: string;
          moveInfo: string;
          showMovesetFlyout: string;
          showArenaFlyout: string;
          showTimeOfDayWidget: string;
          timeOfDayAnimation: string;
          bounce: string;
          timeOfDay_back: string;
          spriteSet: string;
          consistent: string;
          mixedAnimated: string;
          fusionPaletteSwaps: string;
          playerGender: string;
          typeHints: string;
          masterVolume: string;
          bgmVolume: string;
          fieldVolume: string;
          seVolume: string;
          uiVolume: string;
          musicPreference: string;
          mixed: string;
          gamepadPleasePlug: string;
          delete: string;
          keyboardPleasePress: string;
          reset: string;
          requireReload: string;
          action: string;
          back: string;
          pressToBind: string;
          pressButton: string;
          buttonUp: string;
          buttonDown: string;
          buttonLeft: string;
          buttonRight: string;
          buttonAction: string;
          buttonMenu: string;
          buttonSubmit: string;
          buttonCancel: string;
          buttonStats: string;
          buttonCycleForm: string;
          buttonCycleShiny: string;
          buttonCycleGender: string;
          buttonCycleAbility: string;
          buttonCycleNature: string;
          buttonCycleVariant: string;
          buttonSpeedUp: string;
          buttonSlowDown: string;
          alt: string;
          mute: string;
          controller: string;
          gamepadSupport: string;
          showBgmBar: string;
          moveTouchControls: string;
          shopOverlayOpacity: string;
          shopCursorTarget: string;
          rewards: string;
          reroll: string;
          shop: string;
          checkTeam: string;
      };
      splashMessages: {
          battlesWon: string;
          joinTheDiscord: string;
          infiniteLevels: string;
          everythingStacks: string;
          optionalSaveScumming: string;
          biomes: string;
          openSource: string;
          playWithSpeed: string;
          liveBugTesting: string;
          heavyInfluence: string;
          pokemonRiskAndPokemonRain: string;
          nowWithMoreSalt: string;
          infiniteFusionAtHome: string;
          brokenEggMoves: string;
          magnificent: string;
          mubstitute: string;
          thatsCrazy: string;
          oranceJuice: string;
          questionableBalancing: string;
          coolShaders: string;
          aiFree: string;
          suddenDifficultySpikes: string;
          basedOnAnUnfinishedFlashGame: string;
          moreAddictiveThanIntended: string;
          mostlyConsistentSeeds: string;
          achievementPointsDontDoAnything: string;
          youDoNotStartAtLevel: string;
          dontTalkAboutTheManaphyEggIncident: string;
          alsoTryPokengine: string;
          alsoTryEmeraldRogue: string;
          alsoTryRadicalRed: string;
          eeveeExpo: string;
          ynoproject: string;
          breedersInSpace: string;
      };
      starterSelectUiHandler: {
          confirmStartTeam: string;
          confirmExit: string;
          invalidParty: string;
          gen1: string;
          gen2: string;
          gen3: string;
          gen4: string;
          gen5: string;
          gen6: string;
          gen7: string;
          gen8: string;
          gen9: string;
          growthRate: string;
          ability: string;
          passive: string;
          nature: string;
          eggMoves: string;
          addToParty: string;
          removeFromParty: string;
          toggleIVs: string;
          manageMoves: string;
          manageNature: string;
          addToFavorites: string;
          removeFromFavorites: string;
          useCandies: string;
          selectNature: string;
          selectMoveSwapOut: string;
          selectMoveSwapWith: string;
          unlockPassive: string;
          reduceCost: string;
          sameSpeciesEgg: string;
          cycleShiny: string;
          cycleForm: string;
          cycleGender: string;
          cycleAbility: string;
          cycleNature: string;
          cycleVariant: string;
          goFilter: string;
          enablePassive: string;
          disablePassive: string;
          locked: string;
          disabled: string;
          uncaught: string;
      };
      statusEffect: {
          none: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          poison: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          toxic: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          paralysis: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          sleep: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          freeze: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          burn: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
      };
      terrain: {
          misty: string;
          mistyStartMessage: string;
          mistyClearMessage: string;
          mistyBlockMessage: string;
          electric: string;
          electricStartMessage: string;
          electricClearMessage: string;
          grassy: string;
          grassyStartMessage: string;
          grassyClearMessage: string;
          psychic: string;
          psychicStartMessage: string;
          psychicClearMessage: string;
          defaultBlockMessage: string;
      };
      titles: {
          elite_four: string;
          elite_four_female: string;
          gym_leader: string;
          gym_leader_female: string;
          gym_leader_double: string;
          champion: string;
          champion_female: string;
          champion_double: string;
          rival: string;
          professor: string;
          frontier_brain: string;
          rocket_boss: string;
          magma_boss: string;
          aqua_boss: string;
          galactic_boss: string;
          plasma_boss: string;
          flare_boss: string;
          aether_boss: string;
          skull_boss: string;
          macro_boss: string;
          rocket_admin: string;
          rocket_admin_female: string;
          magma_admin: string;
          magma_admin_female: string;
          aqua_admin: string;
          aqua_admin_female: string;
          galactic_commander: string;
          galactic_commander_female: string;
          plasma_sage: string;
          plasma_admin: string;
          flare_admin: string;
          flare_admin_female: string;
          aether_admin: string;
          skull_admin: string;
          macro_admin: string;
      };
      trainerClasses: {
          ace_trainer: string;
          ace_trainer_female: string;
          ace_duo: string;
          artist: string;
          artist_female: string;
          backers: string;
          backpacker: string;
          backpacker_female: string;
          backpackers: string;
          baker: string;
          battle_girl: string;
          beauty: string;
          beginners: string;
          biker: string;
          black_belt: string;
          breeder: string;
          breeder_female: string;
          breeders: string;
          clerk: string;
          clerk_female: string;
          colleagues: string;
          crush_kin: string;
          cyclist: string;
          cyclist_female: string;
          cyclists: string;
          dancer: string;
          dancer_female: string;
          depot_agent: string;
          doctor: string;
          doctor_female: string;
          firebreather: string;
          fisherman: string;
          fisherman_female: string;
          gentleman: string;
          guitarist: string;
          guitarist_female: string;
          harlequin: string;
          hiker: string;
          hooligans: string;
          hoopster: string;
          infielder: string;
          janitor: string;
          lady: string;
          lass: string;
          linebacker: string;
          maid: string;
          madame: string;
          medical_team: string;
          musician: string;
          hex_maniac: string;
          nurse: string;
          nursery_aide: string;
          officer: string;
          parasol_lady: string;
          pilot: string;
          pokéfan: string;
          pokéfan_female: string;
          pokéfan_family: string;
          preschooler: string;
          preschooler_female: string;
          preschoolers: string;
          psychic: string;
          psychic_female: string;
          psychics: string;
          pokémon_ranger: string;
          pokémon_ranger_female: string;
          pokémon_rangers: string;
          ranger: string;
          restaurant_staff: string;
          rich: string;
          rich_female: string;
          rich_boy: string;
          rich_couple: string;
          rich_kid: string;
          rich_kid_female: string;
          rich_kids: string;
          roughneck: string;
          sailor: string;
          scientist: string;
          scientist_female: string;
          scientists: string;
          smasher: string;
          snow_worker: string;
          snow_worker_female: string;
          striker: string;
          school_kid: string;
          school_kid_female: string;
          school_kids: string;
          swimmer: string;
          swimmer_female: string;
          swimmers: string;
          twins: string;
          veteran: string;
          veteran_female: string;
          veteran_duo: string;
          waiter: string;
          waitress: string;
          worker: string;
          worker_female: string;
          workers: string;
          youngster: string;
          rocket_grunt: string;
          rocket_grunt_female: string;
          rocket_grunts: string;
          magma_grunt: string;
          magma_grunt_female: string;
          magma_grunts: string;
          aqua_grunt: string;
          aqua_grunt_female: string;
          aqua_grunts: string;
          galactic_grunt: string;
          galactic_grunt_female: string;
          galactic_grunts: string;
          plasma_grunt: string;
          plasma_grunt_female: string;
          plasma_grunts: string;
          flare_grunt: string;
          flare_grunt_female: string;
          flare_grunts: string;
          aether_grunt: string;
          aether_grunt_female: string;
          aether_grunts: string;
          skull_grunt: string;
          skull_grunt_female: string;
          skull_grunts: string;
          macro_grunt: string;
          macro_grunt_female: string;
          macro_grunts: string;
      };
      trainerNames: {
          brock: string;
          misty: string;
          lt_surge: string;
          erika: string;
          janine: string;
          sabrina: string;
          blaine: string;
          giovanni: string;
          falkner: string;
          bugsy: string;
          whitney: string;
          morty: string;
          chuck: string;
          jasmine: string;
          pryce: string;
          clair: string;
          roxanne: string;
          brawly: string;
          wattson: string;
          flannery: string;
          norman: string;
          winona: string;
          tate: string;
          liza: string;
          juan: string;
          roark: string;
          gardenia: string;
          maylene: string;
          crasher_wake: string;
          fantina: string;
          byron: string;
          candice: string;
          volkner: string;
          cilan: string;
          chili: string;
          cress: string;
          cheren: string;
          lenora: string;
          roxie: string;
          burgh: string;
          elesa: string;
          clay: string;
          skyla: string;
          brycen: string;
          drayden: string;
          marlon: string;
          viola: string;
          grant: string;
          korrina: string;
          ramos: string;
          clemont: string;
          valerie: string;
          olympia: string;
          wulfric: string;
          milo: string;
          nessa: string;
          kabu: string;
          bea: string;
          allister: string;
          opal: string;
          bede: string;
          gordie: string;
          melony: string;
          piers: string;
          marnie: string;
          raihan: string;
          katy: string;
          brassius: string;
          iono: string;
          kofu: string;
          larry: string;
          ryme: string;
          tulip: string;
          grusha: string;
          lorelei: string;
          bruno: string;
          agatha: string;
          lance: string;
          will: string;
          koga: string;
          karen: string;
          sidney: string;
          phoebe: string;
          glacia: string;
          drake: string;
          aaron: string;
          bertha: string;
          flint: string;
          lucian: string;
          shauntal: string;
          marshal: string;
          grimsley: string;
          caitlin: string;
          malva: string;
          siebold: string;
          wikstrom: string;
          drasna: string;
          hala: string;
          molayne: string;
          olivia: string;
          acerola: string;
          kahili: string;
          rika: string;
          poppy: string;
          hassel: string;
          crispin: string;
          amarys: string;
          lacey: string;
          drayton: string;
          blue: string;
          red: string;
          steven: string;
          wallace: string;
          cynthia: string;
          alder: string;
          iris: string;
          diantha: string;
          hau: string;
          geeta: string;
          nemona: string;
          kieran: string;
          leon: string;
          rival: string;
          rival_female: string;
          archer: string;
          ariana: string;
          proton: string;
          petrel: string;
          tabitha: string;
          courtney: string;
          shelly: string;
          matt: string;
          mars: string;
          jupiter: string;
          saturn: string;
          zinzolin: string;
          rood: string;
          xerosic: string;
          bryony: string;
          faba: string;
          plumeria: string;
          oleana: string;
          maxie: string;
          archie: string;
          cyrus: string;
          ghetsis: string;
          lysandre: string;
          lusamine: string;
          guzma: string;
          rose: string;
          blue_red_double: string;
          red_blue_double: string;
          tate_liza_double: string;
          liza_tate_double: string;
          steven_wallace_double: string;
          wallace_steven_double: string;
          alder_iris_double: string;
          iris_alder_double: string;
          piers_marnie_double: string;
          marnie_piers_double: string;
      };
      tutorial: {
          intro: string;
          accessMenu: string;
          menu: string;
          starterSelect: string;
          pokerus: string;
          statChange: string;
          selectItem: string;
          eggGacha: string;
      };
      voucher: {
          vouchers: string;
          eggVoucher: string;
          eggVoucherPlus: string;
          eggVoucherPremium: string;
          eggVoucherGold: string;
          locked: string;
          defeatTrainer: string;
      };
      weather: {
          sunnyStartMessage: string;
          sunnyLapseMessage: string;
          sunnyClearMessage: string;
          rainStartMessage: string;
          rainLapseMessage: string;
          rainClearMessage: string;
          sandstormStartMessage: string;
          sandstormLapseMessage: string;
          sandstormClearMessage: string;
          sandstormDamageMessage: string;
          hailStartMessage: string;
          hailLapseMessage: string;
          hailClearMessage: string;
          hailDamageMessage: string;
          snowStartMessage: string;
          snowLapseMessage: string;
          snowClearMessage: string;
          fogStartMessage: string;
          fogLapseMessage: string;
          fogClearMessage: string;
          heavyRainStartMessage: string;
          heavyRainLapseMessage: string;
          heavyRainClearMessage: string;
          harshSunStartMessage: string;
          harshSunLapseMessage: string;
          harshSunClearMessage: string;
          strongWindsStartMessage: string;
          strongWindsLapseMessage: string;
          strongWindsEffectMessage: string;
          strongWindsClearMessage: string;
      };
      partyUiHandler: {
          SEND_OUT: string;
          SUMMARY: string;
          CANCEL: string;
          RELEASE: string;
          APPLY: string;
          TEACH: string;
          SPLICE: string;
          UNSPLICE: string;
          ACTIVATE: string;
          DEACTIVATE: string;
          TRANSFER: string;
          ALL: string;
          PASS_BATON: string;
          UNPAUSE_EVOLUTION: string;
          REVIVE: string;
          RENAME: string;
          choosePokemon: string;
          doWhatWithThisPokemon: string;
          noEnergy: string;
          hasEnergy: string;
          cantBeUsed: string;
          tooManyItems: string;
          anyEffect: string;
          unpausedEvolutions: string;
          unspliceConfirmation: string;
          wasReverted: string;
          releaseConfirmation: string;
          releaseInBattle: string;
          selectAMove: string;
          changeQuantity: string;
          selectAnotherPokemonToSplice: string;
          cancel: string;
          able: string;
          notAble: string;
          learned: string;
          goodbye: string;
          byebye: string;
          farewell: string;
          soLong: string;
          thisIsWhereWePart: string;
          illMissYou: string;
          illNeverForgetYou: string;
          untilWeMeetAgain: string;
          sayonara: string;
          smellYaLater: string;
      };
      modifierSelectUiHandler: {
          transfer: string;
          reroll: string;
          lockRarities: string;
          checkTeam: string;
          transferDesc: string;
          rerollDesc: string;
          lockRaritiesDesc: string;
          checkTeamDesc: string;
          rerollCost: string;
          itemCost: string;
      };
      moveTriggers: {
          hitWithRecoil: string;
          cutHpPowerUpMove: string;
          absorbedElectricity: string;
          switchedStatChanges: string;
          switchedTwoStatChanges: string;
          switchedStat: string;
          sharedGuard: string;
          sharedPower: string;
          goingAllOutForAttack: string;
          regainedHealth: string;
          keptGoingAndCrashed: string;
          fled: string;
          cannotBeSwitchedOut: string;
          swappedAbilitiesWithTarget: string;
          coinsScatteredEverywhere: string;
          attackedByItem: string;
          whippedUpAWhirlwind: string;
          flewUpHigh: string;
          tookInSunlight: string;
          dugAHole: string;
          loweredItsHead: string;
          isGlowing: string;
          bellChimed: string;
          foresawAnAttack: string;
          isTighteningFocus: string;
          hidUnderwater: string;
          soothingAromaWaftedThroughArea: string;
          sprangUp: string;
          choseDoomDesireAsDestiny: string;
          vanishedInstantly: string;
          tookTargetIntoSky: string;
          becameCloakedInFreezingLight: string;
          becameCloakedInFreezingAir: string;
          isChargingPower: string;
          burnedItselfOut: string;
          startedHeatingUpBeak: string;
          setUpShellTrap: string;
          isOverflowingWithSpacePower: string;
          usedUpAllElectricity: string;
          stoleItem: string;
          incineratedItem: string;
          knockedOffItem: string;
          tookMoveAttack: string;
          cutOwnHpAndMaximizedStat: string;
          copiedStatChanges: string;
          magnitudeMessage: string;
          tookAimAtTarget: string;
          transformedIntoType: string;
          copiedMove: string;
          sketchedMove: string;
          acquiredAbility: string;
          copiedTargetAbility: string;
          transformedIntoTarget: string;
          tryingToTakeFoeDown: string;
          addType: string;
          cannotUseMove: string;
          healHp: string;
          sacrificialFullRestore: string;
          invertStats: string;
          resetStats: string;
          statEliminated: string;
          faintCountdown: string;
          copyType: string;
          suppressAbilities: string;
          revivalBlessing: string;
          swapArenaTags: string;
          exposedMove: string;
          safeguard: string;
      };
      runHistory: {
          victory: string;
          defeatedWild: string;
          defeatedTrainer: string;
          defeatedTrainerDouble: string;
          defeatedRival: string;
          defeated: string;
          defeatedWild_female: string;
          defeatedTrainer_female: string;
          defeatedTrainerDouble_female: string;
          defeatedRival_female: string;
          defeated_female: string;
          luck: string;
          score: string;
          mode: string;
          challengeRules: string;
          challengeMonoGen1: string;
          challengeMonoGen2: string;
          challengeMonoGen3: string;
          challengeMonoGen4: string;
          challengeMonoGen5: string;
          challengeMonoGen6: string;
          challengeMonoGen7: string;
          challengeMonoGen8: string;
          challengeMonoGen9: string;
          playerItems: string;
          personalBest: string;
          SPDshortened: string;
          runInfo: string;
          money: string;
          runLength: string;
          viewHeldItems: string;
          hallofFameText: string;
          hallofFameText_female: string;
          viewHallOfFame: string;
          viewEndingSplash: string;
      };
  };
  
}

declare namespace PokeRogue.locales.en {
  export declare const enConfig: {
      ability: {
          stench: {
              name: string;
              description: string;
          };
          drizzle: {
              name: string;
              description: string;
          };
          speedBoost: {
              name: string;
              description: string;
          };
          battleArmor: {
              name: string;
              description: string;
          };
          sturdy: {
              name: string;
              description: string;
          };
          damp: {
              name: string;
              description: string;
          };
          limber: {
              name: string;
              description: string;
          };
          sandVeil: {
              name: string;
              description: string;
          };
          static: {
              name: string;
              description: string;
          };
          voltAbsorb: {
              name: string;
              description: string;
          };
          waterAbsorb: {
              name: string;
              description: string;
          };
          oblivious: {
              name: string;
              description: string;
          };
          cloudNine: {
              name: string;
              description: string;
          };
          compoundEyes: {
              name: string;
              description: string;
          };
          insomnia: {
              name: string;
              description: string;
          };
          colorChange: {
              name: string;
              description: string;
          };
          immunity: {
              name: string;
              description: string;
          };
          flashFire: {
              name: string;
              description: string;
          };
          shieldDust: {
              name: string;
              description: string;
          };
          ownTempo: {
              name: string;
              description: string;
          };
          suctionCups: {
              name: string;
              description: string;
          };
          intimidate: {
              name: string;
              description: string;
          };
          shadowTag: {
              name: string;
              description: string;
          };
          roughSkin: {
              name: string;
              description: string;
          };
          wonderGuard: {
              name: string;
              description: string;
          };
          levitate: {
              name: string;
              description: string;
          };
          effectSpore: {
              name: string;
              description: string;
          };
          synchronize: {
              name: string;
              description: string;
          };
          clearBody: {
              name: string;
              description: string;
          };
          naturalCure: {
              name: string;
              description: string;
          };
          lightningRod: {
              name: string;
              description: string;
          };
          sereneGrace: {
              name: string;
              description: string;
          };
          swiftSwim: {
              name: string;
              description: string;
          };
          chlorophyll: {
              name: string;
              description: string;
          };
          illuminate: {
              name: string;
              description: string;
          };
          trace: {
              name: string;
              description: string;
          };
          hugePower: {
              name: string;
              description: string;
          };
          poisonPoint: {
              name: string;
              description: string;
          };
          innerFocus: {
              name: string;
              description: string;
          };
          magmaArmor: {
              name: string;
              description: string;
          };
          waterVeil: {
              name: string;
              description: string;
          };
          magnetPull: {
              name: string;
              description: string;
          };
          soundproof: {
              name: string;
              description: string;
          };
          rainDish: {
              name: string;
              description: string;
          };
          sandStream: {
              name: string;
              description: string;
          };
          pressure: {
              name: string;
              description: string;
          };
          thickFat: {
              name: string;
              description: string;
          };
          earlyBird: {
              name: string;
              description: string;
          };
          flameBody: {
              name: string;
              description: string;
          };
          runAway: {
              name: string;
              description: string;
          };
          keenEye: {
              name: string;
              description: string;
          };
          hyperCutter: {
              name: string;
              description: string;
          };
          pickup: {
              name: string;
              description: string;
          };
          truant: {
              name: string;
              description: string;
          };
          hustle: {
              name: string;
              description: string;
          };
          cuteCharm: {
              name: string;
              description: string;
          };
          plus: {
              name: string;
              description: string;
          };
          minus: {
              name: string;
              description: string;
          };
          forecast: {
              name: string;
              description: string;
          };
          stickyHold: {
              name: string;
              description: string;
          };
          shedSkin: {
              name: string;
              description: string;
          };
          guts: {
              name: string;
              description: string;
          };
          marvelScale: {
              name: string;
              description: string;
          };
          liquidOoze: {
              name: string;
              description: string;
          };
          overgrow: {
              name: string;
              description: string;
          };
          blaze: {
              name: string;
              description: string;
          };
          torrent: {
              name: string;
              description: string;
          };
          swarm: {
              name: string;
              description: string;
          };
          rockHead: {
              name: string;
              description: string;
          };
          drought: {
              name: string;
              description: string;
          };
          arenaTrap: {
              name: string;
              description: string;
          };
          vitalSpirit: {
              name: string;
              description: string;
          };
          whiteSmoke: {
              name: string;
              description: string;
          };
          purePower: {
              name: string;
              description: string;
          };
          shellArmor: {
              name: string;
              description: string;
          };
          airLock: {
              name: string;
              description: string;
          };
          tangledFeet: {
              name: string;
              description: string;
          };
          motorDrive: {
              name: string;
              description: string;
          };
          rivalry: {
              name: string;
              description: string;
          };
          steadfast: {
              name: string;
              description: string;
          };
          snowCloak: {
              name: string;
              description: string;
          };
          gluttony: {
              name: string;
              description: string;
          };
          angerPoint: {
              name: string;
              description: string;
          };
          unburden: {
              name: string;
              description: string;
          };
          heatproof: {
              name: string;
              description: string;
          };
          simple: {
              name: string;
              description: string;
          };
          drySkin: {
              name: string;
              description: string;
          };
          download: {
              name: string;
              description: string;
          };
          ironFist: {
              name: string;
              description: string;
          };
          poisonHeal: {
              name: string;
              description: string;
          };
          adaptability: {
              name: string;
              description: string;
          };
          skillLink: {
              name: string;
              description: string;
          };
          hydration: {
              name: string;
              description: string;
          };
          solarPower: {
              name: string;
              description: string;
          };
          quickFeet: {
              name: string;
              description: string;
          };
          normalize: {
              name: string;
              description: string;
          };
          sniper: {
              name: string;
              description: string;
          };
          magicGuard: {
              name: string;
              description: string;
          };
          noGuard: {
              name: string;
              description: string;
          };
          stall: {
              name: string;
              description: string;
          };
          technician: {
              name: string;
              description: string;
          };
          leafGuard: {
              name: string;
              description: string;
          };
          klutz: {
              name: string;
              description: string;
          };
          moldBreaker: {
              name: string;
              description: string;
          };
          superLuck: {
              name: string;
              description: string;
          };
          aftermath: {
              name: string;
              description: string;
          };
          anticipation: {
              name: string;
              description: string;
          };
          forewarn: {
              name: string;
              description: string;
          };
          unaware: {
              name: string;
              description: string;
          };
          tintedLens: {
              name: string;
              description: string;
          };
          filter: {
              name: string;
              description: string;
          };
          slowStart: {
              name: string;
              description: string;
          };
          scrappy: {
              name: string;
              description: string;
          };
          stormDrain: {
              name: string;
              description: string;
          };
          iceBody: {
              name: string;
              description: string;
          };
          solidRock: {
              name: string;
              description: string;
          };
          snowWarning: {
              name: string;
              description: string;
          };
          honeyGather: {
              name: string;
              description: string;
          };
          frisk: {
              name: string;
              description: string;
          };
          reckless: {
              name: string;
              description: string;
          };
          multitype: {
              name: string;
              description: string;
          };
          flowerGift: {
              name: string;
              description: string;
          };
          badDreams: {
              name: string;
              description: string;
          };
          pickpocket: {
              name: string;
              description: string;
          };
          sheerForce: {
              name: string;
              description: string;
          };
          contrary: {
              name: string;
              description: string;
          };
          unnerve: {
              name: string;
              description: string;
          };
          defiant: {
              name: string;
              description: string;
          };
          defeatist: {
              name: string;
              description: string;
          };
          cursedBody: {
              name: string;
              description: string;
          };
          healer: {
              name: string;
              description: string;
          };
          friendGuard: {
              name: string;
              description: string;
          };
          weakArmor: {
              name: string;
              description: string;
          };
          heavyMetal: {
              name: string;
              description: string;
          };
          lightMetal: {
              name: string;
              description: string;
          };
          multiscale: {
              name: string;
              description: string;
          };
          toxicBoost: {
              name: string;
              description: string;
          };
          flareBoost: {
              name: string;
              description: string;
          };
          harvest: {
              name: string;
              description: string;
          };
          telepathy: {
              name: string;
              description: string;
          };
          moody: {
              name: string;
              description: string;
          };
          overcoat: {
              name: string;
              description: string;
          };
          poisonTouch: {
              name: string;
              description: string;
          };
          regenerator: {
              name: string;
              description: string;
          };
          bigPecks: {
              name: string;
              description: string;
          };
          sandRush: {
              name: string;
              description: string;
          };
          wonderSkin: {
              name: string;
              description: string;
          };
          analytic: {
              name: string;
              description: string;
          };
          illusion: {
              name: string;
              description: string;
          };
          imposter: {
              name: string;
              description: string;
          };
          infiltrator: {
              name: string;
              description: string;
          };
          mummy: {
              name: string;
              description: string;
          };
          moxie: {
              name: string;
              description: string;
          };
          justified: {
              name: string;
              description: string;
          };
          rattled: {
              name: string;
              description: string;
          };
          magicBounce: {
              name: string;
              description: string;
          };
          sapSipper: {
              name: string;
              description: string;
          };
          prankster: {
              name: string;
              description: string;
          };
          sandForce: {
              name: string;
              description: string;
          };
          ironBarbs: {
              name: string;
              description: string;
          };
          zenMode: {
              name: string;
              description: string;
          };
          victoryStar: {
              name: string;
              description: string;
          };
          turboblaze: {
              name: string;
              description: string;
          };
          teravolt: {
              name: string;
              description: string;
          };
          aromaVeil: {
              name: string;
              description: string;
          };
          flowerVeil: {
              name: string;
              description: string;
          };
          cheekPouch: {
              name: string;
              description: string;
          };
          protean: {
              name: string;
              description: string;
          };
          furCoat: {
              name: string;
              description: string;
          };
          magician: {
              name: string;
              description: string;
          };
          bulletproof: {
              name: string;
              description: string;
          };
          competitive: {
              name: string;
              description: string;
          };
          strongJaw: {
              name: string;
              description: string;
          };
          refrigerate: {
              name: string;
              description: string;
          };
          sweetVeil: {
              name: string;
              description: string;
          };
          stanceChange: {
              name: string;
              description: string;
          };
          galeWings: {
              name: string;
              description: string;
          };
          megaLauncher: {
              name: string;
              description: string;
          };
          grassPelt: {
              name: string;
              description: string;
          };
          symbiosis: {
              name: string;
              description: string;
          };
          toughClaws: {
              name: string;
              description: string;
          };
          pixilate: {
              name: string;
              description: string;
          };
          gooey: {
              name: string;
              description: string;
          };
          aerilate: {
              name: string;
              description: string;
          };
          parentalBond: {
              name: string;
              description: string;
          };
          darkAura: {
              name: string;
              description: string;
          };
          fairyAura: {
              name: string;
              description: string;
          };
          auraBreak: {
              name: string;
              description: string;
          };
          primordialSea: {
              name: string;
              description: string;
          };
          desolateLand: {
              name: string;
              description: string;
          };
          deltaStream: {
              name: string;
              description: string;
          };
          stamina: {
              name: string;
              description: string;
          };
          wimpOut: {
              name: string;
              description: string;
          };
          emergencyExit: {
              name: string;
              description: string;
          };
          waterCompaction: {
              name: string;
              description: string;
          };
          merciless: {
              name: string;
              description: string;
          };
          shieldsDown: {
              name: string;
              description: string;
          };
          stakeout: {
              name: string;
              description: string;
          };
          waterBubble: {
              name: string;
              description: string;
          };
          steelworker: {
              name: string;
              description: string;
          };
          berserk: {
              name: string;
              description: string;
          };
          slushRush: {
              name: string;
              description: string;
          };
          longReach: {
              name: string;
              description: string;
          };
          liquidVoice: {
              name: string;
              description: string;
          };
          triage: {
              name: string;
              description: string;
          };
          galvanize: {
              name: string;
              description: string;
          };
          surgeSurfer: {
              name: string;
              description: string;
          };
          schooling: {
              name: string;
              description: string;
          };
          disguise: {
              name: string;
              description: string;
          };
          battleBond: {
              name: string;
              description: string;
          };
          powerConstruct: {
              name: string;
              description: string;
          };
          corrosion: {
              name: string;
              description: string;
          };
          comatose: {
              name: string;
              description: string;
          };
          queenlyMajesty: {
              name: string;
              description: string;
          };
          innardsOut: {
              name: string;
              description: string;
          };
          dancer: {
              name: string;
              description: string;
          };
          battery: {
              name: string;
              description: string;
          };
          fluffy: {
              name: string;
              description: string;
          };
          dazzling: {
              name: string;
              description: string;
          };
          soulHeart: {
              name: string;
              description: string;
          };
          tanglingHair: {
              name: string;
              description: string;
          };
          receiver: {
              name: string;
              description: string;
          };
          powerOfAlchemy: {
              name: string;
              description: string;
          };
          beastBoost: {
              name: string;
              description: string;
          };
          rksSystem: {
              name: string;
              description: string;
          };
          electricSurge: {
              name: string;
              description: string;
          };
          psychicSurge: {
              name: string;
              description: string;
          };
          mistySurge: {
              name: string;
              description: string;
          };
          grassySurge: {
              name: string;
              description: string;
          };
          fullMetalBody: {
              name: string;
              description: string;
          };
          shadowShield: {
              name: string;
              description: string;
          };
          prismArmor: {
              name: string;
              description: string;
          };
          neuroforce: {
              name: string;
              description: string;
          };
          intrepidSword: {
              name: string;
              description: string;
          };
          dauntlessShield: {
              name: string;
              description: string;
          };
          libero: {
              name: string;
              description: string;
          };
          ballFetch: {
              name: string;
              description: string;
          };
          cottonDown: {
              name: string;
              description: string;
          };
          propellerTail: {
              name: string;
              description: string;
          };
          mirrorArmor: {
              name: string;
              description: string;
          };
          gulpMissile: {
              name: string;
              description: string;
          };
          stalwart: {
              name: string;
              description: string;
          };
          steamEngine: {
              name: string;
              description: string;
          };
          punkRock: {
              name: string;
              description: string;
          };
          sandSpit: {
              name: string;
              description: string;
          };
          iceScales: {
              name: string;
              description: string;
          };
          ripen: {
              name: string;
              description: string;
          };
          iceFace: {
              name: string;
              description: string;
          };
          powerSpot: {
              name: string;
              description: string;
          };
          mimicry: {
              name: string;
              description: string;
          };
          screenCleaner: {
              name: string;
              description: string;
          };
          steelySpirit: {
              name: string;
              description: string;
          };
          perishBody: {
              name: string;
              description: string;
          };
          wanderingSpirit: {
              name: string;
              description: string;
          };
          gorillaTactics: {
              name: string;
              description: string;
          };
          neutralizingGas: {
              name: string;
              description: string;
          };
          pastelVeil: {
              name: string;
              description: string;
          };
          hungerSwitch: {
              name: string;
              description: string;
          };
          quickDraw: {
              name: string;
              description: string;
          };
          unseenFist: {
              name: string;
              description: string;
          };
          curiousMedicine: {
              name: string;
              description: string;
          };
          transistor: {
              name: string;
              description: string;
          };
          dragonsMaw: {
              name: string;
              description: string;
          };
          chillingNeigh: {
              name: string;
              description: string;
          };
          grimNeigh: {
              name: string;
              description: string;
          };
          asOneGlastrier: {
              name: string;
              description: string;
          };
          asOneSpectrier: {
              name: string;
              description: string;
          };
          lingeringAroma: {
              name: string;
              description: string;
          };
          seedSower: {
              name: string;
              description: string;
          };
          thermalExchange: {
              name: string;
              description: string;
          };
          angerShell: {
              name: string;
              description: string;
          };
          purifyingSalt: {
              name: string;
              description: string;
          };
          wellBakedBody: {
              name: string;
              description: string;
          };
          windRider: {
              name: string;
              description: string;
          };
          guardDog: {
              name: string;
              description: string;
          };
          rockyPayload: {
              name: string;
              description: string;
          };
          windPower: {
              name: string;
              description: string;
          };
          zeroToHero: {
              name: string;
              description: string;
          };
          commander: {
              name: string;
              description: string;
          };
          electromorphosis: {
              name: string;
              description: string;
          };
          protosynthesis: {
              name: string;
              description: string;
          };
          quarkDrive: {
              name: string;
              description: string;
          };
          goodAsGold: {
              name: string;
              description: string;
          };
          vesselOfRuin: {
              name: string;
              description: string;
          };
          swordOfRuin: {
              name: string;
              description: string;
          };
          tabletsOfRuin: {
              name: string;
              description: string;
          };
          beadsOfRuin: {
              name: string;
              description: string;
          };
          orichalcumPulse: {
              name: string;
              description: string;
          };
          hadronEngine: {
              name: string;
              description: string;
          };
          opportunist: {
              name: string;
              description: string;
          };
          cudChew: {
              name: string;
              description: string;
          };
          sharpness: {
              name: string;
              description: string;
          };
          supremeOverlord: {
              name: string;
              description: string;
          };
          costar: {
              name: string;
              description: string;
          };
          toxicDebris: {
              name: string;
              description: string;
          };
          armorTail: {
              name: string;
              description: string;
          };
          earthEater: {
              name: string;
              description: string;
          };
          myceliumMight: {
              name: string;
              description: string;
          };
          mindsEye: {
              name: string;
              description: string;
          };
          supersweetSyrup: {
              name: string;
              description: string;
          };
          hospitality: {
              name: string;
              description: string;
          };
          toxicChain: {
              name: string;
              description: string;
          };
          embodyAspectTeal: {
              name: string;
              description: string;
          };
          embodyAspectWellspring: {
              name: string;
              description: string;
          };
          embodyAspectHearthflame: {
              name: string;
              description: string;
          };
          embodyAspectCornerstone: {
              name: string;
              description: string;
          };
          teraShift: {
              name: string;
              description: string;
          };
          teraShell: {
              name: string;
              description: string;
          };
          teraformZero: {
              name: string;
              description: string;
          };
          poisonPuppeteer: {
              name: string;
              description: string;
          };
      };
      abilityTriggers: {
          blockRecoilDamage: string;
          badDreams: string;
          costar: string;
          iceFaceAvoidedDamage: string;
          perishBody: string;
          poisonHeal: string;
          trace: string;
          windPowerCharged: string;
          quickDraw: string;
          disguiseAvoidedDamage: string;
          blockItemTheft: string;
          typeImmunityHeal: string;
          nonSuperEffectiveImmunity: string;
          fullHpResistType: string;
          moveImmunity: string;
          reverseDrain: string;
          postDefendTypeChange: string;
          postDefendContactDamage: string;
          postDefendAbilitySwap: string;
          postDefendAbilityGive: string;
          postDefendMoveDisable: string;
          pokemonTypeChange: string;
          postAttackStealHeldItem: string;
          postDefendStealHeldItem: string;
          copyFaintedAllyAbility: string;
          intimidateImmunity: string;
          postSummonAllyHeal: string;
          postSummonClearAllyStats: string;
          postSummonTransform: string;
          protectStat: string;
          statusEffectImmunityWithName: string;
          statusEffectImmunity: string;
          battlerTagImmunity: string;
          forewarn: string;
          frisk: string;
          postWeatherLapseHeal: string;
          postWeatherLapseDamage: string;
          postTurnLootCreateEatenBerry: string;
          postTurnHeal: string;
          fetchBall: string;
          healFromBerryUse: string;
          arenaTrap: string;
          postBattleLoot: string;
          postFaintContactDamage: string;
          postFaintHpDamage: string;
          postSummonPressure: string;
          weatherEffectDisappeared: string;
          postSummonMoldBreaker: string;
          postSummonAnticipation: string;
          postSummonTurboblaze: string;
          postSummonTeravolt: string;
          postSummonDarkAura: string;
          postSummonFairyAura: string;
          postSummonAuraBreak: string;
          postSummonNeutralizingGas: string;
          postSummonAsOneGlastrier: string;
          postSummonAsOneSpectrier: string;
          postSummonVesselOfRuin: string;
          postSummonSwordOfRuin: string;
          postSummonTabletsOfRuin: string;
          postSummonBeadsOfRuin: string;
          preventBerryUse: string;
      };
      arenaFlyout: {
          activeBattleEffects: string;
          player: string;
          neutral: string;
          enemy: string;
          sunny: string;
          rain: string;
          sandstorm: string;
          hail: string;
          snow: string;
          fog: string;
          heavyRain: string;
          harshSun: string;
          strongWinds: string;
          misty: string;
          electric: string;
          grassy: string;
          psychic: string;
          mudSport: string;
          waterSport: string;
          spikes: string;
          toxicSpikes: string;
          mist: string;
          futureSight: string;
          doomDesire: string;
          wish: string;
          stealthRock: string;
          stickyWeb: string;
          trickRoom: string;
          gravity: string;
          reflect: string;
          lightScreen: string;
          auroraVeil: string;
          quickGuard: string;
          wideGuard: string;
          matBlock: string;
          craftyShield: string;
          tailwind: string;
          happyHour: string;
          safeguard: string;
      };
      arenaTag: {
          yourTeam: string;
          opposingTeam: string;
          arenaOnRemove: string;
          arenaOnRemovePlayer: string;
          arenaOnRemoveEnemy: string;
          mistOnAdd: string;
          mistApply: string;
          reflectOnAdd: string;
          reflectOnAddPlayer: string;
          reflectOnAddEnemy: string;
          lightScreenOnAdd: string;
          lightScreenOnAddPlayer: string;
          lightScreenOnAddEnemy: string;
          auroraVeilOnAdd: string;
          auroraVeilOnAddPlayer: string;
          auroraVeilOnAddEnemy: string;
          conditionalProtectOnAdd: string;
          conditionalProtectOnAddPlayer: string;
          conditionalProtectOnAddEnemy: string;
          conditionalProtectApply: string;
          matBlockOnAdd: string;
          noCritOnAddPlayer: string;
          noCritOnAddEnemy: string;
          noCritOnRemove: string;
          wishTagOnAdd: string;
          mudSportOnAdd: string;
          mudSportOnRemove: string;
          waterSportOnAdd: string;
          waterSportOnRemove: string;
          spikesOnAdd: string;
          spikesActivateTrap: string;
          toxicSpikesOnAdd: string;
          toxicSpikesActivateTrapPoison: string;
          stealthRockOnAdd: string;
          stealthRockActivateTrap: string;
          stickyWebOnAdd: string;
          stickyWebActivateTrap: string;
          trickRoomOnAdd: string;
          trickRoomOnRemove: string;
          gravityOnAdd: string;
          gravityOnRemove: string;
          tailwindOnAdd: string;
          tailwindOnAddPlayer: string;
          tailwindOnAddEnemy: string;
          tailwindOnRemove: string;
          tailwindOnRemovePlayer: string;
          tailwindOnRemoveEnemy: string;
          happyHourOnAdd: string;
          happyHourOnRemove: string;
          safeguardOnAdd: string;
          safeguardOnAddPlayer: string;
          safeguardOnAddEnemy: string;
          safeguardOnRemove: string;
          safeguardOnRemovePlayer: string;
          safeguardOnRemoveEnemy: string;
      };
      battle: {
          bossAppeared: string;
          trainerAppeared: string;
          trainerAppearedDouble: string;
          trainerSendOut: string;
          singleWildAppeared: string;
          multiWildAppeared: string;
          playerComeBack: string;
          trainerComeBack: string;
          playerGo: string;
          trainerGo: string;
          switchQuestion: string;
          trainerDefeated: string;
          moneyWon: string;
          moneyPickedUp: string;
          pokemonCaught: string;
          addedAsAStarter: string;
          partyFull: string;
          pokemon: string;
          sendOutPokemon: string;
          hitResultCriticalHit: string;
          hitResultSuperEffective: string;
          hitResultNotVeryEffective: string;
          hitResultNoEffect: string;
          hitResultImmune: string;
          hitResultOneHitKO: string;
          attackFailed: string;
          attackMissed: string;
          attackHitsCount: string;
          rewardGain: string;
          expGain: string;
          levelUp: string;
          learnMove: string;
          learnMovePrompt: string;
          learnMoveLimitReached: string;
          learnMoveReplaceQuestion: string;
          learnMoveStopTeaching: string;
          learnMoveNotLearned: string;
          learnMoveForgetQuestion: string;
          learnMoveForgetSuccess: string;
          countdownPoof: string;
          learnMoveAnd: string;
          levelCapUp: string;
          moveNotImplemented: string;
          moveNoPP: string;
          moveDisabled: string;
          disableInterruptedMove: string;
          noPokeballForce: string;
          noPokeballTrainer: string;
          noPokeballMulti: string;
          noPokeballStrong: string;
          noEscapeForce: string;
          noEscapeTrainer: string;
          noEscapePokemon: string;
          runAwaySuccess: string;
          runAwayCannotEscape: string;
          escapeVerbSwitch: string;
          escapeVerbFlee: string;
          notDisabled: string;
          turnEndHpRestore: string;
          hpIsFull: string;
          skipItemQuestion: string;
          itemStackFull: string;
          eggHatching: string;
          eggSkipPrompt: string;
          ivScannerUseQuestion: string;
          wildPokemonWithAffix: string;
          foePokemonWithAffix: string;
          useMove: string;
          drainMessage: string;
          regainHealth: string;
          stealEatBerry: string;
          ppHealBerry: string;
          hpHealBerry: string;
          fainted: string;
          statsAnd: string;
          stats: string;
          statRose_one: string;
          statRose_other: string;
          statSharplyRose_one: string;
          statSharplyRose_other: string;
          statRoseDrastically_one: string;
          statRoseDrastically_other: string;
          statWontGoAnyHigher_one: string;
          statWontGoAnyHigher_other: string;
          statFell_one: string;
          statFell_other: string;
          statHarshlyFell_one: string;
          statHarshlyFell_other: string;
          statSeverelyFell_one: string;
          statSeverelyFell_other: string;
          statWontGoAnyLower_one: string;
          statWontGoAnyLower_other: string;
          transformedIntoType: string;
          retryBattle: string;
          unlockedSomething: string;
          congratulations: string;
          beatModeFirstTime: string;
          ppReduced: string;
      };
      battleScene: {
          moneyOwned: string;
      };
      battleInfo: {
          generation: string;
      };
      battleMessageUiHandler: {
          ivBest: string;
          ivFantastic: string;
          ivVeryGood: string;
          ivPrettyGood: string;
          ivDecent: string;
          ivNoGood: string;
      };
      battlePokemonForm: {
          mega: string;
          "mega-x": string;
          "mega-y": string;
          primal: string;
          gigantamax: string;
          eternamax: string;
          megaChange: string;
          gigantamaxChange: string;
          eternamaxChange: string;
          revertChange: string;
          formChange: string;
          disguiseChange: string;
      };
      battlerTags: {
          trappedDesc: string;
          flinchedDesc: string;
          confusedDesc: string;
          infatuatedDesc: string;
          seedDesc: string;
          nightmareDesc: string;
          ingrainDesc: string;
          drowsyDesc: string;
          rechargingLapse: string;
          trappedOnAdd: string;
          trappedOnRemove: string;
          flinchedLapse: string;
          confusedOnAdd: string;
          confusedOnRemove: string;
          confusedOnOverlap: string;
          confusedLapse: string;
          confusedLapseHurtItself: string;
          destinyBondLapseIsBoss: string;
          destinyBondLapse: string;
          infatuatedOnAdd: string;
          infatuatedOnOverlap: string;
          infatuatedLapse: string;
          infatuatedLapseImmobilize: string;
          infatuatedOnRemove: string;
          seededOnAdd: string;
          seededLapse: string;
          seededLapseShed: string;
          nightmareOnAdd: string;
          nightmareOnOverlap: string;
          nightmareLapse: string;
          encoreOnAdd: string;
          encoreOnRemove: string;
          helpingHandOnAdd: string;
          ingrainLapse: string;
          ingrainOnTrap: string;
          aquaRingOnAdd: string;
          aquaRingLapse: string;
          drowsyOnAdd: string;
          damagingTrapLapse: string;
          bindOnTrap: string;
          wrapOnTrap: string;
          vortexOnTrap: string;
          clampOnTrap: string;
          sandTombOnTrap: string;
          magmaStormOnTrap: string;
          snapTrapOnTrap: string;
          thunderCageOnTrap: string;
          infestationOnTrap: string;
          protectedOnAdd: string;
          protectedLapse: string;
          enduringOnAdd: string;
          enduringLapse: string;
          sturdyLapse: string;
          perishSongLapse: string;
          centerOfAttentionOnAdd: string;
          truantLapse: string;
          slowStartOnAdd: string;
          slowStartOnRemove: string;
          highestStatBoostOnAdd: string;
          highestStatBoostOnRemove: string;
          magnetRisenOnAdd: string;
          magnetRisenOnRemove: string;
          critBoostOnAdd: string;
          critBoostOnRemove: string;
          saltCuredOnAdd: string;
          saltCuredLapse: string;
          cursedOnAdd: string;
          cursedLapse: string;
          stockpilingOnAdd: string;
          disabledOnAdd: string;
          disabledLapse: string;
      };
      berry: {
          SITRUS: {
              name: string;
              effect: string;
          };
          LUM: {
              name: string;
              effect: string;
          };
          ENIGMA: {
              name: string;
              effect: string;
          };
          LIECHI: {
              name: string;
              effect: string;
          };
          GANLON: {
              name: string;
              effect: string;
          };
          PETAYA: {
              name: string;
              effect: string;
          };
          APICOT: {
              name: string;
              effect: string;
          };
          SALAC: {
              name: string;
              effect: string;
          };
          LANSAT: {
              name: string;
              effect: string;
          };
          STARF: {
              name: string;
              effect: string;
          };
          LEPPA: {
              name: string;
              effect: string;
          };
      };
      bgmName: {
          music: string;
          missing_entries: string;
          battle_kanto_champion: string;
          battle_johto_champion: string;
          battle_hoenn_champion_g5: string;
          battle_hoenn_champion_g6: string;
          battle_sinnoh_champion: string;
          battle_champion_alder: string;
          battle_champion_iris: string;
          battle_kalos_champion: string;
          battle_alola_champion: string;
          battle_galar_champion: string;
          battle_champion_geeta: string;
          battle_champion_nemona: string;
          battle_champion_kieran: string;
          battle_hoenn_elite: string;
          battle_unova_elite: string;
          battle_kalos_elite: string;
          battle_alola_elite: string;
          battle_galar_elite: string;
          battle_paldea_elite: string;
          battle_bb_elite: string;
          battle_final_encounter: string;
          battle_final: string;
          battle_kanto_gym: string;
          battle_johto_gym: string;
          battle_hoenn_gym: string;
          battle_sinnoh_gym: string;
          battle_unova_gym: string;
          battle_kalos_gym: string;
          battle_galar_gym: string;
          battle_paldea_gym: string;
          battle_legendary_kanto: string;
          battle_legendary_raikou: string;
          battle_legendary_entei: string;
          battle_legendary_suicune: string;
          battle_legendary_lugia: string;
          battle_legendary_ho_oh: string;
          battle_legendary_regis_g5: string;
          battle_legendary_regis_g6: string;
          battle_legendary_gro_kyo: string;
          battle_legendary_rayquaza: string;
          battle_legendary_deoxys: string;
          battle_legendary_lake_trio: string;
          battle_legendary_sinnoh: string;
          battle_legendary_dia_pal: string;
          battle_legendary_origin_forme: string;
          battle_legendary_giratina: string;
          battle_legendary_arceus: string;
          battle_legendary_unova: string;
          battle_legendary_kyurem: string;
          battle_legendary_res_zek: string;
          battle_legendary_xern_yvel: string;
          battle_legendary_tapu: string;
          battle_legendary_sol_lun: string;
          battle_legendary_ub: string;
          battle_legendary_dusk_dawn: string;
          battle_legendary_ultra_nec: string;
          battle_legendary_zac_zam: string;
          battle_legendary_glas_spec: string;
          battle_legendary_calyrex: string;
          battle_legendary_riders: string;
          battle_legendary_birds_galar: string;
          battle_legendary_ruinous: string;
          battle_legendary_kor_mir: string;
          battle_legendary_loyal_three: string;
          battle_legendary_ogerpon: string;
          battle_legendary_terapagos: string;
          battle_legendary_pecharunt: string;
          battle_rival: string;
          battle_rival_2: string;
          battle_rival_3: string;
          battle_trainer: string;
          battle_wild: string;
          battle_wild_strong: string;
          end_summit: string;
          battle_rocket_grunt: string;
          battle_aqua_magma_grunt: string;
          battle_galactic_grunt: string;
          battle_plasma_grunt: string;
          battle_flare_grunt: string;
          battle_aether_grunt: string;
          battle_skull_grunt: string;
          battle_macro_grunt: string;
          battle_galactic_admin: string;
          battle_skull_admin: string;
          battle_oleana: string;
          battle_rocket_boss: string;
          battle_aqua_magma_boss: string;
          battle_galactic_boss: string;
          battle_plasma_boss: string;
          battle_flare_boss: string;
          battle_aether_boss: string;
          battle_skull_boss: string;
          battle_macro_boss: string;
          abyss: string;
          badlands: string;
          beach: string;
          cave: string;
          construction_site: string;
          desert: string;
          dojo: string;
          end: string;
          factory: string;
          fairy_cave: string;
          forest: string;
          grass: string;
          graveyard: string;
          ice_cave: string;
          island: string;
          jungle: string;
          laboratory: string;
          lake: string;
          meadow: string;
          metropolis: string;
          mountain: string;
          plains: string;
          power_plant: string;
          ruins: string;
          sea: string;
          seabed: string;
          slum: string;
          snowy_forest: string;
          space: string;
          swamp: string;
          tall_grass: string;
          temple: string;
          town: string;
          volcano: string;
          wasteland: string;
          encounter_ace_trainer: string;
          encounter_backpacker: string;
          encounter_clerk: string;
          encounter_cyclist: string;
          encounter_lass: string;
          encounter_parasol_lady: string;
          encounter_pokefan: string;
          encounter_psychic: string;
          encounter_rich: string;
          encounter_rival: string;
          encounter_roughneck: string;
          encounter_scientist: string;
          encounter_twins: string;
          encounter_youngster: string;
          heal: string;
          menu: string;
          title: string;
      };
      biome: {
          unknownLocation: string;
          TOWN: string;
          PLAINS: string;
          GRASS: string;
          TALL_GRASS: string;
          METROPOLIS: string;
          FOREST: string;
          SEA: string;
          SWAMP: string;
          BEACH: string;
          LAKE: string;
          SEABED: string;
          MOUNTAIN: string;
          BADLANDS: string;
          CAVE: string;
          DESERT: string;
          ICE_CAVE: string;
          MEADOW: string;
          POWER_PLANT: string;
          VOLCANO: string;
          GRAVEYARD: string;
          DOJO: string;
          FACTORY: string;
          RUINS: string;
          WASTELAND: string;
          ABYSS: string;
          SPACE: string;
          CONSTRUCTION_SITE: string;
          JUNGLE: string;
          FAIRY_CAVE: string;
          TEMPLE: string;
          SLUM: string;
          SNOWY_FOREST: string;
          ISLAND: string;
          LABORATORY: string;
          END: string;
      };
      challenges: {
          title: string;
          illegalEvolution: string;
          noneSelected: string;
          singleGeneration: {
              name: string;
              desc: string;
              desc_default: string;
              gen_1: string;
              gen_2: string;
              gen_3: string;
              gen_4: string;
              gen_5: string;
              gen_6: string;
              gen_7: string;
              gen_8: string;
              gen_9: string;
          };
          singleType: {
              name: string;
              desc: string;
              desc_default: string;
          };
          freshStart: {
              name: string;
              desc: string;
              "value.0": string;
              "value.1": string;
          };
          inverseBattle: {
              name: string;
              shortName: string;
              desc: string;
              "value.0": string;
              "value.1": string;
          };
      };
      commandUiHandler: {
          fight: string;
          ball: string;
          pokemon: string;
          run: string;
          actionMessage: string;
      };
      common: {
          start: string;
          luckIndicator: string;
          shinyOnHover: string;
          commonShiny: string;
          rareShiny: string;
          epicShiny: string;
      };
      achv: {
          Achievements: {
              name: string;
          };
          Locked: {
              name: string;
          };
          MoneyAchv: {
              description: string;
          };
          "10K_MONEY": {
              name: string;
              name_female: string;
          };
          "100K_MONEY": {
              name: string;
              name_female: string;
          };
          "1M_MONEY": {
              name: string;
              name_female: string;
          };
          "10M_MONEY": {
              name: string;
              name_female: string;
          };
          DamageAchv: {
              description: string;
          };
          "250_DMG": {
              name: string;
          };
          "1000_DMG": {
              name: string;
              name_female: string;
          };
          "2500_DMG": {
              name: string;
              name_female: string;
          };
          "10000_DMG": {
              name: string;
              name_female: string;
          };
          HealAchv: {
              description: string;
          };
          "250_HEAL": {
              name: string;
              name_female: string;
          };
          "1000_HEAL": {
              name: string;
              name_female: string;
          };
          "2500_HEAL": {
              name: string;
              name_female: string;
          };
          "10000_HEAL": {
              name: string;
              name_female: string;
          };
          LevelAchv: {
              description: string;
          };
          LV_100: {
              name: string;
          };
          LV_250: {
              name: string;
              name_female: string;
          };
          LV_1000: {
              name: string;
          };
          RibbonAchv: {
              description: string;
          };
          "10_RIBBONS": {
              name: string;
              name_female: string;
          };
          "25_RIBBONS": {
              name: string;
              name_female: string;
          };
          "50_RIBBONS": {
              name: string;
              name_female: string;
          };
          "75_RIBBONS": {
              name: string;
              name_female: string;
          };
          "100_RIBBONS": {
              name: string;
              name_female: string;
          };
          TRANSFER_MAX_STAT_STAGE: {
              name: string;
              description: string;
          };
          MAX_FRIENDSHIP: {
              name: string;
              description: string;
          };
          MEGA_EVOLVE: {
              name: string;
              description: string;
          };
          GIGANTAMAX: {
              name: string;
              description: string;
          };
          TERASTALLIZE: {
              name: string;
              description: string;
          };
          STELLAR_TERASTALLIZE: {
              name: string;
              description: string;
          };
          SPLICE: {
              name: string;
              description: string;
          };
          MINI_BLACK_HOLE: {
              name: string;
              description: string;
          };
          CATCH_MYTHICAL: {
              name: string;
              description: string;
          };
          CATCH_SUB_LEGENDARY: {
              name: string;
              description: string;
          };
          CATCH_LEGENDARY: {
              name: string;
              description: string;
          };
          SEE_SHINY: {
              name: string;
              description: string;
          };
          SHINY_PARTY: {
              name: string;
              name_female: string;
              description: string;
          };
          HATCH_MYTHICAL: {
              name: string;
              description: string;
          };
          HATCH_SUB_LEGENDARY: {
              name: string;
              description: string;
          };
          HATCH_LEGENDARY: {
              name: string;
              description: string;
          };
          HATCH_SHINY: {
              name: string;
              description: string;
          };
          HIDDEN_ABILITY: {
              name: string;
              description: string;
          };
          PERFECT_IVS: {
              name: string;
              description: string;
          };
          CLASSIC_VICTORY: {
              name: string;
              name_female: string;
              description: string;
          };
          UNEVOLVED_CLASSIC_VICTORY: {
              name: string;
              description: string;
          };
          MONO_GEN_ONE: {
              name: string;
              description: string;
          };
          MONO_GEN_TWO: {
              name: string;
              description: string;
          };
          MONO_GEN_THREE: {
              name: string;
              description: string;
          };
          MONO_GEN_FOUR: {
              name: string;
              description: string;
          };
          MONO_GEN_FIVE: {
              name: string;
              description: string;
          };
          MONO_GEN_SIX: {
              name: string;
              description: string;
          };
          MONO_GEN_SEVEN: {
              name: string;
              description: string;
          };
          MONO_GEN_EIGHT: {
              name: string;
              description: string;
          };
          MONO_GEN_NINE: {
              name: string;
              description: string;
          };
          MonoType: {
              description: string;
          };
          MONO_NORMAL: {
              name: string;
          };
          MONO_FIGHTING: {
              name: string;
          };
          MONO_FLYING: {
              name: string;
          };
          MONO_POISON: {
              name: string;
          };
          MONO_GROUND: {
              name: string;
          };
          MONO_ROCK: {
              name: string;
          };
          MONO_BUG: {
              name: string;
          };
          MONO_GHOST: {
              name: string;
          };
          MONO_STEEL: {
              name: string;
          };
          MONO_FIRE: {
              name: string;
          };
          MONO_WATER: {
              name: string;
          };
          MONO_GRASS: {
              name: string;
          };
          MONO_ELECTRIC: {
              name: string;
          };
          MONO_PSYCHIC: {
              name: string;
          };
          MONO_ICE: {
              name: string;
          };
          MONO_DRAGON: {
              name: string;
          };
          MONO_DARK: {
              name: string;
          };
          MONO_FAIRY: {
              name: string;
          };
          FRESH_START: {
              name: string;
              description: string;
          };
          INVERSE_BATTLE: {
              name: string;
              description: string;
          };
      };
      dialogue: {
          youngster: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "4_female": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
                  "9_female": string;
                  "10": string;
                  "11": string;
                  "12": string;
                  "12_female": string;
                  "13": string;
                  "13_female": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "5_female": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
                  "10": string;
                  "11": string;
                  "12": string;
                  "13": string;
              };
          };
          lass: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "6_female": string;
                  "7": string;
                  "8": string;
                  "9": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "6_female": string;
                  "7": string;
                  "8": string;
                  "8_female": string;
                  "9": string;
              };
          };
          breeder: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          breeder_female: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          fisherman: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          fisherman_female: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          swimmer: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          backpacker: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          ace_trainer: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
                  "4": string;
                  "4_female": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          parasol_lady: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          twins: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          cyclist: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          black_belt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          battle_girl: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          hiker: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          ranger: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          scientist: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          school_kid: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          artist: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          guitarist: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          worker: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          worker_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          worker_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          hex_maniac: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "2_female": string;
              };
          };
          psychic: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          officer: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          beauty: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          baker: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
          };
          biker: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          firebreather: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          sailor: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          archer: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          ariana: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
          };
          proton: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          petrel: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          tabitha: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
          };
          courtney: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          shelly: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
          };
          matt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
          };
          mars: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          jupiter: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          saturn: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          zinzolin: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
          };
          rood: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          xerosic: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
          };
          bryony: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          rocket_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "5_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          magma_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
                  "4": string;
                  "5": string;
              };
          };
          aqua_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          galactic_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "5_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          plasma_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          flare_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          aether_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          faba: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
          };
          skull_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "4_female": string;
                  "5": string;
                  "5_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          plumeria: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
          };
          macro_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          oleana: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
          };
          rocket_boss_giovanni_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
              };
          };
          rocket_boss_giovanni_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          magma_boss_maxie_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          magma_boss_maxie_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aqua_boss_archie_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aqua_boss_archie_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          galactic_boss_cyrus_1: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          galactic_boss_cyrus_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          plasma_boss_ghetsis_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          plasma_boss_ghetsis_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          flare_boss_lysandre_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          flare_boss_lysandre_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aether_boss_lusamine_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aether_boss_lusamine_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          skull_boss_guzma_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          skull_boss_guzma_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          macro_boss_rose_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          macro_boss_rose_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          brock: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          misty: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          lt_surge: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          erika: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
              };
          };
          janine: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          sabrina: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          blaine: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          giovanni: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          roxanne: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          brawly: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          wattson: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
          };
          flannery: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          norman: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          winona: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          tate: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          liza: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          juan: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          crasher_wake: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          falkner: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          nessa: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          melony: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          marlon: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          shauntal: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          marshal: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          cheren: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          chili: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
          };
          cilan: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "3_female": string;
              };
          };
          roark: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "4_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          morty: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
              };
          };
          crispin: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          amarys: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lacey: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drayton: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
              };
          };
          ramos: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          viola: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          candice: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          gardenia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aaron: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          cress: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          allister: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          clay: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kofu: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          tulip: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          sidney: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          phoebe: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          glacia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drake: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          wallace: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lorelei: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
              };
          };
          will: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          malva: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          hala: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          molayne: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rika: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
              };
          };
          bruno: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bugsy: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          koga: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bertha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lenora: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          siebold: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          roxie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
              };
          };
          olivia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          poppy: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          agatha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          flint: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          grimsley: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          caitlin: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          diantha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          wikstrom: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
              };
          };
          acerola: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          larry_elite: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lance: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "2_female": string;
              };
          };
          karen: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          milo: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lucian: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drasna: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kahili: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          hassel: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          blue: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          piers: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          red: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          jasmine: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lance_champion: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          steven: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          cynthia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          iris: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          hau: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          geeta: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          nemona: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          leon: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          whitney: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          chuck: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          katy: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          pryce: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          clair: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          maylene: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          fantina: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          byron: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          olympia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          volkner: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          burgh: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          elesa: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          skyla: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          brycen: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drayden: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          grant: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          korrina: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          clemont: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          valerie: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          wulfric: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kabu: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bea: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          opal: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bede: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          gordie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          marnie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          raihan: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          brassius: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          iono: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          larry: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          ryme: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          grusha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          marnie_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          nessa_elite: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          bea_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          allister_elite: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          raihan_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "2_female": string;
              };
          };
          alder: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kieran: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_2_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_3: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_3_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_4: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_4_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_5: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_5_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_6: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_6_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
      };
      battleSpecDialogue: {
          encounter: string;
          encounter_female: string;
          firstStageWin: string;
          secondStageWin: string;
          key_ordinal_one: string;
          key_ordinal_two: string;
          key_ordinal_few: string;
          key_ordinal_other: string;
      };
      miscDialogue: {
          ending: string;
          ending_female: string;
          ending_endless: string;
          ending_name: string;
      };
      doubleBattleDialogue: {
          blue_red_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          red_blue_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          tate_liza_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          liza_tate_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          wallace_steven_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          steven_wallace_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          alder_iris_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          iris_alder_double: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
          };
          piers_marnie_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          marnie_piers_double: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
          };
      };
      egg: {
          egg: string;
          greatTier: string;
          ultraTier: string;
          masterTier: string;
          defaultTier: string;
          hatchWavesMessageSoon: string;
          hatchWavesMessageClose: string;
          hatchWavesMessageNotClose: string;
          hatchWavesMessageLongTime: string;
          gachaTypeLegendary: string;
          gachaTypeMove: string;
          gachaTypeShiny: string;
          selectMachine: string;
          notEnoughVouchers: string;
          tooManyEggs: string;
          pull: string;
          pulls: string;
          sameSpeciesEgg: string;
          hatchFromTheEgg: string;
          eggMoveUnlock: string;
          rareEggMoveUnlock: string;
          moveUPGacha: string;
          shinyUPGacha: string;
          legendaryUPGacha: string;
      };
      fightUiHandler: {
          pp: string;
          power: string;
          accuracy: string;
          abilityFlyInText: string;
          passive: string;
      };
      filterBar: {
          genFilter: string;
          typeFilter: string;
          caughtFilter: string;
          unlocksFilter: string;
          miscFilter: string;
          sortFilter: string;
          all: string;
          normal: string;
          uncaught: string;
          passive: string;
          passiveUnlocked: string;
          passiveLocked: string;
          passiveUnlockable: string;
          costReduction: string;
          costReductionUnlocked: string;
          costReductionLocked: string;
          costReductionUnlockable: string;
          favorite: string;
          isFavorite: string;
          notFavorite: string;
          ribbon: string;
          hasWon: string;
          hasNotWon: string;
          hiddenAbility: string;
          hasHiddenAbility: string;
          noHiddenAbility: string;
          egg: string;
          eggPurchasable: string;
          pokerus: string;
          hasPokerus: string;
          noPokerus: string;
          sortByNumber: string;
          sortByCost: string;
          sortByCandies: string;
          sortByIVs: string;
          sortByName: string;
      };
      gameMode: {
          classic: string;
          endless: string;
          endlessSpliced: string;
          dailyRun: string;
          unknown: string;
          challenge: string;
      };
      gameStatsUiHandler: {
          stats: string;
          playTime: string;
          totalBattles: string;
          starters: string;
          shinyStarters: string;
          speciesSeen: string;
          speciesCaught: string;
          ribbonsOwned: string;
          classicRuns: string;
          classicWins: string;
          dailyRunAttempts: string;
          dailyRunWins: string;
          endlessRuns: string;
          highestWaveEndless: string;
          highestMoney: string;
          highestDamage: string;
          highestHPHealed: string;
          pokemonEncountered: string;
          pokemonDefeated: string;
          pokemonCaught: string;
          eggsHatched: string;
          subLegendsSeen: string;
          subLegendsCaught: string;
          subLegendsHatched: string;
          legendsSeen: string;
          legendsCaught: string;
          legendsHatched: string;
          mythicalsSeen: string;
          mythicalsCaught: string;
          mythicalsHatched: string;
          shiniesSeen: string;
          shiniesCaught: string;
          shiniesHatched: string;
          pokemonFused: string;
          trainersDefeated: string;
          eggsPulled: string;
          rareEggsPulled: string;
          epicEggsPulled: string;
          legendaryEggsPulled: string;
          manaphyEggsPulled: string;
      };
      growth: {
          Erratic: string;
          Fast: string;
          Medium_Fast: string;
          Medium_Slow: string;
          Slow: string;
          Fluctuating: string;
      };
      menu: {
          cancel: string;
          continue: string;
          dailyRun: string;
          loadGame: string;
          newGame: string;
          settings: string;
          selectGameMode: string;
          logInOrCreateAccount: string;
          username: string;
          password: string;
          login: string;
          orUse: string;
          register: string;
          emptyUsername: string;
          invalidLoginUsername: string;
          invalidRegisterUsername: string;
          invalidLoginPassword: string;
          invalidRegisterPassword: string;
          usernameAlreadyUsed: string;
          accountNonExistent: string;
          unmatchingPassword: string;
          passwordNotMatchingConfirmPassword: string;
          confirmPassword: string;
          registrationAgeWarning: string;
          backToLogin: string;
          failedToLoadSaveData: string;
          sessionSuccess: string;
          failedToLoadSession: string;
          boyOrGirl: string;
          evolving: string;
          stoppedEvolving: string;
          pauseEvolutionsQuestion: string;
          evolutionsPaused: string;
          evolutionDone: string;
          dailyRankings: string;
          weeklyRankings: string;
          noRankings: string;
          positionIcon: string;
          usernameScoreboard: string;
          score: string;
          wave: string;
          loading: string;
          loadingAsset: string;
          playersOnline: string;
          yes: string;
          no: string;
          disclaimer: string;
          disclaimerDescription: string;
          choosePokemon: string;
          renamePokemon: string;
          rename: string;
          nickname: string;
          errorServerDown: string;
          noSaves: string;
          tooManySaves: string;
      };
      menuUiHandler: {
          GAME_SETTINGS: string;
          ACHIEVEMENTS: string;
          STATS: string;
          RUN_HISTORY: string;
          EGG_LIST: string;
          EGG_GACHA: string;
          MANAGE_DATA: string;
          COMMUNITY: string;
          SAVE_AND_QUIT: string;
          LOG_OUT: string;
          slot: string;
          importSession: string;
          importSlotSelect: string;
          exportSession: string;
          exportSlotSelect: string;
          importRunHistory: string;
          exportRunHistory: string;
          importData: string;
          exportData: string;
          consentPreferences: string;
          linkDiscord: string;
          unlinkDiscord: string;
          linkGoogle: string;
          unlinkGoogle: string;
          cancel: string;
          donate: string;
          losingProgressionWarning: string;
          noEggs: string;
      };
      modifier: {
          surviveDamageApply: string;
          turnHealApply: string;
          hitHealApply: string;
          pokemonInstantReviveApply: string;
          resetNegativeStatStageApply: string;
          moneyInterestApply: string;
          turnHeldItemTransferApply: string;
          contactHeldItemTransferApply: string;
          enemyTurnHealApply: string;
          bypassSpeedChanceApply: string;
      };
      modifierType: {
          ModifierType: {
              AddPokeballModifierType: {
                  name: string;
                  description: string;
              };
              AddVoucherModifierType: {
                  name: string;
                  description: string;
              };
              PokemonHeldItemModifierType: {
                  extra: {
                      inoperable: string;
                      tooMany: string;
                  };
              };
              PokemonHpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                      fullyWithStatus: string;
                  };
              };
              PokemonReviveModifierType: {
                  description: string;
              };
              PokemonStatusHealModifierType: {
                  description: string;
              };
              PokemonPpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                  };
              };
              PokemonAllMovePpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                  };
              };
              PokemonPpUpModifierType: {
                  description: string;
              };
              PokemonNatureChangeModifierType: {
                  name: string;
                  description: string;
              };
              DoubleBattleChanceBoosterModifierType: {
                  description: string;
              };
              TempStatStageBoosterModifierType: {
                  description: string;
                  extra: {
                      stage: string;
                      percentage: string;
                  };
              };
              AttackTypeBoosterModifierType: {
                  description: string;
              };
              PokemonLevelIncrementModifierType: {
                  description: string;
              };
              AllPokemonLevelIncrementModifierType: {
                  description: string;
              };
              BaseStatBoosterModifierType: {
                  description: string;
              };
              AllPokemonFullHpRestoreModifierType: {
                  description: string;
              };
              AllPokemonFullReviveModifierType: {
                  description: string;
              };
              MoneyRewardModifierType: {
                  description: string;
                  extra: {
                      small: string;
                      moderate: string;
                      large: string;
                  };
              };
              ExpBoosterModifierType: {
                  description: string;
              };
              PokemonExpBoosterModifierType: {
                  description: string;
              };
              PokemonFriendshipBoosterModifierType: {
                  description: string;
              };
              PokemonMoveAccuracyBoosterModifierType: {
                  description: string;
              };
              PokemonMultiHitModifierType: {
                  description: string;
              };
              TmModifierType: {
                  name: string;
                  description: string;
              };
              TmModifierTypeWithInfo: {
                  name: string;
                  description: string;
              };
              EvolutionItemModifierType: {
                  description: string;
              };
              FormChangeItemModifierType: {
                  description: string;
              };
              FusePokemonModifierType: {
                  description: string;
              };
              TerastallizeModifierType: {
                  name: string;
                  description: string;
              };
              ContactHeldItemTransferChanceModifierType: {
                  description: string;
              };
              TurnHeldItemTransferModifierType: {
                  description: string;
              };
              EnemyAttackStatusEffectChanceModifierType: {
                  description: string;
              };
              EnemyEndureChanceModifierType: {
                  description: string;
              };
              RARE_CANDY: {
                  name: string;
              };
              RARER_CANDY: {
                  name: string;
              };
              MEGA_BRACELET: {
                  name: string;
                  description: string;
              };
              DYNAMAX_BAND: {
                  name: string;
                  description: string;
              };
              TERA_ORB: {
                  name: string;
                  description: string;
              };
              MAP: {
                  name: string;
                  description: string;
              };
              POTION: {
                  name: string;
              };
              SUPER_POTION: {
                  name: string;
              };
              HYPER_POTION: {
                  name: string;
              };
              MAX_POTION: {
                  name: string;
              };
              FULL_RESTORE: {
                  name: string;
              };
              REVIVE: {
                  name: string;
              };
              MAX_REVIVE: {
                  name: string;
              };
              FULL_HEAL: {
                  name: string;
              };
              SACRED_ASH: {
                  name: string;
              };
              REVIVER_SEED: {
                  name: string;
                  description: string;
              };
              WHITE_HERB: {
                  name: string;
                  description: string;
              };
              ETHER: {
                  name: string;
              };
              MAX_ETHER: {
                  name: string;
              };
              ELIXIR: {
                  name: string;
              };
              MAX_ELIXIR: {
                  name: string;
              };
              PP_UP: {
                  name: string;
              };
              PP_MAX: {
                  name: string;
              };
              LURE: {
                  name: string;
              };
              SUPER_LURE: {
                  name: string;
              };
              MAX_LURE: {
                  name: string;
              };
              MEMORY_MUSHROOM: {
                  name: string;
                  description: string;
              };
              EXP_SHARE: {
                  name: string;
                  description: string;
              };
              EXP_BALANCE: {
                  name: string;
                  description: string;
              };
              OVAL_CHARM: {
                  name: string;
                  description: string;
              };
              EXP_CHARM: {
                  name: string;
              };
              SUPER_EXP_CHARM: {
                  name: string;
              };
              GOLDEN_EXP_CHARM: {
                  name: string;
              };
              LUCKY_EGG: {
                  name: string;
              };
              GOLDEN_EGG: {
                  name: string;
              };
              SOOTHE_BELL: {
                  name: string;
              };
              SCOPE_LENS: {
                  name: string;
                  description: string;
              };
              DIRE_HIT: {
                  name: string;
                  extra: {
                      raises: string;
                  };
              };
              LEEK: {
                  name: string;
                  description: string;
              };
              EVIOLITE: {
                  name: string;
                  description: string;
              };
              SOUL_DEW: {
                  name: string;
                  description: string;
              };
              NUGGET: {
                  name: string;
              };
              BIG_NUGGET: {
                  name: string;
              };
              RELIC_GOLD: {
                  name: string;
              };
              AMULET_COIN: {
                  name: string;
                  description: string;
              };
              GOLDEN_PUNCH: {
                  name: string;
                  description: string;
              };
              COIN_CASE: {
                  name: string;
                  description: string;
              };
              LOCK_CAPSULE: {
                  name: string;
                  description: string;
              };
              GRIP_CLAW: {
                  name: string;
              };
              WIDE_LENS: {
                  name: string;
              };
              MULTI_LENS: {
                  name: string;
              };
              HEALING_CHARM: {
                  name: string;
                  description: string;
              };
              CANDY_JAR: {
                  name: string;
                  description: string;
              };
              BERRY_POUCH: {
                  name: string;
                  description: string;
              };
              FOCUS_BAND: {
                  name: string;
                  description: string;
              };
              QUICK_CLAW: {
                  name: string;
                  description: string;
              };
              KINGS_ROCK: {
                  name: string;
                  description: string;
              };
              LEFTOVERS: {
                  name: string;
                  description: string;
              };
              SHELL_BELL: {
                  name: string;
                  description: string;
              };
              TOXIC_ORB: {
                  name: string;
                  description: string;
              };
              FLAME_ORB: {
                  name: string;
                  description: string;
              };
              BATON: {
                  name: string;
                  description: string;
              };
              SHINY_CHARM: {
                  name: string;
                  description: string;
              };
              ABILITY_CHARM: {
                  name: string;
                  description: string;
              };
              IV_SCANNER: {
                  name: string;
                  description: string;
              };
              DNA_SPLICERS: {
                  name: string;
              };
              MINI_BLACK_HOLE: {
                  name: string;
              };
              GOLDEN_POKEBALL: {
                  name: string;
                  description: string;
              };
              ENEMY_DAMAGE_BOOSTER: {
                  name: string;
                  description: string;
              };
              ENEMY_DAMAGE_REDUCTION: {
                  name: string;
                  description: string;
              };
              ENEMY_HEAL: {
                  name: string;
                  description: string;
              };
              ENEMY_ATTACK_POISON_CHANCE: {
                  name: string;
              };
              ENEMY_ATTACK_PARALYZE_CHANCE: {
                  name: string;
              };
              ENEMY_ATTACK_BURN_CHANCE: {
                  name: string;
              };
              ENEMY_STATUS_EFFECT_HEAL_CHANCE: {
                  name: string;
                  description: string;
              };
              ENEMY_ENDURE_CHANCE: {
                  name: string;
              };
              ENEMY_FUSED_CHANCE: {
                  name: string;
                  description: string;
              };
          };
          SpeciesBoosterItem: {
              LIGHT_BALL: {
                  name: string;
                  description: string;
              };
              THICK_CLUB: {
                  name: string;
                  description: string;
              };
              METAL_POWDER: {
                  name: string;
                  description: string;
              };
              QUICK_POWDER: {
                  name: string;
                  description: string;
              };
          };
          TempStatStageBoosterItem: {
              x_attack: string;
              x_defense: string;
              x_sp_atk: string;
              x_sp_def: string;
              x_speed: string;
              x_accuracy: string;
          };
          AttackTypeBoosterItem: {
              silk_scarf: string;
              black_belt: string;
              sharp_beak: string;
              poison_barb: string;
              soft_sand: string;
              hard_stone: string;
              silver_powder: string;
              spell_tag: string;
              metal_coat: string;
              charcoal: string;
              mystic_water: string;
              miracle_seed: string;
              magnet: string;
              twisted_spoon: string;
              never_melt_ice: string;
              dragon_fang: string;
              black_glasses: string;
              fairy_feather: string;
          };
          BaseStatBoosterItem: {
              hp_up: string;
              protein: string;
              iron: string;
              calcium: string;
              zinc: string;
              carbos: string;
          };
          EvolutionItem: {
              NONE: string;
              LINKING_CORD: string;
              SUN_STONE: string;
              MOON_STONE: string;
              LEAF_STONE: string;
              FIRE_STONE: string;
              WATER_STONE: string;
              THUNDER_STONE: string;
              ICE_STONE: string;
              DUSK_STONE: string;
              DAWN_STONE: string;
              SHINY_STONE: string;
              CRACKED_POT: string;
              SWEET_APPLE: string;
              TART_APPLE: string;
              STRAWBERRY_SWEET: string;
              UNREMARKABLE_TEACUP: string;
              CHIPPED_POT: string;
              BLACK_AUGURITE: string;
              GALARICA_CUFF: string;
              GALARICA_WREATH: string;
              PEAT_BLOCK: string;
              AUSPICIOUS_ARMOR: string;
              MALICIOUS_ARMOR: string;
              MASTERPIECE_TEACUP: string;
              METAL_ALLOY: string;
              SCROLL_OF_DARKNESS: string;
              SCROLL_OF_WATERS: string;
              SYRUPY_APPLE: string;
          };
          FormChangeItem: {
              NONE: string;
              ABOMASITE: string;
              ABSOLITE: string;
              AERODACTYLITE: string;
              AGGRONITE: string;
              ALAKAZITE: string;
              ALTARIANITE: string;
              AMPHAROSITE: string;
              AUDINITE: string;
              BANETTITE: string;
              BEEDRILLITE: string;
              BLASTOISINITE: string;
              BLAZIKENITE: string;
              CAMERUPTITE: string;
              CHARIZARDITE_X: string;
              CHARIZARDITE_Y: string;
              DIANCITE: string;
              GALLADITE: string;
              GARCHOMPITE: string;
              GARDEVOIRITE: string;
              GENGARITE: string;
              GLALITITE: string;
              GYARADOSITE: string;
              HERACRONITE: string;
              HOUNDOOMINITE: string;
              KANGASKHANITE: string;
              LATIASITE: string;
              LATIOSITE: string;
              LOPUNNITE: string;
              LUCARIONITE: string;
              MANECTITE: string;
              MAWILITE: string;
              MEDICHAMITE: string;
              METAGROSSITE: string;
              MEWTWONITE_X: string;
              MEWTWONITE_Y: string;
              PIDGEOTITE: string;
              PINSIRITE: string;
              RAYQUAZITE: string;
              SABLENITE: string;
              SALAMENCITE: string;
              SCEPTILITE: string;
              SCIZORITE: string;
              SHARPEDONITE: string;
              SLOWBRONITE: string;
              STEELIXITE: string;
              SWAMPERTITE: string;
              TYRANITARITE: string;
              VENUSAURITE: string;
              BLUE_ORB: string;
              RED_ORB: string;
              SHARP_METEORITE: string;
              HARD_METEORITE: string;
              SMOOTH_METEORITE: string;
              ADAMANT_CRYSTAL: string;
              LUSTROUS_GLOBE: string;
              GRISEOUS_CORE: string;
              REVEAL_GLASS: string;
              GRACIDEA: string;
              MAX_MUSHROOMS: string;
              DARK_STONE: string;
              LIGHT_STONE: string;
              PRISON_BOTTLE: string;
              N_LUNARIZER: string;
              N_SOLARIZER: string;
              RUSTED_SWORD: string;
              RUSTED_SHIELD: string;
              ICY_REINS_OF_UNITY: string;
              SHADOW_REINS_OF_UNITY: string;
              WELLSPRING_MASK: string;
              HEARTHFLAME_MASK: string;
              CORNERSTONE_MASK: string;
              SHOCK_DRIVE: string;
              BURN_DRIVE: string;
              CHILL_DRIVE: string;
              DOUSE_DRIVE: string;
              ULTRANECROZIUM_Z: string;
              FIST_PLATE: string;
              SKY_PLATE: string;
              TOXIC_PLATE: string;
              EARTH_PLATE: string;
              STONE_PLATE: string;
              INSECT_PLATE: string;
              SPOOKY_PLATE: string;
              IRON_PLATE: string;
              FLAME_PLATE: string;
              SPLASH_PLATE: string;
              MEADOW_PLATE: string;
              ZAP_PLATE: string;
              MIND_PLATE: string;
              ICICLE_PLATE: string;
              DRACO_PLATE: string;
              DREAD_PLATE: string;
              PIXIE_PLATE: string;
              BLANK_PLATE: string;
              LEGEND_PLATE: string;
              FIGHTING_MEMORY: string;
              FLYING_MEMORY: string;
              POISON_MEMORY: string;
              GROUND_MEMORY: string;
              ROCK_MEMORY: string;
              BUG_MEMORY: string;
              GHOST_MEMORY: string;
              STEEL_MEMORY: string;
              FIRE_MEMORY: string;
              WATER_MEMORY: string;
              GRASS_MEMORY: string;
              ELECTRIC_MEMORY: string;
              PSYCHIC_MEMORY: string;
              ICE_MEMORY: string;
              DRAGON_MEMORY: string;
              DARK_MEMORY: string;
              FAIRY_MEMORY: string;
              NORMAL_MEMORY: string;
          };
      };
      move: {
          pound: {
              name: string;
              effect: string;
          };
          karateChop: {
              name: string;
              effect: string;
          };
          doubleSlap: {
              name: string;
              effect: string;
          };
          cometPunch: {
              name: string;
              effect: string;
          };
          megaPunch: {
              name: string;
              effect: string;
          };
          payDay: {
              name: string;
              effect: string;
          };
          firePunch: {
              name: string;
              effect: string;
          };
          icePunch: {
              name: string;
              effect: string;
          };
          thunderPunch: {
              name: string;
              effect: string;
          };
          scratch: {
              name: string;
              effect: string;
          };
          viseGrip: {
              name: string;
              effect: string;
          };
          guillotine: {
              name: string;
              effect: string;
          };
          razorWind: {
              name: string;
              effect: string;
          };
          swordsDance: {
              name: string;
              effect: string;
          };
          cut: {
              name: string;
              effect: string;
          };
          gust: {
              name: string;
              effect: string;
          };
          wingAttack: {
              name: string;
              effect: string;
          };
          whirlwind: {
              name: string;
              effect: string;
          };
          fly: {
              name: string;
              effect: string;
          };
          bind: {
              name: string;
              effect: string;
          };
          slam: {
              name: string;
              effect: string;
          };
          vineWhip: {
              name: string;
              effect: string;
          };
          stomp: {
              name: string;
              effect: string;
          };
          doubleKick: {
              name: string;
              effect: string;
          };
          megaKick: {
              name: string;
              effect: string;
          };
          jumpKick: {
              name: string;
              effect: string;
          };
          rollingKick: {
              name: string;
              effect: string;
          };
          sandAttack: {
              name: string;
              effect: string;
          };
          headbutt: {
              name: string;
              effect: string;
          };
          hornAttack: {
              name: string;
              effect: string;
          };
          furyAttack: {
              name: string;
              effect: string;
          };
          hornDrill: {
              name: string;
              effect: string;
          };
          tackle: {
              name: string;
              effect: string;
          };
          bodySlam: {
              name: string;
              effect: string;
          };
          wrap: {
              name: string;
              effect: string;
          };
          takeDown: {
              name: string;
              effect: string;
          };
          thrash: {
              name: string;
              effect: string;
          };
          doubleEdge: {
              name: string;
              effect: string;
          };
          tailWhip: {
              name: string;
              effect: string;
          };
          poisonSting: {
              name: string;
              effect: string;
          };
          twineedle: {
              name: string;
              effect: string;
          };
          pinMissile: {
              name: string;
              effect: string;
          };
          leer: {
              name: string;
              effect: string;
          };
          bite: {
              name: string;
              effect: string;
          };
          growl: {
              name: string;
              effect: string;
          };
          roar: {
              name: string;
              effect: string;
          };
          sing: {
              name: string;
              effect: string;
          };
          supersonic: {
              name: string;
              effect: string;
          };
          sonicBoom: {
              name: string;
              effect: string;
          };
          disable: {
              name: string;
              effect: string;
          };
          acid: {
              name: string;
              effect: string;
          };
          ember: {
              name: string;
              effect: string;
          };
          flamethrower: {
              name: string;
              effect: string;
          };
          mist: {
              name: string;
              effect: string;
          };
          waterGun: {
              name: string;
              effect: string;
          };
          hydroPump: {
              name: string;
              effect: string;
          };
          surf: {
              name: string;
              effect: string;
          };
          iceBeam: {
              name: string;
              effect: string;
          };
          blizzard: {
              name: string;
              effect: string;
          };
          psybeam: {
              name: string;
              effect: string;
          };
          bubbleBeam: {
              name: string;
              effect: string;
          };
          auroraBeam: {
              name: string;
              effect: string;
          };
          hyperBeam: {
              name: string;
              effect: string;
          };
          peck: {
              name: string;
              effect: string;
          };
          drillPeck: {
              name: string;
              effect: string;
          };
          submission: {
              name: string;
              effect: string;
          };
          lowKick: {
              name: string;
              effect: string;
          };
          counter: {
              name: string;
              effect: string;
          };
          seismicToss: {
              name: string;
              effect: string;
          };
          strength: {
              name: string;
              effect: string;
          };
          absorb: {
              name: string;
              effect: string;
          };
          megaDrain: {
              name: string;
              effect: string;
          };
          leechSeed: {
              name: string;
              effect: string;
          };
          growth: {
              name: string;
              effect: string;
          };
          razorLeaf: {
              name: string;
              effect: string;
          };
          solarBeam: {
              name: string;
              effect: string;
          };
          poisonPowder: {
              name: string;
              effect: string;
          };
          stunSpore: {
              name: string;
              effect: string;
          };
          sleepPowder: {
              name: string;
              effect: string;
          };
          petalDance: {
              name: string;
              effect: string;
          };
          stringShot: {
              name: string;
              effect: string;
          };
          dragonRage: {
              name: string;
              effect: string;
          };
          fireSpin: {
              name: string;
              effect: string;
          };
          thunderShock: {
              name: string;
              effect: string;
          };
          thunderbolt: {
              name: string;
              effect: string;
          };
          thunderWave: {
              name: string;
              effect: string;
          };
          thunder: {
              name: string;
              effect: string;
          };
          rockThrow: {
              name: string;
              effect: string;
          };
          earthquake: {
              name: string;
              effect: string;
          };
          fissure: {
              name: string;
              effect: string;
          };
          dig: {
              name: string;
              effect: string;
          };
          toxic: {
              name: string;
              effect: string;
          };
          confusion: {
              name: string;
              effect: string;
          };
          psychic: {
              name: string;
              effect: string;
          };
          hypnosis: {
              name: string;
              effect: string;
          };
          meditate: {
              name: string;
              effect: string;
          };
          agility: {
              name: string;
              effect: string;
          };
          quickAttack: {
              name: string;
              effect: string;
          };
          rage: {
              name: string;
              effect: string;
          };
          teleport: {
              name: string;
              effect: string;
          };
          nightShade: {
              name: string;
              effect: string;
          };
          mimic: {
              name: string;
              effect: string;
          };
          screech: {
              name: string;
              effect: string;
          };
          doubleTeam: {
              name: string;
              effect: string;
          };
          recover: {
              name: string;
              effect: string;
          };
          harden: {
              name: string;
              effect: string;
          };
          minimize: {
              name: string;
              effect: string;
          };
          smokescreen: {
              name: string;
              effect: string;
          };
          confuseRay: {
              name: string;
              effect: string;
          };
          withdraw: {
              name: string;
              effect: string;
          };
          defenseCurl: {
              name: string;
              effect: string;
          };
          barrier: {
              name: string;
              effect: string;
          };
          lightScreen: {
              name: string;
              effect: string;
          };
          haze: {
              name: string;
              effect: string;
          };
          reflect: {
              name: string;
              effect: string;
          };
          focusEnergy: {
              name: string;
              effect: string;
          };
          bide: {
              name: string;
              effect: string;
          };
          metronome: {
              name: string;
              effect: string;
          };
          mirrorMove: {
              name: string;
              effect: string;
          };
          selfDestruct: {
              name: string;
              effect: string;
          };
          eggBomb: {
              name: string;
              effect: string;
          };
          lick: {
              name: string;
              effect: string;
          };
          smog: {
              name: string;
              effect: string;
          };
          sludge: {
              name: string;
              effect: string;
          };
          boneClub: {
              name: string;
              effect: string;
          };
          fireBlast: {
              name: string;
              effect: string;
          };
          waterfall: {
              name: string;
              effect: string;
          };
          clamp: {
              name: string;
              effect: string;
          };
          swift: {
              name: string;
              effect: string;
          };
          skullBash: {
              name: string;
              effect: string;
          };
          spikeCannon: {
              name: string;
              effect: string;
          };
          constrict: {
              name: string;
              effect: string;
          };
          amnesia: {
              name: string;
              effect: string;
          };
          kinesis: {
              name: string;
              effect: string;
          };
          softBoiled: {
              name: string;
              effect: string;
          };
          highJumpKick: {
              name: string;
              effect: string;
          };
          glare: {
              name: string;
              effect: string;
          };
          dreamEater: {
              name: string;
              effect: string;
          };
          poisonGas: {
              name: string;
              effect: string;
          };
          barrage: {
              name: string;
              effect: string;
          };
          leechLife: {
              name: string;
              effect: string;
          };
          lovelyKiss: {
              name: string;
              effect: string;
          };
          skyAttack: {
              name: string;
              effect: string;
          };
          transform: {
              name: string;
              effect: string;
          };
          bubble: {
              name: string;
              effect: string;
          };
          dizzyPunch: {
              name: string;
              effect: string;
          };
          spore: {
              name: string;
              effect: string;
          };
          flash: {
              name: string;
              effect: string;
          };
          psywave: {
              name: string;
              effect: string;
          };
          splash: {
              name: string;
              effect: string;
          };
          acidArmor: {
              name: string;
              effect: string;
          };
          crabhammer: {
              name: string;
              effect: string;
          };
          explosion: {
              name: string;
              effect: string;
          };
          furySwipes: {
              name: string;
              effect: string;
          };
          bonemerang: {
              name: string;
              effect: string;
          };
          rest: {
              name: string;
              effect: string;
          };
          rockSlide: {
              name: string;
              effect: string;
          };
          hyperFang: {
              name: string;
              effect: string;
          };
          sharpen: {
              name: string;
              effect: string;
          };
          conversion: {
              name: string;
              effect: string;
          };
          triAttack: {
              name: string;
              effect: string;
          };
          superFang: {
              name: string;
              effect: string;
          };
          slash: {
              name: string;
              effect: string;
          };
          substitute: {
              name: string;
              effect: string;
          };
          struggle: {
              name: string;
              effect: string;
          };
          sketch: {
              name: string;
              effect: string;
          };
          tripleKick: {
              name: string;
              effect: string;
          };
          thief: {
              name: string;
              effect: string;
          };
          spiderWeb: {
              name: string;
              effect: string;
          };
          mindReader: {
              name: string;
              effect: string;
          };
          nightmare: {
              name: string;
              effect: string;
          };
          flameWheel: {
              name: string;
              effect: string;
          };
          snore: {
              name: string;
              effect: string;
          };
          curse: {
              name: string;
              effect: string;
          };
          flail: {
              name: string;
              effect: string;
          };
          conversion2: {
              name: string;
              effect: string;
          };
          aeroblast: {
              name: string;
              effect: string;
          };
          cottonSpore: {
              name: string;
              effect: string;
          };
          reversal: {
              name: string;
              effect: string;
          };
          spite: {
              name: string;
              effect: string;
          };
          powderSnow: {
              name: string;
              effect: string;
          };
          protect: {
              name: string;
              effect: string;
          };
          machPunch: {
              name: string;
              effect: string;
          };
          scaryFace: {
              name: string;
              effect: string;
          };
          feintAttack: {
              name: string;
              effect: string;
          };
          sweetKiss: {
              name: string;
              effect: string;
          };
          bellyDrum: {
              name: string;
              effect: string;
          };
          sludgeBomb: {
              name: string;
              effect: string;
          };
          mudSlap: {
              name: string;
              effect: string;
          };
          octazooka: {
              name: string;
              effect: string;
          };
          spikes: {
              name: string;
              effect: string;
          };
          zapCannon: {
              name: string;
              effect: string;
          };
          foresight: {
              name: string;
              effect: string;
          };
          destinyBond: {
              name: string;
              effect: string;
          };
          perishSong: {
              name: string;
              effect: string;
          };
          icyWind: {
              name: string;
              effect: string;
          };
          detect: {
              name: string;
              effect: string;
          };
          boneRush: {
              name: string;
              effect: string;
          };
          lockOn: {
              name: string;
              effect: string;
          };
          outrage: {
              name: string;
              effect: string;
          };
          sandstorm: {
              name: string;
              effect: string;
          };
          gigaDrain: {
              name: string;
              effect: string;
          };
          endure: {
              name: string;
              effect: string;
          };
          charm: {
              name: string;
              effect: string;
          };
          rollout: {
              name: string;
              effect: string;
          };
          falseSwipe: {
              name: string;
              effect: string;
          };
          swagger: {
              name: string;
              effect: string;
          };
          milkDrink: {
              name: string;
              effect: string;
          };
          spark: {
              name: string;
              effect: string;
          };
          furyCutter: {
              name: string;
              effect: string;
          };
          steelWing: {
              name: string;
              effect: string;
          };
          meanLook: {
              name: string;
              effect: string;
          };
          attract: {
              name: string;
              effect: string;
          };
          sleepTalk: {
              name: string;
              effect: string;
          };
          healBell: {
              name: string;
              effect: string;
          };
          return: {
              name: string;
              effect: string;
          };
          present: {
              name: string;
              effect: string;
          };
          frustration: {
              name: string;
              effect: string;
          };
          safeguard: {
              name: string;
              effect: string;
          };
          painSplit: {
              name: string;
              effect: string;
          };
          sacredFire: {
              name: string;
              effect: string;
          };
          magnitude: {
              name: string;
              effect: string;
          };
          dynamicPunch: {
              name: string;
              effect: string;
          };
          megahorn: {
              name: string;
              effect: string;
          };
          dragonBreath: {
              name: string;
              effect: string;
          };
          batonPass: {
              name: string;
              effect: string;
          };
          encore: {
              name: string;
              effect: string;
          };
          pursuit: {
              name: string;
              effect: string;
          };
          rapidSpin: {
              name: string;
              effect: string;
          };
          sweetScent: {
              name: string;
              effect: string;
          };
          ironTail: {
              name: string;
              effect: string;
          };
          metalClaw: {
              name: string;
              effect: string;
          };
          vitalThrow: {
              name: string;
              effect: string;
          };
          morningSun: {
              name: string;
              effect: string;
          };
          synthesis: {
              name: string;
              effect: string;
          };
          moonlight: {
              name: string;
              effect: string;
          };
          hiddenPower: {
              name: string;
              effect: string;
          };
          crossChop: {
              name: string;
              effect: string;
          };
          twister: {
              name: string;
              effect: string;
          };
          rainDance: {
              name: string;
              effect: string;
          };
          sunnyDay: {
              name: string;
              effect: string;
          };
          crunch: {
              name: string;
              effect: string;
          };
          mirrorCoat: {
              name: string;
              effect: string;
          };
          psychUp: {
              name: string;
              effect: string;
          };
          extremeSpeed: {
              name: string;
              effect: string;
          };
          ancientPower: {
              name: string;
              effect: string;
          };
          shadowBall: {
              name: string;
              effect: string;
          };
          futureSight: {
              name: string;
              effect: string;
          };
          rockSmash: {
              name: string;
              effect: string;
          };
          whirlpool: {
              name: string;
              effect: string;
          };
          beatUp: {
              name: string;
              effect: string;
          };
          fakeOut: {
              name: string;
              effect: string;
          };
          uproar: {
              name: string;
              effect: string;
          };
          stockpile: {
              name: string;
              effect: string;
          };
          spitUp: {
              name: string;
              effect: string;
          };
          swallow: {
              name: string;
              effect: string;
          };
          heatWave: {
              name: string;
              effect: string;
          };
          hail: {
              name: string;
              effect: string;
          };
          torment: {
              name: string;
              effect: string;
          };
          flatter: {
              name: string;
              effect: string;
          };
          willOWisp: {
              name: string;
              effect: string;
          };
          memento: {
              name: string;
              effect: string;
          };
          facade: {
              name: string;
              effect: string;
          };
          focusPunch: {
              name: string;
              effect: string;
          };
          smellingSalts: {
              name: string;
              effect: string;
          };
          followMe: {
              name: string;
              effect: string;
          };
          naturePower: {
              name: string;
              effect: string;
          };
          charge: {
              name: string;
              effect: string;
          };
          taunt: {
              name: string;
              effect: string;
          };
          helpingHand: {
              name: string;
              effect: string;
          };
          trick: {
              name: string;
              effect: string;
          };
          rolePlay: {
              name: string;
              effect: string;
          };
          wish: {
              name: string;
              effect: string;
          };
          assist: {
              name: string;
              effect: string;
          };
          ingrain: {
              name: string;
              effect: string;
          };
          superpower: {
              name: string;
              effect: string;
          };
          magicCoat: {
              name: string;
              effect: string;
          };
          recycle: {
              name: string;
              effect: string;
          };
          revenge: {
              name: string;
              effect: string;
          };
          brickBreak: {
              name: string;
              effect: string;
          };
          yawn: {
              name: string;
              effect: string;
          };
          knockOff: {
              name: string;
              effect: string;
          };
          endeavor: {
              name: string;
              effect: string;
          };
          eruption: {
              name: string;
              effect: string;
          };
          skillSwap: {
              name: string;
              effect: string;
          };
          imprison: {
              name: string;
              effect: string;
          };
          refresh: {
              name: string;
              effect: string;
          };
          grudge: {
              name: string;
              effect: string;
          };
          snatch: {
              name: string;
              effect: string;
          };
          secretPower: {
              name: string;
              effect: string;
          };
          dive: {
              name: string;
              effect: string;
          };
          armThrust: {
              name: string;
              effect: string;
          };
          camouflage: {
              name: string;
              effect: string;
          };
          tailGlow: {
              name: string;
              effect: string;
          };
          lusterPurge: {
              name: string;
              effect: string;
          };
          mistBall: {
              name: string;
              effect: string;
          };
          featherDance: {
              name: string;
              effect: string;
          };
          teeterDance: {
              name: string;
              effect: string;
          };
          blazeKick: {
              name: string;
              effect: string;
          };
          mudSport: {
              name: string;
              effect: string;
          };
          iceBall: {
              name: string;
              effect: string;
          };
          needleArm: {
              name: string;
              effect: string;
          };
          slackOff: {
              name: string;
              effect: string;
          };
          hyperVoice: {
              name: string;
              effect: string;
          };
          poisonFang: {
              name: string;
              effect: string;
          };
          crushClaw: {
              name: string;
              effect: string;
          };
          blastBurn: {
              name: string;
              effect: string;
          };
          hydroCannon: {
              name: string;
              effect: string;
          };
          meteorMash: {
              name: string;
              effect: string;
          };
          astonish: {
              name: string;
              effect: string;
          };
          weatherBall: {
              name: string;
              effect: string;
          };
          aromatherapy: {
              name: string;
              effect: string;
          };
          fakeTears: {
              name: string;
              effect: string;
          };
          airCutter: {
              name: string;
              effect: string;
          };
          overheat: {
              name: string;
              effect: string;
          };
          odorSleuth: {
              name: string;
              effect: string;
          };
          rockTomb: {
              name: string;
              effect: string;
          };
          silverWind: {
              name: string;
              effect: string;
          };
          metalSound: {
              name: string;
              effect: string;
          };
          grassWhistle: {
              name: string;
              effect: string;
          };
          tickle: {
              name: string;
              effect: string;
          };
          cosmicPower: {
              name: string;
              effect: string;
          };
          waterSpout: {
              name: string;
              effect: string;
          };
          signalBeam: {
              name: string;
              effect: string;
          };
          shadowPunch: {
              name: string;
              effect: string;
          };
          extrasensory: {
              name: string;
              effect: string;
          };
          skyUppercut: {
              name: string;
              effect: string;
          };
          sandTomb: {
              name: string;
              effect: string;
          };
          sheerCold: {
              name: string;
              effect: string;
          };
          muddyWater: {
              name: string;
              effect: string;
          };
          bulletSeed: {
              name: string;
              effect: string;
          };
          aerialAce: {
              name: string;
              effect: string;
          };
          icicleSpear: {
              name: string;
              effect: string;
          };
          ironDefense: {
              name: string;
              effect: string;
          };
          block: {
              name: string;
              effect: string;
          };
          howl: {
              name: string;
              effect: string;
          };
          dragonClaw: {
              name: string;
              effect: string;
          };
          frenzyPlant: {
              name: string;
              effect: string;
          };
          bulkUp: {
              name: string;
              effect: string;
          };
          bounce: {
              name: string;
              effect: string;
          };
          mudShot: {
              name: string;
              effect: string;
          };
          poisonTail: {
              name: string;
              effect: string;
          };
          covet: {
              name: string;
              effect: string;
          };
          voltTackle: {
              name: string;
              effect: string;
          };
          magicalLeaf: {
              name: string;
              effect: string;
          };
          waterSport: {
              name: string;
              effect: string;
          };
          calmMind: {
              name: string;
              effect: string;
          };
          leafBlade: {
              name: string;
              effect: string;
          };
          dragonDance: {
              name: string;
              effect: string;
          };
          rockBlast: {
              name: string;
              effect: string;
          };
          shockWave: {
              name: string;
              effect: string;
          };
          waterPulse: {
              name: string;
              effect: string;
          };
          doomDesire: {
              name: string;
              effect: string;
          };
          psychoBoost: {
              name: string;
              effect: string;
          };
          roost: {
              name: string;
              effect: string;
          };
          gravity: {
              name: string;
              effect: string;
          };
          miracleEye: {
              name: string;
              effect: string;
          };
          wakeUpSlap: {
              name: string;
              effect: string;
          };
          hammerArm: {
              name: string;
              effect: string;
          };
          gyroBall: {
              name: string;
              effect: string;
          };
          healingWish: {
              name: string;
              effect: string;
          };
          brine: {
              name: string;
              effect: string;
          };
          naturalGift: {
              name: string;
              effect: string;
          };
          feint: {
              name: string;
              effect: string;
          };
          pluck: {
              name: string;
              effect: string;
          };
          tailwind: {
              name: string;
              effect: string;
          };
          acupressure: {
              name: string;
              effect: string;
          };
          metalBurst: {
              name: string;
              effect: string;
          };
          uTurn: {
              name: string;
              effect: string;
          };
          closeCombat: {
              name: string;
              effect: string;
          };
          payback: {
              name: string;
              effect: string;
          };
          assurance: {
              name: string;
              effect: string;
          };
          embargo: {
              name: string;
              effect: string;
          };
          fling: {
              name: string;
              effect: string;
          };
          psychoShift: {
              name: string;
              effect: string;
          };
          trumpCard: {
              name: string;
              effect: string;
          };
          healBlock: {
              name: string;
              effect: string;
          };
          wringOut: {
              name: string;
              effect: string;
          };
          powerTrick: {
              name: string;
              effect: string;
          };
          gastroAcid: {
              name: string;
              effect: string;
          };
          luckyChant: {
              name: string;
              effect: string;
          };
          meFirst: {
              name: string;
              effect: string;
          };
          copycat: {
              name: string;
              effect: string;
          };
          powerSwap: {
              name: string;
              effect: string;
          };
          guardSwap: {
              name: string;
              effect: string;
          };
          punishment: {
              name: string;
              effect: string;
          };
          lastResort: {
              name: string;
              effect: string;
          };
          worrySeed: {
              name: string;
              effect: string;
          };
          suckerPunch: {
              name: string;
              effect: string;
          };
          toxicSpikes: {
              name: string;
              effect: string;
          };
          heartSwap: {
              name: string;
              effect: string;
          };
          aquaRing: {
              name: string;
              effect: string;
          };
          magnetRise: {
              name: string;
              effect: string;
          };
          flareBlitz: {
              name: string;
              effect: string;
          };
          forcePalm: {
              name: string;
              effect: string;
          };
          auraSphere: {
              name: string;
              effect: string;
          };
          rockPolish: {
              name: string;
              effect: string;
          };
          poisonJab: {
              name: string;
              effect: string;
          };
          darkPulse: {
              name: string;
              effect: string;
          };
          nightSlash: {
              name: string;
              effect: string;
          };
          aquaTail: {
              name: string;
              effect: string;
          };
          seedBomb: {
              name: string;
              effect: string;
          };
          airSlash: {
              name: string;
              effect: string;
          };
          xScissor: {
              name: string;
              effect: string;
          };
          bugBuzz: {
              name: string;
              effect: string;
          };
          dragonPulse: {
              name: string;
              effect: string;
          };
          dragonRush: {
              name: string;
              effect: string;
          };
          powerGem: {
              name: string;
              effect: string;
          };
          drainPunch: {
              name: string;
              effect: string;
          };
          vacuumWave: {
              name: string;
              effect: string;
          };
          focusBlast: {
              name: string;
              effect: string;
          };
          energyBall: {
              name: string;
              effect: string;
          };
          braveBird: {
              name: string;
              effect: string;
          };
          earthPower: {
              name: string;
              effect: string;
          };
          switcheroo: {
              name: string;
              effect: string;
          };
          gigaImpact: {
              name: string;
              effect: string;
          };
          nastyPlot: {
              name: string;
              effect: string;
          };
          bulletPunch: {
              name: string;
              effect: string;
          };
          avalanche: {
              name: string;
              effect: string;
          };
          iceShard: {
              name: string;
              effect: string;
          };
          shadowClaw: {
              name: string;
              effect: string;
          };
          thunderFang: {
              name: string;
              effect: string;
          };
          iceFang: {
              name: string;
              effect: string;
          };
          fireFang: {
              name: string;
              effect: string;
          };
          shadowSneak: {
              name: string;
              effect: string;
          };
          mudBomb: {
              name: string;
              effect: string;
          };
          psychoCut: {
              name: string;
              effect: string;
          };
          zenHeadbutt: {
              name: string;
              effect: string;
          };
          mirrorShot: {
              name: string;
              effect: string;
          };
          flashCannon: {
              name: string;
              effect: string;
          };
          rockClimb: {
              name: string;
              effect: string;
          };
          defog: {
              name: string;
              effect: string;
          };
          trickRoom: {
              name: string;
              effect: string;
          };
          dracoMeteor: {
              name: string;
              effect: string;
          };
          discharge: {
              name: string;
              effect: string;
          };
          lavaPlume: {
              name: string;
              effect: string;
          };
          leafStorm: {
              name: string;
              effect: string;
          };
          powerWhip: {
              name: string;
              effect: string;
          };
          rockWrecker: {
              name: string;
              effect: string;
          };
          crossPoison: {
              name: string;
              effect: string;
          };
          gunkShot: {
              name: string;
              effect: string;
          };
          ironHead: {
              name: string;
              effect: string;
          };
          magnetBomb: {
              name: string;
              effect: string;
          };
          stoneEdge: {
              name: string;
              effect: string;
          };
          captivate: {
              name: string;
              effect: string;
          };
          stealthRock: {
              name: string;
              effect: string;
          };
          grassKnot: {
              name: string;
              effect: string;
          };
          chatter: {
              name: string;
              effect: string;
          };
          judgment: {
              name: string;
              effect: string;
          };
          bugBite: {
              name: string;
              effect: string;
          };
          chargeBeam: {
              name: string;
              effect: string;
          };
          woodHammer: {
              name: string;
              effect: string;
          };
          aquaJet: {
              name: string;
              effect: string;
          };
          attackOrder: {
              name: string;
              effect: string;
          };
          defendOrder: {
              name: string;
              effect: string;
          };
          healOrder: {
              name: string;
              effect: string;
          };
          headSmash: {
              name: string;
              effect: string;
          };
          doubleHit: {
              name: string;
              effect: string;
          };
          roarOfTime: {
              name: string;
              effect: string;
          };
          spacialRend: {
              name: string;
              effect: string;
          };
          lunarDance: {
              name: string;
              effect: string;
          };
          crushGrip: {
              name: string;
              effect: string;
          };
          magmaStorm: {
              name: string;
              effect: string;
          };
          darkVoid: {
              name: string;
              effect: string;
          };
          seedFlare: {
              name: string;
              effect: string;
          };
          ominousWind: {
              name: string;
              effect: string;
          };
          shadowForce: {
              name: string;
              effect: string;
          };
          honeClaws: {
              name: string;
              effect: string;
          };
          wideGuard: {
              name: string;
              effect: string;
          };
          guardSplit: {
              name: string;
              effect: string;
          };
          powerSplit: {
              name: string;
              effect: string;
          };
          wonderRoom: {
              name: string;
              effect: string;
          };
          psyshock: {
              name: string;
              effect: string;
          };
          venoshock: {
              name: string;
              effect: string;
          };
          autotomize: {
              name: string;
              effect: string;
          };
          ragePowder: {
              name: string;
              effect: string;
          };
          telekinesis: {
              name: string;
              effect: string;
          };
          magicRoom: {
              name: string;
              effect: string;
          };
          smackDown: {
              name: string;
              effect: string;
          };
          stormThrow: {
              name: string;
              effect: string;
          };
          flameBurst: {
              name: string;
              effect: string;
          };
          sludgeWave: {
              name: string;
              effect: string;
          };
          quiverDance: {
              name: string;
              effect: string;
          };
          heavySlam: {
              name: string;
              effect: string;
          };
          synchronoise: {
              name: string;
              effect: string;
          };
          electroBall: {
              name: string;
              effect: string;
          };
          soak: {
              name: string;
              effect: string;
          };
          flameCharge: {
              name: string;
              effect: string;
          };
          coil: {
              name: string;
              effect: string;
          };
          lowSweep: {
              name: string;
              effect: string;
          };
          acidSpray: {
              name: string;
              effect: string;
          };
          foulPlay: {
              name: string;
              effect: string;
          };
          simpleBeam: {
              name: string;
              effect: string;
          };
          entrainment: {
              name: string;
              effect: string;
          };
          afterYou: {
              name: string;
              effect: string;
          };
          round: {
              name: string;
              effect: string;
          };
          echoedVoice: {
              name: string;
              effect: string;
          };
          chipAway: {
              name: string;
              effect: string;
          };
          clearSmog: {
              name: string;
              effect: string;
          };
          storedPower: {
              name: string;
              effect: string;
          };
          quickGuard: {
              name: string;
              effect: string;
          };
          allySwitch: {
              name: string;
              effect: string;
          };
          scald: {
              name: string;
              effect: string;
          };
          shellSmash: {
              name: string;
              effect: string;
          };
          healPulse: {
              name: string;
              effect: string;
          };
          hex: {
              name: string;
              effect: string;
          };
          skyDrop: {
              name: string;
              effect: string;
          };
          shiftGear: {
              name: string;
              effect: string;
          };
          circleThrow: {
              name: string;
              effect: string;
          };
          incinerate: {
              name: string;
              effect: string;
          };
          quash: {
              name: string;
              effect: string;
          };
          acrobatics: {
              name: string;
              effect: string;
          };
          reflectType: {
              name: string;
              effect: string;
          };
          retaliate: {
              name: string;
              effect: string;
          };
          finalGambit: {
              name: string;
              effect: string;
          };
          bestow: {
              name: string;
              effect: string;
          };
          inferno: {
              name: string;
              effect: string;
          };
          waterPledge: {
              name: string;
              effect: string;
          };
          firePledge: {
              name: string;
              effect: string;
          };
          grassPledge: {
              name: string;
              effect: string;
          };
          voltSwitch: {
              name: string;
              effect: string;
          };
          struggleBug: {
              name: string;
              effect: string;
          };
          bulldoze: {
              name: string;
              effect: string;
          };
          frostBreath: {
              name: string;
              effect: string;
          };
          dragonTail: {
              name: string;
              effect: string;
          };
          workUp: {
              name: string;
              effect: string;
          };
          electroweb: {
              name: string;
              effect: string;
          };
          wildCharge: {
              name: string;
              effect: string;
          };
          drillRun: {
              name: string;
              effect: string;
          };
          dualChop: {
              name: string;
              effect: string;
          };
          heartStamp: {
              name: string;
              effect: string;
          };
          hornLeech: {
              name: string;
              effect: string;
          };
          sacredSword: {
              name: string;
              effect: string;
          };
          razorShell: {
              name: string;
              effect: string;
          };
          heatCrash: {
              name: string;
              effect: string;
          };
          leafTornado: {
              name: string;
              effect: string;
          };
          steamroller: {
              name: string;
              effect: string;
          };
          cottonGuard: {
              name: string;
              effect: string;
          };
          nightDaze: {
              name: string;
              effect: string;
          };
          psystrike: {
              name: string;
              effect: string;
          };
          tailSlap: {
              name: string;
              effect: string;
          };
          hurricane: {
              name: string;
              effect: string;
          };
          headCharge: {
              name: string;
              effect: string;
          };
          gearGrind: {
              name: string;
              effect: string;
          };
          searingShot: {
              name: string;
              effect: string;
          };
          technoBlast: {
              name: string;
              effect: string;
          };
          relicSong: {
              name: string;
              effect: string;
          };
          secretSword: {
              name: string;
              effect: string;
          };
          glaciate: {
              name: string;
              effect: string;
          };
          boltStrike: {
              name: string;
              effect: string;
          };
          blueFlare: {
              name: string;
              effect: string;
          };
          fieryDance: {
              name: string;
              effect: string;
          };
          freezeShock: {
              name: string;
              effect: string;
          };
          iceBurn: {
              name: string;
              effect: string;
          };
          snarl: {
              name: string;
              effect: string;
          };
          icicleCrash: {
              name: string;
              effect: string;
          };
          vCreate: {
              name: string;
              effect: string;
          };
          fusionFlare: {
              name: string;
              effect: string;
          };
          fusionBolt: {
              name: string;
              effect: string;
          };
          flyingPress: {
              name: string;
              effect: string;
          };
          matBlock: {
              name: string;
              effect: string;
          };
          belch: {
              name: string;
              effect: string;
          };
          rototiller: {
              name: string;
              effect: string;
          };
          stickyWeb: {
              name: string;
              effect: string;
          };
          fellStinger: {
              name: string;
              effect: string;
          };
          phantomForce: {
              name: string;
              effect: string;
          };
          trickOrTreat: {
              name: string;
              effect: string;
          };
          nobleRoar: {
              name: string;
              effect: string;
          };
          ionDeluge: {
              name: string;
              effect: string;
          };
          parabolicCharge: {
              name: string;
              effect: string;
          };
          forestsCurse: {
              name: string;
              effect: string;
          };
          petalBlizzard: {
              name: string;
              effect: string;
          };
          freezeDry: {
              name: string;
              effect: string;
          };
          disarmingVoice: {
              name: string;
              effect: string;
          };
          partingShot: {
              name: string;
              effect: string;
          };
          topsyTurvy: {
              name: string;
              effect: string;
          };
          drainingKiss: {
              name: string;
              effect: string;
          };
          craftyShield: {
              name: string;
              effect: string;
          };
          flowerShield: {
              name: string;
              effect: string;
          };
          grassyTerrain: {
              name: string;
              effect: string;
          };
          mistyTerrain: {
              name: string;
              effect: string;
          };
          electrify: {
              name: string;
              effect: string;
          };
          playRough: {
              name: string;
              effect: string;
          };
          fairyWind: {
              name: string;
              effect: string;
          };
          moonblast: {
              name: string;
              effect: string;
          };
          boomburst: {
              name: string;
              effect: string;
          };
          fairyLock: {
              name: string;
              effect: string;
          };
          kingsShield: {
              name: string;
              effect: string;
          };
          playNice: {
              name: string;
              effect: string;
          };
          confide: {
              name: string;
              effect: string;
          };
          diamondStorm: {
              name: string;
              effect: string;
          };
          steamEruption: {
              name: string;
              effect: string;
          };
          hyperspaceHole: {
              name: string;
              effect: string;
          };
          waterShuriken: {
              name: string;
              effect: string;
          };
          mysticalFire: {
              name: string;
              effect: string;
          };
          spikyShield: {
              name: string;
              effect: string;
          };
          aromaticMist: {
              name: string;
              effect: string;
          };
          eerieImpulse: {
              name: string;
              effect: string;
          };
          venomDrench: {
              name: string;
              effect: string;
          };
          powder: {
              name: string;
              effect: string;
          };
          geomancy: {
              name: string;
              effect: string;
          };
          magneticFlux: {
              name: string;
              effect: string;
          };
          happyHour: {
              name: string;
              effect: string;
          };
          electricTerrain: {
              name: string;
              effect: string;
          };
          dazzlingGleam: {
              name: string;
              effect: string;
          };
          celebrate: {
              name: string;
              effect: string;
          };
          holdHands: {
              name: string;
              effect: string;
          };
          babyDollEyes: {
              name: string;
              effect: string;
          };
          nuzzle: {
              name: string;
              effect: string;
          };
          holdBack: {
              name: string;
              effect: string;
          };
          infestation: {
              name: string;
              effect: string;
          };
          powerUpPunch: {
              name: string;
              effect: string;
          };
          oblivionWing: {
              name: string;
              effect: string;
          };
          thousandArrows: {
              name: string;
              effect: string;
          };
          thousandWaves: {
              name: string;
              effect: string;
          };
          landsWrath: {
              name: string;
              effect: string;
          };
          lightOfRuin: {
              name: string;
              effect: string;
          };
          originPulse: {
              name: string;
              effect: string;
          };
          precipiceBlades: {
              name: string;
              effect: string;
          };
          dragonAscent: {
              name: string;
              effect: string;
          };
          hyperspaceFury: {
              name: string;
              effect: string;
          };
          breakneckBlitzPhysical: {
              name: string;
              effect: string;
          };
          breakneckBlitzSpecial: {
              name: string;
              effect: string;
          };
          allOutPummelingPhysical: {
              name: string;
              effect: string;
          };
          allOutPummelingSpecial: {
              name: string;
              effect: string;
          };
          supersonicSkystrikePhysical: {
              name: string;
              effect: string;
          };
          supersonicSkystrikeSpecial: {
              name: string;
              effect: string;
          };
          acidDownpourPhysical: {
              name: string;
              effect: string;
          };
          acidDownpourSpecial: {
              name: string;
              effect: string;
          };
          tectonicRagePhysical: {
              name: string;
              effect: string;
          };
          tectonicRageSpecial: {
              name: string;
              effect: string;
          };
          continentalCrushPhysical: {
              name: string;
              effect: string;
          };
          continentalCrushSpecial: {
              name: string;
              effect: string;
          };
          savageSpinOutPhysical: {
              name: string;
              effect: string;
          };
          savageSpinOutSpecial: {
              name: string;
              effect: string;
          };
          neverEndingNightmarePhysical: {
              name: string;
              effect: string;
          };
          neverEndingNightmareSpecial: {
              name: string;
              effect: string;
          };
          corkscrewCrashPhysical: {
              name: string;
              effect: string;
          };
          corkscrewCrashSpecial: {
              name: string;
              effect: string;
          };
          infernoOverdrivePhysical: {
              name: string;
              effect: string;
          };
          infernoOverdriveSpecial: {
              name: string;
              effect: string;
          };
          hydroVortexPhysical: {
              name: string;
              effect: string;
          };
          hydroVortexSpecial: {
              name: string;
              effect: string;
          };
          bloomDoomPhysical: {
              name: string;
              effect: string;
          };
          bloomDoomSpecial: {
              name: string;
              effect: string;
          };
          gigavoltHavocPhysical: {
              name: string;
              effect: string;
          };
          gigavoltHavocSpecial: {
              name: string;
              effect: string;
          };
          shatteredPsychePhysical: {
              name: string;
              effect: string;
          };
          shatteredPsycheSpecial: {
              name: string;
              effect: string;
          };
          subzeroSlammerPhysical: {
              name: string;
              effect: string;
          };
          subzeroSlammerSpecial: {
              name: string;
              effect: string;
          };
          devastatingDrakePhysical: {
              name: string;
              effect: string;
          };
          devastatingDrakeSpecial: {
              name: string;
              effect: string;
          };
          blackHoleEclipsePhysical: {
              name: string;
              effect: string;
          };
          blackHoleEclipseSpecial: {
              name: string;
              effect: string;
          };
          twinkleTacklePhysical: {
              name: string;
              effect: string;
          };
          twinkleTackleSpecial: {
              name: string;
              effect: string;
          };
          catastropika: {
              name: string;
              effect: string;
          };
          shoreUp: {
              name: string;
              effect: string;
          };
          firstImpression: {
              name: string;
              effect: string;
          };
          banefulBunker: {
              name: string;
              effect: string;
          };
          spiritShackle: {
              name: string;
              effect: string;
          };
          darkestLariat: {
              name: string;
              effect: string;
          };
          sparklingAria: {
              name: string;
              effect: string;
          };
          iceHammer: {
              name: string;
              effect: string;
          };
          floralHealing: {
              name: string;
              effect: string;
          };
          highHorsepower: {
              name: string;
              effect: string;
          };
          strengthSap: {
              name: string;
              effect: string;
          };
          solarBlade: {
              name: string;
              effect: string;
          };
          leafage: {
              name: string;
              effect: string;
          };
          spotlight: {
              name: string;
              effect: string;
          };
          toxicThread: {
              name: string;
              effect: string;
          };
          laserFocus: {
              name: string;
              effect: string;
          };
          gearUp: {
              name: string;
              effect: string;
          };
          throatChop: {
              name: string;
              effect: string;
          };
          pollenPuff: {
              name: string;
              effect: string;
          };
          anchorShot: {
              name: string;
              effect: string;
          };
          psychicTerrain: {
              name: string;
              effect: string;
          };
          lunge: {
              name: string;
              effect: string;
          };
          fireLash: {
              name: string;
              effect: string;
          };
          powerTrip: {
              name: string;
              effect: string;
          };
          burnUp: {
              name: string;
              effect: string;
          };
          speedSwap: {
              name: string;
              effect: string;
          };
          smartStrike: {
              name: string;
              effect: string;
          };
          purify: {
              name: string;
              effect: string;
          };
          revelationDance: {
              name: string;
              effect: string;
          };
          coreEnforcer: {
              name: string;
              effect: string;
          };
          tropKick: {
              name: string;
              effect: string;
          };
          instruct: {
              name: string;
              effect: string;
          };
          beakBlast: {
              name: string;
              effect: string;
          };
          clangingScales: {
              name: string;
              effect: string;
          };
          dragonHammer: {
              name: string;
              effect: string;
          };
          brutalSwing: {
              name: string;
              effect: string;
          };
          auroraVeil: {
              name: string;
              effect: string;
          };
          sinisterArrowRaid: {
              name: string;
              effect: string;
          };
          maliciousMoonsault: {
              name: string;
              effect: string;
          };
          oceanicOperetta: {
              name: string;
              effect: string;
          };
          guardianOfAlola: {
              name: string;
              effect: string;
          };
          soulStealing7StarStrike: {
              name: string;
              effect: string;
          };
          stokedSparksurfer: {
              name: string;
              effect: string;
          };
          pulverizingPancake: {
              name: string;
              effect: string;
          };
          extremeEvoboost: {
              name: string;
              effect: string;
          };
          genesisSupernova: {
              name: string;
              effect: string;
          };
          shellTrap: {
              name: string;
              effect: string;
          };
          fleurCannon: {
              name: string;
              effect: string;
          };
          psychicFangs: {
              name: string;
              effect: string;
          };
          stompingTantrum: {
              name: string;
              effect: string;
          };
          shadowBone: {
              name: string;
              effect: string;
          };
          accelerock: {
              name: string;
              effect: string;
          };
          liquidation: {
              name: string;
              effect: string;
          };
          prismaticLaser: {
              name: string;
              effect: string;
          };
          spectralThief: {
              name: string;
              effect: string;
          };
          sunsteelStrike: {
              name: string;
              effect: string;
          };
          moongeistBeam: {
              name: string;
              effect: string;
          };
          tearfulLook: {
              name: string;
              effect: string;
          };
          zingZap: {
              name: string;
              effect: string;
          };
          naturesMadness: {
              name: string;
              effect: string;
          };
          multiAttack: {
              name: string;
              effect: string;
          };
          tenMillionVoltThunderbolt: {
              name: string;
              effect: string;
          };
          mindBlown: {
              name: string;
              effect: string;
          };
          plasmaFists: {
              name: string;
              effect: string;
          };
          photonGeyser: {
              name: string;
              effect: string;
          };
          lightThatBurnsTheSky: {
              name: string;
              effect: string;
          };
          searingSunrazeSmash: {
              name: string;
              effect: string;
          };
          menacingMoonrazeMaelstrom: {
              name: string;
              effect: string;
          };
          letsSnuggleForever: {
              name: string;
              effect: string;
          };
          splinteredStormshards: {
              name: string;
              effect: string;
          };
          clangorousSoulblaze: {
              name: string;
              effect: string;
          };
          zippyZap: {
              name: string;
              effect: string;
          };
          splishySplash: {
              name: string;
              effect: string;
          };
          floatyFall: {
              name: string;
              effect: string;
          };
          pikaPapow: {
              name: string;
              effect: string;
          };
          bouncyBubble: {
              name: string;
              effect: string;
          };
          buzzyBuzz: {
              name: string;
              effect: string;
          };
          sizzlySlide: {
              name: string;
              effect: string;
          };
          glitzyGlow: {
              name: string;
              effect: string;
          };
          baddyBad: {
              name: string;
              effect: string;
          };
          sappySeed: {
              name: string;
              effect: string;
          };
          freezyFrost: {
              name: string;
              effect: string;
          };
          sparklySwirl: {
              name: string;
              effect: string;
          };
          veeveeVolley: {
              name: string;
              effect: string;
          };
          doubleIronBash: {
              name: string;
              effect: string;
          };
          maxGuard: {
              name: string;
              effect: string;
          };
          dynamaxCannon: {
              name: string;
              effect: string;
          };
          snipeShot: {
              name: string;
              effect: string;
          };
          jawLock: {
              name: string;
              effect: string;
          };
          stuffCheeks: {
              name: string;
              effect: string;
          };
          noRetreat: {
              name: string;
              effect: string;
          };
          tarShot: {
              name: string;
              effect: string;
          };
          magicPowder: {
              name: string;
              effect: string;
          };
          dragonDarts: {
              name: string;
              effect: string;
          };
          teatime: {
              name: string;
              effect: string;
          };
          octolock: {
              name: string;
              effect: string;
          };
          boltBeak: {
              name: string;
              effect: string;
          };
          fishiousRend: {
              name: string;
              effect: string;
          };
          courtChange: {
              name: string;
              effect: string;
          };
          maxFlare: {
              name: string;
              effect: string;
          };
          maxFlutterby: {
              name: string;
              effect: string;
          };
          maxLightning: {
              name: string;
              effect: string;
          };
          maxStrike: {
              name: string;
              effect: string;
          };
          maxKnuckle: {
              name: string;
              effect: string;
          };
          maxPhantasm: {
              name: string;
              effect: string;
          };
          maxHailstorm: {
              name: string;
              effect: string;
          };
          maxOoze: {
              name: string;
              effect: string;
          };
          maxGeyser: {
              name: string;
              effect: string;
          };
          maxAirstream: {
              name: string;
              effect: string;
          };
          maxStarfall: {
              name: string;
              effect: string;
          };
          maxWyrmwind: {
              name: string;
              effect: string;
          };
          maxMindstorm: {
              name: string;
              effect: string;
          };
          maxRockfall: {
              name: string;
              effect: string;
          };
          maxQuake: {
              name: string;
              effect: string;
          };
          maxDarkness: {
              name: string;
              effect: string;
          };
          maxOvergrowth: {
              name: string;
              effect: string;
          };
          maxSteelspike: {
              name: string;
              effect: string;
          };
          clangorousSoul: {
              name: string;
              effect: string;
          };
          bodyPress: {
              name: string;
              effect: string;
          };
          decorate: {
              name: string;
              effect: string;
          };
          drumBeating: {
              name: string;
              effect: string;
          };
          snapTrap: {
              name: string;
              effect: string;
          };
          pyroBall: {
              name: string;
              effect: string;
          };
          behemothBlade: {
              name: string;
              effect: string;
          };
          behemothBash: {
              name: string;
              effect: string;
          };
          auraWheel: {
              name: string;
              effect: string;
          };
          breakingSwipe: {
              name: string;
              effect: string;
          };
          branchPoke: {
              name: string;
              effect: string;
          };
          overdrive: {
              name: string;
              effect: string;
          };
          appleAcid: {
              name: string;
              effect: string;
          };
          gravApple: {
              name: string;
              effect: string;
          };
          spiritBreak: {
              name: string;
              effect: string;
          };
          strangeSteam: {
              name: string;
              effect: string;
          };
          lifeDew: {
              name: string;
              effect: string;
          };
          obstruct: {
              name: string;
              effect: string;
          };
          falseSurrender: {
              name: string;
              effect: string;
          };
          meteorAssault: {
              name: string;
              effect: string;
          };
          eternabeam: {
              name: string;
              effect: string;
          };
          steelBeam: {
              name: string;
              effect: string;
          };
          expandingForce: {
              name: string;
              effect: string;
          };
          steelRoller: {
              name: string;
              effect: string;
          };
          scaleShot: {
              name: string;
              effect: string;
          };
          meteorBeam: {
              name: string;
              effect: string;
          };
          shellSideArm: {
              name: string;
              effect: string;
          };
          mistyExplosion: {
              name: string;
              effect: string;
          };
          grassyGlide: {
              name: string;
              effect: string;
          };
          risingVoltage: {
              name: string;
              effect: string;
          };
          terrainPulse: {
              name: string;
              effect: string;
          };
          skitterSmack: {
              name: string;
              effect: string;
          };
          burningJealousy: {
              name: string;
              effect: string;
          };
          lashOut: {
              name: string;
              effect: string;
          };
          poltergeist: {
              name: string;
              effect: string;
          };
          corrosiveGas: {
              name: string;
              effect: string;
          };
          coaching: {
              name: string;
              effect: string;
          };
          flipTurn: {
              name: string;
              effect: string;
          };
          tripleAxel: {
              name: string;
              effect: string;
          };
          dualWingbeat: {
              name: string;
              effect: string;
          };
          scorchingSands: {
              name: string;
              effect: string;
          };
          jungleHealing: {
              name: string;
              effect: string;
          };
          wickedBlow: {
              name: string;
              effect: string;
          };
          surgingStrikes: {
              name: string;
              effect: string;
          };
          thunderCage: {
              name: string;
              effect: string;
          };
          dragonEnergy: {
              name: string;
              effect: string;
          };
          freezingGlare: {
              name: string;
              effect: string;
          };
          fieryWrath: {
              name: string;
              effect: string;
          };
          thunderousKick: {
              name: string;
              effect: string;
          };
          glacialLance: {
              name: string;
              effect: string;
          };
          astralBarrage: {
              name: string;
              effect: string;
          };
          eerieSpell: {
              name: string;
              effect: string;
          };
          direClaw: {
              name: string;
              effect: string;
          };
          psyshieldBash: {
              name: string;
              effect: string;
          };
          powerShift: {
              name: string;
              effect: string;
          };
          stoneAxe: {
              name: string;
              effect: string;
          };
          springtideStorm: {
              name: string;
              effect: string;
          };
          mysticalPower: {
              name: string;
              effect: string;
          };
          ragingFury: {
              name: string;
              effect: string;
          };
          waveCrash: {
              name: string;
              effect: string;
          };
          chloroblast: {
              name: string;
              effect: string;
          };
          mountainGale: {
              name: string;
              effect: string;
          };
          victoryDance: {
              name: string;
              effect: string;
          };
          headlongRush: {
              name: string;
              effect: string;
          };
          barbBarrage: {
              name: string;
              effect: string;
          };
          esperWing: {
              name: string;
              effect: string;
          };
          bitterMalice: {
              name: string;
              effect: string;
          };
          shelter: {
              name: string;
              effect: string;
          };
          tripleArrows: {
              name: string;
              effect: string;
          };
          infernalParade: {
              name: string;
              effect: string;
          };
          ceaselessEdge: {
              name: string;
              effect: string;
          };
          bleakwindStorm: {
              name: string;
              effect: string;
          };
          wildboltStorm: {
              name: string;
              effect: string;
          };
          sandsearStorm: {
              name: string;
              effect: string;
          };
          lunarBlessing: {
              name: string;
              effect: string;
          };
          takeHeart: {
              name: string;
              effect: string;
          };
          gMaxWildfire: {
              name: string;
              effect: string;
          };
          gMaxBefuddle: {
              name: string;
              effect: string;
          };
          gMaxVoltCrash: {
              name: string;
              effect: string;
          };
          gMaxGoldRush: {
              name: string;
              effect: string;
          };
          gMaxChiStrike: {
              name: string;
              effect: string;
          };
          gMaxTerror: {
              name: string;
              effect: string;
          };
          gMaxResonance: {
              name: string;
              effect: string;
          };
          gMaxCuddle: {
              name: string;
              effect: string;
          };
          gMaxReplenish: {
              name: string;
              effect: string;
          };
          gMaxMalodor: {
              name: string;
              effect: string;
          };
          gMaxStonesurge: {
              name: string;
              effect: string;
          };
          gMaxWindRage: {
              name: string;
              effect: string;
          };
          gMaxStunShock: {
              name: string;
              effect: string;
          };
          gMaxFinale: {
              name: string;
              effect: string;
          };
          gMaxDepletion: {
              name: string;
              effect: string;
          };
          gMaxGravitas: {
              name: string;
              effect: string;
          };
          gMaxVolcalith: {
              name: string;
              effect: string;
          };
          gMaxSandblast: {
              name: string;
              effect: string;
          };
          gMaxSnooze: {
              name: string;
              effect: string;
          };
          gMaxTartness: {
              name: string;
              effect: string;
          };
          gMaxSweetness: {
              name: string;
              effect: string;
          };
          gMaxSmite: {
              name: string;
              effect: string;
          };
          gMaxSteelsurge: {
              name: string;
              effect: string;
          };
          gMaxMeltdown: {
              name: string;
              effect: string;
          };
          gMaxFoamBurst: {
              name: string;
              effect: string;
          };
          gMaxCentiferno: {
              name: string;
              effect: string;
          };
          gMaxVineLash: {
              name: string;
              effect: string;
          };
          gMaxCannonade: {
              name: string;
              effect: string;
          };
          gMaxDrumSolo: {
              name: string;
              effect: string;
          };
          gMaxFireball: {
              name: string;
              effect: string;
          };
          gMaxHydrosnipe: {
              name: string;
              effect: string;
          };
          gMaxOneBlow: {
              name: string;
              effect: string;
          };
          gMaxRapidFlow: {
              name: string;
              effect: string;
          };
          teraBlast: {
              name: string;
              effect: string;
          };
          silkTrap: {
              name: string;
              effect: string;
          };
          axeKick: {
              name: string;
              effect: string;
          };
          lastRespects: {
              name: string;
              effect: string;
          };
          luminaCrash: {
              name: string;
              effect: string;
          };
          orderUp: {
              name: string;
              effect: string;
          };
          jetPunch: {
              name: string;
              effect: string;
          };
          spicyExtract: {
              name: string;
              effect: string;
          };
          spinOut: {
              name: string;
              effect: string;
          };
          populationBomb: {
              name: string;
              effect: string;
          };
          iceSpinner: {
              name: string;
              effect: string;
          };
          glaiveRush: {
              name: string;
              effect: string;
          };
          revivalBlessing: {
              name: string;
              effect: string;
          };
          saltCure: {
              name: string;
              effect: string;
          };
          tripleDive: {
              name: string;
              effect: string;
          };
          mortalSpin: {
              name: string;
              effect: string;
          };
          doodle: {
              name: string;
              effect: string;
          };
          filletAway: {
              name: string;
              effect: string;
          };
          kowtowCleave: {
              name: string;
              effect: string;
          };
          flowerTrick: {
              name: string;
              effect: string;
          };
          torchSong: {
              name: string;
              effect: string;
          };
          aquaStep: {
              name: string;
              effect: string;
          };
          ragingBull: {
              name: string;
              effect: string;
          };
          makeItRain: {
              name: string;
              effect: string;
          };
          psyblade: {
              name: string;
              effect: string;
          };
          hydroSteam: {
              name: string;
              effect: string;
          };
          ruination: {
              name: string;
              effect: string;
          };
          collisionCourse: {
              name: string;
              effect: string;
          };
          electroDrift: {
              name: string;
              effect: string;
          };
          shedTail: {
              name: string;
              effect: string;
          };
          chillyReception: {
              name: string;
              effect: string;
          };
          tidyUp: {
              name: string;
              effect: string;
          };
          snowscape: {
              name: string;
              effect: string;
          };
          pounce: {
              name: string;
              effect: string;
          };
          trailblaze: {
              name: string;
              effect: string;
          };
          chillingWater: {
              name: string;
              effect: string;
          };
          hyperDrill: {
              name: string;
              effect: string;
          };
          twinBeam: {
              name: string;
              effect: string;
          };
          rageFist: {
              name: string;
              effect: string;
          };
          armorCannon: {
              name: string;
              effect: string;
          };
          bitterBlade: {
              name: string;
              effect: string;
          };
          doubleShock: {
              name: string;
              effect: string;
          };
          gigatonHammer: {
              name: string;
              effect: string;
          };
          comeuppance: {
              name: string;
              effect: string;
          };
          aquaCutter: {
              name: string;
              effect: string;
          };
          blazingTorque: {
              name: string;
              effect: string;
          };
          wickedTorque: {
              name: string;
              effect: string;
          };
          noxiousTorque: {
              name: string;
              effect: string;
          };
          combatTorque: {
              name: string;
              effect: string;
          };
          magicalTorque: {
              name: string;
              effect: string;
          };
          bloodMoon: {
              name: string;
              effect: string;
          };
          matchaGotcha: {
              name: string;
              effect: string;
          };
          syrupBomb: {
              name: string;
              effect: string;
          };
          ivyCudgel: {
              name: string;
              effect: string;
          };
          electroShot: {
              name: string;
              effect: string;
          };
          teraStarstorm: {
              name: string;
              effect: string;
          };
          fickleBeam: {
              name: string;
              effect: string;
          };
          burningBulwark: {
              name: string;
              effect: string;
          };
          thunderclap: {
              name: string;
              effect: string;
          };
          mightyCleave: {
              name: string;
              effect: string;
          };
          tachyonCutter: {
              name: string;
              effect: string;
          };
          hardPress: {
              name: string;
              effect: string;
          };
          dragonCheer: {
              name: string;
              effect: string;
          };
          alluringVoice: {
              name: string;
              effect: string;
          };
          temperFlare: {
              name: string;
              effect: string;
          };
          supercellSlam: {
              name: string;
              effect: string;
          };
          psychicNoise: {
              name: string;
              effect: string;
          };
          upperHand: {
              name: string;
              effect: string;
          };
          malignantChain: {
              name: string;
              effect: string;
          };
      };
      nature: {
          Hardy: string;
          Lonely: string;
          Brave: string;
          Adamant: string;
          Naughty: string;
          Bold: string;
          Docile: string;
          Relaxed: string;
          Impish: string;
          Lax: string;
          Timid: string;
          Hasty: string;
          Serious: string;
          Jolly: string;
          Naive: string;
          Modest: string;
          Mild: string;
          Quiet: string;
          Bashful: string;
          Rash: string;
          Calm: string;
          Gentle: string;
          Sassy: string;
          Careful: string;
          Quirky: string;
      };
      pokeball: {
          pokeBall: string;
          greatBall: string;
          ultraBall: string;
          rogueBall: string;
          masterBall: string;
          luxuryBall: string;
      };
      pokemon: {
          bulbasaur: string;
          ivysaur: string;
          venusaur: string;
          charmander: string;
          charmeleon: string;
          charizard: string;
          squirtle: string;
          wartortle: string;
          blastoise: string;
          caterpie: string;
          metapod: string;
          butterfree: string;
          weedle: string;
          kakuna: string;
          beedrill: string;
          pidgey: string;
          pidgeotto: string;
          pidgeot: string;
          rattata: string;
          raticate: string;
          spearow: string;
          fearow: string;
          ekans: string;
          arbok: string;
          pikachu: string;
          raichu: string;
          sandshrew: string;
          sandslash: string;
          nidoran_f: string;
          nidorina: string;
          nidoqueen: string;
          nidoran_m: string;
          nidorino: string;
          nidoking: string;
          clefairy: string;
          clefable: string;
          vulpix: string;
          ninetales: string;
          jigglypuff: string;
          wigglytuff: string;
          zubat: string;
          golbat: string;
          oddish: string;
          gloom: string;
          vileplume: string;
          paras: string;
          parasect: string;
          venonat: string;
          venomoth: string;
          diglett: string;
          dugtrio: string;
          meowth: string;
          persian: string;
          psyduck: string;
          golduck: string;
          mankey: string;
          primeape: string;
          growlithe: string;
          arcanine: string;
          poliwag: string;
          poliwhirl: string;
          poliwrath: string;
          abra: string;
          kadabra: string;
          alakazam: string;
          machop: string;
          machoke: string;
          machamp: string;
          bellsprout: string;
          weepinbell: string;
          victreebel: string;
          tentacool: string;
          tentacruel: string;
          geodude: string;
          graveler: string;
          golem: string;
          ponyta: string;
          rapidash: string;
          slowpoke: string;
          slowbro: string;
          magnemite: string;
          magneton: string;
          farfetchd: string;
          doduo: string;
          dodrio: string;
          seel: string;
          dewgong: string;
          grimer: string;
          muk: string;
          shellder: string;
          cloyster: string;
          gastly: string;
          haunter: string;
          gengar: string;
          onix: string;
          drowzee: string;
          hypno: string;
          krabby: string;
          kingler: string;
          voltorb: string;
          electrode: string;
          exeggcute: string;
          exeggutor: string;
          cubone: string;
          marowak: string;
          hitmonlee: string;
          hitmonchan: string;
          lickitung: string;
          koffing: string;
          weezing: string;
          rhyhorn: string;
          rhydon: string;
          chansey: string;
          tangela: string;
          kangaskhan: string;
          horsea: string;
          seadra: string;
          goldeen: string;
          seaking: string;
          staryu: string;
          starmie: string;
          mr_mime: string;
          scyther: string;
          jynx: string;
          electabuzz: string;
          magmar: string;
          pinsir: string;
          tauros: string;
          magikarp: string;
          gyarados: string;
          lapras: string;
          ditto: string;
          eevee: string;
          vaporeon: string;
          jolteon: string;
          flareon: string;
          porygon: string;
          omanyte: string;
          omastar: string;
          kabuto: string;
          kabutops: string;
          aerodactyl: string;
          snorlax: string;
          articuno: string;
          zapdos: string;
          moltres: string;
          dratini: string;
          dragonair: string;
          dragonite: string;
          mewtwo: string;
          mew: string;
          chikorita: string;
          bayleef: string;
          meganium: string;
          cyndaquil: string;
          quilava: string;
          typhlosion: string;
          totodile: string;
          croconaw: string;
          feraligatr: string;
          sentret: string;
          furret: string;
          hoothoot: string;
          noctowl: string;
          ledyba: string;
          ledian: string;
          spinarak: string;
          ariados: string;
          crobat: string;
          chinchou: string;
          lanturn: string;
          pichu: string;
          cleffa: string;
          igglybuff: string;
          togepi: string;
          togetic: string;
          natu: string;
          xatu: string;
          mareep: string;
          flaaffy: string;
          ampharos: string;
          bellossom: string;
          marill: string;
          azumarill: string;
          sudowoodo: string;
          politoed: string;
          hoppip: string;
          skiploom: string;
          jumpluff: string;
          aipom: string;
          sunkern: string;
          sunflora: string;
          yanma: string;
          wooper: string;
          quagsire: string;
          espeon: string;
          umbreon: string;
          murkrow: string;
          slowking: string;
          misdreavus: string;
          unown: string;
          wobbuffet: string;
          girafarig: string;
          pineco: string;
          forretress: string;
          dunsparce: string;
          gligar: string;
          steelix: string;
          snubbull: string;
          granbull: string;
          qwilfish: string;
          scizor: string;
          shuckle: string;
          heracross: string;
          sneasel: string;
          teddiursa: string;
          ursaring: string;
          slugma: string;
          magcargo: string;
          swinub: string;
          piloswine: string;
          corsola: string;
          remoraid: string;
          octillery: string;
          delibird: string;
          mantine: string;
          skarmory: string;
          houndour: string;
          houndoom: string;
          kingdra: string;
          phanpy: string;
          donphan: string;
          porygon2: string;
          stantler: string;
          smeargle: string;
          tyrogue: string;
          hitmontop: string;
          smoochum: string;
          elekid: string;
          magby: string;
          miltank: string;
          blissey: string;
          raikou: string;
          entei: string;
          suicune: string;
          larvitar: string;
          pupitar: string;
          tyranitar: string;
          lugia: string;
          ho_oh: string;
          celebi: string;
          treecko: string;
          grovyle: string;
          sceptile: string;
          torchic: string;
          combusken: string;
          blaziken: string;
          mudkip: string;
          marshtomp: string;
          swampert: string;
          poochyena: string;
          mightyena: string;
          zigzagoon: string;
          linoone: string;
          wurmple: string;
          silcoon: string;
          beautifly: string;
          cascoon: string;
          dustox: string;
          lotad: string;
          lombre: string;
          ludicolo: string;
          seedot: string;
          nuzleaf: string;
          shiftry: string;
          taillow: string;
          swellow: string;
          wingull: string;
          pelipper: string;
          ralts: string;
          kirlia: string;
          gardevoir: string;
          surskit: string;
          masquerain: string;
          shroomish: string;
          breloom: string;
          slakoth: string;
          vigoroth: string;
          slaking: string;
          nincada: string;
          ninjask: string;
          shedinja: string;
          whismur: string;
          loudred: string;
          exploud: string;
          makuhita: string;
          hariyama: string;
          azurill: string;
          nosepass: string;
          skitty: string;
          delcatty: string;
          sableye: string;
          mawile: string;
          aron: string;
          lairon: string;
          aggron: string;
          meditite: string;
          medicham: string;
          electrike: string;
          manectric: string;
          plusle: string;
          minun: string;
          volbeat: string;
          illumise: string;
          roselia: string;
          gulpin: string;
          swalot: string;
          carvanha: string;
          sharpedo: string;
          wailmer: string;
          wailord: string;
          numel: string;
          camerupt: string;
          torkoal: string;
          spoink: string;
          grumpig: string;
          spinda: string;
          trapinch: string;
          vibrava: string;
          flygon: string;
          cacnea: string;
          cacturne: string;
          swablu: string;
          altaria: string;
          zangoose: string;
          seviper: string;
          lunatone: string;
          solrock: string;
          barboach: string;
          whiscash: string;
          corphish: string;
          crawdaunt: string;
          baltoy: string;
          claydol: string;
          lileep: string;
          cradily: string;
          anorith: string;
          armaldo: string;
          feebas: string;
          milotic: string;
          castform: string;
          kecleon: string;
          shuppet: string;
          banette: string;
          duskull: string;
          dusclops: string;
          tropius: string;
          chimecho: string;
          absol: string;
          wynaut: string;
          snorunt: string;
          glalie: string;
          spheal: string;
          sealeo: string;
          walrein: string;
          clamperl: string;
          huntail: string;
          gorebyss: string;
          relicanth: string;
          luvdisc: string;
          bagon: string;
          shelgon: string;
          salamence: string;
          beldum: string;
          metang: string;
          metagross: string;
          regirock: string;
          regice: string;
          registeel: string;
          latias: string;
          latios: string;
          kyogre: string;
          groudon: string;
          rayquaza: string;
          jirachi: string;
          deoxys: string;
          turtwig: string;
          grotle: string;
          torterra: string;
          chimchar: string;
          monferno: string;
          infernape: string;
          piplup: string;
          prinplup: string;
          empoleon: string;
          starly: string;
          staravia: string;
          staraptor: string;
          bidoof: string;
          bibarel: string;
          kricketot: string;
          kricketune: string;
          shinx: string;
          luxio: string;
          luxray: string;
          budew: string;
          roserade: string;
          cranidos: string;
          rampardos: string;
          shieldon: string;
          bastiodon: string;
          burmy: string;
          wormadam: string;
          mothim: string;
          combee: string;
          vespiquen: string;
          pachirisu: string;
          buizel: string;
          floatzel: string;
          cherubi: string;
          cherrim: string;
          shellos: string;
          gastrodon: string;
          ambipom: string;
          drifloon: string;
          drifblim: string;
          buneary: string;
          lopunny: string;
          mismagius: string;
          honchkrow: string;
          glameow: string;
          purugly: string;
          chingling: string;
          stunky: string;
          skuntank: string;
          bronzor: string;
          bronzong: string;
          bonsly: string;
          mime_jr: string;
          happiny: string;
          chatot: string;
          spiritomb: string;
          gible: string;
          gabite: string;
          garchomp: string;
          munchlax: string;
          riolu: string;
          lucario: string;
          hippopotas: string;
          hippowdon: string;
          skorupi: string;
          drapion: string;
          croagunk: string;
          toxicroak: string;
          carnivine: string;
          finneon: string;
          lumineon: string;
          mantyke: string;
          snover: string;
          abomasnow: string;
          weavile: string;
          magnezone: string;
          lickilicky: string;
          rhyperior: string;
          tangrowth: string;
          electivire: string;
          magmortar: string;
          togekiss: string;
          yanmega: string;
          leafeon: string;
          glaceon: string;
          gliscor: string;
          mamoswine: string;
          porygon_z: string;
          gallade: string;
          probopass: string;
          dusknoir: string;
          froslass: string;
          rotom: string;
          uxie: string;
          mesprit: string;
          azelf: string;
          dialga: string;
          palkia: string;
          heatran: string;
          regigigas: string;
          giratina: string;
          cresselia: string;
          phione: string;
          manaphy: string;
          darkrai: string;
          shaymin: string;
          arceus: string;
          victini: string;
          snivy: string;
          servine: string;
          serperior: string;
          tepig: string;
          pignite: string;
          emboar: string;
          oshawott: string;
          dewott: string;
          samurott: string;
          patrat: string;
          watchog: string;
          lillipup: string;
          herdier: string;
          stoutland: string;
          purrloin: string;
          liepard: string;
          pansage: string;
          simisage: string;
          pansear: string;
          simisear: string;
          panpour: string;
          simipour: string;
          munna: string;
          musharna: string;
          pidove: string;
          tranquill: string;
          unfezant: string;
          blitzle: string;
          zebstrika: string;
          roggenrola: string;
          boldore: string;
          gigalith: string;
          woobat: string;
          swoobat: string;
          drilbur: string;
          excadrill: string;
          audino: string;
          timburr: string;
          gurdurr: string;
          conkeldurr: string;
          tympole: string;
          palpitoad: string;
          seismitoad: string;
          throh: string;
          sawk: string;
          sewaddle: string;
          swadloon: string;
          leavanny: string;
          venipede: string;
          whirlipede: string;
          scolipede: string;
          cottonee: string;
          whimsicott: string;
          petilil: string;
          lilligant: string;
          basculin: string;
          sandile: string;
          krokorok: string;
          krookodile: string;
          darumaka: string;
          darmanitan: string;
          maractus: string;
          dwebble: string;
          crustle: string;
          scraggy: string;
          scrafty: string;
          sigilyph: string;
          yamask: string;
          cofagrigus: string;
          tirtouga: string;
          carracosta: string;
          archen: string;
          archeops: string;
          trubbish: string;
          garbodor: string;
          zorua: string;
          zoroark: string;
          minccino: string;
          cinccino: string;
          gothita: string;
          gothorita: string;
          gothitelle: string;
          solosis: string;
          duosion: string;
          reuniclus: string;
          ducklett: string;
          swanna: string;
          vanillite: string;
          vanillish: string;
          vanilluxe: string;
          deerling: string;
          sawsbuck: string;
          emolga: string;
          karrablast: string;
          escavalier: string;
          foongus: string;
          amoonguss: string;
          frillish: string;
          jellicent: string;
          alomomola: string;
          joltik: string;
          galvantula: string;
          ferroseed: string;
          ferrothorn: string;
          klink: string;
          klang: string;
          klinklang: string;
          tynamo: string;
          eelektrik: string;
          eelektross: string;
          elgyem: string;
          beheeyem: string;
          litwick: string;
          lampent: string;
          chandelure: string;
          axew: string;
          fraxure: string;
          haxorus: string;
          cubchoo: string;
          beartic: string;
          cryogonal: string;
          shelmet: string;
          accelgor: string;
          stunfisk: string;
          mienfoo: string;
          mienshao: string;
          druddigon: string;
          golett: string;
          golurk: string;
          pawniard: string;
          bisharp: string;
          bouffalant: string;
          rufflet: string;
          braviary: string;
          vullaby: string;
          mandibuzz: string;
          heatmor: string;
          durant: string;
          deino: string;
          zweilous: string;
          hydreigon: string;
          larvesta: string;
          volcarona: string;
          cobalion: string;
          terrakion: string;
          virizion: string;
          tornadus: string;
          thundurus: string;
          reshiram: string;
          zekrom: string;
          landorus: string;
          kyurem: string;
          keldeo: string;
          meloetta: string;
          genesect: string;
          chespin: string;
          quilladin: string;
          chesnaught: string;
          fennekin: string;
          braixen: string;
          delphox: string;
          froakie: string;
          frogadier: string;
          greninja: string;
          bunnelby: string;
          diggersby: string;
          fletchling: string;
          fletchinder: string;
          talonflame: string;
          scatterbug: string;
          spewpa: string;
          vivillon: string;
          litleo: string;
          pyroar: string;
          flabebe: string;
          floette: string;
          florges: string;
          skiddo: string;
          gogoat: string;
          pancham: string;
          pangoro: string;
          furfrou: string;
          espurr: string;
          meowstic: string;
          honedge: string;
          doublade: string;
          aegislash: string;
          spritzee: string;
          aromatisse: string;
          swirlix: string;
          slurpuff: string;
          inkay: string;
          malamar: string;
          binacle: string;
          barbaracle: string;
          skrelp: string;
          dragalge: string;
          clauncher: string;
          clawitzer: string;
          helioptile: string;
          heliolisk: string;
          tyrunt: string;
          tyrantrum: string;
          amaura: string;
          aurorus: string;
          sylveon: string;
          hawlucha: string;
          dedenne: string;
          carbink: string;
          goomy: string;
          sliggoo: string;
          goodra: string;
          klefki: string;
          phantump: string;
          trevenant: string;
          pumpkaboo: string;
          gourgeist: string;
          bergmite: string;
          avalugg: string;
          noibat: string;
          noivern: string;
          xerneas: string;
          yveltal: string;
          zygarde: string;
          diancie: string;
          hoopa: string;
          volcanion: string;
          rowlet: string;
          dartrix: string;
          decidueye: string;
          litten: string;
          torracat: string;
          incineroar: string;
          popplio: string;
          brionne: string;
          primarina: string;
          pikipek: string;
          trumbeak: string;
          toucannon: string;
          yungoos: string;
          gumshoos: string;
          grubbin: string;
          charjabug: string;
          vikavolt: string;
          crabrawler: string;
          crabominable: string;
          oricorio: string;
          cutiefly: string;
          ribombee: string;
          rockruff: string;
          lycanroc: string;
          wishiwashi: string;
          mareanie: string;
          toxapex: string;
          mudbray: string;
          mudsdale: string;
          dewpider: string;
          araquanid: string;
          fomantis: string;
          lurantis: string;
          morelull: string;
          shiinotic: string;
          salandit: string;
          salazzle: string;
          stufful: string;
          bewear: string;
          bounsweet: string;
          steenee: string;
          tsareena: string;
          comfey: string;
          oranguru: string;
          passimian: string;
          wimpod: string;
          golisopod: string;
          sandygast: string;
          palossand: string;
          pyukumuku: string;
          type_null: string;
          silvally: string;
          minior: string;
          komala: string;
          turtonator: string;
          togedemaru: string;
          mimikyu: string;
          bruxish: string;
          drampa: string;
          dhelmise: string;
          jangmo_o: string;
          hakamo_o: string;
          kommo_o: string;
          tapu_koko: string;
          tapu_lele: string;
          tapu_bulu: string;
          tapu_fini: string;
          cosmog: string;
          cosmoem: string;
          solgaleo: string;
          lunala: string;
          nihilego: string;
          buzzwole: string;
          pheromosa: string;
          xurkitree: string;
          celesteela: string;
          kartana: string;
          guzzlord: string;
          necrozma: string;
          magearna: string;
          marshadow: string;
          poipole: string;
          naganadel: string;
          stakataka: string;
          blacephalon: string;
          zeraora: string;
          meltan: string;
          melmetal: string;
          grookey: string;
          thwackey: string;
          rillaboom: string;
          scorbunny: string;
          raboot: string;
          cinderace: string;
          sobble: string;
          drizzile: string;
          inteleon: string;
          skwovet: string;
          greedent: string;
          rookidee: string;
          corvisquire: string;
          corviknight: string;
          blipbug: string;
          dottler: string;
          orbeetle: string;
          nickit: string;
          thievul: string;
          gossifleur: string;
          eldegoss: string;
          wooloo: string;
          dubwool: string;
          chewtle: string;
          drednaw: string;
          yamper: string;
          boltund: string;
          rolycoly: string;
          carkol: string;
          coalossal: string;
          applin: string;
          flapple: string;
          appletun: string;
          silicobra: string;
          sandaconda: string;
          cramorant: string;
          arrokuda: string;
          barraskewda: string;
          toxel: string;
          toxtricity: string;
          sizzlipede: string;
          centiskorch: string;
          clobbopus: string;
          grapploct: string;
          sinistea: string;
          polteageist: string;
          hatenna: string;
          hattrem: string;
          hatterene: string;
          impidimp: string;
          morgrem: string;
          grimmsnarl: string;
          obstagoon: string;
          perrserker: string;
          cursola: string;
          sirfetchd: string;
          mr_rime: string;
          runerigus: string;
          milcery: string;
          alcremie: string;
          falinks: string;
          pincurchin: string;
          snom: string;
          frosmoth: string;
          stonjourner: string;
          eiscue: string;
          indeedee: string;
          morpeko: string;
          cufant: string;
          copperajah: string;
          dracozolt: string;
          arctozolt: string;
          dracovish: string;
          arctovish: string;
          duraludon: string;
          dreepy: string;
          drakloak: string;
          dragapult: string;
          zacian: string;
          zamazenta: string;
          eternatus: string;
          kubfu: string;
          urshifu: string;
          zarude: string;
          regieleki: string;
          regidrago: string;
          glastrier: string;
          spectrier: string;
          calyrex: string;
          wyrdeer: string;
          kleavor: string;
          ursaluna: string;
          basculegion: string;
          sneasler: string;
          overqwil: string;
          enamorus: string;
          sprigatito: string;
          floragato: string;
          meowscarada: string;
          fuecoco: string;
          crocalor: string;
          skeledirge: string;
          quaxly: string;
          quaxwell: string;
          quaquaval: string;
          lechonk: string;
          oinkologne: string;
          tarountula: string;
          spidops: string;
          nymble: string;
          lokix: string;
          pawmi: string;
          pawmo: string;
          pawmot: string;
          tandemaus: string;
          maushold: string;
          fidough: string;
          dachsbun: string;
          smoliv: string;
          dolliv: string;
          arboliva: string;
          squawkabilly: string;
          nacli: string;
          naclstack: string;
          garganacl: string;
          charcadet: string;
          armarouge: string;
          ceruledge: string;
          tadbulb: string;
          bellibolt: string;
          wattrel: string;
          kilowattrel: string;
          maschiff: string;
          mabosstiff: string;
          shroodle: string;
          grafaiai: string;
          bramblin: string;
          brambleghast: string;
          toedscool: string;
          toedscruel: string;
          klawf: string;
          capsakid: string;
          scovillain: string;
          rellor: string;
          rabsca: string;
          flittle: string;
          espathra: string;
          tinkatink: string;
          tinkatuff: string;
          tinkaton: string;
          wiglett: string;
          wugtrio: string;
          bombirdier: string;
          finizen: string;
          palafin: string;
          varoom: string;
          revavroom: string;
          cyclizar: string;
          orthworm: string;
          glimmet: string;
          glimmora: string;
          greavard: string;
          houndstone: string;
          flamigo: string;
          cetoddle: string;
          cetitan: string;
          veluza: string;
          dondozo: string;
          tatsugiri: string;
          annihilape: string;
          clodsire: string;
          farigiraf: string;
          dudunsparce: string;
          kingambit: string;
          great_tusk: string;
          scream_tail: string;
          brute_bonnet: string;
          flutter_mane: string;
          slither_wing: string;
          sandy_shocks: string;
          iron_treads: string;
          iron_bundle: string;
          iron_hands: string;
          iron_jugulis: string;
          iron_moth: string;
          iron_thorns: string;
          frigibax: string;
          arctibax: string;
          baxcalibur: string;
          gimmighoul: string;
          gholdengo: string;
          wo_chien: string;
          chien_pao: string;
          ting_lu: string;
          chi_yu: string;
          roaring_moon: string;
          iron_valiant: string;
          koraidon: string;
          miraidon: string;
          walking_wake: string;
          iron_leaves: string;
          dipplin: string;
          poltchageist: string;
          sinistcha: string;
          okidogi: string;
          munkidori: string;
          fezandipiti: string;
          ogerpon: string;
          archaludon: string;
          hydrapple: string;
          gouging_fire: string;
          raging_bolt: string;
          iron_boulder: string;
          iron_crown: string;
          terapagos: string;
          pecharunt: string;
          alola_rattata: string;
          alola_raticate: string;
          alola_raichu: string;
          alola_sandshrew: string;
          alola_sandslash: string;
          alola_vulpix: string;
          alola_ninetales: string;
          alola_diglett: string;
          alola_dugtrio: string;
          alola_meowth: string;
          alola_persian: string;
          alola_geodude: string;
          alola_graveler: string;
          alola_golem: string;
          alola_grimer: string;
          alola_muk: string;
          alola_exeggutor: string;
          alola_marowak: string;
          eternal_floette: string;
          galar_meowth: string;
          galar_ponyta: string;
          galar_rapidash: string;
          galar_slowpoke: string;
          galar_slowbro: string;
          galar_farfetchd: string;
          galar_weezing: string;
          galar_mr_mime: string;
          galar_articuno: string;
          galar_zapdos: string;
          galar_moltres: string;
          galar_slowking: string;
          galar_corsola: string;
          galar_zigzagoon: string;
          galar_linoone: string;
          galar_darumaka: string;
          galar_darmanitan: string;
          galar_yamask: string;
          galar_stunfisk: string;
          hisui_growlithe: string;
          hisui_arcanine: string;
          hisui_voltorb: string;
          hisui_electrode: string;
          hisui_typhlosion: string;
          hisui_qwilfish: string;
          hisui_sneasel: string;
          hisui_samurott: string;
          hisui_lilligant: string;
          hisui_zorua: string;
          hisui_zoroark: string;
          hisui_braviary: string;
          hisui_sliggoo: string;
          hisui_goodra: string;
          hisui_avalugg: string;
          hisui_decidueye: string;
          paldea_tauros: string;
          paldea_wooper: string;
          bloodmoon_ursaluna: string;
      };
      pokemonForm: {
          pikachuCosplay: string;
          pikachuCoolCosplay: string;
          pikachuBeautyCosplay: string;
          pikachuCuteCosplay: string;
          pikachuSmartCosplay: string;
          pikachuToughCosplay: string;
          pikachuPartner: string;
          eeveePartner: string;
          pichuSpiky: string;
          unownA: string;
          unownB: string;
          unownC: string;
          unownD: string;
          unownE: string;
          unownF: string;
          unownG: string;
          unownH: string;
          unownI: string;
          unownJ: string;
          unownK: string;
          unownL: string;
          unownM: string;
          unownN: string;
          unownO: string;
          unownP: string;
          unownQ: string;
          unownR: string;
          unownS: string;
          unownT: string;
          unownU: string;
          unownV: string;
          unownW: string;
          unownX: string;
          unownY: string;
          unownZ: string;
          unownExclamation: string;
          unownQuestion: string;
          castformSunny: string;
          castformRainy: string;
          castformSnowy: string;
          deoxysNormal: string;
          burmyPlant: string;
          burmySandy: string;
          burmyTrash: string;
          shellosEast: string;
          shellosWest: string;
          rotomHeat: string;
          rotomWash: string;
          rotomFrost: string;
          rotomFan: string;
          rotomMow: string;
          giratinaAltered: string;
          shayminLand: string;
          basculinRedStriped: string;
          basculinBlueStriped: string;
          basculinWhiteStriped: string;
          deerlingSpring: string;
          deerlingSummer: string;
          deerlingAutumn: string;
          deerlingWinter: string;
          tornadusIncarnate: string;
          thundurusIncarnate: string;
          landorusIncarnate: string;
          keldeoOrdinary: string;
          meloettaAria: string;
          meloettaPirouette: string;
          froakieBattleBond: string;
          scatterbugMeadow: string;
          scatterbugIcySnow: string;
          scatterbugPolar: string;
          scatterbugTundra: string;
          scatterbugContinental: string;
          scatterbugGarden: string;
          scatterbugElegant: string;
          scatterbugModern: string;
          scatterbugMarine: string;
          scatterbugArchipelago: string;
          scatterbugHighPlains: string;
          scatterbugSandstorm: string;
          scatterbugRiver: string;
          scatterbugMonsoon: string;
          scatterbugSavanna: string;
          scatterbugSun: string;
          scatterbugOcean: string;
          scatterbugJungle: string;
          scatterbugFancy: string;
          scatterbugPokeBall: string;
          flabebeRed: string;
          flabebeYellow: string;
          flabebeOrange: string;
          flabebeBlue: string;
          flabebeWhite: string;
          furfrouHeart: string;
          furfrouStar: string;
          furfrouDiamond: string;
          furfrouDebutante: string;
          furfrouMatron: string;
          furfrouDandy: string;
          furfrouLaReine: string;
          furfrouKabuki: string;
          furfrouPharaoh: string;
          pumpkabooSmall: string;
          pumpkabooLarge: string;
          pumpkabooSuper: string;
          xerneasNeutral: string;
          xerneasActive: string;
          zygarde50: string;
          zygarde10: string;
          zygarde50Pc: string;
          zygarde10Pc: string;
          zygardeComplete: string;
          oricorioBaile: string;
          oricorioPompom: string;
          oricorioPau: string;
          oricorioSensu: string;
          rockruffOwnTempo: string;
          miniorRedMeteor: string;
          miniorOrangeMeteor: string;
          miniorYellowMeteor: string;
          miniorGreenMeteor: string;
          miniorBlueMeteor: string;
          miniorIndigoMeteor: string;
          miniorVioletMeteor: string;
          miniorRed: string;
          miniorOrange: string;
          miniorYellow: string;
          miniorGreen: string;
          miniorBlue: string;
          miniorIndigo: string;
          miniorViolet: string;
          mimikyuDisguised: string;
          mimikyuBusted: string;
          magearnaOriginal: string;
          marshadowZenith: string;
          sinisteaPhony: string;
          sinisteaAntique: string;
          eiscueNoIce: string;
          indeedeeMale: string;
          indeedeeFemale: string;
          morpekoFullBelly: string;
          zacianHeroOfManyBattles: string;
          zamazentaHeroOfManyBattles: string;
          zarudeDada: string;
          enamorusIncarnate: string;
          squawkabillyGreenPlumage: string;
          squawkabillyBluePlumage: string;
          squawkabillyYellowPlumage: string;
          squawkabillyWhitePlumage: string;
          tatsugiriCurly: string;
          tatsugiriDroopy: string;
          tatsugiriStretchy: string;
          gimmighoulChest: string;
          gimmighoulRoaming: string;
          koraidonApexBuild: string;
          koraidonLimitedBuild: string;
          koraidonSprintingBuild: string;
          koraidonSwimmingBuild: string;
          koraidonGlidingBuild: string;
          miraidonUltimateMode: string;
          miraidonLowPowerMode: string;
          miraidonDriveMode: string;
          miraidonAquaticMode: string;
          miraidonGlideMode: string;
          poltchageistCounterfeit: string;
          poltchageistArtisan: string;
          paldeaTaurosCombat: string;
          paldeaTaurosBlaze: string;
          paldeaTaurosAqua: string;
      };
      pokemonInfo: {
          Stat: {
              HP: string;
              HPshortened: string;
              ATK: string;
              ATKshortened: string;
              DEF: string;
              DEFshortened: string;
              SPATK: string;
              SPATKshortened: string;
              SPDEF: string;
              SPDEFshortened: string;
              SPD: string;
              SPDshortened: string;
              ACC: string;
              EVA: string;
          };
          Type: {
              UNKNOWN: string;
              NORMAL: string;
              FIGHTING: string;
              FLYING: string;
              POISON: string;
              GROUND: string;
              ROCK: string;
              BUG: string;
              GHOST: string;
              STEEL: string;
              FIRE: string;
              WATER: string;
              GRASS: string;
              ELECTRIC: string;
              PSYCHIC: string;
              ICE: string;
              DRAGON: string;
              DARK: string;
              FAIRY: string;
              STELLAR: string;
          };
      };
      pokemonInfoContainer: {
          moveset: string;
          gender: string;
          ability: string;
          nature: string;
          form: string;
      };
      pokemonSummary: {
          pokemonInfo: string;
          status: string;
          powerAccuracyCategory: string;
          type: string;
          unknownTrainer: string;
          ot: string;
          nature: string;
          expPoints: string;
          nextLv: string;
          cancel: string;
          memoString: string;
          metFragment: {
              normal: string;
              apparently: string;
          };
          natureFragment: {
              Hardy: string;
              Lonely: string;
              Brave: string;
              Adamant: string;
              Naughty: string;
              Bold: string;
              Docile: string;
              Relaxed: string;
              Impish: string;
              Lax: string;
              Timid: string;
              Hasty: string;
              Serious: string;
              Jolly: string;
              Naive: string;
              Modest: string;
              Mild: string;
              Quiet: string;
              Bashful: string;
              Rash: string;
              Calm: string;
              Gentle: string;
              Sassy: string;
              Careful: string;
              Quirky: string;
          };
      };
      saveSlotSelectUiHandler: {
          overwriteData: string;
          loading: string;
          wave: string;
          lv: string;
          empty: string;
      };
      settings: {
          boy: string;
          girl: string;
          general: string;
          display: string;
          audio: string;
          gamepad: string;
          keyboard: string;
          gameSpeed: string;
          hpBarSpeed: string;
          expGainsSpeed: string;
          expPartyDisplay: string;
          skipSeenDialogues: string;
          battleStyle: string;
          enableRetries: string;
          hideIvs: string;
          tutorials: string;
          touchControls: string;
          vibrations: string;
          normal: string;
          fast: string;
          faster: string;
          skip: string;
          levelUpNotifications: string;
          on: string;
          off: string;
          switch: string;
          set: string;
          auto: string;
          disabled: string;
          language: string;
          change: string;
          uiTheme: string;
          default: string;
          legacy: string;
          windowType: string;
          moneyFormat: string;
          damageNumbers: string;
          simple: string;
          fancy: string;
          abbreviated: string;
          moveAnimations: string;
          showStatsOnLevelUp: string;
          candyUpgradeNotification: string;
          passivesOnly: string;
          candyUpgradeDisplay: string;
          icon: string;
          animation: string;
          moveInfo: string;
          showMovesetFlyout: string;
          showArenaFlyout: string;
          showTimeOfDayWidget: string;
          timeOfDayAnimation: string;
          bounce: string;
          timeOfDay_back: string;
          spriteSet: string;
          consistent: string;
          mixedAnimated: string;
          fusionPaletteSwaps: string;
          playerGender: string;
          typeHints: string;
          masterVolume: string;
          bgmVolume: string;
          fieldVolume: string;
          seVolume: string;
          uiVolume: string;
          musicPreference: string;
          mixed: string;
          gamepadPleasePlug: string;
          delete: string;
          keyboardPleasePress: string;
          reset: string;
          requireReload: string;
          action: string;
          back: string;
          pressToBind: string;
          pressButton: string;
          buttonUp: string;
          buttonDown: string;
          buttonLeft: string;
          buttonRight: string;
          buttonAction: string;
          buttonMenu: string;
          buttonSubmit: string;
          buttonCancel: string;
          buttonStats: string;
          buttonCycleForm: string;
          buttonCycleShiny: string;
          buttonCycleGender: string;
          buttonCycleAbility: string;
          buttonCycleNature: string;
          buttonCycleVariant: string;
          buttonSpeedUp: string;
          buttonSlowDown: string;
          alt: string;
          mute: string;
          controller: string;
          gamepadSupport: string;
          showBgmBar: string;
          moveTouchControls: string;
          shopOverlayOpacity: string;
          shopCursorTarget: string;
          rewards: string;
          reroll: string;
          shop: string;
          checkTeam: string;
      };
      splashMessages: {
          battlesWon: string;
          joinTheDiscord: string;
          infiniteLevels: string;
          everythingStacks: string;
          optionalSaveScumming: string;
          biomes: string;
          openSource: string;
          playWithSpeed: string;
          liveBugTesting: string;
          heavyInfluence: string;
          pokemonRiskAndPokemonRain: string;
          nowWithMoreSalt: string;
          infiniteFusionAtHome: string;
          brokenEggMoves: string;
          magnificent: string;
          mubstitute: string;
          thatsCrazy: string;
          oranceJuice: string;
          questionableBalancing: string;
          coolShaders: string;
          aiFree: string;
          suddenDifficultySpikes: string;
          basedOnAnUnfinishedFlashGame: string;
          moreAddictiveThanIntended: string;
          mostlyConsistentSeeds: string;
          achievementPointsDontDoAnything: string;
          youDoNotStartAtLevel: string;
          dontTalkAboutTheManaphyEggIncident: string;
          alsoTryPokengine: string;
          alsoTryEmeraldRogue: string;
          alsoTryRadicalRed: string;
          eeveeExpo: string;
          ynoproject: string;
          breedersInSpace: string;
      };
      starterSelectUiHandler: {
          confirmStartTeam: string;
          confirmExit: string;
          invalidParty: string;
          gen1: string;
          gen2: string;
          gen3: string;
          gen4: string;
          gen5: string;
          gen6: string;
          gen7: string;
          gen8: string;
          gen9: string;
          growthRate: string;
          ability: string;
          passive: string;
          nature: string;
          eggMoves: string;
          addToParty: string;
          removeFromParty: string;
          toggleIVs: string;
          manageMoves: string;
          manageNature: string;
          addToFavorites: string;
          removeFromFavorites: string;
          useCandies: string;
          selectNature: string;
          selectMoveSwapOut: string;
          selectMoveSwapWith: string;
          unlockPassive: string;
          reduceCost: string;
          sameSpeciesEgg: string;
          cycleShiny: string;
          cycleForm: string;
          cycleGender: string;
          cycleAbility: string;
          cycleNature: string;
          cycleVariant: string;
          goFilter: string;
          enablePassive: string;
          disablePassive: string;
          locked: string;
          disabled: string;
          uncaught: string;
      };
      statusEffect: {
          none: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          poison: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          toxic: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          paralysis: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          sleep: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          freeze: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          burn: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
      };
      terrain: {
          misty: string;
          mistyStartMessage: string;
          mistyClearMessage: string;
          mistyBlockMessage: string;
          electric: string;
          electricStartMessage: string;
          electricClearMessage: string;
          grassy: string;
          grassyStartMessage: string;
          grassyClearMessage: string;
          psychic: string;
          psychicStartMessage: string;
          psychicClearMessage: string;
          defaultBlockMessage: string;
      };
      titles: {
          elite_four: string;
          elite_four_female: string;
          gym_leader: string;
          gym_leader_female: string;
          gym_leader_double: string;
          champion: string;
          champion_female: string;
          champion_double: string;
          rival: string;
          professor: string;
          frontier_brain: string;
          rocket_boss: string;
          magma_boss: string;
          aqua_boss: string;
          galactic_boss: string;
          plasma_boss: string;
          flare_boss: string;
          aether_boss: string;
          skull_boss: string;
          macro_boss: string;
          rocket_admin: string;
          rocket_admin_female: string;
          magma_admin: string;
          magma_admin_female: string;
          aqua_admin: string;
          aqua_admin_female: string;
          galactic_commander: string;
          galactic_commander_female: string;
          plasma_sage: string;
          plasma_admin: string;
          flare_admin: string;
          flare_admin_female: string;
          aether_admin: string;
          skull_admin: string;
          macro_admin: string;
      };
      trainerClasses: {
          ace_trainer: string;
          ace_trainer_female: string;
          ace_duo: string;
          artist: string;
          artist_female: string;
          backers: string;
          backpacker: string;
          backpacker_female: string;
          backpackers: string;
          baker: string;
          battle_girl: string;
          beauty: string;
          beginners: string;
          biker: string;
          black_belt: string;
          breeder: string;
          breeder_female: string;
          breeders: string;
          clerk: string;
          clerk_female: string;
          colleagues: string;
          crush_kin: string;
          cyclist: string;
          cyclist_female: string;
          cyclists: string;
          dancer: string;
          dancer_female: string;
          depot_agent: string;
          doctor: string;
          doctor_female: string;
          firebreather: string;
          fisherman: string;
          fisherman_female: string;
          gentleman: string;
          guitarist: string;
          guitarist_female: string;
          harlequin: string;
          hiker: string;
          hooligans: string;
          hoopster: string;
          infielder: string;
          janitor: string;
          lady: string;
          lass: string;
          linebacker: string;
          maid: string;
          madame: string;
          medical_team: string;
          musician: string;
          hex_maniac: string;
          nurse: string;
          nursery_aide: string;
          officer: string;
          parasol_lady: string;
          pilot: string;
          pokéfan: string;
          pokéfan_female: string;
          pokéfan_family: string;
          preschooler: string;
          preschooler_female: string;
          preschoolers: string;
          psychic: string;
          psychic_female: string;
          psychics: string;
          pokémon_ranger: string;
          pokémon_ranger_female: string;
          pokémon_rangers: string;
          ranger: string;
          restaurant_staff: string;
          rich: string;
          rich_female: string;
          rich_boy: string;
          rich_couple: string;
          rich_kid: string;
          rich_kid_female: string;
          rich_kids: string;
          roughneck: string;
          sailor: string;
          scientist: string;
          scientist_female: string;
          scientists: string;
          smasher: string;
          snow_worker: string;
          snow_worker_female: string;
          striker: string;
          school_kid: string;
          school_kid_female: string;
          school_kids: string;
          swimmer: string;
          swimmer_female: string;
          swimmers: string;
          twins: string;
          veteran: string;
          veteran_female: string;
          veteran_duo: string;
          waiter: string;
          waitress: string;
          worker: string;
          worker_female: string;
          workers: string;
          youngster: string;
          rocket_grunt: string;
          rocket_grunts: string;
          rocket_grunt_female: string;
          magma_grunt: string;
          magma_grunt_female: string;
          magma_grunts: string;
          aqua_grunt: string;
          aqua_grunt_female: string;
          aqua_grunts: string;
          galactic_grunt: string;
          galactic_grunt_female: string;
          galactic_grunts: string;
          plasma_grunt: string;
          plasma_grunt_female: string;
          plasma_grunts: string;
          flare_grunt: string;
          flare_grunt_female: string;
          flare_grunts: string;
          aether_grunt: string;
          aether_grunt_female: string;
          aether_grunts: string;
          skull_grunt: string;
          skull_grunt_female: string;
          skull_grunts: string;
          macro_grunt: string;
          macro_grunt_female: string;
          macro_grunts: string;
      };
      trainerNames: {
          brock: string;
          misty: string;
          lt_surge: string;
          erika: string;
          janine: string;
          sabrina: string;
          blaine: string;
          giovanni: string;
          falkner: string;
          bugsy: string;
          whitney: string;
          morty: string;
          chuck: string;
          jasmine: string;
          pryce: string;
          clair: string;
          roxanne: string;
          brawly: string;
          wattson: string;
          flannery: string;
          norman: string;
          winona: string;
          tate: string;
          liza: string;
          juan: string;
          roark: string;
          gardenia: string;
          maylene: string;
          crasher_wake: string;
          fantina: string;
          byron: string;
          candice: string;
          volkner: string;
          cilan: string;
          chili: string;
          cress: string;
          cheren: string;
          lenora: string;
          roxie: string;
          burgh: string;
          elesa: string;
          clay: string;
          skyla: string;
          brycen: string;
          drayden: string;
          marlon: string;
          viola: string;
          grant: string;
          korrina: string;
          ramos: string;
          clemont: string;
          valerie: string;
          olympia: string;
          wulfric: string;
          milo: string;
          nessa: string;
          kabu: string;
          bea: string;
          allister: string;
          opal: string;
          bede: string;
          gordie: string;
          melony: string;
          piers: string;
          marnie: string;
          raihan: string;
          katy: string;
          brassius: string;
          iono: string;
          kofu: string;
          larry: string;
          ryme: string;
          tulip: string;
          grusha: string;
          lorelei: string;
          bruno: string;
          agatha: string;
          lance: string;
          will: string;
          koga: string;
          karen: string;
          sidney: string;
          phoebe: string;
          glacia: string;
          drake: string;
          aaron: string;
          bertha: string;
          flint: string;
          lucian: string;
          shauntal: string;
          marshal: string;
          grimsley: string;
          caitlin: string;
          malva: string;
          siebold: string;
          wikstrom: string;
          drasna: string;
          hala: string;
          molayne: string;
          olivia: string;
          acerola: string;
          kahili: string;
          rika: string;
          poppy: string;
          hassel: string;
          crispin: string;
          amarys: string;
          lacey: string;
          drayton: string;
          blue: string;
          red: string;
          steven: string;
          wallace: string;
          cynthia: string;
          alder: string;
          iris: string;
          diantha: string;
          hau: string;
          geeta: string;
          nemona: string;
          kieran: string;
          leon: string;
          rival: string;
          rival_female: string;
          archer: string;
          ariana: string;
          proton: string;
          petrel: string;
          tabitha: string;
          courtney: string;
          shelly: string;
          matt: string;
          mars: string;
          jupiter: string;
          saturn: string;
          zinzolin: string;
          rood: string;
          xerosic: string;
          bryony: string;
          faba: string;
          plumeria: string;
          oleana: string;
          maxie: string;
          archie: string;
          cyrus: string;
          ghetsis: string;
          lysandre: string;
          lusamine: string;
          guzma: string;
          rose: string;
          blue_red_double: string;
          red_blue_double: string;
          tate_liza_double: string;
          liza_tate_double: string;
          steven_wallace_double: string;
          wallace_steven_double: string;
          alder_iris_double: string;
          iris_alder_double: string;
          marnie_piers_double: string;
          piers_marnie_double: string;
      };
      tutorial: {
          intro: string;
          accessMenu: string;
          menu: string;
          starterSelect: string;
          pokerus: string;
          statChange: string;
          selectItem: string;
          eggGacha: string;
      };
      voucher: {
          vouchers: string;
          eggVoucher: string;
          eggVoucherPlus: string;
          eggVoucherPremium: string;
          eggVoucherGold: string;
          locked: string;
          defeatTrainer: string;
      };
      weather: {
          sunnyStartMessage: string;
          sunnyLapseMessage: string;
          sunnyClearMessage: string;
          rainStartMessage: string;
          rainLapseMessage: string;
          rainClearMessage: string;
          sandstormStartMessage: string;
          sandstormLapseMessage: string;
          sandstormClearMessage: string;
          sandstormDamageMessage: string;
          hailStartMessage: string;
          hailLapseMessage: string;
          hailClearMessage: string;
          hailDamageMessage: string;
          snowStartMessage: string;
          snowLapseMessage: string;
          snowClearMessage: string;
          fogStartMessage: string;
          fogLapseMessage: string;
          fogClearMessage: string;
          heavyRainStartMessage: string;
          heavyRainLapseMessage: string;
          heavyRainClearMessage: string;
          harshSunStartMessage: string;
          harshSunLapseMessage: string;
          harshSunClearMessage: string;
          strongWindsStartMessage: string;
          strongWindsLapseMessage: string;
          strongWindsEffectMessage: string;
          strongWindsClearMessage: string;
      };
      partyUiHandler: {
          SEND_OUT: string;
          SUMMARY: string;
          CANCEL: string;
          RELEASE: string;
          APPLY: string;
          TEACH: string;
          SPLICE: string;
          UNSPLICE: string;
          ACTIVATE: string;
          DEACTIVATE: string;
          TRANSFER: string;
          ALL: string;
          PASS_BATON: string;
          UNPAUSE_EVOLUTION: string;
          REVIVE: string;
          RENAME: string;
          choosePokemon: string;
          doWhatWithThisPokemon: string;
          noEnergy: string;
          hasEnergy: string;
          cantBeUsed: string;
          tooManyItems: string;
          anyEffect: string;
          unpausedEvolutions: string;
          unspliceConfirmation: string;
          wasReverted: string;
          releaseConfirmation: string;
          releaseInBattle: string;
          selectAMove: string;
          changeQuantity: string;
          selectAnotherPokemonToSplice: string;
          cancel: string;
          able: string;
          notAble: string;
          learned: string;
          goodbye: string;
          byebye: string;
          farewell: string;
          soLong: string;
          thisIsWhereWePart: string;
          illMissYou: string;
          illNeverForgetYou: string;
          untilWeMeetAgain: string;
          sayonara: string;
          smellYaLater: string;
      };
      modifierSelectUiHandler: {
          transfer: string;
          reroll: string;
          lockRarities: string;
          checkTeam: string;
          transferDesc: string;
          rerollDesc: string;
          lockRaritiesDesc: string;
          checkTeamDesc: string;
          rerollCost: string;
          itemCost: string;
      };
      moveTriggers: {
          hitWithRecoil: string;
          cutHpPowerUpMove: string;
          absorbedElectricity: string;
          switchedStatChanges: string;
          switchedTwoStatChanges: string;
          switchedStat: string;
          sharedGuard: string;
          sharedPower: string;
          goingAllOutForAttack: string;
          regainedHealth: string;
          keptGoingAndCrashed: string;
          fled: string;
          cannotBeSwitchedOut: string;
          swappedAbilitiesWithTarget: string;
          coinsScatteredEverywhere: string;
          attackedByItem: string;
          whippedUpAWhirlwind: string;
          flewUpHigh: string;
          tookInSunlight: string;
          dugAHole: string;
          loweredItsHead: string;
          isGlowing: string;
          bellChimed: string;
          foresawAnAttack: string;
          isTighteningFocus: string;
          hidUnderwater: string;
          soothingAromaWaftedThroughArea: string;
          sprangUp: string;
          choseDoomDesireAsDestiny: string;
          vanishedInstantly: string;
          tookTargetIntoSky: string;
          becameCloakedInFreezingLight: string;
          becameCloakedInFreezingAir: string;
          isChargingPower: string;
          burnedItselfOut: string;
          startedHeatingUpBeak: string;
          setUpShellTrap: string;
          isOverflowingWithSpacePower: string;
          usedUpAllElectricity: string;
          stoleItem: string;
          incineratedItem: string;
          knockedOffItem: string;
          tookMoveAttack: string;
          cutOwnHpAndMaximizedStat: string;
          copiedStatChanges: string;
          magnitudeMessage: string;
          tookAimAtTarget: string;
          transformedIntoType: string;
          copiedMove: string;
          sketchedMove: string;
          acquiredAbility: string;
          copiedTargetAbility: string;
          transformedIntoTarget: string;
          tryingToTakeFoeDown: string;
          addType: string;
          cannotUseMove: string;
          healHp: string;
          sacrificialFullRestore: string;
          invertStats: string;
          resetStats: string;
          statEliminated: string;
          faintCountdown: string;
          copyType: string;
          suppressAbilities: string;
          revivalBlessing: string;
          swapArenaTags: string;
          exposedMove: string;
          safeguard: string;
      };
      runHistory: {
          victory: string;
          defeatedWild: string;
          defeatedTrainer: string;
          defeatedTrainerDouble: string;
          defeatedRival: string;
          defeated: string;
          defeatedWild_female: string;
          defeatedTrainer_female: string;
          defeatedTrainerDouble_female: string;
          defeatedRival_female: string;
          defeated_female: string;
          luck: string;
          score: string;
          mode: string;
          challengeRules: string;
          challengeMonoGen1: string;
          challengeMonoGen2: string;
          challengeMonoGen3: string;
          challengeMonoGen4: string;
          challengeMonoGen5: string;
          challengeMonoGen6: string;
          challengeMonoGen7: string;
          challengeMonoGen8: string;
          challengeMonoGen9: string;
          playerItems: string;
          personalBest: string;
          SPDshortened: string;
          runInfo: string;
          money: string;
          runLength: string;
          viewHeldItems: string;
          hallofFameText: string;
          hallofFameText_female: string;
          viewHallOfFame: string;
          viewEndingSplash: string;
      };
  };
  
}

declare namespace PokeRogue.locales.es {
  export declare const esConfig: {
      ability: {
          stench: {
              name: string;
              description: string;
          };
          drizzle: {
              name: string;
              description: string;
          };
          speedBoost: {
              name: string;
              description: string;
          };
          battleArmor: {
              name: string;
              description: string;
          };
          sturdy: {
              name: string;
              description: string;
          };
          damp: {
              name: string;
              description: string;
          };
          limber: {
              name: string;
              description: string;
          };
          sandVeil: {
              name: string;
              description: string;
          };
          static: {
              name: string;
              description: string;
          };
          voltAbsorb: {
              name: string;
              description: string;
          };
          waterAbsorb: {
              name: string;
              description: string;
          };
          oblivious: {
              name: string;
              description: string;
          };
          cloudNine: {
              name: string;
              description: string;
          };
          compoundEyes: {
              name: string;
              description: string;
          };
          insomnia: {
              name: string;
              description: string;
          };
          colorChange: {
              name: string;
              description: string;
          };
          immunity: {
              name: string;
              description: string;
          };
          flashFire: {
              name: string;
              description: string;
          };
          shieldDust: {
              name: string;
              description: string;
          };
          ownTempo: {
              name: string;
              description: string;
          };
          suctionCups: {
              name: string;
              description: string;
          };
          intimidate: {
              name: string;
              description: string;
          };
          shadowTag: {
              name: string;
              description: string;
          };
          roughSkin: {
              name: string;
              description: string;
          };
          wonderGuard: {
              name: string;
              description: string;
          };
          levitate: {
              name: string;
              description: string;
          };
          effectSpore: {
              name: string;
              description: string;
          };
          synchronize: {
              name: string;
              description: string;
          };
          clearBody: {
              name: string;
              description: string;
          };
          naturalCure: {
              name: string;
              description: string;
          };
          lightningRod: {
              name: string;
              description: string;
          };
          sereneGrace: {
              name: string;
              description: string;
          };
          swiftSwim: {
              name: string;
              description: string;
          };
          chlorophyll: {
              name: string;
              description: string;
          };
          illuminate: {
              name: string;
              description: string;
          };
          trace: {
              name: string;
              description: string;
          };
          hugePower: {
              name: string;
              description: string;
          };
          poisonPoint: {
              name: string;
              description: string;
          };
          innerFocus: {
              name: string;
              description: string;
          };
          magmaArmor: {
              name: string;
              description: string;
          };
          waterVeil: {
              name: string;
              description: string;
          };
          magnetPull: {
              name: string;
              description: string;
          };
          soundproof: {
              name: string;
              description: string;
          };
          rainDish: {
              name: string;
              description: string;
          };
          sandStream: {
              name: string;
              description: string;
          };
          pressure: {
              name: string;
              description: string;
          };
          thickFat: {
              name: string;
              description: string;
          };
          earlyBird: {
              name: string;
              description: string;
          };
          flameBody: {
              name: string;
              description: string;
          };
          runAway: {
              name: string;
              description: string;
          };
          keenEye: {
              name: string;
              description: string;
          };
          hyperCutter: {
              name: string;
              description: string;
          };
          pickup: {
              name: string;
              description: string;
          };
          truant: {
              name: string;
              description: string;
          };
          hustle: {
              name: string;
              description: string;
          };
          cuteCharm: {
              name: string;
              description: string;
          };
          plus: {
              name: string;
              description: string;
          };
          minus: {
              name: string;
              description: string;
          };
          forecast: {
              name: string;
              description: string;
          };
          stickyHold: {
              name: string;
              description: string;
          };
          shedSkin: {
              name: string;
              description: string;
          };
          guts: {
              name: string;
              description: string;
          };
          marvelScale: {
              name: string;
              description: string;
          };
          liquidOoze: {
              name: string;
              description: string;
          };
          overgrow: {
              name: string;
              description: string;
          };
          blaze: {
              name: string;
              description: string;
          };
          torrent: {
              name: string;
              description: string;
          };
          swarm: {
              name: string;
              description: string;
          };
          rockHead: {
              name: string;
              description: string;
          };
          drought: {
              name: string;
              description: string;
          };
          arenaTrap: {
              name: string;
              description: string;
          };
          vitalSpirit: {
              name: string;
              description: string;
          };
          whiteSmoke: {
              name: string;
              description: string;
          };
          purePower: {
              name: string;
              description: string;
          };
          shellArmor: {
              name: string;
              description: string;
          };
          airLock: {
              name: string;
              description: string;
          };
          tangledFeet: {
              name: string;
              description: string;
          };
          motorDrive: {
              name: string;
              description: string;
          };
          rivalry: {
              name: string;
              description: string;
          };
          steadfast: {
              name: string;
              description: string;
          };
          snowCloak: {
              name: string;
              description: string;
          };
          gluttony: {
              name: string;
              description: string;
          };
          angerPoint: {
              name: string;
              description: string;
          };
          unburden: {
              name: string;
              description: string;
          };
          heatproof: {
              name: string;
              description: string;
          };
          simple: {
              name: string;
              description: string;
          };
          drySkin: {
              name: string;
              description: string;
          };
          download: {
              name: string;
              description: string;
          };
          ironFist: {
              name: string;
              description: string;
          };
          poisonHeal: {
              name: string;
              description: string;
          };
          adaptability: {
              name: string;
              description: string;
          };
          skillLink: {
              name: string;
              description: string;
          };
          hydration: {
              name: string;
              description: string;
          };
          solarPower: {
              name: string;
              description: string;
          };
          quickFeet: {
              name: string;
              description: string;
          };
          normalize: {
              name: string;
              description: string;
          };
          sniper: {
              name: string;
              description: string;
          };
          magicGuard: {
              name: string;
              description: string;
          };
          noGuard: {
              name: string;
              description: string;
          };
          stall: {
              name: string;
              description: string;
          };
          technician: {
              name: string;
              description: string;
          };
          leafGuard: {
              name: string;
              description: string;
          };
          klutz: {
              name: string;
              description: string;
          };
          moldBreaker: {
              name: string;
              description: string;
          };
          superLuck: {
              name: string;
              description: string;
          };
          aftermath: {
              name: string;
              description: string;
          };
          anticipation: {
              name: string;
              description: string;
          };
          forewarn: {
              name: string;
              description: string;
          };
          unaware: {
              name: string;
              description: string;
          };
          tintedLens: {
              name: string;
              description: string;
          };
          filter: {
              name: string;
              description: string;
          };
          slowStart: {
              name: string;
              description: string;
          };
          scrappy: {
              name: string;
              description: string;
          };
          stormDrain: {
              name: string;
              description: string;
          };
          iceBody: {
              name: string;
              description: string;
          };
          solidRock: {
              name: string;
              description: string;
          };
          snowWarning: {
              name: string;
              description: string;
          };
          honeyGather: {
              name: string;
              description: string;
          };
          frisk: {
              name: string;
              description: string;
          };
          reckless: {
              name: string;
              description: string;
          };
          multitype: {
              name: string;
              description: string;
          };
          flowerGift: {
              name: string;
              description: string;
          };
          badDreams: {
              name: string;
              description: string;
          };
          pickpocket: {
              name: string;
              description: string;
          };
          sheerForce: {
              name: string;
              description: string;
          };
          contrary: {
              name: string;
              description: string;
          };
          unnerve: {
              name: string;
              description: string;
          };
          defiant: {
              name: string;
              description: string;
          };
          defeatist: {
              name: string;
              description: string;
          };
          cursedBody: {
              name: string;
              description: string;
          };
          healer: {
              name: string;
              description: string;
          };
          friendGuard: {
              name: string;
              description: string;
          };
          weakArmor: {
              name: string;
              description: string;
          };
          heavyMetal: {
              name: string;
              description: string;
          };
          lightMetal: {
              name: string;
              description: string;
          };
          multiscale: {
              name: string;
              description: string;
          };
          toxicBoost: {
              name: string;
              description: string;
          };
          flareBoost: {
              name: string;
              description: string;
          };
          harvest: {
              name: string;
              description: string;
          };
          telepathy: {
              name: string;
              description: string;
          };
          moody: {
              name: string;
              description: string;
          };
          overcoat: {
              name: string;
              description: string;
          };
          poisonTouch: {
              name: string;
              description: string;
          };
          regenerator: {
              name: string;
              description: string;
          };
          bigPecks: {
              name: string;
              description: string;
          };
          sandRush: {
              name: string;
              description: string;
          };
          wonderSkin: {
              name: string;
              description: string;
          };
          analytic: {
              name: string;
              description: string;
          };
          illusion: {
              name: string;
              description: string;
          };
          imposter: {
              name: string;
              description: string;
          };
          infiltrator: {
              name: string;
              description: string;
          };
          mummy: {
              name: string;
              description: string;
          };
          moxie: {
              name: string;
              description: string;
          };
          justified: {
              name: string;
              description: string;
          };
          rattled: {
              name: string;
              description: string;
          };
          magicBounce: {
              name: string;
              description: string;
          };
          sapSipper: {
              name: string;
              description: string;
          };
          prankster: {
              name: string;
              description: string;
          };
          sandForce: {
              name: string;
              description: string;
          };
          ironBarbs: {
              name: string;
              description: string;
          };
          zenMode: {
              name: string;
              description: string;
          };
          victoryStar: {
              name: string;
              description: string;
          };
          turboblaze: {
              name: string;
              description: string;
          };
          teravolt: {
              name: string;
              description: string;
          };
          aromaVeil: {
              name: string;
              description: string;
          };
          flowerVeil: {
              name: string;
              description: string;
          };
          cheekPouch: {
              name: string;
              description: string;
          };
          protean: {
              name: string;
              description: string;
          };
          furCoat: {
              name: string;
              description: string;
          };
          magician: {
              name: string;
              description: string;
          };
          bulletproof: {
              name: string;
              description: string;
          };
          competitive: {
              name: string;
              description: string;
          };
          strongJaw: {
              name: string;
              description: string;
          };
          refrigerate: {
              name: string;
              description: string;
          };
          sweetVeil: {
              name: string;
              description: string;
          };
          stanceChange: {
              name: string;
              description: string;
          };
          galeWings: {
              name: string;
              description: string;
          };
          megaLauncher: {
              name: string;
              description: string;
          };
          grassPelt: {
              name: string;
              description: string;
          };
          symbiosis: {
              name: string;
              description: string;
          };
          toughClaws: {
              name: string;
              description: string;
          };
          pixilate: {
              name: string;
              description: string;
          };
          gooey: {
              name: string;
              description: string;
          };
          aerilate: {
              name: string;
              description: string;
          };
          parentalBond: {
              name: string;
              description: string;
          };
          darkAura: {
              name: string;
              description: string;
          };
          fairyAura: {
              name: string;
              description: string;
          };
          auraBreak: {
              name: string;
              description: string;
          };
          primordialSea: {
              name: string;
              description: string;
          };
          desolateLand: {
              name: string;
              description: string;
          };
          deltaStream: {
              name: string;
              description: string;
          };
          stamina: {
              name: string;
              description: string;
          };
          wimpOut: {
              name: string;
              description: string;
          };
          emergencyExit: {
              name: string;
              description: string;
          };
          waterCompaction: {
              name: string;
              description: string;
          };
          merciless: {
              name: string;
              description: string;
          };
          shieldsDown: {
              name: string;
              description: string;
          };
          stakeout: {
              name: string;
              description: string;
          };
          waterBubble: {
              name: string;
              description: string;
          };
          steelworker: {
              name: string;
              description: string;
          };
          berserk: {
              name: string;
              description: string;
          };
          slushRush: {
              name: string;
              description: string;
          };
          longReach: {
              name: string;
              description: string;
          };
          liquidVoice: {
              name: string;
              description: string;
          };
          triage: {
              name: string;
              description: string;
          };
          galvanize: {
              name: string;
              description: string;
          };
          surgeSurfer: {
              name: string;
              description: string;
          };
          schooling: {
              name: string;
              description: string;
          };
          disguise: {
              name: string;
              description: string;
          };
          battleBond: {
              name: string;
              description: string;
          };
          powerConstruct: {
              name: string;
              description: string;
          };
          corrosion: {
              name: string;
              description: string;
          };
          comatose: {
              name: string;
              description: string;
          };
          queenlyMajesty: {
              name: string;
              description: string;
          };
          innardsOut: {
              name: string;
              description: string;
          };
          dancer: {
              name: string;
              description: string;
          };
          battery: {
              name: string;
              description: string;
          };
          fluffy: {
              name: string;
              description: string;
          };
          dazzling: {
              name: string;
              description: string;
          };
          soulHeart: {
              name: string;
              description: string;
          };
          tanglingHair: {
              name: string;
              description: string;
          };
          receiver: {
              name: string;
              description: string;
          };
          powerOfAlchemy: {
              name: string;
              description: string;
          };
          beastBoost: {
              name: string;
              description: string;
          };
          rksSystem: {
              name: string;
              description: string;
          };
          electricSurge: {
              name: string;
              description: string;
          };
          psychicSurge: {
              name: string;
              description: string;
          };
          mistySurge: {
              name: string;
              description: string;
          };
          grassySurge: {
              name: string;
              description: string;
          };
          fullMetalBody: {
              name: string;
              description: string;
          };
          shadowShield: {
              name: string;
              description: string;
          };
          prismArmor: {
              name: string;
              description: string;
          };
          neuroforce: {
              name: string;
              description: string;
          };
          intrepidSword: {
              name: string;
              description: string;
          };
          dauntlessShield: {
              name: string;
              description: string;
          };
          libero: {
              name: string;
              description: string;
          };
          ballFetch: {
              name: string;
              description: string;
          };
          cottonDown: {
              name: string;
              description: string;
          };
          propellerTail: {
              name: string;
              description: string;
          };
          mirrorArmor: {
              name: string;
              description: string;
          };
          gulpMissile: {
              name: string;
              description: string;
          };
          stalwart: {
              name: string;
              description: string;
          };
          steamEngine: {
              name: string;
              description: string;
          };
          punkRock: {
              name: string;
              description: string;
          };
          sandSpit: {
              name: string;
              description: string;
          };
          iceScales: {
              name: string;
              description: string;
          };
          ripen: {
              name: string;
              description: string;
          };
          iceFace: {
              name: string;
              description: string;
          };
          powerSpot: {
              name: string;
              description: string;
          };
          mimicry: {
              name: string;
              description: string;
          };
          screenCleaner: {
              name: string;
              description: string;
          };
          steelySpirit: {
              name: string;
              description: string;
          };
          perishBody: {
              name: string;
              description: string;
          };
          wanderingSpirit: {
              name: string;
              description: string;
          };
          gorillaTactics: {
              name: string;
              description: string;
          };
          neutralizingGas: {
              name: string;
              description: string;
          };
          pastelVeil: {
              name: string;
              description: string;
          };
          hungerSwitch: {
              name: string;
              description: string;
          };
          quickDraw: {
              name: string;
              description: string;
          };
          unseenFist: {
              name: string;
              description: string;
          };
          curiousMedicine: {
              name: string;
              description: string;
          };
          transistor: {
              name: string;
              description: string;
          };
          dragonsMaw: {
              name: string;
              description: string;
          };
          chillingNeigh: {
              name: string;
              description: string;
          };
          grimNeigh: {
              name: string;
              description: string;
          };
          asOneGlastrier: {
              name: string;
              description: string;
          };
          asOneSpectrier: {
              name: string;
              description: string;
          };
          lingeringAroma: {
              name: string;
              description: string;
          };
          seedSower: {
              name: string;
              description: string;
          };
          thermalExchange: {
              name: string;
              description: string;
          };
          angerShell: {
              name: string;
              description: string;
          };
          purifyingSalt: {
              name: string;
              description: string;
          };
          wellBakedBody: {
              name: string;
              description: string;
          };
          windRider: {
              name: string;
              description: string;
          };
          guardDog: {
              name: string;
              description: string;
          };
          rockyPayload: {
              name: string;
              description: string;
          };
          windPower: {
              name: string;
              description: string;
          };
          zeroToHero: {
              name: string;
              description: string;
          };
          commander: {
              name: string;
              description: string;
          };
          electromorphosis: {
              name: string;
              description: string;
          };
          protosynthesis: {
              name: string;
              description: string;
          };
          quarkDrive: {
              name: string;
              description: string;
          };
          goodAsGold: {
              name: string;
              description: string;
          };
          vesselOfRuin: {
              name: string;
              description: string;
          };
          swordOfRuin: {
              name: string;
              description: string;
          };
          tabletsOfRuin: {
              name: string;
              description: string;
          };
          beadsOfRuin: {
              name: string;
              description: string;
          };
          orichalcumPulse: {
              name: string;
              description: string;
          };
          hadronEngine: {
              name: string;
              description: string;
          };
          opportunist: {
              name: string;
              description: string;
          };
          cudChew: {
              name: string;
              description: string;
          };
          sharpness: {
              name: string;
              description: string;
          };
          supremeOverlord: {
              name: string;
              description: string;
          };
          costar: {
              name: string;
              description: string;
          };
          toxicDebris: {
              name: string;
              description: string;
          };
          armorTail: {
              name: string;
              description: string;
          };
          earthEater: {
              name: string;
              description: string;
          };
          myceliumMight: {
              name: string;
              description: string;
          };
          mindsEye: {
              name: string;
              description: string;
          };
          supersweetSyrup: {
              name: string;
              description: string;
          };
          hospitality: {
              name: string;
              description: string;
          };
          toxicChain: {
              name: string;
              description: string;
          };
          embodyAspectTeal: {
              name: string;
              description: string;
          };
          embodyAspectWellspring: {
              name: string;
              description: string;
          };
          embodyAspectHearthflame: {
              name: string;
              description: string;
          };
          embodyAspectCornerstone: {
              name: string;
              description: string;
          };
          teraShift: {
              name: string;
              description: string;
          };
          teraShell: {
              name: string;
              description: string;
          };
          teraformZero: {
              name: string;
              description: string;
          };
          poisonPuppeteer: {
              name: string;
              description: string;
          };
      };
      abilityTriggers: {
          blockRecoilDamage: string;
          badDreams: string;
          costar: string;
          iceFaceAvoidedDamage: string;
          perishBody: string;
          poisonHeal: string;
          trace: string;
          windPowerCharged: string;
          quickDraw: string;
          disguiseAvoidedDamage: string;
          blockItemTheft: string;
          typeImmunityHeal: string;
          nonSuperEffectiveImmunity: string;
          moveImmunity: string;
          reverseDrain: string;
          postDefendTypeChange: string;
          postDefendContactDamage: string;
          postDefendAbilitySwap: string;
          postDefendAbilityGive: string;
          postDefendMoveDisable: string;
          pokemonTypeChange: string;
          postAttackStealHeldItem: string;
          postDefendStealHeldItem: string;
          copyFaintedAllyAbility: string;
          intimidateImmunity: string;
          postSummonAllyHeal: string;
          postSummonClearAllyStats: string;
          postSummonTransform: string;
          protectStat: string;
          statusEffectImmunityWithName: string;
          statusEffectImmunity: string;
          battlerTagImmunity: string;
          forewarn: string;
          frisk: string;
          postWeatherLapseHeal: string;
          postWeatherLapseDamage: string;
          postTurnLootCreateEatenBerry: string;
          postTurnHeal: string;
          fetchBall: string;
          healFromBerryUse: string;
          arenaTrap: string;
          postBattleLoot: string;
          postFaintContactDamage: string;
          postFaintHpDamage: string;
          postSummonPressure: string;
          weatherEffectDisappeared: string;
          postSummonMoldBreaker: string;
          postSummonAnticipation: string;
          postSummonTurboblaze: string;
          postSummonTeravolt: string;
          postSummonDarkAura: string;
          postSummonFairyAura: string;
          postSummonNeutralizingGas: string;
          postSummonAsOneGlastrier: string;
          postSummonAsOneSpectrier: string;
          postSummonVesselOfRuin: string;
          postSummonSwordOfRuin: string;
          postSummonTabletsOfRuin: string;
          postSummonBeadsOfRuin: string;
          preventBerryUse: string;
      };
      arenaFlyout: {
          activeBattleEffects: string;
          player: string;
          neutral: string;
          enemy: string;
          sunny: string;
          rain: string;
          sandstorm: string;
          hail: string;
          snow: string;
          fog: string;
          heavyRain: string;
          harshSun: string;
          strongWinds: string;
          misty: string;
          electric: string;
          grassy: string;
          psychic: string;
          mudSport: string;
          waterSport: string;
          spikes: string;
          toxicSpikes: string;
          mist: string;
          futureSight: string;
          doomDesire: string;
          wish: string;
          stealthRock: string;
          stickyWeb: string;
          trickRoom: string;
          gravity: string;
          reflect: string;
          lightScreen: string;
          auroraVeil: string;
          quickGuard: string;
          wideGuard: string;
          matBlock: string;
          craftyShield: string;
          tailwind: string;
          happyHour: string;
          safeguard: string;
      };
      arenaTag: {
          yourTeam: string;
          opposingTeam: string;
          arenaOnRemove: string;
          arenaOnRemovePlayer: string;
          arenaOnRemoveEnemy: string;
          mistOnAdd: string;
          mistApply: string;
          reflectOnAdd: string;
          reflectOnAddPlayer: string;
          reflectOnAddEnemy: string;
          lightScreenOnAdd: string;
          lightScreenOnAddPlayer: string;
          lightScreenOnAddEnemy: string;
          auroraVeilOnAdd: string;
          auroraVeilOnAddPlayer: string;
          auroraVeilOnAddEnemy: string;
          conditionalProtectOnAdd: string;
          conditionalProtectOnAddPlayer: string;
          conditionalProtectOnAddEnemy: string;
          conditionalProtectApply: string;
          matBlockOnAdd: string;
          noCritOnAddPlayer: string;
          noCritOnAddEnemy: string;
          noCritOnRemove: string;
          wishTagOnAdd: string;
          mudSportOnAdd: string;
          mudSportOnRemove: string;
          waterSportOnAdd: string;
          waterSportOnRemove: string;
          spikesOnAdd: string;
          spikesActivateTrap: string;
          toxicSpikesOnAdd: string;
          toxicSpikesActivateTrapPoison: string;
          stealthRockOnAdd: string;
          stealthRockActivateTrap: string;
          stickyWebOnAdd: string;
          stickyWebActivateTrap: string;
          trickRoomOnAdd: string;
          trickRoomOnRemove: string;
          gravityOnAdd: string;
          gravityOnRemove: string;
          tailwindOnAdd: string;
          tailwindOnAddPlayer: string;
          tailwindOnAddEnemy: string;
          tailwindOnRemove: string;
          tailwindOnRemovePlayer: string;
          tailwindOnRemoveEnemy: string;
          happyHourOnAdd: string;
          happyHourOnRemove: string;
          safeguardOnAdd: string;
          safeguardOnAddPlayer: string;
          safeguardOnAddEnemy: string;
          safeguardOnRemove: string;
          safeguardOnRemovePlayer: string;
          safeguardOnRemoveEnemy: string;
      };
      battle: {
          bossAppeared: string;
          trainerAppeared: string;
          trainerSendOut: string;
          singleWildAppeared: string;
          multiWildAppeared: string;
          playerComeBack: string;
          trainerComeBack: string;
          playerGo: string;
          trainerGo: string;
          switchQuestion: string;
          trainerDefeated: string;
          moneyWon: string;
          pokemonCaught: string;
          addedAsAStarter: string;
          partyFull: string;
          pokemon: string;
          sendOutPokemon: string;
          hitResultCriticalHit: string;
          hitResultSuperEffective: string;
          hitResultNotVeryEffective: string;
          hitResultNoEffect: string;
          hitResultImmune: string;
          hitResultOneHitKO: string;
          attackFailed: string;
          attackMissed: string;
          attackHitsCount: string;
          rewardGain: string;
          expGain: string;
          levelUp: string;
          learnMove: string;
          learnMovePrompt: string;
          learnMoveLimitReached: string;
          learnMoveReplaceQuestion: string;
          learnMoveStopTeaching: string;
          learnMoveNotLearned: string;
          learnMoveForgetQuestion: string;
          learnMoveForgetSuccess: string;
          countdownPoof: string;
          learnMoveAnd: string;
          levelCapUp: string;
          moveNotImplemented: string;
          moveNoPP: string;
          moveDisabled: string;
          noPokeballForce: string;
          noPokeballTrainer: string;
          noPokeballMulti: string;
          noPokeballStrong: string;
          noEscapeForce: string;
          noEscapeTrainer: string;
          noEscapePokemon: string;
          runAwaySuccess: string;
          runAwayCannotEscape: string;
          escapeVerbSwitch: string;
          escapeVerbFlee: string;
          notDisabled: string;
          turnEndHpRestore: string;
          hpIsFull: string;
          skipItemQuestion: string;
          itemStackFull: string;
          eggHatching: string;
          ivScannerUseQuestion: string;
          wildPokemonWithAffix: string;
          foePokemonWithAffix: string;
          useMove: string;
          drainMessage: string;
          regainHealth: string;
          stealEatBerry: string;
          fainted: string;
          statsAnd: string;
          stats: string;
          statRose_one: string;
          statRose_other: string;
          statSharplyRose_one: string;
          statSharplyRose_other: string;
          statRoseDrastically_one: string;
          statRoseDrastically_other: string;
          statWontGoAnyHigher_one: string;
          statWontGoAnyHigher_other: string;
          statFell_one: string;
          statFell_other: string;
          statHarshlyFell_one: string;
          statHarshlyFell_other: string;
          statSeverelyFell_one: string;
          statSeverelyFell_other: string;
          statWontGoAnyLower_one: string;
          statWontGoAnyLower_other: string;
      };
      battleScene: {
          moneyOwned: string;
      };
      battleInfo: {};
      battleMessageUiHandler: {
          ivBest: string;
          ivFantastic: string;
          ivVeryGood: string;
          ivPrettyGood: string;
          ivDecent: string;
          ivNoGood: string;
      };
      battlePokemonForm: {
          mega: string;
          "mega-x": string;
          "mega-y": string;
          primal: string;
          gigantamax: string;
          eternamax: string;
          megaChange: string;
          gigantamaxChange: string;
          eternamaxChange: string;
          revertChange: string;
          formChange: string;
          disguiseChange: string;
      };
      battlerTags: {
          trappedDesc: string;
          flinchedDesc: string;
          confusedDesc: string;
          infatuatedDesc: string;
          seedDesc: string;
          nightmareDesc: string;
          ingrainDesc: string;
          drowsyDesc: string;
          rechargingLapse: string;
          trappedOnAdd: string;
          trappedOnRemove: string;
          flinchedLapse: string;
          confusedOnAdd: string;
          confusedOnRemove: string;
          confusedOnOverlap: string;
          confusedLapse: string;
          confusedLapseHurtItself: string;
          destinyBondLapseIsBoss: string;
          destinyBondLapse: string;
          infatuatedOnAdd: string;
          infatuatedOnOverlap: string;
          infatuatedLapse: string;
          infatuatedLapseImmobilize: string;
          infatuatedOnRemove: string;
          seededOnAdd: string;
          seededLapse: string;
          seededLapseShed: string;
          nightmareOnAdd: string;
          nightmareOnOverlap: string;
          nightmareLapse: string;
          encoreOnAdd: string;
          encoreOnRemove: string;
          helpingHandOnAdd: string;
          ingrainLapse: string;
          ingrainOnTrap: string;
          aquaRingOnAdd: string;
          aquaRingLapse: string;
          drowsyOnAdd: string;
          damagingTrapLapse: string;
          bindOnTrap: string;
          wrapOnTrap: string;
          vortexOnTrap: string;
          clampOnTrap: string;
          sandTombOnTrap: string;
          magmaStormOnTrap: string;
          snapTrapOnTrap: string;
          thunderCageOnTrap: string;
          infestationOnTrap: string;
          protectedOnAdd: string;
          protectedLapse: string;
          enduringOnAdd: string;
          enduringLapse: string;
          sturdyLapse: string;
          perishSongLapse: string;
          centerOfAttentionOnAdd: string;
          truantLapse: string;
          slowStartOnAdd: string;
          slowStartOnRemove: string;
          highestStatBoostOnAdd: string;
          highestStatBoostOnRemove: string;
          magnetRisenOnAdd: string;
          magnetRisenOnRemove: string;
          critBoostOnAdd: string;
          critBoostOnRemove: string;
          saltCuredOnAdd: string;
          saltCuredLapse: string;
          cursedOnAdd: string;
          cursedLapse: string;
          stockpilingOnAdd: string;
      };
      berry: {
          SITRUS: {
              name: string;
              effect: string;
          };
          LUM: {
              name: string;
              effect: string;
          };
          ENIGMA: {
              name: string;
              effect: string;
          };
          LIECHI: {
              name: string;
              effect: string;
          };
          GANLON: {
              name: string;
              effect: string;
          };
          PETAYA: {
              name: string;
              effect: string;
          };
          APICOT: {
              name: string;
              effect: string;
          };
          SALAC: {
              name: string;
              effect: string;
          };
          LANSAT: {
              name: string;
              effect: string;
          };
          STARF: {
              name: string;
              effect: string;
          };
          LEPPA: {
              name: string;
              effect: string;
          };
      };
      bgmName: {
          music: string;
          missing_entries: string;
          battle_kanto_champion: string;
          battle_johto_champion: string;
          battle_hoenn_champion_g5: string;
          battle_hoenn_champion_g6: string;
          battle_sinnoh_champion: string;
          battle_champion_alder: string;
          battle_champion_iris: string;
          battle_kalos_champion: string;
          battle_alola_champion: string;
          battle_galar_champion: string;
          battle_champion_geeta: string;
          battle_champion_nemona: string;
          battle_champion_kieran: string;
          battle_hoenn_elite: string;
          battle_unova_elite: string;
          battle_kalos_elite: string;
          battle_alola_elite: string;
          battle_galar_elite: string;
          battle_paldea_elite: string;
          battle_bb_elite: string;
          battle_final_encounter: string;
          battle_final: string;
          battle_kanto_gym: string;
          battle_johto_gym: string;
          battle_hoenn_gym: string;
          battle_sinnoh_gym: string;
          battle_unova_gym: string;
          battle_kalos_gym: string;
          battle_galar_gym: string;
          battle_paldea_gym: string;
          battle_legendary_kanto: string;
          battle_legendary_raikou: string;
          battle_legendary_entei: string;
          battle_legendary_suicune: string;
          battle_legendary_lugia: string;
          battle_legendary_ho_oh: string;
          battle_legendary_regis_g5: string;
          battle_legendary_regis_g6: string;
          battle_legendary_gro_kyo: string;
          battle_legendary_rayquaza: string;
          battle_legendary_deoxys: string;
          battle_legendary_lake_trio: string;
          battle_legendary_sinnoh: string;
          battle_legendary_dia_pal: string;
          battle_legendary_origin_forme: string;
          battle_legendary_giratina: string;
          battle_legendary_arceus: string;
          battle_legendary_unova: string;
          battle_legendary_kyurem: string;
          battle_legendary_res_zek: string;
          battle_legendary_xern_yvel: string;
          battle_legendary_tapu: string;
          battle_legendary_sol_lun: string;
          battle_legendary_ub: string;
          battle_legendary_dusk_dawn: string;
          battle_legendary_ultra_nec: string;
          battle_legendary_zac_zam: string;
          battle_legendary_glas_spec: string;
          battle_legendary_calyrex: string;
          battle_legendary_riders: string;
          battle_legendary_birds_galar: string;
          battle_legendary_ruinous: string;
          battle_legendary_kor_mir: string;
          battle_legendary_loyal_three: string;
          battle_legendary_ogerpon: string;
          battle_legendary_terapagos: string;
          battle_legendary_pecharunt: string;
          battle_rival: string;
          battle_rival_2: string;
          battle_rival_3: string;
          battle_trainer: string;
          battle_wild: string;
          battle_wild_strong: string;
          end_summit: string;
          battle_rocket_grunt: string;
          battle_aqua_magma_grunt: string;
          battle_galactic_grunt: string;
          battle_plasma_grunt: string;
          battle_flare_grunt: string;
          battle_aether_grunt: string;
          battle_skull_grunt: string;
          battle_macro_grunt: string;
          battle_galactic_admin: string;
          battle_skull_admin: string;
          battle_oleana: string;
          battle_rocket_boss: string;
          battle_aqua_magma_boss: string;
          battle_galactic_boss: string;
          battle_plasma_boss: string;
          battle_flare_boss: string;
          battle_aether_boss: string;
          battle_skull_boss: string;
          battle_macro_boss: string;
          abyss: string;
          badlands: string;
          beach: string;
          cave: string;
          construction_site: string;
          desert: string;
          dojo: string;
          end: string;
          factory: string;
          fairy_cave: string;
          forest: string;
          grass: string;
          graveyard: string;
          ice_cave: string;
          island: string;
          jungle: string;
          laboratory: string;
          lake: string;
          meadow: string;
          metropolis: string;
          mountain: string;
          plains: string;
          power_plant: string;
          ruins: string;
          sea: string;
          seabed: string;
          slum: string;
          snowy_forest: string;
          space: string;
          swamp: string;
          tall_grass: string;
          temple: string;
          town: string;
          volcano: string;
          wasteland: string;
          encounter_ace_trainer: string;
          encounter_backpacker: string;
          encounter_clerk: string;
          encounter_cyclist: string;
          encounter_lass: string;
          encounter_parasol_lady: string;
          encounter_pokefan: string;
          encounter_psychic: string;
          encounter_rich: string;
          encounter_rival: string;
          encounter_roughneck: string;
          encounter_scientist: string;
          encounter_twins: string;
          encounter_youngster: string;
          heal: string;
          menu: string;
          title: string;
      };
      biome: {
          unknownLocation: string;
          TOWN: string;
          PLAINS: string;
          GRASS: string;
          TALL_GRASS: string;
          METROPOLIS: string;
          FOREST: string;
          SEA: string;
          SWAMP: string;
          BEACH: string;
          LAKE: string;
          SEABED: string;
          MOUNTAIN: string;
          BADLANDS: string;
          CAVE: string;
          DESERT: string;
          ICE_CAVE: string;
          MEADOW: string;
          POWER_PLANT: string;
          VOLCANO: string;
          GRAVEYARD: string;
          DOJO: string;
          FACTORY: string;
          RUINS: string;
          WASTELAND: string;
          ABYSS: string;
          SPACE: string;
          CONSTRUCTION_SITE: string;
          JUNGLE: string;
          FAIRY_CAVE: string;
          TEMPLE: string;
          SLUM: string;
          SNOWY_FOREST: string;
          ISLAND: string;
          LABORATORY: string;
          END: string;
      };
      challenges: {
          title: string;
          singleGeneration: {
              name: string;
              desc: string;
              desc_default: string;
              gen_1: string;
              gen_2: string;
              gen_3: string;
              gen_4: string;
              gen_5: string;
              gen_6: string;
              gen_7: string;
              gen_8: string;
              gen_9: string;
          };
          singleType: {
              name: string;
              desc: string;
              desc_default: string;
          };
          inverseBattle: {
              name: string;
              shortName: string;
              desc: string;
              "value.0": string;
              "value.1": string;
          };
      };
      commandUiHandler: {
          fight: string;
          ball: string;
          pokemon: string;
          run: string;
          actionMessage: string;
      };
      common: {
          luckIndicator: string;
          shinyOnHover: string;
          commonShiny: string;
          rareShiny: string;
          epicShiny: string;
      };
      achv: {
          Achievements: {
              name: string;
          };
          Locked: {
              name: string;
          };
          MoneyAchv: {
              description: string;
          };
          "10K_MONEY": {
              name: string;
              name_female: string;
          };
          "100K_MONEY": {
              name: string;
              name_female: string;
          };
          "1M_MONEY": {
              name: string;
              name_female: string;
          };
          "10M_MONEY": {
              name: string;
          };
          DamageAchv: {
              description: string;
          };
          "250_DMG": {
              name: string;
          };
          "1000_DMG": {
              name: string;
          };
          "2500_DMG": {
              name: string;
          };
          "10000_DMG": {
              name: string;
          };
          HealAchv: {
              description: string;
          };
          "250_HEAL": {
              name: string;
              name_female: string;
          };
          "1000_HEAL": {
              name: string;
              name_female: string;
          };
          "2500_HEAL": {
              name: string;
              name_female: string;
          };
          "10000_HEAL": {
              name: string;
          };
          LevelAchv: {
              description: string;
          };
          LV_100: {
              name: string;
          };
          LV_250: {
              name: string;
          };
          LV_1000: {
              name: string;
          };
          RibbonAchv: {
              description: string;
          };
          "10_RIBBONS": {
              name: string;
              name_female: string;
          };
          "25_RIBBONS": {
              name: string;
              name_female: string;
          };
          "50_RIBBONS": {
              name: string;
              name_female: string;
          };
          "75_RIBBONS": {
              name: string;
              name_female: string;
          };
          "100_RIBBONS": {
              name: string;
              name_female: string;
          };
          TRANSFER_MAX_STAT_STAGE: {
              name: string;
              description: string;
          };
          MAX_FRIENDSHIP: {
              name: string;
              description: string;
          };
          MEGA_EVOLVE: {
              name: string;
              description: string;
          };
          GIGANTAMAX: {
              name: string;
              description: string;
          };
          TERASTALLIZE: {
              name: string;
              description: string;
          };
          STELLAR_TERASTALLIZE: {
              name: string;
              description: string;
          };
          SPLICE: {
              name: string;
              description: string;
          };
          MINI_BLACK_HOLE: {
              name: string;
              description: string;
          };
          CATCH_MYTHICAL: {
              name: string;
              description: string;
          };
          CATCH_SUB_LEGENDARY: {
              name: string;
              description: string;
          };
          CATCH_LEGENDARY: {
              name: string;
              description: string;
          };
          SEE_SHINY: {
              name: string;
              description: string;
          };
          SHINY_PARTY: {
              name: string;
              description: string;
          };
          HATCH_MYTHICAL: {
              name: string;
              description: string;
          };
          HATCH_SUB_LEGENDARY: {
              name: string;
              description: string;
          };
          HATCH_LEGENDARY: {
              name: string;
              description: string;
          };
          HATCH_SHINY: {
              name: string;
              description: string;
          };
          HIDDEN_ABILITY: {
              name: string;
              description: string;
          };
          PERFECT_IVS: {
              name: string;
              description: string;
          };
          CLASSIC_VICTORY: {
              name: string;
              description: string;
          };
          INVERSE_BATTLE: {
              name: string;
              description: string;
          };
      };
      dialogue: {
          aether_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          faba: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          aether_boss_lusamine_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aether_boss_lusamine_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
      };
      battleSpecDialogue: {};
      miscDialogue: {};
      doubleBattleDialogue: {};
      egg: {
          egg: string;
          greatTier: string;
          ultraTier: string;
          masterTier: string;
          defaultTier: string;
          hatchWavesMessageSoon: string;
          hatchWavesMessageClose: string;
          hatchWavesMessageNotClose: string;
          hatchWavesMessageLongTime: string;
          gachaTypeLegendary: string;
          gachaTypeMove: string;
          gachaTypeShiny: string;
          selectMachine: string;
          notEnoughVouchers: string;
          tooManyEggs: string;
          pull: string;
          pulls: string;
          sameSpeciesEgg: string;
          hatchFromTheEgg: string;
          eggMoveUnlock: string;
          rareEggMoveUnlock: string;
          moveUPGacha: string;
          shinyUPGacha: string;
          legendaryUPGacha: string;
      };
      fightUiHandler: {
          pp: string;
          power: string;
          accuracy: string;
          abilityFlyInText: string;
          passive: string;
      };
      filterBar: {
          genFilter: string;
          typeFilter: string;
          caughtFilter: string;
          unlocksFilter: string;
          miscFilter: string;
          sortFilter: string;
          all: string;
          normal: string;
          uncaught: string;
          passive: string;
          passiveUnlocked: string;
          passiveLocked: string;
          passiveUnlockable: string;
          costReduction: string;
          costReductionUnlocked: string;
          costReductionLocked: string;
          costReductionUnlockable: string;
          favorite: string;
          isFavorite: string;
          notFavorite: string;
          ribbon: string;
          hasWon: string;
          hasNotWon: string;
          hiddenAbility: string;
          hasHiddenAbility: string;
          noHiddenAbility: string;
          egg: string;
          eggPurchasable: string;
          pokerus: string;
          hasPokerus: string;
          noPokerus: string;
          sortByNumber: string;
          sortByCost: string;
          sortByCandies: string;
          sortByIVs: string;
          sortByName: string;
      };
      gameMode: {
          classic: string;
          endless: string;
          endlessSpliced: string;
          dailyRun: string;
          unknown: string;
          challenge: string;
      };
      gameStatsUiHandler: {};
      growth: {
          Erratic: string;
          Fast: string;
          Medium_Fast: string;
          Medium_Slow: string;
          Slow: string;
          Fluctuating: string;
      };
      menu: {
          cancel: string;
          continue: string;
          dailyRun: string;
          loadGame: string;
          newGame: string;
          settings: string;
          selectGameMode: string;
          logInOrCreateAccount: string;
          username: string;
          password: string;
          login: string;
          orUse: string;
          register: string;
          emptyUsername: string;
          invalidLoginUsername: string;
          invalidRegisterUsername: string;
          invalidLoginPassword: string;
          invalidRegisterPassword: string;
          usernameAlreadyUsed: string;
          accountNonExistent: string;
          unmatchingPassword: string;
          passwordNotMatchingConfirmPassword: string;
          confirmPassword: string;
          registrationAgeWarning: string;
          backToLogin: string;
          failedToLoadSaveData: string;
          sessionSuccess: string;
          failedToLoadSession: string;
          boyOrGirl: string;
          evolving: string;
          stoppedEvolving: string;
          pauseEvolutionsQuestion: string;
          evolutionsPaused: string;
          evolutionDone: string;
          dailyRankings: string;
          weeklyRankings: string;
          noRankings: string;
          positionIcon: string;
          usernameScoreboard: string;
          score: string;
          wave: string;
          loading: string;
          loadingAsset: string;
          playersOnline: string;
          yes: string;
          no: string;
          disclaimer: string;
          disclaimerDescription: string;
          choosePokemon: string;
          renamePokemon: string;
          rename: string;
          nickname: string;
          errorServerDown: string;
      };
      menuUiHandler: {
          GAME_SETTINGS: string;
          ACHIEVEMENTS: string;
          STATS: string;
          RUN_HISTORY: string;
          EGG_LIST: string;
          EGG_GACHA: string;
          MANAGE_DATA: string;
          COMMUNITY: string;
          SAVE_AND_QUIT: string;
          LOG_OUT: string;
          slot: string;
          importSession: string;
          importSlotSelect: string;
          exportSession: string;
          exportSlotSelect: string;
          importRunHistory: string;
          exportRunHistory: string;
          importData: string;
          exportData: string;
          consentPreferences: string;
          linkDiscord: string;
          unlinkDiscord: string;
          linkGoogle: string;
          unlinkGoogle: string;
          cancel: string;
          losingProgressionWarning: string;
      };
      modifier: {
          surviveDamageApply: string;
          turnHealApply: string;
          hitHealApply: string;
          pokemonInstantReviveApply: string;
          pokemonResetNegativeStatStageApply: string;
          moneyInterestApply: string;
          turnHeldItemTransferApply: string;
          contactHeldItemTransferApply: string;
          enemyTurnHealApply: string;
          bypassSpeedChanceApply: string;
      };
      modifierType: {
          ModifierType: {
              AddPokeballModifierType: {
                  name: string;
                  description: string;
              };
              AddVoucherModifierType: {
                  name: string;
                  description: string;
              };
              PokemonHeldItemModifierType: {
                  extra: {
                      inoperable: string;
                      tooMany: string;
                  };
              };
              PokemonHpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                      fullyWithStatus: string;
                  };
              };
              PokemonReviveModifierType: {
                  description: string;
              };
              PokemonStatusHealModifierType: {
                  description: string;
              };
              PokemonPpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                  };
              };
              PokemonAllMovePpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                  };
              };
              PokemonPpUpModifierType: {
                  description: string;
              };
              PokemonNatureChangeModifierType: {
                  name: string;
                  description: string;
              };
              DoubleBattleChanceBoosterModifierType: {
                  description: string;
              };
              TempStatStageBoosterModifierType: {
                  description: string;
              };
              AttackTypeBoosterModifierType: {
                  description: string;
              };
              PokemonLevelIncrementModifierType: {
                  description: string;
              };
              AllPokemonLevelIncrementModifierType: {
                  description: string;
              };
              BaseStatBoosterModifierType: {
                  description: string;
              };
              AllPokemonFullHpRestoreModifierType: {
                  description: string;
              };
              AllPokemonFullReviveModifierType: {
                  description: string;
              };
              MoneyRewardModifierType: {
                  description: string;
                  extra: {
                      small: string;
                      moderate: string;
                      large: string;
                  };
              };
              ExpBoosterModifierType: {
                  description: string;
              };
              PokemonExpBoosterModifierType: {
                  description: string;
              };
              PokemonFriendshipBoosterModifierType: {
                  description: string;
              };
              PokemonMoveAccuracyBoosterModifierType: {
                  description: string;
              };
              PokemonMultiHitModifierType: {
                  description: string;
              };
              TmModifierType: {
                  name: string;
                  description: string;
              };
              TmModifierTypeWithInfo: {
                  name: string;
                  description: string;
              };
              EvolutionItemModifierType: {
                  description: string;
              };
              FormChangeItemModifierType: {
                  description: string;
              };
              FusePokemonModifierType: {
                  description: string;
              };
              TerastallizeModifierType: {
                  name: string;
                  description: string;
              };
              ContactHeldItemTransferChanceModifierType: {
                  description: string;
              };
              TurnHeldItemTransferModifierType: {
                  description: string;
              };
              EnemyAttackStatusEffectChanceModifierType: {
                  description: string;
              };
              EnemyEndureChanceModifierType: {
                  description: string;
              };
              RARE_CANDY: {
                  name: string;
              };
              RARER_CANDY: {
                  name: string;
              };
              MEGA_BRACELET: {
                  name: string;
                  description: string;
              };
              DYNAMAX_BAND: {
                  name: string;
                  description: string;
              };
              TERA_ORB: {
                  name: string;
                  description: string;
              };
              MAP: {
                  name: string;
                  description: string;
              };
              POTION: {
                  name: string;
              };
              SUPER_POTION: {
                  name: string;
              };
              HYPER_POTION: {
                  name: string;
              };
              MAX_POTION: {
                  name: string;
              };
              FULL_RESTORE: {
                  name: string;
              };
              REVIVE: {
                  name: string;
              };
              MAX_REVIVE: {
                  name: string;
              };
              FULL_HEAL: {
                  name: string;
              };
              SACRED_ASH: {
                  name: string;
              };
              REVIVER_SEED: {
                  name: string;
                  description: string;
              };
              WHITE_HERB: {
                  name: string;
                  description: string;
              };
              ETHER: {
                  name: string;
              };
              MAX_ETHER: {
                  name: string;
              };
              ELIXIR: {
                  name: string;
              };
              MAX_ELIXIR: {
                  name: string;
              };
              PP_UP: {
                  name: string;
              };
              PP_MAX: {
                  name: string;
              };
              LURE: {
                  name: string;
              };
              SUPER_LURE: {
                  name: string;
              };
              MAX_LURE: {
                  name: string;
              };
              MEMORY_MUSHROOM: {
                  name: string;
                  description: string;
              };
              EXP_SHARE: {
                  name: string;
                  description: string;
              };
              EXP_BALANCE: {
                  name: string;
                  description: string;
              };
              OVAL_CHARM: {
                  name: string;
                  description: string;
              };
              EXP_CHARM: {
                  name: string;
              };
              SUPER_EXP_CHARM: {
                  name: string;
              };
              GOLDEN_EXP_CHARM: {
                  name: string;
              };
              LUCKY_EGG: {
                  name: string;
              };
              GOLDEN_EGG: {
                  name: string;
              };
              SOOTHE_BELL: {
                  name: string;
              };
              SCOPE_LENS: {
                  name: string;
                  description: string;
              };
              DIRE_HIT: {
                  name: string;
                  extra: {
                      raises: string;
                  };
              };
              LEEK: {
                  name: string;
                  description: string;
              };
              EVIOLITE: {
                  name: string;
                  description: string;
              };
              SOUL_DEW: {
                  name: string;
                  description: string;
              };
              NUGGET: {
                  name: string;
              };
              BIG_NUGGET: {
                  name: string;
              };
              RELIC_GOLD: {
                  name: string;
              };
              AMULET_COIN: {
                  name: string;
                  description: string;
              };
              GOLDEN_PUNCH: {
                  name: string;
                  description: string;
              };
              COIN_CASE: {
                  name: string;
                  description: string;
              };
              LOCK_CAPSULE: {
                  name: string;
                  description: string;
              };
              GRIP_CLAW: {
                  name: string;
              };
              WIDE_LENS: {
                  name: string;
              };
              MULTI_LENS: {
                  name: string;
              };
              HEALING_CHARM: {
                  name: string;
                  description: string;
              };
              CANDY_JAR: {
                  name: string;
                  description: string;
              };
              BERRY_POUCH: {
                  name: string;
                  description: string;
              };
              FOCUS_BAND: {
                  name: string;
                  description: string;
              };
              QUICK_CLAW: {
                  name: string;
                  description: string;
              };
              KINGS_ROCK: {
                  name: string;
                  description: string;
              };
              LEFTOVERS: {
                  name: string;
                  description: string;
              };
              SHELL_BELL: {
                  name: string;
                  description: string;
              };
              TOXIC_ORB: {
                  name: string;
                  description: string;
              };
              FLAME_ORB: {
                  name: string;
                  description: string;
              };
              BATON: {
                  name: string;
                  description: string;
              };
              SHINY_CHARM: {
                  name: string;
                  description: string;
              };
              ABILITY_CHARM: {
                  name: string;
                  description: string;
              };
              IV_SCANNER: {
                  name: string;
                  description: string;
              };
              DNA_SPLICERS: {
                  name: string;
              };
              MINI_BLACK_HOLE: {
                  name: string;
              };
              GOLDEN_POKEBALL: {
                  name: string;
                  description: string;
              };
              ENEMY_DAMAGE_BOOSTER: {
                  name: string;
                  description: string;
              };
              ENEMY_DAMAGE_REDUCTION: {
                  name: string;
                  description: string;
              };
              ENEMY_HEAL: {
                  name: string;
                  description: string;
              };
              ENEMY_ATTACK_POISON_CHANCE: {
                  name: string;
              };
              ENEMY_ATTACK_PARALYZE_CHANCE: {
                  name: string;
              };
              ENEMY_ATTACK_BURN_CHANCE: {
                  name: string;
              };
              ENEMY_STATUS_EFFECT_HEAL_CHANCE: {
                  name: string;
                  description: string;
              };
              ENEMY_ENDURE_CHANCE: {
                  name: string;
              };
              ENEMY_FUSED_CHANCE: {
                  name: string;
                  description: string;
              };
          };
          SpeciesBoosterItem: {
              LIGHT_BALL: {
                  name: string;
                  description: string;
              };
              THICK_CLUB: {
                  name: string;
                  description: string;
              };
              METAL_POWDER: {
                  name: string;
                  description: string;
              };
              QUICK_POWDER: {
                  name: string;
                  description: string;
              };
          };
          TempStatStageBoosterItem: {
              x_attack: string;
              x_defense: string;
              x_sp_atk: string;
              x_sp_def: string;
              x_speed: string;
              x_accuracy: string;
          };
          AttackTypeBoosterItem: {
              silk_scarf: string;
              black_belt: string;
              sharp_beak: string;
              poison_barb: string;
              soft_sand: string;
              hard_stone: string;
              silver_powder: string;
              spell_tag: string;
              metal_coat: string;
              charcoal: string;
              mystic_water: string;
              miracle_seed: string;
              magnet: string;
              twisted_spoon: string;
              never_melt_ice: string;
              dragon_fang: string;
              black_glasses: string;
              fairy_feather: string;
          };
          BaseStatBoosterItem: {
              hp_up: string;
              protein: string;
              iron: string;
              calcium: string;
              zinc: string;
              carbos: string;
          };
          EvolutionItem: {
              NONE: string;
              LINKING_CORD: string;
              SUN_STONE: string;
              MOON_STONE: string;
              LEAF_STONE: string;
              FIRE_STONE: string;
              WATER_STONE: string;
              THUNDER_STONE: string;
              ICE_STONE: string;
              DUSK_STONE: string;
              DAWN_STONE: string;
              SHINY_STONE: string;
              CRACKED_POT: string;
              SWEET_APPLE: string;
              TART_APPLE: string;
              STRAWBERRY_SWEET: string;
              UNREMARKABLE_TEACUP: string;
              CHIPPED_POT: string;
              BLACK_AUGURITE: string;
              GALARICA_CUFF: string;
              GALARICA_WREATH: string;
              PEAT_BLOCK: string;
              AUSPICIOUS_ARMOR: string;
              MALICIOUS_ARMOR: string;
              MASTERPIECE_TEACUP: string;
              METAL_ALLOY: string;
              SCROLL_OF_DARKNESS: string;
              SCROLL_OF_WATERS: string;
              SYRUPY_APPLE: string;
          };
          FormChangeItem: {
              NONE: string;
              ABOMASITE: string;
              ABSOLITE: string;
              AERODACTYLITE: string;
              AGGRONITE: string;
              ALAKAZITE: string;
              ALTARIANITE: string;
              AMPHAROSITE: string;
              AUDINITE: string;
              BANETTITE: string;
              BEEDRILLITE: string;
              BLASTOISINITE: string;
              BLAZIKENITE: string;
              CAMERUPTITE: string;
              CHARIZARDITE_X: string;
              CHARIZARDITE_Y: string;
              DIANCITE: string;
              GALLADITE: string;
              GARCHOMPITE: string;
              GARDEVOIRITE: string;
              GENGARITE: string;
              GLALITITE: string;
              GYARADOSITE: string;
              HERACRONITE: string;
              HOUNDOOMINITE: string;
              KANGASKHANITE: string;
              LATIASITE: string;
              LATIOSITE: string;
              LOPUNNITE: string;
              LUCARIONITE: string;
              MANECTITE: string;
              MAWILITE: string;
              MEDICHAMITE: string;
              METAGROSSITE: string;
              MEWTWONITE_X: string;
              MEWTWONITE_Y: string;
              PIDGEOTITE: string;
              PINSIRITE: string;
              RAYQUAZITE: string;
              SABLENITE: string;
              SALAMENCITE: string;
              SCEPTILITE: string;
              SCIZORITE: string;
              SHARPEDONITE: string;
              SLOWBRONITE: string;
              STEELIXITE: string;
              SWAMPERTITE: string;
              TYRANITARITE: string;
              VENUSAURITE: string;
              BLUE_ORB: string;
              RED_ORB: string;
              SHARP_METEORITE: string;
              HARD_METEORITE: string;
              SMOOTH_METEORITE: string;
              ADAMANT_CRYSTAL: string;
              LUSTROUS_GLOBE: string;
              GRISEOUS_CORE: string;
              REVEAL_GLASS: string;
              GRACIDEA: string;
              MAX_MUSHROOMS: string;
              DARK_STONE: string;
              LIGHT_STONE: string;
              PRISON_BOTTLE: string;
              N_LUNARIZER: string;
              N_SOLARIZER: string;
              RUSTED_SWORD: string;
              RUSTED_SHIELD: string;
              ICY_REINS_OF_UNITY: string;
              SHADOW_REINS_OF_UNITY: string;
              WELLSPRING_MASK: string;
              HEARTHFLAME_MASK: string;
              CORNERSTONE_MASK: string;
              SHOCK_DRIVE: string;
              BURN_DRIVE: string;
              CHILL_DRIVE: string;
              DOUSE_DRIVE: string;
              ULTRANECROZIUM_Z: string;
              FIST_PLATE: string;
              SKY_PLATE: string;
              TOXIC_PLATE: string;
              EARTH_PLATE: string;
              STONE_PLATE: string;
              INSECT_PLATE: string;
              SPOOKY_PLATE: string;
              IRON_PLATE: string;
              FLAME_PLATE: string;
              SPLASH_PLATE: string;
              MEADOW_PLATE: string;
              ZAP_PLATE: string;
              MIND_PLATE: string;
              ICICLE_PLATE: string;
              DRACO_PLATE: string;
              DREAD_PLATE: string;
              PIXIE_PLATE: string;
              BLANK_PLATE: string;
              LEGEND_PLATE: string;
              FIGHTING_MEMORY: string;
              FLYING_MEMORY: string;
              POISON_MEMORY: string;
              GROUND_MEMORY: string;
              ROCK_MEMORY: string;
              BUG_MEMORY: string;
              GHOST_MEMORY: string;
              STEEL_MEMORY: string;
              FIRE_MEMORY: string;
              WATER_MEMORY: string;
              GRASS_MEMORY: string;
              ELECTRIC_MEMORY: string;
              PSYCHIC_MEMORY: string;
              ICE_MEMORY: string;
              DRAGON_MEMORY: string;
              DARK_MEMORY: string;
              FAIRY_MEMORY: string;
              NORMAL_MEMORY: string;
          };
      };
      move: {
          pound: {
              name: string;
              effect: string;
          };
          karateChop: {
              name: string;
              effect: string;
          };
          doubleSlap: {
              name: string;
              effect: string;
          };
          cometPunch: {
              name: string;
              effect: string;
          };
          megaPunch: {
              name: string;
              effect: string;
          };
          payDay: {
              name: string;
              effect: string;
          };
          firePunch: {
              name: string;
              effect: string;
          };
          icePunch: {
              name: string;
              effect: string;
          };
          thunderPunch: {
              name: string;
              effect: string;
          };
          scratch: {
              name: string;
              effect: string;
          };
          viseGrip: {
              name: string;
              effect: string;
          };
          guillotine: {
              name: string;
              effect: string;
          };
          razorWind: {
              name: string;
              effect: string;
          };
          swordsDance: {
              name: string;
              effect: string;
          };
          cut: {
              name: string;
              effect: string;
          };
          gust: {
              name: string;
              effect: string;
          };
          wingAttack: {
              name: string;
              effect: string;
          };
          whirlwind: {
              name: string;
              effect: string;
          };
          fly: {
              name: string;
              effect: string;
          };
          bind: {
              name: string;
              effect: string;
          };
          slam: {
              name: string;
              effect: string;
          };
          vineWhip: {
              name: string;
              effect: string;
          };
          stomp: {
              name: string;
              effect: string;
          };
          doubleKick: {
              name: string;
              effect: string;
          };
          megaKick: {
              name: string;
              effect: string;
          };
          jumpKick: {
              name: string;
              effect: string;
          };
          rollingKick: {
              name: string;
              effect: string;
          };
          sandAttack: {
              name: string;
              effect: string;
          };
          headbutt: {
              name: string;
              effect: string;
          };
          hornAttack: {
              name: string;
              effect: string;
          };
          furyAttack: {
              name: string;
              effect: string;
          };
          hornDrill: {
              name: string;
              effect: string;
          };
          tackle: {
              name: string;
              effect: string;
          };
          bodySlam: {
              name: string;
              effect: string;
          };
          wrap: {
              name: string;
              effect: string;
          };
          takeDown: {
              name: string;
              effect: string;
          };
          thrash: {
              name: string;
              effect: string;
          };
          doubleEdge: {
              name: string;
              effect: string;
          };
          tailWhip: {
              name: string;
              effect: string;
          };
          poisonSting: {
              name: string;
              effect: string;
          };
          twineedle: {
              name: string;
              effect: string;
          };
          pinMissile: {
              name: string;
              effect: string;
          };
          leer: {
              name: string;
              effect: string;
          };
          bite: {
              name: string;
              effect: string;
          };
          growl: {
              name: string;
              effect: string;
          };
          roar: {
              name: string;
              effect: string;
          };
          sing: {
              name: string;
              effect: string;
          };
          supersonic: {
              name: string;
              effect: string;
          };
          sonicBoom: {
              name: string;
              effect: string;
          };
          disable: {
              name: string;
              effect: string;
          };
          acid: {
              name: string;
              effect: string;
          };
          ember: {
              name: string;
              effect: string;
          };
          flamethrower: {
              name: string;
              effect: string;
          };
          mist: {
              name: string;
              effect: string;
          };
          waterGun: {
              name: string;
              effect: string;
          };
          hydroPump: {
              name: string;
              effect: string;
          };
          surf: {
              name: string;
              effect: string;
          };
          iceBeam: {
              name: string;
              effect: string;
          };
          blizzard: {
              name: string;
              effect: string;
          };
          psybeam: {
              name: string;
              effect: string;
          };
          bubbleBeam: {
              name: string;
              effect: string;
          };
          auroraBeam: {
              name: string;
              effect: string;
          };
          hyperBeam: {
              name: string;
              effect: string;
          };
          peck: {
              name: string;
              effect: string;
          };
          drillPeck: {
              name: string;
              effect: string;
          };
          submission: {
              name: string;
              effect: string;
          };
          lowKick: {
              name: string;
              effect: string;
          };
          counter: {
              name: string;
              effect: string;
          };
          seismicToss: {
              name: string;
              effect: string;
          };
          strength: {
              name: string;
              effect: string;
          };
          absorb: {
              name: string;
              effect: string;
          };
          megaDrain: {
              name: string;
              effect: string;
          };
          leechSeed: {
              name: string;
              effect: string;
          };
          growth: {
              name: string;
              effect: string;
          };
          razorLeaf: {
              name: string;
              effect: string;
          };
          solarBeam: {
              name: string;
              effect: string;
          };
          poisonPowder: {
              name: string;
              effect: string;
          };
          stunSpore: {
              name: string;
              effect: string;
          };
          sleepPowder: {
              name: string;
              effect: string;
          };
          petalDance: {
              name: string;
              effect: string;
          };
          stringShot: {
              name: string;
              effect: string;
          };
          dragonRage: {
              name: string;
              effect: string;
          };
          fireSpin: {
              name: string;
              effect: string;
          };
          thunderShock: {
              name: string;
              effect: string;
          };
          thunderbolt: {
              name: string;
              effect: string;
          };
          thunderWave: {
              name: string;
              effect: string;
          };
          thunder: {
              name: string;
              effect: string;
          };
          rockThrow: {
              name: string;
              effect: string;
          };
          earthquake: {
              name: string;
              effect: string;
          };
          fissure: {
              name: string;
              effect: string;
          };
          dig: {
              name: string;
              effect: string;
          };
          toxic: {
              name: string;
              effect: string;
          };
          confusion: {
              name: string;
              effect: string;
          };
          psychic: {
              name: string;
              effect: string;
          };
          hypnosis: {
              name: string;
              effect: string;
          };
          meditate: {
              name: string;
              effect: string;
          };
          agility: {
              name: string;
              effect: string;
          };
          quickAttack: {
              name: string;
              effect: string;
          };
          rage: {
              name: string;
              effect: string;
          };
          teleport: {
              name: string;
              effect: string;
          };
          nightShade: {
              name: string;
              effect: string;
          };
          mimic: {
              name: string;
              effect: string;
          };
          screech: {
              name: string;
              effect: string;
          };
          doubleTeam: {
              name: string;
              effect: string;
          };
          recover: {
              name: string;
              effect: string;
          };
          harden: {
              name: string;
              effect: string;
          };
          minimize: {
              name: string;
              effect: string;
          };
          smokescreen: {
              name: string;
              effect: string;
          };
          confuseRay: {
              name: string;
              effect: string;
          };
          withdraw: {
              name: string;
              effect: string;
          };
          defenseCurl: {
              name: string;
              effect: string;
          };
          barrier: {
              name: string;
              effect: string;
          };
          lightScreen: {
              name: string;
              effect: string;
          };
          haze: {
              name: string;
              effect: string;
          };
          reflect: {
              name: string;
              effect: string;
          };
          focusEnergy: {
              name: string;
              effect: string;
          };
          bide: {
              name: string;
              effect: string;
          };
          metronome: {
              name: string;
              effect: string;
          };
          mirrorMove: {
              name: string;
              effect: string;
          };
          selfDestruct: {
              name: string;
              effect: string;
          };
          eggBomb: {
              name: string;
              effect: string;
          };
          lick: {
              name: string;
              effect: string;
          };
          smog: {
              name: string;
              effect: string;
          };
          sludge: {
              name: string;
              effect: string;
          };
          boneClub: {
              name: string;
              effect: string;
          };
          fireBlast: {
              name: string;
              effect: string;
          };
          waterfall: {
              name: string;
              effect: string;
          };
          clamp: {
              name: string;
              effect: string;
          };
          swift: {
              name: string;
              effect: string;
          };
          skullBash: {
              name: string;
              effect: string;
          };
          spikeCannon: {
              name: string;
              effect: string;
          };
          constrict: {
              name: string;
              effect: string;
          };
          amnesia: {
              name: string;
              effect: string;
          };
          kinesis: {
              name: string;
              effect: string;
          };
          softBoiled: {
              name: string;
              effect: string;
          };
          highJumpKick: {
              name: string;
              effect: string;
          };
          glare: {
              name: string;
              effect: string;
          };
          dreamEater: {
              name: string;
              effect: string;
          };
          poisonGas: {
              name: string;
              effect: string;
          };
          barrage: {
              name: string;
              effect: string;
          };
          leechLife: {
              name: string;
              effect: string;
          };
          lovelyKiss: {
              name: string;
              effect: string;
          };
          skyAttack: {
              name: string;
              effect: string;
          };
          transform: {
              name: string;
              effect: string;
          };
          bubble: {
              name: string;
              effect: string;
          };
          dizzyPunch: {
              name: string;
              effect: string;
          };
          spore: {
              name: string;
              effect: string;
          };
          flash: {
              name: string;
              effect: string;
          };
          psywave: {
              name: string;
              effect: string;
          };
          splash: {
              name: string;
              effect: string;
          };
          acidArmor: {
              name: string;
              effect: string;
          };
          crabhammer: {
              name: string;
              effect: string;
          };
          explosion: {
              name: string;
              effect: string;
          };
          furySwipes: {
              name: string;
              effect: string;
          };
          bonemerang: {
              name: string;
              effect: string;
          };
          rest: {
              name: string;
              effect: string;
          };
          rockSlide: {
              name: string;
              effect: string;
          };
          hyperFang: {
              name: string;
              effect: string;
          };
          sharpen: {
              name: string;
              effect: string;
          };
          conversion: {
              name: string;
              effect: string;
          };
          triAttack: {
              name: string;
              effect: string;
          };
          superFang: {
              name: string;
              effect: string;
          };
          slash: {
              name: string;
              effect: string;
          };
          substitute: {
              name: string;
              effect: string;
          };
          struggle: {
              name: string;
              effect: string;
          };
          sketch: {
              name: string;
              effect: string;
          };
          tripleKick: {
              name: string;
              effect: string;
          };
          thief: {
              name: string;
              effect: string;
          };
          spiderWeb: {
              name: string;
              effect: string;
          };
          mindReader: {
              name: string;
              effect: string;
          };
          nightmare: {
              name: string;
              effect: string;
          };
          flameWheel: {
              name: string;
              effect: string;
          };
          snore: {
              name: string;
              effect: string;
          };
          curse: {
              name: string;
              effect: string;
          };
          flail: {
              name: string;
              effect: string;
          };
          conversion2: {
              name: string;
              effect: string;
          };
          aeroblast: {
              name: string;
              effect: string;
          };
          cottonSpore: {
              name: string;
              effect: string;
          };
          reversal: {
              name: string;
              effect: string;
          };
          spite: {
              name: string;
              effect: string;
          };
          powderSnow: {
              name: string;
              effect: string;
          };
          protect: {
              name: string;
              effect: string;
          };
          machPunch: {
              name: string;
              effect: string;
          };
          scaryFace: {
              name: string;
              effect: string;
          };
          feintAttack: {
              name: string;
              effect: string;
          };
          sweetKiss: {
              name: string;
              effect: string;
          };
          bellyDrum: {
              name: string;
              effect: string;
          };
          sludgeBomb: {
              name: string;
              effect: string;
          };
          mudSlap: {
              name: string;
              effect: string;
          };
          octazooka: {
              name: string;
              effect: string;
          };
          spikes: {
              name: string;
              effect: string;
          };
          zapCannon: {
              name: string;
              effect: string;
          };
          foresight: {
              name: string;
              effect: string;
          };
          destinyBond: {
              name: string;
              effect: string;
          };
          perishSong: {
              name: string;
              effect: string;
          };
          icyWind: {
              name: string;
              effect: string;
          };
          detect: {
              name: string;
              effect: string;
          };
          boneRush: {
              name: string;
              effect: string;
          };
          lockOn: {
              name: string;
              effect: string;
          };
          outrage: {
              name: string;
              effect: string;
          };
          sandstorm: {
              name: string;
              effect: string;
          };
          gigaDrain: {
              name: string;
              effect: string;
          };
          endure: {
              name: string;
              effect: string;
          };
          charm: {
              name: string;
              effect: string;
          };
          rollout: {
              name: string;
              effect: string;
          };
          falseSwipe: {
              name: string;
              effect: string;
          };
          swagger: {
              name: string;
              effect: string;
          };
          milkDrink: {
              name: string;
              effect: string;
          };
          spark: {
              name: string;
              effect: string;
          };
          furyCutter: {
              name: string;
              effect: string;
          };
          steelWing: {
              name: string;
              effect: string;
          };
          meanLook: {
              name: string;
              effect: string;
          };
          attract: {
              name: string;
              effect: string;
          };
          sleepTalk: {
              name: string;
              effect: string;
          };
          healBell: {
              name: string;
              effect: string;
          };
          return: {
              name: string;
              effect: string;
          };
          present: {
              name: string;
              effect: string;
          };
          frustration: {
              name: string;
              effect: string;
          };
          safeguard: {
              name: string;
              effect: string;
          };
          painSplit: {
              name: string;
              effect: string;
          };
          sacredFire: {
              name: string;
              effect: string;
          };
          magnitude: {
              name: string;
              effect: string;
          };
          dynamicPunch: {
              name: string;
              effect: string;
          };
          megahorn: {
              name: string;
              effect: string;
          };
          dragonBreath: {
              name: string;
              effect: string;
          };
          batonPass: {
              name: string;
              effect: string;
          };
          encore: {
              name: string;
              effect: string;
          };
          pursuit: {
              name: string;
              effect: string;
          };
          rapidSpin: {
              name: string;
              effect: string;
          };
          sweetScent: {
              name: string;
              effect: string;
          };
          ironTail: {
              name: string;
              effect: string;
          };
          metalClaw: {
              name: string;
              effect: string;
          };
          vitalThrow: {
              name: string;
              effect: string;
          };
          morningSun: {
              name: string;
              effect: string;
          };
          synthesis: {
              name: string;
              effect: string;
          };
          moonlight: {
              name: string;
              effect: string;
          };
          hiddenPower: {
              name: string;
              effect: string;
          };
          crossChop: {
              name: string;
              effect: string;
          };
          twister: {
              name: string;
              effect: string;
          };
          rainDance: {
              name: string;
              effect: string;
          };
          sunnyDay: {
              name: string;
              effect: string;
          };
          crunch: {
              name: string;
              effect: string;
          };
          mirrorCoat: {
              name: string;
              effect: string;
          };
          psychUp: {
              name: string;
              effect: string;
          };
          extremeSpeed: {
              name: string;
              effect: string;
          };
          ancientPower: {
              name: string;
              effect: string;
          };
          shadowBall: {
              name: string;
              effect: string;
          };
          futureSight: {
              name: string;
              effect: string;
          };
          rockSmash: {
              name: string;
              effect: string;
          };
          whirlpool: {
              name: string;
              effect: string;
          };
          beatUp: {
              name: string;
              effect: string;
          };
          fakeOut: {
              name: string;
              effect: string;
          };
          uproar: {
              name: string;
              effect: string;
          };
          stockpile: {
              name: string;
              effect: string;
          };
          spitUp: {
              name: string;
              effect: string;
          };
          swallow: {
              name: string;
              effect: string;
          };
          heatWave: {
              name: string;
              effect: string;
          };
          hail: {
              name: string;
              effect: string;
          };
          torment: {
              name: string;
              effect: string;
          };
          flatter: {
              name: string;
              effect: string;
          };
          willOWisp: {
              name: string;
              effect: string;
          };
          memento: {
              name: string;
              effect: string;
          };
          facade: {
              name: string;
              effect: string;
          };
          focusPunch: {
              name: string;
              effect: string;
          };
          smellingSalts: {
              name: string;
              effect: string;
          };
          followMe: {
              name: string;
              effect: string;
          };
          naturePower: {
              name: string;
              effect: string;
          };
          charge: {
              name: string;
              effect: string;
          };
          taunt: {
              name: string;
              effect: string;
          };
          helpingHand: {
              name: string;
              effect: string;
          };
          trick: {
              name: string;
              effect: string;
          };
          rolePlay: {
              name: string;
              effect: string;
          };
          wish: {
              name: string;
              effect: string;
          };
          assist: {
              name: string;
              effect: string;
          };
          ingrain: {
              name: string;
              effect: string;
          };
          superpower: {
              name: string;
              effect: string;
          };
          magicCoat: {
              name: string;
              effect: string;
          };
          recycle: {
              name: string;
              effect: string;
          };
          revenge: {
              name: string;
              effect: string;
          };
          brickBreak: {
              name: string;
              effect: string;
          };
          yawn: {
              name: string;
              effect: string;
          };
          knockOff: {
              name: string;
              effect: string;
          };
          endeavor: {
              name: string;
              effect: string;
          };
          eruption: {
              name: string;
              effect: string;
          };
          skillSwap: {
              name: string;
              effect: string;
          };
          imprison: {
              name: string;
              effect: string;
          };
          refresh: {
              name: string;
              effect: string;
          };
          grudge: {
              name: string;
              effect: string;
          };
          snatch: {
              name: string;
              effect: string;
          };
          secretPower: {
              name: string;
              effect: string;
          };
          dive: {
              name: string;
              effect: string;
          };
          armThrust: {
              name: string;
              effect: string;
          };
          camouflage: {
              name: string;
              effect: string;
          };
          tailGlow: {
              name: string;
              effect: string;
          };
          lusterPurge: {
              name: string;
              effect: string;
          };
          mistBall: {
              name: string;
              effect: string;
          };
          featherDance: {
              name: string;
              effect: string;
          };
          teeterDance: {
              name: string;
              effect: string;
          };
          blazeKick: {
              name: string;
              effect: string;
          };
          mudSport: {
              name: string;
              effect: string;
          };
          iceBall: {
              name: string;
              effect: string;
          };
          needleArm: {
              name: string;
              effect: string;
          };
          slackOff: {
              name: string;
              effect: string;
          };
          hyperVoice: {
              name: string;
              effect: string;
          };
          poisonFang: {
              name: string;
              effect: string;
          };
          crushClaw: {
              name: string;
              effect: string;
          };
          blastBurn: {
              name: string;
              effect: string;
          };
          hydroCannon: {
              name: string;
              effect: string;
          };
          meteorMash: {
              name: string;
              effect: string;
          };
          astonish: {
              name: string;
              effect: string;
          };
          weatherBall: {
              name: string;
              effect: string;
          };
          aromatherapy: {
              name: string;
              effect: string;
          };
          fakeTears: {
              name: string;
              effect: string;
          };
          airCutter: {
              name: string;
              effect: string;
          };
          overheat: {
              name: string;
              effect: string;
          };
          odorSleuth: {
              name: string;
              effect: string;
          };
          rockTomb: {
              name: string;
              effect: string;
          };
          silverWind: {
              name: string;
              effect: string;
          };
          metalSound: {
              name: string;
              effect: string;
          };
          grassWhistle: {
              name: string;
              effect: string;
          };
          tickle: {
              name: string;
              effect: string;
          };
          cosmicPower: {
              name: string;
              effect: string;
          };
          waterSpout: {
              name: string;
              effect: string;
          };
          signalBeam: {
              name: string;
              effect: string;
          };
          shadowPunch: {
              name: string;
              effect: string;
          };
          extrasensory: {
              name: string;
              effect: string;
          };
          skyUppercut: {
              name: string;
              effect: string;
          };
          sandTomb: {
              name: string;
              effect: string;
          };
          sheerCold: {
              name: string;
              effect: string;
          };
          muddyWater: {
              name: string;
              effect: string;
          };
          bulletSeed: {
              name: string;
              effect: string;
          };
          aerialAce: {
              name: string;
              effect: string;
          };
          icicleSpear: {
              name: string;
              effect: string;
          };
          ironDefense: {
              name: string;
              effect: string;
          };
          block: {
              name: string;
              effect: string;
          };
          howl: {
              name: string;
              effect: string;
          };
          dragonClaw: {
              name: string;
              effect: string;
          };
          frenzyPlant: {
              name: string;
              effect: string;
          };
          bulkUp: {
              name: string;
              effect: string;
          };
          bounce: {
              name: string;
              effect: string;
          };
          mudShot: {
              name: string;
              effect: string;
          };
          poisonTail: {
              name: string;
              effect: string;
          };
          covet: {
              name: string;
              effect: string;
          };
          voltTackle: {
              name: string;
              effect: string;
          };
          magicalLeaf: {
              name: string;
              effect: string;
          };
          waterSport: {
              name: string;
              effect: string;
          };
          calmMind: {
              name: string;
              effect: string;
          };
          leafBlade: {
              name: string;
              effect: string;
          };
          dragonDance: {
              name: string;
              effect: string;
          };
          rockBlast: {
              name: string;
              effect: string;
          };
          shockWave: {
              name: string;
              effect: string;
          };
          waterPulse: {
              name: string;
              effect: string;
          };
          doomDesire: {
              name: string;
              effect: string;
          };
          psychoBoost: {
              name: string;
              effect: string;
          };
          roost: {
              name: string;
              effect: string;
          };
          gravity: {
              name: string;
              effect: string;
          };
          miracleEye: {
              name: string;
              effect: string;
          };
          wakeUpSlap: {
              name: string;
              effect: string;
          };
          hammerArm: {
              name: string;
              effect: string;
          };
          gyroBall: {
              name: string;
              effect: string;
          };
          healingWish: {
              name: string;
              effect: string;
          };
          brine: {
              name: string;
              effect: string;
          };
          naturalGift: {
              name: string;
              effect: string;
          };
          feint: {
              name: string;
              effect: string;
          };
          pluck: {
              name: string;
              effect: string;
          };
          tailwind: {
              name: string;
              effect: string;
          };
          acupressure: {
              name: string;
              effect: string;
          };
          metalBurst: {
              name: string;
              effect: string;
          };
          uTurn: {
              name: string;
              effect: string;
          };
          closeCombat: {
              name: string;
              effect: string;
          };
          payback: {
              name: string;
              effect: string;
          };
          assurance: {
              name: string;
              effect: string;
          };
          embargo: {
              name: string;
              effect: string;
          };
          fling: {
              name: string;
              effect: string;
          };
          psychoShift: {
              name: string;
              effect: string;
          };
          trumpCard: {
              name: string;
              effect: string;
          };
          healBlock: {
              name: string;
              effect: string;
          };
          wringOut: {
              name: string;
              effect: string;
          };
          powerTrick: {
              name: string;
              effect: string;
          };
          gastroAcid: {
              name: string;
              effect: string;
          };
          luckyChant: {
              name: string;
              effect: string;
          };
          meFirst: {
              name: string;
              effect: string;
          };
          copycat: {
              name: string;
              effect: string;
          };
          powerSwap: {
              name: string;
              effect: string;
          };
          guardSwap: {
              name: string;
              effect: string;
          };
          punishment: {
              name: string;
              effect: string;
          };
          lastResort: {
              name: string;
              effect: string;
          };
          worrySeed: {
              name: string;
              effect: string;
          };
          suckerPunch: {
              name: string;
              effect: string;
          };
          toxicSpikes: {
              name: string;
              effect: string;
          };
          heartSwap: {
              name: string;
              effect: string;
          };
          aquaRing: {
              name: string;
              effect: string;
          };
          magnetRise: {
              name: string;
              effect: string;
          };
          flareBlitz: {
              name: string;
              effect: string;
          };
          forcePalm: {
              name: string;
              effect: string;
          };
          auraSphere: {
              name: string;
              effect: string;
          };
          rockPolish: {
              name: string;
              effect: string;
          };
          poisonJab: {
              name: string;
              effect: string;
          };
          darkPulse: {
              name: string;
              effect: string;
          };
          nightSlash: {
              name: string;
              effect: string;
          };
          aquaTail: {
              name: string;
              effect: string;
          };
          seedBomb: {
              name: string;
              effect: string;
          };
          airSlash: {
              name: string;
              effect: string;
          };
          xScissor: {
              name: string;
              effect: string;
          };
          bugBuzz: {
              name: string;
              effect: string;
          };
          dragonPulse: {
              name: string;
              effect: string;
          };
          dragonRush: {
              name: string;
              effect: string;
          };
          powerGem: {
              name: string;
              effect: string;
          };
          drainPunch: {
              name: string;
              effect: string;
          };
          vacuumWave: {
              name: string;
              effect: string;
          };
          focusBlast: {
              name: string;
              effect: string;
          };
          energyBall: {
              name: string;
              effect: string;
          };
          braveBird: {
              name: string;
              effect: string;
          };
          earthPower: {
              name: string;
              effect: string;
          };
          switcheroo: {
              name: string;
              effect: string;
          };
          gigaImpact: {
              name: string;
              effect: string;
          };
          nastyPlot: {
              name: string;
              effect: string;
          };
          bulletPunch: {
              name: string;
              effect: string;
          };
          avalanche: {
              name: string;
              effect: string;
          };
          iceShard: {
              name: string;
              effect: string;
          };
          shadowClaw: {
              name: string;
              effect: string;
          };
          thunderFang: {
              name: string;
              effect: string;
          };
          iceFang: {
              name: string;
              effect: string;
          };
          fireFang: {
              name: string;
              effect: string;
          };
          shadowSneak: {
              name: string;
              effect: string;
          };
          mudBomb: {
              name: string;
              effect: string;
          };
          psychoCut: {
              name: string;
              effect: string;
          };
          zenHeadbutt: {
              name: string;
              effect: string;
          };
          mirrorShot: {
              name: string;
              effect: string;
          };
          flashCannon: {
              name: string;
              effect: string;
          };
          rockClimb: {
              name: string;
              effect: string;
          };
          defog: {
              name: string;
              effect: string;
          };
          trickRoom: {
              name: string;
              effect: string;
          };
          dracoMeteor: {
              name: string;
              effect: string;
          };
          discharge: {
              name: string;
              effect: string;
          };
          lavaPlume: {
              name: string;
              effect: string;
          };
          leafStorm: {
              name: string;
              effect: string;
          };
          powerWhip: {
              name: string;
              effect: string;
          };
          rockWrecker: {
              name: string;
              effect: string;
          };
          crossPoison: {
              name: string;
              effect: string;
          };
          gunkShot: {
              name: string;
              effect: string;
          };
          ironHead: {
              name: string;
              effect: string;
          };
          magnetBomb: {
              name: string;
              effect: string;
          };
          stoneEdge: {
              name: string;
              effect: string;
          };
          captivate: {
              name: string;
              effect: string;
          };
          stealthRock: {
              name: string;
              effect: string;
          };
          grassKnot: {
              name: string;
              effect: string;
          };
          chatter: {
              name: string;
              effect: string;
          };
          judgment: {
              name: string;
              effect: string;
          };
          bugBite: {
              name: string;
              effect: string;
          };
          chargeBeam: {
              name: string;
              effect: string;
          };
          woodHammer: {
              name: string;
              effect: string;
          };
          aquaJet: {
              name: string;
              effect: string;
          };
          attackOrder: {
              name: string;
              effect: string;
          };
          defendOrder: {
              name: string;
              effect: string;
          };
          healOrder: {
              name: string;
              effect: string;
          };
          headSmash: {
              name: string;
              effect: string;
          };
          doubleHit: {
              name: string;
              effect: string;
          };
          roarOfTime: {
              name: string;
              effect: string;
          };
          spacialRend: {
              name: string;
              effect: string;
          };
          lunarDance: {
              name: string;
              effect: string;
          };
          crushGrip: {
              name: string;
              effect: string;
          };
          magmaStorm: {
              name: string;
              effect: string;
          };
          darkVoid: {
              name: string;
              effect: string;
          };
          seedFlare: {
              name: string;
              effect: string;
          };
          ominousWind: {
              name: string;
              effect: string;
          };
          shadowForce: {
              name: string;
              effect: string;
          };
          honeClaws: {
              name: string;
              effect: string;
          };
          wideGuard: {
              name: string;
              effect: string;
          };
          guardSplit: {
              name: string;
              effect: string;
          };
          powerSplit: {
              name: string;
              effect: string;
          };
          wonderRoom: {
              name: string;
              effect: string;
          };
          psyshock: {
              name: string;
              effect: string;
          };
          venoshock: {
              name: string;
              effect: string;
          };
          autotomize: {
              name: string;
              effect: string;
          };
          ragePowder: {
              name: string;
              effect: string;
          };
          telekinesis: {
              name: string;
              effect: string;
          };
          magicRoom: {
              name: string;
              effect: string;
          };
          smackDown: {
              name: string;
              effect: string;
          };
          stormThrow: {
              name: string;
              effect: string;
          };
          flameBurst: {
              name: string;
              effect: string;
          };
          sludgeWave: {
              name: string;
              effect: string;
          };
          quiverDance: {
              name: string;
              effect: string;
          };
          heavySlam: {
              name: string;
              effect: string;
          };
          synchronoise: {
              name: string;
              effect: string;
          };
          electroBall: {
              name: string;
              effect: string;
          };
          soak: {
              name: string;
              effect: string;
          };
          flameCharge: {
              name: string;
              effect: string;
          };
          coil: {
              name: string;
              effect: string;
          };
          lowSweep: {
              name: string;
              effect: string;
          };
          acidSpray: {
              name: string;
              effect: string;
          };
          foulPlay: {
              name: string;
              effect: string;
          };
          simpleBeam: {
              name: string;
              effect: string;
          };
          entrainment: {
              name: string;
              effect: string;
          };
          afterYou: {
              name: string;
              effect: string;
          };
          round: {
              name: string;
              effect: string;
          };
          echoedVoice: {
              name: string;
              effect: string;
          };
          chipAway: {
              name: string;
              effect: string;
          };
          clearSmog: {
              name: string;
              effect: string;
          };
          storedPower: {
              name: string;
              effect: string;
          };
          quickGuard: {
              name: string;
              effect: string;
          };
          allySwitch: {
              name: string;
              effect: string;
          };
          scald: {
              name: string;
              effect: string;
          };
          shellSmash: {
              name: string;
              effect: string;
          };
          healPulse: {
              name: string;
              effect: string;
          };
          hex: {
              name: string;
              effect: string;
          };
          skyDrop: {
              name: string;
              effect: string;
          };
          shiftGear: {
              name: string;
              effect: string;
          };
          circleThrow: {
              name: string;
              effect: string;
          };
          incinerate: {
              name: string;
              effect: string;
          };
          quash: {
              name: string;
              effect: string;
          };
          acrobatics: {
              name: string;
              effect: string;
          };
          reflectType: {
              name: string;
              effect: string;
          };
          retaliate: {
              name: string;
              effect: string;
          };
          finalGambit: {
              name: string;
              effect: string;
          };
          bestow: {
              name: string;
              effect: string;
          };
          inferno: {
              name: string;
              effect: string;
          };
          waterPledge: {
              name: string;
              effect: string;
          };
          firePledge: {
              name: string;
              effect: string;
          };
          grassPledge: {
              name: string;
              effect: string;
          };
          voltSwitch: {
              name: string;
              effect: string;
          };
          struggleBug: {
              name: string;
              effect: string;
          };
          bulldoze: {
              name: string;
              effect: string;
          };
          frostBreath: {
              name: string;
              effect: string;
          };
          dragonTail: {
              name: string;
              effect: string;
          };
          workUp: {
              name: string;
              effect: string;
          };
          electroweb: {
              name: string;
              effect: string;
          };
          wildCharge: {
              name: string;
              effect: string;
          };
          drillRun: {
              name: string;
              effect: string;
          };
          dualChop: {
              name: string;
              effect: string;
          };
          heartStamp: {
              name: string;
              effect: string;
          };
          hornLeech: {
              name: string;
              effect: string;
          };
          sacredSword: {
              name: string;
              effect: string;
          };
          razorShell: {
              name: string;
              effect: string;
          };
          heatCrash: {
              name: string;
              effect: string;
          };
          leafTornado: {
              name: string;
              effect: string;
          };
          steamroller: {
              name: string;
              effect: string;
          };
          cottonGuard: {
              name: string;
              effect: string;
          };
          nightDaze: {
              name: string;
              effect: string;
          };
          psystrike: {
              name: string;
              effect: string;
          };
          tailSlap: {
              name: string;
              effect: string;
          };
          hurricane: {
              name: string;
              effect: string;
          };
          headCharge: {
              name: string;
              effect: string;
          };
          gearGrind: {
              name: string;
              effect: string;
          };
          searingShot: {
              name: string;
              effect: string;
          };
          technoBlast: {
              name: string;
              effect: string;
          };
          relicSong: {
              name: string;
              effect: string;
          };
          secretSword: {
              name: string;
              effect: string;
          };
          glaciate: {
              name: string;
              effect: string;
          };
          boltStrike: {
              name: string;
              effect: string;
          };
          blueFlare: {
              name: string;
              effect: string;
          };
          fieryDance: {
              name: string;
              effect: string;
          };
          freezeShock: {
              name: string;
              effect: string;
          };
          iceBurn: {
              name: string;
              effect: string;
          };
          snarl: {
              name: string;
              effect: string;
          };
          icicleCrash: {
              name: string;
              effect: string;
          };
          vCreate: {
              name: string;
              effect: string;
          };
          fusionFlare: {
              name: string;
              effect: string;
          };
          fusionBolt: {
              name: string;
              effect: string;
          };
          flyingPress: {
              name: string;
              effect: string;
          };
          matBlock: {
              name: string;
              effect: string;
          };
          belch: {
              name: string;
              effect: string;
          };
          rototiller: {
              name: string;
              effect: string;
          };
          stickyWeb: {
              name: string;
              effect: string;
          };
          fellStinger: {
              name: string;
              effect: string;
          };
          phantomForce: {
              name: string;
              effect: string;
          };
          trickOrTreat: {
              name: string;
              effect: string;
          };
          nobleRoar: {
              name: string;
              effect: string;
          };
          ionDeluge: {
              name: string;
              effect: string;
          };
          parabolicCharge: {
              name: string;
              effect: string;
          };
          forestsCurse: {
              name: string;
              effect: string;
          };
          petalBlizzard: {
              name: string;
              effect: string;
          };
          freezeDry: {
              name: string;
              effect: string;
          };
          disarmingVoice: {
              name: string;
              effect: string;
          };
          partingShot: {
              name: string;
              effect: string;
          };
          topsyTurvy: {
              name: string;
              effect: string;
          };
          drainingKiss: {
              name: string;
              effect: string;
          };
          craftyShield: {
              name: string;
              effect: string;
          };
          flowerShield: {
              name: string;
              effect: string;
          };
          grassyTerrain: {
              name: string;
              effect: string;
          };
          mistyTerrain: {
              name: string;
              effect: string;
          };
          electrify: {
              name: string;
              effect: string;
          };
          playRough: {
              name: string;
              effect: string;
          };
          fairyWind: {
              name: string;
              effect: string;
          };
          moonblast: {
              name: string;
              effect: string;
          };
          boomburst: {
              name: string;
              effect: string;
          };
          fairyLock: {
              name: string;
              effect: string;
          };
          kingsShield: {
              name: string;
              effect: string;
          };
          playNice: {
              name: string;
              effect: string;
          };
          confide: {
              name: string;
              effect: string;
          };
          diamondStorm: {
              name: string;
              effect: string;
          };
          steamEruption: {
              name: string;
              effect: string;
          };
          hyperspaceHole: {
              name: string;
              effect: string;
          };
          waterShuriken: {
              name: string;
              effect: string;
          };
          mysticalFire: {
              name: string;
              effect: string;
          };
          spikyShield: {
              name: string;
              effect: string;
          };
          aromaticMist: {
              name: string;
              effect: string;
          };
          eerieImpulse: {
              name: string;
              effect: string;
          };
          venomDrench: {
              name: string;
              effect: string;
          };
          powder: {
              name: string;
              effect: string;
          };
          geomancy: {
              name: string;
              effect: string;
          };
          magneticFlux: {
              name: string;
              effect: string;
          };
          happyHour: {
              name: string;
              effect: string;
          };
          electricTerrain: {
              name: string;
              effect: string;
          };
          dazzlingGleam: {
              name: string;
              effect: string;
          };
          celebrate: {
              name: string;
              effect: string;
          };
          holdHands: {
              name: string;
              effect: string;
          };
          babyDollEyes: {
              name: string;
              effect: string;
          };
          nuzzle: {
              name: string;
              effect: string;
          };
          holdBack: {
              name: string;
              effect: string;
          };
          infestation: {
              name: string;
              effect: string;
          };
          powerUpPunch: {
              name: string;
              effect: string;
          };
          oblivionWing: {
              name: string;
              effect: string;
          };
          thousandArrows: {
              name: string;
              effect: string;
          };
          thousandWaves: {
              name: string;
              effect: string;
          };
          landsWrath: {
              name: string;
              effect: string;
          };
          lightOfRuin: {
              name: string;
              effect: string;
          };
          originPulse: {
              name: string;
              effect: string;
          };
          precipiceBlades: {
              name: string;
              effect: string;
          };
          dragonAscent: {
              name: string;
              effect: string;
          };
          hyperspaceFury: {
              name: string;
              effect: string;
          };
          breakneckBlitzPhysical: {
              name: string;
              effect: string;
          };
          breakneckBlitzSpecial: {
              name: string;
              effect: string;
          };
          allOutPummelingPhysical: {
              name: string;
              effect: string;
          };
          allOutPummelingSpecial: {
              name: string;
              effect: string;
          };
          supersonicSkystrikePhysical: {
              name: string;
              effect: string;
          };
          supersonicSkystrikeSpecial: {
              name: string;
              effect: string;
          };
          acidDownpourPhysical: {
              name: string;
              effect: string;
          };
          acidDownpourSpecial: {
              name: string;
              effect: string;
          };
          tectonicRagePhysical: {
              name: string;
              effect: string;
          };
          tectonicRageSpecial: {
              name: string;
              effect: string;
          };
          continentalCrushPhysical: {
              name: string;
              effect: string;
          };
          continentalCrushSpecial: {
              name: string;
              effect: string;
          };
          savageSpinOutPhysical: {
              name: string;
              effect: string;
          };
          savageSpinOutSpecial: {
              name: string;
              effect: string;
          };
          neverEndingNightmarePhysical: {
              name: string;
              effect: string;
          };
          neverEndingNightmareSpecial: {
              name: string;
              effect: string;
          };
          corkscrewCrashPhysical: {
              name: string;
              effect: string;
          };
          corkscrewCrashSpecial: {
              name: string;
              effect: string;
          };
          infernoOverdrivePhysical: {
              name: string;
              effect: string;
          };
          infernoOverdriveSpecial: {
              name: string;
              effect: string;
          };
          hydroVortexPhysical: {
              name: string;
              effect: string;
          };
          hydroVortexSpecial: {
              name: string;
              effect: string;
          };
          bloomDoomPhysical: {
              name: string;
              effect: string;
          };
          bloomDoomSpecial: {
              name: string;
              effect: string;
          };
          gigavoltHavocPhysical: {
              name: string;
              effect: string;
          };
          gigavoltHavocSpecial: {
              name: string;
              effect: string;
          };
          shatteredPsychePhysical: {
              name: string;
              effect: string;
          };
          shatteredPsycheSpecial: {
              name: string;
              effect: string;
          };
          subzeroSlammerPhysical: {
              name: string;
              effect: string;
          };
          subzeroSlammerSpecial: {
              name: string;
              effect: string;
          };
          devastatingDrakePhysical: {
              name: string;
              effect: string;
          };
          devastatingDrakeSpecial: {
              name: string;
              effect: string;
          };
          blackHoleEclipsePhysical: {
              name: string;
              effect: string;
          };
          blackHoleEclipseSpecial: {
              name: string;
              effect: string;
          };
          twinkleTacklePhysical: {
              name: string;
              effect: string;
          };
          twinkleTackleSpecial: {
              name: string;
              effect: string;
          };
          catastropika: {
              name: string;
              effect: string;
          };
          shoreUp: {
              name: string;
              effect: string;
          };
          firstImpression: {
              name: string;
              effect: string;
          };
          banefulBunker: {
              name: string;
              effect: string;
          };
          spiritShackle: {
              name: string;
              effect: string;
          };
          darkestLariat: {
              name: string;
              effect: string;
          };
          sparklingAria: {
              name: string;
              effect: string;
          };
          iceHammer: {
              name: string;
              effect: string;
          };
          floralHealing: {
              name: string;
              effect: string;
          };
          highHorsepower: {
              name: string;
              effect: string;
          };
          strengthSap: {
              name: string;
              effect: string;
          };
          solarBlade: {
              name: string;
              effect: string;
          };
          leafage: {
              name: string;
              effect: string;
          };
          spotlight: {
              name: string;
              effect: string;
          };
          toxicThread: {
              name: string;
              effect: string;
          };
          laserFocus: {
              name: string;
              effect: string;
          };
          gearUp: {
              name: string;
              effect: string;
          };
          throatChop: {
              name: string;
              effect: string;
          };
          pollenPuff: {
              name: string;
              effect: string;
          };
          anchorShot: {
              name: string;
              effect: string;
          };
          psychicTerrain: {
              name: string;
              effect: string;
          };
          lunge: {
              name: string;
              effect: string;
          };
          fireLash: {
              name: string;
              effect: string;
          };
          powerTrip: {
              name: string;
              effect: string;
          };
          burnUp: {
              name: string;
              effect: string;
          };
          speedSwap: {
              name: string;
              effect: string;
          };
          smartStrike: {
              name: string;
              effect: string;
          };
          purify: {
              name: string;
              effect: string;
          };
          revelationDance: {
              name: string;
              effect: string;
          };
          coreEnforcer: {
              name: string;
              effect: string;
          };
          tropKick: {
              name: string;
              effect: string;
          };
          instruct: {
              name: string;
              effect: string;
          };
          beakBlast: {
              name: string;
              effect: string;
          };
          clangingScales: {
              name: string;
              effect: string;
          };
          dragonHammer: {
              name: string;
              effect: string;
          };
          brutalSwing: {
              name: string;
              effect: string;
          };
          auroraVeil: {
              name: string;
              effect: string;
          };
          sinisterArrowRaid: {
              name: string;
              effect: string;
          };
          maliciousMoonsault: {
              name: string;
              effect: string;
          };
          oceanicOperetta: {
              name: string;
              effect: string;
          };
          guardianOfAlola: {
              name: string;
              effect: string;
          };
          soulStealing7StarStrike: {
              name: string;
              effect: string;
          };
          stokedSparksurfer: {
              name: string;
              effect: string;
          };
          pulverizingPancake: {
              name: string;
              effect: string;
          };
          extremeEvoboost: {
              name: string;
              effect: string;
          };
          genesisSupernova: {
              name: string;
              effect: string;
          };
          shellTrap: {
              name: string;
              effect: string;
          };
          fleurCannon: {
              name: string;
              effect: string;
          };
          psychicFangs: {
              name: string;
              effect: string;
          };
          stompingTantrum: {
              name: string;
              effect: string;
          };
          shadowBone: {
              name: string;
              effect: string;
          };
          accelerock: {
              name: string;
              effect: string;
          };
          liquidation: {
              name: string;
              effect: string;
          };
          prismaticLaser: {
              name: string;
              effect: string;
          };
          spectralThief: {
              name: string;
              effect: string;
          };
          sunsteelStrike: {
              name: string;
              effect: string;
          };
          moongeistBeam: {
              name: string;
              effect: string;
          };
          tearfulLook: {
              name: string;
              effect: string;
          };
          zingZap: {
              name: string;
              effect: string;
          };
          naturesMadness: {
              name: string;
              effect: string;
          };
          multiAttack: {
              name: string;
              effect: string;
          };
          tenMillionVoltThunderbolt: {
              name: string;
              effect: string;
          };
          mindBlown: {
              name: string;
              effect: string;
          };
          plasmaFists: {
              name: string;
              effect: string;
          };
          photonGeyser: {
              name: string;
              effect: string;
          };
          lightThatBurnsTheSky: {
              name: string;
              effect: string;
          };
          searingSunrazeSmash: {
              name: string;
              effect: string;
          };
          menacingMoonrazeMaelstrom: {
              name: string;
              effect: string;
          };
          letsSnuggleForever: {
              name: string;
              effect: string;
          };
          splinteredStormshards: {
              name: string;
              effect: string;
          };
          clangorousSoulblaze: {
              name: string;
              effect: string;
          };
          zippyZap: {
              name: string;
              effect: string;
          };
          splishySplash: {
              name: string;
              effect: string;
          };
          floatyFall: {
              name: string;
              effect: string;
          };
          pikaPapow: {
              name: string;
              effect: string;
          };
          bouncyBubble: {
              name: string;
              effect: string;
          };
          buzzyBuzz: {
              name: string;
              effect: string;
          };
          sizzlySlide: {
              name: string;
              effect: string;
          };
          glitzyGlow: {
              name: string;
              effect: string;
          };
          baddyBad: {
              name: string;
              effect: string;
          };
          sappySeed: {
              name: string;
              effect: string;
          };
          freezyFrost: {
              name: string;
              effect: string;
          };
          sparklySwirl: {
              name: string;
              effect: string;
          };
          veeveeVolley: {
              name: string;
              effect: string;
          };
          doubleIronBash: {
              name: string;
              effect: string;
          };
          maxGuard: {
              name: string;
              effect: string;
          };
          dynamaxCannon: {
              name: string;
              effect: string;
          };
          snipeShot: {
              name: string;
              effect: string;
          };
          jawLock: {
              name: string;
              effect: string;
          };
          stuffCheeks: {
              name: string;
              effect: string;
          };
          noRetreat: {
              name: string;
              effect: string;
          };
          tarShot: {
              name: string;
              effect: string;
          };
          magicPowder: {
              name: string;
              effect: string;
          };
          dragonDarts: {
              name: string;
              effect: string;
          };
          teatime: {
              name: string;
              effect: string;
          };
          octolock: {
              name: string;
              effect: string;
          };
          boltBeak: {
              name: string;
              effect: string;
          };
          fishiousRend: {
              name: string;
              effect: string;
          };
          courtChange: {
              name: string;
              effect: string;
          };
          maxFlare: {
              name: string;
              effect: string;
          };
          maxFlutterby: {
              name: string;
              effect: string;
          };
          maxLightning: {
              name: string;
              effect: string;
          };
          maxStrike: {
              name: string;
              effect: string;
          };
          maxKnuckle: {
              name: string;
              effect: string;
          };
          maxPhantasm: {
              name: string;
              effect: string;
          };
          maxHailstorm: {
              name: string;
              effect: string;
          };
          maxOoze: {
              name: string;
              effect: string;
          };
          maxGeyser: {
              name: string;
              effect: string;
          };
          maxAirstream: {
              name: string;
              effect: string;
          };
          maxStarfall: {
              name: string;
              effect: string;
          };
          maxWyrmwind: {
              name: string;
              effect: string;
          };
          maxMindstorm: {
              name: string;
              effect: string;
          };
          maxRockfall: {
              name: string;
              effect: string;
          };
          maxQuake: {
              name: string;
              effect: string;
          };
          maxDarkness: {
              name: string;
              effect: string;
          };
          maxOvergrowth: {
              name: string;
              effect: string;
          };
          maxSteelspike: {
              name: string;
              effect: string;
          };
          clangorousSoul: {
              name: string;
              effect: string;
          };
          bodyPress: {
              name: string;
              effect: string;
          };
          decorate: {
              name: string;
              effect: string;
          };
          drumBeating: {
              name: string;
              effect: string;
          };
          snapTrap: {
              name: string;
              effect: string;
          };
          pyroBall: {
              name: string;
              effect: string;
          };
          behemothBlade: {
              name: string;
              effect: string;
          };
          behemothBash: {
              name: string;
              effect: string;
          };
          auraWheel: {
              name: string;
              effect: string;
          };
          breakingSwipe: {
              name: string;
              effect: string;
          };
          branchPoke: {
              name: string;
              effect: string;
          };
          overdrive: {
              name: string;
              effect: string;
          };
          appleAcid: {
              name: string;
              effect: string;
          };
          gravApple: {
              name: string;
              effect: string;
          };
          spiritBreak: {
              name: string;
              effect: string;
          };
          strangeSteam: {
              name: string;
              effect: string;
          };
          lifeDew: {
              name: string;
              effect: string;
          };
          obstruct: {
              name: string;
              effect: string;
          };
          falseSurrender: {
              name: string;
              effect: string;
          };
          meteorAssault: {
              name: string;
              effect: string;
          };
          eternabeam: {
              name: string;
              effect: string;
          };
          steelBeam: {
              name: string;
              effect: string;
          };
          expandingForce: {
              name: string;
              effect: string;
          };
          steelRoller: {
              name: string;
              effect: string;
          };
          scaleShot: {
              name: string;
              effect: string;
          };
          meteorBeam: {
              name: string;
              effect: string;
          };
          shellSideArm: {
              name: string;
              effect: string;
          };
          mistyExplosion: {
              name: string;
              effect: string;
          };
          grassyGlide: {
              name: string;
              effect: string;
          };
          risingVoltage: {
              name: string;
              effect: string;
          };
          terrainPulse: {
              name: string;
              effect: string;
          };
          skitterSmack: {
              name: string;
              effect: string;
          };
          burningJealousy: {
              name: string;
              effect: string;
          };
          lashOut: {
              name: string;
              effect: string;
          };
          poltergeist: {
              name: string;
              effect: string;
          };
          corrosiveGas: {
              name: string;
              effect: string;
          };
          coaching: {
              name: string;
              effect: string;
          };
          flipTurn: {
              name: string;
              effect: string;
          };
          tripleAxel: {
              name: string;
              effect: string;
          };
          dualWingbeat: {
              name: string;
              effect: string;
          };
          scorchingSands: {
              name: string;
              effect: string;
          };
          jungleHealing: {
              name: string;
              effect: string;
          };
          wickedBlow: {
              name: string;
              effect: string;
          };
          surgingStrikes: {
              name: string;
              effect: string;
          };
          thunderCage: {
              name: string;
              effect: string;
          };
          dragonEnergy: {
              name: string;
              effect: string;
          };
          freezingGlare: {
              name: string;
              effect: string;
          };
          fieryWrath: {
              name: string;
              effect: string;
          };
          thunderousKick: {
              name: string;
              effect: string;
          };
          glacialLance: {
              name: string;
              effect: string;
          };
          astralBarrage: {
              name: string;
              effect: string;
          };
          eerieSpell: {
              name: string;
              effect: string;
          };
          direClaw: {
              name: string;
              effect: string;
          };
          psyshieldBash: {
              name: string;
              effect: string;
          };
          powerShift: {
              name: string;
              effect: string;
          };
          stoneAxe: {
              name: string;
              effect: string;
          };
          springtideStorm: {
              name: string;
              effect: string;
          };
          mysticalPower: {
              name: string;
              effect: string;
          };
          ragingFury: {
              name: string;
              effect: string;
          };
          waveCrash: {
              name: string;
              effect: string;
          };
          chloroblast: {
              name: string;
              effect: string;
          };
          mountainGale: {
              name: string;
              effect: string;
          };
          victoryDance: {
              name: string;
              effect: string;
          };
          headlongRush: {
              name: string;
              effect: string;
          };
          barbBarrage: {
              name: string;
              effect: string;
          };
          esperWing: {
              name: string;
              effect: string;
          };
          bitterMalice: {
              name: string;
              effect: string;
          };
          shelter: {
              name: string;
              effect: string;
          };
          tripleArrows: {
              name: string;
              effect: string;
          };
          infernalParade: {
              name: string;
              effect: string;
          };
          ceaselessEdge: {
              name: string;
              effect: string;
          };
          bleakwindStorm: {
              name: string;
              effect: string;
          };
          wildboltStorm: {
              name: string;
              effect: string;
          };
          sandsearStorm: {
              name: string;
              effect: string;
          };
          lunarBlessing: {
              name: string;
              effect: string;
          };
          takeHeart: {
              name: string;
              effect: string;
          };
          gMaxWildfire: {
              name: string;
              effect: string;
          };
          gMaxBefuddle: {
              name: string;
              effect: string;
          };
          gMaxVoltCrash: {
              name: string;
              effect: string;
          };
          gMaxGoldRush: {
              name: string;
              effect: string;
          };
          gMaxChiStrike: {
              name: string;
              effect: string;
          };
          gMaxTerror: {
              name: string;
              effect: string;
          };
          gMaxResonance: {
              name: string;
              effect: string;
          };
          gMaxCuddle: {
              name: string;
              effect: string;
          };
          gMaxReplenish: {
              name: string;
              effect: string;
          };
          gMaxMalodor: {
              name: string;
              effect: string;
          };
          gMaxStonesurge: {
              name: string;
              effect: string;
          };
          gMaxWindRage: {
              name: string;
              effect: string;
          };
          gMaxStunShock: {
              name: string;
              effect: string;
          };
          gMaxFinale: {
              name: string;
              effect: string;
          };
          gMaxDepletion: {
              name: string;
              effect: string;
          };
          gMaxGravitas: {
              name: string;
              effect: string;
          };
          gMaxVolcalith: {
              name: string;
              effect: string;
          };
          gMaxSandblast: {
              name: string;
              effect: string;
          };
          gMaxSnooze: {
              name: string;
              effect: string;
          };
          gMaxTartness: {
              name: string;
              effect: string;
          };
          gMaxSweetness: {
              name: string;
              effect: string;
          };
          gMaxSmite: {
              name: string;
              effect: string;
          };
          gMaxSteelsurge: {
              name: string;
              effect: string;
          };
          gMaxMeltdown: {
              name: string;
              effect: string;
          };
          gMaxFoamBurst: {
              name: string;
              effect: string;
          };
          gMaxCentiferno: {
              name: string;
              effect: string;
          };
          gMaxVineLash: {
              name: string;
              effect: string;
          };
          gMaxCannonade: {
              name: string;
              effect: string;
          };
          gMaxDrumSolo: {
              name: string;
              effect: string;
          };
          gMaxFireball: {
              name: string;
              effect: string;
          };
          gMaxHydrosnipe: {
              name: string;
              effect: string;
          };
          gMaxOneBlow: {
              name: string;
              effect: string;
          };
          gMaxRapidFlow: {
              name: string;
              effect: string;
          };
          teraBlast: {
              name: string;
              effect: string;
          };
          silkTrap: {
              name: string;
              effect: string;
          };
          axeKick: {
              name: string;
              effect: string;
          };
          lastRespects: {
              name: string;
              effect: string;
          };
          luminaCrash: {
              name: string;
              effect: string;
          };
          orderUp: {
              name: string;
              effect: string;
          };
          jetPunch: {
              name: string;
              effect: string;
          };
          spicyExtract: {
              name: string;
              effect: string;
          };
          spinOut: {
              name: string;
              effect: string;
          };
          populationBomb: {
              name: string;
              effect: string;
          };
          iceSpinner: {
              name: string;
              effect: string;
          };
          glaiveRush: {
              name: string;
              effect: string;
          };
          revivalBlessing: {
              name: string;
              effect: string;
          };
          saltCure: {
              name: string;
              effect: string;
          };
          tripleDive: {
              name: string;
              effect: string;
          };
          mortalSpin: {
              name: string;
              effect: string;
          };
          doodle: {
              name: string;
              effect: string;
          };
          filletAway: {
              name: string;
              effect: string;
          };
          kowtowCleave: {
              name: string;
              effect: string;
          };
          flowerTrick: {
              name: string;
              effect: string;
          };
          torchSong: {
              name: string;
              effect: string;
          };
          aquaStep: {
              name: string;
              effect: string;
          };
          ragingBull: {
              name: string;
              effect: string;
          };
          makeItRain: {
              name: string;
              effect: string;
          };
          psyblade: {
              name: string;
              effect: string;
          };
          hydroSteam: {
              name: string;
              effect: string;
          };
          ruination: {
              name: string;
              effect: string;
          };
          collisionCourse: {
              name: string;
              effect: string;
          };
          electroDrift: {
              name: string;
              effect: string;
          };
          shedTail: {
              name: string;
              effect: string;
          };
          chillyReception: {
              name: string;
              effect: string;
          };
          tidyUp: {
              name: string;
              effect: string;
          };
          snowscape: {
              name: string;
              effect: string;
          };
          pounce: {
              name: string;
              effect: string;
          };
          trailblaze: {
              name: string;
              effect: string;
          };
          chillingWater: {
              name: string;
              effect: string;
          };
          hyperDrill: {
              name: string;
              effect: string;
          };
          twinBeam: {
              name: string;
              effect: string;
          };
          rageFist: {
              name: string;
              effect: string;
          };
          armorCannon: {
              name: string;
              effect: string;
          };
          bitterBlade: {
              name: string;
              effect: string;
          };
          doubleShock: {
              name: string;
              effect: string;
          };
          gigatonHammer: {
              name: string;
              effect: string;
          };
          comeuppance: {
              name: string;
              effect: string;
          };
          aquaCutter: {
              name: string;
              effect: string;
          };
          blazingTorque: {
              name: string;
              effect: string;
          };
          wickedTorque: {
              name: string;
              effect: string;
          };
          noxiousTorque: {
              name: string;
              effect: string;
          };
          combatTorque: {
              name: string;
              effect: string;
          };
          magicalTorque: {
              name: string;
              effect: string;
          };
          bloodMoon: {
              name: string;
              effect: string;
          };
          matchaGotcha: {
              name: string;
              effect: string;
          };
          syrupBomb: {
              name: string;
              effect: string;
          };
          ivyCudgel: {
              name: string;
              effect: string;
          };
          electroShot: {
              name: string;
              effect: string;
          };
          teraStarstorm: {
              name: string;
              effect: string;
          };
          fickleBeam: {
              name: string;
              effect: string;
          };
          burningBulwark: {
              name: string;
              effect: string;
          };
          thunderclap: {
              name: string;
              effect: string;
          };
          mightyCleave: {
              name: string;
              effect: string;
          };
          tachyonCutter: {
              name: string;
              effect: string;
          };
          hardPress: {
              name: string;
              effect: string;
          };
          dragonCheer: {
              name: string;
              effect: string;
          };
          alluringVoice: {
              name: string;
              effect: string;
          };
          temperFlare: {
              name: string;
              effect: string;
          };
          supercellSlam: {
              name: string;
              effect: string;
          };
          psychicNoise: {
              name: string;
              effect: string;
          };
          upperHand: {
              name: string;
              effect: string;
          };
          malignantChain: {
              name: string;
              effect: string;
          };
      };
      nature: {
          Hardy: string;
          Lonely: string;
          Brave: string;
          Adamant: string;
          Naughty: string;
          Bold: string;
          Docile: string;
          Relaxed: string;
          Impish: string;
          Lax: string;
          Timid: string;
          Hasty: string;
          Serious: string;
          Jolly: string;
          Naive: string;
          Modest: string;
          Mild: string;
          Quiet: string;
          Bashful: string;
          Rash: string;
          Calm: string;
          Gentle: string;
          Sassy: string;
          Careful: string;
          Quirky: string;
      };
      pokeball: {
          pokeBall: string;
          greatBall: string;
          ultraBall: string;
          rogueBall: string;
          masterBall: string;
          luxuryBall: string;
      };
      pokemon: {
          bulbasaur: string;
          ivysaur: string;
          venusaur: string;
          charmander: string;
          charmeleon: string;
          charizard: string;
          squirtle: string;
          wartortle: string;
          blastoise: string;
          caterpie: string;
          metapod: string;
          butterfree: string;
          weedle: string;
          kakuna: string;
          beedrill: string;
          pidgey: string;
          pidgeotto: string;
          pidgeot: string;
          rattata: string;
          raticate: string;
          spearow: string;
          fearow: string;
          ekans: string;
          arbok: string;
          pikachu: string;
          raichu: string;
          sandshrew: string;
          sandslash: string;
          nidoran_f: string;
          nidorina: string;
          nidoqueen: string;
          nidoran_m: string;
          nidorino: string;
          nidoking: string;
          clefairy: string;
          clefable: string;
          vulpix: string;
          ninetales: string;
          jigglypuff: string;
          wigglytuff: string;
          zubat: string;
          golbat: string;
          oddish: string;
          gloom: string;
          vileplume: string;
          paras: string;
          parasect: string;
          venonat: string;
          venomoth: string;
          diglett: string;
          dugtrio: string;
          meowth: string;
          persian: string;
          psyduck: string;
          golduck: string;
          mankey: string;
          primeape: string;
          growlithe: string;
          arcanine: string;
          poliwag: string;
          poliwhirl: string;
          poliwrath: string;
          abra: string;
          kadabra: string;
          alakazam: string;
          machop: string;
          machoke: string;
          machamp: string;
          bellsprout: string;
          weepinbell: string;
          victreebel: string;
          tentacool: string;
          tentacruel: string;
          geodude: string;
          graveler: string;
          golem: string;
          ponyta: string;
          rapidash: string;
          slowpoke: string;
          slowbro: string;
          magnemite: string;
          magneton: string;
          farfetchd: string;
          doduo: string;
          dodrio: string;
          seel: string;
          dewgong: string;
          grimer: string;
          muk: string;
          shellder: string;
          cloyster: string;
          gastly: string;
          haunter: string;
          gengar: string;
          onix: string;
          drowzee: string;
          hypno: string;
          krabby: string;
          kingler: string;
          voltorb: string;
          electrode: string;
          exeggcute: string;
          exeggutor: string;
          cubone: string;
          marowak: string;
          hitmonlee: string;
          hitmonchan: string;
          lickitung: string;
          koffing: string;
          weezing: string;
          rhyhorn: string;
          rhydon: string;
          chansey: string;
          tangela: string;
          kangaskhan: string;
          horsea: string;
          seadra: string;
          goldeen: string;
          seaking: string;
          staryu: string;
          starmie: string;
          mr_mime: string;
          scyther: string;
          jynx: string;
          electabuzz: string;
          magmar: string;
          pinsir: string;
          tauros: string;
          magikarp: string;
          gyarados: string;
          lapras: string;
          ditto: string;
          eevee: string;
          vaporeon: string;
          jolteon: string;
          flareon: string;
          porygon: string;
          omanyte: string;
          omastar: string;
          kabuto: string;
          kabutops: string;
          aerodactyl: string;
          snorlax: string;
          articuno: string;
          zapdos: string;
          moltres: string;
          dratini: string;
          dragonair: string;
          dragonite: string;
          mewtwo: string;
          mew: string;
          chikorita: string;
          bayleef: string;
          meganium: string;
          cyndaquil: string;
          quilava: string;
          typhlosion: string;
          totodile: string;
          croconaw: string;
          feraligatr: string;
          sentret: string;
          furret: string;
          hoothoot: string;
          noctowl: string;
          ledyba: string;
          ledian: string;
          spinarak: string;
          ariados: string;
          crobat: string;
          chinchou: string;
          lanturn: string;
          pichu: string;
          cleffa: string;
          igglybuff: string;
          togepi: string;
          togetic: string;
          natu: string;
          xatu: string;
          mareep: string;
          flaaffy: string;
          ampharos: string;
          bellossom: string;
          marill: string;
          azumarill: string;
          sudowoodo: string;
          politoed: string;
          hoppip: string;
          skiploom: string;
          jumpluff: string;
          aipom: string;
          sunkern: string;
          sunflora: string;
          yanma: string;
          wooper: string;
          quagsire: string;
          espeon: string;
          umbreon: string;
          murkrow: string;
          slowking: string;
          misdreavus: string;
          unown: string;
          wobbuffet: string;
          girafarig: string;
          pineco: string;
          forretress: string;
          dunsparce: string;
          gligar: string;
          steelix: string;
          snubbull: string;
          granbull: string;
          qwilfish: string;
          scizor: string;
          shuckle: string;
          heracross: string;
          sneasel: string;
          teddiursa: string;
          ursaring: string;
          slugma: string;
          magcargo: string;
          swinub: string;
          piloswine: string;
          corsola: string;
          remoraid: string;
          octillery: string;
          delibird: string;
          mantine: string;
          skarmory: string;
          houndour: string;
          houndoom: string;
          kingdra: string;
          phanpy: string;
          donphan: string;
          porygon2: string;
          stantler: string;
          smeargle: string;
          tyrogue: string;
          hitmontop: string;
          smoochum: string;
          elekid: string;
          magby: string;
          miltank: string;
          blissey: string;
          raikou: string;
          entei: string;
          suicune: string;
          larvitar: string;
          pupitar: string;
          tyranitar: string;
          lugia: string;
          ho_oh: string;
          celebi: string;
          treecko: string;
          grovyle: string;
          sceptile: string;
          torchic: string;
          combusken: string;
          blaziken: string;
          mudkip: string;
          marshtomp: string;
          swampert: string;
          poochyena: string;
          mightyena: string;
          zigzagoon: string;
          linoone: string;
          wurmple: string;
          silcoon: string;
          beautifly: string;
          cascoon: string;
          dustox: string;
          lotad: string;
          lombre: string;
          ludicolo: string;
          seedot: string;
          nuzleaf: string;
          shiftry: string;
          taillow: string;
          swellow: string;
          wingull: string;
          pelipper: string;
          ralts: string;
          kirlia: string;
          gardevoir: string;
          surskit: string;
          masquerain: string;
          shroomish: string;
          breloom: string;
          slakoth: string;
          vigoroth: string;
          slaking: string;
          nincada: string;
          ninjask: string;
          shedinja: string;
          whismur: string;
          loudred: string;
          exploud: string;
          makuhita: string;
          hariyama: string;
          azurill: string;
          nosepass: string;
          skitty: string;
          delcatty: string;
          sableye: string;
          mawile: string;
          aron: string;
          lairon: string;
          aggron: string;
          meditite: string;
          medicham: string;
          electrike: string;
          manectric: string;
          plusle: string;
          minun: string;
          volbeat: string;
          illumise: string;
          roselia: string;
          gulpin: string;
          swalot: string;
          carvanha: string;
          sharpedo: string;
          wailmer: string;
          wailord: string;
          numel: string;
          camerupt: string;
          torkoal: string;
          spoink: string;
          grumpig: string;
          spinda: string;
          trapinch: string;
          vibrava: string;
          flygon: string;
          cacnea: string;
          cacturne: string;
          swablu: string;
          altaria: string;
          zangoose: string;
          seviper: string;
          lunatone: string;
          solrock: string;
          barboach: string;
          whiscash: string;
          corphish: string;
          crawdaunt: string;
          baltoy: string;
          claydol: string;
          lileep: string;
          cradily: string;
          anorith: string;
          armaldo: string;
          feebas: string;
          milotic: string;
          castform: string;
          kecleon: string;
          shuppet: string;
          banette: string;
          duskull: string;
          dusclops: string;
          tropius: string;
          chimecho: string;
          absol: string;
          wynaut: string;
          snorunt: string;
          glalie: string;
          spheal: string;
          sealeo: string;
          walrein: string;
          clamperl: string;
          huntail: string;
          gorebyss: string;
          relicanth: string;
          luvdisc: string;
          bagon: string;
          shelgon: string;
          salamence: string;
          beldum: string;
          metang: string;
          metagross: string;
          regirock: string;
          regice: string;
          registeel: string;
          latias: string;
          latios: string;
          kyogre: string;
          groudon: string;
          rayquaza: string;
          jirachi: string;
          deoxys: string;
          turtwig: string;
          grotle: string;
          torterra: string;
          chimchar: string;
          monferno: string;
          infernape: string;
          piplup: string;
          prinplup: string;
          empoleon: string;
          starly: string;
          staravia: string;
          staraptor: string;
          bidoof: string;
          bibarel: string;
          kricketot: string;
          kricketune: string;
          shinx: string;
          luxio: string;
          luxray: string;
          budew: string;
          roserade: string;
          cranidos: string;
          rampardos: string;
          shieldon: string;
          bastiodon: string;
          burmy: string;
          wormadam: string;
          mothim: string;
          combee: string;
          vespiquen: string;
          pachirisu: string;
          buizel: string;
          floatzel: string;
          cherubi: string;
          cherrim: string;
          shellos: string;
          gastrodon: string;
          ambipom: string;
          drifloon: string;
          drifblim: string;
          buneary: string;
          lopunny: string;
          mismagius: string;
          honchkrow: string;
          glameow: string;
          purugly: string;
          chingling: string;
          stunky: string;
          skuntank: string;
          bronzor: string;
          bronzong: string;
          bonsly: string;
          mime_jr: string;
          happiny: string;
          chatot: string;
          spiritomb: string;
          gible: string;
          gabite: string;
          garchomp: string;
          munchlax: string;
          riolu: string;
          lucario: string;
          hippopotas: string;
          hippowdon: string;
          skorupi: string;
          drapion: string;
          croagunk: string;
          toxicroak: string;
          carnivine: string;
          finneon: string;
          lumineon: string;
          mantyke: string;
          snover: string;
          abomasnow: string;
          weavile: string;
          magnezone: string;
          lickilicky: string;
          rhyperior: string;
          tangrowth: string;
          electivire: string;
          magmortar: string;
          togekiss: string;
          yanmega: string;
          leafeon: string;
          glaceon: string;
          gliscor: string;
          mamoswine: string;
          porygon_z: string;
          gallade: string;
          probopass: string;
          dusknoir: string;
          froslass: string;
          rotom: string;
          uxie: string;
          mesprit: string;
          azelf: string;
          dialga: string;
          palkia: string;
          heatran: string;
          regigigas: string;
          giratina: string;
          cresselia: string;
          phione: string;
          manaphy: string;
          darkrai: string;
          shaymin: string;
          arceus: string;
          victini: string;
          snivy: string;
          servine: string;
          serperior: string;
          tepig: string;
          pignite: string;
          emboar: string;
          oshawott: string;
          dewott: string;
          samurott: string;
          patrat: string;
          watchog: string;
          lillipup: string;
          herdier: string;
          stoutland: string;
          purrloin: string;
          liepard: string;
          pansage: string;
          simisage: string;
          pansear: string;
          simisear: string;
          panpour: string;
          simipour: string;
          munna: string;
          musharna: string;
          pidove: string;
          tranquill: string;
          unfezant: string;
          blitzle: string;
          zebstrika: string;
          roggenrola: string;
          boldore: string;
          gigalith: string;
          woobat: string;
          swoobat: string;
          drilbur: string;
          excadrill: string;
          audino: string;
          timburr: string;
          gurdurr: string;
          conkeldurr: string;
          tympole: string;
          palpitoad: string;
          seismitoad: string;
          throh: string;
          sawk: string;
          sewaddle: string;
          swadloon: string;
          leavanny: string;
          venipede: string;
          whirlipede: string;
          scolipede: string;
          cottonee: string;
          whimsicott: string;
          petilil: string;
          lilligant: string;
          basculin: string;
          sandile: string;
          krokorok: string;
          krookodile: string;
          darumaka: string;
          darmanitan: string;
          maractus: string;
          dwebble: string;
          crustle: string;
          scraggy: string;
          scrafty: string;
          sigilyph: string;
          yamask: string;
          cofagrigus: string;
          tirtouga: string;
          carracosta: string;
          archen: string;
          archeops: string;
          trubbish: string;
          garbodor: string;
          zorua: string;
          zoroark: string;
          minccino: string;
          cinccino: string;
          gothita: string;
          gothorita: string;
          gothitelle: string;
          solosis: string;
          duosion: string;
          reuniclus: string;
          ducklett: string;
          swanna: string;
          vanillite: string;
          vanillish: string;
          vanilluxe: string;
          deerling: string;
          sawsbuck: string;
          emolga: string;
          karrablast: string;
          escavalier: string;
          foongus: string;
          amoonguss: string;
          frillish: string;
          jellicent: string;
          alomomola: string;
          joltik: string;
          galvantula: string;
          ferroseed: string;
          ferrothorn: string;
          klink: string;
          klang: string;
          klinklang: string;
          tynamo: string;
          eelektrik: string;
          eelektross: string;
          elgyem: string;
          beheeyem: string;
          litwick: string;
          lampent: string;
          chandelure: string;
          axew: string;
          fraxure: string;
          haxorus: string;
          cubchoo: string;
          beartic: string;
          cryogonal: string;
          shelmet: string;
          accelgor: string;
          stunfisk: string;
          mienfoo: string;
          mienshao: string;
          druddigon: string;
          golett: string;
          golurk: string;
          pawniard: string;
          bisharp: string;
          bouffalant: string;
          rufflet: string;
          braviary: string;
          vullaby: string;
          mandibuzz: string;
          heatmor: string;
          durant: string;
          deino: string;
          zweilous: string;
          hydreigon: string;
          larvesta: string;
          volcarona: string;
          cobalion: string;
          terrakion: string;
          virizion: string;
          tornadus: string;
          thundurus: string;
          reshiram: string;
          zekrom: string;
          landorus: string;
          kyurem: string;
          keldeo: string;
          meloetta: string;
          genesect: string;
          chespin: string;
          quilladin: string;
          chesnaught: string;
          fennekin: string;
          braixen: string;
          delphox: string;
          froakie: string;
          frogadier: string;
          greninja: string;
          bunnelby: string;
          diggersby: string;
          fletchling: string;
          fletchinder: string;
          talonflame: string;
          scatterbug: string;
          spewpa: string;
          vivillon: string;
          litleo: string;
          pyroar: string;
          flabebe: string;
          floette: string;
          florges: string;
          skiddo: string;
          gogoat: string;
          pancham: string;
          pangoro: string;
          furfrou: string;
          espurr: string;
          meowstic: string;
          honedge: string;
          doublade: string;
          aegislash: string;
          spritzee: string;
          aromatisse: string;
          swirlix: string;
          slurpuff: string;
          inkay: string;
          malamar: string;
          binacle: string;
          barbaracle: string;
          skrelp: string;
          dragalge: string;
          clauncher: string;
          clawitzer: string;
          helioptile: string;
          heliolisk: string;
          tyrunt: string;
          tyrantrum: string;
          amaura: string;
          aurorus: string;
          sylveon: string;
          hawlucha: string;
          dedenne: string;
          carbink: string;
          goomy: string;
          sliggoo: string;
          goodra: string;
          klefki: string;
          phantump: string;
          trevenant: string;
          pumpkaboo: string;
          gourgeist: string;
          bergmite: string;
          avalugg: string;
          noibat: string;
          noivern: string;
          xerneas: string;
          yveltal: string;
          zygarde: string;
          diancie: string;
          hoopa: string;
          volcanion: string;
          rowlet: string;
          dartrix: string;
          decidueye: string;
          litten: string;
          torracat: string;
          incineroar: string;
          popplio: string;
          brionne: string;
          primarina: string;
          pikipek: string;
          trumbeak: string;
          toucannon: string;
          yungoos: string;
          gumshoos: string;
          grubbin: string;
          charjabug: string;
          vikavolt: string;
          crabrawler: string;
          crabominable: string;
          oricorio: string;
          cutiefly: string;
          ribombee: string;
          rockruff: string;
          lycanroc: string;
          wishiwashi: string;
          mareanie: string;
          toxapex: string;
          mudbray: string;
          mudsdale: string;
          dewpider: string;
          araquanid: string;
          fomantis: string;
          lurantis: string;
          morelull: string;
          shiinotic: string;
          salandit: string;
          salazzle: string;
          stufful: string;
          bewear: string;
          bounsweet: string;
          steenee: string;
          tsareena: string;
          comfey: string;
          oranguru: string;
          passimian: string;
          wimpod: string;
          golisopod: string;
          sandygast: string;
          palossand: string;
          pyukumuku: string;
          type_null: string;
          silvally: string;
          minior: string;
          komala: string;
          turtonator: string;
          togedemaru: string;
          mimikyu: string;
          bruxish: string;
          drampa: string;
          dhelmise: string;
          jangmo_o: string;
          hakamo_o: string;
          kommo_o: string;
          tapu_koko: string;
          tapu_lele: string;
          tapu_bulu: string;
          tapu_fini: string;
          cosmog: string;
          cosmoem: string;
          solgaleo: string;
          lunala: string;
          nihilego: string;
          buzzwole: string;
          pheromosa: string;
          xurkitree: string;
          celesteela: string;
          kartana: string;
          guzzlord: string;
          necrozma: string;
          magearna: string;
          marshadow: string;
          poipole: string;
          naganadel: string;
          stakataka: string;
          blacephalon: string;
          zeraora: string;
          meltan: string;
          melmetal: string;
          grookey: string;
          thwackey: string;
          rillaboom: string;
          scorbunny: string;
          raboot: string;
          cinderace: string;
          sobble: string;
          drizzile: string;
          inteleon: string;
          skwovet: string;
          greedent: string;
          rookidee: string;
          corvisquire: string;
          corviknight: string;
          blipbug: string;
          dottler: string;
          orbeetle: string;
          nickit: string;
          thievul: string;
          gossifleur: string;
          eldegoss: string;
          wooloo: string;
          dubwool: string;
          chewtle: string;
          drednaw: string;
          yamper: string;
          boltund: string;
          rolycoly: string;
          carkol: string;
          coalossal: string;
          applin: string;
          flapple: string;
          appletun: string;
          silicobra: string;
          sandaconda: string;
          cramorant: string;
          arrokuda: string;
          barraskewda: string;
          toxel: string;
          toxtricity: string;
          sizzlipede: string;
          centiskorch: string;
          clobbopus: string;
          grapploct: string;
          sinistea: string;
          polteageist: string;
          hatenna: string;
          hattrem: string;
          hatterene: string;
          impidimp: string;
          morgrem: string;
          grimmsnarl: string;
          obstagoon: string;
          perrserker: string;
          cursola: string;
          sirfetchd: string;
          mr_rime: string;
          runerigus: string;
          milcery: string;
          alcremie: string;
          falinks: string;
          pincurchin: string;
          snom: string;
          frosmoth: string;
          stonjourner: string;
          eiscue: string;
          indeedee: string;
          morpeko: string;
          cufant: string;
          copperajah: string;
          dracozolt: string;
          arctozolt: string;
          dracovish: string;
          arctovish: string;
          duraludon: string;
          dreepy: string;
          drakloak: string;
          dragapult: string;
          zacian: string;
          zamazenta: string;
          eternatus: string;
          kubfu: string;
          urshifu: string;
          zarude: string;
          regieleki: string;
          regidrago: string;
          glastrier: string;
          spectrier: string;
          calyrex: string;
          wyrdeer: string;
          kleavor: string;
          ursaluna: string;
          basculegion: string;
          sneasler: string;
          overqwil: string;
          enamorus: string;
          sprigatito: string;
          floragato: string;
          meowscarada: string;
          fuecoco: string;
          crocalor: string;
          skeledirge: string;
          quaxly: string;
          quaxwell: string;
          quaquaval: string;
          lechonk: string;
          oinkologne: string;
          tarountula: string;
          spidops: string;
          nymble: string;
          lokix: string;
          pawmi: string;
          pawmo: string;
          pawmot: string;
          tandemaus: string;
          maushold: string;
          fidough: string;
          dachsbun: string;
          smoliv: string;
          dolliv: string;
          arboliva: string;
          squawkabilly: string;
          nacli: string;
          naclstack: string;
          garganacl: string;
          charcadet: string;
          armarouge: string;
          ceruledge: string;
          tadbulb: string;
          bellibolt: string;
          wattrel: string;
          kilowattrel: string;
          maschiff: string;
          mabosstiff: string;
          shroodle: string;
          grafaiai: string;
          bramblin: string;
          brambleghast: string;
          toedscool: string;
          toedscruel: string;
          klawf: string;
          capsakid: string;
          scovillain: string;
          rellor: string;
          rabsca: string;
          flittle: string;
          espathra: string;
          tinkatink: string;
          tinkatuff: string;
          tinkaton: string;
          wiglett: string;
          wugtrio: string;
          bombirdier: string;
          finizen: string;
          palafin: string;
          varoom: string;
          revavroom: string;
          cyclizar: string;
          orthworm: string;
          glimmet: string;
          glimmora: string;
          greavard: string;
          houndstone: string;
          flamigo: string;
          cetoddle: string;
          cetitan: string;
          veluza: string;
          dondozo: string;
          tatsugiri: string;
          annihilape: string;
          clodsire: string;
          farigiraf: string;
          dudunsparce: string;
          kingambit: string;
          great_tusk: string;
          scream_tail: string;
          brute_bonnet: string;
          flutter_mane: string;
          slither_wing: string;
          sandy_shocks: string;
          iron_treads: string;
          iron_bundle: string;
          iron_hands: string;
          iron_jugulis: string;
          iron_moth: string;
          iron_thorns: string;
          frigibax: string;
          arctibax: string;
          baxcalibur: string;
          gimmighoul: string;
          gholdengo: string;
          wo_chien: string;
          chien_pao: string;
          ting_lu: string;
          chi_yu: string;
          roaring_moon: string;
          iron_valiant: string;
          koraidon: string;
          miraidon: string;
          walking_wake: string;
          iron_leaves: string;
          dipplin: string;
          poltchageist: string;
          sinistcha: string;
          okidogi: string;
          munkidori: string;
          fezandipiti: string;
          ogerpon: string;
          archaludon: string;
          hydrapple: string;
          gouging_fire: string;
          raging_bolt: string;
          iron_boulder: string;
          iron_crown: string;
          terapagos: string;
          pecharunt: string;
          alola_rattata: string;
          alola_raticate: string;
          alola_raichu: string;
          alola_sandshrew: string;
          alola_sandslash: string;
          alola_vulpix: string;
          alola_ninetales: string;
          alola_diglett: string;
          alola_dugtrio: string;
          alola_meowth: string;
          alola_persian: string;
          alola_geodude: string;
          alola_graveler: string;
          alola_golem: string;
          alola_grimer: string;
          alola_muk: string;
          alola_exeggutor: string;
          alola_marowak: string;
          eternal_floette: string;
          galar_meowth: string;
          galar_ponyta: string;
          galar_rapidash: string;
          galar_slowpoke: string;
          galar_slowbro: string;
          galar_farfetchd: string;
          galar_weezing: string;
          galar_mr_mime: string;
          galar_articuno: string;
          galar_zapdos: string;
          galar_moltres: string;
          galar_slowking: string;
          galar_corsola: string;
          galar_zigzagoon: string;
          galar_linoone: string;
          galar_darumaka: string;
          galar_darmanitan: string;
          galar_yamask: string;
          galar_stunfisk: string;
          hisui_growlithe: string;
          hisui_arcanine: string;
          hisui_voltorb: string;
          hisui_electrode: string;
          hisui_typhlosion: string;
          hisui_qwilfish: string;
          hisui_sneasel: string;
          hisui_samurott: string;
          hisui_lilligant: string;
          hisui_zorua: string;
          hisui_zoroark: string;
          hisui_braviary: string;
          hisui_sliggoo: string;
          hisui_goodra: string;
          hisui_avalugg: string;
          hisui_decidueye: string;
          paldea_tauros: string;
          paldea_wooper: string;
          bloodmoon_ursaluna: string;
      };
      pokemonForm: {
          pikachuCosplay: string;
          pikachuCoolCosplay: string;
          pikachuBeautyCosplay: string;
          pikachuCuteCosplay: string;
          pikachuSmartCosplay: string;
          pikachuToughCosplay: string;
          pikachuPartner: string;
          eeveePartner: string;
          pichuSpiky: string;
          unownA: string;
          unownB: string;
          unownC: string;
          unownD: string;
          unownE: string;
          unownF: string;
          unownG: string;
          unownH: string;
          unownI: string;
          unownJ: string;
          unownK: string;
          unownL: string;
          unownM: string;
          unownN: string;
          unownO: string;
          unownP: string;
          unownQ: string;
          unownR: string;
          unownS: string;
          unownT: string;
          unownU: string;
          unownV: string;
          unownW: string;
          unownX: string;
          unownY: string;
          unownZ: string;
          unownExclamation: string;
          unownQuestion: string;
          castformSunny: string;
          castformRainy: string;
          castformSnowy: string;
          deoxysNormal: string;
          burmyPlant: string;
          burmySandy: string;
          burmyTrash: string;
          shellosEast: string;
          shellosWest: string;
          rotomHeat: string;
          rotomWash: string;
          rotomFrost: string;
          rotomFan: string;
          rotomMow: string;
          giratinaAltered: string;
          shayminLand: string;
          basculinRedStriped: string;
          basculinBlueStriped: string;
          basculinWhiteStriped: string;
          deerlingSpring: string;
          deerlingSummer: string;
          deerlingAutumn: string;
          deerlingWinter: string;
          tornadusIncarnate: string;
          thundurusIncarnate: string;
          landorusIncarnate: string;
          keldeoOrdinary: string;
          meloettaAria: string;
          meloettaPirouette: string;
          froakieBattleBond: string;
          scatterbugMeadow: string;
          scatterbugIcySnow: string;
          scatterbugPolar: string;
          scatterbugTundra: string;
          scatterbugContinental: string;
          scatterbugGarden: string;
          scatterbugElegant: string;
          scatterbugModern: string;
          scatterbugMarine: string;
          scatterbugArchipelago: string;
          scatterbugHighPlains: string;
          scatterbugSandstorm: string;
          scatterbugRiver: string;
          scatterbugMonsoon: string;
          scatterbugSavanna: string;
          scatterbugSun: string;
          scatterbugOcean: string;
          scatterbugJungle: string;
          scatterbugFancy: string;
          scatterbugPokeBall: string;
          flabebeRed: string;
          flabebeYellow: string;
          flabebeOrange: string;
          flabebeBlue: string;
          flabebeWhite: string;
          furfrouHeart: string;
          furfrouStar: string;
          furfrouDiamond: string;
          furfrouDebutante: string;
          furfrouMatron: string;
          furfrouDandy: string;
          furfrouLaReine: string;
          furfrouKabuki: string;
          furfrouPharaoh: string;
          pumpkabooSmall: string;
          pumpkabooLarge: string;
          pumpkabooSuper: string;
          xerneasNeutral: string;
          xerneasActive: string;
          zygarde50: string;
          zygarde10: string;
          zygarde50Pc: string;
          zygarde10Pc: string;
          zygardeComplete: string;
          oricorioBaile: string;
          oricorioPompom: string;
          oricorioPau: string;
          oricorioSensu: string;
          rockruffOwnTempo: string;
          miniorRedMeteor: string;
          miniorOrangeMeteor: string;
          miniorYellowMeteor: string;
          miniorGreenMeteor: string;
          miniorBlueMeteor: string;
          miniorIndigoMeteor: string;
          miniorVioletMeteor: string;
          miniorRed: string;
          miniorOrange: string;
          miniorYellow: string;
          miniorGreen: string;
          miniorBlue: string;
          miniorIndigo: string;
          miniorViolet: string;
          mimikyuDisguised: string;
          mimikyuBusted: string;
          magearnaOriginal: string;
          marshadowZenith: string;
          sinisteaPhony: string;
          sinisteaAntique: string;
          eiscueNoIce: string;
          indeedeeMale: string;
          indeedeeFemale: string;
          morpekoFullBelly: string;
          zacianHeroOfManyBattles: string;
          zamazentaHeroOfManyBattles: string;
          zarudeDada: string;
          enamorusIncarnate: string;
          squawkabillyGreenPlumage: string;
          squawkabillyBluePlumage: string;
          squawkabillyYellowPlumage: string;
          squawkabillyWhitePlumage: string;
          tatsugiriCurly: string;
          tatsugiriDroopy: string;
          tatsugiriStretchy: string;
          gimmighoulChest: string;
          gimmighoulRoaming: string;
          koraidonApexBuild: string;
          koraidonLimitedBuild: string;
          koraidonSprintingBuild: string;
          koraidonSwimmingBuild: string;
          koraidonGlidingBuild: string;
          miraidonUltimateMode: string;
          miraidonLowPowerMode: string;
          miraidonDriveMode: string;
          miraidonAquaticMode: string;
          miraidonGlideMode: string;
          poltchageistCounterfeit: string;
          poltchageistArtisan: string;
          paldeaTaurosCombat: string;
          paldeaTaurosBlaze: string;
          paldeaTaurosAqua: string;
      };
      pokemonInfo: {
          Stat: {
              HP: string;
              HPshortened: string;
              ATK: string;
              ATKshortened: string;
              DEF: string;
              DEFshortened: string;
              SPATK: string;
              SPATKshortened: string;
              SPDEF: string;
              SPDEFshortened: string;
              SPD: string;
              SPDshortened: string;
              ACC: string;
              EVA: string;
              HPStat: string;
          };
          Type: {
              UNKNOWN: string;
              NORMAL: string;
              FIGHTING: string;
              FLYING: string;
              POISON: string;
              GROUND: string;
              ROCK: string;
              BUG: string;
              GHOST: string;
              STEEL: string;
              FIRE: string;
              WATER: string;
              GRASS: string;
              ELECTRIC: string;
              PSYCHIC: string;
              ICE: string;
              DRAGON: string;
              DARK: string;
              FAIRY: string;
              STELLAR: string;
          };
      };
      pokemonInfoContainer: {
          moveset: string;
          gender: string;
          ability: string;
          nature: string;
      };
      pokemonSummary: {
          pokemonInfo: string;
          status: string;
          powerAccuracyCategory: string;
          type: string;
          unknownTrainer: string;
          ot: string;
          nature: string;
          expPoints: string;
          nextLv: string;
          cancel: string;
          memoString: string;
          metFragment: {
              normal: string;
              apparently: string;
          };
      };
      saveSlotSelectUiHandler: {
          overwriteData: string;
          loading: string;
          wave: string;
          lv: string;
          empty: string;
      };
      settings: {
          boy: string;
          girl: string;
          general: string;
          display: string;
          audio: string;
          gamepad: string;
          keyboard: string;
          gameSpeed: string;
          hpBarSpeed: string;
          expGainsSpeed: string;
          expPartyDisplay: string;
          skipSeenDialogues: string;
          battleStyle: string;
          enableRetries: string;
          hideIvs: string;
          tutorials: string;
          touchControls: string;
          vibrations: string;
          normal: string;
          fast: string;
          faster: string;
          skip: string;
          levelUpNotifications: string;
          on: string;
          off: string;
          switch: string;
          set: string;
          auto: string;
          disabled: string;
          language: string;
          change: string;
          uiTheme: string;
          default: string;
          legacy: string;
          windowType: string;
          moneyFormat: string;
          damageNumbers: string;
          simple: string;
          fancy: string;
          abbreviated: string;
          moveAnimations: string;
          showStatsOnLevelUp: string;
          candyUpgradeNotification: string;
          passivesOnly: string;
          candyUpgradeDisplay: string;
          icon: string;
          animation: string;
          moveInfo: string;
          showMovesetFlyout: string;
          showArenaFlyout: string;
          showTimeOfDayWidget: string;
          timeOfDayAnimation: string;
          bounce: string;
          timeOfDay_back: string;
          spriteSet: string;
          consistent: string;
          mixedAnimated: string;
          fusionPaletteSwaps: string;
          playerGender: string;
          typeHints: string;
          masterVolume: string;
          bgmVolume: string;
          fieldVolume: string;
          seVolume: string;
          uiVolume: string;
          musicPreference: string;
          mixed: string;
          gamepadPleasePlug: string;
          delete: string;
          keyboardPleasePress: string;
          reset: string;
          requireReload: string;
          action: string;
          back: string;
          pressToBind: string;
          pressButton: string;
          buttonUp: string;
          buttonDown: string;
          buttonLeft: string;
          buttonRight: string;
          buttonAction: string;
          buttonMenu: string;
          buttonSubmit: string;
          buttonCancel: string;
          buttonStats: string;
          buttonCycleForm: string;
          buttonCycleShiny: string;
          buttonCycleGender: string;
          buttonCycleAbility: string;
          buttonCycleNature: string;
          buttonCycleVariant: string;
          buttonSpeedUp: string;
          buttonSlowDown: string;
          alt: string;
          mute: string;
          controller: string;
          gamepadSupport: string;
          showBgmBar: string;
          moveTouchControls: string;
          shopOverlayOpacity: string;
          shopCursorTarget: string;
          rewards: string;
          reroll: string;
          shop: string;
          checkTeam: string;
      };
      splashMessages: {
          battlesWon: string;
          joinTheDiscord: string;
          infiniteLevels: string;
          everythingStacks: string;
          optionalSaveScumming: string;
          biomes: string;
          openSource: string;
          playWithSpeed: string;
          liveBugTesting: string;
          heavyInfluence: string;
          pokemonRiskAndPokemonRain: string;
          nowWithMoreSalt: string;
          infiniteFusionAtHome: string;
          brokenEggMoves: string;
          magnificent: string;
          mubstitute: string;
          thatsCrazy: string;
          oranceJuice: string;
          questionableBalancing: string;
          coolShaders: string;
          aiFree: string;
          suddenDifficultySpikes: string;
          basedOnAnUnfinishedFlashGame: string;
          moreAddictiveThanIntended: string;
          mostlyConsistentSeeds: string;
          achievementPointsDontDoAnything: string;
          youDoNotStartAtLevel: string;
          dontTalkAboutTheManaphyEggIncident: string;
          alsoTryPokengine: string;
          alsoTryEmeraldRogue: string;
          alsoTryRadicalRed: string;
          eeveeExpo: string;
          ynoproject: string;
          breedersInSpace: string;
      };
      starterSelectUiHandler: {
          confirmStartTeam: string;
          invalidParty: string;
          gen1: string;
          gen2: string;
          gen3: string;
          gen4: string;
          gen5: string;
          gen6: string;
          gen7: string;
          gen8: string;
          gen9: string;
          growthRate: string;
          ability: string;
          passive: string;
          nature: string;
          eggMoves: string;
          addToParty: string;
          removeFromParty: string;
          toggleIVs: string;
          manageMoves: string;
          manageNature: string;
          useCandies: string;
          selectNature: string;
          selectMoveSwapOut: string;
          selectMoveSwapWith: string;
          unlockPassive: string;
          reduceCost: string;
          cycleShiny: string;
          cycleForm: string;
          cycleGender: string;
          cycleAbility: string;
          cycleNature: string;
          cycleVariant: string;
          goFilter: string;
          enablePassive: string;
          disablePassive: string;
          locked: string;
          disabled: string;
          uncaught: string;
      };
      statusEffect: {
          none: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          poison: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          toxic: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          paralysis: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          sleep: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          freeze: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          burn: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
      };
      terrain: {
          misty: string;
          mistyStartMessage: string;
          mistyClearMessage: string;
          mistyBlockMessage: string;
          electric: string;
          electricStartMessage: string;
          electricClearMessage: string;
          grassy: string;
          grassyStartMessage: string;
          grassyClearMessage: string;
          psychic: string;
          psychicStartMessage: string;
          psychicClearMessage: string;
          defaultBlockMessage: string;
      };
      titles: {
          elite_four: string;
          elite_four_female: string;
          gym_leader: string;
          gym_leader_female: string;
          gym_leader_double: string;
          champion: string;
          champion_female: string;
          champion_double: string;
          rival: string;
          professor: string;
          frontier_brain: string;
          rocket_boss: string;
          magma_boss: string;
          aqua_boss: string;
          galactic_boss: string;
          plasma_boss: string;
          flare_boss: string;
          aether_boss: string;
          rocket_admin: string;
          rocket_admin_female: string;
          magma_admin: string;
          magma_admin_female: string;
          aqua_admin: string;
          aqua_admin_female: string;
          galactic_commander: string;
          galactic_commander_female: string;
          plasma_sage: string;
          plasma_admin: string;
          flare_admin: string;
          flare_admin_female: string;
          aether_admin: string;
      };
      trainerClasses: {
          ace_trainer: string;
          ace_trainer_female: string;
          ace_duo: string;
          artist: string;
          artist_female: string;
          backers: string;
          backpacker: string;
          backpacker_female: string;
          backpackers: string;
          baker: string;
          battle_girl: string;
          beauty: string;
          beginners: string;
          biker: string;
          black_belt: string;
          breeder: string;
          breeder_female: string;
          breeders: string;
          clerk: string;
          clerk_female: string;
          colleagues: string;
          crush_kin: string;
          cyclist: string;
          cyclist_female: string;
          cyclists: string;
          dancer: string;
          dancer_female: string;
          depot_agent: string;
          doctor: string;
          doctor_female: string;
          firebreather: string;
          fisherman: string;
          fisherman_female: string;
          gentleman: string;
          guitarist: string;
          guitarist_female: string;
          harlequin: string;
          hiker: string;
          hooligans: string;
          hoopster: string;
          infielder: string;
          janitor: string;
          lady: string;
          lass: string;
          linebacker: string;
          maid: string;
          madame: string;
          medical_team: string;
          musician: string;
          hex_maniac: string;
          nurse: string;
          nursery_aide: string;
          officer: string;
          parasol_lady: string;
          pilot: string;
          pokéfan: string;
          pokéfan_female: string;
          pokéfan_family: string;
          preschooler: string;
          preschooler_female: string;
          preschoolers: string;
          psychic: string;
          psychic_female: string;
          psychics: string;
          restaurant_staff: string;
          rich: string;
          rich_female: string;
          rich_boy: string;
          rich_couple: string;
          rich_kid: string;
          rich_kid_female: string;
          rich_kids: string;
          roughneck: string;
          sailor: string;
          scientist: string;
          scientist_female: string;
          scientists: string;
          smasher: string;
          snow_worker: string;
          snow_worker_female: string;
          striker: string;
          school_kid: string;
          school_kid_female: string;
          school_kids: string;
          swimmer: string;
          swimmer_female: string;
          swimmers: string;
          twins: string;
          veteran: string;
          veteran_female: string;
          veteran_duo: string;
          waiter: string;
          waitress: string;
          worker: string;
          worker_female: string;
          workers: string;
          youngster: string;
          aether_grunt: string;
          aether_grunt_female: string;
          aether_grunts: string;
      };
      trainerNames: {
          brock: string;
          misty: string;
          lt_surge: string;
          erika: string;
          janine: string;
          sabrina: string;
          blaine: string;
          giovanni: string;
          falkner: string;
          bugsy: string;
          whitney: string;
          morty: string;
          chuck: string;
          jasmine: string;
          pryce: string;
          clair: string;
          roxanne: string;
          brawly: string;
          wattson: string;
          flannery: string;
          norman: string;
          winona: string;
          tate: string;
          liza: string;
          juan: string;
          roark: string;
          gardenia: string;
          maylene: string;
          crasher_wake: string;
          fantina: string;
          byron: string;
          candice: string;
          volkner: string;
          cilan: string;
          chili: string;
          cress: string;
          cheren: string;
          lenora: string;
          roxie: string;
          burgh: string;
          elesa: string;
          clay: string;
          skyla: string;
          brycen: string;
          drayden: string;
          marlon: string;
          viola: string;
          grant: string;
          korrina: string;
          ramos: string;
          clemont: string;
          valerie: string;
          olympia: string;
          wulfric: string;
          milo: string;
          nessa: string;
          kabu: string;
          bea: string;
          allister: string;
          opal: string;
          bede: string;
          gordie: string;
          melony: string;
          piers: string;
          marnie: string;
          raihan: string;
          katy: string;
          brassius: string;
          iono: string;
          kofu: string;
          larry: string;
          ryme: string;
          tulip: string;
          grusha: string;
          lorelei: string;
          bruno: string;
          agatha: string;
          lance: string;
          will: string;
          koga: string;
          karen: string;
          sidney: string;
          phoebe: string;
          glacia: string;
          drake: string;
          aaron: string;
          bertha: string;
          flint: string;
          lucian: string;
          shauntal: string;
          marshal: string;
          grimsley: string;
          caitlin: string;
          malva: string;
          siebold: string;
          wikstrom: string;
          drasna: string;
          hala: string;
          molayne: string;
          olivia: string;
          acerola: string;
          kahili: string;
          rika: string;
          poppy: string;
          hassel: string;
          crispin: string;
          amarys: string;
          lacey: string;
          drayton: string;
          blue: string;
          red: string;
          steven: string;
          wallace: string;
          cynthia: string;
          alder: string;
          iris: string;
          diantha: string;
          hau: string;
          geeta: string;
          nemona: string;
          kieran: string;
          leon: string;
          rival: string;
          rival_female: string;
          archer: string;
          ariana: string;
          proton: string;
          petrel: string;
          tabitha: string;
          courtney: string;
          shelly: string;
          matt: string;
          mars: string;
          jupiter: string;
          saturn: string;
          zinzolin: string;
          rood: string;
          xerosic: string;
          bryony: string;
          maxie: string;
          archie: string;
          cyrus: string;
          ghetsis: string;
          lysandre: string;
          faba: string;
          lusamine: string;
          blue_red_double: string;
          red_blue_double: string;
          tate_liza_double: string;
          liza_tate_double: string;
          steven_wallace_double: string;
          wallace_steven_double: string;
          alder_iris_double: string;
          iris_alder_double: string;
          marnie_piers_double: string;
          piers_marnie_double: string;
      };
      tutorial: {
          intro: string;
          accessMenu: string;
          menu: string;
          starterSelect: string;
          pokerus: string;
          statChange: string;
          selectItem: string;
          eggGacha: string;
      };
      voucher: {
          vouchers: string;
          eggVoucher: string;
          eggVoucherPlus: string;
          eggVoucherPremium: string;
          eggVoucherGold: string;
          locked: string;
          defeatTrainer: string;
      };
      weather: {
          sunnyStartMessage: string;
          sunnyLapseMessage: string;
          sunnyClearMessage: string;
          rainStartMessage: string;
          rainLapseMessage: string;
          rainClearMessage: string;
          sandstormStartMessage: string;
          sandstormLapseMessage: string;
          sandstormClearMessage: string;
          sandstormDamageMessage: string;
          hailStartMessage: string;
          hailLapseMessage: string;
          hailClearMessage: string;
          hailDamageMessage: string;
          snowStartMessage: string;
          snowLapseMessage: string;
          snowClearMessage: string;
          fogStartMessage: string;
          fogLapseMessage: string;
          fogClearMessage: string;
          heavyRainStartMessage: string;
          heavyRainLapseMessage: string;
          heavyRainClearMessage: string;
          harshSunStartMessage: string;
          harshSunLapseMessage: string;
          harshSunClearMessage: string;
          strongWindsStartMessage: string;
          strongWindsLapseMessage: string;
          strongWindsEffectMessage: string;
          strongWindsClearMessage: string;
      };
      partyUiHandler: {
          SEND_OUT: string;
          SUMMARY: string;
          CANCEL: string;
          RELEASE: string;
          APPLY: string;
          TEACH: string;
          SPLICE: string;
          UNSPLICE: string;
          ACTIVATE: string;
          DEACTIVATE: string;
          TRANSFER: string;
          ALL: string;
          PASS_BATON: string;
          UNPAUSE_EVOLUTION: string;
          REVIVE: string;
          RENAME: string;
          choosePokemon: string;
          doWhatWithThisPokemon: string;
          noEnergy: string;
          hasEnergy: string;
          cantBeUsed: string;
          tooManyItems: string;
          anyEffect: string;
          unpausedEvolutions: string;
          unspliceConfirmation: string;
          wasReverted: string;
          releaseConfirmation: string;
          releaseInBattle: string;
          selectAMove: string;
          changeQuantity: string;
          selectAnotherPokemonToSplice: string;
          cancel: string;
          able: string;
          notAble: string;
          learned: string;
          goodbye: string;
          byebye: string;
          farewell: string;
          soLong: string;
          thisIsWhereWePart: string;
          illMissYou: string;
          illNeverForgetYou: string;
          untilWeMeetAgain: string;
          sayonara: string;
          smellYaLater: string;
      };
      modifierSelectUiHandler: {
          transfer: string;
          reroll: string;
          lockRarities: string;
          checkTeam: string;
          transferDesc: string;
          rerollDesc: string;
          lockRaritiesDesc: string;
          checkTeamDesc: string;
          rerollCost: string;
          itemCost: string;
      };
      moveTriggers: {
          switchedTwoStatChanges: string;
          switchedStat: string;
          sharedGuard: string;
          sharedPower: string;
          isChargingPower: string;
          burnedItselfOut: string;
          startedHeatingUpBeak: string;
          setUpShellTrap: string;
          isOverflowingWithSpacePower: string;
          usedUpAllElectricity: string;
          stoleItem: string;
          statEliminated: string;
          revivalBlessing: string;
          safeguard: string;
      };
      runHistory: {
          victory: string;
          defeatedWild: string;
          defeatedTrainer: string;
          defeatedTrainerDouble: string;
          defeatedRival: string;
          defeated: string;
          defeatedWild_female: string;
          defeatedTrainer_female: string;
          defeatedTrainerDouble_female: string;
          defeatedRival_female: string;
          defeated_female: string;
          luck: string;
          score: string;
          mode: string;
          challengeRules: string;
          challengeMonoGen1: string;
          challengeMonoGen2: string;
          challengeMonoGen3: string;
          challengeMonoGen4: string;
          challengeMonoGen5: string;
          challengeMonoGen6: string;
          challengeMonoGen7: string;
          challengeMonoGen8: string;
          challengeMonoGen9: string;
          playerItems: string;
          personalBest: string;
          SPDshortened: string;
          runInfo: string;
          money: string;
          runLength: string;
          viewHeldItems: string;
          hallofFameText: string;
          hallofFameText_female: string;
          viewHallOfFame: string;
          viewEndingSplash: string;
      };
  };
  
}

declare namespace PokeRogue.locales.fr {
  export declare const frConfig: {
      ability: {
          stench: {
              name: string;
              description: string;
          };
          drizzle: {
              name: string;
              description: string;
          };
          speedBoost: {
              name: string;
              description: string;
          };
          battleArmor: {
              name: string;
              description: string;
          };
          sturdy: {
              name: string;
              description: string;
          };
          damp: {
              name: string;
              description: string;
          };
          limber: {
              name: string;
              description: string;
          };
          sandVeil: {
              name: string;
              description: string;
          };
          static: {
              name: string;
              description: string;
          };
          voltAbsorb: {
              name: string;
              description: string;
          };
          waterAbsorb: {
              name: string;
              description: string;
          };
          oblivious: {
              name: string;
              description: string;
          };
          cloudNine: {
              name: string;
              description: string;
          };
          compoundEyes: {
              name: string;
              description: string;
          };
          insomnia: {
              name: string;
              description: string;
          };
          colorChange: {
              name: string;
              description: string;
          };
          immunity: {
              name: string;
              description: string;
          };
          flashFire: {
              name: string;
              description: string;
          };
          shieldDust: {
              name: string;
              description: string;
          };
          ownTempo: {
              name: string;
              description: string;
          };
          suctionCups: {
              name: string;
              description: string;
          };
          intimidate: {
              name: string;
              description: string;
          };
          shadowTag: {
              name: string;
              description: string;
          };
          roughSkin: {
              name: string;
              description: string;
          };
          wonderGuard: {
              name: string;
              description: string;
          };
          levitate: {
              name: string;
              description: string;
          };
          effectSpore: {
              name: string;
              description: string;
          };
          synchronize: {
              name: string;
              description: string;
          };
          clearBody: {
              name: string;
              description: string;
          };
          naturalCure: {
              name: string;
              description: string;
          };
          lightningRod: {
              name: string;
              description: string;
          };
          sereneGrace: {
              name: string;
              description: string;
          };
          swiftSwim: {
              name: string;
              description: string;
          };
          chlorophyll: {
              name: string;
              description: string;
          };
          illuminate: {
              name: string;
              description: string;
          };
          trace: {
              name: string;
              description: string;
          };
          hugePower: {
              name: string;
              description: string;
          };
          poisonPoint: {
              name: string;
              description: string;
          };
          innerFocus: {
              name: string;
              description: string;
          };
          magmaArmor: {
              name: string;
              description: string;
          };
          waterVeil: {
              name: string;
              description: string;
          };
          magnetPull: {
              name: string;
              description: string;
          };
          soundproof: {
              name: string;
              description: string;
          };
          rainDish: {
              name: string;
              description: string;
          };
          sandStream: {
              name: string;
              description: string;
          };
          pressure: {
              name: string;
              description: string;
          };
          thickFat: {
              name: string;
              description: string;
          };
          earlyBird: {
              name: string;
              description: string;
          };
          flameBody: {
              name: string;
              description: string;
          };
          runAway: {
              name: string;
              description: string;
          };
          keenEye: {
              name: string;
              description: string;
          };
          hyperCutter: {
              name: string;
              description: string;
          };
          pickup: {
              name: string;
              description: string;
          };
          truant: {
              name: string;
              description: string;
          };
          hustle: {
              name: string;
              description: string;
          };
          cuteCharm: {
              name: string;
              description: string;
          };
          plus: {
              name: string;
              description: string;
          };
          minus: {
              name: string;
              description: string;
          };
          forecast: {
              name: string;
              description: string;
          };
          stickyHold: {
              name: string;
              description: string;
          };
          shedSkin: {
              name: string;
              description: string;
          };
          guts: {
              name: string;
              description: string;
          };
          marvelScale: {
              name: string;
              description: string;
          };
          liquidOoze: {
              name: string;
              description: string;
          };
          overgrow: {
              name: string;
              description: string;
          };
          blaze: {
              name: string;
              description: string;
          };
          torrent: {
              name: string;
              description: string;
          };
          swarm: {
              name: string;
              description: string;
          };
          rockHead: {
              name: string;
              description: string;
          };
          drought: {
              name: string;
              description: string;
          };
          arenaTrap: {
              name: string;
              description: string;
          };
          vitalSpirit: {
              name: string;
              description: string;
          };
          whiteSmoke: {
              name: string;
              description: string;
          };
          purePower: {
              name: string;
              description: string;
          };
          shellArmor: {
              name: string;
              description: string;
          };
          airLock: {
              name: string;
              description: string;
          };
          tangledFeet: {
              name: string;
              description: string;
          };
          motorDrive: {
              name: string;
              description: string;
          };
          rivalry: {
              name: string;
              description: string;
          };
          steadfast: {
              name: string;
              description: string;
          };
          snowCloak: {
              name: string;
              description: string;
          };
          gluttony: {
              name: string;
              description: string;
          };
          angerPoint: {
              name: string;
              description: string;
          };
          unburden: {
              name: string;
              description: string;
          };
          heatproof: {
              name: string;
              description: string;
          };
          simple: {
              name: string;
              description: string;
          };
          drySkin: {
              name: string;
              description: string;
          };
          download: {
              name: string;
              description: string;
          };
          ironFist: {
              name: string;
              description: string;
          };
          poisonHeal: {
              name: string;
              description: string;
          };
          adaptability: {
              name: string;
              description: string;
          };
          skillLink: {
              name: string;
              description: string;
          };
          hydration: {
              name: string;
              description: string;
          };
          solarPower: {
              name: string;
              description: string;
          };
          quickFeet: {
              name: string;
              description: string;
          };
          normalize: {
              name: string;
              description: string;
          };
          sniper: {
              name: string;
              description: string;
          };
          magicGuard: {
              name: string;
              description: string;
          };
          noGuard: {
              name: string;
              description: string;
          };
          stall: {
              name: string;
              description: string;
          };
          technician: {
              name: string;
              description: string;
          };
          leafGuard: {
              name: string;
              description: string;
          };
          klutz: {
              name: string;
              description: string;
          };
          moldBreaker: {
              name: string;
              description: string;
          };
          superLuck: {
              name: string;
              description: string;
          };
          aftermath: {
              name: string;
              description: string;
          };
          anticipation: {
              name: string;
              description: string;
          };
          forewarn: {
              name: string;
              description: string;
          };
          unaware: {
              name: string;
              description: string;
          };
          tintedLens: {
              name: string;
              description: string;
          };
          filter: {
              name: string;
              description: string;
          };
          slowStart: {
              name: string;
              description: string;
          };
          scrappy: {
              name: string;
              description: string;
          };
          stormDrain: {
              name: string;
              description: string;
          };
          iceBody: {
              name: string;
              description: string;
          };
          solidRock: {
              name: string;
              description: string;
          };
          snowWarning: {
              name: string;
              description: string;
          };
          honeyGather: {
              name: string;
              description: string;
          };
          frisk: {
              name: string;
              description: string;
          };
          reckless: {
              name: string;
              description: string;
          };
          multitype: {
              name: string;
              description: string;
          };
          flowerGift: {
              name: string;
              description: string;
          };
          badDreams: {
              name: string;
              description: string;
          };
          pickpocket: {
              name: string;
              description: string;
          };
          sheerForce: {
              name: string;
              description: string;
          };
          contrary: {
              name: string;
              description: string;
          };
          unnerve: {
              name: string;
              description: string;
          };
          defiant: {
              name: string;
              description: string;
          };
          defeatist: {
              name: string;
              description: string;
          };
          cursedBody: {
              name: string;
              description: string;
          };
          healer: {
              name: string;
              description: string;
          };
          friendGuard: {
              name: string;
              description: string;
          };
          weakArmor: {
              name: string;
              description: string;
          };
          heavyMetal: {
              name: string;
              description: string;
          };
          lightMetal: {
              name: string;
              description: string;
          };
          multiscale: {
              name: string;
              description: string;
          };
          toxicBoost: {
              name: string;
              description: string;
          };
          flareBoost: {
              name: string;
              description: string;
          };
          harvest: {
              name: string;
              description: string;
          };
          telepathy: {
              name: string;
              description: string;
          };
          moody: {
              name: string;
              description: string;
          };
          overcoat: {
              name: string;
              description: string;
          };
          poisonTouch: {
              name: string;
              description: string;
          };
          regenerator: {
              name: string;
              description: string;
          };
          bigPecks: {
              name: string;
              description: string;
          };
          sandRush: {
              name: string;
              description: string;
          };
          wonderSkin: {
              name: string;
              description: string;
          };
          analytic: {
              name: string;
              description: string;
          };
          illusion: {
              name: string;
              description: string;
          };
          imposter: {
              name: string;
              description: string;
          };
          infiltrator: {
              name: string;
              description: string;
          };
          mummy: {
              name: string;
              description: string;
          };
          moxie: {
              name: string;
              description: string;
          };
          justified: {
              name: string;
              description: string;
          };
          rattled: {
              name: string;
              description: string;
          };
          magicBounce: {
              name: string;
              description: string;
          };
          sapSipper: {
              name: string;
              description: string;
          };
          prankster: {
              name: string;
              description: string;
          };
          sandForce: {
              name: string;
              description: string;
          };
          ironBarbs: {
              name: string;
              description: string;
          };
          zenMode: {
              name: string;
              description: string;
          };
          victoryStar: {
              name: string;
              description: string;
          };
          turboblaze: {
              name: string;
              description: string;
          };
          teravolt: {
              name: string;
              description: string;
          };
          aromaVeil: {
              name: string;
              description: string;
          };
          flowerVeil: {
              name: string;
              description: string;
          };
          cheekPouch: {
              name: string;
              description: string;
          };
          protean: {
              name: string;
              description: string;
          };
          furCoat: {
              name: string;
              description: string;
          };
          magician: {
              name: string;
              description: string;
          };
          bulletproof: {
              name: string;
              description: string;
          };
          competitive: {
              name: string;
              description: string;
          };
          strongJaw: {
              name: string;
              description: string;
          };
          refrigerate: {
              name: string;
              description: string;
          };
          sweetVeil: {
              name: string;
              description: string;
          };
          stanceChange: {
              name: string;
              description: string;
          };
          galeWings: {
              name: string;
              description: string;
          };
          megaLauncher: {
              name: string;
              description: string;
          };
          grassPelt: {
              name: string;
              description: string;
          };
          symbiosis: {
              name: string;
              description: string;
          };
          toughClaws: {
              name: string;
              description: string;
          };
          pixilate: {
              name: string;
              description: string;
          };
          gooey: {
              name: string;
              description: string;
          };
          aerilate: {
              name: string;
              description: string;
          };
          parentalBond: {
              name: string;
              description: string;
          };
          darkAura: {
              name: string;
              description: string;
          };
          fairyAura: {
              name: string;
              description: string;
          };
          auraBreak: {
              name: string;
              description: string;
          };
          primordialSea: {
              name: string;
              description: string;
          };
          desolateLand: {
              name: string;
              description: string;
          };
          deltaStream: {
              name: string;
              description: string;
          };
          stamina: {
              name: string;
              description: string;
          };
          wimpOut: {
              name: string;
              description: string;
          };
          emergencyExit: {
              name: string;
              description: string;
          };
          waterCompaction: {
              name: string;
              description: string;
          };
          merciless: {
              name: string;
              description: string;
          };
          shieldsDown: {
              name: string;
              description: string;
          };
          stakeout: {
              name: string;
              description: string;
          };
          waterBubble: {
              name: string;
              description: string;
          };
          steelworker: {
              name: string;
              description: string;
          };
          berserk: {
              name: string;
              description: string;
          };
          slushRush: {
              name: string;
              description: string;
          };
          longReach: {
              name: string;
              description: string;
          };
          liquidVoice: {
              name: string;
              description: string;
          };
          triage: {
              name: string;
              description: string;
          };
          galvanize: {
              name: string;
              description: string;
          };
          surgeSurfer: {
              name: string;
              description: string;
          };
          schooling: {
              name: string;
              description: string;
          };
          disguise: {
              name: string;
              description: string;
          };
          battleBond: {
              name: string;
              description: string;
          };
          powerConstruct: {
              name: string;
              description: string;
          };
          corrosion: {
              name: string;
              description: string;
          };
          comatose: {
              name: string;
              description: string;
          };
          queenlyMajesty: {
              name: string;
              description: string;
          };
          innardsOut: {
              name: string;
              description: string;
          };
          dancer: {
              name: string;
              description: string;
          };
          battery: {
              name: string;
              description: string;
          };
          fluffy: {
              name: string;
              description: string;
          };
          dazzling: {
              name: string;
              description: string;
          };
          soulHeart: {
              name: string;
              description: string;
          };
          tanglingHair: {
              name: string;
              description: string;
          };
          receiver: {
              name: string;
              description: string;
          };
          powerOfAlchemy: {
              name: string;
              description: string;
          };
          beastBoost: {
              name: string;
              description: string;
          };
          rksSystem: {
              name: string;
              description: string;
          };
          electricSurge: {
              name: string;
              description: string;
          };
          psychicSurge: {
              name: string;
              description: string;
          };
          mistySurge: {
              name: string;
              description: string;
          };
          grassySurge: {
              name: string;
              description: string;
          };
          fullMetalBody: {
              name: string;
              description: string;
          };
          shadowShield: {
              name: string;
              description: string;
          };
          prismArmor: {
              name: string;
              description: string;
          };
          neuroforce: {
              name: string;
              description: string;
          };
          intrepidSword: {
              name: string;
              description: string;
          };
          dauntlessShield: {
              name: string;
              description: string;
          };
          libero: {
              name: string;
              description: string;
          };
          ballFetch: {
              name: string;
              description: string;
          };
          cottonDown: {
              name: string;
              description: string;
          };
          propellerTail: {
              name: string;
              description: string;
          };
          mirrorArmor: {
              name: string;
              description: string;
          };
          gulpMissile: {
              name: string;
              description: string;
          };
          stalwart: {
              name: string;
              description: string;
          };
          steamEngine: {
              name: string;
              description: string;
          };
          punkRock: {
              name: string;
              description: string;
          };
          sandSpit: {
              name: string;
              description: string;
          };
          iceScales: {
              name: string;
              description: string;
          };
          ripen: {
              name: string;
              description: string;
          };
          iceFace: {
              name: string;
              description: string;
          };
          powerSpot: {
              name: string;
              description: string;
          };
          mimicry: {
              name: string;
              description: string;
          };
          screenCleaner: {
              name: string;
              description: string;
          };
          steelySpirit: {
              name: string;
              description: string;
          };
          perishBody: {
              name: string;
              description: string;
          };
          wanderingSpirit: {
              name: string;
              description: string;
          };
          gorillaTactics: {
              name: string;
              description: string;
          };
          neutralizingGas: {
              name: string;
              description: string;
          };
          pastelVeil: {
              name: string;
              description: string;
          };
          hungerSwitch: {
              name: string;
              description: string;
          };
          quickDraw: {
              name: string;
              description: string;
          };
          unseenFist: {
              name: string;
              description: string;
          };
          curiousMedicine: {
              name: string;
              description: string;
          };
          transistor: {
              name: string;
              description: string;
          };
          dragonsMaw: {
              name: string;
              description: string;
          };
          chillingNeigh: {
              name: string;
              description: string;
          };
          grimNeigh: {
              name: string;
              description: string;
          };
          asOneGlastrier: {
              name: string;
              description: string;
          };
          asOneSpectrier: {
              name: string;
              description: string;
          };
          lingeringAroma: {
              name: string;
              description: string;
          };
          seedSower: {
              name: string;
              description: string;
          };
          thermalExchange: {
              name: string;
              description: string;
          };
          angerShell: {
              name: string;
              description: string;
          };
          purifyingSalt: {
              name: string;
              description: string;
          };
          wellBakedBody: {
              name: string;
              description: string;
          };
          windRider: {
              name: string;
              description: string;
          };
          guardDog: {
              name: string;
              description: string;
          };
          rockyPayload: {
              name: string;
              description: string;
          };
          windPower: {
              name: string;
              description: string;
          };
          zeroToHero: {
              name: string;
              description: string;
          };
          commander: {
              name: string;
              description: string;
          };
          electromorphosis: {
              name: string;
              description: string;
          };
          protosynthesis: {
              name: string;
              description: string;
          };
          quarkDrive: {
              name: string;
              description: string;
          };
          goodAsGold: {
              name: string;
              description: string;
          };
          vesselOfRuin: {
              name: string;
              description: string;
          };
          swordOfRuin: {
              name: string;
              description: string;
          };
          tabletsOfRuin: {
              name: string;
              description: string;
          };
          beadsOfRuin: {
              name: string;
              description: string;
          };
          orichalcumPulse: {
              name: string;
              description: string;
          };
          hadronEngine: {
              name: string;
              description: string;
          };
          opportunist: {
              name: string;
              description: string;
          };
          cudChew: {
              name: string;
              description: string;
          };
          sharpness: {
              name: string;
              description: string;
          };
          supremeOverlord: {
              name: string;
              description: string;
          };
          costar: {
              name: string;
              description: string;
          };
          toxicDebris: {
              name: string;
              description: string;
          };
          armorTail: {
              name: string;
              description: string;
          };
          earthEater: {
              name: string;
              description: string;
          };
          myceliumMight: {
              name: string;
              description: string;
          };
          mindsEye: {
              name: string;
              description: string;
          };
          supersweetSyrup: {
              name: string;
              description: string;
          };
          hospitality: {
              name: string;
              description: string;
          };
          toxicChain: {
              name: string;
              description: string;
          };
          embodyAspectTeal: {
              name: string;
              description: string;
          };
          embodyAspectWellspring: {
              name: string;
              description: string;
          };
          embodyAspectHearthflame: {
              name: string;
              description: string;
          };
          embodyAspectCornerstone: {
              name: string;
              description: string;
          };
          teraShift: {
              name: string;
              description: string;
          };
          teraShell: {
              name: string;
              description: string;
          };
          teraformZero: {
              name: string;
              description: string;
          };
          poisonPuppeteer: {
              name: string;
              description: string;
          };
      };
      abilityTriggers: {
          blockRecoilDamage: string;
          badDreams: string;
          costar: string;
          iceFaceAvoidedDamage: string;
          perishBody: string;
          poisonHeal: string;
          trace: string;
          windPowerCharged: string;
          quickDraw: string;
          blockItemTheft: string;
          typeImmunityHeal: string;
          nonSuperEffectiveImmunity: string;
          disguiseAvoidedDamage: string;
          moveImmunity: string;
          reverseDrain: string;
          postDefendTypeChange: string;
          postDefendContactDamage: string;
          postDefendAbilitySwap: string;
          postDefendAbilityGive: string;
          postDefendMoveDisable: string;
          pokemonTypeChange: string;
          postAttackStealHeldItem: string;
          postDefendStealHeldItem: string;
          copyFaintedAllyAbility: string;
          intimidateImmunity: string;
          postSummonAllyHeal: string;
          postSummonClearAllyStats: string;
          postSummonTransform: string;
          protectStat: string;
          statusEffectImmunityWithName: string;
          statusEffectImmunity: string;
          battlerTagImmunity: string;
          forewarn: string;
          frisk: string;
          postWeatherLapseHeal: string;
          postWeatherLapseDamage: string;
          postTurnLootCreateEatenBerry: string;
          postTurnHeal: string;
          fetchBall: string;
          healFromBerryUse: string;
          arenaTrap: string;
          postBattleLoot: string;
          postFaintContactDamage: string;
          postFaintHpDamage: string;
          postSummonPressure: string;
          weatherEffectDisappeared: string;
          postSummonMoldBreaker: string;
          postSummonAnticipation: string;
          postSummonTurboblaze: string;
          postSummonTeravolt: string;
          postSummonDarkAura: string;
          postSummonFairyAura: string;
          postSummonNeutralizingGas: string;
          postSummonAsOneGlastrier: string;
          postSummonAsOneSpectrier: string;
          postSummonVesselOfRuin: string;
          postSummonSwordOfRuin: string;
          postSummonTabletsOfRuin: string;
          postSummonBeadsOfRuin: string;
          preventBerryUse: string;
      };
      arenaFlyout: {
          activeBattleEffects: string;
          player: string;
          neutral: string;
          enemy: string;
          sunny: string;
          rain: string;
          sandstorm: string;
          hail: string;
          snow: string;
          fog: string;
          heavyRain: string;
          harshSun: string;
          strongWinds: string;
          misty: string;
          electric: string;
          grassy: string;
          psychic: string;
          mudSport: string;
          waterSport: string;
          spikes: string;
          toxicSpikes: string;
          mist: string;
          futureSight: string;
          doomDesire: string;
          wish: string;
          stealthRock: string;
          stickyWeb: string;
          trickRoom: string;
          gravity: string;
          reflect: string;
          lightScreen: string;
          auroraVeil: string;
          quickGuard: string;
          wideGuard: string;
          matBlock: string;
          craftyShield: string;
          tailwind: string;
          happyHour: string;
          safeguard: string;
      };
      arenaTag: {
          yourTeam: string;
          opposingTeam: string;
          arenaOnRemove: string;
          arenaOnRemovePlayer: string;
          arenaOnRemoveEnemy: string;
          mistOnAdd: string;
          mistApply: string;
          reflectOnAdd: string;
          reflectOnAddPlayer: string;
          reflectOnAddEnemy: string;
          lightScreenOnAdd: string;
          lightScreenOnAddPlayer: string;
          lightScreenOnAddEnemy: string;
          auroraVeilOnAdd: string;
          auroraVeilOnAddPlayer: string;
          auroraVeilOnAddEnemy: string;
          conditionalProtectOnAdd: string;
          conditionalProtectOnAddPlayer: string;
          conditionalProtectOnAddEnemy: string;
          conditionalProtectApply: string;
          matBlockOnAdd: string;
          noCritOnAddPlayer: string;
          noCritOnAddEnemy: string;
          noCritOnRemove: string;
          wishTagOnAdd: string;
          mudSportOnAdd: string;
          mudSportOnRemove: string;
          waterSportOnAdd: string;
          waterSportOnRemove: string;
          spikesOnAdd: string;
          spikesActivateTrap: string;
          toxicSpikesOnAdd: string;
          toxicSpikesActivateTrapPoison: string;
          stealthRockOnAdd: string;
          stealthRockActivateTrap: string;
          stickyWebOnAdd: string;
          stickyWebActivateTrap: string;
          trickRoomOnAdd: string;
          trickRoomOnRemove: string;
          gravityOnAdd: string;
          gravityOnRemove: string;
          tailwindOnAdd: string;
          tailwindOnAddPlayer: string;
          tailwindOnAddEnemy: string;
          tailwindOnRemove: string;
          tailwindOnRemovePlayer: string;
          tailwindOnRemoveEnemy: string;
          happyHourOnAdd: string;
          happyHourOnRemove: string;
          safeguardOnAdd: string;
          safeguardOnAddPlayer: string;
          safeguardOnAddEnemy: string;
          safeguardOnRemove: string;
          safeguardOnRemovePlayer: string;
          safeguardOnRemoveEnemy: string;
      };
      battle: {
          bossAppeared: string;
          trainerAppeared: string;
          trainerAppearedDouble: string;
          trainerSendOut: string;
          singleWildAppeared: string;
          multiWildAppeared: string;
          playerComeBack: string;
          trainerComeBack: string;
          playerGo: string;
          trainerGo: string;
          switchQuestion: string;
          trainerDefeated: string;
          moneyWon: string;
          moneyPickedUp: string;
          pokemonCaught: string;
          addedAsAStarter: string;
          partyFull: string;
          pokemon: string;
          sendOutPokemon: string;
          hitResultCriticalHit: string;
          hitResultSuperEffective: string;
          hitResultNotVeryEffective: string;
          hitResultNoEffect: string;
          hitResultImmune: string;
          hitResultOneHitKO: string;
          attackFailed: string;
          attackMissed: string;
          attackHitsCount: string;
          rewardGain: string;
          expGain: string;
          levelUp: string;
          learnMove: string;
          learnMovePrompt: string;
          learnMoveLimitReached: string;
          learnMoveReplaceQuestion: string;
          learnMoveStopTeaching: string;
          learnMoveNotLearned: string;
          learnMoveForgetQuestion: string;
          learnMoveForgetSuccess: string;
          countdownPoof: string;
          learnMoveAnd: string;
          levelCapUp: string;
          moveNotImplemented: string;
          moveNoPP: string;
          moveDisabled: string;
          noPokeballForce: string;
          noPokeballTrainer: string;
          noPokeballMulti: string;
          noPokeballStrong: string;
          noEscapeForce: string;
          noEscapeTrainer: string;
          noEscapePokemon: string;
          runAwaySuccess: string;
          runAwayCannotEscape: string;
          escapeVerbSwitch: string;
          escapeVerbFlee: string;
          notDisabled: string;
          turnEndHpRestore: string;
          hpIsFull: string;
          skipItemQuestion: string;
          itemStackFull: string;
          eggHatching: string;
          ivScannerUseQuestion: string;
          wildPokemonWithAffix: string;
          foePokemonWithAffix: string;
          useMove: string;
          stealEatBerry: string;
          ppHealBerry: string;
          hpHealBerry: string;
          drainMessage: string;
          regainHealth: string;
          fainted: string;
          statsAnd: string;
          stats: string;
          statRose_one: string;
          statRose_other: string;
          statSharplyRose_one: string;
          statSharplyRose_other: string;
          statRoseDrastically_one: string;
          statRoseDrastically_other: string;
          statWontGoAnyHigher_one: string;
          statWontGoAnyHigher_other: string;
          statFell_one: string;
          statFell_other: string;
          statHarshlyFell_one: string;
          statHarshlyFell_other: string;
          statSeverelyFell_one: string;
          statSeverelyFell_other: string;
          statWontGoAnyLower_one: string;
          statWontGoAnyLower_other: string;
          transformedIntoType: string;
          ppReduced: string;
          retryBattle: string;
          unlockedSomething: string;
          congratulations: string;
          beatModeFirstTime: string;
          eggSkipPrompt: string;
      };
      battleScene: {
          moneyOwned: string;
      };
      battleInfo: {
          generation: string;
      };
      battleMessageUiHandler: {
          ivBest: string;
          ivFantastic: string;
          ivVeryGood: string;
          ivPrettyGood: string;
          ivDecent: string;
          ivNoGood: string;
      };
      battlePokemonForm: {
          mega: string;
          "mega-x": string;
          "mega-y": string;
          primal: string;
          gigantamax: string;
          eternamax: string;
          megaChange: string;
          gigantamaxChange: string;
          eternamaxChange: string;
          revertChange: string;
          formChange: string;
          disguiseChange: string;
      };
      battlerTags: {
          trappedDesc: string;
          flinchedDesc: string;
          confusedDesc: string;
          infatuatedDesc: string;
          seedDesc: string;
          nightmareDesc: string;
          ingrainDesc: string;
          drowsyDesc: string;
          rechargingLapse: string;
          trappedOnAdd: string;
          trappedOnRemove: string;
          flinchedLapse: string;
          confusedOnAdd: string;
          confusedOnRemove: string;
          confusedOnOverlap: string;
          confusedLapse: string;
          confusedLapseHurtItself: string;
          destinyBondLapseIsBoss: string;
          destinyBondLapse: string;
          infatuatedOnAdd: string;
          infatuatedOnOverlap: string;
          infatuatedLapse: string;
          infatuatedLapseImmobilize: string;
          infatuatedOnRemove: string;
          seededOnAdd: string;
          seededLapse: string;
          seededLapseShed: string;
          nightmareOnAdd: string;
          nightmareOnOverlap: string;
          nightmareLapse: string;
          encoreOnAdd: string;
          encoreOnRemove: string;
          helpingHandOnAdd: string;
          ingrainLapse: string;
          ingrainOnTrap: string;
          aquaRingOnAdd: string;
          aquaRingLapse: string;
          drowsyOnAdd: string;
          damagingTrapLapse: string;
          bindOnTrap: string;
          wrapOnTrap: string;
          vortexOnTrap: string;
          clampOnTrap: string;
          sandTombOnTrap: string;
          magmaStormOnTrap: string;
          snapTrapOnTrap: string;
          thunderCageOnTrap: string;
          infestationOnTrap: string;
          protectedOnAdd: string;
          protectedLapse: string;
          enduringOnAdd: string;
          enduringLapse: string;
          sturdyLapse: string;
          perishSongLapse: string;
          centerOfAttentionOnAdd: string;
          truantLapse: string;
          slowStartOnAdd: string;
          slowStartOnRemove: string;
          highestStatBoostOnAdd: string;
          highestStatBoostOnRemove: string;
          magnetRisenOnAdd: string;
          magnetRisenOnRemove: string;
          critBoostOnAdd: string;
          critBoostOnRemove: string;
          saltCuredOnAdd: string;
          saltCuredLapse: string;
          cursedOnAdd: string;
          cursedLapse: string;
          stockpilingOnAdd: string;
      };
      berry: {
          SITRUS: {
              name: string;
              effect: string;
          };
          LUM: {
              name: string;
              effect: string;
          };
          ENIGMA: {
              name: string;
              effect: string;
          };
          LIECHI: {
              name: string;
              effect: string;
          };
          GANLON: {
              name: string;
              effect: string;
          };
          PETAYA: {
              name: string;
              effect: string;
          };
          APICOT: {
              name: string;
              effect: string;
          };
          SALAC: {
              name: string;
              effect: string;
          };
          LANSAT: {
              name: string;
              effect: string;
          };
          STARF: {
              name: string;
              effect: string;
          };
          LEPPA: {
              name: string;
              effect: string;
          };
      };
      bgmName: {
          music: string;
          missing_entries: string;
          battle_kanto_champion: string;
          battle_johto_champion: string;
          battle_hoenn_champion_g5: string;
          battle_hoenn_champion_g6: string;
          battle_sinnoh_champion: string;
          battle_champion_alder: string;
          battle_champion_iris: string;
          battle_kalos_champion: string;
          battle_alola_champion: string;
          battle_galar_champion: string;
          battle_champion_geeta: string;
          battle_champion_nemona: string;
          battle_champion_kieran: string;
          battle_hoenn_elite: string;
          battle_unova_elite: string;
          battle_kalos_elite: string;
          battle_alola_elite: string;
          battle_galar_elite: string;
          battle_paldea_elite: string;
          battle_bb_elite: string;
          battle_final_encounter: string;
          battle_final: string;
          battle_kanto_gym: string;
          battle_johto_gym: string;
          battle_hoenn_gym: string;
          battle_sinnoh_gym: string;
          battle_unova_gym: string;
          battle_kalos_gym: string;
          battle_galar_gym: string;
          battle_paldea_gym: string;
          battle_legendary_kanto: string;
          battle_legendary_raikou: string;
          battle_legendary_entei: string;
          battle_legendary_suicune: string;
          battle_legendary_lugia: string;
          battle_legendary_ho_oh: string;
          battle_legendary_regis_g5: string;
          battle_legendary_regis_g6: string;
          battle_legendary_gro_kyo: string;
          battle_legendary_rayquaza: string;
          battle_legendary_deoxys: string;
          battle_legendary_lake_trio: string;
          battle_legendary_sinnoh: string;
          battle_legendary_dia_pal: string;
          battle_legendary_origin_forme: string;
          battle_legendary_giratina: string;
          battle_legendary_arceus: string;
          battle_legendary_unova: string;
          battle_legendary_kyurem: string;
          battle_legendary_res_zek: string;
          battle_legendary_xern_yvel: string;
          battle_legendary_tapu: string;
          battle_legendary_sol_lun: string;
          battle_legendary_ub: string;
          battle_legendary_dusk_dawn: string;
          battle_legendary_ultra_nec: string;
          battle_legendary_zac_zam: string;
          battle_legendary_glas_spec: string;
          battle_legendary_calyrex: string;
          battle_legendary_riders: string;
          battle_legendary_birds_galar: string;
          battle_legendary_ruinous: string;
          battle_legendary_kor_mir: string;
          battle_legendary_loyal_three: string;
          battle_legendary_ogerpon: string;
          battle_legendary_terapagos: string;
          battle_legendary_pecharunt: string;
          battle_rival: string;
          battle_rival_2: string;
          battle_rival_3: string;
          battle_trainer: string;
          battle_wild: string;
          battle_wild_strong: string;
          end_summit: string;
          battle_rocket_grunt: string;
          battle_aqua_magma_grunt: string;
          battle_galactic_grunt: string;
          battle_plasma_grunt: string;
          battle_flare_grunt: string;
          battle_aether_grunt: string;
          battle_skull_grunt: string;
          battle_macro_grunt: string;
          battle_galactic_admin: string;
          battle_skull_admin: string;
          battle_oleana: string;
          battle_rocket_boss: string;
          battle_aqua_magma_boss: string;
          battle_galactic_boss: string;
          battle_plasma_boss: string;
          battle_flare_boss: string;
          battle_aether_boss: string;
          battle_skull_boss: string;
          battle_macro_boss: string;
          abyss: string;
          badlands: string;
          beach: string;
          cave: string;
          construction_site: string;
          desert: string;
          dojo: string;
          end: string;
          factory: string;
          fairy_cave: string;
          forest: string;
          grass: string;
          graveyard: string;
          ice_cave: string;
          island: string;
          jungle: string;
          laboratory: string;
          lake: string;
          meadow: string;
          metropolis: string;
          mountain: string;
          plains: string;
          power_plant: string;
          ruins: string;
          sea: string;
          seabed: string;
          slum: string;
          snowy_forest: string;
          space: string;
          swamp: string;
          tall_grass: string;
          temple: string;
          town: string;
          volcano: string;
          wasteland: string;
          encounter_ace_trainer: string;
          encounter_backpacker: string;
          encounter_clerk: string;
          encounter_cyclist: string;
          encounter_lass: string;
          encounter_parasol_lady: string;
          encounter_pokefan: string;
          encounter_psychic: string;
          encounter_rich: string;
          encounter_rival: string;
          encounter_roughneck: string;
          encounter_scientist: string;
          encounter_twins: string;
          encounter_youngster: string;
          heal: string;
          menu: string;
          title: string;
      };
      biome: {
          unknownLocation: string;
          TOWN: string;
          PLAINS: string;
          GRASS: string;
          TALL_GRASS: string;
          METROPOLIS: string;
          FOREST: string;
          SEA: string;
          SWAMP: string;
          BEACH: string;
          LAKE: string;
          SEABED: string;
          MOUNTAIN: string;
          BADLANDS: string;
          CAVE: string;
          DESERT: string;
          ICE_CAVE: string;
          MEADOW: string;
          POWER_PLANT: string;
          VOLCANO: string;
          GRAVEYARD: string;
          DOJO: string;
          FACTORY: string;
          RUINS: string;
          WASTELAND: string;
          ABYSS: string;
          SPACE: string;
          CONSTRUCTION_SITE: string;
          JUNGLE: string;
          FAIRY_CAVE: string;
          TEMPLE: string;
          SLUM: string;
          SNOWY_FOREST: string;
          ISLAND: string;
          LABORATORY: string;
          END: string;
      };
      challenges: {
          title: string;
          illegalEvolution: string;
          singleGeneration: {
              name: string;
              desc: string;
              desc_default: string;
              gen_1: string;
              gen_2: string;
              gen_3: string;
              gen_4: string;
              gen_5: string;
              gen_6: string;
              gen_7: string;
              gen_8: string;
              gen_9: string;
          };
          singleType: {
              name: string;
              desc: string;
              desc_default: string;
          };
          freshStart: {
              name: string;
              desc: string;
              "value.0": string;
              "value.1": string;
          };
          inverseBattle: {
              name: string;
              shortName: string;
              desc: string;
              "value.0": string;
              "value.1": string;
          };
      };
      commandUiHandler: {
          fight: string;
          ball: string;
          pokemon: string;
          run: string;
          actionMessage: string;
      };
      common: {
          start: string;
          luckIndicator: string;
          shinyOnHover: string;
          commonShiny: string;
          rareShiny: string;
          epicShiny: string;
      };
      achv: {
          Achievements: {
              name: string;
          };
          Locked: {
              name: string;
          };
          MoneyAchv: {
              description: string;
          };
          "10K_MONEY": {
              name: string;
              name_female: string;
          };
          "100K_MONEY": {
              name: string;
          };
          "1M_MONEY": {
              name: string;
              name_female: string;
          };
          "10M_MONEY": {
              name: string;
              name_female: string;
          };
          DamageAchv: {
              description: string;
          };
          "250_DMG": {
              name: string;
          };
          "1000_DMG": {
              name: string;
              name_female: string;
          };
          "2500_DMG": {
              name: string;
              name_female: string;
          };
          "10000_DMG": {
              name: string;
              name_female: string;
          };
          HealAchv: {
              description: string;
          };
          "250_HEAL": {
              name: string;
              name_female: string;
          };
          "1000_HEAL": {
              name: string;
          };
          "2500_HEAL": {
              name: string;
          };
          "10000_HEAL": {
              name: string;
          };
          LevelAchv: {
              description: string;
          };
          LV_100: {
              name: string;
          };
          LV_250: {
              name: string;
          };
          LV_1000: {
              name: string;
          };
          RibbonAchv: {
              description: string;
          };
          "10_RIBBONS": {
              name: string;
              name_female: string;
          };
          "25_RIBBONS": {
              name: string;
              name_female: string;
          };
          "50_RIBBONS": {
              name: string;
              name_female: string;
          };
          "75_RIBBONS": {
              name: string;
              name_female: string;
          };
          "100_RIBBONS": {
              name: string;
              name_female: string;
          };
          TRANSFER_MAX_STAT_STAGE: {
              name: string;
              description: string;
          };
          MAX_FRIENDSHIP: {
              name: string;
              description: string;
          };
          MEGA_EVOLVE: {
              name: string;
              description: string;
          };
          GIGANTAMAX: {
              name: string;
              description: string;
          };
          TERASTALLIZE: {
              name: string;
              description: string;
          };
          STELLAR_TERASTALLIZE: {
              name: string;
              description: string;
          };
          SPLICE: {
              name: string;
              description: string;
          };
          MINI_BLACK_HOLE: {
              name: string;
              description: string;
          };
          CATCH_MYTHICAL: {
              name: string;
              description: string;
          };
          CATCH_SUB_LEGENDARY: {
              name: string;
              description: string;
          };
          CATCH_LEGENDARY: {
              name: string;
              description: string;
          };
          SEE_SHINY: {
              name: string;
              description: string;
          };
          SHINY_PARTY: {
              name: string;
              name_female: string;
              description: string;
          };
          HATCH_MYTHICAL: {
              name: string;
              description: string;
          };
          HATCH_SUB_LEGENDARY: {
              name: string;
              description: string;
          };
          HATCH_LEGENDARY: {
              name: string;
              description: string;
          };
          HATCH_SHINY: {
              name: string;
              description: string;
          };
          HIDDEN_ABILITY: {
              name: string;
              description: string;
          };
          PERFECT_IVS: {
              name: string;
              description: string;
          };
          CLASSIC_VICTORY: {
              name: string;
              name_female: string;
              description: string;
          };
          UNEVOLVED_CLASSIC_VICTORY: {
              name: string;
              description: string;
          };
          MONO_GEN_ONE: {
              name: string;
              description: string;
          };
          MONO_GEN_TWO: {
              name: string;
              description: string;
          };
          MONO_GEN_THREE: {
              name: string;
              description: string;
          };
          MONO_GEN_FOUR: {
              name: string;
              description: string;
          };
          MONO_GEN_FIVE: {
              name: string;
              description: string;
          };
          MONO_GEN_SIX: {
              name: string;
              description: string;
          };
          MONO_GEN_SEVEN: {
              name: string;
              description: string;
          };
          MONO_GEN_EIGHT: {
              name: string;
              description: string;
          };
          MONO_GEN_NINE: {
              name: string;
              description: string;
          };
          MonoType: {
              description: string;
          };
          MONO_NORMAL: {
              name: string;
          };
          MONO_FIGHTING: {
              name: string;
          };
          MONO_FLYING: {
              name: string;
          };
          MONO_POISON: {
              name: string;
          };
          MONO_GROUND: {
              name: string;
          };
          MONO_ROCK: {
              name: string;
          };
          MONO_BUG: {
              name: string;
          };
          MONO_GHOST: {
              name: string;
          };
          MONO_STEEL: {
              name: string;
          };
          MONO_FIRE: {
              name: string;
          };
          MONO_WATER: {
              name: string;
          };
          MONO_GRASS: {
              name: string;
          };
          MONO_ELECTRIC: {
              name: string;
          };
          MONO_PSYCHIC: {
              name: string;
          };
          MONO_ICE: {
              name: string;
          };
          MONO_DRAGON: {
              name: string;
          };
          MONO_DARK: {
              name: string;
          };
          MONO_FAIRY: {
              name: string;
          };
          FRESH_START: {
              name: string;
              description: string;
          };
          INVERSE_BATTLE: {
              name: string;
              description: string;
          };
      };
      dialogue: {
          youngster: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
                  "10": string;
                  "11": string;
                  "12": string;
                  "12_female": string;
                  "13": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
                  "10": string;
                  "11": string;
                  "12": string;
                  "13": string;
              };
          };
          lass: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "6_female": string;
                  "7": string;
                  "8": string;
                  "9": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "6_female": string;
                  "7": string;
                  "8": string;
                  "9": string;
              };
          };
          breeder: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          breeder_female: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          fisherman: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          fisherman_female: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          swimmer: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          backpacker: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          ace_trainer: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "4_female": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          parasol_lady: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rocket_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "5_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          magma_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
                  "4": string;
                  "5": string;
              };
          };
          aqua_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          galactic_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "5_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          plasma_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          flare_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          aether_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          faba: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
          };
          skull_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "4_female": string;
                  "5": string;
                  "5_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          plumeria: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
          };
          macro_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          oleana: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
          };
          rocket_boss_giovanni_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
              };
          };
          rocket_boss_giovanni_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          magma_boss_maxie_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          magma_boss_maxie_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aqua_boss_archie_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aqua_boss_archie_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          galactic_boss_cyrus_1: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          galactic_boss_cyrus_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          plasma_boss_ghetsis_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          plasma_boss_ghetsis_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          flare_boss_lysandre_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          flare_boss_lysandre_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          brock: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          misty: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          lt_surge: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          erika: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
              };
          };
          alder: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kieran: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_2_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_3: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_3_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_4: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_4_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_5: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_5_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_6: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_6_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
      };
      battleSpecDialogue: {
          encounter: string;
          encounter_female: string;
          firstStageWin: string;
          secondStageWin: string;
      };
      miscDialogue: {
          ending: string;
          ending_female: string;
          ending_endless: string;
          ending_name: string;
      };
      doubleBattleDialogue: {
          blue_red_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          red_blue_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          tate_liza_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          liza_tate_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          wallace_steven_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          steven_wallace_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          alder_iris_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          iris_alder_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          piers_marnie_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          marnie_piers_double: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
          };
      };
      egg: {
          egg: string;
          greatTier: string;
          ultraTier: string;
          masterTier: string;
          defaultTier: string;
          hatchWavesMessageSoon: string;
          hatchWavesMessageClose: string;
          hatchWavesMessageNotClose: string;
          hatchWavesMessageLongTime: string;
          gachaTypeLegendary: string;
          gachaTypeMove: string;
          gachaTypeShiny: string;
          selectMachine: string;
          notEnoughVouchers: string;
          tooManyEggs: string;
          pull: string;
          pulls: string;
          sameSpeciesEgg: string;
          hatchFromTheEgg: string;
          eggMoveUnlock: string;
          rareEggMoveUnlock: string;
          moveUPGacha: string;
          shinyUPGacha: string;
          legendaryUPGacha: string;
      };
      fightUiHandler: {
          pp: string;
          power: string;
          accuracy: string;
          abilityFlyInText: string;
          passive: string;
      };
      filterBar: {
          genFilter: string;
          typeFilter: string;
          caughtFilter: string;
          unlocksFilter: string;
          miscFilter: string;
          sortFilter: string;
          all: string;
          normal: string;
          uncaught: string;
          passive: string;
          passiveUnlocked: string;
          passiveLocked: string;
          passiveUnlockable: string;
          costReduction: string;
          costReductionUnlocked: string;
          costReductionLocked: string;
          costReductionUnlockable: string;
          favorite: string;
          isFavorite: string;
          notFavorite: string;
          ribbon: string;
          hasWon: string;
          hasNotWon: string;
          hiddenAbility: string;
          hasHiddenAbility: string;
          noHiddenAbility: string;
          egg: string;
          eggPurchasable: string;
          pokerus: string;
          hasPokerus: string;
          noPokerus: string;
          sortByNumber: string;
          sortByCost: string;
          sortByCandies: string;
          sortByIVs: string;
          sortByName: string;
      };
      gameMode: {
          classic: string;
          endless: string;
          endlessSpliced: string;
          dailyRun: string;
          unknown: string;
          challenge: string;
      };
      gameStatsUiHandler: {
          stats: string;
          playTime: string;
          totalBattles: string;
          shinyStarters: string;
          starters: string;
          speciesSeen: string;
          speciesCaught: string;
          ribbonsOwned: string;
          classicRuns: string;
          classicWins: string;
          dailyRunAttempts: string;
          dailyRunWins: string;
          endlessRuns: string;
          highestWaveEndless: string;
          highestMoney: string;
          highestDamage: string;
          highestHPHealed: string;
          pokemonEncountered: string;
          pokemonDefeated: string;
          pokemonCaught: string;
          eggsHatched: string;
          subLegendsSeen: string;
          subLegendsCaught: string;
          subLegendsHatched: string;
          legendsSeen: string;
          legendsCaught: string;
          legendsHatched: string;
          mythicalsSeen: string;
          mythicalsCaught: string;
          mythicalsHatched: string;
          shiniesSeen: string;
          shiniesCaught: string;
          shiniesHatched: string;
          pokemonFused: string;
          trainersDefeated: string;
          eggsPulled: string;
          rareEggsPulled: string;
          epicEggsPulled: string;
          legendaryEggsPulled: string;
          manaphyEggsPulled: string;
      };
      growth: {
          Erratic: string;
          Fast: string;
          Medium_Fast: string;
          Medium_Slow: string;
          Slow: string;
          Fluctuating: string;
      };
      menu: {
          cancel: string;
          continue: string;
          dailyRun: string;
          loadGame: string;
          newGame: string;
          settings: string;
          selectGameMode: string;
          logInOrCreateAccount: string;
          username: string;
          password: string;
          login: string;
          orUse: string;
          register: string;
          emptyUsername: string;
          invalidLoginUsername: string;
          invalidRegisterUsername: string;
          invalidLoginPassword: string;
          invalidRegisterPassword: string;
          usernameAlreadyUsed: string;
          accountNonExistent: string;
          unmatchingPassword: string;
          passwordNotMatchingConfirmPassword: string;
          confirmPassword: string;
          registrationAgeWarning: string;
          backToLogin: string;
          failedToLoadSaveData: string;
          sessionSuccess: string;
          failedToLoadSession: string;
          boyOrGirl: string;
          evolving: string;
          stoppedEvolving: string;
          pauseEvolutionsQuestion: string;
          evolutionsPaused: string;
          evolutionDone: string;
          dailyRankings: string;
          weeklyRankings: string;
          noRankings: string;
          positionIcon: string;
          usernameScoreboard: string;
          score: string;
          wave: string;
          loading: string;
          loadingAsset: string;
          playersOnline: string;
          yes: string;
          no: string;
          disclaimer: string;
          disclaimerDescription: string;
          choosePokemon: string;
          renamePokemon: string;
          rename: string;
          nickname: string;
          errorServerDown: string;
      };
      menuUiHandler: {
          GAME_SETTINGS: string;
          ACHIEVEMENTS: string;
          STATS: string;
          RUN_HISTORY: string;
          EGG_LIST: string;
          EGG_GACHA: string;
          MANAGE_DATA: string;
          COMMUNITY: string;
          SAVE_AND_QUIT: string;
          LOG_OUT: string;
          slot: string;
          importSession: string;
          importSlotSelect: string;
          exportSession: string;
          exportSlotSelect: string;
          importData: string;
          exportData: string;
          importRunHistory: string;
          exportRunHistory: string;
          consentPreferences: string;
          linkDiscord: string;
          unlinkDiscord: string;
          linkGoogle: string;
          unlinkGoogle: string;
          cancel: string;
          losingProgressionWarning: string;
          noEggs: string;
          donate: string;
      };
      modifier: {
          surviveDamageApply: string;
          turnHealApply: string;
          hitHealApply: string;
          pokemonInstantReviveApply: string;
          resetNegativeStatStageApply: string;
          moneyInterestApply: string;
          turnHeldItemTransferApply: string;
          contactHeldItemTransferApply: string;
          enemyTurnHealApply: string;
          bypassSpeedChanceApply: string;
      };
      modifierType: {
          ModifierType: {
              AddPokeballModifierType: {
                  name: string;
                  description: string;
              };
              AddVoucherModifierType: {
                  name: string;
                  description: string;
              };
              PokemonHeldItemModifierType: {
                  extra: {
                      inoperable: string;
                      tooMany: string;
                  };
              };
              PokemonHpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                      fullyWithStatus: string;
                  };
              };
              PokemonReviveModifierType: {
                  description: string;
              };
              PokemonStatusHealModifierType: {
                  description: string;
              };
              PokemonPpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                  };
              };
              PokemonAllMovePpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                  };
              };
              PokemonPpUpModifierType: {
                  description: string;
              };
              PokemonNatureChangeModifierType: {
                  name: string;
                  description: string;
              };
              DoubleBattleChanceBoosterModifierType: {
                  description: string;
              };
              TempStatStageBoosterModifierType: {
                  description: string;
              };
              AttackTypeBoosterModifierType: {
                  description: string;
              };
              PokemonLevelIncrementModifierType: {
                  description: string;
              };
              AllPokemonLevelIncrementModifierType: {
                  description: string;
              };
              BaseStatBoosterModifierType: {
                  description: string;
              };
              AllPokemonFullHpRestoreModifierType: {
                  description: string;
              };
              AllPokemonFullReviveModifierType: {
                  description: string;
              };
              MoneyRewardModifierType: {
                  description: string;
                  extra: {
                      small: string;
                      moderate: string;
                      large: string;
                  };
              };
              ExpBoosterModifierType: {
                  description: string;
              };
              PokemonExpBoosterModifierType: {
                  description: string;
              };
              PokemonFriendshipBoosterModifierType: {
                  description: string;
              };
              PokemonMoveAccuracyBoosterModifierType: {
                  description: string;
              };
              PokemonMultiHitModifierType: {
                  description: string;
              };
              TmModifierType: {
                  name: string;
                  description: string;
              };
              TmModifierTypeWithInfo: {
                  name: string;
                  description: string;
              };
              EvolutionItemModifierType: {
                  description: string;
              };
              FormChangeItemModifierType: {
                  description: string;
              };
              FusePokemonModifierType: {
                  description: string;
              };
              TerastallizeModifierType: {
                  name: string;
                  description: string;
              };
              ContactHeldItemTransferChanceModifierType: {
                  description: string;
              };
              TurnHeldItemTransferModifierType: {
                  description: string;
              };
              EnemyAttackStatusEffectChanceModifierType: {
                  description: string;
              };
              EnemyEndureChanceModifierType: {
                  description: string;
              };
              RARE_CANDY: {
                  name: string;
              };
              RARER_CANDY: {
                  name: string;
              };
              MEGA_BRACELET: {
                  name: string;
                  description: string;
              };
              DYNAMAX_BAND: {
                  name: string;
                  description: string;
              };
              TERA_ORB: {
                  name: string;
                  description: string;
              };
              MAP: {
                  name: string;
                  description: string;
              };
              POTION: {
                  name: string;
              };
              SUPER_POTION: {
                  name: string;
              };
              HYPER_POTION: {
                  name: string;
              };
              MAX_POTION: {
                  name: string;
              };
              FULL_RESTORE: {
                  name: string;
              };
              REVIVE: {
                  name: string;
              };
              MAX_REVIVE: {
                  name: string;
              };
              FULL_HEAL: {
                  name: string;
              };
              SACRED_ASH: {
                  name: string;
              };
              REVIVER_SEED: {
                  name: string;
                  description: string;
              };
              WHITE_HERB: {
                  name: string;
                  description: string;
              };
              ETHER: {
                  name: string;
              };
              MAX_ETHER: {
                  name: string;
              };
              ELIXIR: {
                  name: string;
              };
              MAX_ELIXIR: {
                  name: string;
              };
              PP_UP: {
                  name: string;
              };
              PP_MAX: {
                  name: string;
              };
              LURE: {
                  name: string;
              };
              SUPER_LURE: {
                  name: string;
              };
              MAX_LURE: {
                  name: string;
              };
              MEMORY_MUSHROOM: {
                  name: string;
                  description: string;
              };
              EXP_SHARE: {
                  name: string;
                  description: string;
              };
              EXP_BALANCE: {
                  name: string;
                  description: string;
              };
              OVAL_CHARM: {
                  name: string;
                  description: string;
              };
              EXP_CHARM: {
                  name: string;
              };
              SUPER_EXP_CHARM: {
                  name: string;
              };
              GOLDEN_EXP_CHARM: {
                  name: string;
              };
              LUCKY_EGG: {
                  name: string;
              };
              GOLDEN_EGG: {
                  name: string;
              };
              SOOTHE_BELL: {
                  name: string;
              };
              SCOPE_LENS: {
                  name: string;
                  description: string;
              };
              DIRE_HIT: {
                  name: string;
                  extra: {
                      raises: string;
                  };
              };
              LEEK: {
                  name: string;
                  description: string;
              };
              EVIOLITE: {
                  name: string;
                  description: string;
              };
              SOUL_DEW: {
                  name: string;
                  description: string;
              };
              NUGGET: {
                  name: string;
              };
              BIG_NUGGET: {
                  name: string;
              };
              RELIC_GOLD: {
                  name: string;
              };
              AMULET_COIN: {
                  name: string;
                  description: string;
              };
              GOLDEN_PUNCH: {
                  name: string;
                  description: string;
              };
              COIN_CASE: {
                  name: string;
                  description: string;
              };
              LOCK_CAPSULE: {
                  name: string;
                  description: string;
              };
              GRIP_CLAW: {
                  name: string;
              };
              WIDE_LENS: {
                  name: string;
              };
              MULTI_LENS: {
                  name: string;
              };
              HEALING_CHARM: {
                  name: string;
                  description: string;
              };
              CANDY_JAR: {
                  name: string;
                  description: string;
              };
              BERRY_POUCH: {
                  name: string;
                  description: string;
              };
              FOCUS_BAND: {
                  name: string;
                  description: string;
              };
              QUICK_CLAW: {
                  name: string;
                  description: string;
              };
              KINGS_ROCK: {
                  name: string;
                  description: string;
              };
              LEFTOVERS: {
                  name: string;
                  description: string;
              };
              SHELL_BELL: {
                  name: string;
                  description: string;
              };
              TOXIC_ORB: {
                  name: string;
                  description: string;
              };
              FLAME_ORB: {
                  name: string;
                  description: string;
              };
              BATON: {
                  name: string;
                  description: string;
              };
              SHINY_CHARM: {
                  name: string;
                  description: string;
              };
              ABILITY_CHARM: {
                  name: string;
                  description: string;
              };
              IV_SCANNER: {
                  name: string;
                  description: string;
              };
              DNA_SPLICERS: {
                  name: string;
              };
              MINI_BLACK_HOLE: {
                  name: string;
              };
              GOLDEN_POKEBALL: {
                  name: string;
                  description: string;
              };
              ENEMY_DAMAGE_BOOSTER: {
                  name: string;
                  description: string;
              };
              ENEMY_DAMAGE_REDUCTION: {
                  name: string;
                  description: string;
              };
              ENEMY_HEAL: {
                  name: string;
                  description: string;
              };
              ENEMY_ATTACK_POISON_CHANCE: {
                  name: string;
              };
              ENEMY_ATTACK_PARALYZE_CHANCE: {
                  name: string;
              };
              ENEMY_ATTACK_BURN_CHANCE: {
                  name: string;
              };
              ENEMY_STATUS_EFFECT_HEAL_CHANCE: {
                  name: string;
                  description: string;
              };
              ENEMY_ENDURE_CHANCE: {
                  name: string;
              };
              ENEMY_FUSED_CHANCE: {
                  name: string;
                  description: string;
              };
          };
          SpeciesBoosterItem: {
              LIGHT_BALL: {
                  name: string;
                  description: string;
              };
              THICK_CLUB: {
                  name: string;
                  description: string;
              };
              METAL_POWDER: {
                  name: string;
                  description: string;
              };
              QUICK_POWDER: {
                  name: string;
                  description: string;
              };
          };
          TempStatStageBoosterItem: {
              x_attack: string;
              x_defense: string;
              x_sp_atk: string;
              x_sp_def: string;
              x_speed: string;
              x_accuracy: string;
          };
          AttackTypeBoosterItem: {
              silk_scarf: string;
              black_belt: string;
              sharp_beak: string;
              poison_barb: string;
              soft_sand: string;
              hard_stone: string;
              silver_powder: string;
              spell_tag: string;
              metal_coat: string;
              charcoal: string;
              mystic_water: string;
              miracle_seed: string;
              magnet: string;
              twisted_spoon: string;
              never_melt_ice: string;
              dragon_fang: string;
              black_glasses: string;
              fairy_feather: string;
          };
          BaseStatBoosterItem: {
              hp_up: string;
              protein: string;
              iron: string;
              calcium: string;
              zinc: string;
              carbos: string;
          };
          EvolutionItem: {
              NONE: string;
              LINKING_CORD: string;
              SUN_STONE: string;
              MOON_STONE: string;
              LEAF_STONE: string;
              FIRE_STONE: string;
              WATER_STONE: string;
              THUNDER_STONE: string;
              ICE_STONE: string;
              DUSK_STONE: string;
              DAWN_STONE: string;
              SHINY_STONE: string;
              CRACKED_POT: string;
              SWEET_APPLE: string;
              TART_APPLE: string;
              STRAWBERRY_SWEET: string;
              UNREMARKABLE_TEACUP: string;
              CHIPPED_POT: string;
              BLACK_AUGURITE: string;
              GALARICA_CUFF: string;
              GALARICA_WREATH: string;
              PEAT_BLOCK: string;
              AUSPICIOUS_ARMOR: string;
              MALICIOUS_ARMOR: string;
              MASTERPIECE_TEACUP: string;
              METAL_ALLOY: string;
              SCROLL_OF_DARKNESS: string;
              SCROLL_OF_WATERS: string;
              SYRUPY_APPLE: string;
          };
          FormChangeItem: {
              NONE: string;
              ABOMASITE: string;
              ABSOLITE: string;
              AERODACTYLITE: string;
              AGGRONITE: string;
              ALAKAZITE: string;
              ALTARIANITE: string;
              AMPHAROSITE: string;
              AUDINITE: string;
              BANETTITE: string;
              BEEDRILLITE: string;
              BLASTOISINITE: string;
              BLAZIKENITE: string;
              CAMERUPTITE: string;
              CHARIZARDITE_X: string;
              CHARIZARDITE_Y: string;
              DIANCITE: string;
              GALLADITE: string;
              GARCHOMPITE: string;
              GARDEVOIRITE: string;
              GENGARITE: string;
              GLALITITE: string;
              GYARADOSITE: string;
              HERACRONITE: string;
              HOUNDOOMINITE: string;
              KANGASKHANITE: string;
              LATIASITE: string;
              LATIOSITE: string;
              LOPUNNITE: string;
              LUCARIONITE: string;
              MANECTITE: string;
              MAWILITE: string;
              MEDICHAMITE: string;
              METAGROSSITE: string;
              MEWTWONITE_X: string;
              MEWTWONITE_Y: string;
              PIDGEOTITE: string;
              PINSIRITE: string;
              RAYQUAZITE: string;
              SABLENITE: string;
              SALAMENCITE: string;
              SCEPTILITE: string;
              SCIZORITE: string;
              SHARPEDONITE: string;
              SLOWBRONITE: string;
              STEELIXITE: string;
              SWAMPERTITE: string;
              TYRANITARITE: string;
              VENUSAURITE: string;
              BLUE_ORB: string;
              RED_ORB: string;
              SHARP_METEORITE: string;
              HARD_METEORITE: string;
              SMOOTH_METEORITE: string;
              ADAMANT_CRYSTAL: string;
              LUSTROUS_GLOBE: string;
              GRISEOUS_CORE: string;
              REVEAL_GLASS: string;
              GRACIDEA: string;
              MAX_MUSHROOMS: string;
              DARK_STONE: string;
              LIGHT_STONE: string;
              PRISON_BOTTLE: string;
              N_LUNARIZER: string;
              N_SOLARIZER: string;
              RUSTED_SWORD: string;
              RUSTED_SHIELD: string;
              ICY_REINS_OF_UNITY: string;
              SHADOW_REINS_OF_UNITY: string;
              WELLSPRING_MASK: string;
              HEARTHFLAME_MASK: string;
              CORNERSTONE_MASK: string;
              SHOCK_DRIVE: string;
              BURN_DRIVE: string;
              CHILL_DRIVE: string;
              DOUSE_DRIVE: string;
              ULTRANECROZIUM_Z: string;
              FIST_PLATE: string;
              SKY_PLATE: string;
              TOXIC_PLATE: string;
              EARTH_PLATE: string;
              STONE_PLATE: string;
              INSECT_PLATE: string;
              SPOOKY_PLATE: string;
              IRON_PLATE: string;
              FLAME_PLATE: string;
              SPLASH_PLATE: string;
              MEADOW_PLATE: string;
              ZAP_PLATE: string;
              MIND_PLATE: string;
              ICICLE_PLATE: string;
              DRACO_PLATE: string;
              DREAD_PLATE: string;
              PIXIE_PLATE: string;
              BLANK_PLATE: string;
              LEGEND_PLATE: string;
              FIGHTING_MEMORY: string;
              FLYING_MEMORY: string;
              POISON_MEMORY: string;
              GROUND_MEMORY: string;
              ROCK_MEMORY: string;
              BUG_MEMORY: string;
              GHOST_MEMORY: string;
              STEEL_MEMORY: string;
              FIRE_MEMORY: string;
              WATER_MEMORY: string;
              GRASS_MEMORY: string;
              ELECTRIC_MEMORY: string;
              PSYCHIC_MEMORY: string;
              ICE_MEMORY: string;
              DRAGON_MEMORY: string;
              DARK_MEMORY: string;
              FAIRY_MEMORY: string;
              NORMAL_MEMORY: string;
          };
      };
      move: {
          pound: {
              name: string;
              effect: string;
          };
          karateChop: {
              name: string;
              effect: string;
          };
          doubleSlap: {
              name: string;
              effect: string;
          };
          cometPunch: {
              name: string;
              effect: string;
          };
          megaPunch: {
              name: string;
              effect: string;
          };
          payDay: {
              name: string;
              effect: string;
          };
          firePunch: {
              name: string;
              effect: string;
          };
          icePunch: {
              name: string;
              effect: string;
          };
          thunderPunch: {
              name: string;
              effect: string;
          };
          scratch: {
              name: string;
              effect: string;
          };
          viseGrip: {
              name: string;
              effect: string;
          };
          guillotine: {
              name: string;
              effect: string;
          };
          razorWind: {
              name: string;
              effect: string;
          };
          swordsDance: {
              name: string;
              effect: string;
          };
          cut: {
              name: string;
              effect: string;
          };
          gust: {
              name: string;
              effect: string;
          };
          wingAttack: {
              name: string;
              effect: string;
          };
          whirlwind: {
              name: string;
              effect: string;
          };
          fly: {
              name: string;
              effect: string;
          };
          bind: {
              name: string;
              effect: string;
          };
          slam: {
              name: string;
              effect: string;
          };
          vineWhip: {
              name: string;
              effect: string;
          };
          stomp: {
              name: string;
              effect: string;
          };
          doubleKick: {
              name: string;
              effect: string;
          };
          megaKick: {
              name: string;
              effect: string;
          };
          jumpKick: {
              name: string;
              effect: string;
          };
          rollingKick: {
              name: string;
              effect: string;
          };
          sandAttack: {
              name: string;
              effect: string;
          };
          headbutt: {
              name: string;
              effect: string;
          };
          hornAttack: {
              name: string;
              effect: string;
          };
          furyAttack: {
              name: string;
              effect: string;
          };
          hornDrill: {
              name: string;
              effect: string;
          };
          tackle: {
              name: string;
              effect: string;
          };
          bodySlam: {
              name: string;
              effect: string;
          };
          wrap: {
              name: string;
              effect: string;
          };
          takeDown: {
              name: string;
              effect: string;
          };
          thrash: {
              name: string;
              effect: string;
          };
          doubleEdge: {
              name: string;
              effect: string;
          };
          tailWhip: {
              name: string;
              effect: string;
          };
          poisonSting: {
              name: string;
              effect: string;
          };
          twineedle: {
              name: string;
              effect: string;
          };
          pinMissile: {
              name: string;
              effect: string;
          };
          leer: {
              name: string;
              effect: string;
          };
          bite: {
              name: string;
              effect: string;
          };
          growl: {
              name: string;
              effect: string;
          };
          roar: {
              name: string;
              effect: string;
          };
          sing: {
              name: string;
              effect: string;
          };
          supersonic: {
              name: string;
              effect: string;
          };
          sonicBoom: {
              name: string;
              effect: string;
          };
          disable: {
              name: string;
              effect: string;
          };
          acid: {
              name: string;
              effect: string;
          };
          ember: {
              name: string;
              effect: string;
          };
          flamethrower: {
              name: string;
              effect: string;
          };
          mist: {
              name: string;
              effect: string;
          };
          waterGun: {
              name: string;
              effect: string;
          };
          hydroPump: {
              name: string;
              effect: string;
          };
          surf: {
              name: string;
              effect: string;
          };
          iceBeam: {
              name: string;
              effect: string;
          };
          blizzard: {
              name: string;
              effect: string;
          };
          psybeam: {
              name: string;
              effect: string;
          };
          bubbleBeam: {
              name: string;
              effect: string;
          };
          auroraBeam: {
              name: string;
              effect: string;
          };
          hyperBeam: {
              name: string;
              effect: string;
          };
          peck: {
              name: string;
              effect: string;
          };
          drillPeck: {
              name: string;
              effect: string;
          };
          submission: {
              name: string;
              effect: string;
          };
          lowKick: {
              name: string;
              effect: string;
          };
          counter: {
              name: string;
              effect: string;
          };
          seismicToss: {
              name: string;
              effect: string;
          };
          strength: {
              name: string;
              effect: string;
          };
          absorb: {
              name: string;
              effect: string;
          };
          megaDrain: {
              name: string;
              effect: string;
          };
          leechSeed: {
              name: string;
              effect: string;
          };
          growth: {
              name: string;
              effect: string;
          };
          razorLeaf: {
              name: string;
              effect: string;
          };
          solarBeam: {
              name: string;
              effect: string;
          };
          poisonPowder: {
              name: string;
              effect: string;
          };
          stunSpore: {
              name: string;
              effect: string;
          };
          sleepPowder: {
              name: string;
              effect: string;
          };
          petalDance: {
              name: string;
              effect: string;
          };
          stringShot: {
              name: string;
              effect: string;
          };
          dragonRage: {
              name: string;
              effect: string;
          };
          fireSpin: {
              name: string;
              effect: string;
          };
          thunderShock: {
              name: string;
              effect: string;
          };
          thunderbolt: {
              name: string;
              effect: string;
          };
          thunderWave: {
              name: string;
              effect: string;
          };
          thunder: {
              name: string;
              effect: string;
          };
          rockThrow: {
              name: string;
              effect: string;
          };
          earthquake: {
              name: string;
              effect: string;
          };
          fissure: {
              name: string;
              effect: string;
          };
          dig: {
              name: string;
              effect: string;
          };
          toxic: {
              name: string;
              effect: string;
          };
          confusion: {
              name: string;
              effect: string;
          };
          psychic: {
              name: string;
              effect: string;
          };
          hypnosis: {
              name: string;
              effect: string;
          };
          meditate: {
              name: string;
              effect: string;
          };
          agility: {
              name: string;
              effect: string;
          };
          quickAttack: {
              name: string;
              effect: string;
          };
          rage: {
              name: string;
              effect: string;
          };
          teleport: {
              name: string;
              effect: string;
          };
          nightShade: {
              name: string;
              effect: string;
          };
          mimic: {
              name: string;
              effect: string;
          };
          screech: {
              name: string;
              effect: string;
          };
          doubleTeam: {
              name: string;
              effect: string;
          };
          recover: {
              name: string;
              effect: string;
          };
          harden: {
              name: string;
              effect: string;
          };
          minimize: {
              name: string;
              effect: string;
          };
          smokescreen: {
              name: string;
              effect: string;
          };
          confuseRay: {
              name: string;
              effect: string;
          };
          withdraw: {
              name: string;
              effect: string;
          };
          defenseCurl: {
              name: string;
              effect: string;
          };
          barrier: {
              name: string;
              effect: string;
          };
          lightScreen: {
              name: string;
              effect: string;
          };
          haze: {
              name: string;
              effect: string;
          };
          reflect: {
              name: string;
              effect: string;
          };
          focusEnergy: {
              name: string;
              effect: string;
          };
          bide: {
              name: string;
              effect: string;
          };
          metronome: {
              name: string;
              effect: string;
          };
          mirrorMove: {
              name: string;
              effect: string;
          };
          selfDestruct: {
              name: string;
              effect: string;
          };
          eggBomb: {
              name: string;
              effect: string;
          };
          lick: {
              name: string;
              effect: string;
          };
          smog: {
              name: string;
              effect: string;
          };
          sludge: {
              name: string;
              effect: string;
          };
          boneClub: {
              name: string;
              effect: string;
          };
          fireBlast: {
              name: string;
              effect: string;
          };
          waterfall: {
              name: string;
              effect: string;
          };
          clamp: {
              name: string;
              effect: string;
          };
          swift: {
              name: string;
              effect: string;
          };
          skullBash: {
              name: string;
              effect: string;
          };
          spikeCannon: {
              name: string;
              effect: string;
          };
          constrict: {
              name: string;
              effect: string;
          };
          amnesia: {
              name: string;
              effect: string;
          };
          kinesis: {
              name: string;
              effect: string;
          };
          softBoiled: {
              name: string;
              effect: string;
          };
          highJumpKick: {
              name: string;
              effect: string;
          };
          glare: {
              name: string;
              effect: string;
          };
          dreamEater: {
              name: string;
              effect: string;
          };
          poisonGas: {
              name: string;
              effect: string;
          };
          barrage: {
              name: string;
              effect: string;
          };
          leechLife: {
              name: string;
              effect: string;
          };
          lovelyKiss: {
              name: string;
              effect: string;
          };
          skyAttack: {
              name: string;
              effect: string;
          };
          transform: {
              name: string;
              effect: string;
          };
          bubble: {
              name: string;
              effect: string;
          };
          dizzyPunch: {
              name: string;
              effect: string;
          };
          spore: {
              name: string;
              effect: string;
          };
          flash: {
              name: string;
              effect: string;
          };
          psywave: {
              name: string;
              effect: string;
          };
          splash: {
              name: string;
              effect: string;
          };
          acidArmor: {
              name: string;
              effect: string;
          };
          crabhammer: {
              name: string;
              effect: string;
          };
          explosion: {
              name: string;
              effect: string;
          };
          furySwipes: {
              name: string;
              effect: string;
          };
          bonemerang: {
              name: string;
              effect: string;
          };
          rest: {
              name: string;
              effect: string;
          };
          rockSlide: {
              name: string;
              effect: string;
          };
          hyperFang: {
              name: string;
              effect: string;
          };
          sharpen: {
              name: string;
              effect: string;
          };
          conversion: {
              name: string;
              effect: string;
          };
          triAttack: {
              name: string;
              effect: string;
          };
          superFang: {
              name: string;
              effect: string;
          };
          slash: {
              name: string;
              effect: string;
          };
          substitute: {
              name: string;
              effect: string;
          };
          struggle: {
              name: string;
              effect: string;
          };
          sketch: {
              name: string;
              effect: string;
          };
          tripleKick: {
              name: string;
              effect: string;
          };
          thief: {
              name: string;
              effect: string;
          };
          spiderWeb: {
              name: string;
              effect: string;
          };
          mindReader: {
              name: string;
              effect: string;
          };
          nightmare: {
              name: string;
              effect: string;
          };
          flameWheel: {
              name: string;
              effect: string;
          };
          snore: {
              name: string;
              effect: string;
          };
          curse: {
              name: string;
              effect: string;
          };
          flail: {
              name: string;
              effect: string;
          };
          conversion2: {
              name: string;
              effect: string;
          };
          aeroblast: {
              name: string;
              effect: string;
          };
          cottonSpore: {
              name: string;
              effect: string;
          };
          reversal: {
              name: string;
              effect: string;
          };
          spite: {
              name: string;
              effect: string;
          };
          powderSnow: {
              name: string;
              effect: string;
          };
          protect: {
              name: string;
              effect: string;
          };
          machPunch: {
              name: string;
              effect: string;
          };
          scaryFace: {
              name: string;
              effect: string;
          };
          feintAttack: {
              name: string;
              effect: string;
          };
          sweetKiss: {
              name: string;
              effect: string;
          };
          bellyDrum: {
              name: string;
              effect: string;
          };
          sludgeBomb: {
              name: string;
              effect: string;
          };
          mudSlap: {
              name: string;
              effect: string;
          };
          octazooka: {
              name: string;
              effect: string;
          };
          spikes: {
              name: string;
              effect: string;
          };
          zapCannon: {
              name: string;
              effect: string;
          };
          foresight: {
              name: string;
              effect: string;
          };
          destinyBond: {
              name: string;
              effect: string;
          };
          perishSong: {
              name: string;
              effect: string;
          };
          icyWind: {
              name: string;
              effect: string;
          };
          detect: {
              name: string;
              effect: string;
          };
          boneRush: {
              name: string;
              effect: string;
          };
          lockOn: {
              name: string;
              effect: string;
          };
          outrage: {
              name: string;
              effect: string;
          };
          sandstorm: {
              name: string;
              effect: string;
          };
          gigaDrain: {
              name: string;
              effect: string;
          };
          endure: {
              name: string;
              effect: string;
          };
          charm: {
              name: string;
              effect: string;
          };
          rollout: {
              name: string;
              effect: string;
          };
          falseSwipe: {
              name: string;
              effect: string;
          };
          swagger: {
              name: string;
              effect: string;
          };
          milkDrink: {
              name: string;
              effect: string;
          };
          spark: {
              name: string;
              effect: string;
          };
          furyCutter: {
              name: string;
              effect: string;
          };
          steelWing: {
              name: string;
              effect: string;
          };
          meanLook: {
              name: string;
              effect: string;
          };
          attract: {
              name: string;
              effect: string;
          };
          sleepTalk: {
              name: string;
              effect: string;
          };
          healBell: {
              name: string;
              effect: string;
          };
          return: {
              name: string;
              effect: string;
          };
          present: {
              name: string;
              effect: string;
          };
          frustration: {
              name: string;
              effect: string;
          };
          safeguard: {
              name: string;
              effect: string;
          };
          painSplit: {
              name: string;
              effect: string;
          };
          sacredFire: {
              name: string;
              effect: string;
          };
          magnitude: {
              name: string;
              effect: string;
          };
          dynamicPunch: {
              name: string;
              effect: string;
          };
          megahorn: {
              name: string;
              effect: string;
          };
          dragonBreath: {
              name: string;
              effect: string;
          };
          batonPass: {
              name: string;
              effect: string;
          };
          encore: {
              name: string;
              effect: string;
          };
          pursuit: {
              name: string;
              effect: string;
          };
          rapidSpin: {
              name: string;
              effect: string;
          };
          sweetScent: {
              name: string;
              effect: string;
          };
          ironTail: {
              name: string;
              effect: string;
          };
          metalClaw: {
              name: string;
              effect: string;
          };
          vitalThrow: {
              name: string;
              effect: string;
          };
          morningSun: {
              name: string;
              effect: string;
          };
          synthesis: {
              name: string;
              effect: string;
          };
          moonlight: {
              name: string;
              effect: string;
          };
          hiddenPower: {
              name: string;
              effect: string;
          };
          crossChop: {
              name: string;
              effect: string;
          };
          twister: {
              name: string;
              effect: string;
          };
          rainDance: {
              name: string;
              effect: string;
          };
          sunnyDay: {
              name: string;
              effect: string;
          };
          crunch: {
              name: string;
              effect: string;
          };
          mirrorCoat: {
              name: string;
              effect: string;
          };
          psychUp: {
              name: string;
              effect: string;
          };
          extremeSpeed: {
              name: string;
              effect: string;
          };
          ancientPower: {
              name: string;
              effect: string;
          };
          shadowBall: {
              name: string;
              effect: string;
          };
          futureSight: {
              name: string;
              effect: string;
          };
          rockSmash: {
              name: string;
              effect: string;
          };
          whirlpool: {
              name: string;
              effect: string;
          };
          beatUp: {
              name: string;
              effect: string;
          };
          fakeOut: {
              name: string;
              effect: string;
          };
          uproar: {
              name: string;
              effect: string;
          };
          stockpile: {
              name: string;
              effect: string;
          };
          spitUp: {
              name: string;
              effect: string;
          };
          swallow: {
              name: string;
              effect: string;
          };
          heatWave: {
              name: string;
              effect: string;
          };
          hail: {
              name: string;
              effect: string;
          };
          torment: {
              name: string;
              effect: string;
          };
          flatter: {
              name: string;
              effect: string;
          };
          willOWisp: {
              name: string;
              effect: string;
          };
          memento: {
              name: string;
              effect: string;
          };
          facade: {
              name: string;
              effect: string;
          };
          focusPunch: {
              name: string;
              effect: string;
          };
          smellingSalts: {
              name: string;
              effect: string;
          };
          followMe: {
              name: string;
              effect: string;
          };
          naturePower: {
              name: string;
              effect: string;
          };
          charge: {
              name: string;
              effect: string;
          };
          taunt: {
              name: string;
              effect: string;
          };
          helpingHand: {
              name: string;
              effect: string;
          };
          trick: {
              name: string;
              effect: string;
          };
          rolePlay: {
              name: string;
              effect: string;
          };
          wish: {
              name: string;
              effect: string;
          };
          assist: {
              name: string;
              effect: string;
          };
          ingrain: {
              name: string;
              effect: string;
          };
          superpower: {
              name: string;
              effect: string;
          };
          magicCoat: {
              name: string;
              effect: string;
          };
          recycle: {
              name: string;
              effect: string;
          };
          revenge: {
              name: string;
              effect: string;
          };
          brickBreak: {
              name: string;
              effect: string;
          };
          yawn: {
              name: string;
              effect: string;
          };
          knockOff: {
              name: string;
              effect: string;
          };
          endeavor: {
              name: string;
              effect: string;
          };
          eruption: {
              name: string;
              effect: string;
          };
          skillSwap: {
              name: string;
              effect: string;
          };
          imprison: {
              name: string;
              effect: string;
          };
          refresh: {
              name: string;
              effect: string;
          };
          grudge: {
              name: string;
              effect: string;
          };
          snatch: {
              name: string;
              effect: string;
          };
          secretPower: {
              name: string;
              effect: string;
          };
          dive: {
              name: string;
              effect: string;
          };
          armThrust: {
              name: string;
              effect: string;
          };
          camouflage: {
              name: string;
              effect: string;
          };
          tailGlow: {
              name: string;
              effect: string;
          };
          lusterPurge: {
              name: string;
              effect: string;
          };
          mistBall: {
              name: string;
              effect: string;
          };
          featherDance: {
              name: string;
              effect: string;
          };
          teeterDance: {
              name: string;
              effect: string;
          };
          blazeKick: {
              name: string;
              effect: string;
          };
          mudSport: {
              name: string;
              effect: string;
          };
          iceBall: {
              name: string;
              effect: string;
          };
          needleArm: {
              name: string;
              effect: string;
          };
          slackOff: {
              name: string;
              effect: string;
          };
          hyperVoice: {
              name: string;
              effect: string;
          };
          poisonFang: {
              name: string;
              effect: string;
          };
          crushClaw: {
              name: string;
              effect: string;
          };
          blastBurn: {
              name: string;
              effect: string;
          };
          hydroCannon: {
              name: string;
              effect: string;
          };
          meteorMash: {
              name: string;
              effect: string;
          };
          astonish: {
              name: string;
              effect: string;
          };
          weatherBall: {
              name: string;
              effect: string;
          };
          aromatherapy: {
              name: string;
              effect: string;
          };
          fakeTears: {
              name: string;
              effect: string;
          };
          airCutter: {
              name: string;
              effect: string;
          };
          overheat: {
              name: string;
              effect: string;
          };
          odorSleuth: {
              name: string;
              effect: string;
          };
          rockTomb: {
              name: string;
              effect: string;
          };
          silverWind: {
              name: string;
              effect: string;
          };
          metalSound: {
              name: string;
              effect: string;
          };
          grassWhistle: {
              name: string;
              effect: string;
          };
          tickle: {
              name: string;
              effect: string;
          };
          cosmicPower: {
              name: string;
              effect: string;
          };
          waterSpout: {
              name: string;
              effect: string;
          };
          signalBeam: {
              name: string;
              effect: string;
          };
          shadowPunch: {
              name: string;
              effect: string;
          };
          extrasensory: {
              name: string;
              effect: string;
          };
          skyUppercut: {
              name: string;
              effect: string;
          };
          sandTomb: {
              name: string;
              effect: string;
          };
          sheerCold: {
              name: string;
              effect: string;
          };
          muddyWater: {
              name: string;
              effect: string;
          };
          bulletSeed: {
              name: string;
              effect: string;
          };
          aerialAce: {
              name: string;
              effect: string;
          };
          icicleSpear: {
              name: string;
              effect: string;
          };
          ironDefense: {
              name: string;
              effect: string;
          };
          block: {
              name: string;
              effect: string;
          };
          howl: {
              name: string;
              effect: string;
          };
          dragonClaw: {
              name: string;
              effect: string;
          };
          frenzyPlant: {
              name: string;
              effect: string;
          };
          bulkUp: {
              name: string;
              effect: string;
          };
          bounce: {
              name: string;
              effect: string;
          };
          mudShot: {
              name: string;
              effect: string;
          };
          poisonTail: {
              name: string;
              effect: string;
          };
          covet: {
              name: string;
              effect: string;
          };
          voltTackle: {
              name: string;
              effect: string;
          };
          magicalLeaf: {
              name: string;
              effect: string;
          };
          waterSport: {
              name: string;
              effect: string;
          };
          calmMind: {
              name: string;
              effect: string;
          };
          leafBlade: {
              name: string;
              effect: string;
          };
          dragonDance: {
              name: string;
              effect: string;
          };
          rockBlast: {
              name: string;
              effect: string;
          };
          shockWave: {
              name: string;
              effect: string;
          };
          waterPulse: {
              name: string;
              effect: string;
          };
          doomDesire: {
              name: string;
              effect: string;
          };
          psychoBoost: {
              name: string;
              effect: string;
          };
          roost: {
              name: string;
              effect: string;
          };
          gravity: {
              name: string;
              effect: string;
          };
          miracleEye: {
              name: string;
              effect: string;
          };
          wakeUpSlap: {
              name: string;
              effect: string;
          };
          hammerArm: {
              name: string;
              effect: string;
          };
          gyroBall: {
              name: string;
              effect: string;
          };
          healingWish: {
              name: string;
              effect: string;
          };
          brine: {
              name: string;
              effect: string;
          };
          naturalGift: {
              name: string;
              effect: string;
          };
          feint: {
              name: string;
              effect: string;
          };
          pluck: {
              name: string;
              effect: string;
          };
          tailwind: {
              name: string;
              effect: string;
          };
          acupressure: {
              name: string;
              effect: string;
          };
          metalBurst: {
              name: string;
              effect: string;
          };
          uTurn: {
              name: string;
              effect: string;
          };
          closeCombat: {
              name: string;
              effect: string;
          };
          payback: {
              name: string;
              effect: string;
          };
          assurance: {
              name: string;
              effect: string;
          };
          embargo: {
              name: string;
              effect: string;
          };
          fling: {
              name: string;
              effect: string;
          };
          psychoShift: {
              name: string;
              effect: string;
          };
          trumpCard: {
              name: string;
              effect: string;
          };
          healBlock: {
              name: string;
              effect: string;
          };
          wringOut: {
              name: string;
              effect: string;
          };
          powerTrick: {
              name: string;
              effect: string;
          };
          gastroAcid: {
              name: string;
              effect: string;
          };
          luckyChant: {
              name: string;
              effect: string;
          };
          meFirst: {
              name: string;
              effect: string;
          };
          copycat: {
              name: string;
              effect: string;
          };
          powerSwap: {
              name: string;
              effect: string;
          };
          guardSwap: {
              name: string;
              effect: string;
          };
          punishment: {
              name: string;
              effect: string;
          };
          lastResort: {
              name: string;
              effect: string;
          };
          worrySeed: {
              name: string;
              effect: string;
          };
          suckerPunch: {
              name: string;
              effect: string;
          };
          toxicSpikes: {
              name: string;
              effect: string;
          };
          heartSwap: {
              name: string;
              effect: string;
          };
          aquaRing: {
              name: string;
              effect: string;
          };
          magnetRise: {
              name: string;
              effect: string;
          };
          flareBlitz: {
              name: string;
              effect: string;
          };
          forcePalm: {
              name: string;
              effect: string;
          };
          auraSphere: {
              name: string;
              effect: string;
          };
          rockPolish: {
              name: string;
              effect: string;
          };
          poisonJab: {
              name: string;
              effect: string;
          };
          darkPulse: {
              name: string;
              effect: string;
          };
          nightSlash: {
              name: string;
              effect: string;
          };
          aquaTail: {
              name: string;
              effect: string;
          };
          seedBomb: {
              name: string;
              effect: string;
          };
          airSlash: {
              name: string;
              effect: string;
          };
          xScissor: {
              name: string;
              effect: string;
          };
          bugBuzz: {
              name: string;
              effect: string;
          };
          dragonPulse: {
              name: string;
              effect: string;
          };
          dragonRush: {
              name: string;
              effect: string;
          };
          powerGem: {
              name: string;
              effect: string;
          };
          drainPunch: {
              name: string;
              effect: string;
          };
          vacuumWave: {
              name: string;
              effect: string;
          };
          focusBlast: {
              name: string;
              effect: string;
          };
          energyBall: {
              name: string;
              effect: string;
          };
          braveBird: {
              name: string;
              effect: string;
          };
          earthPower: {
              name: string;
              effect: string;
          };
          switcheroo: {
              name: string;
              effect: string;
          };
          gigaImpact: {
              name: string;
              effect: string;
          };
          nastyPlot: {
              name: string;
              effect: string;
          };
          bulletPunch: {
              name: string;
              effect: string;
          };
          avalanche: {
              name: string;
              effect: string;
          };
          iceShard: {
              name: string;
              effect: string;
          };
          shadowClaw: {
              name: string;
              effect: string;
          };
          thunderFang: {
              name: string;
              effect: string;
          };
          iceFang: {
              name: string;
              effect: string;
          };
          fireFang: {
              name: string;
              effect: string;
          };
          shadowSneak: {
              name: string;
              effect: string;
          };
          mudBomb: {
              name: string;
              effect: string;
          };
          psychoCut: {
              name: string;
              effect: string;
          };
          zenHeadbutt: {
              name: string;
              effect: string;
          };
          mirrorShot: {
              name: string;
              effect: string;
          };
          flashCannon: {
              name: string;
              effect: string;
          };
          rockClimb: {
              name: string;
              effect: string;
          };
          defog: {
              name: string;
              effect: string;
          };
          trickRoom: {
              name: string;
              effect: string;
          };
          dracoMeteor: {
              name: string;
              effect: string;
          };
          discharge: {
              name: string;
              effect: string;
          };
          lavaPlume: {
              name: string;
              effect: string;
          };
          leafStorm: {
              name: string;
              effect: string;
          };
          powerWhip: {
              name: string;
              effect: string;
          };
          rockWrecker: {
              name: string;
              effect: string;
          };
          crossPoison: {
              name: string;
              effect: string;
          };
          gunkShot: {
              name: string;
              effect: string;
          };
          ironHead: {
              name: string;
              effect: string;
          };
          magnetBomb: {
              name: string;
              effect: string;
          };
          stoneEdge: {
              name: string;
              effect: string;
          };
          captivate: {
              name: string;
              effect: string;
          };
          stealthRock: {
              name: string;
              effect: string;
          };
          grassKnot: {
              name: string;
              effect: string;
          };
          chatter: {
              name: string;
              effect: string;
          };
          judgment: {
              name: string;
              effect: string;
          };
          bugBite: {
              name: string;
              effect: string;
          };
          chargeBeam: {
              name: string;
              effect: string;
          };
          woodHammer: {
              name: string;
              effect: string;
          };
          aquaJet: {
              name: string;
              effect: string;
          };
          attackOrder: {
              name: string;
              effect: string;
          };
          defendOrder: {
              name: string;
              effect: string;
          };
          healOrder: {
              name: string;
              effect: string;
          };
          headSmash: {
              name: string;
              effect: string;
          };
          doubleHit: {
              name: string;
              effect: string;
          };
          roarOfTime: {
              name: string;
              effect: string;
          };
          spacialRend: {
              name: string;
              effect: string;
          };
          lunarDance: {
              name: string;
              effect: string;
          };
          crushGrip: {
              name: string;
              effect: string;
          };
          magmaStorm: {
              name: string;
              effect: string;
          };
          darkVoid: {
              name: string;
              effect: string;
          };
          seedFlare: {
              name: string;
              effect: string;
          };
          ominousWind: {
              name: string;
              effect: string;
          };
          shadowForce: {
              name: string;
              effect: string;
          };
          honeClaws: {
              name: string;
              effect: string;
          };
          wideGuard: {
              name: string;
              effect: string;
          };
          guardSplit: {
              name: string;
              effect: string;
          };
          powerSplit: {
              name: string;
              effect: string;
          };
          wonderRoom: {
              name: string;
              effect: string;
          };
          psyshock: {
              name: string;
              effect: string;
          };
          venoshock: {
              name: string;
              effect: string;
          };
          autotomize: {
              name: string;
              effect: string;
          };
          ragePowder: {
              name: string;
              effect: string;
          };
          telekinesis: {
              name: string;
              effect: string;
          };
          magicRoom: {
              name: string;
              effect: string;
          };
          smackDown: {
              name: string;
              effect: string;
          };
          stormThrow: {
              name: string;
              effect: string;
          };
          flameBurst: {
              name: string;
              effect: string;
          };
          sludgeWave: {
              name: string;
              effect: string;
          };
          quiverDance: {
              name: string;
              effect: string;
          };
          heavySlam: {
              name: string;
              effect: string;
          };
          synchronoise: {
              name: string;
              effect: string;
          };
          electroBall: {
              name: string;
              effect: string;
          };
          soak: {
              name: string;
              effect: string;
          };
          flameCharge: {
              name: string;
              effect: string;
          };
          coil: {
              name: string;
              effect: string;
          };
          lowSweep: {
              name: string;
              effect: string;
          };
          acidSpray: {
              name: string;
              effect: string;
          };
          foulPlay: {
              name: string;
              effect: string;
          };
          simpleBeam: {
              name: string;
              effect: string;
          };
          entrainment: {
              name: string;
              effect: string;
          };
          afterYou: {
              name: string;
              effect: string;
          };
          round: {
              name: string;
              effect: string;
          };
          echoedVoice: {
              name: string;
              effect: string;
          };
          chipAway: {
              name: string;
              effect: string;
          };
          clearSmog: {
              name: string;
              effect: string;
          };
          storedPower: {
              name: string;
              effect: string;
          };
          quickGuard: {
              name: string;
              effect: string;
          };
          allySwitch: {
              name: string;
              effect: string;
          };
          scald: {
              name: string;
              effect: string;
          };
          shellSmash: {
              name: string;
              effect: string;
          };
          healPulse: {
              name: string;
              effect: string;
          };
          hex: {
              name: string;
              effect: string;
          };
          skyDrop: {
              name: string;
              effect: string;
          };
          shiftGear: {
              name: string;
              effect: string;
          };
          circleThrow: {
              name: string;
              effect: string;
          };
          incinerate: {
              name: string;
              effect: string;
          };
          quash: {
              name: string;
              effect: string;
          };
          acrobatics: {
              name: string;
              effect: string;
          };
          reflectType: {
              name: string;
              effect: string;
          };
          retaliate: {
              name: string;
              effect: string;
          };
          finalGambit: {
              name: string;
              effect: string;
          };
          bestow: {
              name: string;
              effect: string;
          };
          inferno: {
              name: string;
              effect: string;
          };
          waterPledge: {
              name: string;
              effect: string;
          };
          firePledge: {
              name: string;
              effect: string;
          };
          grassPledge: {
              name: string;
              effect: string;
          };
          voltSwitch: {
              name: string;
              effect: string;
          };
          struggleBug: {
              name: string;
              effect: string;
          };
          bulldoze: {
              name: string;
              effect: string;
          };
          frostBreath: {
              name: string;
              effect: string;
          };
          dragonTail: {
              name: string;
              effect: string;
          };
          workUp: {
              name: string;
              effect: string;
          };
          electroweb: {
              name: string;
              effect: string;
          };
          wildCharge: {
              name: string;
              effect: string;
          };
          drillRun: {
              name: string;
              effect: string;
          };
          dualChop: {
              name: string;
              effect: string;
          };
          heartStamp: {
              name: string;
              effect: string;
          };
          hornLeech: {
              name: string;
              effect: string;
          };
          sacredSword: {
              name: string;
              effect: string;
          };
          razorShell: {
              name: string;
              effect: string;
          };
          heatCrash: {
              name: string;
              effect: string;
          };
          leafTornado: {
              name: string;
              effect: string;
          };
          steamroller: {
              name: string;
              effect: string;
          };
          cottonGuard: {
              name: string;
              effect: string;
          };
          nightDaze: {
              name: string;
              effect: string;
          };
          psystrike: {
              name: string;
              effect: string;
          };
          tailSlap: {
              name: string;
              effect: string;
          };
          hurricane: {
              name: string;
              effect: string;
          };
          headCharge: {
              name: string;
              effect: string;
          };
          gearGrind: {
              name: string;
              effect: string;
          };
          searingShot: {
              name: string;
              effect: string;
          };
          technoBlast: {
              name: string;
              effect: string;
          };
          relicSong: {
              name: string;
              effect: string;
          };
          secretSword: {
              name: string;
              effect: string;
          };
          glaciate: {
              name: string;
              effect: string;
          };
          boltStrike: {
              name: string;
              effect: string;
          };
          blueFlare: {
              name: string;
              effect: string;
          };
          fieryDance: {
              name: string;
              effect: string;
          };
          freezeShock: {
              name: string;
              effect: string;
          };
          iceBurn: {
              name: string;
              effect: string;
          };
          snarl: {
              name: string;
              effect: string;
          };
          icicleCrash: {
              name: string;
              effect: string;
          };
          vCreate: {
              name: string;
              effect: string;
          };
          fusionFlare: {
              name: string;
              effect: string;
          };
          fusionBolt: {
              name: string;
              effect: string;
          };
          flyingPress: {
              name: string;
              effect: string;
          };
          matBlock: {
              name: string;
              effect: string;
          };
          belch: {
              name: string;
              effect: string;
          };
          rototiller: {
              name: string;
              effect: string;
          };
          stickyWeb: {
              name: string;
              effect: string;
          };
          fellStinger: {
              name: string;
              effect: string;
          };
          phantomForce: {
              name: string;
              effect: string;
          };
          trickOrTreat: {
              name: string;
              effect: string;
          };
          nobleRoar: {
              name: string;
              effect: string;
          };
          ionDeluge: {
              name: string;
              effect: string;
          };
          parabolicCharge: {
              name: string;
              effect: string;
          };
          forestsCurse: {
              name: string;
              effect: string;
          };
          petalBlizzard: {
              name: string;
              effect: string;
          };
          freezeDry: {
              name: string;
              effect: string;
          };
          disarmingVoice: {
              name: string;
              effect: string;
          };
          partingShot: {
              name: string;
              effect: string;
          };
          topsyTurvy: {
              name: string;
              effect: string;
          };
          drainingKiss: {
              name: string;
              effect: string;
          };
          craftyShield: {
              name: string;
              effect: string;
          };
          flowerShield: {
              name: string;
              effect: string;
          };
          grassyTerrain: {
              name: string;
              effect: string;
          };
          mistyTerrain: {
              name: string;
              effect: string;
          };
          electrify: {
              name: string;
              effect: string;
          };
          playRough: {
              name: string;
              effect: string;
          };
          fairyWind: {
              name: string;
              effect: string;
          };
          moonblast: {
              name: string;
              effect: string;
          };
          boomburst: {
              name: string;
              effect: string;
          };
          fairyLock: {
              name: string;
              effect: string;
          };
          kingsShield: {
              name: string;
              effect: string;
          };
          playNice: {
              name: string;
              effect: string;
          };
          confide: {
              name: string;
              effect: string;
          };
          diamondStorm: {
              name: string;
              effect: string;
          };
          steamEruption: {
              name: string;
              effect: string;
          };
          hyperspaceHole: {
              name: string;
              effect: string;
          };
          waterShuriken: {
              name: string;
              effect: string;
          };
          mysticalFire: {
              name: string;
              effect: string;
          };
          spikyShield: {
              name: string;
              effect: string;
          };
          aromaticMist: {
              name: string;
              effect: string;
          };
          eerieImpulse: {
              name: string;
              effect: string;
          };
          venomDrench: {
              name: string;
              effect: string;
          };
          powder: {
              name: string;
              effect: string;
          };
          geomancy: {
              name: string;
              effect: string;
          };
          magneticFlux: {
              name: string;
              effect: string;
          };
          happyHour: {
              name: string;
              effect: string;
          };
          electricTerrain: {
              name: string;
              effect: string;
          };
          dazzlingGleam: {
              name: string;
              effect: string;
          };
          celebrate: {
              name: string;
              effect: string;
          };
          holdHands: {
              name: string;
              effect: string;
          };
          babyDollEyes: {
              name: string;
              effect: string;
          };
          nuzzle: {
              name: string;
              effect: string;
          };
          holdBack: {
              name: string;
              effect: string;
          };
          infestation: {
              name: string;
              effect: string;
          };
          powerUpPunch: {
              name: string;
              effect: string;
          };
          oblivionWing: {
              name: string;
              effect: string;
          };
          thousandArrows: {
              name: string;
              effect: string;
          };
          thousandWaves: {
              name: string;
              effect: string;
          };
          landsWrath: {
              name: string;
              effect: string;
          };
          lightOfRuin: {
              name: string;
              effect: string;
          };
          originPulse: {
              name: string;
              effect: string;
          };
          precipiceBlades: {
              name: string;
              effect: string;
          };
          dragonAscent: {
              name: string;
              effect: string;
          };
          hyperspaceFury: {
              name: string;
              effect: string;
          };
          breakneckBlitzPhysical: {
              name: string;
              effect: string;
          };
          breakneckBlitzSpecial: {
              name: string;
              effect: string;
          };
          allOutPummelingPhysical: {
              name: string;
              effect: string;
          };
          allOutPummelingSpecial: {
              name: string;
              effect: string;
          };
          supersonicSkystrikePhysical: {
              name: string;
              effect: string;
          };
          supersonicSkystrikeSpecial: {
              name: string;
              effect: string;
          };
          acidDownpourPhysical: {
              name: string;
              effect: string;
          };
          acidDownpourSpecial: {
              name: string;
              effect: string;
          };
          tectonicRagePhysical: {
              name: string;
              effect: string;
          };
          tectonicRageSpecial: {
              name: string;
              effect: string;
          };
          continentalCrushPhysical: {
              name: string;
              effect: string;
          };
          continentalCrushSpecial: {
              name: string;
              effect: string;
          };
          savageSpinOutPhysical: {
              name: string;
              effect: string;
          };
          savageSpinOutSpecial: {
              name: string;
              effect: string;
          };
          neverEndingNightmarePhysical: {
              name: string;
              effect: string;
          };
          neverEndingNightmareSpecial: {
              name: string;
              effect: string;
          };
          corkscrewCrashPhysical: {
              name: string;
              effect: string;
          };
          corkscrewCrashSpecial: {
              name: string;
              effect: string;
          };
          infernoOverdrivePhysical: {
              name: string;
              effect: string;
          };
          infernoOverdriveSpecial: {
              name: string;
              effect: string;
          };
          hydroVortexPhysical: {
              name: string;
              effect: string;
          };
          hydroVortexSpecial: {
              name: string;
              effect: string;
          };
          bloomDoomPhysical: {
              name: string;
              effect: string;
          };
          bloomDoomSpecial: {
              name: string;
              effect: string;
          };
          gigavoltHavocPhysical: {
              name: string;
              effect: string;
          };
          gigavoltHavocSpecial: {
              name: string;
              effect: string;
          };
          shatteredPsychePhysical: {
              name: string;
              effect: string;
          };
          shatteredPsycheSpecial: {
              name: string;
              effect: string;
          };
          subzeroSlammerPhysical: {
              name: string;
              effect: string;
          };
          subzeroSlammerSpecial: {
              name: string;
              effect: string;
          };
          devastatingDrakePhysical: {
              name: string;
              effect: string;
          };
          devastatingDrakeSpecial: {
              name: string;
              effect: string;
          };
          blackHoleEclipsePhysical: {
              name: string;
              effect: string;
          };
          blackHoleEclipseSpecial: {
              name: string;
              effect: string;
          };
          twinkleTacklePhysical: {
              name: string;
              effect: string;
          };
          twinkleTackleSpecial: {
              name: string;
              effect: string;
          };
          catastropika: {
              name: string;
              effect: string;
          };
          shoreUp: {
              name: string;
              effect: string;
          };
          firstImpression: {
              name: string;
              effect: string;
          };
          banefulBunker: {
              name: string;
              effect: string;
          };
          spiritShackle: {
              name: string;
              effect: string;
          };
          darkestLariat: {
              name: string;
              effect: string;
          };
          sparklingAria: {
              name: string;
              effect: string;
          };
          iceHammer: {
              name: string;
              effect: string;
          };
          floralHealing: {
              name: string;
              effect: string;
          };
          highHorsepower: {
              name: string;
              effect: string;
          };
          strengthSap: {
              name: string;
              effect: string;
          };
          solarBlade: {
              name: string;
              effect: string;
          };
          leafage: {
              name: string;
              effect: string;
          };
          spotlight: {
              name: string;
              effect: string;
          };
          toxicThread: {
              name: string;
              effect: string;
          };
          laserFocus: {
              name: string;
              effect: string;
          };
          gearUp: {
              name: string;
              effect: string;
          };
          throatChop: {
              name: string;
              effect: string;
          };
          pollenPuff: {
              name: string;
              effect: string;
          };
          anchorShot: {
              name: string;
              effect: string;
          };
          psychicTerrain: {
              name: string;
              effect: string;
          };
          lunge: {
              name: string;
              effect: string;
          };
          fireLash: {
              name: string;
              effect: string;
          };
          powerTrip: {
              name: string;
              effect: string;
          };
          burnUp: {
              name: string;
              effect: string;
          };
          speedSwap: {
              name: string;
              effect: string;
          };
          smartStrike: {
              name: string;
              effect: string;
          };
          purify: {
              name: string;
              effect: string;
          };
          revelationDance: {
              name: string;
              effect: string;
          };
          coreEnforcer: {
              name: string;
              effect: string;
          };
          tropKick: {
              name: string;
              effect: string;
          };
          instruct: {
              name: string;
              effect: string;
          };
          beakBlast: {
              name: string;
              effect: string;
          };
          clangingScales: {
              name: string;
              effect: string;
          };
          dragonHammer: {
              name: string;
              effect: string;
          };
          brutalSwing: {
              name: string;
              effect: string;
          };
          auroraVeil: {
              name: string;
              effect: string;
          };
          sinisterArrowRaid: {
              name: string;
              effect: string;
          };
          maliciousMoonsault: {
              name: string;
              effect: string;
          };
          oceanicOperetta: {
              name: string;
              effect: string;
          };
          guardianOfAlola: {
              name: string;
              effect: string;
          };
          soulStealing7StarStrike: {
              name: string;
              effect: string;
          };
          stokedSparksurfer: {
              name: string;
              effect: string;
          };
          pulverizingPancake: {
              name: string;
              effect: string;
          };
          extremeEvoboost: {
              name: string;
              effect: string;
          };
          genesisSupernova: {
              name: string;
              effect: string;
          };
          shellTrap: {
              name: string;
              effect: string;
          };
          fleurCannon: {
              name: string;
              effect: string;
          };
          psychicFangs: {
              name: string;
              effect: string;
          };
          stompingTantrum: {
              name: string;
              effect: string;
          };
          shadowBone: {
              name: string;
              effect: string;
          };
          accelerock: {
              name: string;
              effect: string;
          };
          liquidation: {
              name: string;
              effect: string;
          };
          prismaticLaser: {
              name: string;
              effect: string;
          };
          spectralThief: {
              name: string;
              effect: string;
          };
          sunsteelStrike: {
              name: string;
              effect: string;
          };
          moongeistBeam: {
              name: string;
              effect: string;
          };
          tearfulLook: {
              name: string;
              effect: string;
          };
          zingZap: {
              name: string;
              effect: string;
          };
          naturesMadness: {
              name: string;
              effect: string;
          };
          multiAttack: {
              name: string;
              effect: string;
          };
          tenMillionVoltThunderbolt: {
              name: string;
              effect: string;
          };
          mindBlown: {
              name: string;
              effect: string;
          };
          plasmaFists: {
              name: string;
              effect: string;
          };
          photonGeyser: {
              name: string;
              effect: string;
          };
          lightThatBurnsTheSky: {
              name: string;
              effect: string;
          };
          searingSunrazeSmash: {
              name: string;
              effect: string;
          };
          menacingMoonrazeMaelstrom: {
              name: string;
              effect: string;
          };
          letsSnuggleForever: {
              name: string;
              effect: string;
          };
          splinteredStormshards: {
              name: string;
              effect: string;
          };
          clangorousSoulblaze: {
              name: string;
              effect: string;
          };
          zippyZap: {
              name: string;
              effect: string;
          };
          splishySplash: {
              name: string;
              effect: string;
          };
          floatyFall: {
              name: string;
              effect: string;
          };
          pikaPapow: {
              name: string;
              effect: string;
          };
          bouncyBubble: {
              name: string;
              effect: string;
          };
          buzzyBuzz: {
              name: string;
              effect: string;
          };
          sizzlySlide: {
              name: string;
              effect: string;
          };
          glitzyGlow: {
              name: string;
              effect: string;
          };
          baddyBad: {
              name: string;
              effect: string;
          };
          sappySeed: {
              name: string;
              effect: string;
          };
          freezyFrost: {
              name: string;
              effect: string;
          };
          sparklySwirl: {
              name: string;
              effect: string;
          };
          veeveeVolley: {
              name: string;
              effect: string;
          };
          doubleIronBash: {
              name: string;
              effect: string;
          };
          maxGuard: {
              name: string;
              effect: string;
          };
          dynamaxCannon: {
              name: string;
              effect: string;
          };
          snipeShot: {
              name: string;
              effect: string;
          };
          jawLock: {
              name: string;
              effect: string;
          };
          stuffCheeks: {
              name: string;
              effect: string;
          };
          noRetreat: {
              name: string;
              effect: string;
          };
          tarShot: {
              name: string;
              effect: string;
          };
          magicPowder: {
              name: string;
              effect: string;
          };
          dragonDarts: {
              name: string;
              effect: string;
          };
          teatime: {
              name: string;
              effect: string;
          };
          octolock: {
              name: string;
              effect: string;
          };
          boltBeak: {
              name: string;
              effect: string;
          };
          fishiousRend: {
              name: string;
              effect: string;
          };
          courtChange: {
              name: string;
              effect: string;
          };
          maxFlare: {
              name: string;
              effect: string;
          };
          maxFlutterby: {
              name: string;
              effect: string;
          };
          maxLightning: {
              name: string;
              effect: string;
          };
          maxStrike: {
              name: string;
              effect: string;
          };
          maxKnuckle: {
              name: string;
              effect: string;
          };
          maxPhantasm: {
              name: string;
              effect: string;
          };
          maxHailstorm: {
              name: string;
              effect: string;
          };
          maxOoze: {
              name: string;
              effect: string;
          };
          maxGeyser: {
              name: string;
              effect: string;
          };
          maxAirstream: {
              name: string;
              effect: string;
          };
          maxStarfall: {
              name: string;
              effect: string;
          };
          maxWyrmwind: {
              name: string;
              effect: string;
          };
          maxMindstorm: {
              name: string;
              effect: string;
          };
          maxRockfall: {
              name: string;
              effect: string;
          };
          maxQuake: {
              name: string;
              effect: string;
          };
          maxDarkness: {
              name: string;
              effect: string;
          };
          maxOvergrowth: {
              name: string;
              effect: string;
          };
          maxSteelspike: {
              name: string;
              effect: string;
          };
          clangorousSoul: {
              name: string;
              effect: string;
          };
          bodyPress: {
              name: string;
              effect: string;
          };
          decorate: {
              name: string;
              effect: string;
          };
          drumBeating: {
              name: string;
              effect: string;
          };
          snapTrap: {
              name: string;
              effect: string;
          };
          pyroBall: {
              name: string;
              effect: string;
          };
          behemothBlade: {
              name: string;
              effect: string;
          };
          behemothBash: {
              name: string;
              effect: string;
          };
          auraWheel: {
              name: string;
              effect: string;
          };
          breakingSwipe: {
              name: string;
              effect: string;
          };
          branchPoke: {
              name: string;
              effect: string;
          };
          overdrive: {
              name: string;
              effect: string;
          };
          appleAcid: {
              name: string;
              effect: string;
          };
          gravApple: {
              name: string;
              effect: string;
          };
          spiritBreak: {
              name: string;
              effect: string;
          };
          strangeSteam: {
              name: string;
              effect: string;
          };
          lifeDew: {
              name: string;
              effect: string;
          };
          obstruct: {
              name: string;
              effect: string;
          };
          falseSurrender: {
              name: string;
              effect: string;
          };
          meteorAssault: {
              name: string;
              effect: string;
          };
          eternabeam: {
              name: string;
              effect: string;
          };
          steelBeam: {
              name: string;
              effect: string;
          };
          expandingForce: {
              name: string;
              effect: string;
          };
          steelRoller: {
              name: string;
              effect: string;
          };
          scaleShot: {
              name: string;
              effect: string;
          };
          meteorBeam: {
              name: string;
              effect: string;
          };
          shellSideArm: {
              name: string;
              effect: string;
          };
          mistyExplosion: {
              name: string;
              effect: string;
          };
          grassyGlide: {
              name: string;
              effect: string;
          };
          risingVoltage: {
              name: string;
              effect: string;
          };
          terrainPulse: {
              name: string;
              effect: string;
          };
          skitterSmack: {
              name: string;
              effect: string;
          };
          burningJealousy: {
              name: string;
              effect: string;
          };
          lashOut: {
              name: string;
              effect: string;
          };
          poltergeist: {
              name: string;
              effect: string;
          };
          corrosiveGas: {
              name: string;
              effect: string;
          };
          coaching: {
              name: string;
              effect: string;
          };
          flipTurn: {
              name: string;
              effect: string;
          };
          tripleAxel: {
              name: string;
              effect: string;
          };
          dualWingbeat: {
              name: string;
              effect: string;
          };
          scorchingSands: {
              name: string;
              effect: string;
          };
          jungleHealing: {
              name: string;
              effect: string;
          };
          wickedBlow: {
              name: string;
              effect: string;
          };
          surgingStrikes: {
              name: string;
              effect: string;
          };
          thunderCage: {
              name: string;
              effect: string;
          };
          dragonEnergy: {
              name: string;
              effect: string;
          };
          freezingGlare: {
              name: string;
              effect: string;
          };
          fieryWrath: {
              name: string;
              effect: string;
          };
          thunderousKick: {
              name: string;
              effect: string;
          };
          glacialLance: {
              name: string;
              effect: string;
          };
          astralBarrage: {
              name: string;
              effect: string;
          };
          eerieSpell: {
              name: string;
              effect: string;
          };
          direClaw: {
              name: string;
              effect: string;
          };
          psyshieldBash: {
              name: string;
              effect: string;
          };
          powerShift: {
              name: string;
              effect: string;
          };
          stoneAxe: {
              name: string;
              effect: string;
          };
          springtideStorm: {
              name: string;
              effect: string;
          };
          mysticalPower: {
              name: string;
              effect: string;
          };
          ragingFury: {
              name: string;
              effect: string;
          };
          waveCrash: {
              name: string;
              effect: string;
          };
          chloroblast: {
              name: string;
              effect: string;
          };
          mountainGale: {
              name: string;
              effect: string;
          };
          victoryDance: {
              name: string;
              effect: string;
          };
          headlongRush: {
              name: string;
              effect: string;
          };
          barbBarrage: {
              name: string;
              effect: string;
          };
          esperWing: {
              name: string;
              effect: string;
          };
          bitterMalice: {
              name: string;
              effect: string;
          };
          shelter: {
              name: string;
              effect: string;
          };
          tripleArrows: {
              name: string;
              effect: string;
          };
          infernalParade: {
              name: string;
              effect: string;
          };
          ceaselessEdge: {
              name: string;
              effect: string;
          };
          bleakwindStorm: {
              name: string;
              effect: string;
          };
          wildboltStorm: {
              name: string;
              effect: string;
          };
          sandsearStorm: {
              name: string;
              effect: string;
          };
          lunarBlessing: {
              name: string;
              effect: string;
          };
          takeHeart: {
              name: string;
              effect: string;
          };
          gMaxWildfire: {
              name: string;
              effect: string;
          };
          gMaxBefuddle: {
              name: string;
              effect: string;
          };
          gMaxVoltCrash: {
              name: string;
              effect: string;
          };
          gMaxGoldRush: {
              name: string;
              effect: string;
          };
          gMaxChiStrike: {
              name: string;
              effect: string;
          };
          gMaxTerror: {
              name: string;
              effect: string;
          };
          gMaxResonance: {
              name: string;
              effect: string;
          };
          gMaxCuddle: {
              name: string;
              effect: string;
          };
          gMaxReplenish: {
              name: string;
              effect: string;
          };
          gMaxMalodor: {
              name: string;
              effect: string;
          };
          gMaxStonesurge: {
              name: string;
              effect: string;
          };
          gMaxWindRage: {
              name: string;
              effect: string;
          };
          gMaxStunShock: {
              name: string;
              effect: string;
          };
          gMaxFinale: {
              name: string;
              effect: string;
          };
          gMaxDepletion: {
              name: string;
              effect: string;
          };
          gMaxGravitas: {
              name: string;
              effect: string;
          };
          gMaxVolcalith: {
              name: string;
              effect: string;
          };
          gMaxSandblast: {
              name: string;
              effect: string;
          };
          gMaxSnooze: {
              name: string;
              effect: string;
          };
          gMaxTartness: {
              name: string;
              effect: string;
          };
          gMaxSweetness: {
              name: string;
              effect: string;
          };
          gMaxSmite: {
              name: string;
              effect: string;
          };
          gMaxSteelsurge: {
              name: string;
              effect: string;
          };
          gMaxMeltdown: {
              name: string;
              effect: string;
          };
          gMaxFoamBurst: {
              name: string;
              effect: string;
          };
          gMaxCentiferno: {
              name: string;
              effect: string;
          };
          gMaxVineLash: {
              name: string;
              effect: string;
          };
          gMaxCannonade: {
              name: string;
              effect: string;
          };
          gMaxDrumSolo: {
              name: string;
              effect: string;
          };
          gMaxFireball: {
              name: string;
              effect: string;
          };
          gMaxHydrosnipe: {
              name: string;
              effect: string;
          };
          gMaxOneBlow: {
              name: string;
              effect: string;
          };
          gMaxRapidFlow: {
              name: string;
              effect: string;
          };
          teraBlast: {
              name: string;
              effect: string;
          };
          silkTrap: {
              name: string;
              effect: string;
          };
          axeKick: {
              name: string;
              effect: string;
          };
          lastRespects: {
              name: string;
              effect: string;
          };
          luminaCrash: {
              name: string;
              effect: string;
          };
          orderUp: {
              name: string;
              effect: string;
          };
          jetPunch: {
              name: string;
              effect: string;
          };
          spicyExtract: {
              name: string;
              effect: string;
          };
          spinOut: {
              name: string;
              effect: string;
          };
          populationBomb: {
              name: string;
              effect: string;
          };
          iceSpinner: {
              name: string;
              effect: string;
          };
          glaiveRush: {
              name: string;
              effect: string;
          };
          revivalBlessing: {
              name: string;
              effect: string;
          };
          saltCure: {
              name: string;
              effect: string;
          };
          tripleDive: {
              name: string;
              effect: string;
          };
          mortalSpin: {
              name: string;
              effect: string;
          };
          doodle: {
              name: string;
              effect: string;
          };
          filletAway: {
              name: string;
              effect: string;
          };
          kowtowCleave: {
              name: string;
              effect: string;
          };
          flowerTrick: {
              name: string;
              effect: string;
          };
          torchSong: {
              name: string;
              effect: string;
          };
          aquaStep: {
              name: string;
              effect: string;
          };
          ragingBull: {
              name: string;
              effect: string;
          };
          makeItRain: {
              name: string;
              effect: string;
          };
          psyblade: {
              name: string;
              effect: string;
          };
          hydroSteam: {
              name: string;
              effect: string;
          };
          ruination: {
              name: string;
              effect: string;
          };
          collisionCourse: {
              name: string;
              effect: string;
          };
          electroDrift: {
              name: string;
              effect: string;
          };
          shedTail: {
              name: string;
              effect: string;
          };
          chillyReception: {
              name: string;
              effect: string;
          };
          tidyUp: {
              name: string;
              effect: string;
          };
          snowscape: {
              name: string;
              effect: string;
          };
          pounce: {
              name: string;
              effect: string;
          };
          trailblaze: {
              name: string;
              effect: string;
          };
          chillingWater: {
              name: string;
              effect: string;
          };
          hyperDrill: {
              name: string;
              effect: string;
          };
          twinBeam: {
              name: string;
              effect: string;
          };
          rageFist: {
              name: string;
              effect: string;
          };
          armorCannon: {
              name: string;
              effect: string;
          };
          bitterBlade: {
              name: string;
              effect: string;
          };
          doubleShock: {
              name: string;
              effect: string;
          };
          gigatonHammer: {
              name: string;
              effect: string;
          };
          comeuppance: {
              name: string;
              effect: string;
          };
          aquaCutter: {
              name: string;
              effect: string;
          };
          blazingTorque: {
              name: string;
              effect: string;
          };
          wickedTorque: {
              name: string;
              effect: string;
          };
          noxiousTorque: {
              name: string;
              effect: string;
          };
          combatTorque: {
              name: string;
              effect: string;
          };
          magicalTorque: {
              name: string;
              effect: string;
          };
          bloodMoon: {
              name: string;
              effect: string;
          };
          matchaGotcha: {
              name: string;
              effect: string;
          };
          syrupBomb: {
              name: string;
              effect: string;
          };
          ivyCudgel: {
              name: string;
              effect: string;
          };
          electroShot: {
              name: string;
              effect: string;
          };
          teraStarstorm: {
              name: string;
              effect: string;
          };
          fickleBeam: {
              name: string;
              effect: string;
          };
          burningBulwark: {
              name: string;
              effect: string;
          };
          thunderclap: {
              name: string;
              effect: string;
          };
          mightyCleave: {
              name: string;
              effect: string;
          };
          tachyonCutter: {
              name: string;
              effect: string;
          };
          hardPress: {
              name: string;
              effect: string;
          };
          dragonCheer: {
              name: string;
              effect: string;
          };
          alluringVoice: {
              name: string;
              effect: string;
          };
          temperFlare: {
              name: string;
              effect: string;
          };
          supercellSlam: {
              name: string;
              effect: string;
          };
          psychicNoise: {
              name: string;
              effect: string;
          };
          upperHand: {
              name: string;
              effect: string;
          };
          malignantChain: {
              name: string;
              effect: string;
          };
      };
      nature: {
          Hardy: string;
          Lonely: string;
          Brave: string;
          Adamant: string;
          Naughty: string;
          Bold: string;
          Docile: string;
          Relaxed: string;
          Impish: string;
          Lax: string;
          Timid: string;
          Hasty: string;
          Serious: string;
          Jolly: string;
          Naive: string;
          Modest: string;
          Mild: string;
          Quiet: string;
          Bashful: string;
          Rash: string;
          Calm: string;
          Gentle: string;
          Sassy: string;
          Careful: string;
          Quirky: string;
      };
      pokeball: {
          pokeBall: string;
          greatBall: string;
          ultraBall: string;
          rogueBall: string;
          masterBall: string;
          luxuryBall: string;
      };
      pokemon: {
          bulbasaur: string;
          ivysaur: string;
          venusaur: string;
          charmander: string;
          charmeleon: string;
          charizard: string;
          squirtle: string;
          wartortle: string;
          blastoise: string;
          caterpie: string;
          metapod: string;
          butterfree: string;
          weedle: string;
          kakuna: string;
          beedrill: string;
          pidgey: string;
          pidgeotto: string;
          pidgeot: string;
          rattata: string;
          raticate: string;
          spearow: string;
          fearow: string;
          ekans: string;
          arbok: string;
          pikachu: string;
          raichu: string;
          sandshrew: string;
          sandslash: string;
          nidoran_f: string;
          nidorina: string;
          nidoqueen: string;
          nidoran_m: string;
          nidorino: string;
          nidoking: string;
          clefairy: string;
          clefable: string;
          vulpix: string;
          ninetales: string;
          jigglypuff: string;
          wigglytuff: string;
          zubat: string;
          golbat: string;
          oddish: string;
          gloom: string;
          vileplume: string;
          paras: string;
          parasect: string;
          venonat: string;
          venomoth: string;
          diglett: string;
          dugtrio: string;
          meowth: string;
          persian: string;
          psyduck: string;
          golduck: string;
          mankey: string;
          primeape: string;
          growlithe: string;
          arcanine: string;
          poliwag: string;
          poliwhirl: string;
          poliwrath: string;
          abra: string;
          kadabra: string;
          alakazam: string;
          machop: string;
          machoke: string;
          machamp: string;
          bellsprout: string;
          weepinbell: string;
          victreebel: string;
          tentacool: string;
          tentacruel: string;
          geodude: string;
          graveler: string;
          golem: string;
          ponyta: string;
          rapidash: string;
          slowpoke: string;
          slowbro: string;
          magnemite: string;
          magneton: string;
          farfetchd: string;
          doduo: string;
          dodrio: string;
          seel: string;
          dewgong: string;
          grimer: string;
          muk: string;
          shellder: string;
          cloyster: string;
          gastly: string;
          haunter: string;
          gengar: string;
          onix: string;
          drowzee: string;
          hypno: string;
          krabby: string;
          kingler: string;
          voltorb: string;
          electrode: string;
          exeggcute: string;
          exeggutor: string;
          cubone: string;
          marowak: string;
          hitmonlee: string;
          hitmonchan: string;
          lickitung: string;
          koffing: string;
          weezing: string;
          rhyhorn: string;
          rhydon: string;
          chansey: string;
          tangela: string;
          kangaskhan: string;
          horsea: string;
          seadra: string;
          goldeen: string;
          seaking: string;
          staryu: string;
          starmie: string;
          mr_mime: string;
          scyther: string;
          jynx: string;
          electabuzz: string;
          magmar: string;
          pinsir: string;
          tauros: string;
          magikarp: string;
          gyarados: string;
          lapras: string;
          ditto: string;
          eevee: string;
          vaporeon: string;
          jolteon: string;
          flareon: string;
          porygon: string;
          omanyte: string;
          omastar: string;
          kabuto: string;
          kabutops: string;
          aerodactyl: string;
          snorlax: string;
          articuno: string;
          zapdos: string;
          moltres: string;
          dratini: string;
          dragonair: string;
          dragonite: string;
          mewtwo: string;
          mew: string;
          chikorita: string;
          bayleef: string;
          meganium: string;
          cyndaquil: string;
          quilava: string;
          typhlosion: string;
          totodile: string;
          croconaw: string;
          feraligatr: string;
          sentret: string;
          furret: string;
          hoothoot: string;
          noctowl: string;
          ledyba: string;
          ledian: string;
          spinarak: string;
          ariados: string;
          crobat: string;
          chinchou: string;
          lanturn: string;
          pichu: string;
          cleffa: string;
          igglybuff: string;
          togepi: string;
          togetic: string;
          natu: string;
          xatu: string;
          mareep: string;
          flaaffy: string;
          ampharos: string;
          bellossom: string;
          marill: string;
          azumarill: string;
          sudowoodo: string;
          politoed: string;
          hoppip: string;
          skiploom: string;
          jumpluff: string;
          aipom: string;
          sunkern: string;
          sunflora: string;
          yanma: string;
          wooper: string;
          quagsire: string;
          espeon: string;
          umbreon: string;
          murkrow: string;
          slowking: string;
          misdreavus: string;
          unown: string;
          wobbuffet: string;
          girafarig: string;
          pineco: string;
          forretress: string;
          dunsparce: string;
          gligar: string;
          steelix: string;
          snubbull: string;
          granbull: string;
          qwilfish: string;
          scizor: string;
          shuckle: string;
          heracross: string;
          sneasel: string;
          teddiursa: string;
          ursaring: string;
          slugma: string;
          magcargo: string;
          swinub: string;
          piloswine: string;
          corsola: string;
          remoraid: string;
          octillery: string;
          delibird: string;
          mantine: string;
          skarmory: string;
          houndour: string;
          houndoom: string;
          kingdra: string;
          phanpy: string;
          donphan: string;
          porygon2: string;
          stantler: string;
          smeargle: string;
          tyrogue: string;
          hitmontop: string;
          smoochum: string;
          elekid: string;
          magby: string;
          miltank: string;
          blissey: string;
          raikou: string;
          entei: string;
          suicune: string;
          larvitar: string;
          pupitar: string;
          tyranitar: string;
          lugia: string;
          ho_oh: string;
          celebi: string;
          treecko: string;
          grovyle: string;
          sceptile: string;
          torchic: string;
          combusken: string;
          blaziken: string;
          mudkip: string;
          marshtomp: string;
          swampert: string;
          poochyena: string;
          mightyena: string;
          zigzagoon: string;
          linoone: string;
          wurmple: string;
          silcoon: string;
          beautifly: string;
          cascoon: string;
          dustox: string;
          lotad: string;
          lombre: string;
          ludicolo: string;
          seedot: string;
          nuzleaf: string;
          shiftry: string;
          taillow: string;
          swellow: string;
          wingull: string;
          pelipper: string;
          ralts: string;
          kirlia: string;
          gardevoir: string;
          surskit: string;
          masquerain: string;
          shroomish: string;
          breloom: string;
          slakoth: string;
          vigoroth: string;
          slaking: string;
          nincada: string;
          ninjask: string;
          shedinja: string;
          whismur: string;
          loudred: string;
          exploud: string;
          makuhita: string;
          hariyama: string;
          azurill: string;
          nosepass: string;
          skitty: string;
          delcatty: string;
          sableye: string;
          mawile: string;
          aron: string;
          lairon: string;
          aggron: string;
          meditite: string;
          medicham: string;
          electrike: string;
          manectric: string;
          plusle: string;
          minun: string;
          volbeat: string;
          illumise: string;
          roselia: string;
          gulpin: string;
          swalot: string;
          carvanha: string;
          sharpedo: string;
          wailmer: string;
          wailord: string;
          numel: string;
          camerupt: string;
          torkoal: string;
          spoink: string;
          grumpig: string;
          spinda: string;
          trapinch: string;
          vibrava: string;
          flygon: string;
          cacnea: string;
          cacturne: string;
          swablu: string;
          altaria: string;
          zangoose: string;
          seviper: string;
          lunatone: string;
          solrock: string;
          barboach: string;
          whiscash: string;
          corphish: string;
          crawdaunt: string;
          baltoy: string;
          claydol: string;
          lileep: string;
          cradily: string;
          anorith: string;
          armaldo: string;
          feebas: string;
          milotic: string;
          castform: string;
          kecleon: string;
          shuppet: string;
          banette: string;
          duskull: string;
          dusclops: string;
          tropius: string;
          chimecho: string;
          absol: string;
          wynaut: string;
          snorunt: string;
          glalie: string;
          spheal: string;
          sealeo: string;
          walrein: string;
          clamperl: string;
          huntail: string;
          gorebyss: string;
          relicanth: string;
          luvdisc: string;
          bagon: string;
          shelgon: string;
          salamence: string;
          beldum: string;
          metang: string;
          metagross: string;
          regirock: string;
          regice: string;
          registeel: string;
          latias: string;
          latios: string;
          kyogre: string;
          groudon: string;
          rayquaza: string;
          jirachi: string;
          deoxys: string;
          turtwig: string;
          grotle: string;
          torterra: string;
          chimchar: string;
          monferno: string;
          infernape: string;
          piplup: string;
          prinplup: string;
          empoleon: string;
          starly: string;
          staravia: string;
          staraptor: string;
          bidoof: string;
          bibarel: string;
          kricketot: string;
          kricketune: string;
          shinx: string;
          luxio: string;
          luxray: string;
          budew: string;
          roserade: string;
          cranidos: string;
          rampardos: string;
          shieldon: string;
          bastiodon: string;
          burmy: string;
          wormadam: string;
          mothim: string;
          combee: string;
          vespiquen: string;
          pachirisu: string;
          buizel: string;
          floatzel: string;
          cherubi: string;
          cherrim: string;
          shellos: string;
          gastrodon: string;
          ambipom: string;
          drifloon: string;
          drifblim: string;
          buneary: string;
          lopunny: string;
          mismagius: string;
          honchkrow: string;
          glameow: string;
          purugly: string;
          chingling: string;
          stunky: string;
          skuntank: string;
          bronzor: string;
          bronzong: string;
          bonsly: string;
          mime_jr: string;
          happiny: string;
          chatot: string;
          spiritomb: string;
          gible: string;
          gabite: string;
          garchomp: string;
          munchlax: string;
          riolu: string;
          lucario: string;
          hippopotas: string;
          hippowdon: string;
          skorupi: string;
          drapion: string;
          croagunk: string;
          toxicroak: string;
          carnivine: string;
          finneon: string;
          lumineon: string;
          mantyke: string;
          snover: string;
          abomasnow: string;
          weavile: string;
          magnezone: string;
          lickilicky: string;
          rhyperior: string;
          tangrowth: string;
          electivire: string;
          magmortar: string;
          togekiss: string;
          yanmega: string;
          leafeon: string;
          glaceon: string;
          gliscor: string;
          mamoswine: string;
          porygon_z: string;
          gallade: string;
          probopass: string;
          dusknoir: string;
          froslass: string;
          rotom: string;
          uxie: string;
          mesprit: string;
          azelf: string;
          dialga: string;
          palkia: string;
          heatran: string;
          regigigas: string;
          giratina: string;
          cresselia: string;
          phione: string;
          manaphy: string;
          darkrai: string;
          shaymin: string;
          arceus: string;
          victini: string;
          snivy: string;
          servine: string;
          serperior: string;
          tepig: string;
          pignite: string;
          emboar: string;
          oshawott: string;
          dewott: string;
          samurott: string;
          patrat: string;
          watchog: string;
          lillipup: string;
          herdier: string;
          stoutland: string;
          purrloin: string;
          liepard: string;
          pansage: string;
          simisage: string;
          pansear: string;
          simisear: string;
          panpour: string;
          simipour: string;
          munna: string;
          musharna: string;
          pidove: string;
          tranquill: string;
          unfezant: string;
          blitzle: string;
          zebstrika: string;
          roggenrola: string;
          boldore: string;
          gigalith: string;
          woobat: string;
          swoobat: string;
          drilbur: string;
          excadrill: string;
          audino: string;
          timburr: string;
          gurdurr: string;
          conkeldurr: string;
          tympole: string;
          palpitoad: string;
          seismitoad: string;
          throh: string;
          sawk: string;
          sewaddle: string;
          swadloon: string;
          leavanny: string;
          venipede: string;
          whirlipede: string;
          scolipede: string;
          cottonee: string;
          whimsicott: string;
          petilil: string;
          lilligant: string;
          basculin: string;
          sandile: string;
          krokorok: string;
          krookodile: string;
          darumaka: string;
          darmanitan: string;
          maractus: string;
          dwebble: string;
          crustle: string;
          scraggy: string;
          scrafty: string;
          sigilyph: string;
          yamask: string;
          cofagrigus: string;
          tirtouga: string;
          carracosta: string;
          archen: string;
          archeops: string;
          trubbish: string;
          garbodor: string;
          zorua: string;
          zoroark: string;
          minccino: string;
          cinccino: string;
          gothita: string;
          gothorita: string;
          gothitelle: string;
          solosis: string;
          duosion: string;
          reuniclus: string;
          ducklett: string;
          swanna: string;
          vanillite: string;
          vanillish: string;
          vanilluxe: string;
          deerling: string;
          sawsbuck: string;
          emolga: string;
          karrablast: string;
          escavalier: string;
          foongus: string;
          amoonguss: string;
          frillish: string;
          jellicent: string;
          alomomola: string;
          joltik: string;
          galvantula: string;
          ferroseed: string;
          ferrothorn: string;
          klink: string;
          klang: string;
          klinklang: string;
          tynamo: string;
          eelektrik: string;
          eelektross: string;
          elgyem: string;
          beheeyem: string;
          litwick: string;
          lampent: string;
          chandelure: string;
          axew: string;
          fraxure: string;
          haxorus: string;
          cubchoo: string;
          beartic: string;
          cryogonal: string;
          shelmet: string;
          accelgor: string;
          stunfisk: string;
          mienfoo: string;
          mienshao: string;
          druddigon: string;
          golett: string;
          golurk: string;
          pawniard: string;
          bisharp: string;
          bouffalant: string;
          rufflet: string;
          braviary: string;
          vullaby: string;
          mandibuzz: string;
          heatmor: string;
          durant: string;
          deino: string;
          zweilous: string;
          hydreigon: string;
          larvesta: string;
          volcarona: string;
          cobalion: string;
          terrakion: string;
          virizion: string;
          tornadus: string;
          thundurus: string;
          reshiram: string;
          zekrom: string;
          landorus: string;
          kyurem: string;
          keldeo: string;
          meloetta: string;
          genesect: string;
          chespin: string;
          quilladin: string;
          chesnaught: string;
          fennekin: string;
          braixen: string;
          delphox: string;
          froakie: string;
          frogadier: string;
          greninja: string;
          bunnelby: string;
          diggersby: string;
          fletchling: string;
          fletchinder: string;
          talonflame: string;
          scatterbug: string;
          spewpa: string;
          vivillon: string;
          litleo: string;
          pyroar: string;
          flabebe: string;
          floette: string;
          florges: string;
          skiddo: string;
          gogoat: string;
          pancham: string;
          pangoro: string;
          furfrou: string;
          espurr: string;
          meowstic: string;
          honedge: string;
          doublade: string;
          aegislash: string;
          spritzee: string;
          aromatisse: string;
          swirlix: string;
          slurpuff: string;
          inkay: string;
          malamar: string;
          binacle: string;
          barbaracle: string;
          skrelp: string;
          dragalge: string;
          clauncher: string;
          clawitzer: string;
          helioptile: string;
          heliolisk: string;
          tyrunt: string;
          tyrantrum: string;
          amaura: string;
          aurorus: string;
          sylveon: string;
          hawlucha: string;
          dedenne: string;
          carbink: string;
          goomy: string;
          sliggoo: string;
          goodra: string;
          klefki: string;
          phantump: string;
          trevenant: string;
          pumpkaboo: string;
          gourgeist: string;
          bergmite: string;
          avalugg: string;
          noibat: string;
          noivern: string;
          xerneas: string;
          yveltal: string;
          zygarde: string;
          diancie: string;
          hoopa: string;
          volcanion: string;
          rowlet: string;
          dartrix: string;
          decidueye: string;
          litten: string;
          torracat: string;
          incineroar: string;
          popplio: string;
          brionne: string;
          primarina: string;
          pikipek: string;
          trumbeak: string;
          toucannon: string;
          yungoos: string;
          gumshoos: string;
          grubbin: string;
          charjabug: string;
          vikavolt: string;
          crabrawler: string;
          crabominable: string;
          oricorio: string;
          cutiefly: string;
          ribombee: string;
          rockruff: string;
          lycanroc: string;
          wishiwashi: string;
          mareanie: string;
          toxapex: string;
          mudbray: string;
          mudsdale: string;
          dewpider: string;
          araquanid: string;
          fomantis: string;
          lurantis: string;
          morelull: string;
          shiinotic: string;
          salandit: string;
          salazzle: string;
          stufful: string;
          bewear: string;
          bounsweet: string;
          steenee: string;
          tsareena: string;
          comfey: string;
          oranguru: string;
          passimian: string;
          wimpod: string;
          golisopod: string;
          sandygast: string;
          palossand: string;
          pyukumuku: string;
          type_null: string;
          silvally: string;
          minior: string;
          komala: string;
          turtonator: string;
          togedemaru: string;
          mimikyu: string;
          bruxish: string;
          drampa: string;
          dhelmise: string;
          jangmo_o: string;
          hakamo_o: string;
          kommo_o: string;
          tapu_koko: string;
          tapu_lele: string;
          tapu_bulu: string;
          tapu_fini: string;
          cosmog: string;
          cosmoem: string;
          solgaleo: string;
          lunala: string;
          nihilego: string;
          buzzwole: string;
          pheromosa: string;
          xurkitree: string;
          celesteela: string;
          kartana: string;
          guzzlord: string;
          necrozma: string;
          magearna: string;
          marshadow: string;
          poipole: string;
          naganadel: string;
          stakataka: string;
          blacephalon: string;
          zeraora: string;
          meltan: string;
          melmetal: string;
          grookey: string;
          thwackey: string;
          rillaboom: string;
          scorbunny: string;
          raboot: string;
          cinderace: string;
          sobble: string;
          drizzile: string;
          inteleon: string;
          skwovet: string;
          greedent: string;
          rookidee: string;
          corvisquire: string;
          corviknight: string;
          blipbug: string;
          dottler: string;
          orbeetle: string;
          nickit: string;
          thievul: string;
          gossifleur: string;
          eldegoss: string;
          wooloo: string;
          dubwool: string;
          chewtle: string;
          drednaw: string;
          yamper: string;
          boltund: string;
          rolycoly: string;
          carkol: string;
          coalossal: string;
          applin: string;
          flapple: string;
          appletun: string;
          silicobra: string;
          sandaconda: string;
          cramorant: string;
          arrokuda: string;
          barraskewda: string;
          toxel: string;
          toxtricity: string;
          sizzlipede: string;
          centiskorch: string;
          clobbopus: string;
          grapploct: string;
          sinistea: string;
          polteageist: string;
          hatenna: string;
          hattrem: string;
          hatterene: string;
          impidimp: string;
          morgrem: string;
          grimmsnarl: string;
          obstagoon: string;
          perrserker: string;
          cursola: string;
          sirfetchd: string;
          mr_rime: string;
          runerigus: string;
          milcery: string;
          alcremie: string;
          falinks: string;
          pincurchin: string;
          snom: string;
          frosmoth: string;
          stonjourner: string;
          eiscue: string;
          indeedee: string;
          morpeko: string;
          cufant: string;
          copperajah: string;
          dracozolt: string;
          arctozolt: string;
          dracovish: string;
          arctovish: string;
          duraludon: string;
          dreepy: string;
          drakloak: string;
          dragapult: string;
          zacian: string;
          zamazenta: string;
          eternatus: string;
          kubfu: string;
          urshifu: string;
          zarude: string;
          regieleki: string;
          regidrago: string;
          glastrier: string;
          spectrier: string;
          calyrex: string;
          wyrdeer: string;
          kleavor: string;
          ursaluna: string;
          basculegion: string;
          sneasler: string;
          overqwil: string;
          enamorus: string;
          sprigatito: string;
          floragato: string;
          meowscarada: string;
          fuecoco: string;
          crocalor: string;
          skeledirge: string;
          quaxly: string;
          quaxwell: string;
          quaquaval: string;
          lechonk: string;
          oinkologne: string;
          tarountula: string;
          spidops: string;
          nymble: string;
          lokix: string;
          pawmi: string;
          pawmo: string;
          pawmot: string;
          tandemaus: string;
          maushold: string;
          fidough: string;
          dachsbun: string;
          smoliv: string;
          dolliv: string;
          arboliva: string;
          squawkabilly: string;
          nacli: string;
          naclstack: string;
          garganacl: string;
          charcadet: string;
          armarouge: string;
          ceruledge: string;
          tadbulb: string;
          bellibolt: string;
          wattrel: string;
          kilowattrel: string;
          maschiff: string;
          mabosstiff: string;
          shroodle: string;
          grafaiai: string;
          bramblin: string;
          brambleghast: string;
          toedscool: string;
          toedscruel: string;
          klawf: string;
          capsakid: string;
          scovillain: string;
          rellor: string;
          rabsca: string;
          flittle: string;
          espathra: string;
          tinkatink: string;
          tinkatuff: string;
          tinkaton: string;
          wiglett: string;
          wugtrio: string;
          bombirdier: string;
          finizen: string;
          palafin: string;
          varoom: string;
          revavroom: string;
          cyclizar: string;
          orthworm: string;
          glimmet: string;
          glimmora: string;
          greavard: string;
          houndstone: string;
          flamigo: string;
          cetoddle: string;
          cetitan: string;
          veluza: string;
          dondozo: string;
          tatsugiri: string;
          annihilape: string;
          clodsire: string;
          farigiraf: string;
          dudunsparce: string;
          kingambit: string;
          great_tusk: string;
          scream_tail: string;
          brute_bonnet: string;
          flutter_mane: string;
          slither_wing: string;
          sandy_shocks: string;
          iron_treads: string;
          iron_bundle: string;
          iron_hands: string;
          iron_jugulis: string;
          iron_moth: string;
          iron_thorns: string;
          frigibax: string;
          arctibax: string;
          baxcalibur: string;
          gimmighoul: string;
          gholdengo: string;
          wo_chien: string;
          chien_pao: string;
          ting_lu: string;
          chi_yu: string;
          roaring_moon: string;
          iron_valiant: string;
          koraidon: string;
          miraidon: string;
          walking_wake: string;
          iron_leaves: string;
          dipplin: string;
          poltchageist: string;
          sinistcha: string;
          okidogi: string;
          munkidori: string;
          fezandipiti: string;
          ogerpon: string;
          archaludon: string;
          hydrapple: string;
          gouging_fire: string;
          raging_bolt: string;
          iron_boulder: string;
          iron_crown: string;
          terapagos: string;
          pecharunt: string;
          alola_rattata: string;
          alola_raticate: string;
          alola_raichu: string;
          alola_sandshrew: string;
          alola_sandslash: string;
          alola_vulpix: string;
          alola_ninetales: string;
          alola_diglett: string;
          alola_dugtrio: string;
          alola_meowth: string;
          alola_persian: string;
          alola_geodude: string;
          alola_graveler: string;
          alola_golem: string;
          alola_grimer: string;
          alola_muk: string;
          alola_exeggutor: string;
          alola_marowak: string;
          eternal_floette: string;
          galar_meowth: string;
          galar_ponyta: string;
          galar_rapidash: string;
          galar_slowpoke: string;
          galar_slowbro: string;
          galar_farfetchd: string;
          galar_weezing: string;
          galar_mr_mime: string;
          galar_articuno: string;
          galar_zapdos: string;
          galar_moltres: string;
          galar_slowking: string;
          galar_corsola: string;
          galar_zigzagoon: string;
          galar_linoone: string;
          galar_darumaka: string;
          galar_darmanitan: string;
          galar_yamask: string;
          galar_stunfisk: string;
          hisui_growlithe: string;
          hisui_arcanine: string;
          hisui_voltorb: string;
          hisui_electrode: string;
          hisui_typhlosion: string;
          hisui_qwilfish: string;
          hisui_sneasel: string;
          hisui_samurott: string;
          hisui_lilligant: string;
          hisui_zorua: string;
          hisui_zoroark: string;
          hisui_braviary: string;
          hisui_sliggoo: string;
          hisui_goodra: string;
          hisui_avalugg: string;
          hisui_decidueye: string;
          paldea_tauros: string;
          paldea_wooper: string;
          bloodmoon_ursaluna: string;
      };
      pokemonForm: {
          pikachuCosplay: string;
          pikachuCoolCosplay: string;
          pikachuBeautyCosplay: string;
          pikachuCuteCosplay: string;
          pikachuSmartCosplay: string;
          pikachuToughCosplay: string;
          pikachuPartner: string;
          eeveePartner: string;
          pichuSpiky: string;
          unownA: string;
          unownB: string;
          unownC: string;
          unownD: string;
          unownE: string;
          unownF: string;
          unownG: string;
          unownH: string;
          unownI: string;
          unownJ: string;
          unownK: string;
          unownL: string;
          unownM: string;
          unownN: string;
          unownO: string;
          unownP: string;
          unownQ: string;
          unownR: string;
          unownS: string;
          unownT: string;
          unownU: string;
          unownV: string;
          unownW: string;
          unownX: string;
          unownY: string;
          unownZ: string;
          unownExclamation: string;
          unownQuestion: string;
          castformSunny: string;
          castformRainy: string;
          castformSnowy: string;
          deoxysNormal: string;
          burmyPlant: string;
          burmySandy: string;
          burmyTrash: string;
          shellosEast: string;
          shellosWest: string;
          rotomHeat: string;
          rotomWash: string;
          rotomFrost: string;
          rotomFan: string;
          rotomMow: string;
          giratinaAltered: string;
          shayminLand: string;
          basculinRedStriped: string;
          basculinBlueStriped: string;
          basculinWhiteStriped: string;
          deerlingSpring: string;
          deerlingSummer: string;
          deerlingAutumn: string;
          deerlingWinter: string;
          tornadusIncarnate: string;
          thundurusIncarnate: string;
          landorusIncarnate: string;
          keldeoOrdinary: string;
          meloettaAria: string;
          meloettaPirouette: string;
          froakieBattleBond: string;
          scatterbugMeadow: string;
          scatterbugIcySnow: string;
          scatterbugPolar: string;
          scatterbugTundra: string;
          scatterbugContinental: string;
          scatterbugGarden: string;
          scatterbugElegant: string;
          scatterbugModern: string;
          scatterbugMarine: string;
          scatterbugArchipelago: string;
          scatterbugHighPlains: string;
          scatterbugSandstorm: string;
          scatterbugRiver: string;
          scatterbugMonsoon: string;
          scatterbugSavanna: string;
          scatterbugSun: string;
          scatterbugOcean: string;
          scatterbugJungle: string;
          scatterbugFancy: string;
          scatterbugPokeBall: string;
          flabebeRed: string;
          flabebeYellow: string;
          flabebeOrange: string;
          flabebeBlue: string;
          flabebeWhite: string;
          furfrouHeart: string;
          furfrouStar: string;
          furfrouDiamond: string;
          furfrouDebutante: string;
          furfrouMatron: string;
          furfrouDandy: string;
          furfrouLaReine: string;
          furfrouKabuki: string;
          furfrouPharaoh: string;
          pumpkabooSmall: string;
          pumpkabooLarge: string;
          pumpkabooSuper: string;
          xerneasNeutral: string;
          xerneasActive: string;
          zygarde50: string;
          zygarde10: string;
          zygarde50Pc: string;
          zygarde10Pc: string;
          zygardeComplete: string;
          oricorioBaile: string;
          oricorioPompom: string;
          oricorioPau: string;
          oricorioSensu: string;
          rockruffOwnTempo: string;
          miniorRedMeteor: string;
          miniorOrangeMeteor: string;
          miniorYellowMeteor: string;
          miniorGreenMeteor: string;
          miniorBlueMeteor: string;
          miniorIndigoMeteor: string;
          miniorVioletMeteor: string;
          miniorRed: string;
          miniorOrange: string;
          miniorYellow: string;
          miniorGreen: string;
          miniorBlue: string;
          miniorIndigo: string;
          miniorViolet: string;
          mimikyuDisguised: string;
          mimikyuBusted: string;
          magearnaOriginal: string;
          marshadowZenith: string;
          sinisteaPhony: string;
          sinisteaAntique: string;
          eiscueNoIce: string;
          indeedeeMale: string;
          indeedeeFemale: string;
          morpekoFullBelly: string;
          zacianHeroOfManyBattles: string;
          zamazentaHeroOfManyBattles: string;
          zarudeDada: string;
          enamorusIncarnate: string;
          squawkabillyGreenPlumage: string;
          squawkabillyBluePlumage: string;
          squawkabillyYellowPlumage: string;
          squawkabillyWhitePlumage: string;
          tatsugiriCurly: string;
          tatsugiriDroopy: string;
          tatsugiriStretchy: string;
          gimmighoulChest: string;
          gimmighoulRoaming: string;
          koraidonApexBuild: string;
          koraidonLimitedBuild: string;
          koraidonSprintingBuild: string;
          koraidonSwimmingBuild: string;
          koraidonGlidingBuild: string;
          miraidonUltimateMode: string;
          miraidonLowPowerMode: string;
          miraidonDriveMode: string;
          miraidonAquaticMode: string;
          miraidonGlideMode: string;
          poltchageistCounterfeit: string;
          poltchageistArtisan: string;
          paldeaTaurosCombat: string;
          paldeaTaurosBlaze: string;
          paldeaTaurosAqua: string;
      };
      pokemonInfo: {
          Stat: {
              HP: string;
              HPshortened: string;
              ATK: string;
              ATKshortened: string;
              DEF: string;
              DEFshortened: string;
              SPATK: string;
              SPATKshortened: string;
              SPDEF: string;
              SPDEFshortened: string;
              SPD: string;
              SPDshortened: string;
              ACC: string;
              EVA: string;
              HPStat: string;
          };
          Type: {
              UNKNOWN: string;
              NORMAL: string;
              FIGHTING: string;
              FLYING: string;
              POISON: string;
              GROUND: string;
              ROCK: string;
              BUG: string;
              GHOST: string;
              STEEL: string;
              FIRE: string;
              WATER: string;
              GRASS: string;
              ELECTRIC: string;
              PSYCHIC: string;
              ICE: string;
              DRAGON: string;
              DARK: string;
              FAIRY: string;
              STELLAR: string;
          };
      };
      pokemonInfoContainer: {
          moveset: string;
          gender: string;
          ability: string;
          nature: string;
          form: string;
      };
      pokemonSummary: {
          pokemonInfo: string;
          status: string;
          powerAccuracyCategory: string;
          type: string;
          unknownTrainer: string;
          ot: string;
          nature: string;
          expPoints: string;
          nextLv: string;
          cancel: string;
          memoString: string;
          metFragment: {
              normal: string;
              apparently: string;
          };
          natureFragment: {
              Hardy: string;
              Lonely: string;
              Brave: string;
              Adamant: string;
              Naughty: string;
              Bold: string;
              Docile: string;
              Relaxed: string;
              Impish: string;
              Lax: string;
              Timid: string;
              Hasty: string;
              Serious: string;
              Jolly: string;
              Naive: string;
              Modest: string;
              Mild: string;
              Quiet: string;
              Bashful: string;
              Rash: string;
              Calm: string;
              Gentle: string;
              Sassy: string;
              Careful: string;
              Quirky: string;
          };
      };
      saveSlotSelectUiHandler: {
          overwriteData: string;
          loading: string;
          wave: string;
          lv: string;
          empty: string;
      };
      settings: {
          boy: string;
          girl: string;
          general: string;
          display: string;
          audio: string;
          gamepad: string;
          keyboard: string;
          gameSpeed: string;
          hpBarSpeed: string;
          expGainsSpeed: string;
          expPartyDisplay: string;
          skipSeenDialogues: string;
          battleStyle: string;
          enableRetries: string;
          hideIvs: string;
          tutorials: string;
          touchControls: string;
          vibrations: string;
          normal: string;
          fast: string;
          faster: string;
          skip: string;
          levelUpNotifications: string;
          on: string;
          off: string;
          switch: string;
          set: string;
          auto: string;
          disabled: string;
          language: string;
          change: string;
          uiTheme: string;
          default: string;
          legacy: string;
          windowType: string;
          moneyFormat: string;
          damageNumbers: string;
          simple: string;
          fancy: string;
          abbreviated: string;
          moveAnimations: string;
          showStatsOnLevelUp: string;
          candyUpgradeNotification: string;
          passivesOnly: string;
          candyUpgradeDisplay: string;
          icon: string;
          animation: string;
          moveInfo: string;
          showMovesetFlyout: string;
          showArenaFlyout: string;
          showTimeOfDayWidget: string;
          timeOfDayAnimation: string;
          bounce: string;
          timeOfDay_back: string;
          spriteSet: string;
          consistent: string;
          mixedAnimated: string;
          fusionPaletteSwaps: string;
          playerGender: string;
          typeHints: string;
          masterVolume: string;
          bgmVolume: string;
          fieldVolume: string;
          seVolume: string;
          uiVolume: string;
          musicPreference: string;
          mixed: string;
          gamepadPleasePlug: string;
          delete: string;
          keyboardPleasePress: string;
          reset: string;
          requireReload: string;
          action: string;
          back: string;
          pressToBind: string;
          pressButton: string;
          buttonUp: string;
          buttonDown: string;
          buttonLeft: string;
          buttonRight: string;
          buttonAction: string;
          buttonMenu: string;
          buttonSubmit: string;
          buttonCancel: string;
          buttonStats: string;
          buttonCycleForm: string;
          buttonCycleShiny: string;
          buttonCycleGender: string;
          buttonCycleAbility: string;
          buttonCycleNature: string;
          buttonCycleVariant: string;
          buttonSpeedUp: string;
          buttonSlowDown: string;
          alt: string;
          mute: string;
          controller: string;
          gamepadSupport: string;
          showBgmBar: string;
          moveTouchControls: string;
          shopOverlayOpacity: string;
          shopCursorTarget: string;
          rewards: string;
          reroll: string;
          shop: string;
          checkTeam: string;
      };
      splashMessages: {
          battlesWon: string;
          joinTheDiscord: string;
          infiniteLevels: string;
          everythingStacks: string;
          optionalSaveScumming: string;
          biomes: string;
          openSource: string;
          playWithSpeed: string;
          liveBugTesting: string;
          heavyInfluence: string;
          pokemonRiskAndPokemonRain: string;
          nowWithMoreSalt: string;
          infiniteFusionAtHome: string;
          brokenEggMoves: string;
          magnificent: string;
          mubstitute: string;
          thatsCrazy: string;
          oranceJuice: string;
          questionableBalancing: string;
          coolShaders: string;
          aiFree: string;
          suddenDifficultySpikes: string;
          basedOnAnUnfinishedFlashGame: string;
          moreAddictiveThanIntended: string;
          mostlyConsistentSeeds: string;
          achievementPointsDontDoAnything: string;
          youDoNotStartAtLevel: string;
          dontTalkAboutTheManaphyEggIncident: string;
          alsoTryPokengine: string;
          alsoTryEmeraldRogue: string;
          alsoTryRadicalRed: string;
          eeveeExpo: string;
          ynoproject: string;
          breedersInSpace: string;
      };
      starterSelectUiHandler: {
          confirmStartTeam: string;
          confirmExit: string;
          invalidParty: string;
          gen1: string;
          gen2: string;
          gen3: string;
          gen4: string;
          gen5: string;
          gen6: string;
          gen7: string;
          gen8: string;
          gen9: string;
          growthRate: string;
          ability: string;
          passive: string;
          nature: string;
          eggMoves: string;
          addToParty: string;
          removeFromParty: string;
          toggleIVs: string;
          manageMoves: string;
          manageNature: string;
          addToFavorites: string;
          removeFromFavorites: string;
          useCandies: string;
          selectNature: string;
          selectMoveSwapOut: string;
          selectMoveSwapWith: string;
          unlockPassive: string;
          reduceCost: string;
          sameSpeciesEgg: string;
          cycleShiny: string;
          cycleForm: string;
          cycleGender: string;
          cycleAbility: string;
          cycleNature: string;
          cycleVariant: string;
          goFilter: string;
          enablePassive: string;
          disablePassive: string;
          locked: string;
          disabled: string;
          uncaught: string;
      };
      statusEffect: {
          none: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          poison: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          toxic: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          paralysis: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          sleep: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          freeze: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          burn: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
      };
      terrain: {
          misty: string;
          mistyStartMessage: string;
          mistyClearMessage: string;
          mistyBlockMessage: string;
          electric: string;
          electricStartMessage: string;
          electricClearMessage: string;
          grassy: string;
          grassyStartMessage: string;
          grassyClearMessage: string;
          psychic: string;
          psychicStartMessage: string;
          psychicClearMessage: string;
          defaultBlockMessage: string;
      };
      titles: {
          elite_four: string;
          elite_four_female: string;
          gym_leader: string;
          gym_leader_female: string;
          gym_leader_double: string;
          champion: string;
          champion_female: string;
          champion_double: string;
          rival: string;
          professor: string;
          frontier_brain: string;
          rocket_boss: string;
          magma_boss: string;
          aqua_boss: string;
          galactic_boss: string;
          plasma_boss: string;
          flare_boss: string;
          aether_boss: string;
          skull_boss: string;
          macro_boss: string;
          rocket_admin: string;
          rocket_admin_female: string;
          magma_admin: string;
          magma_admin_female: string;
          aqua_admin: string;
          aqua_admin_female: string;
          galactic_commander: string;
          galactic_commander_female: string;
          plasma_sage: string;
          plasma_admin: string;
          flare_admin: string;
          flare_admin_female: string;
          aether_admin: string;
          skull_admin: string;
          macro_admin: string;
      };
      trainerClasses: {
          ace_trainer: string;
          ace_trainer_female: string;
          ace_duo: string;
          artist: string;
          artist_female: string;
          backers: string;
          backpacker: string;
          backpacker_female: string;
          backpackers: string;
          baker: string;
          battle_girl: string;
          beauty: string;
          beginners: string;
          biker: string;
          black_belt: string;
          breeder: string;
          breeder_female: string;
          breeders: string;
          clerk: string;
          clerk_female: string;
          colleagues: string;
          crush_kin: string;
          cyclist: string;
          cyclist_female: string;
          cyclists: string;
          dancer: string;
          dancer_female: string;
          depot_agent: string;
          doctor: string;
          doctor_female: string;
          firebreather: string;
          fisherman: string;
          fisherman_female: string;
          gentleman: string;
          guitarist: string;
          guitarist_female: string;
          harlequin: string;
          hiker: string;
          hooligans: string;
          hoopster: string;
          infielder: string;
          janitor: string;
          lady: string;
          lass: string;
          linebacker: string;
          maid: string;
          madame: string;
          medical_team: string;
          musician: string;
          hex_maniac: string;
          nurse: string;
          nursery_aide: string;
          officer: string;
          parasol_lady: string;
          pilot: string;
          pokéfan: string;
          pokéfan_female: string;
          pokéfan_family: string;
          preschooler: string;
          preschooler_female: string;
          preschoolers: string;
          psychic: string;
          psychic_female: string;
          psychics: string;
          pokémon_ranger: string;
          pokémon_ranger_female: string;
          pokémon_rangers: string;
          ranger: string;
          restaurant_staff: string;
          rich: string;
          rich_female: string;
          rich_boy: string;
          rich_couple: string;
          rich_kid: string;
          rich_kid_female: string;
          rich_kids: string;
          roughneck: string;
          sailor: string;
          scientist: string;
          scientist_female: string;
          scientists: string;
          smasher: string;
          snow_worker: string;
          snow_worker_female: string;
          striker: string;
          school_kid: string;
          school_kid_female: string;
          school_kids: string;
          swimmer: string;
          swimmer_female: string;
          swimmers: string;
          twins: string;
          veteran: string;
          veteran_female: string;
          veteran_duo: string;
          waiter: string;
          waitress: string;
          worker: string;
          worker_female: string;
          workers: string;
          youngster: string;
          rocket_grunt: string;
          rocket_grunts: string;
          rocket_grunt_female: string;
          magma_grunt: string;
          magma_grunt_female: string;
          magma_grunts: string;
          aqua_grunt: string;
          aqua_grunt_female: string;
          aqua_grunts: string;
          galactic_grunt: string;
          galactic_grunt_female: string;
          galactic_grunts: string;
          plasma_grunt: string;
          plasma_grunt_female: string;
          plasma_grunts: string;
          flare_grunt: string;
          flare_grunt_female: string;
          flare_grunts: string;
          aether_grunt: string;
          aether_grunt_female: string;
          aether_grunts: string;
          skull_grunt: string;
          skull_grunt_female: string;
          skull_grunts: string;
          macro_grunt: string;
          macro_grunt_female: string;
          macro_grunts: string;
      };
      trainerNames: {
          brock: string;
          misty: string;
          lt_surge: string;
          erika: string;
          janine: string;
          sabrina: string;
          blaine: string;
          giovanni: string;
          falkner: string;
          bugsy: string;
          whitney: string;
          morty: string;
          chuck: string;
          jasmine: string;
          pryce: string;
          clair: string;
          roxanne: string;
          brawly: string;
          wattson: string;
          flannery: string;
          norman: string;
          winona: string;
          tate: string;
          liza: string;
          juan: string;
          roark: string;
          gardenia: string;
          maylene: string;
          crasher_wake: string;
          fantina: string;
          byron: string;
          candice: string;
          volkner: string;
          cilan: string;
          chili: string;
          cress: string;
          cheren: string;
          lenora: string;
          roxie: string;
          burgh: string;
          elesa: string;
          clay: string;
          skyla: string;
          brycen: string;
          drayden: string;
          marlon: string;
          viola: string;
          grant: string;
          korrina: string;
          ramos: string;
          clemont: string;
          valerie: string;
          olympia: string;
          wulfric: string;
          milo: string;
          nessa: string;
          kabu: string;
          bea: string;
          allister: string;
          opal: string;
          bede: string;
          gordie: string;
          melony: string;
          piers: string;
          marnie: string;
          raihan: string;
          katy: string;
          brassius: string;
          iono: string;
          kofu: string;
          larry: string;
          ryme: string;
          tulip: string;
          grusha: string;
          lorelei: string;
          bruno: string;
          agatha: string;
          lance: string;
          will: string;
          koga: string;
          karen: string;
          sidney: string;
          phoebe: string;
          glacia: string;
          drake: string;
          aaron: string;
          bertha: string;
          flint: string;
          lucian: string;
          shauntal: string;
          marshal: string;
          grimsley: string;
          caitlin: string;
          malva: string;
          siebold: string;
          wikstrom: string;
          drasna: string;
          hala: string;
          molayne: string;
          olivia: string;
          acerola: string;
          kahili: string;
          rika: string;
          poppy: string;
          hassel: string;
          crispin: string;
          amarys: string;
          lacey: string;
          drayton: string;
          blue: string;
          red: string;
          steven: string;
          wallace: string;
          cynthia: string;
          alder: string;
          iris: string;
          diantha: string;
          hau: string;
          geeta: string;
          nemona: string;
          kieran: string;
          leon: string;
          rival: string;
          rival_female: string;
          archer: string;
          ariana: string;
          proton: string;
          petrel: string;
          tabitha: string;
          courtney: string;
          shelly: string;
          matt: string;
          mars: string;
          jupiter: string;
          saturn: string;
          zinzolin: string;
          rood: string;
          xerosic: string;
          bryony: string;
          faba: string;
          plumeria: string;
          oleana: string;
          maxie: string;
          archie: string;
          cyrus: string;
          ghetsis: string;
          lysandre: string;
          lusamine: string;
          guzma: string;
          rose: string;
          blue_red_double: string;
          red_blue_double: string;
          tate_liza_double: string;
          liza_tate_double: string;
          steven_wallace_double: string;
          wallace_steven_double: string;
          alder_iris_double: string;
          iris_alder_double: string;
          marnie_piers_double: string;
          piers_marnie_double: string;
      };
      tutorial: {
          intro: string;
          accessMenu: string;
          menu: string;
          starterSelect: string;
          pokerus: string;
          statChange: string;
          selectItem: string;
          eggGacha: string;
      };
      voucher: {
          vouchers: string;
          eggVoucher: string;
          eggVoucherPlus: string;
          eggVoucherPremium: string;
          eggVoucherGold: string;
          locked: string;
          defeatTrainer: string;
      };
      weather: {
          sunnyStartMessage: string;
          sunnyLapseMessage: string;
          sunnyClearMessage: string;
          rainStartMessage: string;
          rainLapseMessage: string;
          rainClearMessage: string;
          sandstormStartMessage: string;
          sandstormLapseMessage: string;
          sandstormClearMessage: string;
          sandstormDamageMessage: string;
          hailStartMessage: string;
          hailLapseMessage: string;
          hailClearMessage: string;
          hailDamageMessage: string;
          snowStartMessage: string;
          snowLapseMessage: string;
          snowClearMessage: string;
          fogStartMessage: string;
          fogLapseMessage: string;
          fogClearMessage: string;
          heavyRainStartMessage: string;
          heavyRainLapseMessage: string;
          heavyRainClearMessage: string;
          harshSunStartMessage: string;
          harshSunLapseMessage: string;
          harshSunClearMessage: string;
          strongWindsStartMessage: string;
          strongWindsLapseMessage: string;
          strongWindsEffectMessage: string;
          strongWindsClearMessage: string;
      };
      partyUiHandler: {
          SEND_OUT: string;
          SUMMARY: string;
          CANCEL: string;
          RELEASE: string;
          APPLY: string;
          TEACH: string;
          SPLICE: string;
          UNSPLICE: string;
          ACTIVATE: string;
          DEACTIVATE: string;
          TRANSFER: string;
          ALL: string;
          PASS_BATON: string;
          UNPAUSE_EVOLUTION: string;
          REVIVE: string;
          RENAME: string;
          choosePokemon: string;
          doWhatWithThisPokemon: string;
          noEnergy: string;
          hasEnergy: string;
          cantBeUsed: string;
          tooManyItems: string;
          anyEffect: string;
          unpausedEvolutions: string;
          unspliceConfirmation: string;
          wasReverted: string;
          releaseConfirmation: string;
          releaseInBattle: string;
          selectAMove: string;
          changeQuantity: string;
          selectAnotherPokemonToSplice: string;
          cancel: string;
          able: string;
          notAble: string;
          learned: string;
          goodbye: string;
          byebye: string;
          farewell: string;
          soLong: string;
          thisIsWhereWePart: string;
          illMissYou: string;
          illNeverForgetYou: string;
          untilWeMeetAgain: string;
          sayonara: string;
          smellYaLater: string;
      };
      modifierSelectUiHandler: {
          transfer: string;
          reroll: string;
          lockRarities: string;
          checkTeam: string;
          transferDesc: string;
          rerollDesc: string;
          lockRaritiesDesc: string;
          checkTeamDesc: string;
          rerollCost: string;
          itemCost: string;
      };
      moveTriggers: {
          hitWithRecoil: string;
          cutHpPowerUpMove: string;
          absorbedElectricity: string;
          switchedStatChanges: string;
          switchedTwoStatChanges: string;
          switchedStat: string;
          sharedGuard: string;
          sharedPower: string;
          goingAllOutForAttack: string;
          regainedHealth: string;
          keptGoingAndCrashed: string;
          fled: string;
          cannotBeSwitchedOut: string;
          swappedAbilitiesWithTarget: string;
          coinsScatteredEverywhere: string;
          attackedByItem: string;
          whippedUpAWhirlwind: string;
          flewUpHigh: string;
          tookInSunlight: string;
          dugAHole: string;
          loweredItsHead: string;
          isGlowing: string;
          bellChimed: string;
          foresawAnAttack: string;
          isTighteningFocus: string;
          hidUnderwater: string;
          soothingAromaWaftedThroughArea: string;
          sprangUp: string;
          choseDoomDesireAsDestiny: string;
          vanishedInstantly: string;
          tookTargetIntoSky: string;
          becameCloakedInFreezingLight: string;
          becameCloakedInFreezingAir: string;
          isChargingPower: string;
          burnedItselfOut: string;
          startedHeatingUpBeak: string;
          setUpShellTrap: string;
          isOverflowingWithSpacePower: string;
          usedUpAllElectricity: string;
          stoleItem: string;
          incineratedItem: string;
          knockedOffItem: string;
          tookMoveAttack: string;
          cutOwnHpAndMaximizedStat: string;
          copiedStatChanges: string;
          magnitudeMessage: string;
          tookAimAtTarget: string;
          transformedIntoType: string;
          copiedMove: string;
          sketchedMove: string;
          acquiredAbility: string;
          copiedTargetAbility: string;
          transformedIntoTarget: string;
          tryingToTakeFoeDown: string;
          addType: string;
          cannotUseMove: string;
          healHp: string;
          sacrificialFullRestore: string;
          invertStats: string;
          resetStats: string;
          statEliminated: string;
          faintCountdown: string;
          copyType: string;
          suppressAbilities: string;
          revivalBlessing: string;
          swapArenaTags: string;
          exposedMove: string;
          safeguard: string;
      };
      runHistory: {
          victory: string;
          defeatedWild: string;
          defeatedTrainer: string;
          defeatedTrainerDouble: string;
          defeatedRival: string;
          defeated: string;
          defeatedWild_female: string;
          defeatedTrainer_female: string;
          defeatedTrainerDouble_female: string;
          defeatedRival_female: string;
          defeated_female: string;
          luck: string;
          score: string;
          mode: string;
          challengeRules: string;
          challengeMonoGen1: string;
          challengeMonoGen2: string;
          challengeMonoGen3: string;
          challengeMonoGen4: string;
          challengeMonoGen5: string;
          challengeMonoGen6: string;
          challengeMonoGen7: string;
          challengeMonoGen8: string;
          challengeMonoGen9: string;
          playerItems: string;
          personalBest: string;
          SPDshortened: string;
          runInfo: string;
          money: string;
          runLength: string;
          viewHeldItems: string;
          hallofFameText: string;
          hallofFameText_female: string;
          viewHallOfFame: string;
          viewEndingSplash: string;
      };
  };
  
}

declare namespace PokeRogue.locales.it {
  export declare const itConfig: {
      ability: {
          stench: {
              name: string;
              description: string;
          };
          drizzle: {
              name: string;
              description: string;
          };
          speedBoost: {
              name: string;
              description: string;
          };
          battleArmor: {
              name: string;
              description: string;
          };
          sturdy: {
              name: string;
              description: string;
          };
          damp: {
              name: string;
              description: string;
          };
          limber: {
              name: string;
              description: string;
          };
          sandVeil: {
              name: string;
              description: string;
          };
          static: {
              name: string;
              description: string;
          };
          voltAbsorb: {
              name: string;
              description: string;
          };
          waterAbsorb: {
              name: string;
              description: string;
          };
          oblivious: {
              name: string;
              description: string;
          };
          cloudNine: {
              name: string;
              description: string;
          };
          compoundEyes: {
              name: string;
              description: string;
          };
          insomnia: {
              name: string;
              description: string;
          };
          colorChange: {
              name: string;
              description: string;
          };
          immunity: {
              name: string;
              description: string;
          };
          flashFire: {
              name: string;
              description: string;
          };
          shieldDust: {
              name: string;
              description: string;
          };
          ownTempo: {
              name: string;
              description: string;
          };
          suctionCups: {
              name: string;
              description: string;
          };
          intimidate: {
              name: string;
              description: string;
          };
          shadowTag: {
              name: string;
              description: string;
          };
          roughSkin: {
              name: string;
              description: string;
          };
          wonderGuard: {
              name: string;
              description: string;
          };
          levitate: {
              name: string;
              description: string;
          };
          effectSpore: {
              name: string;
              description: string;
          };
          synchronize: {
              name: string;
              description: string;
          };
          clearBody: {
              name: string;
              description: string;
          };
          naturalCure: {
              name: string;
              description: string;
          };
          lightningRod: {
              name: string;
              description: string;
          };
          sereneGrace: {
              name: string;
              description: string;
          };
          swiftSwim: {
              name: string;
              description: string;
          };
          chlorophyll: {
              name: string;
              description: string;
          };
          illuminate: {
              name: string;
              description: string;
          };
          trace: {
              name: string;
              description: string;
          };
          hugePower: {
              name: string;
              description: string;
          };
          poisonPoint: {
              name: string;
              description: string;
          };
          innerFocus: {
              name: string;
              description: string;
          };
          magmaArmor: {
              name: string;
              description: string;
          };
          waterVeil: {
              name: string;
              description: string;
          };
          magnetPull: {
              name: string;
              description: string;
          };
          soundproof: {
              name: string;
              description: string;
          };
          rainDish: {
              name: string;
              description: string;
          };
          sandStream: {
              name: string;
              description: string;
          };
          pressure: {
              name: string;
              description: string;
          };
          thickFat: {
              name: string;
              description: string;
          };
          earlyBird: {
              name: string;
              description: string;
          };
          flameBody: {
              name: string;
              description: string;
          };
          runAway: {
              name: string;
              description: string;
          };
          keenEye: {
              name: string;
              description: string;
          };
          hyperCutter: {
              name: string;
              description: string;
          };
          pickup: {
              name: string;
              description: string;
          };
          truant: {
              name: string;
              description: string;
          };
          hustle: {
              name: string;
              description: string;
          };
          cuteCharm: {
              name: string;
              description: string;
          };
          plus: {
              name: string;
              description: string;
          };
          minus: {
              name: string;
              description: string;
          };
          forecast: {
              name: string;
              description: string;
          };
          stickyHold: {
              name: string;
              description: string;
          };
          shedSkin: {
              name: string;
              description: string;
          };
          guts: {
              name: string;
              description: string;
          };
          marvelScale: {
              name: string;
              description: string;
          };
          liquidOoze: {
              name: string;
              description: string;
          };
          overgrow: {
              name: string;
              description: string;
          };
          blaze: {
              name: string;
              description: string;
          };
          torrent: {
              name: string;
              description: string;
          };
          swarm: {
              name: string;
              description: string;
          };
          rockHead: {
              name: string;
              description: string;
          };
          drought: {
              name: string;
              description: string;
          };
          arenaTrap: {
              name: string;
              description: string;
          };
          vitalSpirit: {
              name: string;
              description: string;
          };
          whiteSmoke: {
              name: string;
              description: string;
          };
          purePower: {
              name: string;
              description: string;
          };
          shellArmor: {
              name: string;
              description: string;
          };
          airLock: {
              name: string;
              description: string;
          };
          tangledFeet: {
              name: string;
              description: string;
          };
          motorDrive: {
              name: string;
              description: string;
          };
          rivalry: {
              name: string;
              description: string;
          };
          steadfast: {
              name: string;
              description: string;
          };
          snowCloak: {
              name: string;
              description: string;
          };
          gluttony: {
              name: string;
              description: string;
          };
          angerPoint: {
              name: string;
              description: string;
          };
          unburden: {
              name: string;
              description: string;
          };
          heatproof: {
              name: string;
              description: string;
          };
          simple: {
              name: string;
              description: string;
          };
          drySkin: {
              name: string;
              description: string;
          };
          download: {
              name: string;
              description: string;
          };
          ironFist: {
              name: string;
              description: string;
          };
          poisonHeal: {
              name: string;
              description: string;
          };
          adaptability: {
              name: string;
              description: string;
          };
          skillLink: {
              name: string;
              description: string;
          };
          hydration: {
              name: string;
              description: string;
          };
          solarPower: {
              name: string;
              description: string;
          };
          quickFeet: {
              name: string;
              description: string;
          };
          normalize: {
              name: string;
              description: string;
          };
          sniper: {
              name: string;
              description: string;
          };
          magicGuard: {
              name: string;
              description: string;
          };
          noGuard: {
              name: string;
              description: string;
          };
          stall: {
              name: string;
              description: string;
          };
          technician: {
              name: string;
              description: string;
          };
          leafGuard: {
              name: string;
              description: string;
          };
          klutz: {
              name: string;
              description: string;
          };
          moldBreaker: {
              name: string;
              description: string;
          };
          superLuck: {
              name: string;
              description: string;
          };
          aftermath: {
              name: string;
              description: string;
          };
          anticipation: {
              name: string;
              description: string;
          };
          forewarn: {
              name: string;
              description: string;
          };
          unaware: {
              name: string;
              description: string;
          };
          tintedLens: {
              name: string;
              description: string;
          };
          filter: {
              name: string;
              description: string;
          };
          slowStart: {
              name: string;
              description: string;
          };
          scrappy: {
              name: string;
              description: string;
          };
          stormDrain: {
              name: string;
              description: string;
          };
          iceBody: {
              name: string;
              description: string;
          };
          solidRock: {
              name: string;
              description: string;
          };
          snowWarning: {
              name: string;
              description: string;
          };
          honeyGather: {
              name: string;
              description: string;
          };
          frisk: {
              name: string;
              description: string;
          };
          reckless: {
              name: string;
              description: string;
          };
          multitype: {
              name: string;
              description: string;
          };
          flowerGift: {
              name: string;
              description: string;
          };
          badDreams: {
              name: string;
              description: string;
          };
          pickpocket: {
              name: string;
              description: string;
          };
          sheerForce: {
              name: string;
              description: string;
          };
          contrary: {
              name: string;
              description: string;
          };
          unnerve: {
              name: string;
              description: string;
          };
          defiant: {
              name: string;
              description: string;
          };
          defeatist: {
              name: string;
              description: string;
          };
          cursedBody: {
              name: string;
              description: string;
          };
          healer: {
              name: string;
              description: string;
          };
          friendGuard: {
              name: string;
              description: string;
          };
          weakArmor: {
              name: string;
              description: string;
          };
          heavyMetal: {
              name: string;
              description: string;
          };
          lightMetal: {
              name: string;
              description: string;
          };
          multiscale: {
              name: string;
              description: string;
          };
          toxicBoost: {
              name: string;
              description: string;
          };
          flareBoost: {
              name: string;
              description: string;
          };
          harvest: {
              name: string;
              description: string;
          };
          telepathy: {
              name: string;
              description: string;
          };
          moody: {
              name: string;
              description: string;
          };
          overcoat: {
              name: string;
              description: string;
          };
          poisonTouch: {
              name: string;
              description: string;
          };
          regenerator: {
              name: string;
              description: string;
          };
          bigPecks: {
              name: string;
              description: string;
          };
          sandRush: {
              name: string;
              description: string;
          };
          wonderSkin: {
              name: string;
              description: string;
          };
          analytic: {
              name: string;
              description: string;
          };
          illusion: {
              name: string;
              description: string;
          };
          imposter: {
              name: string;
              description: string;
          };
          infiltrator: {
              name: string;
              description: string;
          };
          mummy: {
              name: string;
              description: string;
          };
          moxie: {
              name: string;
              description: string;
          };
          justified: {
              name: string;
              description: string;
          };
          rattled: {
              name: string;
              description: string;
          };
          magicBounce: {
              name: string;
              description: string;
          };
          sapSipper: {
              name: string;
              description: string;
          };
          prankster: {
              name: string;
              description: string;
          };
          sandForce: {
              name: string;
              description: string;
          };
          ironBarbs: {
              name: string;
              description: string;
          };
          zenMode: {
              name: string;
              description: string;
          };
          victoryStar: {
              name: string;
              description: string;
          };
          turboblaze: {
              name: string;
              description: string;
          };
          teravolt: {
              name: string;
              description: string;
          };
          aromaVeil: {
              name: string;
              description: string;
          };
          flowerVeil: {
              name: string;
              description: string;
          };
          cheekPouch: {
              name: string;
              description: string;
          };
          protean: {
              name: string;
              description: string;
          };
          furCoat: {
              name: string;
              description: string;
          };
          magician: {
              name: string;
              description: string;
          };
          bulletproof: {
              name: string;
              description: string;
          };
          competitive: {
              name: string;
              description: string;
          };
          strongJaw: {
              name: string;
              description: string;
          };
          refrigerate: {
              name: string;
              description: string;
          };
          sweetVeil: {
              name: string;
              description: string;
          };
          stanceChange: {
              name: string;
              description: string;
          };
          galeWings: {
              name: string;
              description: string;
          };
          megaLauncher: {
              name: string;
              description: string;
          };
          grassPelt: {
              name: string;
              description: string;
          };
          symbiosis: {
              name: string;
              description: string;
          };
          toughClaws: {
              name: string;
              description: string;
          };
          pixilate: {
              name: string;
              description: string;
          };
          gooey: {
              name: string;
              description: string;
          };
          aerilate: {
              name: string;
              description: string;
          };
          parentalBond: {
              name: string;
              description: string;
          };
          darkAura: {
              name: string;
              description: string;
          };
          fairyAura: {
              name: string;
              description: string;
          };
          auraBreak: {
              name: string;
              description: string;
          };
          primordialSea: {
              name: string;
              description: string;
          };
          desolateLand: {
              name: string;
              description: string;
          };
          deltaStream: {
              name: string;
              description: string;
          };
          stamina: {
              name: string;
              description: string;
          };
          wimpOut: {
              name: string;
              description: string;
          };
          emergencyExit: {
              name: string;
              description: string;
          };
          waterCompaction: {
              name: string;
              description: string;
          };
          merciless: {
              name: string;
              description: string;
          };
          shieldsDown: {
              name: string;
              description: string;
          };
          stakeout: {
              name: string;
              description: string;
          };
          waterBubble: {
              name: string;
              description: string;
          };
          steelworker: {
              name: string;
              description: string;
          };
          berserk: {
              name: string;
              description: string;
          };
          slushRush: {
              name: string;
              description: string;
          };
          longReach: {
              name: string;
              description: string;
          };
          liquidVoice: {
              name: string;
              description: string;
          };
          triage: {
              name: string;
              description: string;
          };
          galvanize: {
              name: string;
              description: string;
          };
          surgeSurfer: {
              name: string;
              description: string;
          };
          schooling: {
              name: string;
              description: string;
          };
          disguise: {
              name: string;
              description: string;
          };
          battleBond: {
              name: string;
              description: string;
          };
          powerConstruct: {
              name: string;
              description: string;
          };
          corrosion: {
              name: string;
              description: string;
          };
          comatose: {
              name: string;
              description: string;
          };
          queenlyMajesty: {
              name: string;
              description: string;
          };
          innardsOut: {
              name: string;
              description: string;
          };
          dancer: {
              name: string;
              description: string;
          };
          battery: {
              name: string;
              description: string;
          };
          fluffy: {
              name: string;
              description: string;
          };
          dazzling: {
              name: string;
              description: string;
          };
          soulHeart: {
              name: string;
              description: string;
          };
          tanglingHair: {
              name: string;
              description: string;
          };
          receiver: {
              name: string;
              description: string;
          };
          powerOfAlchemy: {
              name: string;
              description: string;
          };
          beastBoost: {
              name: string;
              description: string;
          };
          rksSystem: {
              name: string;
              description: string;
          };
          electricSurge: {
              name: string;
              description: string;
          };
          psychicSurge: {
              name: string;
              description: string;
          };
          mistySurge: {
              name: string;
              description: string;
          };
          grassySurge: {
              name: string;
              description: string;
          };
          fullMetalBody: {
              name: string;
              description: string;
          };
          shadowShield: {
              name: string;
              description: string;
          };
          prismArmor: {
              name: string;
              description: string;
          };
          neuroforce: {
              name: string;
              description: string;
          };
          intrepidSword: {
              name: string;
              description: string;
          };
          dauntlessShield: {
              name: string;
              description: string;
          };
          libero: {
              name: string;
              description: string;
          };
          ballFetch: {
              name: string;
              description: string;
          };
          cottonDown: {
              name: string;
              description: string;
          };
          propellerTail: {
              name: string;
              description: string;
          };
          mirrorArmor: {
              name: string;
              description: string;
          };
          gulpMissile: {
              name: string;
              description: string;
          };
          stalwart: {
              name: string;
              description: string;
          };
          steamEngine: {
              name: string;
              description: string;
          };
          punkRock: {
              name: string;
              description: string;
          };
          sandSpit: {
              name: string;
              description: string;
          };
          iceScales: {
              name: string;
              description: string;
          };
          ripen: {
              name: string;
              description: string;
          };
          iceFace: {
              name: string;
              description: string;
          };
          powerSpot: {
              name: string;
              description: string;
          };
          mimicry: {
              name: string;
              description: string;
          };
          screenCleaner: {
              name: string;
              description: string;
          };
          steelySpirit: {
              name: string;
              description: string;
          };
          perishBody: {
              name: string;
              description: string;
          };
          wanderingSpirit: {
              name: string;
              description: string;
          };
          gorillaTactics: {
              name: string;
              description: string;
          };
          neutralizingGas: {
              name: string;
              description: string;
          };
          pastelVeil: {
              name: string;
              description: string;
          };
          hungerSwitch: {
              name: string;
              description: string;
          };
          quickDraw: {
              name: string;
              description: string;
          };
          unseenFist: {
              name: string;
              description: string;
          };
          curiousMedicine: {
              name: string;
              description: string;
          };
          transistor: {
              name: string;
              description: string;
          };
          dragonsMaw: {
              name: string;
              description: string;
          };
          chillingNeigh: {
              name: string;
              description: string;
          };
          grimNeigh: {
              name: string;
              description: string;
          };
          asOneGlastrier: {
              name: string;
              description: string;
          };
          asOneSpectrier: {
              name: string;
              description: string;
          };
          lingeringAroma: {
              name: string;
              description: string;
          };
          seedSower: {
              name: string;
              description: string;
          };
          thermalExchange: {
              name: string;
              description: string;
          };
          angerShell: {
              name: string;
              description: string;
          };
          purifyingSalt: {
              name: string;
              description: string;
          };
          wellBakedBody: {
              name: string;
              description: string;
          };
          windRider: {
              name: string;
              description: string;
          };
          guardDog: {
              name: string;
              description: string;
          };
          rockyPayload: {
              name: string;
              description: string;
          };
          windPower: {
              name: string;
              description: string;
          };
          zeroToHero: {
              name: string;
              description: string;
          };
          commander: {
              name: string;
              description: string;
          };
          electromorphosis: {
              name: string;
              description: string;
          };
          protosynthesis: {
              name: string;
              description: string;
          };
          quarkDrive: {
              name: string;
              description: string;
          };
          goodAsGold: {
              name: string;
              description: string;
          };
          vesselOfRuin: {
              name: string;
              description: string;
          };
          swordOfRuin: {
              name: string;
              description: string;
          };
          tabletsOfRuin: {
              name: string;
              description: string;
          };
          beadsOfRuin: {
              name: string;
              description: string;
          };
          orichalcumPulse: {
              name: string;
              description: string;
          };
          hadronEngine: {
              name: string;
              description: string;
          };
          opportunist: {
              name: string;
              description: string;
          };
          cudChew: {
              name: string;
              description: string;
          };
          sharpness: {
              name: string;
              description: string;
          };
          supremeOverlord: {
              name: string;
              description: string;
          };
          costar: {
              name: string;
              description: string;
          };
          toxicDebris: {
              name: string;
              description: string;
          };
          armorTail: {
              name: string;
              description: string;
          };
          earthEater: {
              name: string;
              description: string;
          };
          myceliumMight: {
              name: string;
              description: string;
          };
          mindsEye: {
              name: string;
              description: string;
          };
          supersweetSyrup: {
              name: string;
              description: string;
          };
          hospitality: {
              name: string;
              description: string;
          };
          toxicChain: {
              name: string;
              description: string;
          };
          embodyAspectTeal: {
              name: string;
              description: string;
          };
          embodyAspectWellspring: {
              name: string;
              description: string;
          };
          embodyAspectHearthflame: {
              name: string;
              description: string;
          };
          embodyAspectCornerstone: {
              name: string;
              description: string;
          };
          teraShift: {
              name: string;
              description: string;
          };
          teraShell: {
              name: string;
              description: string;
          };
          teraformZero: {
              name: string;
              description: string;
          };
          poisonPuppeteer: {
              name: string;
              description: string;
          };
      };
      abilityTriggers: {
          blockRecoilDamage: string;
          badDreams: string;
          costar: string;
          iceFaceAvoidedDamage: string;
          perishBody: string;
          poisonHeal: string;
          trace: string;
          windPowerCharged: string;
          quickDraw: string;
          blockItemTheft: string;
          typeImmunityHeal: string;
          nonSuperEffectiveImmunity: string;
          disguiseAvoidedDamage: string;
          moveImmunity: string;
          reverseDrain: string;
          postDefendTypeChange: string;
          postDefendContactDamage: string;
          postDefendAbilitySwap: string;
          postDefendAbilityGive: string;
          postDefendMoveDisable: string;
          pokemonTypeChange: string;
          postAttackStealHeldItem: string;
          postDefendStealHeldItem: string;
          copyFaintedAllyAbility: string;
          intimidateImmunity: string;
          postSummonAllyHeal: string;
          postSummonClearAllyStats: string;
          postSummonTransform: string;
          protectStat: string;
          statusEffectImmunityWithName: string;
          statusEffectImmunity: string;
          battlerTagImmunity: string;
          forewarn: string;
          frisk: string;
          postWeatherLapseHeal: string;
          postWeatherLapseDamage: string;
          postTurnLootCreateEatenBerry: string;
          postTurnHeal: string;
          fetchBall: string;
          healFromBerryUse: string;
          arenaTrap: string;
          postBattleLoot: string;
          postFaintContactDamage: string;
          postFaintHpDamage: string;
          postSummonPressure: string;
          weatherEffectDisappeared: string;
          postSummonMoldBreaker: string;
          postSummonAnticipation: string;
          postSummonTurboblaze: string;
          postSummonTeravolt: string;
          postSummonDarkAura: string;
          postSummonFairyAura: string;
          postSummonNeutralizingGas: string;
          postSummonAsOneGlastrier: string;
          postSummonAsOneSpectrier: string;
          postSummonVesselOfRuin: string;
          postSummonSwordOfRuin: string;
          postSummonTabletsOfRuin: string;
          postSummonBeadsOfRuin: string;
          preventBerryUse: string;
      };
      arenaFlyout: {
          activeBattleEffects: string;
          player: string;
          neutral: string;
          enemy: string;
          sunny: string;
          rain: string;
          sandstorm: string;
          hail: string;
          snow: string;
          fog: string;
          heavyRain: string;
          harshSun: string;
          strongWinds: string;
          misty: string;
          electric: string;
          grassy: string;
          psychic: string;
          mudSport: string;
          waterSport: string;
          spikes: string;
          toxicSpikes: string;
          mist: string;
          futureSight: string;
          doomDesire: string;
          wish: string;
          stealthRock: string;
          stickyWeb: string;
          trickRoom: string;
          gravity: string;
          reflect: string;
          lightScreen: string;
          auroraVeil: string;
          quickGuard: string;
          wideGuard: string;
          matBlock: string;
          craftyShield: string;
          tailwind: string;
          happyHour: string;
          safeguard: string;
      };
      arenaTag: {
          safeguardOnAdd: string;
          safeguardOnAddPlayer: string;
          safeguardOnAddEnemy: string;
          safeguardOnRemove: string;
          safeguardOnRemovePlayer: string;
          safeguardOnRemoveEnemy: string;
      };
      battle: {
          bossAppeared: string;
          trainerAppeared: string;
          trainerAppearedDouble: string;
          trainerSendOut: string;
          singleWildAppeared: string;
          multiWildAppeared: string;
          playerComeBack: string;
          trainerComeBack: string;
          playerGo: string;
          trainerGo: string;
          switchQuestion: string;
          trainerDefeated: string;
          moneyWon: string;
          moneyPickedUp: string;
          pokemonCaught: string;
          addedAsAStarter: string;
          partyFull: string;
          pokemon: string;
          sendOutPokemon: string;
          hitResultCriticalHit: string;
          hitResultSuperEffective: string;
          hitResultNotVeryEffective: string;
          hitResultNoEffect: string;
          hitResultImmune: string;
          hitResultOneHitKO: string;
          attackFailed: string;
          attackMissed: string;
          attackHitsCount: string;
          rewardGain: string;
          expGain: string;
          levelUp: string;
          learnMove: string;
          learnMovePrompt: string;
          learnMoveLimitReached: string;
          learnMoveReplaceQuestion: string;
          learnMoveStopTeaching: string;
          learnMoveNotLearned: string;
          learnMoveForgetQuestion: string;
          learnMoveForgetSuccess: string;
          countdownPoof: string;
          learnMoveAnd: string;
          levelCapUp: string;
          moveNotImplemented: string;
          moveNoPP: string;
          moveDisabled: string;
          noPokeballForce: string;
          noPokeballTrainer: string;
          noPokeballMulti: string;
          noPokeballStrong: string;
          noEscapeForce: string;
          noEscapeTrainer: string;
          noEscapePokemon: string;
          runAwaySuccess: string;
          runAwayCannotEscape: string;
          escapeVerbSwitch: string;
          escapeVerbFlee: string;
          notDisabled: string;
          turnEndHpRestore: string;
          hpIsFull: string;
          skipItemQuestion: string;
          itemStackFull: string;
          eggHatching: string;
          ivScannerUseQuestion: string;
          stealEatBerry: string;
          ppHealBerry: string;
          hpHealBerry: string;
          wildPokemonWithAffix: string;
          foePokemonWithAffix: string;
          useMove: string;
          drainMessage: string;
          regainHealth: string;
          fainted: string;
          statsAnd: string;
          stats: string;
          statRose_one: string;
          statRose_other: string;
          statSharplyRose_one: string;
          statSharplyRose_other: string;
          statRoseDrastically_one: string;
          statRoseDrastically_other: string;
          statWontGoAnyHigher_one: string;
          statWontGoAnyHigher_other: string;
          statFell_one: string;
          statFell_other: string;
          statHarshlyFell_one: string;
          statHarshlyFell_other: string;
          statSeverelyFell_one: string;
          statSeverelyFell_other: string;
          statWontGoAnyLower_one: string;
          statWontGoAnyLower_other: string;
          transformedIntoType: string;
          retryBattle: string;
          unlockedSomething: string;
          congratulations: string;
          beatModeFirstTime: string;
          ppReduced: string;
      };
      battleScene: {
          moneyOwned: string;
      };
      battleInfo: {
          generation: string;
      };
      battleMessageUiHandler: {
          ivBest: string;
          ivFantastic: string;
          ivVeryGood: string;
          ivPrettyGood: string;
          ivDecent: string;
          ivNoGood: string;
      };
      battlePokemonForm: {
          mega: string;
          "mega-x": string;
          "mega-y": string;
          primal: string;
          gigantamax: string;
          eternamax: string;
          megaChange: string;
          gigantamaxChange: string;
          eternamaxChange: string;
          revertChange: string;
          formChange: string;
          disguiseChange: string;
      };
      battlerTags: {
          trappedDesc: string;
          flinchedDesc: string;
          confusedDesc: string;
          infatuatedDesc: string;
          seedDesc: string;
          nightmareDesc: string;
          ingrainDesc: string;
          drowsyDesc: string;
          rechargingLapse: string;
          trappedOnAdd: string;
          trappedOnRemove: string;
          flinchedLapse: string;
          confusedOnAdd: string;
          confusedOnRemove: string;
          confusedOnOverlap: string;
          confusedLapse: string;
          confusedLapseHurtItself: string;
          destinyBondLapseIsBoss: string;
          destinyBondLapse: string;
          infatuatedOnAdd: string;
          infatuatedOnOverlap: string;
          infatuatedLapse: string;
          infatuatedLapseImmobilize: string;
          infatuatedOnRemove: string;
          seededOnAdd: string;
          seededLapse: string;
          seededLapseShed: string;
          nightmareOnAdd: string;
          nightmareOnOverlap: string;
          nightmareLapse: string;
          encoreOnAdd: string;
          encoreOnRemove: string;
          helpingHandOnAdd: string;
          ingrainLapse: string;
          ingrainOnTrap: string;
          aquaRingOnAdd: string;
          aquaRingLapse: string;
          drowsyOnAdd: string;
          damagingTrapLapse: string;
          bindOnTrap: string;
          wrapOnTrap: string;
          vortexOnTrap: string;
          clampOnTrap: string;
          sandTombOnTrap: string;
          magmaStormOnTrap: string;
          snapTrapOnTrap: string;
          thunderCageOnTrap: string;
          infestationOnTrap: string;
          protectedOnAdd: string;
          protectedLapse: string;
          enduringOnAdd: string;
          enduringLapse: string;
          sturdyLapse: string;
          perishSongLapse: string;
          centerOfAttentionOnAdd: string;
          truantLapse: string;
          slowStartOnAdd: string;
          slowStartOnRemove: string;
          highestStatBoostOnAdd: string;
          highestStatBoostOnRemove: string;
          magnetRisenOnAdd: string;
          magnetRisenOnRemove: string;
          critBoostOnAdd: string;
          critBoostOnRemove: string;
          saltCuredOnAdd: string;
          saltCuredLapse: string;
          cursedOnAdd: string;
          cursedLapse: string;
          stockpilingOnAdd: string;
      };
      berry: {
          SITRUS: {
              name: string;
              effect: string;
          };
          LUM: {
              name: string;
              effect: string;
          };
          ENIGMA: {
              name: string;
              effect: string;
          };
          LIECHI: {
              name: string;
              effect: string;
          };
          GANLON: {
              name: string;
              effect: string;
          };
          PETAYA: {
              name: string;
              effect: string;
          };
          APICOT: {
              name: string;
              effect: string;
          };
          SALAC: {
              name: string;
              effect: string;
          };
          LANSAT: {
              name: string;
              effect: string;
          };
          STARF: {
              name: string;
              effect: string;
          };
          LEPPA: {
              name: string;
              effect: string;
          };
      };
      bgmName: {};
      biome: {
          unknownLocation: string;
          TOWN: string;
          PLAINS: string;
          GRASS: string;
          TALL_GRASS: string;
          METROPOLIS: string;
          FOREST: string;
          SEA: string;
          SWAMP: string;
          BEACH: string;
          LAKE: string;
          SEABED: string;
          MOUNTAIN: string;
          BADLANDS: string;
          CAVE: string;
          DESERT: string;
          ICE_CAVE: string;
          MEADOW: string;
          POWER_PLANT: string;
          VOLCANO: string;
          GRAVEYARD: string;
          DOJO: string;
          FACTORY: string;
          RUINS: string;
          WASTELAND: string;
          ABYSS: string;
          SPACE: string;
          CONSTRUCTION_SITE: string;
          JUNGLE: string;
          FAIRY_CAVE: string;
          TEMPLE: string;
          SLUM: string;
          SNOWY_FOREST: string;
          ISLAND: string;
          LABORATORY: string;
          END: string;
      };
      challenges: {
          title: string;
          illegalEvolution: string;
          singleGeneration: {
              name: string;
              desc: string;
              desc_default: string;
              gen_1: string;
              gen_2: string;
              gen_3: string;
              gen_4: string;
              gen_5: string;
              gen_6: string;
              gen_7: string;
              gen_8: string;
              gen_9: string;
          };
          singleType: {
              name: string;
              desc: string;
              desc_default: string;
          };
          freshStart: {
              name: string;
              desc: string;
              "value.0": string;
              "value.1": string;
          };
      };
      commandUiHandler: {
          fight: string;
          ball: string;
          pokemon: string;
          run: string;
          actionMessage: string;
      };
      common: {
          start: string;
          luckIndicator: string;
          shinyOnHover: string;
          commonShiny: string;
          rareShiny: string;
          epicShiny: string;
      };
      achv: {
          Achievements: {
              name: string;
          };
          Locked: {
              name: string;
          };
          MoneyAchv: {
              description: string;
          };
          "10K_MONEY": {
              name: string;
          };
          "100K_MONEY": {
              name: string;
          };
          "1M_MONEY": {
              name: string;
          };
          "10M_MONEY": {
              name: string;
          };
          DamageAchv: {
              description: string;
          };
          "250_DMG": {
              name: string;
          };
          "1000_DMG": {
              name: string;
          };
          "2500_DMG": {
              name: string;
          };
          "10000_DMG": {
              name: string;
          };
          HealAchv: {
              description: string;
          };
          "250_HEAL": {
              name: string;
          };
          "1000_HEAL": {
              name: string;
          };
          "2500_HEAL": {
              name: string;
          };
          "10000_HEAL": {
              name: string;
          };
          LevelAchv: {
              description: string;
          };
          LV_100: {
              name: string;
          };
          LV_250: {
              name: string;
          };
          LV_1000: {
              name: string;
          };
          RibbonAchv: {
              description: string;
          };
          "10_RIBBONS": {
              name: string;
          };
          "25_RIBBONS": {
              name: string;
          };
          "50_RIBBONS": {
              name: string;
          };
          "75_RIBBONS": {
              name: string;
          };
          "100_RIBBONS": {
              name: string;
          };
          TRANSFER_MAX_STAT_STAGE: {
              name: string;
              description: string;
          };
          MAX_FRIENDSHIP: {
              name: string;
              description: string;
          };
          MEGA_EVOLVE: {
              name: string;
              description: string;
          };
          GIGANTAMAX: {
              name: string;
              description: string;
          };
          TERASTALLIZE: {
              name: string;
              description: string;
          };
          STELLAR_TERASTALLIZE: {
              name: string;
              description: string;
          };
          SPLICE: {
              name: string;
              description: string;
          };
          MINI_BLACK_HOLE: {
              name: string;
              description: string;
          };
          CATCH_MYTHICAL: {
              name: string;
              description: string;
          };
          CATCH_SUB_LEGENDARY: {
              name: string;
              description: string;
          };
          CATCH_LEGENDARY: {
              name: string;
              description: string;
          };
          SEE_SHINY: {
              name: string;
              description: string;
          };
          SHINY_PARTY: {
              name: string;
              description: string;
          };
          HATCH_MYTHICAL: {
              name: string;
              description: string;
          };
          HATCH_SUB_LEGENDARY: {
              name: string;
              description: string;
          };
          HATCH_LEGENDARY: {
              name: string;
              description: string;
          };
          HATCH_SHINY: {
              name: string;
              description: string;
          };
          HIDDEN_ABILITY: {
              name: string;
              description: string;
          };
          PERFECT_IVS: {
              name: string;
              description: string;
          };
          CLASSIC_VICTORY: {
              name: string;
              description: string;
          };
          UNEVOLVED_CLASSIC_VICTORY: {
              name: string;
              description: string;
          };
          MONO_GEN_ONE: {
              name: string;
              description: string;
          };
          MONO_GEN_TWO: {
              name: string;
              description: string;
          };
          MONO_GEN_THREE: {
              name: string;
              description: string;
          };
          MONO_GEN_FOUR: {
              name: string;
              description: string;
          };
          MONO_GEN_FIVE: {
              name: string;
              description: string;
          };
          MONO_GEN_SIX: {
              name: string;
              description: string;
          };
          MONO_GEN_SEVEN: {
              name: string;
              description: string;
          };
          MONO_GEN_EIGHT: {
              name: string;
              description: string;
          };
          MONO_GEN_NINE: {
              name: string;
              description: string;
          };
          MonoType: {
              description: string;
          };
          MONO_NORMAL: {
              name: string;
          };
          MONO_FIGHTING: {
              name: string;
          };
          MONO_FLYING: {
              name: string;
          };
          MONO_POISON: {
              name: string;
          };
          MONO_GROUND: {
              name: string;
          };
          MONO_ROCK: {
              name: string;
          };
          MONO_BUG: {
              name: string;
          };
          MONO_GHOST: {
              name: string;
          };
          MONO_STEEL: {
              name: string;
          };
          MONO_FIRE: {
              name: string;
          };
          MONO_WATER: {
              name: string;
          };
          MONO_GRASS: {
              name: string;
          };
          MONO_ELECTRIC: {
              name: string;
          };
          MONO_PSYCHIC: {
              name: string;
          };
          MONO_ICE: {
              name: string;
          };
          MONO_DRAGON: {
              name: string;
          };
          MONO_DARK: {
              name: string;
          };
          MONO_FAIRY: {
              name: string;
          };
          FRESH_START: {
              name: string;
              description: string;
          };
      };
      dialogue: {};
      battleSpecDialogue: {};
      miscDialogue: {};
      doubleBattleDialogue: {};
      egg: {
          egg: string;
          defaultTier: string;
          greatTier: string;
          ultraTier: string;
          masterTier: string;
          hatchWavesMessageSoon: string;
          hatchWavesMessageClose: string;
          hatchWavesMessageNotClose: string;
          hatchWavesMessageLongTime: string;
          gachaTypeLegendary: string;
          gachaTypeMove: string;
          gachaTypeShiny: string;
          selectMachine: string;
          notEnoughVouchers: string;
          tooManyEggs: string;
          pull: string;
          pulls: string;
          sameSpeciesEgg: string;
          hatchFromTheEgg: string;
          eggMoveUnlock: string;
          rareEggMoveUnlock: string;
          moveUPGacha: string;
          shinyUPGacha: string;
          legendaryUPGacha: string;
      };
      fightUiHandler: {
          pp: string;
          power: string;
          accuracy: string;
          abilityFlyInText: string;
          passive: string;
      };
      filterBar: {
          genFilter: string;
          typeFilter: string;
          caughtFilter: string;
          unlocksFilter: string;
          miscFilter: string;
          sortFilter: string;
          all: string;
          normal: string;
          uncaught: string;
          passive: string;
          passiveUnlocked: string;
          passiveLocked: string;
          passiveUnlockable: string;
          costReduction: string;
          costReductionUnlocked: string;
          costReductionLocked: string;
          costReductionUnlockable: string;
          favorite: string;
          isFavorite: string;
          notFavorite: string;
          ribbon: string;
          hasWon: string;
          hasNotWon: string;
          hiddenAbility: string;
          hasHiddenAbility: string;
          noHiddenAbility: string;
          egg: string;
          eggPurchasable: string;
          pokerus: string;
          hasPokerus: string;
          noPokerus: string;
          sortByNumber: string;
          sortByCost: string;
          sortByCandies: string;
          sortByIVs: string;
          sortByName: string;
      };
      gameMode: {
          classic: string;
          endless: string;
          endlessSpliced: string;
          dailyRun: string;
          unknown: string;
          challenge: string;
      };
      gameStatsUiHandler: {
          stats: string;
          playTime: string;
          totalBattles: string;
          starters: string;
          shinyStarters: string;
          speciesSeen: string;
          speciesCaught: string;
          ribbonsOwned: string;
          classicRuns: string;
          classicWins: string;
          dailyRunAttempts: string;
          dailyRunWins: string;
          endlessRuns: string;
          highestWaveEndless: string;
          highestMoney: string;
          highestDamage: string;
          highestHPHealed: string;
          pokemonEncountered: string;
          pokemonDefeated: string;
          pokemonCaught: string;
          eggsHatched: string;
          subLegendsSeen: string;
          subLegendsCaught: string;
          subLegendsHatched: string;
          legendsSeen: string;
          legendsCaught: string;
          legendsHatched: string;
          mythicalsSeen: string;
          mythicalsCaught: string;
          mythicalsHatched: string;
          shiniesSeen: string;
          shiniesCaught: string;
          shiniesHatched: string;
          pokemonFused: string;
          trainersDefeated: string;
          eggsPulled: string;
          rareEggsPulled: string;
          epicEggsPulled: string;
          legendaryEggsPulled: string;
          manaphyEggsPulled: string;
      };
      growth: {
          Erratic: string;
          Fast: string;
          Medium_Fast: string;
          Medium_Slow: string;
          Slow: string;
          Fluctuating: string;
      };
      menu: {
          cancel: string;
          continue: string;
          newGame: string;
          loadGame: string;
          settings: string;
          dailyRun: string;
          selectGameMode: string;
          logInOrCreateAccount: string;
          username: string;
          password: string;
          login: string;
          orUse: string;
          register: string;
          emptyUsername: string;
          invalidLoginUsername: string;
          invalidRegisterUsername: string;
          invalidLoginPassword: string;
          invalidRegisterPassword: string;
          usernameAlreadyUsed: string;
          accountNonExistent: string;
          unmatchingPassword: string;
          passwordNotMatchingConfirmPassword: string;
          confirmPassword: string;
          registrationAgeWarning: string;
          backToLogin: string;
          failedToLoadSaveData: string;
          sessionSuccess: string;
          failedToLoadSession: string;
          boyOrGirl: string;
          dailyRankings: string;
          weeklyRankings: string;
          noRankings: string;
          positionIcon: string;
          usernameScoreboard: string;
          score: string;
          wave: string;
          loading: string;
          loadingAsset: string;
          playersOnline: string;
          evolving: string;
          stoppedEvolving: string;
          pauseEvolutionsQuestion: string;
          evolutionsPaused: string;
          evolutionDone: string;
          yes: string;
          no: string;
          disclaimer: string;
          disclaimerDescription: string;
          choosePokemon: string;
          renamePokemon: string;
          rename: string;
          nickname: string;
          errorServerDown: string;
      };
      menuUiHandler: {
          GAME_SETTINGS: string;
          ACHIEVEMENTS: string;
          STATS: string;
          RUN_HISTORY: string;
          EGG_LIST: string;
          EGG_GACHA: string;
          MANAGE_DATA: string;
          COMMUNITY: string;
          SAVE_AND_QUIT: string;
          LOG_OUT: string;
          slot: string;
          importSession: string;
          importSlotSelect: string;
          exportSession: string;
          exportSlotSelect: string;
          importRunHistory: string;
          exportRunHistory: string;
          importData: string;
          exportData: string;
          consentPreferences: string;
          linkDiscord: string;
          unlinkDiscord: string;
          linkGoogle: string;
          unlinkGoogle: string;
          cancel: string;
          losingProgressionWarning: string;
          noEggs: string;
      };
      modifier: {
          surviveDamageApply: string;
          turnHealApply: string;
          hitHealApply: string;
          pokemonInstantReviveApply: string;
          resetNegativeStatStageApply: string;
          moneyInterestApply: string;
          turnHeldItemTransferApply: string;
          contactHeldItemTransferApply: string;
          enemyTurnHealApply: string;
          bypassSpeedChanceApply: string;
      };
      modifierType: {
          ModifierType: {
              AddPokeballModifierType: {
                  name: string;
                  description: string;
              };
              AddVoucherModifierType: {
                  name: string;
                  description: string;
              };
              PokemonHeldItemModifierType: {
                  extra: {
                      inoperable: string;
                      tooMany: string;
                  };
              };
              PokemonHpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                      fullyWithStatus: string;
                  };
              };
              PokemonReviveModifierType: {
                  description: string;
              };
              PokemonStatusHealModifierType: {
                  description: string;
              };
              PokemonPpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                  };
              };
              PokemonAllMovePpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                  };
              };
              PokemonPpUpModifierType: {
                  description: string;
              };
              PokemonNatureChangeModifierType: {
                  name: string;
                  description: string;
              };
              DoubleBattleChanceBoosterModifierType: {
                  description: string;
              };
              TempStatStageBoosterModifierType: {
                  description: string;
              };
              AttackTypeBoosterModifierType: {
                  description: string;
              };
              PokemonLevelIncrementModifierType: {
                  description: string;
              };
              AllPokemonLevelIncrementModifierType: {
                  description: string;
              };
              BaseStatBoosterModifierType: {
                  description: string;
              };
              AllPokemonFullHpRestoreModifierType: {
                  description: string;
              };
              AllPokemonFullReviveModifierType: {
                  description: string;
              };
              MoneyRewardModifierType: {
                  description: string;
                  extra: {
                      small: string;
                      moderate: string;
                      large: string;
                  };
              };
              ExpBoosterModifierType: {
                  description: string;
              };
              PokemonExpBoosterModifierType: {
                  description: string;
              };
              PokemonFriendshipBoosterModifierType: {
                  description: string;
              };
              PokemonMoveAccuracyBoosterModifierType: {
                  description: string;
              };
              PokemonMultiHitModifierType: {
                  description: string;
              };
              TmModifierType: {
                  name: string;
                  description: string;
              };
              TmModifierTypeWithInfo: {
                  name: string;
                  description: string;
              };
              EvolutionItemModifierType: {
                  description: string;
              };
              FormChangeItemModifierType: {
                  description: string;
              };
              FusePokemonModifierType: {
                  description: string;
              };
              TerastallizeModifierType: {
                  name: string;
                  description: string;
              };
              ContactHeldItemTransferChanceModifierType: {
                  description: string;
              };
              TurnHeldItemTransferModifierType: {
                  description: string;
              };
              EnemyAttackStatusEffectChanceModifierType: {
                  description: string;
              };
              EnemyEndureChanceModifierType: {
                  description: string;
              };
              RARE_CANDY: {
                  name: string;
              };
              RARER_CANDY: {
                  name: string;
              };
              MEGA_BRACELET: {
                  name: string;
                  description: string;
              };
              DYNAMAX_BAND: {
                  name: string;
                  description: string;
              };
              TERA_ORB: {
                  name: string;
                  description: string;
              };
              MAP: {
                  name: string;
                  description: string;
              };
              POTION: {
                  name: string;
              };
              SUPER_POTION: {
                  name: string;
              };
              HYPER_POTION: {
                  name: string;
              };
              MAX_POTION: {
                  name: string;
              };
              FULL_RESTORE: {
                  name: string;
              };
              REVIVE: {
                  name: string;
              };
              MAX_REVIVE: {
                  name: string;
              };
              FULL_HEAL: {
                  name: string;
              };
              SACRED_ASH: {
                  name: string;
              };
              REVIVER_SEED: {
                  name: string;
                  description: string;
              };
              WHITE_HERB: {
                  name: string;
                  description: string;
              };
              ETHER: {
                  name: string;
              };
              MAX_ETHER: {
                  name: string;
              };
              ELIXIR: {
                  name: string;
              };
              MAX_ELIXIR: {
                  name: string;
              };
              PP_UP: {
                  name: string;
              };
              PP_MAX: {
                  name: string;
              };
              LURE: {
                  name: string;
              };
              SUPER_LURE: {
                  name: string;
              };
              MAX_LURE: {
                  name: string;
              };
              MEMORY_MUSHROOM: {
                  name: string;
                  description: string;
              };
              EXP_SHARE: {
                  name: string;
                  description: string;
              };
              EXP_BALANCE: {
                  name: string;
                  description: string;
              };
              OVAL_CHARM: {
                  name: string;
                  description: string;
              };
              EXP_CHARM: {
                  name: string;
              };
              SUPER_EXP_CHARM: {
                  name: string;
              };
              GOLDEN_EXP_CHARM: {
                  name: string;
              };
              LUCKY_EGG: {
                  name: string;
              };
              GOLDEN_EGG: {
                  name: string;
              };
              SOOTHE_BELL: {
                  name: string;
              };
              SCOPE_LENS: {
                  name: string;
                  description: string;
              };
              DIRE_HIT: {
                  name: string;
                  extra: {
                      raises: string;
                  };
              };
              LEEK: {
                  name: string;
                  description: string;
              };
              EVIOLITE: {
                  name: string;
                  description: string;
              };
              SOUL_DEW: {
                  name: string;
                  description: string;
              };
              NUGGET: {
                  name: string;
              };
              BIG_NUGGET: {
                  name: string;
              };
              RELIC_GOLD: {
                  name: string;
              };
              AMULET_COIN: {
                  name: string;
                  description: string;
              };
              GOLDEN_PUNCH: {
                  name: string;
                  description: string;
              };
              COIN_CASE: {
                  name: string;
                  description: string;
              };
              LOCK_CAPSULE: {
                  name: string;
                  description: string;
              };
              GRIP_CLAW: {
                  name: string;
              };
              WIDE_LENS: {
                  name: string;
              };
              MULTI_LENS: {
                  name: string;
              };
              HEALING_CHARM: {
                  name: string;
                  description: string;
              };
              CANDY_JAR: {
                  name: string;
                  description: string;
              };
              BERRY_POUCH: {
                  name: string;
                  description: string;
              };
              FOCUS_BAND: {
                  name: string;
                  description: string;
              };
              QUICK_CLAW: {
                  name: string;
                  description: string;
              };
              KINGS_ROCK: {
                  name: string;
                  description: string;
              };
              LEFTOVERS: {
                  name: string;
                  description: string;
              };
              SHELL_BELL: {
                  name: string;
                  description: string;
              };
              TOXIC_ORB: {
                  name: string;
                  description: string;
              };
              FLAME_ORB: {
                  name: string;
                  description: string;
              };
              BATON: {
                  name: string;
                  description: string;
              };
              SHINY_CHARM: {
                  name: string;
                  description: string;
              };
              ABILITY_CHARM: {
                  name: string;
                  description: string;
              };
              IV_SCANNER: {
                  name: string;
                  description: string;
              };
              DNA_SPLICERS: {
                  name: string;
              };
              MINI_BLACK_HOLE: {
                  name: string;
              };
              GOLDEN_POKEBALL: {
                  name: string;
                  description: string;
              };
              ENEMY_DAMAGE_BOOSTER: {
                  name: string;
                  description: string;
              };
              ENEMY_DAMAGE_REDUCTION: {
                  name: string;
                  description: string;
              };
              ENEMY_HEAL: {
                  name: string;
                  description: string;
              };
              ENEMY_ATTACK_POISON_CHANCE: {
                  name: string;
              };
              ENEMY_ATTACK_PARALYZE_CHANCE: {
                  name: string;
              };
              ENEMY_ATTACK_BURN_CHANCE: {
                  name: string;
              };
              ENEMY_STATUS_EFFECT_HEAL_CHANCE: {
                  name: string;
                  description: string;
              };
              ENEMY_ENDURE_CHANCE: {
                  name: string;
              };
              ENEMY_FUSED_CHANCE: {
                  name: string;
                  description: string;
              };
          };
          SpeciesBoosterItem: {
              LIGHT_BALL: {
                  name: string;
                  description: string;
              };
              THICK_CLUB: {
                  name: string;
                  description: string;
              };
              METAL_POWDER: {
                  name: string;
                  description: string;
              };
              QUICK_POWDER: {
                  name: string;
                  description: string;
              };
          };
          TempStatStageBoosterItem: {
              x_attack: string;
              x_defense: string;
              x_sp_atk: string;
              x_sp_def: string;
              x_speed: string;
              x_accuracy: string;
          };
          AttackTypeBoosterItem: {
              silk_scarf: string;
              black_belt: string;
              sharp_beak: string;
              poison_barb: string;
              soft_sand: string;
              hard_stone: string;
              silver_powder: string;
              spell_tag: string;
              metal_coat: string;
              charcoal: string;
              mystic_water: string;
              miracle_seed: string;
              magnet: string;
              twisted_spoon: string;
              never_melt_ice: string;
              dragon_fang: string;
              black_glasses: string;
              fairy_feather: string;
          };
          BaseStatBoosterItem: {
              hp_up: string;
              protein: string;
              iron: string;
              calcium: string;
              zinc: string;
              carbos: string;
          };
          EvolutionItem: {
              NONE: string;
              LINKING_CORD: string;
              SUN_STONE: string;
              MOON_STONE: string;
              LEAF_STONE: string;
              FIRE_STONE: string;
              WATER_STONE: string;
              THUNDER_STONE: string;
              ICE_STONE: string;
              DUSK_STONE: string;
              DAWN_STONE: string;
              SHINY_STONE: string;
              CRACKED_POT: string;
              SWEET_APPLE: string;
              TART_APPLE: string;
              STRAWBERRY_SWEET: string;
              UNREMARKABLE_TEACUP: string;
              CHIPPED_POT: string;
              BLACK_AUGURITE: string;
              GALARICA_CUFF: string;
              GALARICA_WREATH: string;
              PEAT_BLOCK: string;
              AUSPICIOUS_ARMOR: string;
              MALICIOUS_ARMOR: string;
              MASTERPIECE_TEACUP: string;
              METAL_ALLOY: string;
              SCROLL_OF_DARKNESS: string;
              SCROLL_OF_WATERS: string;
              SYRUPY_APPLE: string;
          };
          FormChangeItem: {
              NONE: string;
              ABOMASITE: string;
              ABSOLITE: string;
              AERODACTYLITE: string;
              AGGRONITE: string;
              ALAKAZITE: string;
              ALTARIANITE: string;
              AMPHAROSITE: string;
              AUDINITE: string;
              BANETTITE: string;
              BEEDRILLITE: string;
              BLASTOISINITE: string;
              BLAZIKENITE: string;
              CAMERUPTITE: string;
              CHARIZARDITE_X: string;
              CHARIZARDITE_Y: string;
              DIANCITE: string;
              GALLADITE: string;
              GARCHOMPITE: string;
              GARDEVOIRITE: string;
              GENGARITE: string;
              GLALITITE: string;
              GYARADOSITE: string;
              HERACRONITE: string;
              HOUNDOOMINITE: string;
              KANGASKHANITE: string;
              LATIASITE: string;
              LATIOSITE: string;
              LOPUNNITE: string;
              LUCARIONITE: string;
              MANECTITE: string;
              MAWILITE: string;
              MEDICHAMITE: string;
              METAGROSSITE: string;
              MEWTWONITE_X: string;
              MEWTWONITE_Y: string;
              PIDGEOTITE: string;
              PINSIRITE: string;
              RAYQUAZITE: string;
              SABLENITE: string;
              SALAMENCITE: string;
              SCEPTILITE: string;
              SCIZORITE: string;
              SHARPEDONITE: string;
              SLOWBRONITE: string;
              STEELIXITE: string;
              SWAMPERTITE: string;
              TYRANITARITE: string;
              VENUSAURITE: string;
              BLUE_ORB: string;
              RED_ORB: string;
              SHARP_METEORITE: string;
              HARD_METEORITE: string;
              SMOOTH_METEORITE: string;
              ADAMANT_CRYSTAL: string;
              LUSTROUS_GLOBE: string;
              GRISEOUS_CORE: string;
              REVEAL_GLASS: string;
              GRACIDEA: string;
              MAX_MUSHROOMS: string;
              DARK_STONE: string;
              LIGHT_STONE: string;
              PRISON_BOTTLE: string;
              N_LUNARIZER: string;
              N_SOLARIZER: string;
              RUSTED_SWORD: string;
              RUSTED_SHIELD: string;
              ICY_REINS_OF_UNITY: string;
              SHADOW_REINS_OF_UNITY: string;
              WELLSPRING_MASK: string;
              HEARTHFLAME_MASK: string;
              CORNERSTONE_MASK: string;
              SHOCK_DRIVE: string;
              BURN_DRIVE: string;
              CHILL_DRIVE: string;
              DOUSE_DRIVE: string;
              ULTRANECROZIUM_Z: string;
              FIST_PLATE: string;
              SKY_PLATE: string;
              TOXIC_PLATE: string;
              EARTH_PLATE: string;
              STONE_PLATE: string;
              INSECT_PLATE: string;
              SPOOKY_PLATE: string;
              IRON_PLATE: string;
              FLAME_PLATE: string;
              SPLASH_PLATE: string;
              MEADOW_PLATE: string;
              ZAP_PLATE: string;
              MIND_PLATE: string;
              ICICLE_PLATE: string;
              DRACO_PLATE: string;
              DREAD_PLATE: string;
              PIXIE_PLATE: string;
              BLANK_PLATE: string;
              LEGEND_PLATE: string;
              FIGHTING_MEMORY: string;
              FLYING_MEMORY: string;
              POISON_MEMORY: string;
              GROUND_MEMORY: string;
              ROCK_MEMORY: string;
              BUG_MEMORY: string;
              GHOST_MEMORY: string;
              STEEL_MEMORY: string;
              FIRE_MEMORY: string;
              WATER_MEMORY: string;
              GRASS_MEMORY: string;
              ELECTRIC_MEMORY: string;
              PSYCHIC_MEMORY: string;
              ICE_MEMORY: string;
              DRAGON_MEMORY: string;
              DARK_MEMORY: string;
              FAIRY_MEMORY: string;
              NORMAL_MEMORY: string;
          };
      };
      move: {
          pound: {
              name: string;
              effect: string;
          };
          karateChop: {
              name: string;
              effect: string;
          };
          doubleSlap: {
              name: string;
              effect: string;
          };
          cometPunch: {
              name: string;
              effect: string;
          };
          megaPunch: {
              name: string;
              effect: string;
          };
          payDay: {
              name: string;
              effect: string;
          };
          firePunch: {
              name: string;
              effect: string;
          };
          icePunch: {
              name: string;
              effect: string;
          };
          thunderPunch: {
              name: string;
              effect: string;
          };
          scratch: {
              name: string;
              effect: string;
          };
          viseGrip: {
              name: string;
              effect: string;
          };
          guillotine: {
              name: string;
              effect: string;
          };
          razorWind: {
              name: string;
              effect: string;
          };
          swordsDance: {
              name: string;
              effect: string;
          };
          cut: {
              name: string;
              effect: string;
          };
          gust: {
              name: string;
              effect: string;
          };
          wingAttack: {
              name: string;
              effect: string;
          };
          whirlwind: {
              name: string;
              effect: string;
          };
          fly: {
              name: string;
              effect: string;
          };
          bind: {
              name: string;
              effect: string;
          };
          slam: {
              name: string;
              effect: string;
          };
          vineWhip: {
              name: string;
              effect: string;
          };
          stomp: {
              name: string;
              effect: string;
          };
          doubleKick: {
              name: string;
              effect: string;
          };
          megaKick: {
              name: string;
              effect: string;
          };
          jumpKick: {
              name: string;
              effect: string;
          };
          rollingKick: {
              name: string;
              effect: string;
          };
          sandAttack: {
              name: string;
              effect: string;
          };
          headbutt: {
              name: string;
              effect: string;
          };
          hornAttack: {
              name: string;
              effect: string;
          };
          furyAttack: {
              name: string;
              effect: string;
          };
          hornDrill: {
              name: string;
              effect: string;
          };
          tackle: {
              name: string;
              effect: string;
          };
          bodySlam: {
              name: string;
              effect: string;
          };
          wrap: {
              name: string;
              effect: string;
          };
          takeDown: {
              name: string;
              effect: string;
          };
          thrash: {
              name: string;
              effect: string;
          };
          doubleEdge: {
              name: string;
              effect: string;
          };
          tailWhip: {
              name: string;
              effect: string;
          };
          poisonSting: {
              name: string;
              effect: string;
          };
          twineedle: {
              name: string;
              effect: string;
          };
          pinMissile: {
              name: string;
              effect: string;
          };
          leer: {
              name: string;
              effect: string;
          };
          bite: {
              name: string;
              effect: string;
          };
          growl: {
              name: string;
              effect: string;
          };
          roar: {
              name: string;
              effect: string;
          };
          sing: {
              name: string;
              effect: string;
          };
          supersonic: {
              name: string;
              effect: string;
          };
          sonicBoom: {
              name: string;
              effect: string;
          };
          disable: {
              name: string;
              effect: string;
          };
          acid: {
              name: string;
              effect: string;
          };
          ember: {
              name: string;
              effect: string;
          };
          flamethrower: {
              name: string;
              effect: string;
          };
          mist: {
              name: string;
              effect: string;
          };
          waterGun: {
              name: string;
              effect: string;
          };
          hydroPump: {
              name: string;
              effect: string;
          };
          surf: {
              name: string;
              effect: string;
          };
          iceBeam: {
              name: string;
              effect: string;
          };
          blizzard: {
              name: string;
              effect: string;
          };
          psybeam: {
              name: string;
              effect: string;
          };
          bubbleBeam: {
              name: string;
              effect: string;
          };
          auroraBeam: {
              name: string;
              effect: string;
          };
          hyperBeam: {
              name: string;
              effect: string;
          };
          peck: {
              name: string;
              effect: string;
          };
          drillPeck: {
              name: string;
              effect: string;
          };
          submission: {
              name: string;
              effect: string;
          };
          lowKick: {
              name: string;
              effect: string;
          };
          counter: {
              name: string;
              effect: string;
          };
          seismicToss: {
              name: string;
              effect: string;
          };
          strength: {
              name: string;
              effect: string;
          };
          absorb: {
              name: string;
              effect: string;
          };
          megaDrain: {
              name: string;
              effect: string;
          };
          leechSeed: {
              name: string;
              effect: string;
          };
          growth: {
              name: string;
              effect: string;
          };
          razorLeaf: {
              name: string;
              effect: string;
          };
          solarBeam: {
              name: string;
              effect: string;
          };
          poisonPowder: {
              name: string;
              effect: string;
          };
          stunSpore: {
              name: string;
              effect: string;
          };
          sleepPowder: {
              name: string;
              effect: string;
          };
          petalDance: {
              name: string;
              effect: string;
          };
          stringShot: {
              name: string;
              effect: string;
          };
          dragonRage: {
              name: string;
              effect: string;
          };
          fireSpin: {
              name: string;
              effect: string;
          };
          thunderShock: {
              name: string;
              effect: string;
          };
          thunderbolt: {
              name: string;
              effect: string;
          };
          thunderWave: {
              name: string;
              effect: string;
          };
          thunder: {
              name: string;
              effect: string;
          };
          rockThrow: {
              name: string;
              effect: string;
          };
          earthquake: {
              name: string;
              effect: string;
          };
          fissure: {
              name: string;
              effect: string;
          };
          dig: {
              name: string;
              effect: string;
          };
          toxic: {
              name: string;
              effect: string;
          };
          confusion: {
              name: string;
              effect: string;
          };
          psychic: {
              name: string;
              effect: string;
          };
          hypnosis: {
              name: string;
              effect: string;
          };
          meditate: {
              name: string;
              effect: string;
          };
          agility: {
              name: string;
              effect: string;
          };
          quickAttack: {
              name: string;
              effect: string;
          };
          rage: {
              name: string;
              effect: string;
          };
          teleport: {
              name: string;
              effect: string;
          };
          nightShade: {
              name: string;
              effect: string;
          };
          mimic: {
              name: string;
              effect: string;
          };
          screech: {
              name: string;
              effect: string;
          };
          doubleTeam: {
              name: string;
              effect: string;
          };
          recover: {
              name: string;
              effect: string;
          };
          harden: {
              name: string;
              effect: string;
          };
          minimize: {
              name: string;
              effect: string;
          };
          smokescreen: {
              name: string;
              effect: string;
          };
          confuseRay: {
              name: string;
              effect: string;
          };
          withdraw: {
              name: string;
              effect: string;
          };
          defenseCurl: {
              name: string;
              effect: string;
          };
          barrier: {
              name: string;
              effect: string;
          };
          lightScreen: {
              name: string;
              effect: string;
          };
          haze: {
              name: string;
              effect: string;
          };
          reflect: {
              name: string;
              effect: string;
          };
          focusEnergy: {
              name: string;
              effect: string;
          };
          bide: {
              name: string;
              effect: string;
          };
          metronome: {
              name: string;
              effect: string;
          };
          mirrorMove: {
              name: string;
              effect: string;
          };
          selfDestruct: {
              name: string;
              effect: string;
          };
          eggBomb: {
              name: string;
              effect: string;
          };
          lick: {
              name: string;
              effect: string;
          };
          smog: {
              name: string;
              effect: string;
          };
          sludge: {
              name: string;
              effect: string;
          };
          boneClub: {
              name: string;
              effect: string;
          };
          fireBlast: {
              name: string;
              effect: string;
          };
          waterfall: {
              name: string;
              effect: string;
          };
          clamp: {
              name: string;
              effect: string;
          };
          swift: {
              name: string;
              effect: string;
          };
          skullBash: {
              name: string;
              effect: string;
          };
          spikeCannon: {
              name: string;
              effect: string;
          };
          constrict: {
              name: string;
              effect: string;
          };
          amnesia: {
              name: string;
              effect: string;
          };
          kinesis: {
              name: string;
              effect: string;
          };
          softBoiled: {
              name: string;
              effect: string;
          };
          highJumpKick: {
              name: string;
              effect: string;
          };
          glare: {
              name: string;
              effect: string;
          };
          dreamEater: {
              name: string;
              effect: string;
          };
          poisonGas: {
              name: string;
              effect: string;
          };
          barrage: {
              name: string;
              effect: string;
          };
          leechLife: {
              name: string;
              effect: string;
          };
          lovelyKiss: {
              name: string;
              effect: string;
          };
          skyAttack: {
              name: string;
              effect: string;
          };
          transform: {
              name: string;
              effect: string;
          };
          bubble: {
              name: string;
              effect: string;
          };
          dizzyPunch: {
              name: string;
              effect: string;
          };
          spore: {
              name: string;
              effect: string;
          };
          flash: {
              name: string;
              effect: string;
          };
          psywave: {
              name: string;
              effect: string;
          };
          splash: {
              name: string;
              effect: string;
          };
          acidArmor: {
              name: string;
              effect: string;
          };
          crabhammer: {
              name: string;
              effect: string;
          };
          explosion: {
              name: string;
              effect: string;
          };
          furySwipes: {
              name: string;
              effect: string;
          };
          bonemerang: {
              name: string;
              effect: string;
          };
          rest: {
              name: string;
              effect: string;
          };
          rockSlide: {
              name: string;
              effect: string;
          };
          hyperFang: {
              name: string;
              effect: string;
          };
          sharpen: {
              name: string;
              effect: string;
          };
          conversion: {
              name: string;
              effect: string;
          };
          triAttack: {
              name: string;
              effect: string;
          };
          superFang: {
              name: string;
              effect: string;
          };
          slash: {
              name: string;
              effect: string;
          };
          substitute: {
              name: string;
              effect: string;
          };
          struggle: {
              name: string;
              effect: string;
          };
          sketch: {
              name: string;
              effect: string;
          };
          tripleKick: {
              name: string;
              effect: string;
          };
          thief: {
              name: string;
              effect: string;
          };
          spiderWeb: {
              name: string;
              effect: string;
          };
          mindReader: {
              name: string;
              effect: string;
          };
          nightmare: {
              name: string;
              effect: string;
          };
          flameWheel: {
              name: string;
              effect: string;
          };
          snore: {
              name: string;
              effect: string;
          };
          curse: {
              name: string;
              effect: string;
          };
          flail: {
              name: string;
              effect: string;
          };
          conversion2: {
              name: string;
              effect: string;
          };
          aeroblast: {
              name: string;
              effect: string;
          };
          cottonSpore: {
              name: string;
              effect: string;
          };
          reversal: {
              name: string;
              effect: string;
          };
          spite: {
              name: string;
              effect: string;
          };
          powderSnow: {
              name: string;
              effect: string;
          };
          protect: {
              name: string;
              effect: string;
          };
          machPunch: {
              name: string;
              effect: string;
          };
          scaryFace: {
              name: string;
              effect: string;
          };
          feintAttack: {
              name: string;
              effect: string;
          };
          sweetKiss: {
              name: string;
              effect: string;
          };
          bellyDrum: {
              name: string;
              effect: string;
          };
          sludgeBomb: {
              name: string;
              effect: string;
          };
          mudSlap: {
              name: string;
              effect: string;
          };
          octazooka: {
              name: string;
              effect: string;
          };
          spikes: {
              name: string;
              effect: string;
          };
          zapCannon: {
              name: string;
              effect: string;
          };
          foresight: {
              name: string;
              effect: string;
          };
          destinyBond: {
              name: string;
              effect: string;
          };
          perishSong: {
              name: string;
              effect: string;
          };
          icyWind: {
              name: string;
              effect: string;
          };
          detect: {
              name: string;
              effect: string;
          };
          boneRush: {
              name: string;
              effect: string;
          };
          lockOn: {
              name: string;
              effect: string;
          };
          outrage: {
              name: string;
              effect: string;
          };
          sandstorm: {
              name: string;
              effect: string;
          };
          gigaDrain: {
              name: string;
              effect: string;
          };
          endure: {
              name: string;
              effect: string;
          };
          charm: {
              name: string;
              effect: string;
          };
          rollout: {
              name: string;
              effect: string;
          };
          falseSwipe: {
              name: string;
              effect: string;
          };
          swagger: {
              name: string;
              effect: string;
          };
          milkDrink: {
              name: string;
              effect: string;
          };
          spark: {
              name: string;
              effect: string;
          };
          furyCutter: {
              name: string;
              effect: string;
          };
          steelWing: {
              name: string;
              effect: string;
          };
          meanLook: {
              name: string;
              effect: string;
          };
          attract: {
              name: string;
              effect: string;
          };
          sleepTalk: {
              name: string;
              effect: string;
          };
          healBell: {
              name: string;
              effect: string;
          };
          return: {
              name: string;
              effect: string;
          };
          present: {
              name: string;
              effect: string;
          };
          frustration: {
              name: string;
              effect: string;
          };
          safeguard: {
              name: string;
              effect: string;
          };
          painSplit: {
              name: string;
              effect: string;
          };
          sacredFire: {
              name: string;
              effect: string;
          };
          magnitude: {
              name: string;
              effect: string;
          };
          dynamicPunch: {
              name: string;
              effect: string;
          };
          megahorn: {
              name: string;
              effect: string;
          };
          dragonBreath: {
              name: string;
              effect: string;
          };
          batonPass: {
              name: string;
              effect: string;
          };
          encore: {
              name: string;
              effect: string;
          };
          pursuit: {
              name: string;
              effect: string;
          };
          rapidSpin: {
              name: string;
              effect: string;
          };
          sweetScent: {
              name: string;
              effect: string;
          };
          ironTail: {
              name: string;
              effect: string;
          };
          metalClaw: {
              name: string;
              effect: string;
          };
          vitalThrow: {
              name: string;
              effect: string;
          };
          morningSun: {
              name: string;
              effect: string;
          };
          synthesis: {
              name: string;
              effect: string;
          };
          moonlight: {
              name: string;
              effect: string;
          };
          hiddenPower: {
              name: string;
              effect: string;
          };
          crossChop: {
              name: string;
              effect: string;
          };
          twister: {
              name: string;
              effect: string;
          };
          rainDance: {
              name: string;
              effect: string;
          };
          sunnyDay: {
              name: string;
              effect: string;
          };
          crunch: {
              name: string;
              effect: string;
          };
          mirrorCoat: {
              name: string;
              effect: string;
          };
          psychUp: {
              name: string;
              effect: string;
          };
          extremeSpeed: {
              name: string;
              effect: string;
          };
          ancientPower: {
              name: string;
              effect: string;
          };
          shadowBall: {
              name: string;
              effect: string;
          };
          futureSight: {
              name: string;
              effect: string;
          };
          rockSmash: {
              name: string;
              effect: string;
          };
          whirlpool: {
              name: string;
              effect: string;
          };
          beatUp: {
              name: string;
              effect: string;
          };
          fakeOut: {
              name: string;
              effect: string;
          };
          uproar: {
              name: string;
              effect: string;
          };
          stockpile: {
              name: string;
              effect: string;
          };
          spitUp: {
              name: string;
              effect: string;
          };
          swallow: {
              name: string;
              effect: string;
          };
          heatWave: {
              name: string;
              effect: string;
          };
          hail: {
              name: string;
              effect: string;
          };
          torment: {
              name: string;
              effect: string;
          };
          flatter: {
              name: string;
              effect: string;
          };
          willOWisp: {
              name: string;
              effect: string;
          };
          memento: {
              name: string;
              effect: string;
          };
          facade: {
              name: string;
              effect: string;
          };
          focusPunch: {
              name: string;
              effect: string;
          };
          smellingSalts: {
              name: string;
              effect: string;
          };
          followMe: {
              name: string;
              effect: string;
          };
          naturePower: {
              name: string;
              effect: string;
          };
          charge: {
              name: string;
              effect: string;
          };
          taunt: {
              name: string;
              effect: string;
          };
          helpingHand: {
              name: string;
              effect: string;
          };
          trick: {
              name: string;
              effect: string;
          };
          rolePlay: {
              name: string;
              effect: string;
          };
          wish: {
              name: string;
              effect: string;
          };
          assist: {
              name: string;
              effect: string;
          };
          ingrain: {
              name: string;
              effect: string;
          };
          superpower: {
              name: string;
              effect: string;
          };
          magicCoat: {
              name: string;
              effect: string;
          };
          recycle: {
              name: string;
              effect: string;
          };
          revenge: {
              name: string;
              effect: string;
          };
          brickBreak: {
              name: string;
              effect: string;
          };
          yawn: {
              name: string;
              effect: string;
          };
          knockOff: {
              name: string;
              effect: string;
          };
          endeavor: {
              name: string;
              effect: string;
          };
          eruption: {
              name: string;
              effect: string;
          };
          skillSwap: {
              name: string;
              effect: string;
          };
          imprison: {
              name: string;
              effect: string;
          };
          refresh: {
              name: string;
              effect: string;
          };
          grudge: {
              name: string;
              effect: string;
          };
          snatch: {
              name: string;
              effect: string;
          };
          secretPower: {
              name: string;
              effect: string;
          };
          dive: {
              name: string;
              effect: string;
          };
          armThrust: {
              name: string;
              effect: string;
          };
          camouflage: {
              name: string;
              effect: string;
          };
          tailGlow: {
              name: string;
              effect: string;
          };
          lusterPurge: {
              name: string;
              effect: string;
          };
          mistBall: {
              name: string;
              effect: string;
          };
          featherDance: {
              name: string;
              effect: string;
          };
          teeterDance: {
              name: string;
              effect: string;
          };
          blazeKick: {
              name: string;
              effect: string;
          };
          mudSport: {
              name: string;
              effect: string;
          };
          iceBall: {
              name: string;
              effect: string;
          };
          needleArm: {
              name: string;
              effect: string;
          };
          slackOff: {
              name: string;
              effect: string;
          };
          hyperVoice: {
              name: string;
              effect: string;
          };
          poisonFang: {
              name: string;
              effect: string;
          };
          crushClaw: {
              name: string;
              effect: string;
          };
          blastBurn: {
              name: string;
              effect: string;
          };
          hydroCannon: {
              name: string;
              effect: string;
          };
          meteorMash: {
              name: string;
              effect: string;
          };
          astonish: {
              name: string;
              effect: string;
          };
          weatherBall: {
              name: string;
              effect: string;
          };
          aromatherapy: {
              name: string;
              effect: string;
          };
          fakeTears: {
              name: string;
              effect: string;
          };
          airCutter: {
              name: string;
              effect: string;
          };
          overheat: {
              name: string;
              effect: string;
          };
          odorSleuth: {
              name: string;
              effect: string;
          };
          rockTomb: {
              name: string;
              effect: string;
          };
          silverWind: {
              name: string;
              effect: string;
          };
          metalSound: {
              name: string;
              effect: string;
          };
          grassWhistle: {
              name: string;
              effect: string;
          };
          tickle: {
              name: string;
              effect: string;
          };
          cosmicPower: {
              name: string;
              effect: string;
          };
          waterSpout: {
              name: string;
              effect: string;
          };
          signalBeam: {
              name: string;
              effect: string;
          };
          shadowPunch: {
              name: string;
              effect: string;
          };
          extrasensory: {
              name: string;
              effect: string;
          };
          skyUppercut: {
              name: string;
              effect: string;
          };
          sandTomb: {
              name: string;
              effect: string;
          };
          sheerCold: {
              name: string;
              effect: string;
          };
          muddyWater: {
              name: string;
              effect: string;
          };
          bulletSeed: {
              name: string;
              effect: string;
          };
          aerialAce: {
              name: string;
              effect: string;
          };
          icicleSpear: {
              name: string;
              effect: string;
          };
          ironDefense: {
              name: string;
              effect: string;
          };
          block: {
              name: string;
              effect: string;
          };
          howl: {
              name: string;
              effect: string;
          };
          dragonClaw: {
              name: string;
              effect: string;
          };
          frenzyPlant: {
              name: string;
              effect: string;
          };
          bulkUp: {
              name: string;
              effect: string;
          };
          bounce: {
              name: string;
              effect: string;
          };
          mudShot: {
              name: string;
              effect: string;
          };
          poisonTail: {
              name: string;
              effect: string;
          };
          covet: {
              name: string;
              effect: string;
          };
          voltTackle: {
              name: string;
              effect: string;
          };
          magicalLeaf: {
              name: string;
              effect: string;
          };
          waterSport: {
              name: string;
              effect: string;
          };
          calmMind: {
              name: string;
              effect: string;
          };
          leafBlade: {
              name: string;
              effect: string;
          };
          dragonDance: {
              name: string;
              effect: string;
          };
          rockBlast: {
              name: string;
              effect: string;
          };
          shockWave: {
              name: string;
              effect: string;
          };
          waterPulse: {
              name: string;
              effect: string;
          };
          doomDesire: {
              name: string;
              effect: string;
          };
          psychoBoost: {
              name: string;
              effect: string;
          };
          roost: {
              name: string;
              effect: string;
          };
          gravity: {
              name: string;
              effect: string;
          };
          miracleEye: {
              name: string;
              effect: string;
          };
          wakeUpSlap: {
              name: string;
              effect: string;
          };
          hammerArm: {
              name: string;
              effect: string;
          };
          gyroBall: {
              name: string;
              effect: string;
          };
          healingWish: {
              name: string;
              effect: string;
          };
          brine: {
              name: string;
              effect: string;
          };
          naturalGift: {
              name: string;
              effect: string;
          };
          feint: {
              name: string;
              effect: string;
          };
          pluck: {
              name: string;
              effect: string;
          };
          tailwind: {
              name: string;
              effect: string;
          };
          acupressure: {
              name: string;
              effect: string;
          };
          metalBurst: {
              name: string;
              effect: string;
          };
          uTurn: {
              name: string;
              effect: string;
          };
          closeCombat: {
              name: string;
              effect: string;
          };
          payback: {
              name: string;
              effect: string;
          };
          assurance: {
              name: string;
              effect: string;
          };
          embargo: {
              name: string;
              effect: string;
          };
          fling: {
              name: string;
              effect: string;
          };
          psychoShift: {
              name: string;
              effect: string;
          };
          trumpCard: {
              name: string;
              effect: string;
          };
          healBlock: {
              name: string;
              effect: string;
          };
          wringOut: {
              name: string;
              effect: string;
          };
          powerTrick: {
              name: string;
              effect: string;
          };
          gastroAcid: {
              name: string;
              effect: string;
          };
          luckyChant: {
              name: string;
              effect: string;
          };
          meFirst: {
              name: string;
              effect: string;
          };
          copycat: {
              name: string;
              effect: string;
          };
          powerSwap: {
              name: string;
              effect: string;
          };
          guardSwap: {
              name: string;
              effect: string;
          };
          punishment: {
              name: string;
              effect: string;
          };
          lastResort: {
              name: string;
              effect: string;
          };
          worrySeed: {
              name: string;
              effect: string;
          };
          suckerPunch: {
              name: string;
              effect: string;
          };
          toxicSpikes: {
              name: string;
              effect: string;
          };
          heartSwap: {
              name: string;
              effect: string;
          };
          aquaRing: {
              name: string;
              effect: string;
          };
          magnetRise: {
              name: string;
              effect: string;
          };
          flareBlitz: {
              name: string;
              effect: string;
          };
          forcePalm: {
              name: string;
              effect: string;
          };
          auraSphere: {
              name: string;
              effect: string;
          };
          rockPolish: {
              name: string;
              effect: string;
          };
          poisonJab: {
              name: string;
              effect: string;
          };
          darkPulse: {
              name: string;
              effect: string;
          };
          nightSlash: {
              name: string;
              effect: string;
          };
          aquaTail: {
              name: string;
              effect: string;
          };
          seedBomb: {
              name: string;
              effect: string;
          };
          airSlash: {
              name: string;
              effect: string;
          };
          xScissor: {
              name: string;
              effect: string;
          };
          bugBuzz: {
              name: string;
              effect: string;
          };
          dragonPulse: {
              name: string;
              effect: string;
          };
          dragonRush: {
              name: string;
              effect: string;
          };
          powerGem: {
              name: string;
              effect: string;
          };
          drainPunch: {
              name: string;
              effect: string;
          };
          vacuumWave: {
              name: string;
              effect: string;
          };
          focusBlast: {
              name: string;
              effect: string;
          };
          energyBall: {
              name: string;
              effect: string;
          };
          braveBird: {
              name: string;
              effect: string;
          };
          earthPower: {
              name: string;
              effect: string;
          };
          switcheroo: {
              name: string;
              effect: string;
          };
          gigaImpact: {
              name: string;
              effect: string;
          };
          nastyPlot: {
              name: string;
              effect: string;
          };
          bulletPunch: {
              name: string;
              effect: string;
          };
          avalanche: {
              name: string;
              effect: string;
          };
          iceShard: {
              name: string;
              effect: string;
          };
          shadowClaw: {
              name: string;
              effect: string;
          };
          thunderFang: {
              name: string;
              effect: string;
          };
          iceFang: {
              name: string;
              effect: string;
          };
          fireFang: {
              name: string;
              effect: string;
          };
          shadowSneak: {
              name: string;
              effect: string;
          };
          mudBomb: {
              name: string;
              effect: string;
          };
          psychoCut: {
              name: string;
              effect: string;
          };
          zenHeadbutt: {
              name: string;
              effect: string;
          };
          mirrorShot: {
              name: string;
              effect: string;
          };
          flashCannon: {
              name: string;
              effect: string;
          };
          rockClimb: {
              name: string;
              effect: string;
          };
          defog: {
              name: string;
              effect: string;
          };
          trickRoom: {
              name: string;
              effect: string;
          };
          dracoMeteor: {
              name: string;
              effect: string;
          };
          discharge: {
              name: string;
              effect: string;
          };
          lavaPlume: {
              name: string;
              effect: string;
          };
          leafStorm: {
              name: string;
              effect: string;
          };
          powerWhip: {
              name: string;
              effect: string;
          };
          rockWrecker: {
              name: string;
              effect: string;
          };
          crossPoison: {
              name: string;
              effect: string;
          };
          gunkShot: {
              name: string;
              effect: string;
          };
          ironHead: {
              name: string;
              effect: string;
          };
          magnetBomb: {
              name: string;
              effect: string;
          };
          stoneEdge: {
              name: string;
              effect: string;
          };
          captivate: {
              name: string;
              effect: string;
          };
          stealthRock: {
              name: string;
              effect: string;
          };
          grassKnot: {
              name: string;
              effect: string;
          };
          chatter: {
              name: string;
              effect: string;
          };
          judgment: {
              name: string;
              effect: string;
          };
          bugBite: {
              name: string;
              effect: string;
          };
          chargeBeam: {
              name: string;
              effect: string;
          };
          woodHammer: {
              name: string;
              effect: string;
          };
          aquaJet: {
              name: string;
              effect: string;
          };
          attackOrder: {
              name: string;
              effect: string;
          };
          defendOrder: {
              name: string;
              effect: string;
          };
          healOrder: {
              name: string;
              effect: string;
          };
          headSmash: {
              name: string;
              effect: string;
          };
          doubleHit: {
              name: string;
              effect: string;
          };
          roarOfTime: {
              name: string;
              effect: string;
          };
          spacialRend: {
              name: string;
              effect: string;
          };
          lunarDance: {
              name: string;
              effect: string;
          };
          crushGrip: {
              name: string;
              effect: string;
          };
          magmaStorm: {
              name: string;
              effect: string;
          };
          darkVoid: {
              name: string;
              effect: string;
          };
          seedFlare: {
              name: string;
              effect: string;
          };
          ominousWind: {
              name: string;
              effect: string;
          };
          shadowForce: {
              name: string;
              effect: string;
          };
          honeClaws: {
              name: string;
              effect: string;
          };
          wideGuard: {
              name: string;
              effect: string;
          };
          guardSplit: {
              name: string;
              effect: string;
          };
          powerSplit: {
              name: string;
              effect: string;
          };
          wonderRoom: {
              name: string;
              effect: string;
          };
          psyshock: {
              name: string;
              effect: string;
          };
          venoshock: {
              name: string;
              effect: string;
          };
          autotomize: {
              name: string;
              effect: string;
          };
          ragePowder: {
              name: string;
              effect: string;
          };
          telekinesis: {
              name: string;
              effect: string;
          };
          magicRoom: {
              name: string;
              effect: string;
          };
          smackDown: {
              name: string;
              effect: string;
          };
          stormThrow: {
              name: string;
              effect: string;
          };
          flameBurst: {
              name: string;
              effect: string;
          };
          sludgeWave: {
              name: string;
              effect: string;
          };
          quiverDance: {
              name: string;
              effect: string;
          };
          heavySlam: {
              name: string;
              effect: string;
          };
          synchronoise: {
              name: string;
              effect: string;
          };
          electroBall: {
              name: string;
              effect: string;
          };
          soak: {
              name: string;
              effect: string;
          };
          flameCharge: {
              name: string;
              effect: string;
          };
          coil: {
              name: string;
              effect: string;
          };
          lowSweep: {
              name: string;
              effect: string;
          };
          acidSpray: {
              name: string;
              effect: string;
          };
          foulPlay: {
              name: string;
              effect: string;
          };
          simpleBeam: {
              name: string;
              effect: string;
          };
          entrainment: {
              name: string;
              effect: string;
          };
          afterYou: {
              name: string;
              effect: string;
          };
          round: {
              name: string;
              effect: string;
          };
          echoedVoice: {
              name: string;
              effect: string;
          };
          chipAway: {
              name: string;
              effect: string;
          };
          clearSmog: {
              name: string;
              effect: string;
          };
          storedPower: {
              name: string;
              effect: string;
          };
          quickGuard: {
              name: string;
              effect: string;
          };
          allySwitch: {
              name: string;
              effect: string;
          };
          scald: {
              name: string;
              effect: string;
          };
          shellSmash: {
              name: string;
              effect: string;
          };
          healPulse: {
              name: string;
              effect: string;
          };
          hex: {
              name: string;
              effect: string;
          };
          skyDrop: {
              name: string;
              effect: string;
          };
          shiftGear: {
              name: string;
              effect: string;
          };
          circleThrow: {
              name: string;
              effect: string;
          };
          incinerate: {
              name: string;
              effect: string;
          };
          quash: {
              name: string;
              effect: string;
          };
          acrobatics: {
              name: string;
              effect: string;
          };
          reflectType: {
              name: string;
              effect: string;
          };
          retaliate: {
              name: string;
              effect: string;
          };
          finalGambit: {
              name: string;
              effect: string;
          };
          bestow: {
              name: string;
              effect: string;
          };
          inferno: {
              name: string;
              effect: string;
          };
          waterPledge: {
              name: string;
              effect: string;
          };
          firePledge: {
              name: string;
              effect: string;
          };
          grassPledge: {
              name: string;
              effect: string;
          };
          voltSwitch: {
              name: string;
              effect: string;
          };
          struggleBug: {
              name: string;
              effect: string;
          };
          bulldoze: {
              name: string;
              effect: string;
          };
          frostBreath: {
              name: string;
              effect: string;
          };
          dragonTail: {
              name: string;
              effect: string;
          };
          workUp: {
              name: string;
              effect: string;
          };
          electroweb: {
              name: string;
              effect: string;
          };
          wildCharge: {
              name: string;
              effect: string;
          };
          drillRun: {
              name: string;
              effect: string;
          };
          dualChop: {
              name: string;
              effect: string;
          };
          heartStamp: {
              name: string;
              effect: string;
          };
          hornLeech: {
              name: string;
              effect: string;
          };
          sacredSword: {
              name: string;
              effect: string;
          };
          razorShell: {
              name: string;
              effect: string;
          };
          heatCrash: {
              name: string;
              effect: string;
          };
          leafTornado: {
              name: string;
              effect: string;
          };
          steamroller: {
              name: string;
              effect: string;
          };
          cottonGuard: {
              name: string;
              effect: string;
          };
          nightDaze: {
              name: string;
              effect: string;
          };
          psystrike: {
              name: string;
              effect: string;
          };
          tailSlap: {
              name: string;
              effect: string;
          };
          hurricane: {
              name: string;
              effect: string;
          };
          headCharge: {
              name: string;
              effect: string;
          };
          gearGrind: {
              name: string;
              effect: string;
          };
          searingShot: {
              name: string;
              effect: string;
          };
          technoBlast: {
              name: string;
              effect: string;
          };
          relicSong: {
              name: string;
              effect: string;
          };
          secretSword: {
              name: string;
              effect: string;
          };
          glaciate: {
              name: string;
              effect: string;
          };
          boltStrike: {
              name: string;
              effect: string;
          };
          blueFlare: {
              name: string;
              effect: string;
          };
          fieryDance: {
              name: string;
              effect: string;
          };
          freezeShock: {
              name: string;
              effect: string;
          };
          iceBurn: {
              name: string;
              effect: string;
          };
          snarl: {
              name: string;
              effect: string;
          };
          icicleCrash: {
              name: string;
              effect: string;
          };
          vCreate: {
              name: string;
              effect: string;
          };
          fusionFlare: {
              name: string;
              effect: string;
          };
          fusionBolt: {
              name: string;
              effect: string;
          };
          flyingPress: {
              name: string;
              effect: string;
          };
          matBlock: {
              name: string;
              effect: string;
          };
          belch: {
              name: string;
              effect: string;
          };
          rototiller: {
              name: string;
              effect: string;
          };
          stickyWeb: {
              name: string;
              effect: string;
          };
          fellStinger: {
              name: string;
              effect: string;
          };
          phantomForce: {
              name: string;
              effect: string;
          };
          trickOrTreat: {
              name: string;
              effect: string;
          };
          nobleRoar: {
              name: string;
              effect: string;
          };
          ionDeluge: {
              name: string;
              effect: string;
          };
          parabolicCharge: {
              name: string;
              effect: string;
          };
          forestsCurse: {
              name: string;
              effect: string;
          };
          petalBlizzard: {
              name: string;
              effect: string;
          };
          freezeDry: {
              name: string;
              effect: string;
          };
          disarmingVoice: {
              name: string;
              effect: string;
          };
          partingShot: {
              name: string;
              effect: string;
          };
          topsyTurvy: {
              name: string;
              effect: string;
          };
          drainingKiss: {
              name: string;
              effect: string;
          };
          craftyShield: {
              name: string;
              effect: string;
          };
          flowerShield: {
              name: string;
              effect: string;
          };
          grassyTerrain: {
              name: string;
              effect: string;
          };
          mistyTerrain: {
              name: string;
              effect: string;
          };
          electrify: {
              name: string;
              effect: string;
          };
          playRough: {
              name: string;
              effect: string;
          };
          fairyWind: {
              name: string;
              effect: string;
          };
          moonblast: {
              name: string;
              effect: string;
          };
          boomburst: {
              name: string;
              effect: string;
          };
          fairyLock: {
              name: string;
              effect: string;
          };
          kingsShield: {
              name: string;
              effect: string;
          };
          playNice: {
              name: string;
              effect: string;
          };
          confide: {
              name: string;
              effect: string;
          };
          diamondStorm: {
              name: string;
              effect: string;
          };
          steamEruption: {
              name: string;
              effect: string;
          };
          hyperspaceHole: {
              name: string;
              effect: string;
          };
          waterShuriken: {
              name: string;
              effect: string;
          };
          mysticalFire: {
              name: string;
              effect: string;
          };
          spikyShield: {
              name: string;
              effect: string;
          };
          aromaticMist: {
              name: string;
              effect: string;
          };
          eerieImpulse: {
              name: string;
              effect: string;
          };
          venomDrench: {
              name: string;
              effect: string;
          };
          powder: {
              name: string;
              effect: string;
          };
          geomancy: {
              name: string;
              effect: string;
          };
          magneticFlux: {
              name: string;
              effect: string;
          };
          happyHour: {
              name: string;
              effect: string;
          };
          electricTerrain: {
              name: string;
              effect: string;
          };
          dazzlingGleam: {
              name: string;
              effect: string;
          };
          celebrate: {
              name: string;
              effect: string;
          };
          holdHands: {
              name: string;
              effect: string;
          };
          babyDollEyes: {
              name: string;
              effect: string;
          };
          nuzzle: {
              name: string;
              effect: string;
          };
          holdBack: {
              name: string;
              effect: string;
          };
          infestation: {
              name: string;
              effect: string;
          };
          powerUpPunch: {
              name: string;
              effect: string;
          };
          oblivionWing: {
              name: string;
              effect: string;
          };
          thousandArrows: {
              name: string;
              effect: string;
          };
          thousandWaves: {
              name: string;
              effect: string;
          };
          landsWrath: {
              name: string;
              effect: string;
          };
          lightOfRuin: {
              name: string;
              effect: string;
          };
          originPulse: {
              name: string;
              effect: string;
          };
          precipiceBlades: {
              name: string;
              effect: string;
          };
          dragonAscent: {
              name: string;
              effect: string;
          };
          hyperspaceFury: {
              name: string;
              effect: string;
          };
          breakneckBlitzPhysical: {
              name: string;
              effect: string;
          };
          breakneckBlitzSpecial: {
              name: string;
              effect: string;
          };
          allOutPummelingPhysical: {
              name: string;
              effect: string;
          };
          allOutPummelingSpecial: {
              name: string;
              effect: string;
          };
          supersonicSkystrikePhysical: {
              name: string;
              effect: string;
          };
          supersonicSkystrikeSpecial: {
              name: string;
              effect: string;
          };
          acidDownpourPhysical: {
              name: string;
              effect: string;
          };
          acidDownpourSpecial: {
              name: string;
              effect: string;
          };
          tectonicRagePhysical: {
              name: string;
              effect: string;
          };
          tectonicRageSpecial: {
              name: string;
              effect: string;
          };
          continentalCrushPhysical: {
              name: string;
              effect: string;
          };
          continentalCrushSpecial: {
              name: string;
              effect: string;
          };
          savageSpinOutPhysical: {
              name: string;
              effect: string;
          };
          savageSpinOutSpecial: {
              name: string;
              effect: string;
          };
          neverEndingNightmarePhysical: {
              name: string;
              effect: string;
          };
          neverEndingNightmareSpecial: {
              name: string;
              effect: string;
          };
          corkscrewCrashPhysical: {
              name: string;
              effect: string;
          };
          corkscrewCrashSpecial: {
              name: string;
              effect: string;
          };
          infernoOverdrivePhysical: {
              name: string;
              effect: string;
          };
          infernoOverdriveSpecial: {
              name: string;
              effect: string;
          };
          hydroVortexPhysical: {
              name: string;
              effect: string;
          };
          hydroVortexSpecial: {
              name: string;
              effect: string;
          };
          bloomDoomPhysical: {
              name: string;
              effect: string;
          };
          bloomDoomSpecial: {
              name: string;
              effect: string;
          };
          gigavoltHavocPhysical: {
              name: string;
              effect: string;
          };
          gigavoltHavocSpecial: {
              name: string;
              effect: string;
          };
          shatteredPsychePhysical: {
              name: string;
              effect: string;
          };
          shatteredPsycheSpecial: {
              name: string;
              effect: string;
          };
          subzeroSlammerPhysical: {
              name: string;
              effect: string;
          };
          subzeroSlammerSpecial: {
              name: string;
              effect: string;
          };
          devastatingDrakePhysical: {
              name: string;
              effect: string;
          };
          devastatingDrakeSpecial: {
              name: string;
              effect: string;
          };
          blackHoleEclipsePhysical: {
              name: string;
              effect: string;
          };
          blackHoleEclipseSpecial: {
              name: string;
              effect: string;
          };
          twinkleTacklePhysical: {
              name: string;
              effect: string;
          };
          twinkleTackleSpecial: {
              name: string;
              effect: string;
          };
          catastropika: {
              name: string;
              effect: string;
          };
          shoreUp: {
              name: string;
              effect: string;
          };
          firstImpression: {
              name: string;
              effect: string;
          };
          banefulBunker: {
              name: string;
              effect: string;
          };
          spiritShackle: {
              name: string;
              effect: string;
          };
          darkestLariat: {
              name: string;
              effect: string;
          };
          sparklingAria: {
              name: string;
              effect: string;
          };
          iceHammer: {
              name: string;
              effect: string;
          };
          floralHealing: {
              name: string;
              effect: string;
          };
          highHorsepower: {
              name: string;
              effect: string;
          };
          strengthSap: {
              name: string;
              effect: string;
          };
          solarBlade: {
              name: string;
              effect: string;
          };
          leafage: {
              name: string;
              effect: string;
          };
          spotlight: {
              name: string;
              effect: string;
          };
          toxicThread: {
              name: string;
              effect: string;
          };
          laserFocus: {
              name: string;
              effect: string;
          };
          gearUp: {
              name: string;
              effect: string;
          };
          throatChop: {
              name: string;
              effect: string;
          };
          pollenPuff: {
              name: string;
              effect: string;
          };
          anchorShot: {
              name: string;
              effect: string;
          };
          psychicTerrain: {
              name: string;
              effect: string;
          };
          lunge: {
              name: string;
              effect: string;
          };
          fireLash: {
              name: string;
              effect: string;
          };
          powerTrip: {
              name: string;
              effect: string;
          };
          burnUp: {
              name: string;
              effect: string;
          };
          speedSwap: {
              name: string;
              effect: string;
          };
          smartStrike: {
              name: string;
              effect: string;
          };
          purify: {
              name: string;
              effect: string;
          };
          revelationDance: {
              name: string;
              effect: string;
          };
          coreEnforcer: {
              name: string;
              effect: string;
          };
          tropKick: {
              name: string;
              effect: string;
          };
          instruct: {
              name: string;
              effect: string;
          };
          beakBlast: {
              name: string;
              effect: string;
          };
          clangingScales: {
              name: string;
              effect: string;
          };
          dragonHammer: {
              name: string;
              effect: string;
          };
          brutalSwing: {
              name: string;
              effect: string;
          };
          auroraVeil: {
              name: string;
              effect: string;
          };
          sinisterArrowRaid: {
              name: string;
              effect: string;
          };
          maliciousMoonsault: {
              name: string;
              effect: string;
          };
          oceanicOperetta: {
              name: string;
              effect: string;
          };
          guardianOfAlola: {
              name: string;
              effect: string;
          };
          soulStealing7StarStrike: {
              name: string;
              effect: string;
          };
          stokedSparksurfer: {
              name: string;
              effect: string;
          };
          pulverizingPancake: {
              name: string;
              effect: string;
          };
          extremeEvoboost: {
              name: string;
              effect: string;
          };
          genesisSupernova: {
              name: string;
              effect: string;
          };
          shellTrap: {
              name: string;
              effect: string;
          };
          fleurCannon: {
              name: string;
              effect: string;
          };
          psychicFangs: {
              name: string;
              effect: string;
          };
          stompingTantrum: {
              name: string;
              effect: string;
          };
          shadowBone: {
              name: string;
              effect: string;
          };
          accelerock: {
              name: string;
              effect: string;
          };
          liquidation: {
              name: string;
              effect: string;
          };
          prismaticLaser: {
              name: string;
              effect: string;
          };
          spectralThief: {
              name: string;
              effect: string;
          };
          sunsteelStrike: {
              name: string;
              effect: string;
          };
          moongeistBeam: {
              name: string;
              effect: string;
          };
          tearfulLook: {
              name: string;
              effect: string;
          };
          zingZap: {
              name: string;
              effect: string;
          };
          naturesMadness: {
              name: string;
              effect: string;
          };
          multiAttack: {
              name: string;
              effect: string;
          };
          tenMillionVoltThunderbolt: {
              name: string;
              effect: string;
          };
          mindBlown: {
              name: string;
              effect: string;
          };
          plasmaFists: {
              name: string;
              effect: string;
          };
          photonGeyser: {
              name: string;
              effect: string;
          };
          lightThatBurnsTheSky: {
              name: string;
              effect: string;
          };
          searingSunrazeSmash: {
              name: string;
              effect: string;
          };
          menacingMoonrazeMaelstrom: {
              name: string;
              effect: string;
          };
          letsSnuggleForever: {
              name: string;
              effect: string;
          };
          splinteredStormshards: {
              name: string;
              effect: string;
          };
          clangorousSoulblaze: {
              name: string;
              effect: string;
          };
          zippyZap: {
              name: string;
              effect: string;
          };
          splishySplash: {
              name: string;
              effect: string;
          };
          floatyFall: {
              name: string;
              effect: string;
          };
          pikaPapow: {
              name: string;
              effect: string;
          };
          bouncyBubble: {
              name: string;
              effect: string;
          };
          buzzyBuzz: {
              name: string;
              effect: string;
          };
          sizzlySlide: {
              name: string;
              effect: string;
          };
          glitzyGlow: {
              name: string;
              effect: string;
          };
          baddyBad: {
              name: string;
              effect: string;
          };
          sappySeed: {
              name: string;
              effect: string;
          };
          freezyFrost: {
              name: string;
              effect: string;
          };
          sparklySwirl: {
              name: string;
              effect: string;
          };
          veeveeVolley: {
              name: string;
              effect: string;
          };
          doubleIronBash: {
              name: string;
              effect: string;
          };
          maxGuard: {
              name: string;
              effect: string;
          };
          dynamaxCannon: {
              name: string;
              effect: string;
          };
          snipeShot: {
              name: string;
              effect: string;
          };
          jawLock: {
              name: string;
              effect: string;
          };
          stuffCheeks: {
              name: string;
              effect: string;
          };
          noRetreat: {
              name: string;
              effect: string;
          };
          tarShot: {
              name: string;
              effect: string;
          };
          magicPowder: {
              name: string;
              effect: string;
          };
          dragonDarts: {
              name: string;
              effect: string;
          };
          teatime: {
              name: string;
              effect: string;
          };
          octolock: {
              name: string;
              effect: string;
          };
          boltBeak: {
              name: string;
              effect: string;
          };
          fishiousRend: {
              name: string;
              effect: string;
          };
          courtChange: {
              name: string;
              effect: string;
          };
          maxFlare: {
              name: string;
              effect: string;
          };
          maxFlutterby: {
              name: string;
              effect: string;
          };
          maxLightning: {
              name: string;
              effect: string;
          };
          maxStrike: {
              name: string;
              effect: string;
          };
          maxKnuckle: {
              name: string;
              effect: string;
          };
          maxPhantasm: {
              name: string;
              effect: string;
          };
          maxHailstorm: {
              name: string;
              effect: string;
          };
          maxOoze: {
              name: string;
              effect: string;
          };
          maxGeyser: {
              name: string;
              effect: string;
          };
          maxAirstream: {
              name: string;
              effect: string;
          };
          maxStarfall: {
              name: string;
              effect: string;
          };
          maxWyrmwind: {
              name: string;
              effect: string;
          };
          maxMindstorm: {
              name: string;
              effect: string;
          };
          maxRockfall: {
              name: string;
              effect: string;
          };
          maxQuake: {
              name: string;
              effect: string;
          };
          maxDarkness: {
              name: string;
              effect: string;
          };
          maxOvergrowth: {
              name: string;
              effect: string;
          };
          maxSteelspike: {
              name: string;
              effect: string;
          };
          clangorousSoul: {
              name: string;
              effect: string;
          };
          bodyPress: {
              name: string;
              effect: string;
          };
          decorate: {
              name: string;
              effect: string;
          };
          drumBeating: {
              name: string;
              effect: string;
          };
          snapTrap: {
              name: string;
              effect: string;
          };
          pyroBall: {
              name: string;
              effect: string;
          };
          behemothBlade: {
              name: string;
              effect: string;
          };
          behemothBash: {
              name: string;
              effect: string;
          };
          auraWheel: {
              name: string;
              effect: string;
          };
          breakingSwipe: {
              name: string;
              effect: string;
          };
          branchPoke: {
              name: string;
              effect: string;
          };
          overdrive: {
              name: string;
              effect: string;
          };
          appleAcid: {
              name: string;
              effect: string;
          };
          gravApple: {
              name: string;
              effect: string;
          };
          spiritBreak: {
              name: string;
              effect: string;
          };
          strangeSteam: {
              name: string;
              effect: string;
          };
          lifeDew: {
              name: string;
              effect: string;
          };
          obstruct: {
              name: string;
              effect: string;
          };
          falseSurrender: {
              name: string;
              effect: string;
          };
          meteorAssault: {
              name: string;
              effect: string;
          };
          eternabeam: {
              name: string;
              effect: string;
          };
          steelBeam: {
              name: string;
              effect: string;
          };
          expandingForce: {
              name: string;
              effect: string;
          };
          steelRoller: {
              name: string;
              effect: string;
          };
          scaleShot: {
              name: string;
              effect: string;
          };
          meteorBeam: {
              name: string;
              effect: string;
          };
          shellSideArm: {
              name: string;
              effect: string;
          };
          mistyExplosion: {
              name: string;
              effect: string;
          };
          grassyGlide: {
              name: string;
              effect: string;
          };
          risingVoltage: {
              name: string;
              effect: string;
          };
          terrainPulse: {
              name: string;
              effect: string;
          };
          skitterSmack: {
              name: string;
              effect: string;
          };
          burningJealousy: {
              name: string;
              effect: string;
          };
          lashOut: {
              name: string;
              effect: string;
          };
          poltergeist: {
              name: string;
              effect: string;
          };
          corrosiveGas: {
              name: string;
              effect: string;
          };
          coaching: {
              name: string;
              effect: string;
          };
          flipTurn: {
              name: string;
              effect: string;
          };
          tripleAxel: {
              name: string;
              effect: string;
          };
          dualWingbeat: {
              name: string;
              effect: string;
          };
          scorchingSands: {
              name: string;
              effect: string;
          };
          jungleHealing: {
              name: string;
              effect: string;
          };
          wickedBlow: {
              name: string;
              effect: string;
          };
          surgingStrikes: {
              name: string;
              effect: string;
          };
          thunderCage: {
              name: string;
              effect: string;
          };
          dragonEnergy: {
              name: string;
              effect: string;
          };
          freezingGlare: {
              name: string;
              effect: string;
          };
          fieryWrath: {
              name: string;
              effect: string;
          };
          thunderousKick: {
              name: string;
              effect: string;
          };
          glacialLance: {
              name: string;
              effect: string;
          };
          astralBarrage: {
              name: string;
              effect: string;
          };
          eerieSpell: {
              name: string;
              effect: string;
          };
          direClaw: {
              name: string;
              effect: string;
          };
          psyshieldBash: {
              name: string;
              effect: string;
          };
          powerShift: {
              name: string;
              effect: string;
          };
          stoneAxe: {
              name: string;
              effect: string;
          };
          springtideStorm: {
              name: string;
              effect: string;
          };
          mysticalPower: {
              name: string;
              effect: string;
          };
          ragingFury: {
              name: string;
              effect: string;
          };
          waveCrash: {
              name: string;
              effect: string;
          };
          chloroblast: {
              name: string;
              effect: string;
          };
          mountainGale: {
              name: string;
              effect: string;
          };
          victoryDance: {
              name: string;
              effect: string;
          };
          headlongRush: {
              name: string;
              effect: string;
          };
          barbBarrage: {
              name: string;
              effect: string;
          };
          esperWing: {
              name: string;
              effect: string;
          };
          bitterMalice: {
              name: string;
              effect: string;
          };
          shelter: {
              name: string;
              effect: string;
          };
          tripleArrows: {
              name: string;
              effect: string;
          };
          infernalParade: {
              name: string;
              effect: string;
          };
          ceaselessEdge: {
              name: string;
              effect: string;
          };
          bleakwindStorm: {
              name: string;
              effect: string;
          };
          wildboltStorm: {
              name: string;
              effect: string;
          };
          sandsearStorm: {
              name: string;
              effect: string;
          };
          lunarBlessing: {
              name: string;
              effect: string;
          };
          takeHeart: {
              name: string;
              effect: string;
          };
          gMaxWildfire: {
              name: string;
              effect: string;
          };
          gMaxBefuddle: {
              name: string;
              effect: string;
          };
          gMaxVoltCrash: {
              name: string;
              effect: string;
          };
          gMaxGoldRush: {
              name: string;
              effect: string;
          };
          gMaxChiStrike: {
              name: string;
              effect: string;
          };
          gMaxTerror: {
              name: string;
              effect: string;
          };
          gMaxResonance: {
              name: string;
              effect: string;
          };
          gMaxCuddle: {
              name: string;
              effect: string;
          };
          gMaxReplenish: {
              name: string;
              effect: string;
          };
          gMaxMalodor: {
              name: string;
              effect: string;
          };
          gMaxStonesurge: {
              name: string;
              effect: string;
          };
          gMaxWindRage: {
              name: string;
              effect: string;
          };
          gMaxStunShock: {
              name: string;
              effect: string;
          };
          gMaxFinale: {
              name: string;
              effect: string;
          };
          gMaxDepletion: {
              name: string;
              effect: string;
          };
          gMaxGravitas: {
              name: string;
              effect: string;
          };
          gMaxVolcalith: {
              name: string;
              effect: string;
          };
          gMaxSandblast: {
              name: string;
              effect: string;
          };
          gMaxSnooze: {
              name: string;
              effect: string;
          };
          gMaxTartness: {
              name: string;
              effect: string;
          };
          gMaxSweetness: {
              name: string;
              effect: string;
          };
          gMaxSmite: {
              name: string;
              effect: string;
          };
          gMaxSteelsurge: {
              name: string;
              effect: string;
          };
          gMaxMeltdown: {
              name: string;
              effect: string;
          };
          gMaxFoamBurst: {
              name: string;
              effect: string;
          };
          gMaxCentiferno: {
              name: string;
              effect: string;
          };
          gMaxVineLash: {
              name: string;
              effect: string;
          };
          gMaxCannonade: {
              name: string;
              effect: string;
          };
          gMaxDrumSolo: {
              name: string;
              effect: string;
          };
          gMaxFireball: {
              name: string;
              effect: string;
          };
          gMaxHydrosnipe: {
              name: string;
              effect: string;
          };
          gMaxOneBlow: {
              name: string;
              effect: string;
          };
          gMaxRapidFlow: {
              name: string;
              effect: string;
          };
          teraBlast: {
              name: string;
              effect: string;
          };
          silkTrap: {
              name: string;
              effect: string;
          };
          axeKick: {
              name: string;
              effect: string;
          };
          lastRespects: {
              name: string;
              effect: string;
          };
          luminaCrash: {
              name: string;
              effect: string;
          };
          orderUp: {
              name: string;
              effect: string;
          };
          jetPunch: {
              name: string;
              effect: string;
          };
          spicyExtract: {
              name: string;
              effect: string;
          };
          spinOut: {
              name: string;
              effect: string;
          };
          populationBomb: {
              name: string;
              effect: string;
          };
          iceSpinner: {
              name: string;
              effect: string;
          };
          glaiveRush: {
              name: string;
              effect: string;
          };
          revivalBlessing: {
              name: string;
              effect: string;
          };
          saltCure: {
              name: string;
              effect: string;
          };
          tripleDive: {
              name: string;
              effect: string;
          };
          mortalSpin: {
              name: string;
              effect: string;
          };
          doodle: {
              name: string;
              effect: string;
          };
          filletAway: {
              name: string;
              effect: string;
          };
          kowtowCleave: {
              name: string;
              effect: string;
          };
          flowerTrick: {
              name: string;
              effect: string;
          };
          torchSong: {
              name: string;
              effect: string;
          };
          aquaStep: {
              name: string;
              effect: string;
          };
          ragingBull: {
              name: string;
              effect: string;
          };
          makeItRain: {
              name: string;
              effect: string;
          };
          psyblade: {
              name: string;
              effect: string;
          };
          hydroSteam: {
              name: string;
              effect: string;
          };
          ruination: {
              name: string;
              effect: string;
          };
          collisionCourse: {
              name: string;
              effect: string;
          };
          electroDrift: {
              name: string;
              effect: string;
          };
          shedTail: {
              name: string;
              effect: string;
          };
          chillyReception: {
              name: string;
              effect: string;
          };
          tidyUp: {
              name: string;
              effect: string;
          };
          snowscape: {
              name: string;
              effect: string;
          };
          pounce: {
              name: string;
              effect: string;
          };
          trailblaze: {
              name: string;
              effect: string;
          };
          chillingWater: {
              name: string;
              effect: string;
          };
          hyperDrill: {
              name: string;
              effect: string;
          };
          twinBeam: {
              name: string;
              effect: string;
          };
          rageFist: {
              name: string;
              effect: string;
          };
          armorCannon: {
              name: string;
              effect: string;
          };
          bitterBlade: {
              name: string;
              effect: string;
          };
          doubleShock: {
              name: string;
              effect: string;
          };
          gigatonHammer: {
              name: string;
              effect: string;
          };
          comeuppance: {
              name: string;
              effect: string;
          };
          aquaCutter: {
              name: string;
              effect: string;
          };
          blazingTorque: {
              name: string;
              effect: string;
          };
          wickedTorque: {
              name: string;
              effect: string;
          };
          noxiousTorque: {
              name: string;
              effect: string;
          };
          combatTorque: {
              name: string;
              effect: string;
          };
          magicalTorque: {
              name: string;
              effect: string;
          };
          bloodMoon: {
              name: string;
              effect: string;
          };
          matchaGotcha: {
              name: string;
              effect: string;
          };
          syrupBomb: {
              name: string;
              effect: string;
          };
          ivyCudgel: {
              name: string;
              effect: string;
          };
          electroShot: {
              name: string;
              effect: string;
          };
          teraStarstorm: {
              name: string;
              effect: string;
          };
          fickleBeam: {
              name: string;
              effect: string;
          };
          burningBulwark: {
              name: string;
              effect: string;
          };
          thunderclap: {
              name: string;
              effect: string;
          };
          mightyCleave: {
              name: string;
              effect: string;
          };
          tachyonCutter: {
              name: string;
              effect: string;
          };
          hardPress: {
              name: string;
              effect: string;
          };
          dragonCheer: {
              name: string;
              effect: string;
          };
          alluringVoice: {
              name: string;
              effect: string;
          };
          temperFlare: {
              name: string;
              effect: string;
          };
          supercellSlam: {
              name: string;
              effect: string;
          };
          psychicNoise: {
              name: string;
              effect: string;
          };
          upperHand: {
              name: string;
              effect: string;
          };
          malignantChain: {
              name: string;
              effect: string;
          };
      };
      nature: {
          Hardy: string;
          Lonely: string;
          Brave: string;
          Adamant: string;
          Naughty: string;
          Bold: string;
          Docile: string;
          Relaxed: string;
          Impish: string;
          Lax: string;
          Timid: string;
          Hasty: string;
          Serious: string;
          Jolly: string;
          Naive: string;
          Modest: string;
          Mild: string;
          Quiet: string;
          Bashful: string;
          Rash: string;
          Calm: string;
          Gentle: string;
          Sassy: string;
          Careful: string;
          Quirky: string;
      };
      pokeball: {
          pokeBall: string;
          greatBall: string;
          ultraBall: string;
          rogueBall: string;
          masterBall: string;
          luxuryBall: string;
      };
      pokemon: {
          type_null: string;
          great_tusk: string;
          scream_tail: string;
          brute_bonnet: string;
          flutter_mane: string;
          slither_wing: string;
          sandy_shocks: string;
          iron_treads: string;
          iron_bundle: string;
          iron_hands: string;
          iron_jugulis: string;
          iron_moth: string;
          iron_thorns: string;
          roaring_moon: string;
          iron_valiant: string;
          walking_wake: string;
          iron_leaves: string;
          gouging_fire: string;
          raging_bolt: string;
          iron_boulder: string;
          iron_crown: string;
      };
      pokemonForm: {
          pikachuCosplay: string;
          pikachuCoolCosplay: string;
          pikachuBeautyCosplay: string;
          pikachuCuteCosplay: string;
          pikachuSmartCosplay: string;
          pikachuToughCosplay: string;
          pikachuPartner: string;
          eeveePartner: string;
          pichuSpiky: string;
          unownA: string;
          unownB: string;
          unownC: string;
          unownD: string;
          unownE: string;
          unownF: string;
          unownG: string;
          unownH: string;
          unownI: string;
          unownJ: string;
          unownK: string;
          unownL: string;
          unownM: string;
          unownN: string;
          unownO: string;
          unownP: string;
          unownQ: string;
          unownR: string;
          unownS: string;
          unownT: string;
          unownU: string;
          unownV: string;
          unownW: string;
          unownX: string;
          unownY: string;
          unownZ: string;
          unownExclamation: string;
          unownQuestion: string;
          castformSunny: string;
          castformRainy: string;
          castformSnowy: string;
          deoxysNormal: string;
          burmyPlant: string;
          burmySandy: string;
          burmyTrash: string;
          shellosEast: string;
          shellosWest: string;
          rotomHeat: string;
          rotomWash: string;
          rotomFrost: string;
          rotomFan: string;
          rotomMow: string;
          giratinaAltered: string;
          shayminLand: string;
          basculinRedStriped: string;
          basculinBlueStriped: string;
          basculinWhiteStriped: string;
          deerlingSpring: string;
          deerlingSummer: string;
          deerlingAutumn: string;
          deerlingWinter: string;
          tornadusIncarnate: string;
          thundurusIncarnate: string;
          landorusIncarnate: string;
          keldeoOrdinary: string;
          meloettaAria: string;
          meloettaPirouette: string;
          froakieBattleBond: string;
          scatterbugMeadow: string;
          scatterbugIcySnow: string;
          scatterbugPolar: string;
          scatterbugTundra: string;
          scatterbugContinental: string;
          scatterbugGarden: string;
          scatterbugElegant: string;
          scatterbugModern: string;
          scatterbugMarine: string;
          scatterbugArchipelago: string;
          scatterbugHighPlains: string;
          scatterbugSandstorm: string;
          scatterbugRiver: string;
          scatterbugMonsoon: string;
          scatterbugSavanna: string;
          scatterbugSun: string;
          scatterbugOcean: string;
          scatterbugJungle: string;
          scatterbugFancy: string;
          scatterbugPokeBall: string;
          flabebeRed: string;
          flabebeYellow: string;
          flabebeOrange: string;
          flabebeBlue: string;
          flabebeWhite: string;
          furfrouHeart: string;
          furfrouStar: string;
          furfrouDiamond: string;
          furfrouDebutante: string;
          furfrouMatron: string;
          furfrouDandy: string;
          furfrouLaReine: string;
          furfrouKabuki: string;
          furfrouPharaoh: string;
          pumpkabooSmall: string;
          pumpkabooLarge: string;
          pumpkabooSuper: string;
          xerneasNeutral: string;
          xerneasActive: string;
          zygarde50: string;
          zygarde10: string;
          zygarde50Pc: string;
          zygarde10Pc: string;
          zygardeComplete: string;
          oricorioBaile: string;
          oricorioPompom: string;
          oricorioPau: string;
          oricorioSensu: string;
          rockruffOwnTempo: string;
          miniorRedMeteor: string;
          miniorOrangeMeteor: string;
          miniorYellowMeteor: string;
          miniorGreenMeteor: string;
          miniorBlueMeteor: string;
          miniorIndigoMeteor: string;
          miniorVioletMeteor: string;
          miniorRed: string;
          miniorOrange: string;
          miniorYellow: string;
          miniorGreen: string;
          miniorBlue: string;
          miniorIndigo: string;
          miniorViolet: string;
          mimikyuDisguised: string;
          mimikyuBusted: string;
          magearnaOriginal: string;
          marshadowZenith: string;
          sinisteaPhony: string;
          sinisteaAntique: string;
          eiscueNoIce: string;
          indeedeeMale: string;
          indeedeeFemale: string;
          morpekoFullBelly: string;
          zacianHeroOfManyBattles: string;
          zamazentaHeroOfManyBattles: string;
          zarudeDada: string;
          enamorusIncarnate: string;
          squawkabillyGreenPlumage: string;
          squawkabillyBluePlumage: string;
          squawkabillyYellowPlumage: string;
          squawkabillyWhitePlumage: string;
          tatsugiriCurly: string;
          tatsugiriDroopy: string;
          tatsugiriStretchy: string;
          gimmighoulChest: string;
          gimmighoulRoaming: string;
          koraidonApexBuild: string;
          koraidonLimitedBuild: string;
          koraidonSprintingBuild: string;
          koraidonSwimmingBuild: string;
          koraidonGlidingBuild: string;
          miraidonUltimateMode: string;
          miraidonLowPowerMode: string;
          miraidonDriveMode: string;
          miraidonAquaticMode: string;
          miraidonGlideMode: string;
          poltchageistCounterfeit: string;
          poltchageistArtisan: string;
          paldeaTaurosCombat: string;
          paldeaTaurosBlaze: string;
          paldeaTaurosAqua: string;
      };
      pokemonInfo: {
          Stat: {
              HP: string;
              HPshortened: string;
              ATK: string;
              ATKshortened: string;
              DEF: string;
              DEFshortened: string;
              SPATK: string;
              SPATKshortened: string;
              SPDEF: string;
              SPDEFshortened: string;
              SPD: string;
              SPDshortened: string;
              ACC: string;
              EVA: string;
              HPStat: string;
          };
          Type: {
              UNKNOWN: string;
              NORMAL: string;
              FIGHTING: string;
              FLYING: string;
              POISON: string;
              GROUND: string;
              ROCK: string;
              BUG: string;
              GHOST: string;
              STEEL: string;
              FIRE: string;
              WATER: string;
              GRASS: string;
              ELECTRIC: string;
              PSYCHIC: string;
              ICE: string;
              DRAGON: string;
              DARK: string;
              FAIRY: string;
              STELLAR: string;
          };
      };
      pokemonInfoContainer: {
          moveset: string;
          gender: string;
          ability: string;
          nature: string;
          form: string;
      };
      pokemonSummary: {
          pokemonInfo: string;
          status: string;
          powerAccuracyCategory: string;
          type: string;
          unknownTrainer: string;
          ot: string;
          nature: string;
          expPoints: string;
          nextLv: string;
          cancel: string;
          memoString: string;
          metFragment: {
              normal: string;
              apparently: string;
          };
      };
      saveSlotSelectUiHandler: {
          overwriteData: string;
          loading: string;
          wave: string;
          lv: string;
          empty: string;
      };
      settings: {
          boy: string;
          girl: string;
          general: string;
          uiVolume: string;
          gamepadSupport: string;
          showBgmBar: string;
          moveTouchControls: string;
          shopOverlayOpacity: string;
          shopCursorTarget: string;
          rewards: string;
          reroll: string;
          shop: string;
          checkTeam: string;
      };
      splashMessages: {
          battlesWon: string;
          joinTheDiscord: string;
          infiniteLevels: string;
          everythingStacks: string;
          optionalSaveScumming: string;
          biomes: string;
          openSource: string;
          playWithSpeed: string;
          liveBugTesting: string;
          heavyInfluence: string;
          pokemonRiskAndPokemonRain: string;
          nowWithMoreSalt: string;
          infiniteFusionAtHome: string;
          brokenEggMoves: string;
          magnificent: string;
          mubstitute: string;
          thatsCrazy: string;
          oranceJuice: string;
          questionableBalancing: string;
          coolShaders: string;
          aiFree: string;
          suddenDifficultySpikes: string;
          basedOnAnUnfinishedFlashGame: string;
          moreAddictiveThanIntended: string;
          mostlyConsistentSeeds: string;
          achievementPointsDontDoAnything: string;
          youDoNotStartAtLevel: string;
          dontTalkAboutTheManaphyEggIncident: string;
          alsoTryPokengine: string;
          alsoTryEmeraldRogue: string;
          alsoTryRadicalRed: string;
          eeveeExpo: string;
          ynoproject: string;
          breedersInSpace: string;
      };
      starterSelectUiHandler: {
          confirmStartTeam: string;
          confirmExit: string;
          invalidParty: string;
          gen1: string;
          gen2: string;
          gen3: string;
          gen4: string;
          gen5: string;
          gen6: string;
          gen7: string;
          gen8: string;
          gen9: string;
          growthRate: string;
          ability: string;
          passive: string;
          nature: string;
          eggMoves: string;
          addToParty: string;
          removeFromParty: string;
          toggleIVs: string;
          manageMoves: string;
          manageNature: string;
          addToFavorites: string;
          removeFromFavorites: string;
          useCandies: string;
          selectNature: string;
          selectMoveSwapOut: string;
          selectMoveSwapWith: string;
          sameSpeciesEgg: string;
          unlockPassive: string;
          reduceCost: string;
          cycleShiny: string;
          cycleForm: string;
          cycleGender: string;
          cycleAbility: string;
          cycleNature: string;
          cycleVariant: string;
          goFilter: string;
          enablePassive: string;
          disablePassive: string;
          locked: string;
          disabled: string;
          uncaught: string;
      };
      statusEffect: {
          none: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
      };
      terrain: {
          misty: string;
          mistyStartMessage: string;
          mistyClearMessage: string;
          mistyBlockMessage: string;
          electric: string;
          electricStartMessage: string;
          electricClearMessage: string;
          grassy: string;
          grassyStartMessage: string;
          grassyClearMessage: string;
          psychic: string;
          psychicStartMessage: string;
          psychicClearMessage: string;
          defaultBlockMessage: string;
      };
      titles: {
          elite_four: string;
          elite_four_female: string;
          gym_leader: string;
          gym_leader_female: string;
          gym_leader_double: string;
          champion: string;
          champion_female: string;
          champion_double: string;
          rival: string;
          professor: string;
          frontier_brain: string;
          rocket_boss: string;
          magma_boss: string;
          aqua_boss: string;
          galactic_boss: string;
          plasma_boss: string;
          flare_boss: string;
          aether_boss: string;
          skull_boss: string;
          macro_boss: string;
          rocket_admin: string;
          rocket_admin_female: string;
          magma_admin: string;
          magma_admin_female: string;
          aqua_admin: string;
          aqua_admin_female: string;
          galactic_commander: string;
          galactic_commander_female: string;
          plasma_sage: string;
          plasma_admin: string;
          flare_admin: string;
          flare_admin_female: string;
          aether_admin: string;
          skull_admin: string;
          macro_admin: string;
      };
      trainerClasses: {
          ace_trainer: string;
          ace_trainer_female: string;
          ace_duo: string;
          artist: string;
          artist_female: string;
          backers: string;
          backpacker: string;
          backpacker_female: string;
          backpackers: string;
          baker: string;
          battle_girl: string;
          beauty: string;
          beginners: string;
          biker: string;
          black_belt: string;
          breeder: string;
          breeder_female: string;
          breeders: string;
          clerk: string;
          clerk_female: string;
          colleagues: string;
          crush_kin: string;
          cyclist: string;
          cyclist_female: string;
          cyclists: string;
          dancer: string;
          dancer_female: string;
          depot_agent: string;
          doctor: string;
          doctor_female: string;
          firebreather: string;
          fisherman: string;
          fisherman_female: string;
          gentleman: string;
          guitarist: string;
          guitarist_female: string;
          harlequin: string;
          hiker: string;
          hooligans: string;
          hoopster: string;
          infielder: string;
          janitor: string;
          lady: string;
          lass: string;
          linebacker: string;
          maid: string;
          madame: string;
          medical_team: string;
          musician: string;
          hex_maniac: string;
          nurse: string;
          nursery_aide: string;
          officer: string;
          parasol_lady: string;
          pilot: string;
          pokéfan: string;
          pokéfan_female: string;
          pokéfan_family: string;
          preschooler: string;
          preschooler_female: string;
          preschoolers: string;
          psychic: string;
          psychic_female: string;
          psychics: string;
          pokémon_ranger: string;
          pokémon_ranger_female: string;
          pokémon_rangers: string;
          ranger: string;
          restaurant_staff: string;
          rich: string;
          rich_female: string;
          rich_boy: string;
          rich_couple: string;
          rich_kid: string;
          rich_kid_female: string;
          rich_kids: string;
          roughneck: string;
          sailor: string;
          scientist: string;
          scientist_female: string;
          scientists: string;
          smasher: string;
          snow_worker: string;
          snow_worker_female: string;
          striker: string;
          school_kid: string;
          school_kid_female: string;
          school_kids: string;
          swimmer: string;
          swimmer_female: string;
          swimmers: string;
          twins: string;
          veteran: string;
          veteran_female: string;
          veteran_duo: string;
          waiter: string;
          waitress: string;
          worker: string;
          worker_female: string;
          workers: string;
          youngster: string;
          rocket_grunt: string;
          rocket_grunt_female: string;
          rocket_grunts: string;
          magma_grunt: string;
          magma_grunt_female: string;
          magma_grunts: string;
          aqua_grunt: string;
          aqua_grunt_female: string;
          aqua_grunts: string;
          galactic_grunt: string;
          galactic_grunt_female: string;
          galactic_grunts: string;
          plasma_grunt: string;
          plasma_grunt_female: string;
          plasma_grunts: string;
          flare_grunt: string;
          flare_grunt_female: string;
          flare_grunts: string;
          aether_grunt: string;
          aether_grunt_female: string;
          aether_grunts: string;
          skull_grunt: string;
          skull_grunt_female: string;
          skull_grunts: string;
          macro_grunt: string;
          macro_grunt_female: string;
          macro_grunts: string;
      };
      trainerNames: {
          brock: string;
          misty: string;
          lt_surge: string;
          erika: string;
          janine: string;
          sabrina: string;
          blaine: string;
          giovanni: string;
          falkner: string;
          bugsy: string;
          whitney: string;
          morty: string;
          chuck: string;
          jasmine: string;
          pryce: string;
          clair: string;
          roxanne: string;
          brawly: string;
          wattson: string;
          flannery: string;
          norman: string;
          winona: string;
          tate: string;
          liza: string;
          juan: string;
          roark: string;
          gardenia: string;
          maylene: string;
          crasher_wake: string;
          fantina: string;
          byron: string;
          candice: string;
          volkner: string;
          cilan: string;
          chili: string;
          cress: string;
          cheren: string;
          lenora: string;
          roxie: string;
          burgh: string;
          elesa: string;
          clay: string;
          skyla: string;
          brycen: string;
          drayden: string;
          marlon: string;
          viola: string;
          grant: string;
          korrina: string;
          ramos: string;
          clemont: string;
          valerie: string;
          olympia: string;
          wulfric: string;
          milo: string;
          nessa: string;
          kabu: string;
          bea: string;
          allister: string;
          opal: string;
          bede: string;
          gordie: string;
          melony: string;
          piers: string;
          marnie: string;
          raihan: string;
          katy: string;
          brassius: string;
          iono: string;
          kofu: string;
          larry: string;
          ryme: string;
          tulip: string;
          grusha: string;
          lorelei: string;
          bruno: string;
          agatha: string;
          lance: string;
          will: string;
          koga: string;
          karen: string;
          sidney: string;
          phoebe: string;
          glacia: string;
          drake: string;
          aaron: string;
          bertha: string;
          flint: string;
          lucian: string;
          shauntal: string;
          marshal: string;
          grimsley: string;
          caitlin: string;
          malva: string;
          siebold: string;
          wikstrom: string;
          drasna: string;
          hala: string;
          molayne: string;
          olivia: string;
          acerola: string;
          kahili: string;
          rika: string;
          poppy: string;
          hassel: string;
          crispin: string;
          amarys: string;
          lacey: string;
          drayton: string;
          blue: string;
          red: string;
          steven: string;
          wallace: string;
          cynthia: string;
          alder: string;
          iris: string;
          diantha: string;
          hau: string;
          geeta: string;
          nemona: string;
          kieran: string;
          leon: string;
          rival: string;
          rival_female: string;
          archer: string;
          ariana: string;
          proton: string;
          petrel: string;
          tabitha: string;
          courtney: string;
          shelly: string;
          matt: string;
          mars: string;
          jupiter: string;
          saturn: string;
          zinzolin: string;
          rood: string;
          xerosic: string;
          bryony: string;
          faba: string;
          maxie: string;
          archie: string;
          cyrus: string;
          ghetsis: string;
          lysandre: string;
          lusamine: string;
          guzma: string;
          blue_red_double: string;
          red_blue_double: string;
          tate_liza_double: string;
          liza_tate_double: string;
          steven_wallace_double: string;
          wallace_steven_double: string;
          alder_iris_double: string;
          iris_alder_double: string;
          marnie_piers_double: string;
          piers_marnie_double: string;
      };
      tutorial: {
          intro: string;
          accessMenu: string;
          menu: string;
          starterSelect: string;
          pokerus: string;
          statChange: string;
          selectItem: string;
          eggGacha: string;
      };
      voucher: {
          vouchers: string;
          eggVoucher: string;
          eggVoucherPlus: string;
          eggVoucherPremium: string;
          eggVoucherGold: string;
          locked: string;
          defeatTrainer: string;
      };
      weather: {
          sunnyStartMessage: string;
          sunnyLapseMessage: string;
          sunnyClearMessage: string;
          rainStartMessage: string;
          rainLapseMessage: string;
          rainClearMessage: string;
          sandstormStartMessage: string;
          sandstormLapseMessage: string;
          sandstormClearMessage: string;
          sandstormDamageMessage: string;
          hailStartMessage: string;
          hailLapseMessage: string;
          hailClearMessage: string;
          hailDamageMessage: string;
          snowStartMessage: string;
          snowLapseMessage: string;
          snowClearMessage: string;
          fogStartMessage: string;
          fogLapseMessage: string;
          fogClearMessage: string;
          heavyRainStartMessage: string;
          heavyRainLapseMessage: string;
          heavyRainClearMessage: string;
          harshSunStartMessage: string;
          harshSunLapseMessage: string;
          harshSunClearMessage: string;
          strongWindsStartMessage: string;
          strongWindsLapseMessage: string;
          strongWindsEffectMessage: string;
          strongWindsClearMessage: string;
      };
      partyUiHandler: {
          SEND_OUT: string;
          SUMMARY: string;
          CANCEL: string;
          RELEASE: string;
          APPLY: string;
          TEACH: string;
          SPLICE: string;
          UNSPLICE: string;
          ACTIVATE: string;
          DEACTIVATE: string;
          TRANSFER: string;
          ALL: string;
          PASS_BATON: string;
          UNPAUSE_EVOLUTION: string;
          REVIVE: string;
          RENAME: string;
          choosePokemon: string;
          doWhatWithThisPokemon: string;
          noEnergy: string;
          hasEnergy: string;
          cantBeUsed: string;
          tooManyItems: string;
          anyEffect: string;
          unpausedEvolutions: string;
          unspliceConfirmation: string;
          wasReverted: string;
          releaseConfirmation: string;
          releaseInBattle: string;
          selectAMove: string;
          changeQuantity: string;
          selectAnotherPokemonToSplice: string;
          cancel: string;
          able: string;
          notAble: string;
          learned: string;
          goodbye: string;
          byebye: string;
          farewell: string;
          soLong: string;
          thisIsWhereWePart: string;
          illMissYou: string;
          illNeverForgetYou: string;
          untilWeMeetAgain: string;
          sayonara: string;
          smellYaLater: string;
      };
      modifierSelectUiHandler: {
          transfer: string;
          reroll: string;
          lockRarities: string;
          checkTeam: string;
          transferDesc: string;
          rerollDesc: string;
          lockRaritiesDesc: string;
          checkTeamDesc: string;
          rerollCost: string;
          itemCost: string;
      };
      moveTriggers: {
          hitWithRecoil: string;
          cutHpPowerUpMove: string;
          absorbedElectricity: string;
          switchedStatChanges: string;
          switchedTwoStatChanges: string;
          switchedStat: string;
          sharedGuard: string;
          sharedPower: string;
          goingAllOutForAttack: string;
          regainedHealth: string;
          keptGoingAndCrashed: string;
          fled: string;
          cannotBeSwitchedOut: string;
          swappedAbilitiesWithTarget: string;
          coinsScatteredEverywhere: string;
          attackedByItem: string;
          whippedUpAWhirlwind: string;
          flewUpHigh: string;
          tookInSunlight: string;
          dugAHole: string;
          loweredItsHead: string;
          isGlowing: string;
          bellChimed: string;
          foresawAnAttack: string;
          isTighteningFocus: string;
          hidUnderwater: string;
          soothingAromaWaftedThroughArea: string;
          sprangUp: string;
          choseDoomDesireAsDestiny: string;
          vanishedInstantly: string;
          tookTargetIntoSky: string;
          becameCloakedInFreezingLight: string;
          becameCloakedInFreezingAir: string;
          isChargingPower: string;
          burnedItselfOut: string;
          startedHeatingUpBeak: string;
          setUpShellTrap: string;
          isOverflowingWithSpacePower: string;
          usedUpAllElectricity: string;
          stoleItem: string;
          incineratedItem: string;
          knockedOffItem: string;
          tookMoveAttack: string;
          cutOwnHpAndMaximizedStat: string;
          copiedStatChanges: string;
          magnitudeMessage: string;
          tookAimAtTarget: string;
          transformedIntoType: string;
          copiedMove: string;
          sketchedMove: string;
          acquiredAbility: string;
          copiedTargetAbility: string;
          transformedIntoTarget: string;
          tryingToTakeFoeDown: string;
          addType: string;
          cannotUseMove: string;
          healHp: string;
          sacrificialFullRestore: string;
          invertStats: string;
          resetStats: string;
          statEliminated: string;
          faintCountdown: string;
          copyType: string;
          suppressAbilities: string;
          revivalBlessing: string;
          swapArenaTags: string;
          exposedMove: string;
          safeguard: string;
      };
      runHistory: {
          victory: string;
          defeatedWild: string;
          defeatedTrainer: string;
          defeatedTrainerDouble: string;
          defeatedRival: string;
          defeated: string;
          defeatedWild_female: string;
          defeatedTrainer_female: string;
          defeatedTrainerDouble_female: string;
          defeatedRival_female: string;
          defeated_female: string;
          luck: string;
          score: string;
          mode: string;
          challengeRules: string;
          challengeMonoGen1: string;
          challengeMonoGen2: string;
          challengeMonoGen3: string;
          challengeMonoGen4: string;
          challengeMonoGen5: string;
          challengeMonoGen6: string;
          challengeMonoGen7: string;
          challengeMonoGen8: string;
          challengeMonoGen9: string;
          playerItems: string;
          personalBest: string;
          SPDshortened: string;
          runInfo: string;
          money: string;
          runLength: string;
          viewHeldItems: string;
          hallofFameText: string;
          hallofFameText_female: string;
          viewHallOfFame: string;
          viewEndingSplash: string;
      };
  };
  
}

declare namespace PokeRogue.locales.ja {
  export declare const jaConfig: {
      ability: {
          stench: {
              name: string;
              description: string;
          };
          drizzle: {
              name: string;
              description: string;
          };
          speedBoost: {
              name: string;
              description: string;
          };
          battleArmor: {
              name: string;
              description: string;
          };
          sturdy: {
              name: string;
              description: string;
          };
          damp: {
              name: string;
              description: string;
          };
          limber: {
              name: string;
              description: string;
          };
          sandVeil: {
              name: string;
              description: string;
          };
          static: {
              name: string;
              description: string;
          };
          voltAbsorb: {
              name: string;
              description: string;
          };
          waterAbsorb: {
              name: string;
              description: string;
          };
          oblivious: {
              name: string;
              description: string;
          };
          cloudNine: {
              name: string;
              description: string;
          };
          compoundEyes: {
              name: string;
              description: string;
          };
          insomnia: {
              name: string;
              description: string;
          };
          colorChange: {
              name: string;
              description: string;
          };
          immunity: {
              name: string;
              description: string;
          };
          flashFire: {
              name: string;
              description: string;
          };
          shieldDust: {
              name: string;
              description: string;
          };
          ownTempo: {
              name: string;
              description: string;
          };
          suctionCups: {
              name: string;
              description: string;
          };
          intimidate: {
              name: string;
              description: string;
          };
          shadowTag: {
              name: string;
              description: string;
          };
          roughSkin: {
              name: string;
              description: string;
          };
          wonderGuard: {
              name: string;
              description: string;
          };
          levitate: {
              name: string;
              description: string;
          };
          effectSpore: {
              name: string;
              description: string;
          };
          synchronize: {
              name: string;
              description: string;
          };
          clearBody: {
              name: string;
              description: string;
          };
          naturalCure: {
              name: string;
              description: string;
          };
          lightningRod: {
              name: string;
              description: string;
          };
          sereneGrace: {
              name: string;
              description: string;
          };
          swiftSwim: {
              name: string;
              description: string;
          };
          chlorophyll: {
              name: string;
              description: string;
          };
          illuminate: {
              name: string;
              description: string;
          };
          trace: {
              name: string;
              description: string;
          };
          hugePower: {
              name: string;
              description: string;
          };
          poisonPoint: {
              name: string;
              description: string;
          };
          innerFocus: {
              name: string;
              description: string;
          };
          magmaArmor: {
              name: string;
              description: string;
          };
          waterVeil: {
              name: string;
              description: string;
          };
          magnetPull: {
              name: string;
              description: string;
          };
          soundproof: {
              name: string;
              description: string;
          };
          rainDish: {
              name: string;
              description: string;
          };
          sandStream: {
              name: string;
              description: string;
          };
          pressure: {
              name: string;
              description: string;
          };
          thickFat: {
              name: string;
              description: string;
          };
          earlyBird: {
              name: string;
              description: string;
          };
          flameBody: {
              name: string;
              description: string;
          };
          runAway: {
              name: string;
              description: string;
          };
          keenEye: {
              name: string;
              description: string;
          };
          hyperCutter: {
              name: string;
              description: string;
          };
          pickup: {
              name: string;
              description: string;
          };
          truant: {
              name: string;
              description: string;
          };
          hustle: {
              name: string;
              description: string;
          };
          cuteCharm: {
              name: string;
              description: string;
          };
          plus: {
              name: string;
              description: string;
          };
          minus: {
              name: string;
              description: string;
          };
          forecast: {
              name: string;
              description: string;
          };
          stickyHold: {
              name: string;
              description: string;
          };
          shedSkin: {
              name: string;
              description: string;
          };
          guts: {
              name: string;
              description: string;
          };
          marvelScale: {
              name: string;
              description: string;
          };
          liquidOoze: {
              name: string;
              description: string;
          };
          overgrow: {
              name: string;
              description: string;
          };
          blaze: {
              name: string;
              description: string;
          };
          torrent: {
              name: string;
              description: string;
          };
          swarm: {
              name: string;
              description: string;
          };
          rockHead: {
              name: string;
              description: string;
          };
          drought: {
              name: string;
              description: string;
          };
          arenaTrap: {
              name: string;
              description: string;
          };
          vitalSpirit: {
              name: string;
              description: string;
          };
          whiteSmoke: {
              name: string;
              description: string;
          };
          purePower: {
              name: string;
              description: string;
          };
          shellArmor: {
              name: string;
              description: string;
          };
          airLock: {
              name: string;
              description: string;
          };
          tangledFeet: {
              name: string;
              description: string;
          };
          motorDrive: {
              name: string;
              description: string;
          };
          rivalry: {
              name: string;
              description: string;
          };
          steadfast: {
              name: string;
              description: string;
          };
          snowCloak: {
              name: string;
              description: string;
          };
          gluttony: {
              name: string;
              description: string;
          };
          angerPoint: {
              name: string;
              description: string;
          };
          unburden: {
              name: string;
              description: string;
          };
          heatproof: {
              name: string;
              description: string;
          };
          simple: {
              name: string;
              description: string;
          };
          drySkin: {
              name: string;
              description: string;
          };
          download: {
              name: string;
              description: string;
          };
          ironFist: {
              name: string;
              description: string;
          };
          poisonHeal: {
              name: string;
              description: string;
          };
          adaptability: {
              name: string;
              description: string;
          };
          skillLink: {
              name: string;
              description: string;
          };
          hydration: {
              name: string;
              description: string;
          };
          solarPower: {
              name: string;
              description: string;
          };
          quickFeet: {
              name: string;
              description: string;
          };
          normalize: {
              name: string;
              description: string;
          };
          sniper: {
              name: string;
              description: string;
          };
          magicGuard: {
              name: string;
              description: string;
          };
          noGuard: {
              name: string;
              description: string;
          };
          stall: {
              name: string;
              description: string;
          };
          technician: {
              name: string;
              description: string;
          };
          leafGuard: {
              name: string;
              description: string;
          };
          klutz: {
              name: string;
              description: string;
          };
          moldBreaker: {
              name: string;
              description: string;
          };
          superLuck: {
              name: string;
              description: string;
          };
          aftermath: {
              name: string;
              description: string;
          };
          anticipation: {
              name: string;
              description: string;
          };
          forewarn: {
              name: string;
              description: string;
          };
          unaware: {
              name: string;
              description: string;
          };
          tintedLens: {
              name: string;
              description: string;
          };
          filter: {
              name: string;
              description: string;
          };
          slowStart: {
              name: string;
              description: string;
          };
          scrappy: {
              name: string;
              description: string;
          };
          stormDrain: {
              name: string;
              description: string;
          };
          iceBody: {
              name: string;
              description: string;
          };
          solidRock: {
              name: string;
              description: string;
          };
          snowWarning: {
              name: string;
              description: string;
          };
          honeyGather: {
              name: string;
              description: string;
          };
          frisk: {
              name: string;
              description: string;
          };
          reckless: {
              name: string;
              description: string;
          };
          multitype: {
              name: string;
              description: string;
          };
          flowerGift: {
              name: string;
              description: string;
          };
          badDreams: {
              name: string;
              description: string;
          };
          pickpocket: {
              name: string;
              description: string;
          };
          sheerForce: {
              name: string;
              description: string;
          };
          contrary: {
              name: string;
              description: string;
          };
          unnerve: {
              name: string;
              description: string;
          };
          defiant: {
              name: string;
              description: string;
          };
          defeatist: {
              name: string;
              description: string;
          };
          cursedBody: {
              name: string;
              description: string;
          };
          healer: {
              name: string;
              description: string;
          };
          friendGuard: {
              name: string;
              description: string;
          };
          weakArmor: {
              name: string;
              description: string;
          };
          heavyMetal: {
              name: string;
              description: string;
          };
          lightMetal: {
              name: string;
              description: string;
          };
          multiscale: {
              name: string;
              description: string;
          };
          toxicBoost: {
              name: string;
              description: string;
          };
          flareBoost: {
              name: string;
              description: string;
          };
          harvest: {
              name: string;
              description: string;
          };
          telepathy: {
              name: string;
              description: string;
          };
          moody: {
              name: string;
              description: string;
          };
          overcoat: {
              name: string;
              description: string;
          };
          poisonTouch: {
              name: string;
              description: string;
          };
          regenerator: {
              name: string;
              description: string;
          };
          bigPecks: {
              name: string;
              description: string;
          };
          sandRush: {
              name: string;
              description: string;
          };
          wonderSkin: {
              name: string;
              description: string;
          };
          analytic: {
              name: string;
              description: string;
          };
          illusion: {
              name: string;
              description: string;
          };
          imposter: {
              name: string;
              description: string;
          };
          infiltrator: {
              name: string;
              description: string;
          };
          mummy: {
              name: string;
              description: string;
          };
          moxie: {
              name: string;
              description: string;
          };
          justified: {
              name: string;
              description: string;
          };
          rattled: {
              name: string;
              description: string;
          };
          magicBounce: {
              name: string;
              description: string;
          };
          sapSipper: {
              name: string;
              description: string;
          };
          prankster: {
              name: string;
              description: string;
          };
          sandForce: {
              name: string;
              description: string;
          };
          ironBarbs: {
              name: string;
              description: string;
          };
          zenMode: {
              name: string;
              description: string;
          };
          victoryStar: {
              name: string;
              description: string;
          };
          turboblaze: {
              name: string;
              description: string;
          };
          teravolt: {
              name: string;
              description: string;
          };
          aromaVeil: {
              name: string;
              description: string;
          };
          flowerVeil: {
              name: string;
              description: string;
          };
          cheekPouch: {
              name: string;
              description: string;
          };
          protean: {
              name: string;
              description: string;
          };
          furCoat: {
              name: string;
              description: string;
          };
          magician: {
              name: string;
              description: string;
          };
          bulletproof: {
              name: string;
              description: string;
          };
          competitive: {
              name: string;
              description: string;
          };
          strongJaw: {
              name: string;
              description: string;
          };
          refrigerate: {
              name: string;
              description: string;
          };
          sweetVeil: {
              name: string;
              description: string;
          };
          stanceChange: {
              name: string;
              description: string;
          };
          galeWings: {
              name: string;
              description: string;
          };
          megaLauncher: {
              name: string;
              description: string;
          };
          grassPelt: {
              name: string;
              description: string;
          };
          symbiosis: {
              name: string;
              description: string;
          };
          toughClaws: {
              name: string;
              description: string;
          };
          pixilate: {
              name: string;
              description: string;
          };
          gooey: {
              name: string;
              description: string;
          };
          aerilate: {
              name: string;
              description: string;
          };
          parentalBond: {
              name: string;
              description: string;
          };
          darkAura: {
              name: string;
              description: string;
          };
          fairyAura: {
              name: string;
              description: string;
          };
          auraBreak: {
              name: string;
              description: string;
          };
          primordialSea: {
              name: string;
              description: string;
          };
          desolateLand: {
              name: string;
              description: string;
          };
          deltaStream: {
              name: string;
              description: string;
          };
          stamina: {
              name: string;
              description: string;
          };
          wimpOut: {
              name: string;
              description: string;
          };
          emergencyExit: {
              name: string;
              description: string;
          };
          waterCompaction: {
              name: string;
              description: string;
          };
          merciless: {
              name: string;
              description: string;
          };
          shieldsDown: {
              name: string;
              description: string;
          };
          stakeout: {
              name: string;
              description: string;
          };
          waterBubble: {
              name: string;
              description: string;
          };
          steelworker: {
              name: string;
              description: string;
          };
          berserk: {
              name: string;
              description: string;
          };
          slushRush: {
              name: string;
              description: string;
          };
          longReach: {
              name: string;
              description: string;
          };
          liquidVoice: {
              name: string;
              description: string;
          };
          triage: {
              name: string;
              description: string;
          };
          galvanize: {
              name: string;
              description: string;
          };
          surgeSurfer: {
              name: string;
              description: string;
          };
          schooling: {
              name: string;
              description: string;
          };
          disguise: {
              name: string;
              description: string;
          };
          battleBond: {
              name: string;
              description: string;
          };
          powerConstruct: {
              name: string;
              description: string;
          };
          corrosion: {
              name: string;
              description: string;
          };
          comatose: {
              name: string;
              description: string;
          };
          queenlyMajesty: {
              name: string;
              description: string;
          };
          innardsOut: {
              name: string;
              description: string;
          };
          dancer: {
              name: string;
              description: string;
          };
          battery: {
              name: string;
              description: string;
          };
          fluffy: {
              name: string;
              description: string;
          };
          dazzling: {
              name: string;
              description: string;
          };
          soulHeart: {
              name: string;
              description: string;
          };
          tanglingHair: {
              name: string;
              description: string;
          };
          receiver: {
              name: string;
              description: string;
          };
          powerOfAlchemy: {
              name: string;
              description: string;
          };
          beastBoost: {
              name: string;
              description: string;
          };
          rksSystem: {
              name: string;
              description: string;
          };
          electricSurge: {
              name: string;
              description: string;
          };
          psychicSurge: {
              name: string;
              description: string;
          };
          mistySurge: {
              name: string;
              description: string;
          };
          grassySurge: {
              name: string;
              description: string;
          };
          fullMetalBody: {
              name: string;
              description: string;
          };
          shadowShield: {
              name: string;
              description: string;
          };
          prismArmor: {
              name: string;
              description: string;
          };
          neuroforce: {
              name: string;
              description: string;
          };
          intrepidSword: {
              name: string;
              description: string;
          };
          dauntlessShield: {
              name: string;
              description: string;
          };
          libero: {
              name: string;
              description: string;
          };
          ballFetch: {
              name: string;
              description: string;
          };
          cottonDown: {
              name: string;
              description: string;
          };
          propellerTail: {
              name: string;
              description: string;
          };
          mirrorArmor: {
              name: string;
              description: string;
          };
          gulpMissile: {
              name: string;
              description: string;
          };
          stalwart: {
              name: string;
              description: string;
          };
          steamEngine: {
              name: string;
              description: string;
          };
          punkRock: {
              name: string;
              description: string;
          };
          sandSpit: {
              name: string;
              description: string;
          };
          iceScales: {
              name: string;
              description: string;
          };
          ripen: {
              name: string;
              description: string;
          };
          iceFace: {
              name: string;
              description: string;
          };
          powerSpot: {
              name: string;
              description: string;
          };
          mimicry: {
              name: string;
              description: string;
          };
          screenCleaner: {
              name: string;
              description: string;
          };
          steelySpirit: {
              name: string;
              description: string;
          };
          perishBody: {
              name: string;
              description: string;
          };
          wanderingSpirit: {
              name: string;
              description: string;
          };
          gorillaTactics: {
              name: string;
              description: string;
          };
          neutralizingGas: {
              name: string;
              description: string;
          };
          pastelVeil: {
              name: string;
              description: string;
          };
          hungerSwitch: {
              name: string;
              description: string;
          };
          quickDraw: {
              name: string;
              description: string;
          };
          unseenFist: {
              name: string;
              description: string;
          };
          curiousMedicine: {
              name: string;
              description: string;
          };
          transistor: {
              name: string;
              description: string;
          };
          dragonsMaw: {
              name: string;
              description: string;
          };
          chillingNeigh: {
              name: string;
              description: string;
          };
          grimNeigh: {
              name: string;
              description: string;
          };
          asOneGlastrier: {
              name: string;
              description: string;
          };
          asOneSpectrier: {
              name: string;
              description: string;
          };
          lingeringAroma: {
              name: string;
              description: string;
          };
          seedSower: {
              name: string;
              description: string;
          };
          thermalExchange: {
              name: string;
              description: string;
          };
          angerShell: {
              name: string;
              description: string;
          };
          purifyingSalt: {
              name: string;
              description: string;
          };
          wellBakedBody: {
              name: string;
              description: string;
          };
          windRider: {
              name: string;
              description: string;
          };
          guardDog: {
              name: string;
              description: string;
          };
          rockyPayload: {
              name: string;
              description: string;
          };
          windPower: {
              name: string;
              description: string;
          };
          zeroToHero: {
              name: string;
              description: string;
          };
          commander: {
              name: string;
              description: string;
          };
          electromorphosis: {
              name: string;
              description: string;
          };
          protosynthesis: {
              name: string;
              description: string;
          };
          quarkDrive: {
              name: string;
              description: string;
          };
          goodAsGold: {
              name: string;
              description: string;
          };
          vesselOfRuin: {
              name: string;
              description: string;
          };
          swordOfRuin: {
              name: string;
              description: string;
          };
          tabletsOfRuin: {
              name: string;
              description: string;
          };
          beadsOfRuin: {
              name: string;
              description: string;
          };
          orichalcumPulse: {
              name: string;
              description: string;
          };
          hadronEngine: {
              name: string;
              description: string;
          };
          opportunist: {
              name: string;
              description: string;
          };
          cudChew: {
              name: string;
              description: string;
          };
          sharpness: {
              name: string;
              description: string;
          };
          supremeOverlord: {
              name: string;
              description: string;
          };
          costar: {
              name: string;
              description: string;
          };
          toxicDebris: {
              name: string;
              description: string;
          };
          armorTail: {
              name: string;
              description: string;
          };
          earthEater: {
              name: string;
              description: string;
          };
          myceliumMight: {
              name: string;
              description: string;
          };
          mindsEye: {
              name: string;
              description: string;
          };
          supersweetSyrup: {
              name: string;
              description: string;
          };
          hospitality: {
              name: string;
              description: string;
          };
          toxicChain: {
              name: string;
              description: string;
          };
          embodyAspectTeal: {
              name: string;
              description: string;
          };
          embodyAspectWellspring: {
              name: string;
              description: string;
          };
          embodyAspectHearthflame: {
              name: string;
              description: string;
          };
          embodyAspectCornerstone: {
              name: string;
              description: string;
          };
          teraShift: {
              name: string;
              description: string;
          };
          teraShell: {
              name: string;
              description: string;
          };
          teraformZero: {
              name: string;
              description: string;
          };
          poisonPuppeteer: {
              name: string;
              description: string;
          };
      };
      abilityTriggers: {
          blockRecoilDamage: string;
          badDreams: string;
          costar: string;
          iceFaceAvoidedDamage: string;
          perishBody: string;
          poisonHeal: string;
          trace: string;
          windPowerCharged: string;
          quickDraw: string;
          disguiseAvoidedDamage: string;
          blockItemTheft: string;
          typeImmunityHeal: string;
          nonSuperEffectiveImmunity: string;
          moveImmunity: string;
          reverseDrain: string;
          postDefendTypeChange: string;
          postDefendContactDamage: string;
          postDefendAbilitySwap: string;
          postDefendAbilityGive: string;
          postDefendMoveDisable: string;
          pokemonTypeChange: string;
          postAttackStealHeldItem: string;
          postDefendStealHeldItem: string;
          copyFaintedAllyAbility: string;
          intimidateImmunity: string;
          postSummonAllyHeal: string;
          postSummonClearAllyStats: string;
          postSummonTransform: string;
          protectStat: string;
          statusEffectImmunityWithName: string;
          statusEffectImmunity: string;
          battlerTagImmunity: string;
          forewarn: string;
          frisk: string;
          postWeatherLapseHeal: string;
          postWeatherLapseDamage: string;
          postTurnLootCreateEatenBerry: string;
          postTurnHeal: string;
          fetchBall: string;
          healFromBerryUse: string;
          arenaTrap: string;
          postBattleLoot: string;
          postFaintContactDamage: string;
          postFaintHpDamage: string;
          postSummonPressure: string;
          weatherEffectDisappeared: string;
          postSummonMoldBreaker: string;
          postSummonAnticipation: string;
          postSummonTurboblaze: string;
          postSummonTeravolt: string;
          postSummonDarkAura: string;
          postSummonFairyAura: string;
          postSummonNeutralizingGas: string;
          postSummonAsOneGlastrier: string;
          postSummonAsOneSpectrier: string;
          postSummonVesselOfRuin: string;
          postSummonSwordOfRuin: string;
          postSummonTabletsOfRuin: string;
          postSummonBeadsOfRuin: string;
          preventBerryUse: string;
      };
      arenaFlyout: {
          activeBattleEffects: string;
          player: string;
          neutral: string;
          enemy: string;
          sunny: string;
          rain: string;
          sandstorm: string;
          hail: string;
          snow: string;
          fog: string;
          heavyRain: string;
          harshSun: string;
          strongWinds: string;
          misty: string;
          electric: string;
          grassy: string;
          psychic: string;
          mudSport: string;
          waterSport: string;
          spikes: string;
          toxicSpikes: string;
          mist: string;
          futureSight: string;
          doomDesire: string;
          wish: string;
          stealthRock: string;
          stickyWeb: string;
          trickRoom: string;
          gravity: string;
          reflect: string;
          lightScreen: string;
          auroraVeil: string;
          quickGuard: string;
          wideGuard: string;
          matBlock: string;
          craftyShield: string;
          tailwind: string;
          happyHour: string;
      };
      arenaTag: {
          yourTeam: string;
          opposingTeam: string;
          arenaOnRemove: string;
          arenaOnRemovePlayer: string;
          arenaOnRemoveEnemy: string;
          mistOnAdd: string;
          mistApply: string;
          reflectOnAdd: string;
          reflectOnAddPlayer: string;
          reflectOnAddEnemy: string;
          lightScreenOnAdd: string;
          lightScreenOnAddPlayer: string;
          lightScreenOnAddEnemy: string;
          auroraVeilOnAdd: string;
          auroraVeilOnAddPlayer: string;
          auroraVeilOnAddEnemy: string;
          conditionalProtectOnAdd: string;
          conditionalProtectOnAddPlayer: string;
          conditionalProtectOnAddEnemy: string;
          conditionalProtectApply: string;
          matBlockOnAdd: string;
          noCritOnAddPlayer: string;
          noCritOnAddEnemy: string;
          noCritOnRemove: string;
          wishTagOnAdd: string;
          mudSportOnAdd: string;
          mudSportOnRemove: string;
          waterSportOnAdd: string;
          waterSportOnRemove: string;
          spikesOnAdd: string;
          spikesActivateTrap: string;
          toxicSpikesOnAdd: string;
          toxicSpikesActivateTrapPoison: string;
          stealthRockOnAdd: string;
          stealthRockActivateTrap: string;
          stickyWebOnAdd: string;
          stickyWebActivateTrap: string;
          trickRoomOnAdd: string;
          trickRoomOnRemove: string;
          gravityOnAdd: string;
          gravityOnRemove: string;
          tailwindOnAdd: string;
          tailwindOnAddPlayer: string;
          tailwindOnAddEnemy: string;
          tailwindOnRemove: string;
          tailwindOnRemovePlayer: string;
          tailwindOnRemoveEnemy: string;
          happyHourOnAdd: string;
          happyHourOnRemove: string;
      };
      battle: {
          bossAppeared: string;
          trainerAppeared: string;
          trainerAppearedDouble: string;
          trainerSendOut: string;
          singleWildAppeared: string;
          multiWildAppeared: string;
          playerComeBack: string;
          trainerComeBack: string;
          playerGo: string;
          trainerGo: string;
          switchQuestion: string;
          trainerDefeated: string;
          moneyWon: string;
          moneyPickedUp: string;
          pokemonCaught: string;
          addedAsAStarter: string;
          partyFull: string;
          pokemon: string;
          sendOutPokemon: string;
          hitResultCriticalHit: string;
          hitResultSuperEffective: string;
          hitResultNotVeryEffective: string;
          hitResultNoEffect: string;
          hitResultImmune: string;
          hitResultOneHitKO: string;
          attackFailed: string;
          attackMissed: string;
          attackHitsCount: string;
          rewardGain: string;
          expGain: string;
          levelUp: string;
          learnMove: string;
          learnMovePrompt: string;
          learnMoveLimitReached: string;
          learnMoveReplaceQuestion: string;
          learnMoveStopTeaching: string;
          learnMoveNotLearned: string;
          learnMoveForgetQuestion: string;
          learnMoveForgetSuccess: string;
          countdownPoof: string;
          learnMoveAnd: string;
          levelCapUp: string;
          moveNotImplemented: string;
          moveNoPP: string;
          moveDisabled: string;
          noPokeballForce: string;
          noPokeballTrainer: string;
          noPokeballMulti: string;
          noPokeballStrong: string;
          noEscapeForce: string;
          noEscapeTrainer: string;
          noEscapePokemon: string;
          runAwaySuccess: string;
          runAwayCannotEscape: string;
          escapeVerbSwitch: string;
          escapeVerbFlee: string;
          notDisabled: string;
          turnEndHpRestore: string;
          hpIsFull: string;
          skipItemQuestion: string;
          itemStackFull: string;
          eggHatching: string;
          ivScannerUseQuestion: string;
          wildPokemonWithAffix: string;
          foePokemonWithAffix: string;
          useMove: string;
          drainMessage: string;
          regainHealth: string;
          stealEatBerry: string;
          ppHealBerry: string;
          hpHealBerry: string;
          fainted: string;
          statsAnd: string;
          stats: string;
          statRose_one: string;
          statRose_other: string;
          statSharplyRose_one: string;
          statSharplyRose_other: string;
          statRoseDrastically_one: string;
          statRoseDrastically_other: string;
          statWontGoAnyHigher_one: string;
          statWontGoAnyHigher_other: string;
          statFell_one: string;
          statFell_other: string;
          statHarshlyFell_one: string;
          statHarshlyFell_other: string;
          statSeverelyFell_one: string;
          statSeverelyFell_other: string;
          statWontGoAnyLower_one: string;
          statWontGoAnyLower_other: string;
          transformedIntoType: string;
          retryBattle: string;
          unlockedSomething: string;
          congratulations: string;
          beatModeFirstTime: string;
          ppReduced: string;
      };
      battleScene: {
          moneyOwned: string;
      };
      battleInfo: {
          generation: string;
      };
      battleMessageUiHandler: {
          ivBest: string;
          ivFantastic: string;
          ivVeryGood: string;
          ivPrettyGood: string;
          ivDecent: string;
          ivNoGood: string;
      };
      battlePokemonForm: {
          mega: string;
          "mega-x": string;
          "mega-y": string;
          primal: string;
          gigantamax: string;
          eternamax: string;
          megaChange: string;
          gigantamaxChange: string;
          eternamaxChange: string;
          revertChange: string;
          formChange: string;
          disguiseChange: string;
      };
      battlerTags: {
          trappedDesc: string;
          flinchedDesc: string;
          confusedDesc: string;
          infatuatedDesc: string;
          seedDesc: string;
          nightmareDesc: string;
          ingrainDesc: string;
          drowsyDesc: string;
          rechargingLapse: string;
          trappedOnAdd: string;
          trappedOnRemove: string;
          flinchedLapse: string;
          confusedOnAdd: string;
          confusedOnRemove: string;
          confusedOnOverlap: string;
          confusedLapse: string;
          confusedLapseHurtItself: string;
          destinyBondLapseIsBoss: string;
          destinyBondLapse: string;
          infatuatedOnAdd: string;
          infatuatedOnOverlap: string;
          infatuatedLapse: string;
          infatuatedLapseImmobilize: string;
          infatuatedOnRemove: string;
          seededOnAdd: string;
          seededLapse: string;
          seededLapseShed: string;
          nightmareOnAdd: string;
          nightmareOnOverlap: string;
          nightmareLapse: string;
          encoreOnAdd: string;
          encoreOnRemove: string;
          helpingHandOnAdd: string;
          ingrainLapse: string;
          ingrainOnTrap: string;
          aquaRingOnAdd: string;
          aquaRingLapse: string;
          drowsyOnAdd: string;
          damagingTrapLapse: string;
          bindOnTrap: string;
          wrapOnTrap: string;
          vortexOnTrap: string;
          clampOnTrap: string;
          sandTombOnTrap: string;
          magmaStormOnTrap: string;
          snapTrapOnTrap: string;
          thunderCageOnTrap: string;
          infestationOnTrap: string;
          protectedOnAdd: string;
          protectedLapse: string;
          enduringOnAdd: string;
          enduringLapse: string;
          sturdyLapse: string;
          perishSongLapse: string;
          centerOfAttentionOnAdd: string;
          truantLapse: string;
          slowStartOnAdd: string;
          slowStartOnRemove: string;
          highestStatBoostOnAdd: string;
          highestStatBoostOnRemove: string;
          magnetRisenOnAdd: string;
          magnetRisenOnRemove: string;
          critBoostOnAdd: string;
          critBoostOnRemove: string;
          saltCuredOnAdd: string;
          saltCuredLapse: string;
          cursedOnAdd: string;
          cursedLapse: string;
          stockpilingOnAdd: string;
      };
      berry: {
          SITRUS: {
              name: string;
              effect: string;
          };
          LUM: {
              name: string;
              effect: string;
          };
          ENIGMA: {
              name: string;
              effect: string;
          };
          LIECHI: {
              name: string;
              effect: string;
          };
          GANLON: {
              name: string;
              effect: string;
          };
          PETAYA: {
              name: string;
              effect: string;
          };
          APICOT: {
              name: string;
              effect: string;
          };
          SALAC: {
              name: string;
              effect: string;
          };
          LANSAT: {
              name: string;
              effect: string;
          };
          STARF: {
              name: string;
              effect: string;
          };
          LEPPA: {
              name: string;
              effect: string;
          };
      };
      bgmName: {
          music: string;
          missing_entries: string;
          battle_kanto_champion: string;
          battle_johto_champion: string;
          battle_hoenn_champion_g5: string;
          battle_hoenn_champion_g6: string;
          battle_sinnoh_champion: string;
          battle_champion_alder: string;
          battle_champion_iris: string;
          battle_kalos_champion: string;
          battle_alola_champion: string;
          battle_galar_champion: string;
          battle_champion_geeta: string;
          battle_champion_nemona: string;
          battle_champion_kieran: string;
          battle_hoenn_elite: string;
          battle_unova_elite: string;
          battle_kalos_elite: string;
          battle_alola_elite: string;
          battle_galar_elite: string;
          battle_paldea_elite: string;
          battle_bb_elite: string;
          battle_final_encounter: string;
          battle_final: string;
          battle_kanto_gym: string;
          battle_johto_gym: string;
          battle_hoenn_gym: string;
          battle_sinnoh_gym: string;
          battle_unova_gym: string;
          battle_kalos_gym: string;
          battle_galar_gym: string;
          battle_paldea_gym: string;
          battle_legendary_kanto: string;
          battle_legendary_raikou: string;
          battle_legendary_entei: string;
          battle_legendary_suicune: string;
          battle_legendary_lugia: string;
          battle_legendary_ho_oh: string;
          battle_legendary_regis_g5: string;
          battle_legendary_regis_g6: string;
          battle_legendary_gro_kyo: string;
          battle_legendary_rayquaza: string;
          battle_legendary_deoxys: string;
          battle_legendary_lake_trio: string;
          battle_legendary_sinnoh: string;
          battle_legendary_dia_pal: string;
          battle_legendary_origin_forme: string;
          battle_legendary_giratina: string;
          battle_legendary_arceus: string;
          battle_legendary_unova: string;
          battle_legendary_kyurem: string;
          battle_legendary_res_zek: string;
          battle_legendary_xern_yvel: string;
          battle_legendary_tapu: string;
          battle_legendary_sol_lun: string;
          battle_legendary_ub: string;
          battle_legendary_dusk_dawn: string;
          battle_legendary_ultra_nec: string;
          battle_legendary_zac_zam: string;
          battle_legendary_glas_spec: string;
          battle_legendary_calyrex: string;
          battle_legendary_riders: string;
          battle_legendary_birds_galar: string;
          battle_legendary_ruinous: string;
          battle_legendary_kor_mir: string;
          battle_legendary_loyal_three: string;
          battle_legendary_ogerpon: string;
          battle_legendary_terapagos: string;
          battle_legendary_pecharunt: string;
          battle_rival: string;
          battle_rival_2: string;
          battle_rival_3: string;
          battle_trainer: string;
          battle_wild: string;
          battle_wild_strong: string;
          end_summit: string;
          battle_rocket_grunt: string;
          battle_aqua_magma_grunt: string;
          battle_galactic_grunt: string;
          battle_plasma_grunt: string;
          battle_flare_grunt: string;
          battle_aether_grunt: string;
          battle_skull_grunt: string;
          battle_macro_grunt: string;
          battle_galactic_admin: string;
          battle_skull_admin: string;
          battle_oleana: string;
          battle_rocket_boss: string;
          battle_aqua_magma_boss: string;
          battle_galactic_boss: string;
          battle_plasma_boss: string;
          battle_flare_boss: string;
          battle_aether_boss: string;
          battle_skull_boss: string;
          battle_macro_boss: string;
          abyss: string;
          badlands: string;
          beach: string;
          cave: string;
          construction_site: string;
          desert: string;
          dojo: string;
          end: string;
          factory: string;
          fairy_cave: string;
          forest: string;
          grass: string;
          graveyard: string;
          ice_cave: string;
          island: string;
          jungle: string;
          laboratory: string;
          lake: string;
          meadow: string;
          metropolis: string;
          mountain: string;
          plains: string;
          power_plant: string;
          ruins: string;
          sea: string;
          seabed: string;
          slum: string;
          snowy_forest: string;
          space: string;
          swamp: string;
          tall_grass: string;
          temple: string;
          town: string;
          volcano: string;
          wasteland: string;
          encounter_ace_trainer: string;
          encounter_backpacker: string;
          encounter_clerk: string;
          encounter_cyclist: string;
          encounter_lass: string;
          encounter_parasol_lady: string;
          encounter_pokefan: string;
          encounter_psychic: string;
          encounter_rich: string;
          encounter_rival: string;
          encounter_roughneck: string;
          encounter_scientist: string;
          encounter_twins: string;
          encounter_youngster: string;
          heal: string;
          menu: string;
          title: string;
      };
      biome: {
          unknownLocation: string;
          TOWN: string;
          PLAINS: string;
          GRASS: string;
          TALL_GRASS: string;
          METROPOLIS: string;
          FOREST: string;
          SEA: string;
          SWAMP: string;
          BEACH: string;
          LAKE: string;
          SEABED: string;
          MOUNTAIN: string;
          BADLANDS: string;
          CAVE: string;
          DESERT: string;
          ICE_CAVE: string;
          MEADOW: string;
          POWER_PLANT: string;
          VOLCANO: string;
          GRAVEYARD: string;
          DOJO: string;
          FACTORY: string;
          RUINS: string;
          WASTELAND: string;
          ABYSS: string;
          SPACE: string;
          CONSTRUCTION_SITE: string;
          JUNGLE: string;
          FAIRY_CAVE: string;
          TEMPLE: string;
          SLUM: string;
          SNOWY_FOREST: string;
          ISLAND: string;
          LABORATORY: string;
          END: string;
      };
      challenges: {
          title: string;
          illegalEvolution: string;
          singleGeneration: {
              name: string;
              desc: string;
              desc_default: string;
              gen_1: string;
              gen_2: string;
              gen_3: string;
              gen_4: string;
              gen_5: string;
              gen_6: string;
              gen_7: string;
              gen_8: string;
              gen_9: string;
          };
          singleType: {
              name: string;
              desc: string;
              desc_default: string;
          };
          freshStart: {
              name: string;
              desc: string;
              "value.0": string;
              "value.1": string;
          };
          inverseBattle: {
              name: string;
              shortName: string;
              desc: string;
              "value.0": string;
              "value.1": string;
          };
      };
      commandUiHandler: {
          fight: string;
          ball: string;
          pokemon: string;
          run: string;
          actionMessage: string;
      };
      common: {
          start: string;
          luckIndicator: string;
          shinyOnHover: string;
          commonShiny: string;
          rareShiny: string;
          epicShiny: string;
      };
      achv: {
          Achievements: {
              name: string;
          };
          Locked: {
              name: string;
          };
          MoneyAchv: {
              description: string;
          };
          "10K_MONEY": {
              name: string;
          };
          "100K_MONEY": {
              name: string;
          };
          "1M_MONEY": {
              name: string;
          };
          "10M_MONEY": {
              name: string;
          };
          DamageAchv: {
              description: string;
          };
          "250_DMG": {
              name: string;
          };
          "1000_DMG": {
              name: string;
          };
          "2500_DMG": {
              name: string;
          };
          "10000_DMG": {
              name: string;
              name_female: string;
          };
          HealAchv: {
              description: string;
          };
          "250_HEAL": {
              name: string;
          };
          "1000_HEAL": {
              name: string;
          };
          "2500_HEAL": {
              name: string;
          };
          "10000_HEAL": {
              name: string;
          };
          LevelAchv: {
              description: string;
          };
          LV_100: {
              name: string;
          };
          LV_250: {
              name: string;
          };
          LV_1000: {
              name: string;
          };
          RibbonAchv: {
              description: string;
          };
          "10_RIBBONS": {
              name: string;
          };
          "25_RIBBONS": {
              name: string;
          };
          "50_RIBBONS": {
              name: string;
          };
          "75_RIBBONS": {
              name: string;
          };
          "100_RIBBONS": {
              name: string;
          };
          TRANSFER_MAX_STAT_STAGE: {
              name: string;
              description: string;
          };
          MAX_FRIENDSHIP: {
              name: string;
              description: string;
          };
          MEGA_EVOLVE: {
              name: string;
              description: string;
          };
          GIGANTAMAX: {
              name: string;
              description: string;
          };
          TERASTALLIZE: {
              name: string;
              description: string;
          };
          STELLAR_TERASTALLIZE: {
              name: string;
              description: string;
          };
          SPLICE: {
              name: string;
              description: string;
          };
          MINI_BLACK_HOLE: {
              name: string;
              description: string;
          };
          CATCH_MYTHICAL: {
              name: string;
              description: string;
          };
          CATCH_SUB_LEGENDARY: {
              name: string;
              description: string;
          };
          CATCH_LEGENDARY: {
              name: string;
              description: string;
          };
          SEE_SHINY: {
              name: string;
              description: string;
          };
          SHINY_PARTY: {
              name: string;
              description: string;
          };
          HATCH_MYTHICAL: {
              name: string;
              description: string;
          };
          HATCH_SUB_LEGENDARY: {
              name: string;
              description: string;
          };
          HATCH_LEGENDARY: {
              name: string;
              description: string;
          };
          HATCH_SHINY: {
              name: string;
              description: string;
          };
          HIDDEN_ABILITY: {
              name: string;
              description: string;
          };
          PERFECT_IVS: {
              name: string;
              description: string;
          };
          CLASSIC_VICTORY: {
              name: string;
              description: string;
          };
          UNEVOLVED_CLASSIC_VICTORY: {
              name: string;
              description: string;
          };
          MONO_GEN_ONE: {
              name: string;
              description: string;
          };
          MONO_GEN_TWO: {
              name: string;
              description: string;
          };
          MONO_GEN_THREE: {
              name: string;
              description: string;
          };
          MONO_GEN_FOUR: {
              name: string;
              description: string;
          };
          MONO_GEN_FIVE: {
              name: string;
              description: string;
          };
          MONO_GEN_SIX: {
              name: string;
              description: string;
          };
          MONO_GEN_SEVEN: {
              name: string;
              description: string;
          };
          MONO_GEN_EIGHT: {
              name: string;
              description: string;
          };
          MONO_GEN_NINE: {
              name: string;
              description: string;
          };
          MonoType: {
              description: string;
          };
          MONO_NORMAL: {
              name: string;
          };
          MONO_FIGHTING: {
              name: string;
          };
          MONO_FLYING: {
              name: string;
          };
          MONO_POISON: {
              name: string;
          };
          MONO_GROUND: {
              name: string;
          };
          MONO_ROCK: {
              name: string;
          };
          MONO_BUG: {
              name: string;
          };
          MONO_GHOST: {
              name: string;
          };
          MONO_STEEL: {
              name: string;
          };
          MONO_FIRE: {
              name: string;
          };
          MONO_WATER: {
              name: string;
          };
          MONO_GRASS: {
              name: string;
          };
          MONO_ELECTRIC: {
              name: string;
          };
          MONO_PSYCHIC: {
              name: string;
          };
          MONO_ICE: {
              name: string;
          };
          MONO_DRAGON: {
              name: string;
          };
          MONO_DARK: {
              name: string;
          };
          MONO_FAIRY: {
              name: string;
          };
          FRESH_START: {
              name: string;
              description: string;
          };
          INVERSE_BATTLE: {
              name: string;
              description: string;
          };
      };
      dialogue: {
          youngster: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "4_female": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
                  "9_female": string;
                  "10": string;
                  "11": string;
                  "12": string;
                  "12_female": string;
                  "13": string;
                  "13_female": string;
              };
              victory: {
                  "1": string;
                  "1_femal1e": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "5_female": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
                  "10": string;
                  "11": string;
                  "12": string;
                  "13": string;
              };
          };
          lass: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "6_female": string;
                  "7": string;
                  "8": string;
                  "9": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "6_female": string;
                  "7": string;
                  "8": string;
                  "8_female": string;
                  "9": string;
              };
          };
          breeder: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          breeder_female: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          fisherman: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          fisherman_female: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          swimmer: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          backpacker: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          ace_trainer: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
                  "4": string;
                  "4_female": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          parasol_lady: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          twins: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          cyclist: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          black_belt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          battle_girl: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          hiker: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          ranger: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          scientist: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          school_kid: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          artist: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          guitarist: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          worker: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          worker_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          worker_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          hex_maniac: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "2_female": string;
              };
          };
          psychic: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          officer: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          beauty: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          baker: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
          };
          biker: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          firebreather: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          sailor: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          archer: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          ariana: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
          };
          proton: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          petrel: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          tabitha: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
          };
          courtney: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          shelly: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
          };
          matt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
          };
          mars: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          jupiter: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          saturn: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          zinzolin: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
          };
          rood: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          xerosic: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
          };
          bryony: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          rocket_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "5_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          magma_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
                  "4": string;
                  "5": string;
              };
          };
          aqua_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          galactic_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "5_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          plasma_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          flare_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          aether_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          faba: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
          };
          skull_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "4_female": string;
                  "5": string;
                  "5_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          plumeria: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
          };
          macro_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          oleana: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
          };
          rocket_boss_giovanni_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
              };
          };
          rocket_boss_giovanni_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          magma_boss_maxie_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          magma_boss_maxie_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aqua_boss_archie_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aqua_boss_archie_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          galactic_boss_cyrus_1: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          galactic_boss_cyrus_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          plasma_boss_ghetsis_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          plasma_boss_ghetsis_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          flare_boss_lysandre_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          flare_boss_lysandre_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aether_boss_lusamine_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aether_boss_lusamine_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          skull_boss_guzma_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          skull_boss_guzma_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          macro_boss_rose_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          macro_boss_rose_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          brock: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          misty: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          lt_surge: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          erika: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
              };
          };
          janine: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          sabrina: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          blaine: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          giovanni: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          roxanne: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          brawly: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          wattson: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
          };
          flannery: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          norman: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          winona: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          tate: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          liza: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          juan: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          crasher_wake: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          falkner: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          nessa: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          melony: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          marlon: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          shauntal: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          marshal: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          cheren: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          chili: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
          };
          cilan: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "3_female": string;
              };
          };
          roark: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "4_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          morty: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
              };
          };
          crispin: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          amarys: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lacey: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drayton: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
              };
          };
          ramos: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          viola: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          candice: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          gardenia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aaron: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          cress: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          allister: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          clay: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kofu: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          tulip: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          sidney: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          phoebe: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          glacia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drake: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          wallace: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lorelei: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
              };
          };
          will: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          malva: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          hala: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          molayne: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rika: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
              };
          };
          bruno: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bugsy: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          koga: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bertha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lenora: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          siebold: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          roxie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
              };
          };
          olivia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          poppy: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          agatha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          flint: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          grimsley: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          caitlin: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          diantha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          wikstrom: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
              };
          };
          acerola: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          larry_elite: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lance: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "2_female": string;
              };
          };
          karen: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          milo: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lucian: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drasna: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kahili: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          hassel: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          blue: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          piers: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          red: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          jasmine: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lance_champion: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          steven: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          cynthia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          iris: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          hau: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          geeta: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          nemona: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          leon: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          whitney: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          chuck: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          katy: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          pryce: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          clair: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          maylene: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          fantina: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          byron: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          olympia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          volkner: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          burgh: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          elesa: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          skyla: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          brycen: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drayden: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          grant: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          korrina: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          clemont: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          valerie: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          wulfric: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kabu: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bea: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          opal: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bede: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          gordie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          marnie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          raihan: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          brassius: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          iono: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          larry: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          ryme: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          grusha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          marnie_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          nessa_elite: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          bea_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          allister_elite: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          raihan_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "2_female": string;
              };
          };
          alder: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kieran: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_2_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_3: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_3_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_4: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_4_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_5: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_5_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_6: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_6_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
      };
      battleSpecDialogue: {
          encounter: string;
          encounter_female: string;
          firstStageWin: string;
          secondStageWin: string;
          key_ordinal_one: string;
          key_ordinal_two: string;
          key_ordinal_few: string;
          key_ordinal_other: string;
      };
      miscDialogue: {
          ending: string;
          ending_female: string;
          ending_endless: string;
          ending_name: string;
      };
      doubleBattleDialogue: {
          blue_red_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          red_blue_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          tate_liza_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          liza_tate_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          wallace_steven_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          steven_wallace_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          alder_iris_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          iris_alder_double: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
          };
          piers_marnie_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          marnie_piers_double: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
          };
      };
      egg: {
          egg: string;
          greatTier: string;
          ultraTier: string;
          masterTier: string;
          defaultTier: string;
          hatchWavesMessageSoon: string;
          hatchWavesMessageClose: string;
          hatchWavesMessageNotClose: string;
          hatchWavesMessageLongTime: string;
          gachaTypeLegendary: string;
          gachaTypeMove: string;
          gachaTypeShiny: string;
          selectMachine: string;
          notEnoughVouchers: string;
          tooManyEggs: string;
          pull: string;
          pulls: string;
          sameSpeciesEgg: string;
          hatchFromTheEgg: string;
          eggMoveUnlock: string;
          rareEggMoveUnlock: string;
          moveUPGacha: string;
          shinyUPGacha: string;
          legendaryUPGacha: string;
      };
      fightUiHandler: {
          pp: string;
          power: string;
          accuracy: string;
          abilityFlyInText: string;
          passive: string;
      };
      filterBar: {
          genFilter: string;
          typeFilter: string;
          caughtFilter: string;
          unlocksFilter: string;
          miscFilter: string;
          sortFilter: string;
          all: string;
          normal: string;
          uncaught: string;
          passive: string;
          passiveUnlocked: string;
          passiveLocked: string;
          passiveUnlockable: string;
          costReduction: string;
          costReductionUnlocked: string;
          costReductionLocked: string;
          costReductionUnlockable: string;
          favorite: string;
          isFavorite: string;
          notFavorite: string;
          ribbon: string;
          hasWon: string;
          hasNotWon: string;
          hiddenAbility: string;
          hasHiddenAbility: string;
          noHiddenAbility: string;
          egg: string;
          eggPurchasable: string;
          pokerus: string;
          hasPokerus: string;
          noPokerus: string;
          sortByNumber: string;
          sortByCost: string;
          sortByCandies: string;
          sortByIVs: string;
          sortByName: string;
      };
      gameMode: {
          classic: string;
          endless: string;
          endlessSpliced: string;
          dailyRun: string;
          unknown: string;
          challenge: string;
      };
      gameStatsUiHandler: {
          stats: string;
          playTime: string;
          totalBattles: string;
          starters: string;
          shinyStarters: string;
          speciesSeen: string;
          speciesCaught: string;
          ribbonsOwned: string;
          classicRuns: string;
          classicWins: string;
          dailyRunAttempts: string;
          dailyRunWins: string;
          endlessRuns: string;
          highestWaveEndless: string;
          highestMoney: string;
          highestDamage: string;
          highestHPHealed: string;
          pokemonEncountered: string;
          pokemonDefeated: string;
          pokemonCaught: string;
          eggsHatched: string;
          subLegendsSeen: string;
          subLegendsCaught: string;
          subLegendsHatched: string;
          legendsSeen: string;
          legendsCaught: string;
          legendsHatched: string;
          mythicalsSeen: string;
          mythicalsCaught: string;
          mythicalsHatched: string;
          shiniesSeen: string;
          shiniesCaught: string;
          shiniesHatched: string;
          pokemonFused: string;
          trainersDefeated: string;
          eggsPulled: string;
          rareEggsPulled: string;
          epicEggsPulled: string;
          legendaryEggsPulled: string;
          manaphyEggsPulled: string;
      };
      growth: {
          Erratic: string;
          Fast: string;
          Medium_Fast: string;
          Medium_Slow: string;
          Slow: string;
          Fluctuating: string;
      };
      menu: {
          cancel: string;
          continue: string;
          dailyRun: string;
          loadGame: string;
          newGame: string;
          settings: string;
          selectGameMode: string;
          logInOrCreateAccount: string;
          username: string;
          password: string;
          login: string;
          orUse: string;
          register: string;
          emptyUsername: string;
          invalidLoginUsername: string;
          invalidRegisterUsername: string;
          invalidLoginPassword: string;
          invalidRegisterPassword: string;
          usernameAlreadyUsed: string;
          accountNonExistent: string;
          unmatchingPassword: string;
          passwordNotMatchingConfirmPassword: string;
          confirmPassword: string;
          registrationAgeWarning: string;
          backToLogin: string;
          failedToLoadSaveData: string;
          sessionSuccess: string;
          failedToLoadSession: string;
          boyOrGirl: string;
          evolving: string;
          stoppedEvolving: string;
          pauseEvolutionsQuestion: string;
          evolutionsPaused: string;
          evolutionDone: string;
          dailyRankings: string;
          weeklyRankings: string;
          noRankings: string;
          positionIcon: string;
          usernameScoreboard: string;
          score: string;
          wave: string;
          loading: string;
          loadingAsset: string;
          playersOnline: string;
          yes: string;
          no: string;
          disclaimer: string;
          disclaimerDescription: string;
          choosePokemon: string;
          renamePokemon: string;
          rename: string;
          nickname: string;
          errorServerDown: string;
      };
      menuUiHandler: {
          GAME_SETTINGS: string;
          ACHIEVEMENTS: string;
          STATS: string;
          RUN_HISTORY: string;
          EGG_LIST: string;
          EGG_GACHA: string;
          MANAGE_DATA: string;
          COMMUNITY: string;
          SAVE_AND_QUIT: string;
          LOG_OUT: string;
          slot: string;
          importSession: string;
          importSlotSelect: string;
          exportSession: string;
          exportSlotSelect: string;
          importRunHistory: string;
          exportRunHistory: string;
          importData: string;
          exportData: string;
          consentPreferences: string;
          linkDiscord: string;
          unlinkDiscord: string;
          linkGoogle: string;
          unlinkGoogle: string;
          cancel: string;
          losingProgressionWarning: string;
          noEggs: string;
      };
      modifier: {
          surviveDamageApply: string;
          turnHealApply: string;
          hitHealApply: string;
          pokemonInstantReviveApply: string;
          resetNegativeStatStageApply: string;
          moneyInterestApply: string;
          turnHeldItemTransferApply: string;
          contactHeldItemTransferApply: string;
          enemyTurnHealApply: string;
          bypassSpeedChanceApply: string;
      };
      modifierType: {
          ModifierType: {
              AddPokeballModifierType: {
                  name: string;
                  description: string;
              };
              AddVoucherModifierType: {
                  name: string;
                  description: string;
              };
              PokemonHeldItemModifierType: {
                  extra: {
                      inoperable: string;
                      tooMany: string;
                  };
              };
              PokemonHpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                      fullyWithStatus: string;
                  };
              };
              PokemonReviveModifierType: {
                  description: string;
              };
              PokemonStatusHealModifierType: {
                  description: string;
              };
              PokemonPpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                  };
              };
              PokemonAllMovePpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                  };
              };
              PokemonPpUpModifierType: {
                  description: string;
              };
              PokemonNatureChangeModifierType: {
                  name: string;
                  description: string;
              };
              DoubleBattleChanceBoosterModifierType: {
                  description: string;
              };
              TempStatStageBoosterModifierType: {
                  description: string;
              };
              AttackTypeBoosterModifierType: {
                  description: string;
              };
              PokemonLevelIncrementModifierType: {
                  description: string;
              };
              AllPokemonLevelIncrementModifierType: {
                  description: string;
              };
              BaseStatBoosterModifierType: {
                  description: string;
              };
              AllPokemonFullHpRestoreModifierType: {
                  description: string;
              };
              AllPokemonFullReviveModifierType: {
                  description: string;
              };
              MoneyRewardModifierType: {
                  description: string;
                  extra: {
                      small: string;
                      moderate: string;
                      large: string;
                  };
              };
              ExpBoosterModifierType: {
                  description: string;
              };
              PokemonExpBoosterModifierType: {
                  description: string;
              };
              PokemonFriendshipBoosterModifierType: {
                  description: string;
              };
              PokemonMoveAccuracyBoosterModifierType: {
                  description: string;
              };
              PokemonMultiHitModifierType: {
                  description: string;
              };
              TmModifierType: {
                  name: string;
                  description: string;
              };
              TmModifierTypeWithInfo: {
                  name: string;
                  description: string;
              };
              EvolutionItemModifierType: {
                  description: string;
              };
              FormChangeItemModifierType: {
                  description: string;
              };
              FusePokemonModifierType: {
                  description: string;
              };
              TerastallizeModifierType: {
                  name: string;
                  description: string;
              };
              ContactHeldItemTransferChanceModifierType: {
                  description: string;
              };
              TurnHeldItemTransferModifierType: {
                  description: string;
              };
              EnemyAttackStatusEffectChanceModifierType: {
                  description: string;
              };
              EnemyEndureChanceModifierType: {
                  description: string;
              };
              RARE_CANDY: {
                  name: string;
              };
              RARER_CANDY: {
                  name: string;
              };
              MEGA_BRACELET: {
                  name: string;
                  description: string;
              };
              DYNAMAX_BAND: {
                  name: string;
                  description: string;
              };
              TERA_ORB: {
                  name: string;
                  description: string;
              };
              MAP: {
                  name: string;
                  description: string;
              };
              POTION: {
                  name: string;
              };
              SUPER_POTION: {
                  name: string;
              };
              HYPER_POTION: {
                  name: string;
              };
              MAX_POTION: {
                  name: string;
              };
              FULL_RESTORE: {
                  name: string;
              };
              REVIVE: {
                  name: string;
              };
              MAX_REVIVE: {
                  name: string;
              };
              FULL_HEAL: {
                  name: string;
              };
              SACRED_ASH: {
                  name: string;
              };
              REVIVER_SEED: {
                  name: string;
                  description: string;
              };
              WHITE_HERB: {
                  name: string;
                  description: string;
              };
              ETHER: {
                  name: string;
              };
              MAX_ETHER: {
                  name: string;
              };
              ELIXIR: {
                  name: string;
              };
              MAX_ELIXIR: {
                  name: string;
              };
              PP_UP: {
                  name: string;
              };
              PP_MAX: {
                  name: string;
              };
              LURE: {
                  name: string;
              };
              SUPER_LURE: {
                  name: string;
              };
              MAX_LURE: {
                  name: string;
              };
              MEMORY_MUSHROOM: {
                  name: string;
                  description: string;
              };
              EXP_SHARE: {
                  name: string;
                  description: string;
              };
              EXP_BALANCE: {
                  name: string;
                  description: string;
              };
              OVAL_CHARM: {
                  name: string;
                  description: string;
              };
              EXP_CHARM: {
                  name: string;
              };
              SUPER_EXP_CHARM: {
                  name: string;
              };
              GOLDEN_EXP_CHARM: {
                  name: string;
              };
              LUCKY_EGG: {
                  name: string;
              };
              GOLDEN_EGG: {
                  name: string;
              };
              SOOTHE_BELL: {
                  name: string;
              };
              SCOPE_LENS: {
                  name: string;
                  description: string;
              };
              DIRE_HIT: {
                  name: string;
                  extra: {
                      raises: string;
                  };
              };
              LEEK: {
                  name: string;
                  description: string;
              };
              EVIOLITE: {
                  name: string;
                  description: string;
              };
              SOUL_DEW: {
                  name: string;
                  description: string;
              };
              NUGGET: {
                  name: string;
              };
              BIG_NUGGET: {
                  name: string;
              };
              RELIC_GOLD: {
                  name: string;
              };
              AMULET_COIN: {
                  name: string;
                  description: string;
              };
              GOLDEN_PUNCH: {
                  name: string;
                  description: string;
              };
              COIN_CASE: {
                  name: string;
                  description: string;
              };
              LOCK_CAPSULE: {
                  name: string;
                  description: string;
              };
              GRIP_CLAW: {
                  name: string;
              };
              WIDE_LENS: {
                  name: string;
              };
              MULTI_LENS: {
                  name: string;
              };
              HEALING_CHARM: {
                  name: string;
                  description: string;
              };
              CANDY_JAR: {
                  name: string;
                  description: string;
              };
              BERRY_POUCH: {
                  name: string;
                  description: string;
              };
              FOCUS_BAND: {
                  name: string;
                  description: string;
              };
              QUICK_CLAW: {
                  name: string;
                  description: string;
              };
              KINGS_ROCK: {
                  name: string;
                  description: string;
              };
              LEFTOVERS: {
                  name: string;
                  description: string;
              };
              SHELL_BELL: {
                  name: string;
                  description: string;
              };
              TOXIC_ORB: {
                  name: string;
                  description: string;
              };
              FLAME_ORB: {
                  name: string;
                  description: string;
              };
              BATON: {
                  name: string;
                  description: string;
              };
              SHINY_CHARM: {
                  name: string;
                  description: string;
              };
              ABILITY_CHARM: {
                  name: string;
                  description: string;
              };
              IV_SCANNER: {
                  name: string;
                  description: string;
              };
              DNA_SPLICERS: {
                  name: string;
              };
              MINI_BLACK_HOLE: {
                  name: string;
              };
              GOLDEN_POKEBALL: {
                  name: string;
                  description: string;
              };
              ENEMY_DAMAGE_BOOSTER: {
                  name: string;
                  description: string;
              };
              ENEMY_DAMAGE_REDUCTION: {
                  name: string;
                  description: string;
              };
              ENEMY_HEAL: {
                  name: string;
                  description: string;
              };
              ENEMY_ATTACK_POISON_CHANCE: {
                  name: string;
              };
              ENEMY_ATTACK_PARALYZE_CHANCE: {
                  name: string;
              };
              ENEMY_ATTACK_BURN_CHANCE: {
                  name: string;
              };
              ENEMY_STATUS_EFFECT_HEAL_CHANCE: {
                  name: string;
                  description: string;
              };
              ENEMY_ENDURE_CHANCE: {
                  name: string;
              };
              ENEMY_FUSED_CHANCE: {
                  name: string;
                  description: string;
              };
          };
          SpeciesBoosterItem: {
              LIGHT_BALL: {
                  name: string;
                  description: string;
              };
              THICK_CLUB: {
                  name: string;
                  description: string;
              };
              METAL_POWDER: {
                  name: string;
                  description: string;
              };
              QUICK_POWDER: {
                  name: string;
                  description: string;
              };
          };
          TempStatStageBoosterItem: {
              x_attack: string;
              x_defense: string;
              x_sp_atk: string;
              x_sp_def: string;
              x_speed: string;
              x_accuracy: string;
          };
          AttackTypeBoosterItem: {
              silk_scarf: string;
              black_belt: string;
              sharp_beak: string;
              poison_barb: string;
              soft_sand: string;
              hard_stone: string;
              silver_powder: string;
              spell_tag: string;
              metal_coat: string;
              charcoal: string;
              mystic_water: string;
              miracle_seed: string;
              magnet: string;
              twisted_spoon: string;
              never_melt_ice: string;
              dragon_fang: string;
              black_glasses: string;
              fairy_feather: string;
          };
          BaseStatBoosterItem: {
              hp_up: string;
              protein: string;
              iron: string;
              calcium: string;
              zinc: string;
              carbos: string;
          };
          EvolutionItem: {
              NONE: string;
              LINKING_CORD: string;
              SUN_STONE: string;
              MOON_STONE: string;
              LEAF_STONE: string;
              FIRE_STONE: string;
              WATER_STONE: string;
              THUNDER_STONE: string;
              ICE_STONE: string;
              DUSK_STONE: string;
              DAWN_STONE: string;
              SHINY_STONE: string;
              CRACKED_POT: string;
              SWEET_APPLE: string;
              TART_APPLE: string;
              STRAWBERRY_SWEET: string;
              UNREMARKABLE_TEACUP: string;
              CHIPPED_POT: string;
              BLACK_AUGURITE: string;
              GALARICA_CUFF: string;
              GALARICA_WREATH: string;
              PEAT_BLOCK: string;
              AUSPICIOUS_ARMOR: string;
              MALICIOUS_ARMOR: string;
              MASTERPIECE_TEACUP: string;
              METAL_ALLOY: string;
              SCROLL_OF_DARKNESS: string;
              SCROLL_OF_WATERS: string;
              SYRUPY_APPLE: string;
          };
          FormChangeItem: {
              NONE: string;
              ABOMASITE: string;
              ABSOLITE: string;
              AERODACTYLITE: string;
              AGGRONITE: string;
              ALAKAZITE: string;
              ALTARIANITE: string;
              AMPHAROSITE: string;
              AUDINITE: string;
              BANETTITE: string;
              BEEDRILLITE: string;
              BLASTOISINITE: string;
              BLAZIKENITE: string;
              CAMERUPTITE: string;
              CHARIZARDITE_X: string;
              CHARIZARDITE_Y: string;
              DIANCITE: string;
              GALLADITE: string;
              GARCHOMPITE: string;
              GARDEVOIRITE: string;
              GENGARITE: string;
              GLALITITE: string;
              GYARADOSITE: string;
              HERACRONITE: string;
              HOUNDOOMINITE: string;
              KANGASKHANITE: string;
              LATIASITE: string;
              LATIOSITE: string;
              LOPUNNITE: string;
              LUCARIONITE: string;
              MANECTITE: string;
              MAWILITE: string;
              MEDICHAMITE: string;
              METAGROSSITE: string;
              MEWTWONITE_X: string;
              MEWTWONITE_Y: string;
              PIDGEOTITE: string;
              PINSIRITE: string;
              RAYQUAZITE: string;
              SABLENITE: string;
              SALAMENCITE: string;
              SCEPTILITE: string;
              SCIZORITE: string;
              SHARPEDONITE: string;
              SLOWBRONITE: string;
              STEELIXITE: string;
              SWAMPERTITE: string;
              TYRANITARITE: string;
              VENUSAURITE: string;
              BLUE_ORB: string;
              RED_ORB: string;
              SHARP_METEORITE: string;
              HARD_METEORITE: string;
              SMOOTH_METEORITE: string;
              ADAMANT_CRYSTAL: string;
              LUSTROUS_GLOBE: string;
              GRISEOUS_CORE: string;
              REVEAL_GLASS: string;
              GRACIDEA: string;
              MAX_MUSHROOMS: string;
              DARK_STONE: string;
              LIGHT_STONE: string;
              PRISON_BOTTLE: string;
              N_LUNARIZER: string;
              N_SOLARIZER: string;
              RUSTED_SWORD: string;
              RUSTED_SHIELD: string;
              ICY_REINS_OF_UNITY: string;
              SHADOW_REINS_OF_UNITY: string;
              WELLSPRING_MASK: string;
              HEARTHFLAME_MASK: string;
              CORNERSTONE_MASK: string;
              SHOCK_DRIVE: string;
              BURN_DRIVE: string;
              CHILL_DRIVE: string;
              DOUSE_DRIVE: string;
              ULTRANECROZIUM_Z: string;
          };
      };
      move: {
          pound: {
              name: string;
              effect: string;
          };
          karateChop: {
              name: string;
              effect: string;
          };
          doubleSlap: {
              name: string;
              effect: string;
          };
          cometPunch: {
              name: string;
              effect: string;
          };
          megaPunch: {
              name: string;
              effect: string;
          };
          payDay: {
              name: string;
              effect: string;
          };
          firePunch: {
              name: string;
              effect: string;
          };
          icePunch: {
              name: string;
              effect: string;
          };
          thunderPunch: {
              name: string;
              effect: string;
          };
          scratch: {
              name: string;
              effect: string;
          };
          viseGrip: {
              name: string;
              effect: string;
          };
          guillotine: {
              name: string;
              effect: string;
          };
          razorWind: {
              name: string;
              effect: string;
          };
          swordsDance: {
              name: string;
              effect: string;
          };
          cut: {
              name: string;
              effect: string;
          };
          gust: {
              name: string;
              effect: string;
          };
          wingAttack: {
              name: string;
              effect: string;
          };
          whirlwind: {
              name: string;
              effect: string;
          };
          fly: {
              name: string;
              effect: string;
          };
          bind: {
              name: string;
              effect: string;
          };
          slam: {
              name: string;
              effect: string;
          };
          vineWhip: {
              name: string;
              effect: string;
          };
          stomp: {
              name: string;
              effect: string;
          };
          doubleKick: {
              name: string;
              effect: string;
          };
          megaKick: {
              name: string;
              effect: string;
          };
          jumpKick: {
              name: string;
              effect: string;
          };
          rollingKick: {
              name: string;
              effect: string;
          };
          sandAttack: {
              name: string;
              effect: string;
          };
          headbutt: {
              name: string;
              effect: string;
          };
          hornAttack: {
              name: string;
              effect: string;
          };
          furyAttack: {
              name: string;
              effect: string;
          };
          hornDrill: {
              name: string;
              effect: string;
          };
          tackle: {
              name: string;
              effect: string;
          };
          bodySlam: {
              name: string;
              effect: string;
          };
          wrap: {
              name: string;
              effect: string;
          };
          takeDown: {
              name: string;
              effect: string;
          };
          thrash: {
              name: string;
              effect: string;
          };
          doubleEdge: {
              name: string;
              effect: string;
          };
          tailWhip: {
              name: string;
              effect: string;
          };
          poisonSting: {
              name: string;
              effect: string;
          };
          twineedle: {
              name: string;
              effect: string;
          };
          pinMissile: {
              name: string;
              effect: string;
          };
          leer: {
              name: string;
              effect: string;
          };
          bite: {
              name: string;
              effect: string;
          };
          growl: {
              name: string;
              effect: string;
          };
          roar: {
              name: string;
              effect: string;
          };
          sing: {
              name: string;
              effect: string;
          };
          supersonic: {
              name: string;
              effect: string;
          };
          sonicBoom: {
              name: string;
              effect: string;
          };
          disable: {
              name: string;
              effect: string;
          };
          acid: {
              name: string;
              effect: string;
          };
          ember: {
              name: string;
              effect: string;
          };
          flamethrower: {
              name: string;
              effect: string;
          };
          mist: {
              name: string;
              effect: string;
          };
          waterGun: {
              name: string;
              effect: string;
          };
          hydroPump: {
              name: string;
              effect: string;
          };
          surf: {
              name: string;
              effect: string;
          };
          iceBeam: {
              name: string;
              effect: string;
          };
          blizzard: {
              name: string;
              effect: string;
          };
          psybeam: {
              name: string;
              effect: string;
          };
          bubbleBeam: {
              name: string;
              effect: string;
          };
          auroraBeam: {
              name: string;
              effect: string;
          };
          hyperBeam: {
              name: string;
              effect: string;
          };
          peck: {
              name: string;
              effect: string;
          };
          drillPeck: {
              name: string;
              effect: string;
          };
          submission: {
              name: string;
              effect: string;
          };
          lowKick: {
              name: string;
              effect: string;
          };
          counter: {
              name: string;
              effect: string;
          };
          seismicToss: {
              name: string;
              effect: string;
          };
          strength: {
              name: string;
              effect: string;
          };
          absorb: {
              name: string;
              effect: string;
          };
          megaDrain: {
              name: string;
              effect: string;
          };
          leechSeed: {
              name: string;
              effect: string;
          };
          growth: {
              name: string;
              effect: string;
          };
          razorLeaf: {
              name: string;
              effect: string;
          };
          solarBeam: {
              name: string;
              effect: string;
          };
          poisonPowder: {
              name: string;
              effect: string;
          };
          stunSpore: {
              name: string;
              effect: string;
          };
          sleepPowder: {
              name: string;
              effect: string;
          };
          petalDance: {
              name: string;
              effect: string;
          };
          stringShot: {
              name: string;
              effect: string;
          };
          dragonRage: {
              name: string;
              effect: string;
          };
          fireSpin: {
              name: string;
              effect: string;
          };
          thunderShock: {
              name: string;
              effect: string;
          };
          thunderbolt: {
              name: string;
              effect: string;
          };
          thunderWave: {
              name: string;
              effect: string;
          };
          thunder: {
              name: string;
              effect: string;
          };
          rockThrow: {
              name: string;
              effect: string;
          };
          earthquake: {
              name: string;
              effect: string;
          };
          fissure: {
              name: string;
              effect: string;
          };
          dig: {
              name: string;
              effect: string;
          };
          toxic: {
              name: string;
              effect: string;
          };
          confusion: {
              name: string;
              effect: string;
          };
          psychic: {
              name: string;
              effect: string;
          };
          hypnosis: {
              name: string;
              effect: string;
          };
          meditate: {
              name: string;
              effect: string;
          };
          agility: {
              name: string;
              effect: string;
          };
          quickAttack: {
              name: string;
              effect: string;
          };
          rage: {
              name: string;
              effect: string;
          };
          teleport: {
              name: string;
              effect: string;
          };
          nightShade: {
              name: string;
              effect: string;
          };
          mimic: {
              name: string;
              effect: string;
          };
          screech: {
              name: string;
              effect: string;
          };
          doubleTeam: {
              name: string;
              effect: string;
          };
          recover: {
              name: string;
              effect: string;
          };
          harden: {
              name: string;
              effect: string;
          };
          minimize: {
              name: string;
              effect: string;
          };
          smokescreen: {
              name: string;
              effect: string;
          };
          confuseRay: {
              name: string;
              effect: string;
          };
          withdraw: {
              name: string;
              effect: string;
          };
          defenseCurl: {
              name: string;
              effect: string;
          };
          barrier: {
              name: string;
              effect: string;
          };
          lightScreen: {
              name: string;
              effect: string;
          };
          haze: {
              name: string;
              effect: string;
          };
          reflect: {
              name: string;
              effect: string;
          };
          focusEnergy: {
              name: string;
              effect: string;
          };
          bide: {
              name: string;
              effect: string;
          };
          metronome: {
              name: string;
              effect: string;
          };
          mirrorMove: {
              name: string;
              effect: string;
          };
          selfDestruct: {
              name: string;
              effect: string;
          };
          eggBomb: {
              name: string;
              effect: string;
          };
          lick: {
              name: string;
              effect: string;
          };
          smog: {
              name: string;
              effect: string;
          };
          sludge: {
              name: string;
              effect: string;
          };
          boneClub: {
              name: string;
              effect: string;
          };
          fireBlast: {
              name: string;
              effect: string;
          };
          waterfall: {
              name: string;
              effect: string;
          };
          clamp: {
              name: string;
              effect: string;
          };
          swift: {
              name: string;
              effect: string;
          };
          skullBash: {
              name: string;
              effect: string;
          };
          spikeCannon: {
              name: string;
              effect: string;
          };
          constrict: {
              name: string;
              effect: string;
          };
          amnesia: {
              name: string;
              effect: string;
          };
          kinesis: {
              name: string;
              effect: string;
          };
          softBoiled: {
              name: string;
              effect: string;
          };
          highJumpKick: {
              name: string;
              effect: string;
          };
          glare: {
              name: string;
              effect: string;
          };
          dreamEater: {
              name: string;
              effect: string;
          };
          poisonGas: {
              name: string;
              effect: string;
          };
          barrage: {
              name: string;
              effect: string;
          };
          leechLife: {
              name: string;
              effect: string;
          };
          lovelyKiss: {
              name: string;
              effect: string;
          };
          skyAttack: {
              name: string;
              effect: string;
          };
          transform: {
              name: string;
              effect: string;
          };
          bubble: {
              name: string;
              effect: string;
          };
          dizzyPunch: {
              name: string;
              effect: string;
          };
          spore: {
              name: string;
              effect: string;
          };
          flash: {
              name: string;
              effect: string;
          };
          psywave: {
              name: string;
              effect: string;
          };
          splash: {
              name: string;
              effect: string;
          };
          acidArmor: {
              name: string;
              effect: string;
          };
          crabhammer: {
              name: string;
              effect: string;
          };
          explosion: {
              name: string;
              effect: string;
          };
          furySwipes: {
              name: string;
              effect: string;
          };
          bonemerang: {
              name: string;
              effect: string;
          };
          rest: {
              name: string;
              effect: string;
          };
          rockSlide: {
              name: string;
              effect: string;
          };
          hyperFang: {
              name: string;
              effect: string;
          };
          sharpen: {
              name: string;
              effect: string;
          };
          conversion: {
              name: string;
              effect: string;
          };
          triAttack: {
              name: string;
              effect: string;
          };
          superFang: {
              name: string;
              effect: string;
          };
          slash: {
              name: string;
              effect: string;
          };
          substitute: {
              name: string;
              effect: string;
          };
          struggle: {
              name: string;
              effect: string;
          };
          sketch: {
              name: string;
              effect: string;
          };
          tripleKick: {
              name: string;
              effect: string;
          };
          thief: {
              name: string;
              effect: string;
          };
          spiderWeb: {
              name: string;
              effect: string;
          };
          mindReader: {
              name: string;
              effect: string;
          };
          nightmare: {
              name: string;
              effect: string;
          };
          flameWheel: {
              name: string;
              effect: string;
          };
          snore: {
              name: string;
              effect: string;
          };
          curse: {
              name: string;
              effect: string;
          };
          flail: {
              name: string;
              effect: string;
          };
          conversion2: {
              name: string;
              effect: string;
          };
          aeroblast: {
              name: string;
              effect: string;
          };
          cottonSpore: {
              name: string;
              effect: string;
          };
          reversal: {
              name: string;
              effect: string;
          };
          spite: {
              name: string;
              effect: string;
          };
          powderSnow: {
              name: string;
              effect: string;
          };
          protect: {
              name: string;
              effect: string;
          };
          machPunch: {
              name: string;
              effect: string;
          };
          scaryFace: {
              name: string;
              effect: string;
          };
          feintAttack: {
              name: string;
              effect: string;
          };
          sweetKiss: {
              name: string;
              effect: string;
          };
          bellyDrum: {
              name: string;
              effect: string;
          };
          sludgeBomb: {
              name: string;
              effect: string;
          };
          mudSlap: {
              name: string;
              effect: string;
          };
          octazooka: {
              name: string;
              effect: string;
          };
          spikes: {
              name: string;
              effect: string;
          };
          zapCannon: {
              name: string;
              effect: string;
          };
          foresight: {
              name: string;
              effect: string;
          };
          destinyBond: {
              name: string;
              effect: string;
          };
          perishSong: {
              name: string;
              effect: string;
          };
          icyWind: {
              name: string;
              effect: string;
          };
          detect: {
              name: string;
              effect: string;
          };
          boneRush: {
              name: string;
              effect: string;
          };
          lockOn: {
              name: string;
              effect: string;
          };
          outrage: {
              name: string;
              effect: string;
          };
          sandstorm: {
              name: string;
              effect: string;
          };
          gigaDrain: {
              name: string;
              effect: string;
          };
          endure: {
              name: string;
              effect: string;
          };
          charm: {
              name: string;
              effect: string;
          };
          rollout: {
              name: string;
              effect: string;
          };
          falseSwipe: {
              name: string;
              effect: string;
          };
          swagger: {
              name: string;
              effect: string;
          };
          milkDrink: {
              name: string;
              effect: string;
          };
          spark: {
              name: string;
              effect: string;
          };
          furyCutter: {
              name: string;
              effect: string;
          };
          steelWing: {
              name: string;
              effect: string;
          };
          meanLook: {
              name: string;
              effect: string;
          };
          attract: {
              name: string;
              effect: string;
          };
          sleepTalk: {
              name: string;
              effect: string;
          };
          healBell: {
              name: string;
              effect: string;
          };
          return: {
              name: string;
              effect: string;
          };
          present: {
              name: string;
              effect: string;
          };
          frustration: {
              name: string;
              effect: string;
          };
          safeguard: {
              name: string;
              effect: string;
          };
          painSplit: {
              name: string;
              effect: string;
          };
          sacredFire: {
              name: string;
              effect: string;
          };
          magnitude: {
              name: string;
              effect: string;
          };
          dynamicPunch: {
              name: string;
              effect: string;
          };
          megahorn: {
              name: string;
              effect: string;
          };
          dragonBreath: {
              name: string;
              effect: string;
          };
          batonPass: {
              name: string;
              effect: string;
          };
          encore: {
              name: string;
              effect: string;
          };
          pursuit: {
              name: string;
              effect: string;
          };
          rapidSpin: {
              name: string;
              effect: string;
          };
          sweetScent: {
              name: string;
              effect: string;
          };
          ironTail: {
              name: string;
              effect: string;
          };
          metalClaw: {
              name: string;
              effect: string;
          };
          vitalThrow: {
              name: string;
              effect: string;
          };
          morningSun: {
              name: string;
              effect: string;
          };
          synthesis: {
              name: string;
              effect: string;
          };
          moonlight: {
              name: string;
              effect: string;
          };
          hiddenPower: {
              name: string;
              effect: string;
          };
          crossChop: {
              name: string;
              effect: string;
          };
          twister: {
              name: string;
              effect: string;
          };
          rainDance: {
              name: string;
              effect: string;
          };
          sunnyDay: {
              name: string;
              effect: string;
          };
          crunch: {
              name: string;
              effect: string;
          };
          mirrorCoat: {
              name: string;
              effect: string;
          };
          psychUp: {
              name: string;
              effect: string;
          };
          extremeSpeed: {
              name: string;
              effect: string;
          };
          ancientPower: {
              name: string;
              effect: string;
          };
          shadowBall: {
              name: string;
              effect: string;
          };
          futureSight: {
              name: string;
              effect: string;
          };
          rockSmash: {
              name: string;
              effect: string;
          };
          whirlpool: {
              name: string;
              effect: string;
          };
          beatUp: {
              name: string;
              effect: string;
          };
          fakeOut: {
              name: string;
              effect: string;
          };
          uproar: {
              name: string;
              effect: string;
          };
          stockpile: {
              name: string;
              effect: string;
          };
          spitUp: {
              name: string;
              effect: string;
          };
          swallow: {
              name: string;
              effect: string;
          };
          heatWave: {
              name: string;
              effect: string;
          };
          hail: {
              name: string;
              effect: string;
          };
          torment: {
              name: string;
              effect: string;
          };
          flatter: {
              name: string;
              effect: string;
          };
          willOWisp: {
              name: string;
              effect: string;
          };
          memento: {
              name: string;
              effect: string;
          };
          facade: {
              name: string;
              effect: string;
          };
          focusPunch: {
              name: string;
              effect: string;
          };
          smellingSalts: {
              name: string;
              effect: string;
          };
          followMe: {
              name: string;
              effect: string;
          };
          naturePower: {
              name: string;
              effect: string;
          };
          charge: {
              name: string;
              effect: string;
          };
          taunt: {
              name: string;
              effect: string;
          };
          helpingHand: {
              name: string;
              effect: string;
          };
          trick: {
              name: string;
              effect: string;
          };
          rolePlay: {
              name: string;
              effect: string;
          };
          wish: {
              name: string;
              effect: string;
          };
          assist: {
              name: string;
              effect: string;
          };
          ingrain: {
              name: string;
              effect: string;
          };
          superpower: {
              name: string;
              effect: string;
          };
          magicCoat: {
              name: string;
              effect: string;
          };
          recycle: {
              name: string;
              effect: string;
          };
          revenge: {
              name: string;
              effect: string;
          };
          brickBreak: {
              name: string;
              effect: string;
          };
          yawn: {
              name: string;
              effect: string;
          };
          knockOff: {
              name: string;
              effect: string;
          };
          endeavor: {
              name: string;
              effect: string;
          };
          eruption: {
              name: string;
              effect: string;
          };
          skillSwap: {
              name: string;
              effect: string;
          };
          imprison: {
              name: string;
              effect: string;
          };
          refresh: {
              name: string;
              effect: string;
          };
          grudge: {
              name: string;
              effect: string;
          };
          snatch: {
              name: string;
              effect: string;
          };
          secretPower: {
              name: string;
              effect: string;
          };
          dive: {
              name: string;
              effect: string;
          };
          armThrust: {
              name: string;
              effect: string;
          };
          camouflage: {
              name: string;
              effect: string;
          };
          tailGlow: {
              name: string;
              effect: string;
          };
          lusterPurge: {
              name: string;
              effect: string;
          };
          mistBall: {
              name: string;
              effect: string;
          };
          featherDance: {
              name: string;
              effect: string;
          };
          teeterDance: {
              name: string;
              effect: string;
          };
          blazeKick: {
              name: string;
              effect: string;
          };
          mudSport: {
              name: string;
              effect: string;
          };
          iceBall: {
              name: string;
              effect: string;
          };
          needleArm: {
              name: string;
              effect: string;
          };
          slackOff: {
              name: string;
              effect: string;
          };
          hyperVoice: {
              name: string;
              effect: string;
          };
          poisonFang: {
              name: string;
              effect: string;
          };
          crushClaw: {
              name: string;
              effect: string;
          };
          blastBurn: {
              name: string;
              effect: string;
          };
          hydroCannon: {
              name: string;
              effect: string;
          };
          meteorMash: {
              name: string;
              effect: string;
          };
          astonish: {
              name: string;
              effect: string;
          };
          weatherBall: {
              name: string;
              effect: string;
          };
          aromatherapy: {
              name: string;
              effect: string;
          };
          fakeTears: {
              name: string;
              effect: string;
          };
          airCutter: {
              name: string;
              effect: string;
          };
          overheat: {
              name: string;
              effect: string;
          };
          odorSleuth: {
              name: string;
              effect: string;
          };
          rockTomb: {
              name: string;
              effect: string;
          };
          silverWind: {
              name: string;
              effect: string;
          };
          metalSound: {
              name: string;
              effect: string;
          };
          grassWhistle: {
              name: string;
              effect: string;
          };
          tickle: {
              name: string;
              effect: string;
          };
          cosmicPower: {
              name: string;
              effect: string;
          };
          waterSpout: {
              name: string;
              effect: string;
          };
          signalBeam: {
              name: string;
              effect: string;
          };
          shadowPunch: {
              name: string;
              effect: string;
          };
          extrasensory: {
              name: string;
              effect: string;
          };
          skyUppercut: {
              name: string;
              effect: string;
          };
          sandTomb: {
              name: string;
              effect: string;
          };
          sheerCold: {
              name: string;
              effect: string;
          };
          muddyWater: {
              name: string;
              effect: string;
          };
          bulletSeed: {
              name: string;
              effect: string;
          };
          aerialAce: {
              name: string;
              effect: string;
          };
          icicleSpear: {
              name: string;
              effect: string;
          };
          ironDefense: {
              name: string;
              effect: string;
          };
          block: {
              name: string;
              effect: string;
          };
          howl: {
              name: string;
              effect: string;
          };
          dragonClaw: {
              name: string;
              effect: string;
          };
          frenzyPlant: {
              name: string;
              effect: string;
          };
          bulkUp: {
              name: string;
              effect: string;
          };
          bounce: {
              name: string;
              effect: string;
          };
          mudShot: {
              name: string;
              effect: string;
          };
          poisonTail: {
              name: string;
              effect: string;
          };
          covet: {
              name: string;
              effect: string;
          };
          voltTackle: {
              name: string;
              effect: string;
          };
          magicalLeaf: {
              name: string;
              effect: string;
          };
          waterSport: {
              name: string;
              effect: string;
          };
          calmMind: {
              name: string;
              effect: string;
          };
          leafBlade: {
              name: string;
              effect: string;
          };
          dragonDance: {
              name: string;
              effect: string;
          };
          rockBlast: {
              name: string;
              effect: string;
          };
          shockWave: {
              name: string;
              effect: string;
          };
          waterPulse: {
              name: string;
              effect: string;
          };
          doomDesire: {
              name: string;
              effect: string;
          };
          psychoBoost: {
              name: string;
              effect: string;
          };
          roost: {
              name: string;
              effect: string;
          };
          gravity: {
              name: string;
              effect: string;
          };
          miracleEye: {
              name: string;
              effect: string;
          };
          wakeUpSlap: {
              name: string;
              effect: string;
          };
          hammerArm: {
              name: string;
              effect: string;
          };
          gyroBall: {
              name: string;
              effect: string;
          };
          healingWish: {
              name: string;
              effect: string;
          };
          brine: {
              name: string;
              effect: string;
          };
          naturalGift: {
              name: string;
              effect: string;
          };
          feint: {
              name: string;
              effect: string;
          };
          pluck: {
              name: string;
              effect: string;
          };
          tailwind: {
              name: string;
              effect: string;
          };
          acupressure: {
              name: string;
              effect: string;
          };
          metalBurst: {
              name: string;
              effect: string;
          };
          uTurn: {
              name: string;
              effect: string;
          };
          closeCombat: {
              name: string;
              effect: string;
          };
          payback: {
              name: string;
              effect: string;
          };
          assurance: {
              name: string;
              effect: string;
          };
          embargo: {
              name: string;
              effect: string;
          };
          fling: {
              name: string;
              effect: string;
          };
          psychoShift: {
              name: string;
              effect: string;
          };
          trumpCard: {
              name: string;
              effect: string;
          };
          healBlock: {
              name: string;
              effect: string;
          };
          wringOut: {
              name: string;
              effect: string;
          };
          powerTrick: {
              name: string;
              effect: string;
          };
          gastroAcid: {
              name: string;
              effect: string;
          };
          luckyChant: {
              name: string;
              effect: string;
          };
          meFirst: {
              name: string;
              effect: string;
          };
          copycat: {
              name: string;
              effect: string;
          };
          powerSwap: {
              name: string;
              effect: string;
          };
          guardSwap: {
              name: string;
              effect: string;
          };
          punishment: {
              name: string;
              effect: string;
          };
          lastResort: {
              name: string;
              effect: string;
          };
          worrySeed: {
              name: string;
              effect: string;
          };
          suckerPunch: {
              name: string;
              effect: string;
          };
          toxicSpikes: {
              name: string;
              effect: string;
          };
          heartSwap: {
              name: string;
              effect: string;
          };
          aquaRing: {
              name: string;
              effect: string;
          };
          magnetRise: {
              name: string;
              effect: string;
          };
          flareBlitz: {
              name: string;
              effect: string;
          };
          forcePalm: {
              name: string;
              effect: string;
          };
          auraSphere: {
              name: string;
              effect: string;
          };
          rockPolish: {
              name: string;
              effect: string;
          };
          poisonJab: {
              name: string;
              effect: string;
          };
          darkPulse: {
              name: string;
              effect: string;
          };
          nightSlash: {
              name: string;
              effect: string;
          };
          aquaTail: {
              name: string;
              effect: string;
          };
          seedBomb: {
              name: string;
              effect: string;
          };
          airSlash: {
              name: string;
              effect: string;
          };
          xScissor: {
              name: string;
              effect: string;
          };
          bugBuzz: {
              name: string;
              effect: string;
          };
          dragonPulse: {
              name: string;
              effect: string;
          };
          dragonRush: {
              name: string;
              effect: string;
          };
          powerGem: {
              name: string;
              effect: string;
          };
          drainPunch: {
              name: string;
              effect: string;
          };
          vacuumWave: {
              name: string;
              effect: string;
          };
          focusBlast: {
              name: string;
              effect: string;
          };
          energyBall: {
              name: string;
              effect: string;
          };
          braveBird: {
              name: string;
              effect: string;
          };
          earthPower: {
              name: string;
              effect: string;
          };
          switcheroo: {
              name: string;
              effect: string;
          };
          gigaImpact: {
              name: string;
              effect: string;
          };
          nastyPlot: {
              name: string;
              effect: string;
          };
          bulletPunch: {
              name: string;
              effect: string;
          };
          avalanche: {
              name: string;
              effect: string;
          };
          iceShard: {
              name: string;
              effect: string;
          };
          shadowClaw: {
              name: string;
              effect: string;
          };
          thunderFang: {
              name: string;
              effect: string;
          };
          iceFang: {
              name: string;
              effect: string;
          };
          fireFang: {
              name: string;
              effect: string;
          };
          shadowSneak: {
              name: string;
              effect: string;
          };
          mudBomb: {
              name: string;
              effect: string;
          };
          psychoCut: {
              name: string;
              effect: string;
          };
          zenHeadbutt: {
              name: string;
              effect: string;
          };
          mirrorShot: {
              name: string;
              effect: string;
          };
          flashCannon: {
              name: string;
              effect: string;
          };
          rockClimb: {
              name: string;
              effect: string;
          };
          defog: {
              name: string;
              effect: string;
          };
          trickRoom: {
              name: string;
              effect: string;
          };
          dracoMeteor: {
              name: string;
              effect: string;
          };
          discharge: {
              name: string;
              effect: string;
          };
          lavaPlume: {
              name: string;
              effect: string;
          };
          leafStorm: {
              name: string;
              effect: string;
          };
          powerWhip: {
              name: string;
              effect: string;
          };
          rockWrecker: {
              name: string;
              effect: string;
          };
          crossPoison: {
              name: string;
              effect: string;
          };
          gunkShot: {
              name: string;
              effect: string;
          };
          ironHead: {
              name: string;
              effect: string;
          };
          magnetBomb: {
              name: string;
              effect: string;
          };
          stoneEdge: {
              name: string;
              effect: string;
          };
          captivate: {
              name: string;
              effect: string;
          };
          stealthRock: {
              name: string;
              effect: string;
          };
          grassKnot: {
              name: string;
              effect: string;
          };
          chatter: {
              name: string;
              effect: string;
          };
          judgment: {
              name: string;
              effect: string;
          };
          bugBite: {
              name: string;
              effect: string;
          };
          chargeBeam: {
              name: string;
              effect: string;
          };
          woodHammer: {
              name: string;
              effect: string;
          };
          aquaJet: {
              name: string;
              effect: string;
          };
          attackOrder: {
              name: string;
              effect: string;
          };
          defendOrder: {
              name: string;
              effect: string;
          };
          healOrder: {
              name: string;
              effect: string;
          };
          headSmash: {
              name: string;
              effect: string;
          };
          doubleHit: {
              name: string;
              effect: string;
          };
          roarOfTime: {
              name: string;
              effect: string;
          };
          spacialRend: {
              name: string;
              effect: string;
          };
          lunarDance: {
              name: string;
              effect: string;
          };
          crushGrip: {
              name: string;
              effect: string;
          };
          magmaStorm: {
              name: string;
              effect: string;
          };
          darkVoid: {
              name: string;
              effect: string;
          };
          seedFlare: {
              name: string;
              effect: string;
          };
          ominousWind: {
              name: string;
              effect: string;
          };
          shadowForce: {
              name: string;
              effect: string;
          };
          honeClaws: {
              name: string;
              effect: string;
          };
          wideGuard: {
              name: string;
              effect: string;
          };
          guardSplit: {
              name: string;
              effect: string;
          };
          powerSplit: {
              name: string;
              effect: string;
          };
          wonderRoom: {
              name: string;
              effect: string;
          };
          psyshock: {
              name: string;
              effect: string;
          };
          venoshock: {
              name: string;
              effect: string;
          };
          autotomize: {
              name: string;
              effect: string;
          };
          ragePowder: {
              name: string;
              effect: string;
          };
          telekinesis: {
              name: string;
              effect: string;
          };
          magicRoom: {
              name: string;
              effect: string;
          };
          smackDown: {
              name: string;
              effect: string;
          };
          stormThrow: {
              name: string;
              effect: string;
          };
          flameBurst: {
              name: string;
              effect: string;
          };
          sludgeWave: {
              name: string;
              effect: string;
          };
          quiverDance: {
              name: string;
              effect: string;
          };
          heavySlam: {
              name: string;
              effect: string;
          };
          synchronoise: {
              name: string;
              effect: string;
          };
          electroBall: {
              name: string;
              effect: string;
          };
          soak: {
              name: string;
              effect: string;
          };
          flameCharge: {
              name: string;
              effect: string;
          };
          coil: {
              name: string;
              effect: string;
          };
          lowSweep: {
              name: string;
              effect: string;
          };
          acidSpray: {
              name: string;
              effect: string;
          };
          foulPlay: {
              name: string;
              effect: string;
          };
          simpleBeam: {
              name: string;
              effect: string;
          };
          entrainment: {
              name: string;
              effect: string;
          };
          afterYou: {
              name: string;
              effect: string;
          };
          round: {
              name: string;
              effect: string;
          };
          echoedVoice: {
              name: string;
              effect: string;
          };
          chipAway: {
              name: string;
              effect: string;
          };
          clearSmog: {
              name: string;
              effect: string;
          };
          storedPower: {
              name: string;
              effect: string;
          };
          quickGuard: {
              name: string;
              effect: string;
          };
          allySwitch: {
              name: string;
              effect: string;
          };
          scald: {
              name: string;
              effect: string;
          };
          shellSmash: {
              name: string;
              effect: string;
          };
          healPulse: {
              name: string;
              effect: string;
          };
          hex: {
              name: string;
              effect: string;
          };
          skyDrop: {
              name: string;
              effect: string;
          };
          shiftGear: {
              name: string;
              effect: string;
          };
          circleThrow: {
              name: string;
              effect: string;
          };
          incinerate: {
              name: string;
              effect: string;
          };
          quash: {
              name: string;
              effect: string;
          };
          acrobatics: {
              name: string;
              effect: string;
          };
          reflectType: {
              name: string;
              effect: string;
          };
          retaliate: {
              name: string;
              effect: string;
          };
          finalGambit: {
              name: string;
              effect: string;
          };
          bestow: {
              name: string;
              effect: string;
          };
          inferno: {
              name: string;
              effect: string;
          };
          waterPledge: {
              name: string;
              effect: string;
          };
          firePledge: {
              name: string;
              effect: string;
          };
          grassPledge: {
              name: string;
              effect: string;
          };
          voltSwitch: {
              name: string;
              effect: string;
          };
          struggleBug: {
              name: string;
              effect: string;
          };
          bulldoze: {
              name: string;
              effect: string;
          };
          frostBreath: {
              name: string;
              effect: string;
          };
          dragonTail: {
              name: string;
              effect: string;
          };
          workUp: {
              name: string;
              effect: string;
          };
          electroweb: {
              name: string;
              effect: string;
          };
          wildCharge: {
              name: string;
              effect: string;
          };
          drillRun: {
              name: string;
              effect: string;
          };
          dualChop: {
              name: string;
              effect: string;
          };
          heartStamp: {
              name: string;
              effect: string;
          };
          hornLeech: {
              name: string;
              effect: string;
          };
          sacredSword: {
              name: string;
              effect: string;
          };
          razorShell: {
              name: string;
              effect: string;
          };
          heatCrash: {
              name: string;
              effect: string;
          };
          leafTornado: {
              name: string;
              effect: string;
          };
          steamroller: {
              name: string;
              effect: string;
          };
          cottonGuard: {
              name: string;
              effect: string;
          };
          nightDaze: {
              name: string;
              effect: string;
          };
          psystrike: {
              name: string;
              effect: string;
          };
          tailSlap: {
              name: string;
              effect: string;
          };
          hurricane: {
              name: string;
              effect: string;
          };
          headCharge: {
              name: string;
              effect: string;
          };
          gearGrind: {
              name: string;
              effect: string;
          };
          searingShot: {
              name: string;
              effect: string;
          };
          technoBlast: {
              name: string;
              effect: string;
          };
          relicSong: {
              name: string;
              effect: string;
          };
          secretSword: {
              name: string;
              effect: string;
          };
          glaciate: {
              name: string;
              effect: string;
          };
          boltStrike: {
              name: string;
              effect: string;
          };
          blueFlare: {
              name: string;
              effect: string;
          };
          fieryDance: {
              name: string;
              effect: string;
          };
          freezeShock: {
              name: string;
              effect: string;
          };
          iceBurn: {
              name: string;
              effect: string;
          };
          snarl: {
              name: string;
              effect: string;
          };
          icicleCrash: {
              name: string;
              effect: string;
          };
          vCreate: {
              name: string;
              effect: string;
          };
          fusionFlare: {
              name: string;
              effect: string;
          };
          fusionBolt: {
              name: string;
              effect: string;
          };
          flyingPress: {
              name: string;
              effect: string;
          };
          matBlock: {
              name: string;
              effect: string;
          };
          belch: {
              name: string;
              effect: string;
          };
          rototiller: {
              name: string;
              effect: string;
          };
          stickyWeb: {
              name: string;
              effect: string;
          };
          fellStinger: {
              name: string;
              effect: string;
          };
          phantomForce: {
              name: string;
              effect: string;
          };
          trickOrTreat: {
              name: string;
              effect: string;
          };
          nobleRoar: {
              name: string;
              effect: string;
          };
          ionDeluge: {
              name: string;
              effect: string;
          };
          parabolicCharge: {
              name: string;
              effect: string;
          };
          forestsCurse: {
              name: string;
              effect: string;
          };
          petalBlizzard: {
              name: string;
              effect: string;
          };
          freezeDry: {
              name: string;
              effect: string;
          };
          disarmingVoice: {
              name: string;
              effect: string;
          };
          partingShot: {
              name: string;
              effect: string;
          };
          topsyTurvy: {
              name: string;
              effect: string;
          };
          drainingKiss: {
              name: string;
              effect: string;
          };
          craftyShield: {
              name: string;
              effect: string;
          };
          flowerShield: {
              name: string;
              effect: string;
          };
          grassyTerrain: {
              name: string;
              effect: string;
          };
          mistyTerrain: {
              name: string;
              effect: string;
          };
          electrify: {
              name: string;
              effect: string;
          };
          playRough: {
              name: string;
              effect: string;
          };
          fairyWind: {
              name: string;
              effect: string;
          };
          moonblast: {
              name: string;
              effect: string;
          };
          boomburst: {
              name: string;
              effect: string;
          };
          fairyLock: {
              name: string;
              effect: string;
          };
          kingsShield: {
              name: string;
              effect: string;
          };
          playNice: {
              name: string;
              effect: string;
          };
          confide: {
              name: string;
              effect: string;
          };
          diamondStorm: {
              name: string;
              effect: string;
          };
          steamEruption: {
              name: string;
              effect: string;
          };
          hyperspaceHole: {
              name: string;
              effect: string;
          };
          waterShuriken: {
              name: string;
              effect: string;
          };
          mysticalFire: {
              name: string;
              effect: string;
          };
          spikyShield: {
              name: string;
              effect: string;
          };
          aromaticMist: {
              name: string;
              effect: string;
          };
          eerieImpulse: {
              name: string;
              effect: string;
          };
          venomDrench: {
              name: string;
              effect: string;
          };
          powder: {
              name: string;
              effect: string;
          };
          geomancy: {
              name: string;
              effect: string;
          };
          magneticFlux: {
              name: string;
              effect: string;
          };
          happyHour: {
              name: string;
              effect: string;
          };
          electricTerrain: {
              name: string;
              effect: string;
          };
          dazzlingGleam: {
              name: string;
              effect: string;
          };
          celebrate: {
              name: string;
              effect: string;
          };
          holdHands: {
              name: string;
              effect: string;
          };
          babyDollEyes: {
              name: string;
              effect: string;
          };
          nuzzle: {
              name: string;
              effect: string;
          };
          holdBack: {
              name: string;
              effect: string;
          };
          infestation: {
              name: string;
              effect: string;
          };
          powerUpPunch: {
              name: string;
              effect: string;
          };
          oblivionWing: {
              name: string;
              effect: string;
          };
          thousandArrows: {
              name: string;
              effect: string;
          };
          thousandWaves: {
              name: string;
              effect: string;
          };
          landsWrath: {
              name: string;
              effect: string;
          };
          lightOfRuin: {
              name: string;
              effect: string;
          };
          originPulse: {
              name: string;
              effect: string;
          };
          precipiceBlades: {
              name: string;
              effect: string;
          };
          dragonAscent: {
              name: string;
              effect: string;
          };
          hyperspaceFury: {
              name: string;
              effect: string;
          };
          breakneckBlitzPhysical: {
              name: string;
              effect: string;
          };
          breakneckBlitzSpecial: {
              name: string;
              effect: string;
          };
          allOutPummelingPhysical: {
              name: string;
              effect: string;
          };
          allOutPummelingSpecial: {
              name: string;
              effect: string;
          };
          supersonicSkystrikePhysical: {
              name: string;
              effect: string;
          };
          supersonicSkystrikeSpecial: {
              name: string;
              effect: string;
          };
          acidDownpourPhysical: {
              name: string;
              effect: string;
          };
          acidDownpourSpecial: {
              name: string;
              effect: string;
          };
          tectonicRagePhysical: {
              name: string;
              effect: string;
          };
          tectonicRageSpecial: {
              name: string;
              effect: string;
          };
          continentalCrushPhysical: {
              name: string;
              effect: string;
          };
          continentalCrushSpecial: {
              name: string;
              effect: string;
          };
          savageSpinOutPhysical: {
              name: string;
              effect: string;
          };
          savageSpinOutSpecial: {
              name: string;
              effect: string;
          };
          neverEndingNightmarePhysical: {
              name: string;
              effect: string;
          };
          neverEndingNightmareSpecial: {
              name: string;
              effect: string;
          };
          corkscrewCrashPhysical: {
              name: string;
              effect: string;
          };
          corkscrewCrashSpecial: {
              name: string;
              effect: string;
          };
          infernoOverdrivePhysical: {
              name: string;
              effect: string;
          };
          infernoOverdriveSpecial: {
              name: string;
              effect: string;
          };
          hydroVortexPhysical: {
              name: string;
              effect: string;
          };
          hydroVortexSpecial: {
              name: string;
              effect: string;
          };
          bloomDoomPhysical: {
              name: string;
              effect: string;
          };
          bloomDoomSpecial: {
              name: string;
              effect: string;
          };
          gigavoltHavocPhysical: {
              name: string;
              effect: string;
          };
          gigavoltHavocSpecial: {
              name: string;
              effect: string;
          };
          shatteredPsychePhysical: {
              name: string;
              effect: string;
          };
          shatteredPsycheSpecial: {
              name: string;
              effect: string;
          };
          subzeroSlammerPhysical: {
              name: string;
              effect: string;
          };
          subzeroSlammerSpecial: {
              name: string;
              effect: string;
          };
          devastatingDrakePhysical: {
              name: string;
              effect: string;
          };
          devastatingDrakeSpecial: {
              name: string;
              effect: string;
          };
          blackHoleEclipsePhysical: {
              name: string;
              effect: string;
          };
          blackHoleEclipseSpecial: {
              name: string;
              effect: string;
          };
          twinkleTacklePhysical: {
              name: string;
              effect: string;
          };
          twinkleTackleSpecial: {
              name: string;
              effect: string;
          };
          catastropika: {
              name: string;
              effect: string;
          };
          shoreUp: {
              name: string;
              effect: string;
          };
          firstImpression: {
              name: string;
              effect: string;
          };
          banefulBunker: {
              name: string;
              effect: string;
          };
          spiritShackle: {
              name: string;
              effect: string;
          };
          darkestLariat: {
              name: string;
              effect: string;
          };
          sparklingAria: {
              name: string;
              effect: string;
          };
          iceHammer: {
              name: string;
              effect: string;
          };
          floralHealing: {
              name: string;
              effect: string;
          };
          highHorsepower: {
              name: string;
              effect: string;
          };
          strengthSap: {
              name: string;
              effect: string;
          };
          solarBlade: {
              name: string;
              effect: string;
          };
          leafage: {
              name: string;
              effect: string;
          };
          spotlight: {
              name: string;
              effect: string;
          };
          toxicThread: {
              name: string;
              effect: string;
          };
          laserFocus: {
              name: string;
              effect: string;
          };
          gearUp: {
              name: string;
              effect: string;
          };
          throatChop: {
              name: string;
              effect: string;
          };
          pollenPuff: {
              name: string;
              effect: string;
          };
          anchorShot: {
              name: string;
              effect: string;
          };
          psychicTerrain: {
              name: string;
              effect: string;
          };
          lunge: {
              name: string;
              effect: string;
          };
          fireLash: {
              name: string;
              effect: string;
          };
          powerTrip: {
              name: string;
              effect: string;
          };
          burnUp: {
              name: string;
              effect: string;
          };
          speedSwap: {
              name: string;
              effect: string;
          };
          smartStrike: {
              name: string;
              effect: string;
          };
          purify: {
              name: string;
              effect: string;
          };
          revelationDance: {
              name: string;
              effect: string;
          };
          coreEnforcer: {
              name: string;
              effect: string;
          };
          tropKick: {
              name: string;
              effect: string;
          };
          instruct: {
              name: string;
              effect: string;
          };
          beakBlast: {
              name: string;
              effect: string;
          };
          clangingScales: {
              name: string;
              effect: string;
          };
          dragonHammer: {
              name: string;
              effect: string;
          };
          brutalSwing: {
              name: string;
              effect: string;
          };
          auroraVeil: {
              name: string;
              effect: string;
          };
          sinisterArrowRaid: {
              name: string;
              effect: string;
          };
          maliciousMoonsault: {
              name: string;
              effect: string;
          };
          oceanicOperetta: {
              name: string;
              effect: string;
          };
          guardianOfAlola: {
              name: string;
              effect: string;
          };
          soulStealing7StarStrike: {
              name: string;
              effect: string;
          };
          stokedSparksurfer: {
              name: string;
              effect: string;
          };
          pulverizingPancake: {
              name: string;
              effect: string;
          };
          extremeEvoboost: {
              name: string;
              effect: string;
          };
          genesisSupernova: {
              name: string;
              effect: string;
          };
          shellTrap: {
              name: string;
              effect: string;
          };
          fleurCannon: {
              name: string;
              effect: string;
          };
          psychicFangs: {
              name: string;
              effect: string;
          };
          stompingTantrum: {
              name: string;
              effect: string;
          };
          shadowBone: {
              name: string;
              effect: string;
          };
          accelerock: {
              name: string;
              effect: string;
          };
          liquidation: {
              name: string;
              effect: string;
          };
          prismaticLaser: {
              name: string;
              effect: string;
          };
          spectralThief: {
              name: string;
              effect: string;
          };
          sunsteelStrike: {
              name: string;
              effect: string;
          };
          moongeistBeam: {
              name: string;
              effect: string;
          };
          tearfulLook: {
              name: string;
              effect: string;
          };
          zingZap: {
              name: string;
              effect: string;
          };
          naturesMadness: {
              name: string;
              effect: string;
          };
          multiAttack: {
              name: string;
              effect: string;
          };
          tenMillionVoltThunderbolt: {
              name: string;
              effect: string;
          };
          mindBlown: {
              name: string;
              effect: string;
          };
          plasmaFists: {
              name: string;
              effect: string;
          };
          photonGeyser: {
              name: string;
              effect: string;
          };
          lightThatBurnsTheSky: {
              name: string;
              effect: string;
          };
          searingSunrazeSmash: {
              name: string;
              effect: string;
          };
          menacingMoonrazeMaelstrom: {
              name: string;
              effect: string;
          };
          letsSnuggleForever: {
              name: string;
              effect: string;
          };
          splinteredStormshards: {
              name: string;
              effect: string;
          };
          clangorousSoulblaze: {
              name: string;
              effect: string;
          };
          zippyZap: {
              name: string;
              effect: string;
          };
          splishySplash: {
              name: string;
              effect: string;
          };
          floatyFall: {
              name: string;
              effect: string;
          };
          pikaPapow: {
              name: string;
              effect: string;
          };
          bouncyBubble: {
              name: string;
              effect: string;
          };
          buzzyBuzz: {
              name: string;
              effect: string;
          };
          sizzlySlide: {
              name: string;
              effect: string;
          };
          glitzyGlow: {
              name: string;
              effect: string;
          };
          baddyBad: {
              name: string;
              effect: string;
          };
          sappySeed: {
              name: string;
              effect: string;
          };
          freezyFrost: {
              name: string;
              effect: string;
          };
          sparklySwirl: {
              name: string;
              effect: string;
          };
          veeveeVolley: {
              name: string;
              effect: string;
          };
          doubleIronBash: {
              name: string;
              effect: string;
          };
          maxGuard: {
              name: string;
              effect: string;
          };
          dynamaxCannon: {
              name: string;
              effect: string;
          };
          snipeShot: {
              name: string;
              effect: string;
          };
          jawLock: {
              name: string;
              effect: string;
          };
          stuffCheeks: {
              name: string;
              effect: string;
          };
          noRetreat: {
              name: string;
              effect: string;
          };
          tarShot: {
              name: string;
              effect: string;
          };
          magicPowder: {
              name: string;
              effect: string;
          };
          dragonDarts: {
              name: string;
              effect: string;
          };
          teatime: {
              name: string;
              effect: string;
          };
          octolock: {
              name: string;
              effect: string;
          };
          boltBeak: {
              name: string;
              effect: string;
          };
          fishiousRend: {
              name: string;
              effect: string;
          };
          courtChange: {
              name: string;
              effect: string;
          };
          maxFlare: {
              name: string;
              effect: string;
          };
          maxFlutterby: {
              name: string;
              effect: string;
          };
          maxLightning: {
              name: string;
              effect: string;
          };
          maxStrike: {
              name: string;
              effect: string;
          };
          maxKnuckle: {
              name: string;
              effect: string;
          };
          maxPhantasm: {
              name: string;
              effect: string;
          };
          maxHailstorm: {
              name: string;
              effect: string;
          };
          maxOoze: {
              name: string;
              effect: string;
          };
          maxGeyser: {
              name: string;
              effect: string;
          };
          maxAirstream: {
              name: string;
              effect: string;
          };
          maxStarfall: {
              name: string;
              effect: string;
          };
          maxWyrmwind: {
              name: string;
              effect: string;
          };
          maxMindstorm: {
              name: string;
              effect: string;
          };
          maxRockfall: {
              name: string;
              effect: string;
          };
          maxQuake: {
              name: string;
              effect: string;
          };
          maxDarkness: {
              name: string;
              effect: string;
          };
          maxOvergrowth: {
              name: string;
              effect: string;
          };
          maxSteelspike: {
              name: string;
              effect: string;
          };
          clangorousSoul: {
              name: string;
              effect: string;
          };
          bodyPress: {
              name: string;
              effect: string;
          };
          decorate: {
              name: string;
              effect: string;
          };
          drumBeating: {
              name: string;
              effect: string;
          };
          snapTrap: {
              name: string;
              effect: string;
          };
          pyroBall: {
              name: string;
              effect: string;
          };
          behemothBlade: {
              name: string;
              effect: string;
          };
          behemothBash: {
              name: string;
              effect: string;
          };
          auraWheel: {
              name: string;
              effect: string;
          };
          breakingSwipe: {
              name: string;
              effect: string;
          };
          branchPoke: {
              name: string;
              effect: string;
          };
          overdrive: {
              name: string;
              effect: string;
          };
          appleAcid: {
              name: string;
              effect: string;
          };
          gravApple: {
              name: string;
              effect: string;
          };
          spiritBreak: {
              name: string;
              effect: string;
          };
          strangeSteam: {
              name: string;
              effect: string;
          };
          lifeDew: {
              name: string;
              effect: string;
          };
          obstruct: {
              name: string;
              effect: string;
          };
          falseSurrender: {
              name: string;
              effect: string;
          };
          meteorAssault: {
              name: string;
              effect: string;
          };
          eternabeam: {
              name: string;
              effect: string;
          };
          steelBeam: {
              name: string;
              effect: string;
          };
          expandingForce: {
              name: string;
              effect: string;
          };
          steelRoller: {
              name: string;
              effect: string;
          };
          scaleShot: {
              name: string;
              effect: string;
          };
          meteorBeam: {
              name: string;
              effect: string;
          };
          shellSideArm: {
              name: string;
              effect: string;
          };
          mistyExplosion: {
              name: string;
              effect: string;
          };
          grassyGlide: {
              name: string;
              effect: string;
          };
          risingVoltage: {
              name: string;
              effect: string;
          };
          terrainPulse: {
              name: string;
              effect: string;
          };
          skitterSmack: {
              name: string;
              effect: string;
          };
          burningJealousy: {
              name: string;
              effect: string;
          };
          lashOut: {
              name: string;
              effect: string;
          };
          poltergeist: {
              name: string;
              effect: string;
          };
          corrosiveGas: {
              name: string;
              effect: string;
          };
          coaching: {
              name: string;
              effect: string;
          };
          flipTurn: {
              name: string;
              effect: string;
          };
          tripleAxel: {
              name: string;
              effect: string;
          };
          dualWingbeat: {
              name: string;
              effect: string;
          };
          scorchingSands: {
              name: string;
              effect: string;
          };
          jungleHealing: {
              name: string;
              effect: string;
          };
          wickedBlow: {
              name: string;
              effect: string;
          };
          surgingStrikes: {
              name: string;
              effect: string;
          };
          thunderCage: {
              name: string;
              effect: string;
          };
          dragonEnergy: {
              name: string;
              effect: string;
          };
          freezingGlare: {
              name: string;
              effect: string;
          };
          fieryWrath: {
              name: string;
              effect: string;
          };
          thunderousKick: {
              name: string;
              effect: string;
          };
          glacialLance: {
              name: string;
              effect: string;
          };
          astralBarrage: {
              name: string;
              effect: string;
          };
          eerieSpell: {
              name: string;
              effect: string;
          };
          direClaw: {
              name: string;
              effect: string;
          };
          psyshieldBash: {
              name: string;
              effect: string;
          };
          powerShift: {
              name: string;
              effect: string;
          };
          stoneAxe: {
              name: string;
              effect: string;
          };
          springtideStorm: {
              name: string;
              effect: string;
          };
          mysticalPower: {
              name: string;
              effect: string;
          };
          ragingFury: {
              name: string;
              effect: string;
          };
          waveCrash: {
              name: string;
              effect: string;
          };
          chloroblast: {
              name: string;
              effect: string;
          };
          mountainGale: {
              name: string;
              effect: string;
          };
          victoryDance: {
              name: string;
              effect: string;
          };
          headlongRush: {
              name: string;
              effect: string;
          };
          barbBarrage: {
              name: string;
              effect: string;
          };
          esperWing: {
              name: string;
              effect: string;
          };
          bitterMalice: {
              name: string;
              effect: string;
          };
          shelter: {
              name: string;
              effect: string;
          };
          tripleArrows: {
              name: string;
              effect: string;
          };
          infernalParade: {
              name: string;
              effect: string;
          };
          ceaselessEdge: {
              name: string;
              effect: string;
          };
          bleakwindStorm: {
              name: string;
              effect: string;
          };
          wildboltStorm: {
              name: string;
              effect: string;
          };
          sandsearStorm: {
              name: string;
              effect: string;
          };
          lunarBlessing: {
              name: string;
              effect: string;
          };
          takeHeart: {
              name: string;
              effect: string;
          };
          gMaxWildfire: {
              name: string;
              effect: string;
          };
          gMaxBefuddle: {
              name: string;
              effect: string;
          };
          gMaxVoltCrash: {
              name: string;
              effect: string;
          };
          gMaxGoldRush: {
              name: string;
              effect: string;
          };
          gMaxChiStrike: {
              name: string;
              effect: string;
          };
          gMaxTerror: {
              name: string;
              effect: string;
          };
          gMaxResonance: {
              name: string;
              effect: string;
          };
          gMaxCuddle: {
              name: string;
              effect: string;
          };
          gMaxReplenish: {
              name: string;
              effect: string;
          };
          gMaxMalodor: {
              name: string;
              effect: string;
          };
          gMaxStonesurge: {
              name: string;
              effect: string;
          };
          gMaxWindRage: {
              name: string;
              effect: string;
          };
          gMaxStunShock: {
              name: string;
              effect: string;
          };
          gMaxFinale: {
              name: string;
              effect: string;
          };
          gMaxDepletion: {
              name: string;
              effect: string;
          };
          gMaxGravitas: {
              name: string;
              effect: string;
          };
          gMaxVolcalith: {
              name: string;
              effect: string;
          };
          gMaxSandblast: {
              name: string;
              effect: string;
          };
          gMaxSnooze: {
              name: string;
              effect: string;
          };
          gMaxTartness: {
              name: string;
              effect: string;
          };
          gMaxSweetness: {
              name: string;
              effect: string;
          };
          gMaxSmite: {
              name: string;
              effect: string;
          };
          gMaxSteelsurge: {
              name: string;
              effect: string;
          };
          gMaxMeltdown: {
              name: string;
              effect: string;
          };
          gMaxFoamBurst: {
              name: string;
              effect: string;
          };
          gMaxCentiferno: {
              name: string;
              effect: string;
          };
          gMaxVineLash: {
              name: string;
              effect: string;
          };
          gMaxCannonade: {
              name: string;
              effect: string;
          };
          gMaxDrumSolo: {
              name: string;
              effect: string;
          };
          gMaxFireball: {
              name: string;
              effect: string;
          };
          gMaxHydrosnipe: {
              name: string;
              effect: string;
          };
          gMaxOneBlow: {
              name: string;
              effect: string;
          };
          gMaxRapidFlow: {
              name: string;
              effect: string;
          };
          teraBlast: {
              name: string;
              effect: string;
          };
          silkTrap: {
              name: string;
              effect: string;
          };
          axeKick: {
              name: string;
              effect: string;
          };
          lastRespects: {
              name: string;
              effect: string;
          };
          luminaCrash: {
              name: string;
              effect: string;
          };
          orderUp: {
              name: string;
              effect: string;
          };
          jetPunch: {
              name: string;
              effect: string;
          };
          spicyExtract: {
              name: string;
              effect: string;
          };
          spinOut: {
              name: string;
              effect: string;
          };
          populationBomb: {
              name: string;
              effect: string;
          };
          iceSpinner: {
              name: string;
              effect: string;
          };
          glaiveRush: {
              name: string;
              effect: string;
          };
          revivalBlessing: {
              name: string;
              effect: string;
          };
          saltCure: {
              name: string;
              effect: string;
          };
          tripleDive: {
              name: string;
              effect: string;
          };
          mortalSpin: {
              name: string;
              effect: string;
          };
          doodle: {
              name: string;
              effect: string;
          };
          filletAway: {
              name: string;
              effect: string;
          };
          kowtowCleave: {
              name: string;
              effect: string;
          };
          flowerTrick: {
              name: string;
              effect: string;
          };
          torchSong: {
              name: string;
              effect: string;
          };
          aquaStep: {
              name: string;
              effect: string;
          };
          ragingBull: {
              name: string;
              effect: string;
          };
          makeItRain: {
              name: string;
              effect: string;
          };
          psyblade: {
              name: string;
              effect: string;
          };
          hydroSteam: {
              name: string;
              effect: string;
          };
          ruination: {
              name: string;
              effect: string;
          };
          collisionCourse: {
              name: string;
              effect: string;
          };
          electroDrift: {
              name: string;
              effect: string;
          };
          shedTail: {
              name: string;
              effect: string;
          };
          chillyReception: {
              name: string;
              effect: string;
          };
          tidyUp: {
              name: string;
              effect: string;
          };
          snowscape: {
              name: string;
              effect: string;
          };
          pounce: {
              name: string;
              effect: string;
          };
          trailblaze: {
              name: string;
              effect: string;
          };
          chillingWater: {
              name: string;
              effect: string;
          };
          hyperDrill: {
              name: string;
              effect: string;
          };
          twinBeam: {
              name: string;
              effect: string;
          };
          rageFist: {
              name: string;
              effect: string;
          };
          armorCannon: {
              name: string;
              effect: string;
          };
          bitterBlade: {
              name: string;
              effect: string;
          };
          doubleShock: {
              name: string;
              effect: string;
          };
          gigatonHammer: {
              name: string;
              effect: string;
          };
          comeuppance: {
              name: string;
              effect: string;
          };
          aquaCutter: {
              name: string;
              effect: string;
          };
          blazingTorque: {
              name: string;
              effect: string;
          };
          wickedTorque: {
              name: string;
              effect: string;
          };
          noxiousTorque: {
              name: string;
              effect: string;
          };
          combatTorque: {
              name: string;
              effect: string;
          };
          magicalTorque: {
              name: string;
              effect: string;
          };
          bloodMoon: {
              name: string;
              effect: string;
          };
          matchaGotcha: {
              name: string;
              effect: string;
          };
          syrupBomb: {
              name: string;
              effect: string;
          };
          ivyCudgel: {
              name: string;
              effect: string;
          };
          electroShot: {
              name: string;
              effect: string;
          };
          teraStarstorm: {
              name: string;
              effect: string;
          };
          fickleBeam: {
              name: string;
              effect: string;
          };
          burningBulwark: {
              name: string;
              effect: string;
          };
          thunderclap: {
              name: string;
              effect: string;
          };
          mightyCleave: {
              name: string;
              effect: string;
          };
          tachyonCutter: {
              name: string;
              effect: string;
          };
          hardPress: {
              name: string;
              effect: string;
          };
          dragonCheer: {
              name: string;
              effect: string;
          };
          alluringVoice: {
              name: string;
              effect: string;
          };
          temperFlare: {
              name: string;
              effect: string;
          };
          supercellSlam: {
              name: string;
              effect: string;
          };
          psychicNoise: {
              name: string;
              effect: string;
          };
          upperHand: {
              name: string;
              effect: string;
          };
          malignantChain: {
              name: string;
              effect: string;
          };
      };
      nature: {
          Hardy: string;
          Lonely: string;
          Brave: string;
          Adamant: string;
          Naughty: string;
          Bold: string;
          Docile: string;
          Relaxed: string;
          Impish: string;
          Lax: string;
          Timid: string;
          Hasty: string;
          Serious: string;
          Jolly: string;
          Naive: string;
          Modest: string;
          Mild: string;
          Quiet: string;
          Bashful: string;
          Rash: string;
          Calm: string;
          Gentle: string;
          Sassy: string;
          Careful: string;
          Quirky: string;
      };
      pokeball: {
          pokeBall: string;
          greatBall: string;
          ultraBall: string;
          rogueBall: string;
          masterBall: string;
          luxuryBall: string;
      };
      pokemon: {
          bulbasaur: string;
          ivysaur: string;
          venusaur: string;
          charmander: string;
          charmeleon: string;
          charizard: string;
          squirtle: string;
          wartortle: string;
          blastoise: string;
          caterpie: string;
          metapod: string;
          butterfree: string;
          weedle: string;
          kakuna: string;
          beedrill: string;
          pidgey: string;
          pidgeotto: string;
          pidgeot: string;
          rattata: string;
          raticate: string;
          spearow: string;
          fearow: string;
          ekans: string;
          arbok: string;
          pikachu: string;
          raichu: string;
          sandshrew: string;
          sandslash: string;
          nidoran_f: string;
          nidorina: string;
          nidoqueen: string;
          nidoran_m: string;
          nidorino: string;
          nidoking: string;
          clefairy: string;
          clefable: string;
          vulpix: string;
          ninetales: string;
          jigglypuff: string;
          wigglytuff: string;
          zubat: string;
          golbat: string;
          oddish: string;
          gloom: string;
          vileplume: string;
          paras: string;
          parasect: string;
          venonat: string;
          venomoth: string;
          diglett: string;
          dugtrio: string;
          meowth: string;
          persian: string;
          psyduck: string;
          golduck: string;
          mankey: string;
          primeape: string;
          growlithe: string;
          arcanine: string;
          poliwag: string;
          poliwhirl: string;
          poliwrath: string;
          abra: string;
          kadabra: string;
          alakazam: string;
          machop: string;
          machoke: string;
          machamp: string;
          bellsprout: string;
          weepinbell: string;
          victreebel: string;
          tentacool: string;
          tentacruel: string;
          geodude: string;
          graveler: string;
          golem: string;
          ponyta: string;
          rapidash: string;
          slowpoke: string;
          slowbro: string;
          magnemite: string;
          magneton: string;
          farfetchd: string;
          doduo: string;
          dodrio: string;
          seel: string;
          dewgong: string;
          grimer: string;
          muk: string;
          shellder: string;
          cloyster: string;
          gastly: string;
          haunter: string;
          gengar: string;
          onix: string;
          drowzee: string;
          hypno: string;
          krabby: string;
          kingler: string;
          voltorb: string;
          electrode: string;
          exeggcute: string;
          exeggutor: string;
          cubone: string;
          marowak: string;
          hitmonlee: string;
          hitmonchan: string;
          lickitung: string;
          koffing: string;
          weezing: string;
          rhyhorn: string;
          rhydon: string;
          chansey: string;
          tangela: string;
          kangaskhan: string;
          horsea: string;
          seadra: string;
          goldeen: string;
          seaking: string;
          staryu: string;
          starmie: string;
          mr_mime: string;
          scyther: string;
          jynx: string;
          electabuzz: string;
          magmar: string;
          pinsir: string;
          tauros: string;
          magikarp: string;
          gyarados: string;
          lapras: string;
          ditto: string;
          eevee: string;
          vaporeon: string;
          jolteon: string;
          flareon: string;
          porygon: string;
          omanyte: string;
          omastar: string;
          kabuto: string;
          kabutops: string;
          aerodactyl: string;
          snorlax: string;
          articuno: string;
          zapdos: string;
          moltres: string;
          dratini: string;
          dragonair: string;
          dragonite: string;
          mewtwo: string;
          mew: string;
          chikorita: string;
          bayleef: string;
          meganium: string;
          cyndaquil: string;
          quilava: string;
          typhlosion: string;
          totodile: string;
          croconaw: string;
          feraligatr: string;
          sentret: string;
          furret: string;
          hoothoot: string;
          noctowl: string;
          ledyba: string;
          ledian: string;
          spinarak: string;
          ariados: string;
          crobat: string;
          chinchou: string;
          lanturn: string;
          pichu: string;
          cleffa: string;
          igglybuff: string;
          togepi: string;
          togetic: string;
          natu: string;
          xatu: string;
          mareep: string;
          flaaffy: string;
          ampharos: string;
          bellossom: string;
          marill: string;
          azumarill: string;
          sudowoodo: string;
          politoed: string;
          hoppip: string;
          skiploom: string;
          jumpluff: string;
          aipom: string;
          sunkern: string;
          sunflora: string;
          yanma: string;
          wooper: string;
          quagsire: string;
          espeon: string;
          umbreon: string;
          murkrow: string;
          slowking: string;
          misdreavus: string;
          unown: string;
          wobbuffet: string;
          girafarig: string;
          pineco: string;
          forretress: string;
          dunsparce: string;
          gligar: string;
          steelix: string;
          snubbull: string;
          granbull: string;
          qwilfish: string;
          scizor: string;
          shuckle: string;
          heracross: string;
          sneasel: string;
          teddiursa: string;
          ursaring: string;
          slugma: string;
          magcargo: string;
          swinub: string;
          piloswine: string;
          corsola: string;
          remoraid: string;
          octillery: string;
          delibird: string;
          mantine: string;
          skarmory: string;
          houndour: string;
          houndoom: string;
          kingdra: string;
          phanpy: string;
          donphan: string;
          porygon2: string;
          stantler: string;
          smeargle: string;
          tyrogue: string;
          hitmontop: string;
          smoochum: string;
          elekid: string;
          magby: string;
          miltank: string;
          blissey: string;
          raikou: string;
          entei: string;
          suicune: string;
          larvitar: string;
          pupitar: string;
          tyranitar: string;
          lugia: string;
          ho_oh: string;
          celebi: string;
          treecko: string;
          grovyle: string;
          sceptile: string;
          torchic: string;
          combusken: string;
          blaziken: string;
          mudkip: string;
          marshtomp: string;
          swampert: string;
          poochyena: string;
          mightyena: string;
          zigzagoon: string;
          linoone: string;
          wurmple: string;
          silcoon: string;
          beautifly: string;
          cascoon: string;
          dustox: string;
          lotad: string;
          lombre: string;
          ludicolo: string;
          seedot: string;
          nuzleaf: string;
          shiftry: string;
          taillow: string;
          swellow: string;
          wingull: string;
          pelipper: string;
          ralts: string;
          kirlia: string;
          gardevoir: string;
          surskit: string;
          masquerain: string;
          shroomish: string;
          breloom: string;
          slakoth: string;
          vigoroth: string;
          slaking: string;
          nincada: string;
          ninjask: string;
          shedinja: string;
          whismur: string;
          loudred: string;
          exploud: string;
          makuhita: string;
          hariyama: string;
          azurill: string;
          nosepass: string;
          skitty: string;
          delcatty: string;
          sableye: string;
          mawile: string;
          aron: string;
          lairon: string;
          aggron: string;
          meditite: string;
          medicham: string;
          electrike: string;
          manectric: string;
          plusle: string;
          minun: string;
          volbeat: string;
          illumise: string;
          roselia: string;
          gulpin: string;
          swalot: string;
          carvanha: string;
          sharpedo: string;
          wailmer: string;
          wailord: string;
          numel: string;
          camerupt: string;
          torkoal: string;
          spoink: string;
          grumpig: string;
          spinda: string;
          trapinch: string;
          vibrava: string;
          flygon: string;
          cacnea: string;
          cacturne: string;
          swablu: string;
          altaria: string;
          zangoose: string;
          seviper: string;
          lunatone: string;
          solrock: string;
          barboach: string;
          whiscash: string;
          corphish: string;
          crawdaunt: string;
          baltoy: string;
          claydol: string;
          lileep: string;
          cradily: string;
          anorith: string;
          armaldo: string;
          feebas: string;
          milotic: string;
          castform: string;
          kecleon: string;
          shuppet: string;
          banette: string;
          duskull: string;
          dusclops: string;
          tropius: string;
          chimecho: string;
          absol: string;
          wynaut: string;
          snorunt: string;
          glalie: string;
          spheal: string;
          sealeo: string;
          walrein: string;
          clamperl: string;
          huntail: string;
          gorebyss: string;
          relicanth: string;
          luvdisc: string;
          bagon: string;
          shelgon: string;
          salamence: string;
          beldum: string;
          metang: string;
          metagross: string;
          regirock: string;
          regice: string;
          registeel: string;
          latias: string;
          latios: string;
          kyogre: string;
          groudon: string;
          rayquaza: string;
          jirachi: string;
          deoxys: string;
          turtwig: string;
          grotle: string;
          torterra: string;
          chimchar: string;
          monferno: string;
          infernape: string;
          piplup: string;
          prinplup: string;
          empoleon: string;
          starly: string;
          staravia: string;
          staraptor: string;
          bidoof: string;
          bibarel: string;
          kricketot: string;
          kricketune: string;
          shinx: string;
          luxio: string;
          luxray: string;
          budew: string;
          roserade: string;
          cranidos: string;
          rampardos: string;
          shieldon: string;
          bastiodon: string;
          burmy: string;
          wormadam: string;
          mothim: string;
          combee: string;
          vespiquen: string;
          pachirisu: string;
          buizel: string;
          floatzel: string;
          cherubi: string;
          cherrim: string;
          shellos: string;
          gastrodon: string;
          ambipom: string;
          drifloon: string;
          drifblim: string;
          buneary: string;
          lopunny: string;
          mismagius: string;
          honchkrow: string;
          glameow: string;
          purugly: string;
          chingling: string;
          stunky: string;
          skuntank: string;
          bronzor: string;
          bronzong: string;
          bonsly: string;
          mime_jr: string;
          happiny: string;
          chatot: string;
          spiritomb: string;
          gible: string;
          gabite: string;
          garchomp: string;
          munchlax: string;
          riolu: string;
          lucario: string;
          hippopotas: string;
          hippowdon: string;
          skorupi: string;
          drapion: string;
          croagunk: string;
          toxicroak: string;
          carnivine: string;
          finneon: string;
          lumineon: string;
          mantyke: string;
          snover: string;
          abomasnow: string;
          weavile: string;
          magnezone: string;
          lickilicky: string;
          rhyperior: string;
          tangrowth: string;
          electivire: string;
          magmortar: string;
          togekiss: string;
          yanmega: string;
          leafeon: string;
          glaceon: string;
          gliscor: string;
          mamoswine: string;
          porygon_z: string;
          gallade: string;
          probopass: string;
          dusknoir: string;
          froslass: string;
          rotom: string;
          uxie: string;
          mesprit: string;
          azelf: string;
          dialga: string;
          palkia: string;
          heatran: string;
          regigigas: string;
          giratina: string;
          cresselia: string;
          phione: string;
          manaphy: string;
          darkrai: string;
          shaymin: string;
          arceus: string;
          victini: string;
          snivy: string;
          servine: string;
          serperior: string;
          tepig: string;
          pignite: string;
          emboar: string;
          oshawott: string;
          dewott: string;
          samurott: string;
          patrat: string;
          watchog: string;
          lillipup: string;
          herdier: string;
          stoutland: string;
          purrloin: string;
          liepard: string;
          pansage: string;
          simisage: string;
          pansear: string;
          simisear: string;
          panpour: string;
          simipour: string;
          munna: string;
          musharna: string;
          pidove: string;
          tranquill: string;
          unfezant: string;
          blitzle: string;
          zebstrika: string;
          roggenrola: string;
          boldore: string;
          gigalith: string;
          woobat: string;
          swoobat: string;
          drilbur: string;
          excadrill: string;
          audino: string;
          timburr: string;
          gurdurr: string;
          conkeldurr: string;
          tympole: string;
          palpitoad: string;
          seismitoad: string;
          throh: string;
          sawk: string;
          sewaddle: string;
          swadloon: string;
          leavanny: string;
          venipede: string;
          whirlipede: string;
          scolipede: string;
          cottonee: string;
          whimsicott: string;
          petilil: string;
          lilligant: string;
          basculin: string;
          sandile: string;
          krokorok: string;
          krookodile: string;
          darumaka: string;
          darmanitan: string;
          maractus: string;
          dwebble: string;
          crustle: string;
          scraggy: string;
          scrafty: string;
          sigilyph: string;
          yamask: string;
          cofagrigus: string;
          tirtouga: string;
          carracosta: string;
          archen: string;
          archeops: string;
          trubbish: string;
          garbodor: string;
          zorua: string;
          zoroark: string;
          minccino: string;
          cinccino: string;
          gothita: string;
          gothorita: string;
          gothitelle: string;
          solosis: string;
          duosion: string;
          reuniclus: string;
          ducklett: string;
          swanna: string;
          vanillite: string;
          vanillish: string;
          vanilluxe: string;
          deerling: string;
          sawsbuck: string;
          emolga: string;
          karrablast: string;
          escavalier: string;
          foongus: string;
          amoonguss: string;
          frillish: string;
          jellicent: string;
          alomomola: string;
          joltik: string;
          galvantula: string;
          ferroseed: string;
          ferrothorn: string;
          klink: string;
          klang: string;
          klinklang: string;
          tynamo: string;
          eelektrik: string;
          eelektross: string;
          elgyem: string;
          beheeyem: string;
          litwick: string;
          lampent: string;
          chandelure: string;
          axew: string;
          fraxure: string;
          haxorus: string;
          cubchoo: string;
          beartic: string;
          cryogonal: string;
          shelmet: string;
          accelgor: string;
          stunfisk: string;
          mienfoo: string;
          mienshao: string;
          druddigon: string;
          golett: string;
          golurk: string;
          pawniard: string;
          bisharp: string;
          bouffalant: string;
          rufflet: string;
          braviary: string;
          vullaby: string;
          mandibuzz: string;
          heatmor: string;
          durant: string;
          deino: string;
          zweilous: string;
          hydreigon: string;
          larvesta: string;
          volcarona: string;
          cobalion: string;
          terrakion: string;
          virizion: string;
          tornadus: string;
          thundurus: string;
          reshiram: string;
          zekrom: string;
          landorus: string;
          kyurem: string;
          keldeo: string;
          meloetta: string;
          genesect: string;
          chespin: string;
          quilladin: string;
          chesnaught: string;
          fennekin: string;
          braixen: string;
          delphox: string;
          froakie: string;
          frogadier: string;
          greninja: string;
          bunnelby: string;
          diggersby: string;
          fletchling: string;
          fletchinder: string;
          talonflame: string;
          scatterbug: string;
          spewpa: string;
          vivillon: string;
          litleo: string;
          pyroar: string;
          flabebe: string;
          floette: string;
          florges: string;
          skiddo: string;
          gogoat: string;
          pancham: string;
          pangoro: string;
          furfrou: string;
          espurr: string;
          meowstic: string;
          honedge: string;
          doublade: string;
          aegislash: string;
          spritzee: string;
          aromatisse: string;
          swirlix: string;
          slurpuff: string;
          inkay: string;
          malamar: string;
          binacle: string;
          barbaracle: string;
          skrelp: string;
          dragalge: string;
          clauncher: string;
          clawitzer: string;
          helioptile: string;
          heliolisk: string;
          tyrunt: string;
          tyrantrum: string;
          amaura: string;
          aurorus: string;
          sylveon: string;
          hawlucha: string;
          dedenne: string;
          carbink: string;
          goomy: string;
          sliggoo: string;
          goodra: string;
          klefki: string;
          phantump: string;
          trevenant: string;
          pumpkaboo: string;
          gourgeist: string;
          bergmite: string;
          avalugg: string;
          noibat: string;
          noivern: string;
          xerneas: string;
          yveltal: string;
          zygarde: string;
          diancie: string;
          hoopa: string;
          volcanion: string;
          rowlet: string;
          dartrix: string;
          decidueye: string;
          litten: string;
          torracat: string;
          incineroar: string;
          popplio: string;
          brionne: string;
          primarina: string;
          pikipek: string;
          trumbeak: string;
          toucannon: string;
          yungoos: string;
          gumshoos: string;
          grubbin: string;
          charjabug: string;
          vikavolt: string;
          crabrawler: string;
          crabominable: string;
          oricorio: string;
          cutiefly: string;
          ribombee: string;
          rockruff: string;
          lycanroc: string;
          wishiwashi: string;
          mareanie: string;
          toxapex: string;
          mudbray: string;
          mudsdale: string;
          dewpider: string;
          araquanid: string;
          fomantis: string;
          lurantis: string;
          morelull: string;
          shiinotic: string;
          salandit: string;
          salazzle: string;
          stufful: string;
          bewear: string;
          bounsweet: string;
          steenee: string;
          tsareena: string;
          comfey: string;
          oranguru: string;
          passimian: string;
          wimpod: string;
          golisopod: string;
          sandygast: string;
          palossand: string;
          pyukumuku: string;
          type_null: string;
          silvally: string;
          minior: string;
          komala: string;
          turtonator: string;
          togedemaru: string;
          mimikyu: string;
          bruxish: string;
          drampa: string;
          dhelmise: string;
          jangmo_o: string;
          hakamo_o: string;
          kommo_o: string;
          tapu_koko: string;
          tapu_lele: string;
          tapu_bulu: string;
          tapu_fini: string;
          cosmog: string;
          cosmoem: string;
          solgaleo: string;
          lunala: string;
          nihilego: string;
          buzzwole: string;
          pheromosa: string;
          xurkitree: string;
          celesteela: string;
          kartana: string;
          guzzlord: string;
          necrozma: string;
          magearna: string;
          marshadow: string;
          poipole: string;
          naganadel: string;
          stakataka: string;
          blacephalon: string;
          zeraora: string;
          meltan: string;
          melmetal: string;
          grookey: string;
          thwackey: string;
          rillaboom: string;
          scorbunny: string;
          raboot: string;
          cinderace: string;
          sobble: string;
          drizzile: string;
          inteleon: string;
          skwovet: string;
          greedent: string;
          rookidee: string;
          corvisquire: string;
          corviknight: string;
          blipbug: string;
          dottler: string;
          orbeetle: string;
          nickit: string;
          thievul: string;
          gossifleur: string;
          eldegoss: string;
          wooloo: string;
          dubwool: string;
          chewtle: string;
          drednaw: string;
          yamper: string;
          boltund: string;
          rolycoly: string;
          carkol: string;
          coalossal: string;
          applin: string;
          flapple: string;
          appletun: string;
          silicobra: string;
          sandaconda: string;
          cramorant: string;
          arrokuda: string;
          barraskewda: string;
          toxel: string;
          toxtricity: string;
          sizzlipede: string;
          centiskorch: string;
          clobbopus: string;
          grapploct: string;
          sinistea: string;
          polteageist: string;
          hatenna: string;
          hattrem: string;
          hatterene: string;
          impidimp: string;
          morgrem: string;
          grimmsnarl: string;
          obstagoon: string;
          perrserker: string;
          cursola: string;
          sirfetchd: string;
          mr_rime: string;
          runerigus: string;
          milcery: string;
          alcremie: string;
          falinks: string;
          pincurchin: string;
          snom: string;
          frosmoth: string;
          stonjourner: string;
          eiscue: string;
          indeedee: string;
          morpeko: string;
          cufant: string;
          copperajah: string;
          dracozolt: string;
          arctozolt: string;
          dracovish: string;
          arctovish: string;
          duraludon: string;
          dreepy: string;
          drakloak: string;
          dragapult: string;
          zacian: string;
          zamazenta: string;
          eternatus: string;
          kubfu: string;
          urshifu: string;
          zarude: string;
          regieleki: string;
          regidrago: string;
          glastrier: string;
          spectrier: string;
          calyrex: string;
          wyrdeer: string;
          kleavor: string;
          ursaluna: string;
          basculegion: string;
          sneasler: string;
          overqwil: string;
          enamorus: string;
          sprigatito: string;
          floragato: string;
          meowscarada: string;
          fuecoco: string;
          crocalor: string;
          skeledirge: string;
          quaxly: string;
          quaxwell: string;
          quaquaval: string;
          lechonk: string;
          oinkologne: string;
          tarountula: string;
          spidops: string;
          nymble: string;
          lokix: string;
          pawmi: string;
          pawmo: string;
          pawmot: string;
          tandemaus: string;
          maushold: string;
          fidough: string;
          dachsbun: string;
          smoliv: string;
          dolliv: string;
          arboliva: string;
          squawkabilly: string;
          nacli: string;
          naclstack: string;
          garganacl: string;
          charcadet: string;
          armarouge: string;
          ceruledge: string;
          tadbulb: string;
          bellibolt: string;
          wattrel: string;
          kilowattrel: string;
          maschiff: string;
          mabosstiff: string;
          shroodle: string;
          grafaiai: string;
          bramblin: string;
          brambleghast: string;
          toedscool: string;
          toedscruel: string;
          klawf: string;
          capsakid: string;
          scovillain: string;
          rellor: string;
          rabsca: string;
          flittle: string;
          espathra: string;
          tinkatink: string;
          tinkatuff: string;
          tinkaton: string;
          wiglett: string;
          wugtrio: string;
          bombirdier: string;
          finizen: string;
          palafin: string;
          varoom: string;
          revavroom: string;
          cyclizar: string;
          orthworm: string;
          glimmet: string;
          glimmora: string;
          greavard: string;
          houndstone: string;
          flamigo: string;
          cetoddle: string;
          cetitan: string;
          veluza: string;
          dondozo: string;
          tatsugiri: string;
          annihilape: string;
          clodsire: string;
          farigiraf: string;
          dudunsparce: string;
          kingambit: string;
          great_tusk: string;
          scream_tail: string;
          brute_bonnet: string;
          flutter_mane: string;
          slither_wing: string;
          sandy_shocks: string;
          iron_treads: string;
          iron_bundle: string;
          iron_hands: string;
          iron_jugulis: string;
          iron_moth: string;
          iron_thorns: string;
          frigibax: string;
          arctibax: string;
          baxcalibur: string;
          gimmighoul: string;
          gholdengo: string;
          wo_chien: string;
          chien_pao: string;
          ting_lu: string;
          chi_yu: string;
          roaring_moon: string;
          iron_valiant: string;
          koraidon: string;
          miraidon: string;
          walking_wake: string;
          iron_leaves: string;
          dipplin: string;
          poltchageist: string;
          sinistcha: string;
          okidogi: string;
          munkidori: string;
          fezandipiti: string;
          ogerpon: string;
          archaludon: string;
          hydrapple: string;
          gouging_fire: string;
          raging_bolt: string;
          iron_boulder: string;
          iron_crown: string;
          terapagos: string;
          pecharunt: string;
          alola_rattata: string;
          alola_raticate: string;
          alola_raichu: string;
          alola_sandshrew: string;
          alola_sandslash: string;
          alola_vulpix: string;
          alola_ninetales: string;
          alola_diglett: string;
          alola_dugtrio: string;
          alola_meowth: string;
          alola_persian: string;
          alola_geodude: string;
          alola_graveler: string;
          alola_golem: string;
          alola_grimer: string;
          alola_muk: string;
          alola_exeggutor: string;
          alola_marowak: string;
          eternal_floette: string;
          galar_meowth: string;
          galar_ponyta: string;
          galar_rapidash: string;
          galar_slowpoke: string;
          galar_slowbro: string;
          galar_farfetchd: string;
          galar_weezing: string;
          galar_mr_mime: string;
          galar_articuno: string;
          galar_zapdos: string;
          galar_moltres: string;
          galar_slowking: string;
          galar_corsola: string;
          galar_zigzagoon: string;
          galar_linoone: string;
          galar_darumaka: string;
          galar_darmanitan: string;
          galar_yamask: string;
          galar_stunfisk: string;
          hisui_growlithe: string;
          hisui_arcanine: string;
          hisui_voltorb: string;
          hisui_electrode: string;
          hisui_typhlosion: string;
          hisui_qwilfish: string;
          hisui_sneasel: string;
          hisui_samurott: string;
          hisui_lilligant: string;
          hisui_zorua: string;
          hisui_zoroark: string;
          hisui_braviary: string;
          hisui_sliggoo: string;
          hisui_goodra: string;
          hisui_avalugg: string;
          hisui_decidueye: string;
          paldea_tauros: string;
          paldea_wooper: string;
          bloodmoon_ursaluna: string;
      };
      pokemonForm: {
          pikachuCosplay: string;
          pikachuCoolCosplay: string;
          pikachuBeautyCosplay: string;
          pikachuCuteCosplay: string;
          pikachuSmartCosplay: string;
          pikachuToughCosplay: string;
          pikachuPartner: string;
          eeveePartner: string;
          pichuSpiky: string;
          unownA: string;
          unownB: string;
          unownC: string;
          unownD: string;
          unownE: string;
          unownF: string;
          unownG: string;
          unownH: string;
          unownI: string;
          unownJ: string;
          unownK: string;
          unownL: string;
          unownM: string;
          unownN: string;
          unownO: string;
          unownP: string;
          unownQ: string;
          unownR: string;
          unownS: string;
          unownT: string;
          unownU: string;
          unownV: string;
          unownW: string;
          unownX: string;
          unownY: string;
          unownZ: string;
          unownExclamation: string;
          unownQuestion: string;
          castformSunny: string;
          castformRainy: string;
          castformSnowy: string;
          deoxysNormal: string;
          burmyPlant: string;
          burmySandy: string;
          burmyTrash: string;
          shellosEast: string;
          shellosWest: string;
          rotomHeat: string;
          rotomWash: string;
          rotomFrost: string;
          rotomFan: string;
          rotomMow: string;
          giratinaAltered: string;
          shayminLand: string;
          basculinRedStriped: string;
          basculinBlueStriped: string;
          basculinWhiteStriped: string;
          deerlingSpring: string;
          deerlingSummer: string;
          deerlingAutumn: string;
          deerlingWinter: string;
          tornadusIncarnate: string;
          thundurusIncarnate: string;
          landorusIncarnate: string;
          keldeoOrdinary: string;
          meloettaAria: string;
          meloettaPirouette: string;
          froakieBattleBond: string;
          scatterbugMeadow: string;
          scatterbugIcySnow: string;
          scatterbugPolar: string;
          scatterbugTundra: string;
          scatterbugContinental: string;
          scatterbugGarden: string;
          scatterbugElegant: string;
          scatterbugModern: string;
          scatterbugMarine: string;
          scatterbugArchipelago: string;
          scatterbugHighPlains: string;
          scatterbugSandstorm: string;
          scatterbugRiver: string;
          scatterbugMonsoon: string;
          scatterbugSavanna: string;
          scatterbugSun: string;
          scatterbugOcean: string;
          scatterbugJungle: string;
          scatterbugFancy: string;
          scatterbugPokeBall: string;
          flabebeRed: string;
          flabebeYellow: string;
          flabebeOrange: string;
          flabebeBlue: string;
          flabebeWhite: string;
          furfrouHeart: string;
          furfrouStar: string;
          furfrouDiamond: string;
          furfrouDebutante: string;
          furfrouMatron: string;
          furfrouDandy: string;
          furfrouLaReine: string;
          furfrouKabuki: string;
          furfrouPharaoh: string;
          pumpkabooSmall: string;
          pumpkabooLarge: string;
          pumpkabooSuper: string;
          xerneasNeutral: string;
          xerneasActive: string;
          zygarde50: string;
          zygarde10: string;
          zygarde50Pc: string;
          zygarde10Pc: string;
          zygardeComplete: string;
          oricorioBaile: string;
          oricorioPompom: string;
          oricorioPau: string;
          oricorioSensu: string;
          rockruffOwnTempo: string;
          miniorRedMeteor: string;
          miniorOrangeMeteor: string;
          miniorYellowMeteor: string;
          miniorGreenMeteor: string;
          miniorBlueMeteor: string;
          miniorIndigoMeteor: string;
          miniorVioletMeteor: string;
          miniorRed: string;
          miniorOrange: string;
          miniorYellow: string;
          miniorGreen: string;
          miniorBlue: string;
          miniorIndigo: string;
          miniorViolet: string;
          mimikyuDisguised: string;
          mimikyuBusted: string;
          magearnaOriginal: string;
          marshadowZenith: string;
          sinisteaPhony: string;
          sinisteaAntique: string;
          eiscueNoIce: string;
          indeedeeMale: string;
          indeedeeFemale: string;
          morpekoFullBelly: string;
          zacianHeroOfManyBattles: string;
          zamazentaHeroOfManyBattles: string;
          zarudeDada: string;
          enamorusIncarnate: string;
          squawkabillyGreenPlumage: string;
          squawkabillyBluePlumage: string;
          squawkabillyYellowPlumage: string;
          squawkabillyWhitePlumage: string;
          tatsugiriCurly: string;
          tatsugiriDroopy: string;
          tatsugiriStretchy: string;
          gimmighoulChest: string;
          gimmighoulRoaming: string;
          koraidonApexBuild: string;
          koraidonLimitedBuild: string;
          koraidonSprintingBuild: string;
          koraidonSwimmingBuild: string;
          koraidonGlidingBuild: string;
          miraidonUltimateMode: string;
          miraidonLowPowerMode: string;
          miraidonDriveMode: string;
          miraidonAquaticMode: string;
          miraidonGlideMode: string;
          poltchageistCounterfeit: string;
          poltchageistArtisan: string;
          paldeaTaurosCombat: string;
          paldeaTaurosBlaze: string;
          paldeaTaurosAqua: string;
      };
      pokemonInfo: {
          Stat: {
              HP: string;
              HPshortened: string;
              ATK: string;
              ATKshortened: string;
              DEF: string;
              DEFshortened: string;
              SPATK: string;
              SPATKshortened: string;
              SPDEF: string;
              SPDEFshortened: string;
              SPD: string;
              SPDshortened: string;
              ACC: string;
              EVA: string;
              HPStat: string;
          };
          Type: {
              UNKNOWN: string;
              NORMAL: string;
              FIGHTING: string;
              FLYING: string;
              POISON: string;
              GROUND: string;
              ROCK: string;
              BUG: string;
              GHOST: string;
              STEEL: string;
              FIRE: string;
              WATER: string;
              GRASS: string;
              ELECTRIC: string;
              PSYCHIC: string;
              ICE: string;
              DRAGON: string;
              DARK: string;
              FAIRY: string;
              STELLAR: string;
          };
      };
      pokemonInfoContainer: {
          moveset: string;
          gender: string;
          ability: string;
          nature: string;
          form: string;
      };
      pokemonSummary: {
          pokemonInfo: string;
          status: string;
          powerAccuracyCategory: string;
          type: string;
          unknownTrainer: string;
          ot: string;
          nature: string;
          expPoints: string;
          nextLv: string;
          cancel: string;
          memoString: string;
          metFragment: {
              normal: string;
              apparently: string;
          };
          natureFragment: {
              Hardy: string;
              Lonely: string;
              Brave: string;
              Adamant: string;
              Naughty: string;
              Bold: string;
              Docile: string;
              Relaxed: string;
              Impish: string;
              Lax: string;
              Timid: string;
              Hasty: string;
              Serious: string;
              Jolly: string;
              Naive: string;
              Modest: string;
              Mild: string;
              Quiet: string;
              Bashful: string;
              Rash: string;
              Calm: string;
              Gentle: string;
              Sassy: string;
              Careful: string;
              Quirky: string;
          };
      };
      saveSlotSelectUiHandler: {
          overwriteData: string;
          loading: string;
          wave: string;
          lv: string;
          empty: string;
      };
      settings: {
          boy: string;
          girl: string;
          general: string;
          display: string;
          audio: string;
          gamepad: string;
          keyboard: string;
          gameSpeed: string;
          hpBarSpeed: string;
          expGainsSpeed: string;
          expPartyDisplay: string;
          skipSeenDialogues: string;
          battleStyle: string;
          enableRetries: string;
          hideIvs: string;
          tutorials: string;
          touchControls: string;
          vibrations: string;
          normal: string;
          fast: string;
          faster: string;
          skip: string;
          levelUpNotifications: string;
          on: string;
          off: string;
          switch: string;
          set: string;
          auto: string;
          disabled: string;
          language: string;
          change: string;
          uiTheme: string;
          default: string;
          legacy: string;
          windowType: string;
          moneyFormat: string;
          damageNumbers: string;
          simple: string;
          fancy: string;
          abbreviated: string;
          moveAnimations: string;
          showStatsOnLevelUp: string;
          candyUpgradeNotification: string;
          passivesOnly: string;
          candyUpgradeDisplay: string;
          icon: string;
          animation: string;
          moveInfo: string;
          showMovesetFlyout: string;
          showArenaFlyout: string;
          showTimeOfDayWidget: string;
          timeOfDayAnimation: string;
          bounce: string;
          timeOfDay_back: string;
          spriteSet: string;
          consistent: string;
          mixedAnimated: string;
          fusionPaletteSwaps: string;
          playerGender: string;
          typeHints: string;
          masterVolume: string;
          bgmVolume: string;
          fieldVolume: string;
          seVolume: string;
          uiVolume: string;
          musicPreference: string;
          mixed: string;
          gamepadPleasePlug: string;
          delete: string;
          keyboardPleasePress: string;
          reset: string;
          requireReload: string;
          action: string;
          back: string;
          pressToBind: string;
          pressButton: string;
          buttonUp: string;
          buttonDown: string;
          buttonLeft: string;
          buttonRight: string;
          buttonAction: string;
          buttonMenu: string;
          buttonSubmit: string;
          buttonCancel: string;
          buttonStats: string;
          buttonCycleForm: string;
          buttonCycleShiny: string;
          buttonCycleGender: string;
          buttonCycleAbility: string;
          buttonCycleNature: string;
          buttonCycleVariant: string;
          buttonSpeedUp: string;
          buttonSlowDown: string;
          alt: string;
          mute: string;
          controller: string;
          gamepadSupport: string;
          showBgmBar: string;
          moveTouchControls: string;
          shopOverlayOpacity: string;
          shopCursorTarget: string;
          rewards: string;
          reroll: string;
          shop: string;
          checkTeam: string;
      };
      splashMessages: {
          battlesWon: string;
          joinTheDiscord: string;
          infiniteLevels: string;
          everythingStacks: string;
          optionalSaveScumming: string;
          biomes: string;
          openSource: string;
          playWithSpeed: string;
          liveBugTesting: string;
          heavyInfluence: string;
          pokemonRiskAndPokemonRain: string;
          nowWithMoreSalt: string;
          infiniteFusionAtHome: string;
          brokenEggMoves: string;
          magnificent: string;
          mubstitute: string;
          thatsCrazy: string;
          oranceJuice: string;
          questionableBalancing: string;
          coolShaders: string;
          aiFree: string;
          suddenDifficultySpikes: string;
          basedOnAnUnfinishedFlashGame: string;
          moreAddictiveThanIntended: string;
          mostlyConsistentSeeds: string;
          achievementPointsDontDoAnything: string;
          youDoNotStartAtLevel: string;
          dontTalkAboutTheManaphyEggIncident: string;
          alsoTryPokengine: string;
          alsoTryEmeraldRogue: string;
          alsoTryRadicalRed: string;
          eeveeExpo: string;
          ynoproject: string;
          breedersInSpace: string;
      };
      starterSelectUiHandler: {
          confirmStartTeam: string;
          confirmExit: string;
          invalidParty: string;
          gen1: string;
          gen2: string;
          gen3: string;
          gen4: string;
          gen5: string;
          gen6: string;
          gen7: string;
          gen8: string;
          gen9: string;
          growthRate: string;
          ability: string;
          passive: string;
          nature: string;
          eggMoves: string;
          addToParty: string;
          removeFromParty: string;
          toggleIVs: string;
          manageMoves: string;
          manageNature: string;
          addToFavorites: string;
          removeFromFavorites: string;
          useCandies: string;
          selectNature: string;
          selectMoveSwapOut: string;
          selectMoveSwapWith: string;
          unlockPassive: string;
          reduceCost: string;
          sameSpeciesEgg: string;
          cycleShiny: string;
          cycleForm: string;
          cycleGender: string;
          cycleAbility: string;
          cycleNature: string;
          cycleVariant: string;
          goFilter: string;
          enablePassive: string;
          disablePassive: string;
          locked: string;
          disabled: string;
          uncaught: string;
      };
      statusEffect: {
          none: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          poison: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          toxic: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          paralysis: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          sleep: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          freeze: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          burn: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
      };
      terrain: {
          misty: string;
          mistyStartMessage: string;
          mistyClearMessage: string;
          mistyBlockMessage: string;
          electric: string;
          electricStartMessage: string;
          electricClearMessage: string;
          grassy: string;
          grassyStartMessage: string;
          grassyClearMessage: string;
          psychic: string;
          psychicStartMessage: string;
          psychicClearMessage: string;
          defaultBlockMessage: string;
      };
      titles: {
          elite_four: string;
          elite_four_female: string;
          gym_leader: string;
          gym_leader_female: string;
          gym_leader_double: string;
          champion: string;
          champion_female: string;
          champion_double: string;
          rival: string;
          professor: string;
          frontier_brain: string;
          rocket_boss: string;
          magma_boss: string;
          aqua_boss: string;
          galactic_boss: string;
          plasma_boss: string;
          flare_boss: string;
          aether_boss: string;
          skull_boss: string;
          macro_boss: string;
          rocket_admin: string;
          rocket_admin_female: string;
          magma_admin: string;
          magma_admin_female: string;
          aqua_admin: string;
          aqua_admin_female: string;
          galactic_commander: string;
          galactic_commander_female: string;
          plasma_sage: string;
          plasma_admin: string;
          flare_admin: string;
          flare_admin_female: string;
          aether_admin: string;
          skull_admin: string;
          macro_admin: string;
      };
      trainerClasses: {
          ace_trainer: string;
          ace_trainer_female: string;
          ace_duo: string;
          artist: string;
          artist_female: string;
          backers: string;
          backpacker: string;
          backpacker_female: string;
          backpackers: string;
          baker: string;
          battle_girl: string;
          beauty: string;
          beginners: string;
          biker: string;
          black_belt: string;
          breeder: string;
          breeder_female: string;
          breeders: string;
          clerk: string;
          clerk_female: string;
          colleagues: string;
          crush_kin: string;
          cyclist: string;
          cyclist_female: string;
          cyclists: string;
          dancer: string;
          dancer_female: string;
          depot_agent: string;
          doctor: string;
          doctor_female: string;
          firebreather: string;
          fisherman: string;
          fisherman_female: string;
          gentleman: string;
          guitarist: string;
          guitarist_female: string;
          harlequin: string;
          hiker: string;
          hooligans: string;
          hoopster: string;
          infielder: string;
          janitor: string;
          lady: string;
          lass: string;
          linebacker: string;
          maid: string;
          madame: string;
          medical_team: string;
          musician: string;
          hex_maniac: string;
          nurse: string;
          nursery_aide: string;
          officer: string;
          parasol_lady: string;
          pilot: string;
          pokéfan: string;
          pokéfan_female: string;
          pokéfan_family: string;
          preschooler: string;
          preschooler_female: string;
          preschoolers: string;
          psychic: string;
          psychic_female: string;
          psychics: string;
          pokémon_ranger: string;
          pokémon_ranger_female: string;
          pokémon_rangers: string;
          ranger: string;
          restaurant_staff: string;
          rich: string;
          rich_female: string;
          rich_boy: string;
          rich_couple: string;
          rich_kid: string;
          rich_kid_female: string;
          rich_kids: string;
          roughneck: string;
          sailor: string;
          scientist: string;
          scientist_female: string;
          scientists: string;
          smasher: string;
          snow_worker: string;
          snow_worker_female: string;
          striker: string;
          school_kid: string;
          school_kid_female: string;
          school_kids: string;
          swimmer: string;
          swimmer_female: string;
          swimmers: string;
          twins: string;
          veteran: string;
          veteran_female: string;
          veteran_duo: string;
          waiter: string;
          waitress: string;
          worker: string;
          worker_female: string;
          workers: string;
          youngster: string;
          rocket_grunt: string;
          rocket_grunts: string;
          rocket_grunt_female: string;
          magma_grunt: string;
          magma_grunt_female: string;
          magma_grunts: string;
          aqua_grunt: string;
          aqua_grunt_female: string;
          aqua_grunts: string;
          galactic_grunt: string;
          galactic_grunt_female: string;
          galactic_grunts: string;
          plasma_grunt: string;
          plasma_grunt_female: string;
          plasma_grunts: string;
          flare_grunt: string;
          flare_grunt_female: string;
          flare_grunts: string;
          aether_grunt: string;
          aether_grunt_female: string;
          aether_grunts: string;
          skull_grunt: string;
          skull_grunt_female: string;
          skull_grunts: string;
          macro_grunt: string;
          macro_grunt_female: string;
          macro_grunts: string;
      };
      trainerNames: {
          brock: string;
          misty: string;
          lt_surge: string;
          erika: string;
          janine: string;
          sabrina: string;
          blaine: string;
          giovanni: string;
          falkner: string;
          bugsy: string;
          whitney: string;
          morty: string;
          chuck: string;
          jasmine: string;
          pryce: string;
          clair: string;
          roxanne: string;
          brawly: string;
          wattson: string;
          flannery: string;
          norman: string;
          winona: string;
          tate: string;
          liza: string;
          juan: string;
          roark: string;
          gardenia: string;
          maylene: string;
          crasher_wake: string;
          fantina: string;
          byron: string;
          candice: string;
          volkner: string;
          cilan: string;
          chili: string;
          cress: string;
          cheren: string;
          lenora: string;
          roxie: string;
          burgh: string;
          elesa: string;
          clay: string;
          skyla: string;
          brycen: string;
          drayden: string;
          marlon: string;
          viola: string;
          grant: string;
          korrina: string;
          ramos: string;
          clemont: string;
          valerie: string;
          olympia: string;
          wulfric: string;
          milo: string;
          nessa: string;
          kabu: string;
          bea: string;
          allister: string;
          opal: string;
          bede: string;
          gordie: string;
          melony: string;
          piers: string;
          marnie: string;
          raihan: string;
          katy: string;
          brassius: string;
          iono: string;
          kofu: string;
          larry: string;
          ryme: string;
          tulip: string;
          grusha: string;
          lorelei: string;
          bruno: string;
          agatha: string;
          lance: string;
          will: string;
          koga: string;
          karen: string;
          sidney: string;
          phoebe: string;
          glacia: string;
          drake: string;
          aaron: string;
          bertha: string;
          flint: string;
          lucian: string;
          shauntal: string;
          marshal: string;
          grimsley: string;
          caitlin: string;
          malva: string;
          siebold: string;
          wikstrom: string;
          drasna: string;
          hala: string;
          molayne: string;
          olivia: string;
          acerola: string;
          kahili: string;
          rika: string;
          poppy: string;
          hassel: string;
          crispin: string;
          amarys: string;
          lacey: string;
          drayton: string;
          blue: string;
          red: string;
          steven: string;
          wallace: string;
          cynthia: string;
          alder: string;
          iris: string;
          diantha: string;
          hau: string;
          geeta: string;
          nemona: string;
          kieran: string;
          leon: string;
          rival: string;
          rival_female: string;
          archer: string;
          ariana: string;
          proton: string;
          petrel: string;
          tabitha: string;
          courtney: string;
          shelly: string;
          matt: string;
          mars: string;
          jupiter: string;
          saturn: string;
          zinzolin: string;
          rood: string;
          xerosic: string;
          bryony: string;
          faba: string;
          plumeria: string;
          oleana: string;
          maxie: string;
          archie: string;
          cyrus: string;
          ghetsis: string;
          lysandre: string;
          lusamine: string;
          guzma: string;
          rose: string;
          blue_red_double: string;
          red_blue_double: string;
          tate_liza_double: string;
          liza_tate_double: string;
          steven_wallace_double: string;
          wallace_steven_double: string;
          alder_iris_double: string;
          iris_alder_double: string;
          marnie_piers_double: string;
          piers_marnie_double: string;
      };
      tutorial: {
          intro: string;
          accessMenu: string;
          menu: string;
          starterSelect: string;
          pokerus: string;
          statChange: string;
          selectItem: string;
          eggGacha: string;
      };
      voucher: {
          vouchers: string;
          eggVoucher: string;
          eggVoucherPlus: string;
          eggVoucherPremium: string;
          eggVoucherGold: string;
          locked: string;
          defeatTrainer: string;
      };
      weather: {
          sunnyStartMessage: string;
          sunnyLapseMessage: string;
          sunnyClearMessage: string;
          rainStartMessage: string;
          rainLapseMessage: string;
          rainClearMessage: string;
          sandstormStartMessage: string;
          sandstormLapseMessage: string;
          sandstormClearMessage: string;
          sandstormDamageMessage: string;
          hailStartMessage: string;
          hailLapseMessage: string;
          hailClearMessage: string;
          hailDamageMessage: string;
          snowStartMessage: string;
          snowLapseMessage: string;
          snowClearMessage: string;
          fogStartMessage: string;
          fogLapseMessage: string;
          fogClearMessage: string;
          heavyRainStartMessage: string;
          heavyRainLapseMessage: string;
          heavyRainClearMessage: string;
          harshSunStartMessage: string;
          harshSunLapseMessage: string;
          harshSunClearMessage: string;
          strongWindsStartMessage: string;
          strongWindsLapseMessage: string;
          strongWindsEffectMessage: string;
          strongWindsClearMessage: string;
      };
      partyUiHandler: {
          SEND_OUT: string;
          SUMMARY: string;
          CANCEL: string;
          RELEASE: string;
          APPLY: string;
          TEACH: string;
      };
      modifierSelectUiHandler: {
          transfer: string;
          reroll: string;
          lockRarities: string;
          checkTeam: string;
          transferDesc: string;
          rerollDesc: string;
          lockRaritiesDesc: string;
          checkTeamDesc: string;
          rerollCost: string;
          itemCost: string;
      };
      moveTriggers: {
          hitWithRecoil: string;
          cutHpPowerUpMove: string;
          absorbedElectricity: string;
          switchedStatChanges: string;
          switchedTwoStatChanges: string;
          switchedStat: string;
          sharedGuard: string;
          sharedPower: string;
          goingAllOutForAttack: string;
          regainedHealth: string;
          keptGoingAndCrashed: string;
          fled: string;
          cannotBeSwitchedOut: string;
          swappedAbilitiesWithTarget: string;
          coinsScatteredEverywhere: string;
          attackedByItem: string;
          whippedUpAWhirlwind: string;
          flewUpHigh: string;
          tookInSunlight: string;
          dugAHole: string;
          loweredItsHead: string;
          isGlowing: string;
          bellChimed: string;
          foresawAnAttack: string;
          isTighteningFocus: string;
          hidUnderwater: string;
          soothingAromaWaftedThroughArea: string;
          sprangUp: string;
          choseDoomDesireAsDestiny: string;
          vanishedInstantly: string;
          tookTargetIntoSky: string;
          becameCloakedInFreezingLight: string;
          becameCloakedInFreezingAir: string;
          isChargingPower: string;
          burnedItselfOut: string;
          startedHeatingUpBeak: string;
          setUpShellTrap: string;
          isOverflowingWithSpacePower: string;
          usedUpAllElectricity: string;
          stoleItem: string;
          incineratedItem: string;
          knockedOffItem: string;
          tookMoveAttack: string;
          cutOwnHpAndMaximizedStat: string;
          copiedStatChanges: string;
          magnitudeMessage: string;
          tookAimAtTarget: string;
          transformedIntoType: string;
          copiedMove: string;
          sketchedMove: string;
          acquiredAbility: string;
          copiedTargetAbility: string;
          transformedIntoTarget: string;
          tryingToTakeFoeDown: string;
          addType: string;
          cannotUseMove: string;
          healHp: string;
          sacrificialFullRestore: string;
          invertStats: string;
          resetStats: string;
          statEliminated: string;
          faintCountdown: string;
          copyType: string;
          suppressAbilities: string;
          revivalBlessing: string;
          swapArenaTags: string;
          exposedMove: string;
      };
      runHistory: {
          victory: string;
          defeatedWild: string;
          defeatedTrainer: string;
          defeatedTrainerDouble: string;
          defeatedRival: string;
          defeated: string;
          defeatedWild_female: string;
          defeatedTrainer_female: string;
          defeatedTrainerDouble_female: string;
          defeatedRival_female: string;
          defeated_female: string;
          luck: string;
          score: string;
          mode: string;
          challengeRules: string;
          challengeMonoGen1: string;
          challengeMonoGen2: string;
          challengeMonoGen3: string;
          challengeMonoGen4: string;
          challengeMonoGen5: string;
          challengeMonoGen6: string;
          challengeMonoGen7: string;
          challengeMonoGen8: string;
          challengeMonoGen9: string;
          playerItems: string;
          personalBest: string;
          SPDshortened: string;
          runInfo: string;
          money: string;
          runLength: string;
          viewHeldItems: string;
          hallofFameText: string;
          hallofFameText_female: string;
          viewHallOfFame: string;
          viewEndingSplash: string;
      };
  };
  
}

declare namespace PokeRogue.locales.ko {
  export declare const koConfig: {
      ability: {
          stench: {
              name: string;
              description: string;
          };
          drizzle: {
              name: string;
              description: string;
          };
          speedBoost: {
              name: string;
              description: string;
          };
          battleArmor: {
              name: string;
              description: string;
          };
          sturdy: {
              name: string;
              description: string;
          };
          damp: {
              name: string;
              description: string;
          };
          limber: {
              name: string;
              description: string;
          };
          sandVeil: {
              name: string;
              description: string;
          };
          static: {
              name: string;
              description: string;
          };
          voltAbsorb: {
              name: string;
              description: string;
          };
          waterAbsorb: {
              name: string;
              description: string;
          };
          oblivious: {
              name: string;
              description: string;
          };
          cloudNine: {
              name: string;
              description: string;
          };
          compoundEyes: {
              name: string;
              description: string;
          };
          insomnia: {
              name: string;
              description: string;
          };
          colorChange: {
              name: string;
              description: string;
          };
          immunity: {
              name: string;
              description: string;
          };
          flashFire: {
              name: string;
              description: string;
          };
          shieldDust: {
              name: string;
              description: string;
          };
          ownTempo: {
              name: string;
              description: string;
          };
          suctionCups: {
              name: string;
              description: string;
          };
          intimidate: {
              name: string;
              description: string;
          };
          shadowTag: {
              name: string;
              description: string;
          };
          roughSkin: {
              name: string;
              description: string;
          };
          wonderGuard: {
              name: string;
              description: string;
          };
          levitate: {
              name: string;
              description: string;
          };
          effectSpore: {
              name: string;
              description: string;
          };
          synchronize: {
              name: string;
              description: string;
          };
          clearBody: {
              name: string;
              description: string;
          };
          naturalCure: {
              name: string;
              description: string;
          };
          lightningRod: {
              name: string;
              description: string;
          };
          sereneGrace: {
              name: string;
              description: string;
          };
          swiftSwim: {
              name: string;
              description: string;
          };
          chlorophyll: {
              name: string;
              description: string;
          };
          illuminate: {
              name: string;
              description: string;
          };
          trace: {
              name: string;
              description: string;
          };
          hugePower: {
              name: string;
              description: string;
          };
          poisonPoint: {
              name: string;
              description: string;
          };
          innerFocus: {
              name: string;
              description: string;
          };
          magmaArmor: {
              name: string;
              description: string;
          };
          waterVeil: {
              name: string;
              description: string;
          };
          magnetPull: {
              name: string;
              description: string;
          };
          soundproof: {
              name: string;
              description: string;
          };
          rainDish: {
              name: string;
              description: string;
          };
          sandStream: {
              name: string;
              description: string;
          };
          pressure: {
              name: string;
              description: string;
          };
          thickFat: {
              name: string;
              description: string;
          };
          earlyBird: {
              name: string;
              description: string;
          };
          flameBody: {
              name: string;
              description: string;
          };
          runAway: {
              name: string;
              description: string;
          };
          keenEye: {
              name: string;
              description: string;
          };
          hyperCutter: {
              name: string;
              description: string;
          };
          pickup: {
              name: string;
              description: string;
          };
          truant: {
              name: string;
              description: string;
          };
          hustle: {
              name: string;
              description: string;
          };
          cuteCharm: {
              name: string;
              description: string;
          };
          plus: {
              name: string;
              description: string;
          };
          minus: {
              name: string;
              description: string;
          };
          forecast: {
              name: string;
              description: string;
          };
          stickyHold: {
              name: string;
              description: string;
          };
          shedSkin: {
              name: string;
              description: string;
          };
          guts: {
              name: string;
              description: string;
          };
          marvelScale: {
              name: string;
              description: string;
          };
          liquidOoze: {
              name: string;
              description: string;
          };
          overgrow: {
              name: string;
              description: string;
          };
          blaze: {
              name: string;
              description: string;
          };
          torrent: {
              name: string;
              description: string;
          };
          swarm: {
              name: string;
              description: string;
          };
          rockHead: {
              name: string;
              description: string;
          };
          drought: {
              name: string;
              description: string;
          };
          arenaTrap: {
              name: string;
              description: string;
          };
          vitalSpirit: {
              name: string;
              description: string;
          };
          whiteSmoke: {
              name: string;
              description: string;
          };
          purePower: {
              name: string;
              description: string;
          };
          shellArmor: {
              name: string;
              description: string;
          };
          airLock: {
              name: string;
              description: string;
          };
          tangledFeet: {
              name: string;
              description: string;
          };
          motorDrive: {
              name: string;
              description: string;
          };
          rivalry: {
              name: string;
              description: string;
          };
          steadfast: {
              name: string;
              description: string;
          };
          snowCloak: {
              name: string;
              description: string;
          };
          gluttony: {
              name: string;
              description: string;
          };
          angerPoint: {
              name: string;
              description: string;
          };
          unburden: {
              name: string;
              description: string;
          };
          heatproof: {
              name: string;
              description: string;
          };
          simple: {
              name: string;
              description: string;
          };
          drySkin: {
              name: string;
              description: string;
          };
          download: {
              name: string;
              description: string;
          };
          ironFist: {
              name: string;
              description: string;
          };
          poisonHeal: {
              name: string;
              description: string;
          };
          adaptability: {
              name: string;
              description: string;
          };
          skillLink: {
              name: string;
              description: string;
          };
          hydration: {
              name: string;
              description: string;
          };
          solarPower: {
              name: string;
              description: string;
          };
          quickFeet: {
              name: string;
              description: string;
          };
          normalize: {
              name: string;
              description: string;
          };
          sniper: {
              name: string;
              description: string;
          };
          magicGuard: {
              name: string;
              description: string;
          };
          noGuard: {
              name: string;
              description: string;
          };
          stall: {
              name: string;
              description: string;
          };
          technician: {
              name: string;
              description: string;
          };
          leafGuard: {
              name: string;
              description: string;
          };
          klutz: {
              name: string;
              description: string;
          };
          moldBreaker: {
              name: string;
              description: string;
          };
          superLuck: {
              name: string;
              description: string;
          };
          aftermath: {
              name: string;
              description: string;
          };
          anticipation: {
              name: string;
              description: string;
          };
          forewarn: {
              name: string;
              description: string;
          };
          unaware: {
              name: string;
              description: string;
          };
          tintedLens: {
              name: string;
              description: string;
          };
          filter: {
              name: string;
              description: string;
          };
          slowStart: {
              name: string;
              description: string;
          };
          scrappy: {
              name: string;
              description: string;
          };
          stormDrain: {
              name: string;
              description: string;
          };
          iceBody: {
              name: string;
              description: string;
          };
          solidRock: {
              name: string;
              description: string;
          };
          snowWarning: {
              name: string;
              description: string;
          };
          honeyGather: {
              name: string;
              description: string;
          };
          frisk: {
              name: string;
              description: string;
          };
          reckless: {
              name: string;
              description: string;
          };
          multitype: {
              name: string;
              description: string;
          };
          flowerGift: {
              name: string;
              description: string;
          };
          badDreams: {
              name: string;
              description: string;
          };
          pickpocket: {
              name: string;
              description: string;
          };
          sheerForce: {
              name: string;
              description: string;
          };
          contrary: {
              name: string;
              description: string;
          };
          unnerve: {
              name: string;
              description: string;
          };
          defiant: {
              name: string;
              description: string;
          };
          defeatist: {
              name: string;
              description: string;
          };
          cursedBody: {
              name: string;
              description: string;
          };
          healer: {
              name: string;
              description: string;
          };
          friendGuard: {
              name: string;
              description: string;
          };
          weakArmor: {
              name: string;
              description: string;
          };
          heavyMetal: {
              name: string;
              description: string;
          };
          lightMetal: {
              name: string;
              description: string;
          };
          multiscale: {
              name: string;
              description: string;
          };
          toxicBoost: {
              name: string;
              description: string;
          };
          flareBoost: {
              name: string;
              description: string;
          };
          harvest: {
              name: string;
              description: string;
          };
          telepathy: {
              name: string;
              description: string;
          };
          moody: {
              name: string;
              description: string;
          };
          overcoat: {
              name: string;
              description: string;
          };
          poisonTouch: {
              name: string;
              description: string;
          };
          regenerator: {
              name: string;
              description: string;
          };
          bigPecks: {
              name: string;
              description: string;
          };
          sandRush: {
              name: string;
              description: string;
          };
          wonderSkin: {
              name: string;
              description: string;
          };
          analytic: {
              name: string;
              description: string;
          };
          illusion: {
              name: string;
              description: string;
          };
          imposter: {
              name: string;
              description: string;
          };
          infiltrator: {
              name: string;
              description: string;
          };
          mummy: {
              name: string;
              description: string;
          };
          moxie: {
              name: string;
              description: string;
          };
          justified: {
              name: string;
              description: string;
          };
          rattled: {
              name: string;
              description: string;
          };
          magicBounce: {
              name: string;
              description: string;
          };
          sapSipper: {
              name: string;
              description: string;
          };
          prankster: {
              name: string;
              description: string;
          };
          sandForce: {
              name: string;
              description: string;
          };
          ironBarbs: {
              name: string;
              description: string;
          };
          zenMode: {
              name: string;
              description: string;
          };
          victoryStar: {
              name: string;
              description: string;
          };
          turboblaze: {
              name: string;
              description: string;
          };
          teravolt: {
              name: string;
              description: string;
          };
          aromaVeil: {
              name: string;
              description: string;
          };
          flowerVeil: {
              name: string;
              description: string;
          };
          cheekPouch: {
              name: string;
              description: string;
          };
          protean: {
              name: string;
              description: string;
          };
          furCoat: {
              name: string;
              description: string;
          };
          magician: {
              name: string;
              description: string;
          };
          bulletproof: {
              name: string;
              description: string;
          };
          competitive: {
              name: string;
              description: string;
          };
          strongJaw: {
              name: string;
              description: string;
          };
          refrigerate: {
              name: string;
              description: string;
          };
          sweetVeil: {
              name: string;
              description: string;
          };
          stanceChange: {
              name: string;
              description: string;
          };
          galeWings: {
              name: string;
              description: string;
          };
          megaLauncher: {
              name: string;
              description: string;
          };
          grassPelt: {
              name: string;
              description: string;
          };
          symbiosis: {
              name: string;
              description: string;
          };
          toughClaws: {
              name: string;
              description: string;
          };
          pixilate: {
              name: string;
              description: string;
          };
          gooey: {
              name: string;
              description: string;
          };
          aerilate: {
              name: string;
              description: string;
          };
          parentalBond: {
              name: string;
              description: string;
          };
          darkAura: {
              name: string;
              description: string;
          };
          fairyAura: {
              name: string;
              description: string;
          };
          auraBreak: {
              name: string;
              description: string;
          };
          primordialSea: {
              name: string;
              description: string;
          };
          desolateLand: {
              name: string;
              description: string;
          };
          deltaStream: {
              name: string;
              description: string;
          };
          stamina: {
              name: string;
              description: string;
          };
          wimpOut: {
              name: string;
              description: string;
          };
          emergencyExit: {
              name: string;
              description: string;
          };
          waterCompaction: {
              name: string;
              description: string;
          };
          merciless: {
              name: string;
              description: string;
          };
          shieldsDown: {
              name: string;
              description: string;
          };
          stakeout: {
              name: string;
              description: string;
          };
          waterBubble: {
              name: string;
              description: string;
          };
          steelworker: {
              name: string;
              description: string;
          };
          berserk: {
              name: string;
              description: string;
          };
          slushRush: {
              name: string;
              description: string;
          };
          longReach: {
              name: string;
              description: string;
          };
          liquidVoice: {
              name: string;
              description: string;
          };
          triage: {
              name: string;
              description: string;
          };
          galvanize: {
              name: string;
              description: string;
          };
          surgeSurfer: {
              name: string;
              description: string;
          };
          schooling: {
              name: string;
              description: string;
          };
          disguise: {
              name: string;
              description: string;
          };
          battleBond: {
              name: string;
              description: string;
          };
          powerConstruct: {
              name: string;
              description: string;
          };
          corrosion: {
              name: string;
              description: string;
          };
          comatose: {
              name: string;
              description: string;
          };
          queenlyMajesty: {
              name: string;
              description: string;
          };
          innardsOut: {
              name: string;
              description: string;
          };
          dancer: {
              name: string;
              description: string;
          };
          battery: {
              name: string;
              description: string;
          };
          fluffy: {
              name: string;
              description: string;
          };
          dazzling: {
              name: string;
              description: string;
          };
          soulHeart: {
              name: string;
              description: string;
          };
          tanglingHair: {
              name: string;
              description: string;
          };
          receiver: {
              name: string;
              description: string;
          };
          powerOfAlchemy: {
              name: string;
              description: string;
          };
          beastBoost: {
              name: string;
              description: string;
          };
          rksSystem: {
              name: string;
              description: string;
          };
          electricSurge: {
              name: string;
              description: string;
          };
          psychicSurge: {
              name: string;
              description: string;
          };
          mistySurge: {
              name: string;
              description: string;
          };
          grassySurge: {
              name: string;
              description: string;
          };
          fullMetalBody: {
              name: string;
              description: string;
          };
          shadowShield: {
              name: string;
              description: string;
          };
          prismArmor: {
              name: string;
              description: string;
          };
          neuroforce: {
              name: string;
              description: string;
          };
          intrepidSword: {
              name: string;
              description: string;
          };
          dauntlessShield: {
              name: string;
              description: string;
          };
          libero: {
              name: string;
              description: string;
          };
          ballFetch: {
              name: string;
              description: string;
          };
          cottonDown: {
              name: string;
              description: string;
          };
          propellerTail: {
              name: string;
              description: string;
          };
          mirrorArmor: {
              name: string;
              description: string;
          };
          gulpMissile: {
              name: string;
              description: string;
          };
          stalwart: {
              name: string;
              description: string;
          };
          steamEngine: {
              name: string;
              description: string;
          };
          punkRock: {
              name: string;
              description: string;
          };
          sandSpit: {
              name: string;
              description: string;
          };
          iceScales: {
              name: string;
              description: string;
          };
          ripen: {
              name: string;
              description: string;
          };
          iceFace: {
              name: string;
              description: string;
          };
          powerSpot: {
              name: string;
              description: string;
          };
          mimicry: {
              name: string;
              description: string;
          };
          screenCleaner: {
              name: string;
              description: string;
          };
          steelySpirit: {
              name: string;
              description: string;
          };
          perishBody: {
              name: string;
              description: string;
          };
          wanderingSpirit: {
              name: string;
              description: string;
          };
          gorillaTactics: {
              name: string;
              description: string;
          };
          neutralizingGas: {
              name: string;
              description: string;
          };
          pastelVeil: {
              name: string;
              description: string;
          };
          hungerSwitch: {
              name: string;
              description: string;
          };
          quickDraw: {
              name: string;
              description: string;
          };
          unseenFist: {
              name: string;
              description: string;
          };
          curiousMedicine: {
              name: string;
              description: string;
          };
          transistor: {
              name: string;
              description: string;
          };
          dragonsMaw: {
              name: string;
              description: string;
          };
          chillingNeigh: {
              name: string;
              description: string;
          };
          grimNeigh: {
              name: string;
              description: string;
          };
          asOneGlastrier: {
              name: string;
              description: string;
          };
          asOneSpectrier: {
              name: string;
              description: string;
          };
          lingeringAroma: {
              name: string;
              description: string;
          };
          seedSower: {
              name: string;
              description: string;
          };
          thermalExchange: {
              name: string;
              description: string;
          };
          angerShell: {
              name: string;
              description: string;
          };
          purifyingSalt: {
              name: string;
              description: string;
          };
          wellBakedBody: {
              name: string;
              description: string;
          };
          windRider: {
              name: string;
              description: string;
          };
          guardDog: {
              name: string;
              description: string;
          };
          rockyPayload: {
              name: string;
              description: string;
          };
          windPower: {
              name: string;
              description: string;
          };
          zeroToHero: {
              name: string;
              description: string;
          };
          commander: {
              name: string;
              description: string;
          };
          electromorphosis: {
              name: string;
              description: string;
          };
          protosynthesis: {
              name: string;
              description: string;
          };
          quarkDrive: {
              name: string;
              description: string;
          };
          goodAsGold: {
              name: string;
              description: string;
          };
          vesselOfRuin: {
              name: string;
              description: string;
          };
          swordOfRuin: {
              name: string;
              description: string;
          };
          tabletsOfRuin: {
              name: string;
              description: string;
          };
          beadsOfRuin: {
              name: string;
              description: string;
          };
          orichalcumPulse: {
              name: string;
              description: string;
          };
          hadronEngine: {
              name: string;
              description: string;
          };
          opportunist: {
              name: string;
              description: string;
          };
          cudChew: {
              name: string;
              description: string;
          };
          sharpness: {
              name: string;
              description: string;
          };
          supremeOverlord: {
              name: string;
              description: string;
          };
          costar: {
              name: string;
              description: string;
          };
          toxicDebris: {
              name: string;
              description: string;
          };
          armorTail: {
              name: string;
              description: string;
          };
          earthEater: {
              name: string;
              description: string;
          };
          myceliumMight: {
              name: string;
              description: string;
          };
          mindsEye: {
              name: string;
              description: string;
          };
          supersweetSyrup: {
              name: string;
              description: string;
          };
          hospitality: {
              name: string;
              description: string;
          };
          toxicChain: {
              name: string;
              description: string;
          };
          embodyAspectTeal: {
              name: string;
              description: string;
          };
          embodyAspectWellspring: {
              name: string;
              description: string;
          };
          embodyAspectHearthflame: {
              name: string;
              description: string;
          };
          embodyAspectCornerstone: {
              name: string;
              description: string;
          };
          teraShift: {
              name: string;
              description: string;
          };
          teraShell: {
              name: string;
              description: string;
          };
          teraformZero: {
              name: string;
              description: string;
          };
          poisonPuppeteer: {
              name: string;
              description: string;
          };
      };
      abilityTriggers: {
          blockRecoilDamage: string;
          badDreams: string;
          costar: string;
          iceFaceAvoidedDamage: string;
          perishBody: string;
          poisonHeal: string;
          trace: string;
          windPowerCharged: string;
          quickDraw: string;
          disguiseAvoidedDamage: string;
          blockItemTheft: string;
          typeImmunityHeal: string;
          nonSuperEffectiveImmunity: string;
          moveImmunity: string;
          reverseDrain: string;
          postDefendTypeChange: string;
          postDefendContactDamage: string;
          postDefendAbilitySwap: string;
          postDefendAbilityGive: string;
          postDefendMoveDisable: string;
          pokemonTypeChange: string;
          postAttackStealHeldItem: string;
          postDefendStealHeldItem: string;
          copyFaintedAllyAbility: string;
          intimidateImmunity: string;
          postSummonAllyHeal: string;
          postSummonClearAllyStats: string;
          postSummonTransform: string;
          protectStat: string;
          statusEffectImmunityWithName: string;
          statusEffectImmunity: string;
          battlerTagImmunity: string;
          forewarn: string;
          frisk: string;
          postWeatherLapseHeal: string;
          postWeatherLapseDamage: string;
          postTurnLootCreateEatenBerry: string;
          postTurnHeal: string;
          fetchBall: string;
          healFromBerryUse: string;
          arenaTrap: string;
          postBattleLoot: string;
          postFaintContactDamage: string;
          postFaintHpDamage: string;
          postSummonPressure: string;
          weatherEffectDisappeared: string;
          postSummonMoldBreaker: string;
          postSummonAnticipation: string;
          postSummonTurboblaze: string;
          postSummonTeravolt: string;
          postSummonDarkAura: string;
          postSummonFairyAura: string;
          postSummonNeutralizingGas: string;
          postSummonAsOneGlastrier: string;
          postSummonAsOneSpectrier: string;
          postSummonVesselOfRuin: string;
          postSummonSwordOfRuin: string;
          postSummonTabletsOfRuin: string;
          postSummonBeadsOfRuin: string;
          preventBerryUse: string;
      };
      arenaFlyout: {
          activeBattleEffects: string;
          player: string;
          neutral: string;
          enemy: string;
          sunny: string;
          rain: string;
          sandstorm: string;
          hail: string;
          snow: string;
          fog: string;
          heavyRain: string;
          harshSun: string;
          strongWinds: string;
          misty: string;
          electric: string;
          grassy: string;
          psychic: string;
          mudSport: string;
          waterSport: string;
          spikes: string;
          toxicSpikes: string;
          mist: string;
          futureSight: string;
          doomDesire: string;
          wish: string;
          stealthRock: string;
          stickyWeb: string;
          trickRoom: string;
          gravity: string;
          reflect: string;
          lightScreen: string;
          auroraVeil: string;
          quickGuard: string;
          wideGuard: string;
          matBlock: string;
          craftyShield: string;
          tailwind: string;
          happyHour: string;
          safeguard: string;
      };
      arenaTag: {
          yourTeam: string;
          opposingTeam: string;
          arenaOnRemove: string;
          arenaOnRemovePlayer: string;
          arenaOnRemoveEnemy: string;
          mistOnAdd: string;
          mistApply: string;
          reflectOnAdd: string;
          reflectOnAddPlayer: string;
          reflectOnAddEnemy: string;
          lightScreenOnAdd: string;
          lightScreenOnAddPlayer: string;
          lightScreenOnAddEnemy: string;
          auroraVeilOnAdd: string;
          auroraVeilOnAddPlayer: string;
          auroraVeilOnAddEnemy: string;
          conditionalProtectOnAdd: string;
          conditionalProtectOnAddPlayer: string;
          conditionalProtectOnAddEnemy: string;
          conditionalProtectApply: string;
          matBlockOnAdd: string;
          noCritOnAddPlayer: string;
          noCritOnAddEnemy: string;
          noCritOnRemove: string;
          wishTagOnAdd: string;
          mudSportOnAdd: string;
          mudSportOnRemove: string;
          waterSportOnAdd: string;
          waterSportOnRemove: string;
          spikesOnAdd: string;
          spikesActivateTrap: string;
          toxicSpikesOnAdd: string;
          toxicSpikesActivateTrapPoison: string;
          stealthRockOnAdd: string;
          stealthRockActivateTrap: string;
          stickyWebOnAdd: string;
          stickyWebActivateTrap: string;
          trickRoomOnAdd: string;
          trickRoomOnRemove: string;
          gravityOnAdd: string;
          gravityOnRemove: string;
          tailwindOnAdd: string;
          tailwindOnAddPlayer: string;
          tailwindOnAddEnemy: string;
          tailwindOnRemove: string;
          tailwindOnRemovePlayer: string;
          tailwindOnRemoveEnemy: string;
          happyHourOnAdd: string;
          happyHourOnRemove: string;
          safeguardOnAdd: string;
          safeguardOnAddPlayer: string;
          safeguardOnAddEnemy: string;
          safeguardOnRemove: string;
          safeguardOnRemovePlayer: string;
          safeguardOnRemoveEnemy: string;
      };
      battle: {
          bossAppeared: string;
          trainerAppeared: string;
          trainerAppearedDouble: string;
          trainerSendOut: string;
          singleWildAppeared: string;
          multiWildAppeared: string;
          playerComeBack: string;
          trainerComeBack: string;
          playerGo: string;
          trainerGo: string;
          switchQuestion: string;
          trainerDefeated: string;
          moneyWon: string;
          moneyPickedUp: string;
          pokemonCaught: string;
          addedAsAStarter: string;
          partyFull: string;
          pokemon: string;
          sendOutPokemon: string;
          hitResultCriticalHit: string;
          hitResultSuperEffective: string;
          hitResultNotVeryEffective: string;
          hitResultNoEffect: string;
          hitResultImmune: string;
          hitResultOneHitKO: string;
          attackFailed: string;
          attackMissed: string;
          attackHitsCount: string;
          rewardGain: string;
          expGain: string;
          levelUp: string;
          learnMove: string;
          learnMovePrompt: string;
          learnMoveLimitReached: string;
          learnMoveReplaceQuestion: string;
          learnMoveStopTeaching: string;
          learnMoveNotLearned: string;
          learnMoveForgetQuestion: string;
          learnMoveForgetSuccess: string;
          countdownPoof: string;
          learnMoveAnd: string;
          levelCapUp: string;
          moveNotImplemented: string;
          moveNoPP: string;
          moveDisabled: string;
          noPokeballForce: string;
          noPokeballTrainer: string;
          noPokeballMulti: string;
          noPokeballStrong: string;
          noEscapeForce: string;
          noEscapeTrainer: string;
          noEscapePokemon: string;
          runAwaySuccess: string;
          runAwayCannotEscape: string;
          escapeVerbSwitch: string;
          escapeVerbFlee: string;
          notDisabled: string;
          turnEndHpRestore: string;
          hpIsFull: string;
          skipItemQuestion: string;
          itemStackFull: string;
          eggHatching: string;
          ivScannerUseQuestion: string;
          wildPokemonWithAffix: string;
          foePokemonWithAffix: string;
          useMove: string;
          drainMessage: string;
          stealEatBerry: string;
          ppHealBerry: string;
          hpHealBerry: string;
          regainHealth: string;
          fainted: string;
          statsAnd: string;
          stats: string;
          statRose_one: string;
          statRose_other: string;
          statSharplyRose_one: string;
          statSharplyRose_other: string;
          statRoseDrastically_one: string;
          statRoseDrastically_other: string;
          statWontGoAnyHigher_one: string;
          statWontGoAnyHigher_other: string;
          statFell_one: string;
          statFell_other: string;
          statHarshlyFell_one: string;
          statHarshlyFell_other: string;
          statSeverelyFell_one: string;
          statSeverelyFell_other: string;
          statWontGoAnyLower_one: string;
          statWontGoAnyLower_other: string;
          transformedIntoType: string;
          retryBattle: string;
          unlockedSomething: string;
          congratulations: string;
          beatModeFirstTime: string;
          ppReduced: string;
      };
      battleScene: {
          moneyOwned: string;
      };
      battleInfo: {
          generation: string;
      };
      battleMessageUiHandler: {
          ivBest: string;
          ivFantastic: string;
          ivVeryGood: string;
          ivPrettyGood: string;
          ivDecent: string;
          ivNoGood: string;
      };
      battlePokemonForm: {
          mega: string;
          "mega-x": string;
          "mega-y": string;
          primal: string;
          gigantamax: string;
          eternamax: string;
          megaChange: string;
          gigantamaxChange: string;
          eternamaxChange: string;
          revertChange: string;
          formChange: string;
          disguiseChange: string;
      };
      battlerTags: {
          trappedDesc: string;
          flinchedDesc: string;
          confusedDesc: string;
          infatuatedDesc: string;
          seedDesc: string;
          nightmareDesc: string;
          ingrainDesc: string;
          drowsyDesc: string;
          rechargingLapse: string;
          trappedOnAdd: string;
          trappedOnRemove: string;
          flinchedLapse: string;
          confusedOnAdd: string;
          confusedOnRemove: string;
          confusedOnOverlap: string;
          confusedLapse: string;
          confusedLapseHurtItself: string;
          destinyBondLapseIsBoss: string;
          destinyBondLapse: string;
          infatuatedOnAdd: string;
          infatuatedOnOverlap: string;
          infatuatedLapse: string;
          infatuatedLapseImmobilize: string;
          infatuatedOnRemove: string;
          seededOnAdd: string;
          seededLapse: string;
          seededLapseShed: string;
          nightmareOnAdd: string;
          nightmareOnOverlap: string;
          nightmareLapse: string;
          encoreOnAdd: string;
          encoreOnRemove: string;
          helpingHandOnAdd: string;
          ingrainLapse: string;
          ingrainOnTrap: string;
          aquaRingOnAdd: string;
          aquaRingLapse: string;
          drowsyOnAdd: string;
          damagingTrapLapse: string;
          bindOnTrap: string;
          wrapOnTrap: string;
          vortexOnTrap: string;
          clampOnTrap: string;
          sandTombOnTrap: string;
          magmaStormOnTrap: string;
          snapTrapOnTrap: string;
          thunderCageOnTrap: string;
          infestationOnTrap: string;
          protectedOnAdd: string;
          protectedLapse: string;
          enduringOnAdd: string;
          enduringLapse: string;
          sturdyLapse: string;
          perishSongLapse: string;
          centerOfAttentionOnAdd: string;
          truantLapse: string;
          slowStartOnAdd: string;
          slowStartOnRemove: string;
          highestStatBoostOnAdd: string;
          highestStatBoostOnRemove: string;
          magnetRisenOnAdd: string;
          magnetRisenOnRemove: string;
          critBoostOnAdd: string;
          critBoostOnRemove: string;
          saltCuredOnAdd: string;
          saltCuredLapse: string;
          cursedOnAdd: string;
          cursedLapse: string;
          stockpilingOnAdd: string;
      };
      berry: {
          SITRUS: {
              name: string;
              effect: string;
          };
          LUM: {
              name: string;
              effect: string;
          };
          ENIGMA: {
              name: string;
              effect: string;
          };
          LIECHI: {
              name: string;
              effect: string;
          };
          GANLON: {
              name: string;
              effect: string;
          };
          PETAYA: {
              name: string;
              effect: string;
          };
          APICOT: {
              name: string;
              effect: string;
          };
          SALAC: {
              name: string;
              effect: string;
          };
          LANSAT: {
              name: string;
              effect: string;
          };
          STARF: {
              name: string;
              effect: string;
          };
          LEPPA: {
              name: string;
              effect: string;
          };
      };
      bgmName: {
          music: string;
          missing_entries: string;
          battle_kanto_champion: string;
          battle_johto_champion: string;
          battle_hoenn_champion_g5: string;
          battle_hoenn_champion_g6: string;
          battle_sinnoh_champion: string;
          battle_champion_alder: string;
          battle_champion_iris: string;
          battle_kalos_champion: string;
          battle_alola_champion: string;
          battle_galar_champion: string;
          battle_champion_geeta: string;
          battle_champion_nemona: string;
          battle_champion_kieran: string;
          battle_hoenn_elite: string;
          battle_unova_elite: string;
          battle_kalos_elite: string;
          battle_alola_elite: string;
          battle_galar_elite: string;
          battle_paldea_elite: string;
          battle_bb_elite: string;
          battle_final_encounter: string;
          battle_final: string;
          battle_kanto_gym: string;
          battle_johto_gym: string;
          battle_hoenn_gym: string;
          battle_sinnoh_gym: string;
          battle_unova_gym: string;
          battle_kalos_gym: string;
          battle_galar_gym: string;
          battle_paldea_gym: string;
          battle_legendary_kanto: string;
          battle_legendary_raikou: string;
          battle_legendary_entei: string;
          battle_legendary_suicune: string;
          battle_legendary_lugia: string;
          battle_legendary_ho_oh: string;
          battle_legendary_regis_g5: string;
          battle_legendary_regis_g6: string;
          battle_legendary_gro_kyo: string;
          battle_legendary_rayquaza: string;
          battle_legendary_deoxys: string;
          battle_legendary_lake_trio: string;
          battle_legendary_sinnoh: string;
          battle_legendary_dia_pal: string;
          battle_legendary_origin_forme: string;
          battle_legendary_giratina: string;
          battle_legendary_arceus: string;
          battle_legendary_unova: string;
          battle_legendary_kyurem: string;
          battle_legendary_res_zek: string;
          battle_legendary_xern_yvel: string;
          battle_legendary_tapu: string;
          battle_legendary_sol_lun: string;
          battle_legendary_ub: string;
          battle_legendary_dusk_dawn: string;
          battle_legendary_ultra_nec: string;
          battle_legendary_zac_zam: string;
          battle_legendary_glas_spec: string;
          battle_legendary_calyrex: string;
          battle_legendary_riders: string;
          battle_legendary_birds_galar: string;
          battle_legendary_ruinous: string;
          battle_legendary_kor_mir: string;
          battle_legendary_loyal_three: string;
          battle_legendary_ogerpon: string;
          battle_legendary_terapagos: string;
          battle_legendary_pecharunt: string;
          battle_rival: string;
          battle_rival_2: string;
          battle_rival_3: string;
          battle_trainer: string;
          battle_wild: string;
          battle_wild_strong: string;
          end_summit: string;
          battle_rocket_grunt: string;
          battle_aqua_magma_grunt: string;
          battle_galactic_grunt: string;
          battle_plasma_grunt: string;
          battle_flare_grunt: string;
          battle_aether_grunt: string;
          battle_skull_grunt: string;
          battle_macro_grunt: string;
          battle_galactic_admin: string;
          battle_skull_admin: string;
          battle_oleana: string;
          battle_rocket_boss: string;
          battle_aqua_magma_boss: string;
          battle_galactic_boss: string;
          battle_plasma_boss: string;
          battle_flare_boss: string;
          battle_aether_boss: string;
          battle_skull_boss: string;
          battle_macro_boss: string;
          abyss: string;
          badlands: string;
          beach: string;
          cave: string;
          construction_site: string;
          desert: string;
          dojo: string;
          end: string;
          factory: string;
          fairy_cave: string;
          forest: string;
          grass: string;
          graveyard: string;
          ice_cave: string;
          island: string;
          jungle: string;
          laboratory: string;
          lake: string;
          meadow: string;
          metropolis: string;
          mountain: string;
          plains: string;
          power_plant: string;
          ruins: string;
          sea: string;
          seabed: string;
          slum: string;
          snowy_forest: string;
          space: string;
          swamp: string;
          tall_grass: string;
          temple: string;
          town: string;
          volcano: string;
          wasteland: string;
          encounter_ace_trainer: string;
          encounter_backpacker: string;
          encounter_clerk: string;
          encounter_cyclist: string;
          encounter_lass: string;
          encounter_parasol_lady: string;
          encounter_pokefan: string;
          encounter_psychic: string;
          encounter_rich: string;
          encounter_rival: string;
          encounter_roughneck: string;
          encounter_scientist: string;
          encounter_twins: string;
          encounter_youngster: string;
          heal: string;
          menu: string;
          title: string;
      };
      biome: {
          unknownLocation: string;
          TOWN: string;
          PLAINS: string;
          GRASS: string;
          TALL_GRASS: string;
          METROPOLIS: string;
          FOREST: string;
          SEA: string;
          SWAMP: string;
          BEACH: string;
          LAKE: string;
          SEABED: string;
          MOUNTAIN: string;
          BADLANDS: string;
          CAVE: string;
          DESERT: string;
          ICE_CAVE: string;
          MEADOW: string;
          POWER_PLANT: string;
          VOLCANO: string;
          GRAVEYARD: string;
          DOJO: string;
          FACTORY: string;
          RUINS: string;
          WASTELAND: string;
          ABYSS: string;
          SPACE: string;
          CONSTRUCTION_SITE: string;
          JUNGLE: string;
          FAIRY_CAVE: string;
          TEMPLE: string;
          SLUM: string;
          SNOWY_FOREST: string;
          ISLAND: string;
          LABORATORY: string;
          END: string;
      };
      challenges: {
          title: string;
          illegalEvolution: string;
          singleGeneration: {
              name: string;
              desc: string;
              desc_default: string;
              gen_1: string;
              gen_2: string;
              gen_3: string;
              gen_4: string;
              gen_5: string;
              gen_6: string;
              gen_7: string;
              gen_8: string;
              gen_9: string;
          };
          singleType: {
              name: string;
              desc: string;
              desc_default: string;
          };
          freshStart: {
              name: string;
              desc: string;
              "value.0": string;
              "value.1": string;
          };
          inverseBattle: {
              name: string;
              shortName: string;
              desc: string;
              "value.0": string;
              "value.1": string;
          };
      };
      commandUiHandler: {
          fight: string;
          ball: string;
          pokemon: string;
          run: string;
          actionMessage: string;
      };
      common: {
          start: string;
          luckIndicator: string;
          shinyOnHover: string;
          commonShiny: string;
          rareShiny: string;
          epicShiny: string;
      };
      achv: {
          Achievements: {
              name: string;
          };
          Locked: {
              name: string;
          };
          MoneyAchv: {
              description: string;
          };
          "10K_MONEY": {
              name: string;
          };
          "100K_MONEY": {
              name: string;
          };
          "1M_MONEY": {
              name: string;
          };
          "10M_MONEY": {
              name: string;
          };
          DamageAchv: {
              description: string;
          };
          "250_DMG": {
              name: string;
          };
          "1000_DMG": {
              name: string;
          };
          "2500_DMG": {
              name: string;
          };
          "10000_DMG": {
              name: string;
          };
          HealAchv: {
              description: string;
          };
          "250_HEAL": {
              name: string;
          };
          "1000_HEAL": {
              name: string;
          };
          "2500_HEAL": {
              name: string;
          };
          "10000_HEAL": {
              name: string;
          };
          LevelAchv: {
              description: string;
          };
          LV_100: {
              name: string;
          };
          LV_250: {
              name: string;
          };
          LV_1000: {
              name: string;
          };
          RibbonAchv: {
              description: string;
          };
          "10_RIBBONS": {
              name: string;
          };
          "25_RIBBONS": {
              name: string;
          };
          "50_RIBBONS": {
              name: string;
          };
          "75_RIBBONS": {
              name: string;
          };
          "100_RIBBONS": {
              name: string;
          };
          TRANSFER_MAX_STAT_STAGE: {
              name: string;
              description: string;
          };
          MAX_FRIENDSHIP: {
              name: string;
              description: string;
          };
          MEGA_EVOLVE: {
              name: string;
              description: string;
          };
          GIGANTAMAX: {
              name: string;
              description: string;
          };
          TERASTALLIZE: {
              name: string;
              description: string;
          };
          STELLAR_TERASTALLIZE: {
              name: string;
              description: string;
          };
          SPLICE: {
              name: string;
              description: string;
          };
          MINI_BLACK_HOLE: {
              name: string;
              description: string;
          };
          CATCH_MYTHICAL: {
              name: string;
              description: string;
          };
          CATCH_SUB_LEGENDARY: {
              name: string;
              description: string;
          };
          CATCH_LEGENDARY: {
              name: string;
              description: string;
          };
          SEE_SHINY: {
              name: string;
              description: string;
          };
          SHINY_PARTY: {
              name: string;
              description: string;
          };
          HATCH_MYTHICAL: {
              name: string;
              description: string;
          };
          HATCH_SUB_LEGENDARY: {
              name: string;
              description: string;
          };
          HATCH_LEGENDARY: {
              name: string;
              description: string;
          };
          HATCH_SHINY: {
              name: string;
              description: string;
          };
          HIDDEN_ABILITY: {
              name: string;
              description: string;
          };
          PERFECT_IVS: {
              name: string;
              description: string;
          };
          CLASSIC_VICTORY: {
              name: string;
              description: string;
          };
          UNEVOLVED_CLASSIC_VICTORY: {
              name: string;
              description: string;
          };
          MONO_GEN_ONE: {
              name: string;
              description: string;
          };
          MONO_GEN_TWO: {
              name: string;
              description: string;
          };
          MONO_GEN_THREE: {
              name: string;
              description: string;
          };
          MONO_GEN_FOUR: {
              name: string;
              description: string;
          };
          MONO_GEN_FIVE: {
              name: string;
              description: string;
          };
          MONO_GEN_SIX: {
              name: string;
              description: string;
          };
          MONO_GEN_SEVEN: {
              name: string;
              description: string;
          };
          MONO_GEN_EIGHT: {
              name: string;
              description: string;
          };
          MONO_GEN_NINE: {
              name: string;
              description: string;
          };
          MonoType: {
              description: string;
          };
          MONO_NORMAL: {
              name: string;
          };
          MONO_FIGHTING: {
              name: string;
          };
          MONO_FLYING: {
              name: string;
          };
          MONO_POISON: {
              name: string;
          };
          MONO_GROUND: {
              name: string;
          };
          MONO_ROCK: {
              name: string;
          };
          MONO_BUG: {
              name: string;
          };
          MONO_GHOST: {
              name: string;
          };
          MONO_STEEL: {
              name: string;
          };
          MONO_FIRE: {
              name: string;
          };
          MONO_WATER: {
              name: string;
          };
          MONO_GRASS: {
              name: string;
          };
          MONO_ELECTRIC: {
              name: string;
          };
          MONO_PSYCHIC: {
              name: string;
          };
          MONO_ICE: {
              name: string;
          };
          MONO_DRAGON: {
              name: string;
          };
          MONO_DARK: {
              name: string;
          };
          MONO_FAIRY: {
              name: string;
          };
          FRESH_START: {
              name: string;
              description: string;
          };
          INVERSE_BATTLE: {
              name: string;
              description: string;
          };
      };
      dialogue: {
          youngster: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
                  "10": string;
                  "11": string;
                  "12": string;
                  "13": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
                  "10": string;
                  "11": string;
                  "12": string;
                  "13": string;
              };
          };
          lass: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
              };
          };
          breeder: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          breeder_female: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          fisherman: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          fisherman_female: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          swimmer: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          backpacker: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          ace_trainer: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          parasol_lady: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          twins: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          cyclist: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          black_belt: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          battle_girl: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          hiker: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          ranger: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          scientist: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          school_kid: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          artist: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          guitarist: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          worker: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          worker_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          worker_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          hex_maniac: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          psychic: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          officer: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          beauty: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          baker: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          biker: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          firebreather: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          sailor: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          archer: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          ariana: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          proton: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          petrel: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          tabitha: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          courtney: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          shelly: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          matt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          mars: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          jupiter: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          saturn: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          zinzolin: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          rood: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          xerosic: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          bryony: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          rocket_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          magma_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          aqua_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          galactic_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          plasma_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          flare_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          aether_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          faba: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          skull_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          plumeria: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          macro_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          oleana: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          rocket_boss_giovanni_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rocket_boss_giovanni_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          magma_boss_maxie_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          magma_boss_maxie_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aqua_boss_archie_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aqua_boss_archie_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          galactic_boss_cyrus_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          galactic_boss_cyrus_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          plasma_boss_ghetsis_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          plasma_boss_ghetsis_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          flare_boss_lysandre_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          flare_boss_lysandre_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aether_boss_lusamine_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aether_boss_lusamine_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          skull_boss_guzma_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          skull_boss_guzma_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          macro_boss_rose_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          macro_boss_rose_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          brock: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          misty: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          lt_surge: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          erika: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          janine: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          sabrina: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          blaine: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          giovanni: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          roxanne: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          brawly: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          wattson: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          flannery: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          norman: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          winona: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          tate: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          liza: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          juan: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          crasher_wake: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          falkner: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          nessa: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          melony: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          marlon: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          shauntal: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          marshal: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          cheren: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          chili: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          cilan: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          roark: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          morty: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
              };
          };
          crispin: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          amarys: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lacey: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drayton: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          ramos: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          viola: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          candice: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          gardenia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aaron: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          cress: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          allister: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          clay: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kofu: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          tulip: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          sidney: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          phoebe: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          glacia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drake: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          wallace: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lorelei: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          will: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          malva: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          hala: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          molayne: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rika: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bruno: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bugsy: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          koga: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bertha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lenora: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          siebold: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          roxie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          olivia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          poppy: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          agatha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          flint: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          grimsley: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          caitlin: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          diantha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          wikstrom: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          acerola: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          larry_elite: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lance: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          karen: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          milo: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lucian: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drasna: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kahili: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          hassel: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          blue: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          piers: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          red: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          jasmine: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lance_champion: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          steven: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          cynthia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          iris: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          hau: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          geeta: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          nemona: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          leon: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          whitney: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          chuck: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          katy: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          pryce: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          clair: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          maylene: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          fantina: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          byron: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          olympia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          volkner: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          burgh: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          elesa: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          skyla: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          brycen: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drayden: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          grant: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          korrina: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          clemont: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          valerie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          wulfric: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kabu: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bea: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          opal: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bede: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          gordie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          marnie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          raihan: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          brassius: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          iono: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          larry: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          ryme: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          grusha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          marnie_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          nessa_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          bea_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          allister_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          raihan_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          alder: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kieran: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_2_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_3: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_3_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_4: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_4_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_5: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_5_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_6: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_6_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
      };
      battleSpecDialogue: {
          encounter: string;
          firstStageWin: string;
          secondStageWin: string;
      };
      miscDialogue: {
          ending: string;
          ending_female: string;
          ending_endless: string;
          ending_name: string;
      };
      doubleBattleDialogue: {
          blue_red_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          red_blue_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          tate_liza_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          liza_tate_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          wallace_steven_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          steven_wallace_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          alder_iris_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          iris_alder_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          piers_marnie_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          marnie_piers_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
      };
      egg: {
          egg: string;
          greatTier: string;
          ultraTier: string;
          masterTier: string;
          defaultTier: string;
          hatchWavesMessageSoon: string;
          hatchWavesMessageClose: string;
          hatchWavesMessageNotClose: string;
          hatchWavesMessageLongTime: string;
          gachaTypeLegendary: string;
          gachaTypeMove: string;
          gachaTypeShiny: string;
          selectMachine: string;
          notEnoughVouchers: string;
          tooManyEggs: string;
          pull: string;
          pulls: string;
          sameSpeciesEgg: string;
          hatchFromTheEgg: string;
          eggMoveUnlock: string;
          rareEggMoveUnlock: string;
          moveUPGacha: string;
          shinyUPGacha: string;
          legendaryUPGacha: string;
      };
      fightUiHandler: {
          pp: string;
          power: string;
          accuracy: string;
          abilityFlyInText: string;
          passive: string;
      };
      filterBar: {
          genFilter: string;
          typeFilter: string;
          caughtFilter: string;
          unlocksFilter: string;
          miscFilter: string;
          sortFilter: string;
          all: string;
          normal: string;
          uncaught: string;
          passive: string;
          passiveUnlocked: string;
          passiveLocked: string;
          passiveUnlockable: string;
          costReduction: string;
          costReductionUnlocked: string;
          costReductionLocked: string;
          costReductionUnlockable: string;
          favorite: string;
          isFavorite: string;
          notFavorite: string;
          ribbon: string;
          hasWon: string;
          hasNotWon: string;
          hiddenAbility: string;
          hasHiddenAbility: string;
          noHiddenAbility: string;
          egg: string;
          eggPurchasable: string;
          pokerus: string;
          hasPokerus: string;
          noPokerus: string;
          sortByNumber: string;
          sortByCost: string;
          sortByCandies: string;
          sortByIVs: string;
          sortByName: string;
      };
      gameMode: {
          classic: string;
          endless: string;
          endlessSpliced: string;
          dailyRun: string;
          unknown: string;
          challenge: string;
      };
      gameStatsUiHandler: {
          stats: string;
          playTime: string;
          totalBattles: string;
          starters: string;
          shinyStarters: string;
          speciesSeen: string;
          speciesCaught: string;
          ribbonsOwned: string;
          classicRuns: string;
          classicWins: string;
          dailyRunAttempts: string;
          dailyRunWins: string;
          endlessRuns: string;
          highestWaveEndless: string;
          highestMoney: string;
          highestDamage: string;
          highestHPHealed: string;
          pokemonEncountered: string;
          pokemonDefeated: string;
          pokemonCaught: string;
          eggsHatched: string;
          subLegendsSeen: string;
          subLegendsCaught: string;
          subLegendsHatched: string;
          legendsSeen: string;
          legendsCaught: string;
          legendsHatched: string;
          mythicalsSeen: string;
          mythicalsCaught: string;
          mythicalsHatched: string;
          shiniesSeen: string;
          shiniesCaught: string;
          shiniesHatched: string;
          pokemonFused: string;
          trainersDefeated: string;
          eggsPulled: string;
          rareEggsPulled: string;
          epicEggsPulled: string;
          legendaryEggsPulled: string;
          manaphyEggsPulled: string;
      };
      growth: {
          Erratic: string;
          Fast: string;
          Medium_Fast: string;
          Medium_Slow: string;
          Slow: string;
          Fluctuating: string;
      };
      menu: {
          cancel: string;
          continue: string;
          dailyRun: string;
          loadGame: string;
          newGame: string;
          settings: string;
          selectGameMode: string;
          logInOrCreateAccount: string;
          username: string;
          password: string;
          login: string;
          orUse: string;
          register: string;
          emptyUsername: string;
          invalidLoginUsername: string;
          invalidRegisterUsername: string;
          invalidLoginPassword: string;
          invalidRegisterPassword: string;
          usernameAlreadyUsed: string;
          accountNonExistent: string;
          unmatchingPassword: string;
          passwordNotMatchingConfirmPassword: string;
          confirmPassword: string;
          registrationAgeWarning: string;
          backToLogin: string;
          failedToLoadSaveData: string;
          sessionSuccess: string;
          failedToLoadSession: string;
          boyOrGirl: string;
          evolving: string;
          stoppedEvolving: string;
          pauseEvolutionsQuestion: string;
          evolutionsPaused: string;
          evolutionDone: string;
          dailyRankings: string;
          weeklyRankings: string;
          noRankings: string;
          positionIcon: string;
          usernameScoreboard: string;
          score: string;
          wave: string;
          loading: string;
          loadingAsset: string;
          playersOnline: string;
          yes: string;
          no: string;
          disclaimer: string;
          disclaimerDescription: string;
          choosePokemon: string;
          renamePokemon: string;
          rename: string;
          nickname: string;
          errorServerDown: string;
      };
      menuUiHandler: {
          GAME_SETTINGS: string;
          ACHIEVEMENTS: string;
          STATS: string;
          RUN_HISTORY: string;
          EGG_LIST: string;
          EGG_GACHA: string;
          MANAGE_DATA: string;
          COMMUNITY: string;
          SAVE_AND_QUIT: string;
          LOG_OUT: string;
          slot: string;
          importSession: string;
          importSlotSelect: string;
          exportSession: string;
          exportSlotSelect: string;
          importRunHistory: string;
          exportRunHistory: string;
          importData: string;
          exportData: string;
          consentPreferences: string;
          linkDiscord: string;
          unlinkDiscord: string;
          linkGoogle: string;
          unlinkGoogle: string;
          cancel: string;
          losingProgressionWarning: string;
          noEggs: string;
      };
      modifier: {
          surviveDamageApply: string;
          turnHealApply: string;
          hitHealApply: string;
          pokemonInstantReviveApply: string;
          pokemonResetNegativeStatStageApply: string;
          moneyInterestApply: string;
          turnHeldItemTransferApply: string;
          contactHeldItemTransferApply: string;
          enemyTurnHealApply: string;
          bypassSpeedChanceApply: string;
      };
      modifierType: {
          ModifierType: {
              AddPokeballModifierType: {
                  name: string;
                  description: string;
              };
              AddVoucherModifierType: {
                  name: string;
                  description: string;
              };
              PokemonHeldItemModifierType: {
                  extra: {
                      inoperable: string;
                      tooMany: string;
                  };
              };
              PokemonHpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                      fullyWithStatus: string;
                  };
              };
              PokemonReviveModifierType: {
                  description: string;
              };
              PokemonStatusHealModifierType: {
                  description: string;
              };
              PokemonPpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                  };
              };
              PokemonAllMovePpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                  };
              };
              PokemonPpUpModifierType: {
                  description: string;
              };
              PokemonNatureChangeModifierType: {
                  name: string;
                  description: string;
              };
              DoubleBattleChanceBoosterModifierType: {
                  description: string;
              };
              TempStatStageBoosterModifierType: {
                  description: string;
              };
              AttackTypeBoosterModifierType: {
                  description: string;
              };
              PokemonLevelIncrementModifierType: {
                  description: string;
              };
              AllPokemonLevelIncrementModifierType: {
                  description: string;
              };
              BaseStatBoosterModifierType: {
                  description: string;
              };
              AllPokemonFullHpRestoreModifierType: {
                  description: string;
              };
              AllPokemonFullReviveModifierType: {
                  description: string;
              };
              MoneyRewardModifierType: {
                  description: string;
                  extra: {
                      small: string;
                      moderate: string;
                      large: string;
                  };
              };
              ExpBoosterModifierType: {
                  description: string;
              };
              PokemonExpBoosterModifierType: {
                  description: string;
              };
              PokemonFriendshipBoosterModifierType: {
                  description: string;
              };
              PokemonMoveAccuracyBoosterModifierType: {
                  description: string;
              };
              PokemonMultiHitModifierType: {
                  description: string;
              };
              TmModifierType: {
                  name: string;
                  description: string;
              };
              TmModifierTypeWithInfo: {
                  name: string;
                  description: string;
              };
              EvolutionItemModifierType: {
                  description: string;
              };
              FormChangeItemModifierType: {
                  description: string;
              };
              FusePokemonModifierType: {
                  description: string;
              };
              TerastallizeModifierType: {
                  name: string;
                  description: string;
              };
              ContactHeldItemTransferChanceModifierType: {
                  description: string;
              };
              TurnHeldItemTransferModifierType: {
                  description: string;
              };
              EnemyAttackStatusEffectChanceModifierType: {
                  description: string;
              };
              EnemyEndureChanceModifierType: {
                  description: string;
              };
              RARE_CANDY: {
                  name: string;
              };
              RARER_CANDY: {
                  name: string;
              };
              MEGA_BRACELET: {
                  name: string;
                  description: string;
              };
              DYNAMAX_BAND: {
                  name: string;
                  description: string;
              };
              TERA_ORB: {
                  name: string;
                  description: string;
              };
              MAP: {
                  name: string;
                  description: string;
              };
              POTION: {
                  name: string;
              };
              SUPER_POTION: {
                  name: string;
              };
              HYPER_POTION: {
                  name: string;
              };
              MAX_POTION: {
                  name: string;
              };
              FULL_RESTORE: {
                  name: string;
              };
              REVIVE: {
                  name: string;
              };
              MAX_REVIVE: {
                  name: string;
              };
              FULL_HEAL: {
                  name: string;
              };
              SACRED_ASH: {
                  name: string;
              };
              REVIVER_SEED: {
                  name: string;
                  description: string;
              };
              WHITE_HERB: {
                  name: string;
                  description: string;
              };
              ETHER: {
                  name: string;
              };
              MAX_ETHER: {
                  name: string;
              };
              ELIXIR: {
                  name: string;
              };
              MAX_ELIXIR: {
                  name: string;
              };
              PP_UP: {
                  name: string;
              };
              PP_MAX: {
                  name: string;
              };
              LURE: {
                  name: string;
              };
              SUPER_LURE: {
                  name: string;
              };
              MAX_LURE: {
                  name: string;
              };
              MEMORY_MUSHROOM: {
                  name: string;
                  description: string;
              };
              EXP_SHARE: {
                  name: string;
                  description: string;
              };
              EXP_BALANCE: {
                  name: string;
                  description: string;
              };
              OVAL_CHARM: {
                  name: string;
                  description: string;
              };
              EXP_CHARM: {
                  name: string;
              };
              SUPER_EXP_CHARM: {
                  name: string;
              };
              GOLDEN_EXP_CHARM: {
                  name: string;
              };
              LUCKY_EGG: {
                  name: string;
              };
              GOLDEN_EGG: {
                  name: string;
              };
              SOOTHE_BELL: {
                  name: string;
              };
              SCOPE_LENS: {
                  name: string;
                  description: string;
              };
              DIRE_HIT: {
                  name: string;
                  extra: {
                      raises: string;
                  };
              };
              LEEK: {
                  name: string;
                  description: string;
              };
              EVIOLITE: {
                  name: string;
                  description: string;
              };
              SOUL_DEW: {
                  name: string;
                  description: string;
              };
              NUGGET: {
                  name: string;
              };
              BIG_NUGGET: {
                  name: string;
              };
              RELIC_GOLD: {
                  name: string;
              };
              AMULET_COIN: {
                  name: string;
                  description: string;
              };
              GOLDEN_PUNCH: {
                  name: string;
                  description: string;
              };
              COIN_CASE: {
                  name: string;
                  description: string;
              };
              LOCK_CAPSULE: {
                  name: string;
                  description: string;
              };
              GRIP_CLAW: {
                  name: string;
              };
              WIDE_LENS: {
                  name: string;
              };
              MULTI_LENS: {
                  name: string;
              };
              HEALING_CHARM: {
                  name: string;
                  description: string;
              };
              CANDY_JAR: {
                  name: string;
                  description: string;
              };
              BERRY_POUCH: {
                  name: string;
                  description: string;
              };
              FOCUS_BAND: {
                  name: string;
                  description: string;
              };
              QUICK_CLAW: {
                  name: string;
                  description: string;
              };
              KINGS_ROCK: {
                  name: string;
                  description: string;
              };
              LEFTOVERS: {
                  name: string;
                  description: string;
              };
              SHELL_BELL: {
                  name: string;
                  description: string;
              };
              TOXIC_ORB: {
                  name: string;
                  description: string;
              };
              FLAME_ORB: {
                  name: string;
                  description: string;
              };
              BATON: {
                  name: string;
                  description: string;
              };
              SHINY_CHARM: {
                  name: string;
                  description: string;
              };
              ABILITY_CHARM: {
                  name: string;
                  description: string;
              };
              IV_SCANNER: {
                  name: string;
                  description: string;
              };
              DNA_SPLICERS: {
                  name: string;
              };
              MINI_BLACK_HOLE: {
                  name: string;
              };
              GOLDEN_POKEBALL: {
                  name: string;
                  description: string;
              };
              ENEMY_DAMAGE_BOOSTER: {
                  name: string;
                  description: string;
              };
              ENEMY_DAMAGE_REDUCTION: {
                  name: string;
                  description: string;
              };
              ENEMY_HEAL: {
                  name: string;
                  description: string;
              };
              ENEMY_ATTACK_POISON_CHANCE: {
                  name: string;
              };
              ENEMY_ATTACK_PARALYZE_CHANCE: {
                  name: string;
              };
              ENEMY_ATTACK_BURN_CHANCE: {
                  name: string;
              };
              ENEMY_STATUS_EFFECT_HEAL_CHANCE: {
                  name: string;
                  description: string;
              };
              ENEMY_ENDURE_CHANCE: {
                  name: string;
              };
              ENEMY_FUSED_CHANCE: {
                  name: string;
                  description: string;
              };
          };
          SpeciesBoosterItem: {
              LIGHT_BALL: {
                  name: string;
                  description: string;
              };
              THICK_CLUB: {
                  name: string;
                  description: string;
              };
              METAL_POWDER: {
                  name: string;
                  description: string;
              };
              QUICK_POWDER: {
                  name: string;
                  description: string;
              };
          };
          TempStatStageBoosterItem: {
              x_attack: string;
              x_defense: string;
              x_sp_atk: string;
              x_sp_def: string;
              x_speed: string;
              x_accuracy: string;
          };
          AttackTypeBoosterItem: {
              silk_scarf: string;
              black_belt: string;
              sharp_beak: string;
              poison_barb: string;
              soft_sand: string;
              hard_stone: string;
              silver_powder: string;
              spell_tag: string;
              metal_coat: string;
              charcoal: string;
              mystic_water: string;
              miracle_seed: string;
              magnet: string;
              twisted_spoon: string;
              never_melt_ice: string;
              dragon_fang: string;
              black_glasses: string;
              fairy_feather: string;
          };
          BaseStatBoosterItem: {
              hp_up: string;
              protein: string;
              iron: string;
              calcium: string;
              zinc: string;
              carbos: string;
          };
          EvolutionItem: {
              NONE: string;
              LINKING_CORD: string;
              SUN_STONE: string;
              MOON_STONE: string;
              LEAF_STONE: string;
              FIRE_STONE: string;
              WATER_STONE: string;
              THUNDER_STONE: string;
              ICE_STONE: string;
              DUSK_STONE: string;
              DAWN_STONE: string;
              SHINY_STONE: string;
              CRACKED_POT: string;
              SWEET_APPLE: string;
              TART_APPLE: string;
              STRAWBERRY_SWEET: string;
              UNREMARKABLE_TEACUP: string;
              CHIPPED_POT: string;
              BLACK_AUGURITE: string;
              GALARICA_CUFF: string;
              GALARICA_WREATH: string;
              PEAT_BLOCK: string;
              AUSPICIOUS_ARMOR: string;
              MALICIOUS_ARMOR: string;
              MASTERPIECE_TEACUP: string;
              METAL_ALLOY: string;
              SCROLL_OF_DARKNESS: string;
              SCROLL_OF_WATERS: string;
              SYRUPY_APPLE: string;
          };
          FormChangeItem: {
              NONE: string;
              ABOMASITE: string;
              ABSOLITE: string;
              AERODACTYLITE: string;
              AGGRONITE: string;
              ALAKAZITE: string;
              ALTARIANITE: string;
              AMPHAROSITE: string;
              AUDINITE: string;
              BANETTITE: string;
              BEEDRILLITE: string;
              BLASTOISINITE: string;
              BLAZIKENITE: string;
              CAMERUPTITE: string;
              CHARIZARDITE_X: string;
              CHARIZARDITE_Y: string;
              DIANCITE: string;
              GALLADITE: string;
              GARCHOMPITE: string;
              GARDEVOIRITE: string;
              GENGARITE: string;
              GLALITITE: string;
              GYARADOSITE: string;
              HERACRONITE: string;
              HOUNDOOMINITE: string;
              KANGASKHANITE: string;
              LATIASITE: string;
              LATIOSITE: string;
              LOPUNNITE: string;
              LUCARIONITE: string;
              MANECTITE: string;
              MAWILITE: string;
              MEDICHAMITE: string;
              METAGROSSITE: string;
              MEWTWONITE_X: string;
              MEWTWONITE_Y: string;
              PIDGEOTITE: string;
              PINSIRITE: string;
              RAYQUAZITE: string;
              SABLENITE: string;
              SALAMENCITE: string;
              SCEPTILITE: string;
              SCIZORITE: string;
              SHARPEDONITE: string;
              SLOWBRONITE: string;
              STEELIXITE: string;
              SWAMPERTITE: string;
              TYRANITARITE: string;
              VENUSAURITE: string;
              BLUE_ORB: string;
              RED_ORB: string;
              SHARP_METEORITE: string;
              HARD_METEORITE: string;
              SMOOTH_METEORITE: string;
              ADAMANT_CRYSTAL: string;
              LUSTROUS_GLOBE: string;
              GRISEOUS_CORE: string;
              REVEAL_GLASS: string;
              GRACIDEA: string;
              MAX_MUSHROOMS: string;
              DARK_STONE: string;
              LIGHT_STONE: string;
              PRISON_BOTTLE: string;
              N_LUNARIZER: string;
              N_SOLARIZER: string;
              RUSTED_SWORD: string;
              RUSTED_SHIELD: string;
              ICY_REINS_OF_UNITY: string;
              SHADOW_REINS_OF_UNITY: string;
              WELLSPRING_MASK: string;
              HEARTHFLAME_MASK: string;
              CORNERSTONE_MASK: string;
              SHOCK_DRIVE: string;
              BURN_DRIVE: string;
              CHILL_DRIVE: string;
              DOUSE_DRIVE: string;
              ULTRANECROZIUM_Z: string;
              FIST_PLATE: string;
              SKY_PLATE: string;
              TOXIC_PLATE: string;
              EARTH_PLATE: string;
              STONE_PLATE: string;
              INSECT_PLATE: string;
              SPOOKY_PLATE: string;
              IRON_PLATE: string;
              FLAME_PLATE: string;
              SPLASH_PLATE: string;
              MEADOW_PLATE: string;
              ZAP_PLATE: string;
              MIND_PLATE: string;
              ICICLE_PLATE: string;
              DRACO_PLATE: string;
              DREAD_PLATE: string;
              PIXIE_PLATE: string;
              BLANK_PLATE: string;
              LEGEND_PLATE: string;
              FIGHTING_MEMORY: string;
              FLYING_MEMORY: string;
              POISON_MEMORY: string;
              GROUND_MEMORY: string;
              ROCK_MEMORY: string;
              BUG_MEMORY: string;
              GHOST_MEMORY: string;
              STEEL_MEMORY: string;
              FIRE_MEMORY: string;
              WATER_MEMORY: string;
              GRASS_MEMORY: string;
              ELECTRIC_MEMORY: string;
              PSYCHIC_MEMORY: string;
              ICE_MEMORY: string;
              DRAGON_MEMORY: string;
              DARK_MEMORY: string;
              FAIRY_MEMORY: string;
              NORMAL_MEMORY: string;
          };
      };
      move: {
          pound: {
              name: string;
              effect: string;
          };
          karateChop: {
              name: string;
              effect: string;
          };
          doubleSlap: {
              name: string;
              effect: string;
          };
          cometPunch: {
              name: string;
              effect: string;
          };
          megaPunch: {
              name: string;
              effect: string;
          };
          payDay: {
              name: string;
              effect: string;
          };
          firePunch: {
              name: string;
              effect: string;
          };
          icePunch: {
              name: string;
              effect: string;
          };
          thunderPunch: {
              name: string;
              effect: string;
          };
          scratch: {
              name: string;
              effect: string;
          };
          viseGrip: {
              name: string;
              effect: string;
          };
          guillotine: {
              name: string;
              effect: string;
          };
          razorWind: {
              name: string;
              effect: string;
          };
          swordsDance: {
              name: string;
              effect: string;
          };
          cut: {
              name: string;
              effect: string;
          };
          gust: {
              name: string;
              effect: string;
          };
          wingAttack: {
              name: string;
              effect: string;
          };
          whirlwind: {
              name: string;
              effect: string;
          };
          fly: {
              name: string;
              effect: string;
          };
          bind: {
              name: string;
              effect: string;
          };
          slam: {
              name: string;
              effect: string;
          };
          vineWhip: {
              name: string;
              effect: string;
          };
          stomp: {
              name: string;
              effect: string;
          };
          doubleKick: {
              name: string;
              effect: string;
          };
          megaKick: {
              name: string;
              effect: string;
          };
          jumpKick: {
              name: string;
              effect: string;
          };
          rollingKick: {
              name: string;
              effect: string;
          };
          sandAttack: {
              name: string;
              effect: string;
          };
          headbutt: {
              name: string;
              effect: string;
          };
          hornAttack: {
              name: string;
              effect: string;
          };
          furyAttack: {
              name: string;
              effect: string;
          };
          hornDrill: {
              name: string;
              effect: string;
          };
          tackle: {
              name: string;
              effect: string;
          };
          bodySlam: {
              name: string;
              effect: string;
          };
          wrap: {
              name: string;
              effect: string;
          };
          takeDown: {
              name: string;
              effect: string;
          };
          thrash: {
              name: string;
              effect: string;
          };
          doubleEdge: {
              name: string;
              effect: string;
          };
          tailWhip: {
              name: string;
              effect: string;
          };
          poisonSting: {
              name: string;
              effect: string;
          };
          twineedle: {
              name: string;
              effect: string;
          };
          pinMissile: {
              name: string;
              effect: string;
          };
          leer: {
              name: string;
              effect: string;
          };
          bite: {
              name: string;
              effect: string;
          };
          growl: {
              name: string;
              effect: string;
          };
          roar: {
              name: string;
              effect: string;
          };
          sing: {
              name: string;
              effect: string;
          };
          supersonic: {
              name: string;
              effect: string;
          };
          sonicBoom: {
              name: string;
              effect: string;
          };
          disable: {
              name: string;
              effect: string;
          };
          acid: {
              name: string;
              effect: string;
          };
          ember: {
              name: string;
              effect: string;
          };
          flamethrower: {
              name: string;
              effect: string;
          };
          mist: {
              name: string;
              effect: string;
          };
          waterGun: {
              name: string;
              effect: string;
          };
          hydroPump: {
              name: string;
              effect: string;
          };
          surf: {
              name: string;
              effect: string;
          };
          iceBeam: {
              name: string;
              effect: string;
          };
          blizzard: {
              name: string;
              effect: string;
          };
          psybeam: {
              name: string;
              effect: string;
          };
          bubbleBeam: {
              name: string;
              effect: string;
          };
          auroraBeam: {
              name: string;
              effect: string;
          };
          hyperBeam: {
              name: string;
              effect: string;
          };
          peck: {
              name: string;
              effect: string;
          };
          drillPeck: {
              name: string;
              effect: string;
          };
          submission: {
              name: string;
              effect: string;
          };
          lowKick: {
              name: string;
              effect: string;
          };
          counter: {
              name: string;
              effect: string;
          };
          seismicToss: {
              name: string;
              effect: string;
          };
          strength: {
              name: string;
              effect: string;
          };
          absorb: {
              name: string;
              effect: string;
          };
          megaDrain: {
              name: string;
              effect: string;
          };
          leechSeed: {
              name: string;
              effect: string;
          };
          growth: {
              name: string;
              effect: string;
          };
          razorLeaf: {
              name: string;
              effect: string;
          };
          solarBeam: {
              name: string;
              effect: string;
          };
          poisonPowder: {
              name: string;
              effect: string;
          };
          stunSpore: {
              name: string;
              effect: string;
          };
          sleepPowder: {
              name: string;
              effect: string;
          };
          petalDance: {
              name: string;
              effect: string;
          };
          stringShot: {
              name: string;
              effect: string;
          };
          dragonRage: {
              name: string;
              effect: string;
          };
          fireSpin: {
              name: string;
              effect: string;
          };
          thunderShock: {
              name: string;
              effect: string;
          };
          thunderbolt: {
              name: string;
              effect: string;
          };
          thunderWave: {
              name: string;
              effect: string;
          };
          thunder: {
              name: string;
              effect: string;
          };
          rockThrow: {
              name: string;
              effect: string;
          };
          earthquake: {
              name: string;
              effect: string;
          };
          fissure: {
              name: string;
              effect: string;
          };
          dig: {
              name: string;
              effect: string;
          };
          toxic: {
              name: string;
              effect: string;
          };
          confusion: {
              name: string;
              effect: string;
          };
          psychic: {
              name: string;
              effect: string;
          };
          hypnosis: {
              name: string;
              effect: string;
          };
          meditate: {
              name: string;
              effect: string;
          };
          agility: {
              name: string;
              effect: string;
          };
          quickAttack: {
              name: string;
              effect: string;
          };
          rage: {
              name: string;
              effect: string;
          };
          teleport: {
              name: string;
              effect: string;
          };
          nightShade: {
              name: string;
              effect: string;
          };
          mimic: {
              name: string;
              effect: string;
          };
          screech: {
              name: string;
              effect: string;
          };
          doubleTeam: {
              name: string;
              effect: string;
          };
          recover: {
              name: string;
              effect: string;
          };
          harden: {
              name: string;
              effect: string;
          };
          minimize: {
              name: string;
              effect: string;
          };
          smokescreen: {
              name: string;
              effect: string;
          };
          confuseRay: {
              name: string;
              effect: string;
          };
          withdraw: {
              name: string;
              effect: string;
          };
          defenseCurl: {
              name: string;
              effect: string;
          };
          barrier: {
              name: string;
              effect: string;
          };
          lightScreen: {
              name: string;
              effect: string;
          };
          haze: {
              name: string;
              effect: string;
          };
          reflect: {
              name: string;
              effect: string;
          };
          focusEnergy: {
              name: string;
              effect: string;
          };
          bide: {
              name: string;
              effect: string;
          };
          metronome: {
              name: string;
              effect: string;
          };
          mirrorMove: {
              name: string;
              effect: string;
          };
          selfDestruct: {
              name: string;
              effect: string;
          };
          eggBomb: {
              name: string;
              effect: string;
          };
          lick: {
              name: string;
              effect: string;
          };
          smog: {
              name: string;
              effect: string;
          };
          sludge: {
              name: string;
              effect: string;
          };
          boneClub: {
              name: string;
              effect: string;
          };
          fireBlast: {
              name: string;
              effect: string;
          };
          waterfall: {
              name: string;
              effect: string;
          };
          clamp: {
              name: string;
              effect: string;
          };
          swift: {
              name: string;
              effect: string;
          };
          skullBash: {
              name: string;
              effect: string;
          };
          spikeCannon: {
              name: string;
              effect: string;
          };
          constrict: {
              name: string;
              effect: string;
          };
          amnesia: {
              name: string;
              effect: string;
          };
          kinesis: {
              name: string;
              effect: string;
          };
          softBoiled: {
              name: string;
              effect: string;
          };
          highJumpKick: {
              name: string;
              effect: string;
          };
          glare: {
              name: string;
              effect: string;
          };
          dreamEater: {
              name: string;
              effect: string;
          };
          poisonGas: {
              name: string;
              effect: string;
          };
          barrage: {
              name: string;
              effect: string;
          };
          leechLife: {
              name: string;
              effect: string;
          };
          lovelyKiss: {
              name: string;
              effect: string;
          };
          skyAttack: {
              name: string;
              effect: string;
          };
          transform: {
              name: string;
              effect: string;
          };
          bubble: {
              name: string;
              effect: string;
          };
          dizzyPunch: {
              name: string;
              effect: string;
          };
          spore: {
              name: string;
              effect: string;
          };
          flash: {
              name: string;
              effect: string;
          };
          psywave: {
              name: string;
              effect: string;
          };
          splash: {
              name: string;
              effect: string;
          };
          acidArmor: {
              name: string;
              effect: string;
          };
          crabhammer: {
              name: string;
              effect: string;
          };
          explosion: {
              name: string;
              effect: string;
          };
          furySwipes: {
              name: string;
              effect: string;
          };
          bonemerang: {
              name: string;
              effect: string;
          };
          rest: {
              name: string;
              effect: string;
          };
          rockSlide: {
              name: string;
              effect: string;
          };
          hyperFang: {
              name: string;
              effect: string;
          };
          sharpen: {
              name: string;
              effect: string;
          };
          conversion: {
              name: string;
              effect: string;
          };
          triAttack: {
              name: string;
              effect: string;
          };
          superFang: {
              name: string;
              effect: string;
          };
          slash: {
              name: string;
              effect: string;
          };
          substitute: {
              name: string;
              effect: string;
          };
          struggle: {
              name: string;
              effect: string;
          };
          sketch: {
              name: string;
              effect: string;
          };
          tripleKick: {
              name: string;
              effect: string;
          };
          thief: {
              name: string;
              effect: string;
          };
          spiderWeb: {
              name: string;
              effect: string;
          };
          mindReader: {
              name: string;
              effect: string;
          };
          nightmare: {
              name: string;
              effect: string;
          };
          flameWheel: {
              name: string;
              effect: string;
          };
          snore: {
              name: string;
              effect: string;
          };
          curse: {
              name: string;
              effect: string;
          };
          flail: {
              name: string;
              effect: string;
          };
          conversion2: {
              name: string;
              effect: string;
          };
          aeroblast: {
              name: string;
              effect: string;
          };
          cottonSpore: {
              name: string;
              effect: string;
          };
          reversal: {
              name: string;
              effect: string;
          };
          spite: {
              name: string;
              effect: string;
          };
          powderSnow: {
              name: string;
              effect: string;
          };
          protect: {
              name: string;
              effect: string;
          };
          machPunch: {
              name: string;
              effect: string;
          };
          scaryFace: {
              name: string;
              effect: string;
          };
          feintAttack: {
              name: string;
              effect: string;
          };
          sweetKiss: {
              name: string;
              effect: string;
          };
          bellyDrum: {
              name: string;
              effect: string;
          };
          sludgeBomb: {
              name: string;
              effect: string;
          };
          mudSlap: {
              name: string;
              effect: string;
          };
          octazooka: {
              name: string;
              effect: string;
          };
          spikes: {
              name: string;
              effect: string;
          };
          zapCannon: {
              name: string;
              effect: string;
          };
          foresight: {
              name: string;
              effect: string;
          };
          destinyBond: {
              name: string;
              effect: string;
          };
          perishSong: {
              name: string;
              effect: string;
          };
          icyWind: {
              name: string;
              effect: string;
          };
          detect: {
              name: string;
              effect: string;
          };
          boneRush: {
              name: string;
              effect: string;
          };
          lockOn: {
              name: string;
              effect: string;
          };
          outrage: {
              name: string;
              effect: string;
          };
          sandstorm: {
              name: string;
              effect: string;
          };
          gigaDrain: {
              name: string;
              effect: string;
          };
          endure: {
              name: string;
              effect: string;
          };
          charm: {
              name: string;
              effect: string;
          };
          rollout: {
              name: string;
              effect: string;
          };
          falseSwipe: {
              name: string;
              effect: string;
          };
          swagger: {
              name: string;
              effect: string;
          };
          milkDrink: {
              name: string;
              effect: string;
          };
          spark: {
              name: string;
              effect: string;
          };
          furyCutter: {
              name: string;
              effect: string;
          };
          steelWing: {
              name: string;
              effect: string;
          };
          meanLook: {
              name: string;
              effect: string;
          };
          attract: {
              name: string;
              effect: string;
          };
          sleepTalk: {
              name: string;
              effect: string;
          };
          healBell: {
              name: string;
              effect: string;
          };
          return: {
              name: string;
              effect: string;
          };
          present: {
              name: string;
              effect: string;
          };
          frustration: {
              name: string;
              effect: string;
          };
          safeguard: {
              name: string;
              effect: string;
          };
          painSplit: {
              name: string;
              effect: string;
          };
          sacredFire: {
              name: string;
              effect: string;
          };
          magnitude: {
              name: string;
              effect: string;
          };
          dynamicPunch: {
              name: string;
              effect: string;
          };
          megahorn: {
              name: string;
              effect: string;
          };
          dragonBreath: {
              name: string;
              effect: string;
          };
          batonPass: {
              name: string;
              effect: string;
          };
          encore: {
              name: string;
              effect: string;
          };
          pursuit: {
              name: string;
              effect: string;
          };
          rapidSpin: {
              name: string;
              effect: string;
          };
          sweetScent: {
              name: string;
              effect: string;
          };
          ironTail: {
              name: string;
              effect: string;
          };
          metalClaw: {
              name: string;
              effect: string;
          };
          vitalThrow: {
              name: string;
              effect: string;
          };
          morningSun: {
              name: string;
              effect: string;
          };
          synthesis: {
              name: string;
              effect: string;
          };
          moonlight: {
              name: string;
              effect: string;
          };
          hiddenPower: {
              name: string;
              effect: string;
          };
          crossChop: {
              name: string;
              effect: string;
          };
          twister: {
              name: string;
              effect: string;
          };
          rainDance: {
              name: string;
              effect: string;
          };
          sunnyDay: {
              name: string;
              effect: string;
          };
          crunch: {
              name: string;
              effect: string;
          };
          mirrorCoat: {
              name: string;
              effect: string;
          };
          psychUp: {
              name: string;
              effect: string;
          };
          extremeSpeed: {
              name: string;
              effect: string;
          };
          ancientPower: {
              name: string;
              effect: string;
          };
          shadowBall: {
              name: string;
              effect: string;
          };
          futureSight: {
              name: string;
              effect: string;
          };
          rockSmash: {
              name: string;
              effect: string;
          };
          whirlpool: {
              name: string;
              effect: string;
          };
          beatUp: {
              name: string;
              effect: string;
          };
          fakeOut: {
              name: string;
              effect: string;
          };
          uproar: {
              name: string;
              effect: string;
          };
          stockpile: {
              name: string;
              effect: string;
          };
          spitUp: {
              name: string;
              effect: string;
          };
          swallow: {
              name: string;
              effect: string;
          };
          heatWave: {
              name: string;
              effect: string;
          };
          hail: {
              name: string;
              effect: string;
          };
          torment: {
              name: string;
              effect: string;
          };
          flatter: {
              name: string;
              effect: string;
          };
          willOWisp: {
              name: string;
              effect: string;
          };
          memento: {
              name: string;
              effect: string;
          };
          facade: {
              name: string;
              effect: string;
          };
          focusPunch: {
              name: string;
              effect: string;
          };
          smellingSalts: {
              name: string;
              effect: string;
          };
          followMe: {
              name: string;
              effect: string;
          };
          naturePower: {
              name: string;
              effect: string;
          };
          charge: {
              name: string;
              effect: string;
          };
          taunt: {
              name: string;
              effect: string;
          };
          helpingHand: {
              name: string;
              effect: string;
          };
          trick: {
              name: string;
              effect: string;
          };
          rolePlay: {
              name: string;
              effect: string;
          };
          wish: {
              name: string;
              effect: string;
          };
          assist: {
              name: string;
              effect: string;
          };
          ingrain: {
              name: string;
              effect: string;
          };
          superpower: {
              name: string;
              effect: string;
          };
          magicCoat: {
              name: string;
              effect: string;
          };
          recycle: {
              name: string;
              effect: string;
          };
          revenge: {
              name: string;
              effect: string;
          };
          brickBreak: {
              name: string;
              effect: string;
          };
          yawn: {
              name: string;
              effect: string;
          };
          knockOff: {
              name: string;
              effect: string;
          };
          endeavor: {
              name: string;
              effect: string;
          };
          eruption: {
              name: string;
              effect: string;
          };
          skillSwap: {
              name: string;
              effect: string;
          };
          imprison: {
              name: string;
              effect: string;
          };
          refresh: {
              name: string;
              effect: string;
          };
          grudge: {
              name: string;
              effect: string;
          };
          snatch: {
              name: string;
              effect: string;
          };
          secretPower: {
              name: string;
              effect: string;
          };
          dive: {
              name: string;
              effect: string;
          };
          armThrust: {
              name: string;
              effect: string;
          };
          camouflage: {
              name: string;
              effect: string;
          };
          tailGlow: {
              name: string;
              effect: string;
          };
          lusterPurge: {
              name: string;
              effect: string;
          };
          mistBall: {
              name: string;
              effect: string;
          };
          featherDance: {
              name: string;
              effect: string;
          };
          teeterDance: {
              name: string;
              effect: string;
          };
          blazeKick: {
              name: string;
              effect: string;
          };
          mudSport: {
              name: string;
              effect: string;
          };
          iceBall: {
              name: string;
              effect: string;
          };
          needleArm: {
              name: string;
              effect: string;
          };
          slackOff: {
              name: string;
              effect: string;
          };
          hyperVoice: {
              name: string;
              effect: string;
          };
          poisonFang: {
              name: string;
              effect: string;
          };
          crushClaw: {
              name: string;
              effect: string;
          };
          blastBurn: {
              name: string;
              effect: string;
          };
          hydroCannon: {
              name: string;
              effect: string;
          };
          meteorMash: {
              name: string;
              effect: string;
          };
          astonish: {
              name: string;
              effect: string;
          };
          weatherBall: {
              name: string;
              effect: string;
          };
          aromatherapy: {
              name: string;
              effect: string;
          };
          fakeTears: {
              name: string;
              effect: string;
          };
          airCutter: {
              name: string;
              effect: string;
          };
          overheat: {
              name: string;
              effect: string;
          };
          odorSleuth: {
              name: string;
              effect: string;
          };
          rockTomb: {
              name: string;
              effect: string;
          };
          silverWind: {
              name: string;
              effect: string;
          };
          metalSound: {
              name: string;
              effect: string;
          };
          grassWhistle: {
              name: string;
              effect: string;
          };
          tickle: {
              name: string;
              effect: string;
          };
          cosmicPower: {
              name: string;
              effect: string;
          };
          waterSpout: {
              name: string;
              effect: string;
          };
          signalBeam: {
              name: string;
              effect: string;
          };
          shadowPunch: {
              name: string;
              effect: string;
          };
          extrasensory: {
              name: string;
              effect: string;
          };
          skyUppercut: {
              name: string;
              effect: string;
          };
          sandTomb: {
              name: string;
              effect: string;
          };
          sheerCold: {
              name: string;
              effect: string;
          };
          muddyWater: {
              name: string;
              effect: string;
          };
          bulletSeed: {
              name: string;
              effect: string;
          };
          aerialAce: {
              name: string;
              effect: string;
          };
          icicleSpear: {
              name: string;
              effect: string;
          };
          ironDefense: {
              name: string;
              effect: string;
          };
          block: {
              name: string;
              effect: string;
          };
          howl: {
              name: string;
              effect: string;
          };
          dragonClaw: {
              name: string;
              effect: string;
          };
          frenzyPlant: {
              name: string;
              effect: string;
          };
          bulkUp: {
              name: string;
              effect: string;
          };
          bounce: {
              name: string;
              effect: string;
          };
          mudShot: {
              name: string;
              effect: string;
          };
          poisonTail: {
              name: string;
              effect: string;
          };
          covet: {
              name: string;
              effect: string;
          };
          voltTackle: {
              name: string;
              effect: string;
          };
          magicalLeaf: {
              name: string;
              effect: string;
          };
          waterSport: {
              name: string;
              effect: string;
          };
          calmMind: {
              name: string;
              effect: string;
          };
          leafBlade: {
              name: string;
              effect: string;
          };
          dragonDance: {
              name: string;
              effect: string;
          };
          rockBlast: {
              name: string;
              effect: string;
          };
          shockWave: {
              name: string;
              effect: string;
          };
          waterPulse: {
              name: string;
              effect: string;
          };
          doomDesire: {
              name: string;
              effect: string;
          };
          psychoBoost: {
              name: string;
              effect: string;
          };
          roost: {
              name: string;
              effect: string;
          };
          gravity: {
              name: string;
              effect: string;
          };
          miracleEye: {
              name: string;
              effect: string;
          };
          wakeUpSlap: {
              name: string;
              effect: string;
          };
          hammerArm: {
              name: string;
              effect: string;
          };
          gyroBall: {
              name: string;
              effect: string;
          };
          healingWish: {
              name: string;
              effect: string;
          };
          brine: {
              name: string;
              effect: string;
          };
          naturalGift: {
              name: string;
              effect: string;
          };
          feint: {
              name: string;
              effect: string;
          };
          pluck: {
              name: string;
              effect: string;
          };
          tailwind: {
              name: string;
              effect: string;
          };
          acupressure: {
              name: string;
              effect: string;
          };
          metalBurst: {
              name: string;
              effect: string;
          };
          uTurn: {
              name: string;
              effect: string;
          };
          closeCombat: {
              name: string;
              effect: string;
          };
          payback: {
              name: string;
              effect: string;
          };
          assurance: {
              name: string;
              effect: string;
          };
          embargo: {
              name: string;
              effect: string;
          };
          fling: {
              name: string;
              effect: string;
          };
          psychoShift: {
              name: string;
              effect: string;
          };
          trumpCard: {
              name: string;
              effect: string;
          };
          healBlock: {
              name: string;
              effect: string;
          };
          wringOut: {
              name: string;
              effect: string;
          };
          powerTrick: {
              name: string;
              effect: string;
          };
          gastroAcid: {
              name: string;
              effect: string;
          };
          luckyChant: {
              name: string;
              effect: string;
          };
          meFirst: {
              name: string;
              effect: string;
          };
          copycat: {
              name: string;
              effect: string;
          };
          powerSwap: {
              name: string;
              effect: string;
          };
          guardSwap: {
              name: string;
              effect: string;
          };
          punishment: {
              name: string;
              effect: string;
          };
          lastResort: {
              name: string;
              effect: string;
          };
          worrySeed: {
              name: string;
              effect: string;
          };
          suckerPunch: {
              name: string;
              effect: string;
          };
          toxicSpikes: {
              name: string;
              effect: string;
          };
          heartSwap: {
              name: string;
              effect: string;
          };
          aquaRing: {
              name: string;
              effect: string;
          };
          magnetRise: {
              name: string;
              effect: string;
          };
          flareBlitz: {
              name: string;
              effect: string;
          };
          forcePalm: {
              name: string;
              effect: string;
          };
          auraSphere: {
              name: string;
              effect: string;
          };
          rockPolish: {
              name: string;
              effect: string;
          };
          poisonJab: {
              name: string;
              effect: string;
          };
          darkPulse: {
              name: string;
              effect: string;
          };
          nightSlash: {
              name: string;
              effect: string;
          };
          aquaTail: {
              name: string;
              effect: string;
          };
          seedBomb: {
              name: string;
              effect: string;
          };
          airSlash: {
              name: string;
              effect: string;
          };
          xScissor: {
              name: string;
              effect: string;
          };
          bugBuzz: {
              name: string;
              effect: string;
          };
          dragonPulse: {
              name: string;
              effect: string;
          };
          dragonRush: {
              name: string;
              effect: string;
          };
          powerGem: {
              name: string;
              effect: string;
          };
          drainPunch: {
              name: string;
              effect: string;
          };
          vacuumWave: {
              name: string;
              effect: string;
          };
          focusBlast: {
              name: string;
              effect: string;
          };
          energyBall: {
              name: string;
              effect: string;
          };
          braveBird: {
              name: string;
              effect: string;
          };
          earthPower: {
              name: string;
              effect: string;
          };
          switcheroo: {
              name: string;
              effect: string;
          };
          gigaImpact: {
              name: string;
              effect: string;
          };
          nastyPlot: {
              name: string;
              effect: string;
          };
          bulletPunch: {
              name: string;
              effect: string;
          };
          avalanche: {
              name: string;
              effect: string;
          };
          iceShard: {
              name: string;
              effect: string;
          };
          shadowClaw: {
              name: string;
              effect: string;
          };
          thunderFang: {
              name: string;
              effect: string;
          };
          iceFang: {
              name: string;
              effect: string;
          };
          fireFang: {
              name: string;
              effect: string;
          };
          shadowSneak: {
              name: string;
              effect: string;
          };
          mudBomb: {
              name: string;
              effect: string;
          };
          psychoCut: {
              name: string;
              effect: string;
          };
          zenHeadbutt: {
              name: string;
              effect: string;
          };
          mirrorShot: {
              name: string;
              effect: string;
          };
          flashCannon: {
              name: string;
              effect: string;
          };
          rockClimb: {
              name: string;
              effect: string;
          };
          defog: {
              name: string;
              effect: string;
          };
          trickRoom: {
              name: string;
              effect: string;
          };
          dracoMeteor: {
              name: string;
              effect: string;
          };
          discharge: {
              name: string;
              effect: string;
          };
          lavaPlume: {
              name: string;
              effect: string;
          };
          leafStorm: {
              name: string;
              effect: string;
          };
          powerWhip: {
              name: string;
              effect: string;
          };
          rockWrecker: {
              name: string;
              effect: string;
          };
          crossPoison: {
              name: string;
              effect: string;
          };
          gunkShot: {
              name: string;
              effect: string;
          };
          ironHead: {
              name: string;
              effect: string;
          };
          magnetBomb: {
              name: string;
              effect: string;
          };
          stoneEdge: {
              name: string;
              effect: string;
          };
          captivate: {
              name: string;
              effect: string;
          };
          stealthRock: {
              name: string;
              effect: string;
          };
          grassKnot: {
              name: string;
              effect: string;
          };
          chatter: {
              name: string;
              effect: string;
          };
          judgment: {
              name: string;
              effect: string;
          };
          bugBite: {
              name: string;
              effect: string;
          };
          chargeBeam: {
              name: string;
              effect: string;
          };
          woodHammer: {
              name: string;
              effect: string;
          };
          aquaJet: {
              name: string;
              effect: string;
          };
          attackOrder: {
              name: string;
              effect: string;
          };
          defendOrder: {
              name: string;
              effect: string;
          };
          healOrder: {
              name: string;
              effect: string;
          };
          headSmash: {
              name: string;
              effect: string;
          };
          doubleHit: {
              name: string;
              effect: string;
          };
          roarOfTime: {
              name: string;
              effect: string;
          };
          spacialRend: {
              name: string;
              effect: string;
          };
          lunarDance: {
              name: string;
              effect: string;
          };
          crushGrip: {
              name: string;
              effect: string;
          };
          magmaStorm: {
              name: string;
              effect: string;
          };
          darkVoid: {
              name: string;
              effect: string;
          };
          seedFlare: {
              name: string;
              effect: string;
          };
          ominousWind: {
              name: string;
              effect: string;
          };
          shadowForce: {
              name: string;
              effect: string;
          };
          honeClaws: {
              name: string;
              effect: string;
          };
          wideGuard: {
              name: string;
              effect: string;
          };
          guardSplit: {
              name: string;
              effect: string;
          };
          powerSplit: {
              name: string;
              effect: string;
          };
          wonderRoom: {
              name: string;
              effect: string;
          };
          psyshock: {
              name: string;
              effect: string;
          };
          venoshock: {
              name: string;
              effect: string;
          };
          autotomize: {
              name: string;
              effect: string;
          };
          ragePowder: {
              name: string;
              effect: string;
          };
          telekinesis: {
              name: string;
              effect: string;
          };
          magicRoom: {
              name: string;
              effect: string;
          };
          smackDown: {
              name: string;
              effect: string;
          };
          stormThrow: {
              name: string;
              effect: string;
          };
          flameBurst: {
              name: string;
              effect: string;
          };
          sludgeWave: {
              name: string;
              effect: string;
          };
          quiverDance: {
              name: string;
              effect: string;
          };
          heavySlam: {
              name: string;
              effect: string;
          };
          synchronoise: {
              name: string;
              effect: string;
          };
          electroBall: {
              name: string;
              effect: string;
          };
          soak: {
              name: string;
              effect: string;
          };
          flameCharge: {
              name: string;
              effect: string;
          };
          coil: {
              name: string;
              effect: string;
          };
          lowSweep: {
              name: string;
              effect: string;
          };
          acidSpray: {
              name: string;
              effect: string;
          };
          foulPlay: {
              name: string;
              effect: string;
          };
          simpleBeam: {
              name: string;
              effect: string;
          };
          entrainment: {
              name: string;
              effect: string;
          };
          afterYou: {
              name: string;
              effect: string;
          };
          round: {
              name: string;
              effect: string;
          };
          echoedVoice: {
              name: string;
              effect: string;
          };
          chipAway: {
              name: string;
              effect: string;
          };
          clearSmog: {
              name: string;
              effect: string;
          };
          storedPower: {
              name: string;
              effect: string;
          };
          quickGuard: {
              name: string;
              effect: string;
          };
          allySwitch: {
              name: string;
              effect: string;
          };
          scald: {
              name: string;
              effect: string;
          };
          shellSmash: {
              name: string;
              effect: string;
          };
          healPulse: {
              name: string;
              effect: string;
          };
          hex: {
              name: string;
              effect: string;
          };
          skyDrop: {
              name: string;
              effect: string;
          };
          shiftGear: {
              name: string;
              effect: string;
          };
          circleThrow: {
              name: string;
              effect: string;
          };
          incinerate: {
              name: string;
              effect: string;
          };
          quash: {
              name: string;
              effect: string;
          };
          acrobatics: {
              name: string;
              effect: string;
          };
          reflectType: {
              name: string;
              effect: string;
          };
          retaliate: {
              name: string;
              effect: string;
          };
          finalGambit: {
              name: string;
              effect: string;
          };
          bestow: {
              name: string;
              effect: string;
          };
          inferno: {
              name: string;
              effect: string;
          };
          waterPledge: {
              name: string;
              effect: string;
          };
          firePledge: {
              name: string;
              effect: string;
          };
          grassPledge: {
              name: string;
              effect: string;
          };
          voltSwitch: {
              name: string;
              effect: string;
          };
          struggleBug: {
              name: string;
              effect: string;
          };
          bulldoze: {
              name: string;
              effect: string;
          };
          frostBreath: {
              name: string;
              effect: string;
          };
          dragonTail: {
              name: string;
              effect: string;
          };
          workUp: {
              name: string;
              effect: string;
          };
          electroweb: {
              name: string;
              effect: string;
          };
          wildCharge: {
              name: string;
              effect: string;
          };
          drillRun: {
              name: string;
              effect: string;
          };
          dualChop: {
              name: string;
              effect: string;
          };
          heartStamp: {
              name: string;
              effect: string;
          };
          hornLeech: {
              name: string;
              effect: string;
          };
          sacredSword: {
              name: string;
              effect: string;
          };
          razorShell: {
              name: string;
              effect: string;
          };
          heatCrash: {
              name: string;
              effect: string;
          };
          leafTornado: {
              name: string;
              effect: string;
          };
          steamroller: {
              name: string;
              effect: string;
          };
          cottonGuard: {
              name: string;
              effect: string;
          };
          nightDaze: {
              name: string;
              effect: string;
          };
          psystrike: {
              name: string;
              effect: string;
          };
          tailSlap: {
              name: string;
              effect: string;
          };
          hurricane: {
              name: string;
              effect: string;
          };
          headCharge: {
              name: string;
              effect: string;
          };
          gearGrind: {
              name: string;
              effect: string;
          };
          searingShot: {
              name: string;
              effect: string;
          };
          technoBlast: {
              name: string;
              effect: string;
          };
          relicSong: {
              name: string;
              effect: string;
          };
          secretSword: {
              name: string;
              effect: string;
          };
          glaciate: {
              name: string;
              effect: string;
          };
          boltStrike: {
              name: string;
              effect: string;
          };
          blueFlare: {
              name: string;
              effect: string;
          };
          fieryDance: {
              name: string;
              effect: string;
          };
          freezeShock: {
              name: string;
              effect: string;
          };
          iceBurn: {
              name: string;
              effect: string;
          };
          snarl: {
              name: string;
              effect: string;
          };
          icicleCrash: {
              name: string;
              effect: string;
          };
          vCreate: {
              name: string;
              effect: string;
          };
          fusionFlare: {
              name: string;
              effect: string;
          };
          fusionBolt: {
              name: string;
              effect: string;
          };
          flyingPress: {
              name: string;
              effect: string;
          };
          matBlock: {
              name: string;
              effect: string;
          };
          belch: {
              name: string;
              effect: string;
          };
          rototiller: {
              name: string;
              effect: string;
          };
          stickyWeb: {
              name: string;
              effect: string;
          };
          fellStinger: {
              name: string;
              effect: string;
          };
          phantomForce: {
              name: string;
              effect: string;
          };
          trickOrTreat: {
              name: string;
              effect: string;
          };
          nobleRoar: {
              name: string;
              effect: string;
          };
          ionDeluge: {
              name: string;
              effect: string;
          };
          parabolicCharge: {
              name: string;
              effect: string;
          };
          forestsCurse: {
              name: string;
              effect: string;
          };
          petalBlizzard: {
              name: string;
              effect: string;
          };
          freezeDry: {
              name: string;
              effect: string;
          };
          disarmingVoice: {
              name: string;
              effect: string;
          };
          partingShot: {
              name: string;
              effect: string;
          };
          topsyTurvy: {
              name: string;
              effect: string;
          };
          drainingKiss: {
              name: string;
              effect: string;
          };
          craftyShield: {
              name: string;
              effect: string;
          };
          flowerShield: {
              name: string;
              effect: string;
          };
          grassyTerrain: {
              name: string;
              effect: string;
          };
          mistyTerrain: {
              name: string;
              effect: string;
          };
          electrify: {
              name: string;
              effect: string;
          };
          playRough: {
              name: string;
              effect: string;
          };
          fairyWind: {
              name: string;
              effect: string;
          };
          moonblast: {
              name: string;
              effect: string;
          };
          boomburst: {
              name: string;
              effect: string;
          };
          fairyLock: {
              name: string;
              effect: string;
          };
          kingsShield: {
              name: string;
              effect: string;
          };
          playNice: {
              name: string;
              effect: string;
          };
          confide: {
              name: string;
              effect: string;
          };
          diamondStorm: {
              name: string;
              effect: string;
          };
          steamEruption: {
              name: string;
              effect: string;
          };
          hyperspaceHole: {
              name: string;
              effect: string;
          };
          waterShuriken: {
              name: string;
              effect: string;
          };
          mysticalFire: {
              name: string;
              effect: string;
          };
          spikyShield: {
              name: string;
              effect: string;
          };
          aromaticMist: {
              name: string;
              effect: string;
          };
          eerieImpulse: {
              name: string;
              effect: string;
          };
          venomDrench: {
              name: string;
              effect: string;
          };
          powder: {
              name: string;
              effect: string;
          };
          geomancy: {
              name: string;
              effect: string;
          };
          magneticFlux: {
              name: string;
              effect: string;
          };
          happyHour: {
              name: string;
              effect: string;
          };
          electricTerrain: {
              name: string;
              effect: string;
          };
          dazzlingGleam: {
              name: string;
              effect: string;
          };
          celebrate: {
              name: string;
              effect: string;
          };
          holdHands: {
              name: string;
              effect: string;
          };
          babyDollEyes: {
              name: string;
              effect: string;
          };
          nuzzle: {
              name: string;
              effect: string;
          };
          holdBack: {
              name: string;
              effect: string;
          };
          infestation: {
              name: string;
              effect: string;
          };
          powerUpPunch: {
              name: string;
              effect: string;
          };
          oblivionWing: {
              name: string;
              effect: string;
          };
          thousandArrows: {
              name: string;
              effect: string;
          };
          thousandWaves: {
              name: string;
              effect: string;
          };
          landsWrath: {
              name: string;
              effect: string;
          };
          lightOfRuin: {
              name: string;
              effect: string;
          };
          originPulse: {
              name: string;
              effect: string;
          };
          precipiceBlades: {
              name: string;
              effect: string;
          };
          dragonAscent: {
              name: string;
              effect: string;
          };
          hyperspaceFury: {
              name: string;
              effect: string;
          };
          breakneckBlitzPhysical: {
              name: string;
              effect: string;
          };
          breakneckBlitzSpecial: {
              name: string;
              effect: string;
          };
          allOutPummelingPhysical: {
              name: string;
              effect: string;
          };
          allOutPummelingSpecial: {
              name: string;
              effect: string;
          };
          supersonicSkystrikePhysical: {
              name: string;
              effect: string;
          };
          supersonicSkystrikeSpecial: {
              name: string;
              effect: string;
          };
          acidDownpourPhysical: {
              name: string;
              effect: string;
          };
          acidDownpourSpecial: {
              name: string;
              effect: string;
          };
          tectonicRagePhysical: {
              name: string;
              effect: string;
          };
          tectonicRageSpecial: {
              name: string;
              effect: string;
          };
          continentalCrushPhysical: {
              name: string;
              effect: string;
          };
          continentalCrushSpecial: {
              name: string;
              effect: string;
          };
          savageSpinOutPhysical: {
              name: string;
              effect: string;
          };
          savageSpinOutSpecial: {
              name: string;
              effect: string;
          };
          neverEndingNightmarePhysical: {
              name: string;
              effect: string;
          };
          neverEndingNightmareSpecial: {
              name: string;
              effect: string;
          };
          corkscrewCrashPhysical: {
              name: string;
              effect: string;
          };
          corkscrewCrashSpecial: {
              name: string;
              effect: string;
          };
          infernoOverdrivePhysical: {
              name: string;
              effect: string;
          };
          infernoOverdriveSpecial: {
              name: string;
              effect: string;
          };
          hydroVortexPhysical: {
              name: string;
              effect: string;
          };
          hydroVortexSpecial: {
              name: string;
              effect: string;
          };
          bloomDoomPhysical: {
              name: string;
              effect: string;
          };
          bloomDoomSpecial: {
              name: string;
              effect: string;
          };
          gigavoltHavocPhysical: {
              name: string;
              effect: string;
          };
          gigavoltHavocSpecial: {
              name: string;
              effect: string;
          };
          shatteredPsychePhysical: {
              name: string;
              effect: string;
          };
          shatteredPsycheSpecial: {
              name: string;
              effect: string;
          };
          subzeroSlammerPhysical: {
              name: string;
              effect: string;
          };
          subzeroSlammerSpecial: {
              name: string;
              effect: string;
          };
          devastatingDrakePhysical: {
              name: string;
              effect: string;
          };
          devastatingDrakeSpecial: {
              name: string;
              effect: string;
          };
          blackHoleEclipsePhysical: {
              name: string;
              effect: string;
          };
          blackHoleEclipseSpecial: {
              name: string;
              effect: string;
          };
          twinkleTacklePhysical: {
              name: string;
              effect: string;
          };
          twinkleTackleSpecial: {
              name: string;
              effect: string;
          };
          catastropika: {
              name: string;
              effect: string;
          };
          shoreUp: {
              name: string;
              effect: string;
          };
          firstImpression: {
              name: string;
              effect: string;
          };
          banefulBunker: {
              name: string;
              effect: string;
          };
          spiritShackle: {
              name: string;
              effect: string;
          };
          darkestLariat: {
              name: string;
              effect: string;
          };
          sparklingAria: {
              name: string;
              effect: string;
          };
          iceHammer: {
              name: string;
              effect: string;
          };
          floralHealing: {
              name: string;
              effect: string;
          };
          highHorsepower: {
              name: string;
              effect: string;
          };
          strengthSap: {
              name: string;
              effect: string;
          };
          solarBlade: {
              name: string;
              effect: string;
          };
          leafage: {
              name: string;
              effect: string;
          };
          spotlight: {
              name: string;
              effect: string;
          };
          toxicThread: {
              name: string;
              effect: string;
          };
          laserFocus: {
              name: string;
              effect: string;
          };
          gearUp: {
              name: string;
              effect: string;
          };
          throatChop: {
              name: string;
              effect: string;
          };
          pollenPuff: {
              name: string;
              effect: string;
          };
          anchorShot: {
              name: string;
              effect: string;
          };
          psychicTerrain: {
              name: string;
              effect: string;
          };
          lunge: {
              name: string;
              effect: string;
          };
          fireLash: {
              name: string;
              effect: string;
          };
          powerTrip: {
              name: string;
              effect: string;
          };
          burnUp: {
              name: string;
              effect: string;
          };
          speedSwap: {
              name: string;
              effect: string;
          };
          smartStrike: {
              name: string;
              effect: string;
          };
          purify: {
              name: string;
              effect: string;
          };
          revelationDance: {
              name: string;
              effect: string;
          };
          coreEnforcer: {
              name: string;
              effect: string;
          };
          tropKick: {
              name: string;
              effect: string;
          };
          instruct: {
              name: string;
              effect: string;
          };
          beakBlast: {
              name: string;
              effect: string;
          };
          clangingScales: {
              name: string;
              effect: string;
          };
          dragonHammer: {
              name: string;
              effect: string;
          };
          brutalSwing: {
              name: string;
              effect: string;
          };
          auroraVeil: {
              name: string;
              effect: string;
          };
          sinisterArrowRaid: {
              name: string;
              effect: string;
          };
          maliciousMoonsault: {
              name: string;
              effect: string;
          };
          oceanicOperetta: {
              name: string;
              effect: string;
          };
          guardianOfAlola: {
              name: string;
              effect: string;
          };
          soulStealing7StarStrike: {
              name: string;
              effect: string;
          };
          stokedSparksurfer: {
              name: string;
              effect: string;
          };
          pulverizingPancake: {
              name: string;
              effect: string;
          };
          extremeEvoboost: {
              name: string;
              effect: string;
          };
          genesisSupernova: {
              name: string;
              effect: string;
          };
          shellTrap: {
              name: string;
              effect: string;
          };
          fleurCannon: {
              name: string;
              effect: string;
          };
          psychicFangs: {
              name: string;
              effect: string;
          };
          stompingTantrum: {
              name: string;
              effect: string;
          };
          shadowBone: {
              name: string;
              effect: string;
          };
          accelerock: {
              name: string;
              effect: string;
          };
          liquidation: {
              name: string;
              effect: string;
          };
          prismaticLaser: {
              name: string;
              effect: string;
          };
          spectralThief: {
              name: string;
              effect: string;
          };
          sunsteelStrike: {
              name: string;
              effect: string;
          };
          moongeistBeam: {
              name: string;
              effect: string;
          };
          tearfulLook: {
              name: string;
              effect: string;
          };
          zingZap: {
              name: string;
              effect: string;
          };
          naturesMadness: {
              name: string;
              effect: string;
          };
          multiAttack: {
              name: string;
              effect: string;
          };
          tenMillionVoltThunderbolt: {
              name: string;
              effect: string;
          };
          mindBlown: {
              name: string;
              effect: string;
          };
          plasmaFists: {
              name: string;
              effect: string;
          };
          photonGeyser: {
              name: string;
              effect: string;
          };
          lightThatBurnsTheSky: {
              name: string;
              effect: string;
          };
          searingSunrazeSmash: {
              name: string;
              effect: string;
          };
          menacingMoonrazeMaelstrom: {
              name: string;
              effect: string;
          };
          letsSnuggleForever: {
              name: string;
              effect: string;
          };
          splinteredStormshards: {
              name: string;
              effect: string;
          };
          clangorousSoulblaze: {
              name: string;
              effect: string;
          };
          zippyZap: {
              name: string;
              effect: string;
          };
          splishySplash: {
              name: string;
              effect: string;
          };
          floatyFall: {
              name: string;
              effect: string;
          };
          pikaPapow: {
              name: string;
              effect: string;
          };
          bouncyBubble: {
              name: string;
              effect: string;
          };
          buzzyBuzz: {
              name: string;
              effect: string;
          };
          sizzlySlide: {
              name: string;
              effect: string;
          };
          glitzyGlow: {
              name: string;
              effect: string;
          };
          baddyBad: {
              name: string;
              effect: string;
          };
          sappySeed: {
              name: string;
              effect: string;
          };
          freezyFrost: {
              name: string;
              effect: string;
          };
          sparklySwirl: {
              name: string;
              effect: string;
          };
          veeveeVolley: {
              name: string;
              effect: string;
          };
          doubleIronBash: {
              name: string;
              effect: string;
          };
          maxGuard: {
              name: string;
              effect: string;
          };
          dynamaxCannon: {
              name: string;
              effect: string;
          };
          snipeShot: {
              name: string;
              effect: string;
          };
          jawLock: {
              name: string;
              effect: string;
          };
          stuffCheeks: {
              name: string;
              effect: string;
          };
          noRetreat: {
              name: string;
              effect: string;
          };
          tarShot: {
              name: string;
              effect: string;
          };
          magicPowder: {
              name: string;
              effect: string;
          };
          dragonDarts: {
              name: string;
              effect: string;
          };
          teatime: {
              name: string;
              effect: string;
          };
          octolock: {
              name: string;
              effect: string;
          };
          boltBeak: {
              name: string;
              effect: string;
          };
          fishiousRend: {
              name: string;
              effect: string;
          };
          courtChange: {
              name: string;
              effect: string;
          };
          maxFlare: {
              name: string;
              effect: string;
          };
          maxFlutterby: {
              name: string;
              effect: string;
          };
          maxLightning: {
              name: string;
              effect: string;
          };
          maxStrike: {
              name: string;
              effect: string;
          };
          maxKnuckle: {
              name: string;
              effect: string;
          };
          maxPhantasm: {
              name: string;
              effect: string;
          };
          maxHailstorm: {
              name: string;
              effect: string;
          };
          maxOoze: {
              name: string;
              effect: string;
          };
          maxGeyser: {
              name: string;
              effect: string;
          };
          maxAirstream: {
              name: string;
              effect: string;
          };
          maxStarfall: {
              name: string;
              effect: string;
          };
          maxWyrmwind: {
              name: string;
              effect: string;
          };
          maxMindstorm: {
              name: string;
              effect: string;
          };
          maxRockfall: {
              name: string;
              effect: string;
          };
          maxQuake: {
              name: string;
              effect: string;
          };
          maxDarkness: {
              name: string;
              effect: string;
          };
          maxOvergrowth: {
              name: string;
              effect: string;
          };
          maxSteelspike: {
              name: string;
              effect: string;
          };
          clangorousSoul: {
              name: string;
              effect: string;
          };
          bodyPress: {
              name: string;
              effect: string;
          };
          decorate: {
              name: string;
              effect: string;
          };
          drumBeating: {
              name: string;
              effect: string;
          };
          snapTrap: {
              name: string;
              effect: string;
          };
          pyroBall: {
              name: string;
              effect: string;
          };
          behemothBlade: {
              name: string;
              effect: string;
          };
          behemothBash: {
              name: string;
              effect: string;
          };
          auraWheel: {
              name: string;
              effect: string;
          };
          breakingSwipe: {
              name: string;
              effect: string;
          };
          branchPoke: {
              name: string;
              effect: string;
          };
          overdrive: {
              name: string;
              effect: string;
          };
          appleAcid: {
              name: string;
              effect: string;
          };
          gravApple: {
              name: string;
              effect: string;
          };
          spiritBreak: {
              name: string;
              effect: string;
          };
          strangeSteam: {
              name: string;
              effect: string;
          };
          lifeDew: {
              name: string;
              effect: string;
          };
          obstruct: {
              name: string;
              effect: string;
          };
          falseSurrender: {
              name: string;
              effect: string;
          };
          meteorAssault: {
              name: string;
              effect: string;
          };
          eternabeam: {
              name: string;
              effect: string;
          };
          steelBeam: {
              name: string;
              effect: string;
          };
          expandingForce: {
              name: string;
              effect: string;
          };
          steelRoller: {
              name: string;
              effect: string;
          };
          scaleShot: {
              name: string;
              effect: string;
          };
          meteorBeam: {
              name: string;
              effect: string;
          };
          shellSideArm: {
              name: string;
              effect: string;
          };
          mistyExplosion: {
              name: string;
              effect: string;
          };
          grassyGlide: {
              name: string;
              effect: string;
          };
          risingVoltage: {
              name: string;
              effect: string;
          };
          terrainPulse: {
              name: string;
              effect: string;
          };
          skitterSmack: {
              name: string;
              effect: string;
          };
          burningJealousy: {
              name: string;
              effect: string;
          };
          lashOut: {
              name: string;
              effect: string;
          };
          poltergeist: {
              name: string;
              effect: string;
          };
          corrosiveGas: {
              name: string;
              effect: string;
          };
          coaching: {
              name: string;
              effect: string;
          };
          flipTurn: {
              name: string;
              effect: string;
          };
          tripleAxel: {
              name: string;
              effect: string;
          };
          dualWingbeat: {
              name: string;
              effect: string;
          };
          scorchingSands: {
              name: string;
              effect: string;
          };
          jungleHealing: {
              name: string;
              effect: string;
          };
          wickedBlow: {
              name: string;
              effect: string;
          };
          surgingStrikes: {
              name: string;
              effect: string;
          };
          thunderCage: {
              name: string;
              effect: string;
          };
          dragonEnergy: {
              name: string;
              effect: string;
          };
          freezingGlare: {
              name: string;
              effect: string;
          };
          fieryWrath: {
              name: string;
              effect: string;
          };
          thunderousKick: {
              name: string;
              effect: string;
          };
          glacialLance: {
              name: string;
              effect: string;
          };
          astralBarrage: {
              name: string;
              effect: string;
          };
          eerieSpell: {
              name: string;
              effect: string;
          };
          direClaw: {
              name: string;
              effect: string;
          };
          psyshieldBash: {
              name: string;
              effect: string;
          };
          powerShift: {
              name: string;
              effect: string;
          };
          stoneAxe: {
              name: string;
              effect: string;
          };
          springtideStorm: {
              name: string;
              effect: string;
          };
          mysticalPower: {
              name: string;
              effect: string;
          };
          ragingFury: {
              name: string;
              effect: string;
          };
          waveCrash: {
              name: string;
              effect: string;
          };
          chloroblast: {
              name: string;
              effect: string;
          };
          mountainGale: {
              name: string;
              effect: string;
          };
          victoryDance: {
              name: string;
              effect: string;
          };
          headlongRush: {
              name: string;
              effect: string;
          };
          barbBarrage: {
              name: string;
              effect: string;
          };
          esperWing: {
              name: string;
              effect: string;
          };
          bitterMalice: {
              name: string;
              effect: string;
          };
          shelter: {
              name: string;
              effect: string;
          };
          tripleArrows: {
              name: string;
              effect: string;
          };
          infernalParade: {
              name: string;
              effect: string;
          };
          ceaselessEdge: {
              name: string;
              effect: string;
          };
          bleakwindStorm: {
              name: string;
              effect: string;
          };
          wildboltStorm: {
              name: string;
              effect: string;
          };
          sandsearStorm: {
              name: string;
              effect: string;
          };
          lunarBlessing: {
              name: string;
              effect: string;
          };
          takeHeart: {
              name: string;
              effect: string;
          };
          gMaxWildfire: {
              name: string;
              effect: string;
          };
          gMaxBefuddle: {
              name: string;
              effect: string;
          };
          gMaxVoltCrash: {
              name: string;
              effect: string;
          };
          gMaxGoldRush: {
              name: string;
              effect: string;
          };
          gMaxChiStrike: {
              name: string;
              effect: string;
          };
          gMaxTerror: {
              name: string;
              effect: string;
          };
          gMaxResonance: {
              name: string;
              effect: string;
          };
          gMaxCuddle: {
              name: string;
              effect: string;
          };
          gMaxReplenish: {
              name: string;
              effect: string;
          };
          gMaxMalodor: {
              name: string;
              effect: string;
          };
          gMaxStonesurge: {
              name: string;
              effect: string;
          };
          gMaxWindRage: {
              name: string;
              effect: string;
          };
          gMaxStunShock: {
              name: string;
              effect: string;
          };
          gMaxFinale: {
              name: string;
              effect: string;
          };
          gMaxDepletion: {
              name: string;
              effect: string;
          };
          gMaxGravitas: {
              name: string;
              effect: string;
          };
          gMaxVolcalith: {
              name: string;
              effect: string;
          };
          gMaxSandblast: {
              name: string;
              effect: string;
          };
          gMaxSnooze: {
              name: string;
              effect: string;
          };
          gMaxTartness: {
              name: string;
              effect: string;
          };
          gMaxSweetness: {
              name: string;
              effect: string;
          };
          gMaxSmite: {
              name: string;
              effect: string;
          };
          gMaxSteelsurge: {
              name: string;
              effect: string;
          };
          gMaxMeltdown: {
              name: string;
              effect: string;
          };
          gMaxFoamBurst: {
              name: string;
              effect: string;
          };
          gMaxCentiferno: {
              name: string;
              effect: string;
          };
          gMaxVineLash: {
              name: string;
              effect: string;
          };
          gMaxCannonade: {
              name: string;
              effect: string;
          };
          gMaxDrumSolo: {
              name: string;
              effect: string;
          };
          gMaxFireball: {
              name: string;
              effect: string;
          };
          gMaxHydrosnipe: {
              name: string;
              effect: string;
          };
          gMaxOneBlow: {
              name: string;
              effect: string;
          };
          gMaxRapidFlow: {
              name: string;
              effect: string;
          };
          teraBlast: {
              name: string;
              effect: string;
          };
          silkTrap: {
              name: string;
              effect: string;
          };
          axeKick: {
              name: string;
              effect: string;
          };
          lastRespects: {
              name: string;
              effect: string;
          };
          luminaCrash: {
              name: string;
              effect: string;
          };
          orderUp: {
              name: string;
              effect: string;
          };
          jetPunch: {
              name: string;
              effect: string;
          };
          spicyExtract: {
              name: string;
              effect: string;
          };
          spinOut: {
              name: string;
              effect: string;
          };
          populationBomb: {
              name: string;
              effect: string;
          };
          iceSpinner: {
              name: string;
              effect: string;
          };
          glaiveRush: {
              name: string;
              effect: string;
          };
          revivalBlessing: {
              name: string;
              effect: string;
          };
          saltCure: {
              name: string;
              effect: string;
          };
          tripleDive: {
              name: string;
              effect: string;
          };
          mortalSpin: {
              name: string;
              effect: string;
          };
          doodle: {
              name: string;
              effect: string;
          };
          filletAway: {
              name: string;
              effect: string;
          };
          kowtowCleave: {
              name: string;
              effect: string;
          };
          flowerTrick: {
              name: string;
              effect: string;
          };
          torchSong: {
              name: string;
              effect: string;
          };
          aquaStep: {
              name: string;
              effect: string;
          };
          ragingBull: {
              name: string;
              effect: string;
          };
          makeItRain: {
              name: string;
              effect: string;
          };
          psyblade: {
              name: string;
              effect: string;
          };
          hydroSteam: {
              name: string;
              effect: string;
          };
          ruination: {
              name: string;
              effect: string;
          };
          collisionCourse: {
              name: string;
              effect: string;
          };
          electroDrift: {
              name: string;
              effect: string;
          };
          shedTail: {
              name: string;
              effect: string;
          };
          chillyReception: {
              name: string;
              effect: string;
          };
          tidyUp: {
              name: string;
              effect: string;
          };
          snowscape: {
              name: string;
              effect: string;
          };
          pounce: {
              name: string;
              effect: string;
          };
          trailblaze: {
              name: string;
              effect: string;
          };
          chillingWater: {
              name: string;
              effect: string;
          };
          hyperDrill: {
              name: string;
              effect: string;
          };
          twinBeam: {
              name: string;
              effect: string;
          };
          rageFist: {
              name: string;
              effect: string;
          };
          armorCannon: {
              name: string;
              effect: string;
          };
          bitterBlade: {
              name: string;
              effect: string;
          };
          doubleShock: {
              name: string;
              effect: string;
          };
          gigatonHammer: {
              name: string;
              effect: string;
          };
          comeuppance: {
              name: string;
              effect: string;
          };
          aquaCutter: {
              name: string;
              effect: string;
          };
          blazingTorque: {
              name: string;
              effect: string;
          };
          wickedTorque: {
              name: string;
              effect: string;
          };
          noxiousTorque: {
              name: string;
              effect: string;
          };
          combatTorque: {
              name: string;
              effect: string;
          };
          magicalTorque: {
              name: string;
              effect: string;
          };
          bloodMoon: {
              name: string;
              effect: string;
          };
          matchaGotcha: {
              name: string;
              effect: string;
          };
          syrupBomb: {
              name: string;
              effect: string;
          };
          ivyCudgel: {
              name: string;
              effect: string;
          };
          electroShot: {
              name: string;
              effect: string;
          };
          teraStarstorm: {
              name: string;
              effect: string;
          };
          fickleBeam: {
              name: string;
              effect: string;
          };
          burningBulwark: {
              name: string;
              effect: string;
          };
          thunderclap: {
              name: string;
              effect: string;
          };
          mightyCleave: {
              name: string;
              effect: string;
          };
          tachyonCutter: {
              name: string;
              effect: string;
          };
          hardPress: {
              name: string;
              effect: string;
          };
          dragonCheer: {
              name: string;
              effect: string;
          };
          alluringVoice: {
              name: string;
              effect: string;
          };
          temperFlare: {
              name: string;
              effect: string;
          };
          supercellSlam: {
              name: string;
              effect: string;
          };
          psychicNoise: {
              name: string;
              effect: string;
          };
          upperHand: {
              name: string;
              effect: string;
          };
          malignantChain: {
              name: string;
              effect: string;
          };
      };
      nature: {
          Hardy: string;
          Lonely: string;
          Brave: string;
          Adamant: string;
          Naughty: string;
          Bold: string;
          Docile: string;
          Relaxed: string;
          Impish: string;
          Lax: string;
          Timid: string;
          Hasty: string;
          Serious: string;
          Jolly: string;
          Naive: string;
          Modest: string;
          Mild: string;
          Quiet: string;
          Bashful: string;
          Rash: string;
          Calm: string;
          Gentle: string;
          Sassy: string;
          Careful: string;
          Quirky: string;
      };
      pokeball: {
          pokeBall: string;
          greatBall: string;
          ultraBall: string;
          rogueBall: string;
          masterBall: string;
          luxuryBall: string;
      };
      pokemon: {
          bulbasaur: string;
          ivysaur: string;
          venusaur: string;
          charmander: string;
          charmeleon: string;
          charizard: string;
          squirtle: string;
          wartortle: string;
          blastoise: string;
          caterpie: string;
          metapod: string;
          butterfree: string;
          weedle: string;
          kakuna: string;
          beedrill: string;
          pidgey: string;
          pidgeotto: string;
          pidgeot: string;
          rattata: string;
          raticate: string;
          spearow: string;
          fearow: string;
          ekans: string;
          arbok: string;
          pikachu: string;
          raichu: string;
          sandshrew: string;
          sandslash: string;
          nidoran_f: string;
          nidorina: string;
          nidoqueen: string;
          nidoran_m: string;
          nidorino: string;
          nidoking: string;
          clefairy: string;
          clefable: string;
          vulpix: string;
          ninetales: string;
          jigglypuff: string;
          wigglytuff: string;
          zubat: string;
          golbat: string;
          oddish: string;
          gloom: string;
          vileplume: string;
          paras: string;
          parasect: string;
          venonat: string;
          venomoth: string;
          diglett: string;
          dugtrio: string;
          meowth: string;
          persian: string;
          psyduck: string;
          golduck: string;
          mankey: string;
          primeape: string;
          growlithe: string;
          arcanine: string;
          poliwag: string;
          poliwhirl: string;
          poliwrath: string;
          abra: string;
          kadabra: string;
          alakazam: string;
          machop: string;
          machoke: string;
          machamp: string;
          bellsprout: string;
          weepinbell: string;
          victreebel: string;
          tentacool: string;
          tentacruel: string;
          geodude: string;
          graveler: string;
          golem: string;
          ponyta: string;
          rapidash: string;
          slowpoke: string;
          slowbro: string;
          magnemite: string;
          magneton: string;
          farfetchd: string;
          doduo: string;
          dodrio: string;
          seel: string;
          dewgong: string;
          grimer: string;
          muk: string;
          shellder: string;
          cloyster: string;
          gastly: string;
          haunter: string;
          gengar: string;
          onix: string;
          drowzee: string;
          hypno: string;
          krabby: string;
          kingler: string;
          voltorb: string;
          electrode: string;
          exeggcute: string;
          exeggutor: string;
          cubone: string;
          marowak: string;
          hitmonlee: string;
          hitmonchan: string;
          lickitung: string;
          koffing: string;
          weezing: string;
          rhyhorn: string;
          rhydon: string;
          chansey: string;
          tangela: string;
          kangaskhan: string;
          horsea: string;
          seadra: string;
          goldeen: string;
          seaking: string;
          staryu: string;
          starmie: string;
          mr_mime: string;
          scyther: string;
          jynx: string;
          electabuzz: string;
          magmar: string;
          pinsir: string;
          tauros: string;
          magikarp: string;
          gyarados: string;
          lapras: string;
          ditto: string;
          eevee: string;
          vaporeon: string;
          jolteon: string;
          flareon: string;
          porygon: string;
          omanyte: string;
          omastar: string;
          kabuto: string;
          kabutops: string;
          aerodactyl: string;
          snorlax: string;
          articuno: string;
          zapdos: string;
          moltres: string;
          dratini: string;
          dragonair: string;
          dragonite: string;
          mewtwo: string;
          mew: string;
          chikorita: string;
          bayleef: string;
          meganium: string;
          cyndaquil: string;
          quilava: string;
          typhlosion: string;
          totodile: string;
          croconaw: string;
          feraligatr: string;
          sentret: string;
          furret: string;
          hoothoot: string;
          noctowl: string;
          ledyba: string;
          ledian: string;
          spinarak: string;
          ariados: string;
          crobat: string;
          chinchou: string;
          lanturn: string;
          pichu: string;
          cleffa: string;
          igglybuff: string;
          togepi: string;
          togetic: string;
          natu: string;
          xatu: string;
          mareep: string;
          flaaffy: string;
          ampharos: string;
          bellossom: string;
          marill: string;
          azumarill: string;
          sudowoodo: string;
          politoed: string;
          hoppip: string;
          skiploom: string;
          jumpluff: string;
          aipom: string;
          sunkern: string;
          sunflora: string;
          yanma: string;
          wooper: string;
          quagsire: string;
          espeon: string;
          umbreon: string;
          murkrow: string;
          slowking: string;
          misdreavus: string;
          unown: string;
          wobbuffet: string;
          girafarig: string;
          pineco: string;
          forretress: string;
          dunsparce: string;
          gligar: string;
          steelix: string;
          snubbull: string;
          granbull: string;
          qwilfish: string;
          scizor: string;
          shuckle: string;
          heracross: string;
          sneasel: string;
          teddiursa: string;
          ursaring: string;
          slugma: string;
          magcargo: string;
          swinub: string;
          piloswine: string;
          corsola: string;
          remoraid: string;
          octillery: string;
          delibird: string;
          mantine: string;
          skarmory: string;
          houndour: string;
          houndoom: string;
          kingdra: string;
          phanpy: string;
          donphan: string;
          porygon2: string;
          stantler: string;
          smeargle: string;
          tyrogue: string;
          hitmontop: string;
          smoochum: string;
          elekid: string;
          magby: string;
          miltank: string;
          blissey: string;
          raikou: string;
          entei: string;
          suicune: string;
          larvitar: string;
          pupitar: string;
          tyranitar: string;
          lugia: string;
          ho_oh: string;
          celebi: string;
          treecko: string;
          grovyle: string;
          sceptile: string;
          torchic: string;
          combusken: string;
          blaziken: string;
          mudkip: string;
          marshtomp: string;
          swampert: string;
          poochyena: string;
          mightyena: string;
          zigzagoon: string;
          linoone: string;
          wurmple: string;
          silcoon: string;
          beautifly: string;
          cascoon: string;
          dustox: string;
          lotad: string;
          lombre: string;
          ludicolo: string;
          seedot: string;
          nuzleaf: string;
          shiftry: string;
          taillow: string;
          swellow: string;
          wingull: string;
          pelipper: string;
          ralts: string;
          kirlia: string;
          gardevoir: string;
          surskit: string;
          masquerain: string;
          shroomish: string;
          breloom: string;
          slakoth: string;
          vigoroth: string;
          slaking: string;
          nincada: string;
          ninjask: string;
          shedinja: string;
          whismur: string;
          loudred: string;
          exploud: string;
          makuhita: string;
          hariyama: string;
          azurill: string;
          nosepass: string;
          skitty: string;
          delcatty: string;
          sableye: string;
          mawile: string;
          aron: string;
          lairon: string;
          aggron: string;
          meditite: string;
          medicham: string;
          electrike: string;
          manectric: string;
          plusle: string;
          minun: string;
          volbeat: string;
          illumise: string;
          roselia: string;
          gulpin: string;
          swalot: string;
          carvanha: string;
          sharpedo: string;
          wailmer: string;
          wailord: string;
          numel: string;
          camerupt: string;
          torkoal: string;
          spoink: string;
          grumpig: string;
          spinda: string;
          trapinch: string;
          vibrava: string;
          flygon: string;
          cacnea: string;
          cacturne: string;
          swablu: string;
          altaria: string;
          zangoose: string;
          seviper: string;
          lunatone: string;
          solrock: string;
          barboach: string;
          whiscash: string;
          corphish: string;
          crawdaunt: string;
          baltoy: string;
          claydol: string;
          lileep: string;
          cradily: string;
          anorith: string;
          armaldo: string;
          feebas: string;
          milotic: string;
          castform: string;
          kecleon: string;
          shuppet: string;
          banette: string;
          duskull: string;
          dusclops: string;
          tropius: string;
          chimecho: string;
          absol: string;
          wynaut: string;
          snorunt: string;
          glalie: string;
          spheal: string;
          sealeo: string;
          walrein: string;
          clamperl: string;
          huntail: string;
          gorebyss: string;
          relicanth: string;
          luvdisc: string;
          bagon: string;
          shelgon: string;
          salamence: string;
          beldum: string;
          metang: string;
          metagross: string;
          regirock: string;
          regice: string;
          registeel: string;
          latias: string;
          latios: string;
          kyogre: string;
          groudon: string;
          rayquaza: string;
          jirachi: string;
          deoxys: string;
          turtwig: string;
          grotle: string;
          torterra: string;
          chimchar: string;
          monferno: string;
          infernape: string;
          piplup: string;
          prinplup: string;
          empoleon: string;
          starly: string;
          staravia: string;
          staraptor: string;
          bidoof: string;
          bibarel: string;
          kricketot: string;
          kricketune: string;
          shinx: string;
          luxio: string;
          luxray: string;
          budew: string;
          roserade: string;
          cranidos: string;
          rampardos: string;
          shieldon: string;
          bastiodon: string;
          burmy: string;
          wormadam: string;
          mothim: string;
          combee: string;
          vespiquen: string;
          pachirisu: string;
          buizel: string;
          floatzel: string;
          cherubi: string;
          cherrim: string;
          shellos: string;
          gastrodon: string;
          ambipom: string;
          drifloon: string;
          drifblim: string;
          buneary: string;
          lopunny: string;
          mismagius: string;
          honchkrow: string;
          glameow: string;
          purugly: string;
          chingling: string;
          stunky: string;
          skuntank: string;
          bronzor: string;
          bronzong: string;
          bonsly: string;
          mime_jr: string;
          happiny: string;
          chatot: string;
          spiritomb: string;
          gible: string;
          gabite: string;
          garchomp: string;
          munchlax: string;
          riolu: string;
          lucario: string;
          hippopotas: string;
          hippowdon: string;
          skorupi: string;
          drapion: string;
          croagunk: string;
          toxicroak: string;
          carnivine: string;
          finneon: string;
          lumineon: string;
          mantyke: string;
          snover: string;
          abomasnow: string;
          weavile: string;
          magnezone: string;
          lickilicky: string;
          rhyperior: string;
          tangrowth: string;
          electivire: string;
          magmortar: string;
          togekiss: string;
          yanmega: string;
          leafeon: string;
          glaceon: string;
          gliscor: string;
          mamoswine: string;
          porygon_z: string;
          gallade: string;
          probopass: string;
          dusknoir: string;
          froslass: string;
          rotom: string;
          uxie: string;
          mesprit: string;
          azelf: string;
          dialga: string;
          palkia: string;
          heatran: string;
          regigigas: string;
          giratina: string;
          cresselia: string;
          phione: string;
          manaphy: string;
          darkrai: string;
          shaymin: string;
          arceus: string;
          victini: string;
          snivy: string;
          servine: string;
          serperior: string;
          tepig: string;
          pignite: string;
          emboar: string;
          oshawott: string;
          dewott: string;
          samurott: string;
          patrat: string;
          watchog: string;
          lillipup: string;
          herdier: string;
          stoutland: string;
          purrloin: string;
          liepard: string;
          pansage: string;
          simisage: string;
          pansear: string;
          simisear: string;
          panpour: string;
          simipour: string;
          munna: string;
          musharna: string;
          pidove: string;
          tranquill: string;
          unfezant: string;
          blitzle: string;
          zebstrika: string;
          roggenrola: string;
          boldore: string;
          gigalith: string;
          woobat: string;
          swoobat: string;
          drilbur: string;
          excadrill: string;
          audino: string;
          timburr: string;
          gurdurr: string;
          conkeldurr: string;
          tympole: string;
          palpitoad: string;
          seismitoad: string;
          throh: string;
          sawk: string;
          sewaddle: string;
          swadloon: string;
          leavanny: string;
          venipede: string;
          whirlipede: string;
          scolipede: string;
          cottonee: string;
          whimsicott: string;
          petilil: string;
          lilligant: string;
          basculin: string;
          sandile: string;
          krokorok: string;
          krookodile: string;
          darumaka: string;
          darmanitan: string;
          maractus: string;
          dwebble: string;
          crustle: string;
          scraggy: string;
          scrafty: string;
          sigilyph: string;
          yamask: string;
          cofagrigus: string;
          tirtouga: string;
          carracosta: string;
          archen: string;
          archeops: string;
          trubbish: string;
          garbodor: string;
          zorua: string;
          zoroark: string;
          minccino: string;
          cinccino: string;
          gothita: string;
          gothorita: string;
          gothitelle: string;
          solosis: string;
          duosion: string;
          reuniclus: string;
          ducklett: string;
          swanna: string;
          vanillite: string;
          vanillish: string;
          vanilluxe: string;
          deerling: string;
          sawsbuck: string;
          emolga: string;
          karrablast: string;
          escavalier: string;
          foongus: string;
          amoonguss: string;
          frillish: string;
          jellicent: string;
          alomomola: string;
          joltik: string;
          galvantula: string;
          ferroseed: string;
          ferrothorn: string;
          klink: string;
          klang: string;
          klinklang: string;
          tynamo: string;
          eelektrik: string;
          eelektross: string;
          elgyem: string;
          beheeyem: string;
          litwick: string;
          lampent: string;
          chandelure: string;
          axew: string;
          fraxure: string;
          haxorus: string;
          cubchoo: string;
          beartic: string;
          cryogonal: string;
          shelmet: string;
          accelgor: string;
          stunfisk: string;
          mienfoo: string;
          mienshao: string;
          druddigon: string;
          golett: string;
          golurk: string;
          pawniard: string;
          bisharp: string;
          bouffalant: string;
          rufflet: string;
          braviary: string;
          vullaby: string;
          mandibuzz: string;
          heatmor: string;
          durant: string;
          deino: string;
          zweilous: string;
          hydreigon: string;
          larvesta: string;
          volcarona: string;
          cobalion: string;
          terrakion: string;
          virizion: string;
          tornadus: string;
          thundurus: string;
          reshiram: string;
          zekrom: string;
          landorus: string;
          kyurem: string;
          keldeo: string;
          meloetta: string;
          genesect: string;
          chespin: string;
          quilladin: string;
          chesnaught: string;
          fennekin: string;
          braixen: string;
          delphox: string;
          froakie: string;
          frogadier: string;
          greninja: string;
          bunnelby: string;
          diggersby: string;
          fletchling: string;
          fletchinder: string;
          talonflame: string;
          scatterbug: string;
          spewpa: string;
          vivillon: string;
          litleo: string;
          pyroar: string;
          flabebe: string;
          floette: string;
          florges: string;
          skiddo: string;
          gogoat: string;
          pancham: string;
          pangoro: string;
          furfrou: string;
          espurr: string;
          meowstic: string;
          honedge: string;
          doublade: string;
          aegislash: string;
          spritzee: string;
          aromatisse: string;
          swirlix: string;
          slurpuff: string;
          inkay: string;
          malamar: string;
          binacle: string;
          barbaracle: string;
          skrelp: string;
          dragalge: string;
          clauncher: string;
          clawitzer: string;
          helioptile: string;
          heliolisk: string;
          tyrunt: string;
          tyrantrum: string;
          amaura: string;
          aurorus: string;
          sylveon: string;
          hawlucha: string;
          dedenne: string;
          carbink: string;
          goomy: string;
          sliggoo: string;
          goodra: string;
          klefki: string;
          phantump: string;
          trevenant: string;
          pumpkaboo: string;
          gourgeist: string;
          bergmite: string;
          avalugg: string;
          noibat: string;
          noivern: string;
          xerneas: string;
          yveltal: string;
          zygarde: string;
          diancie: string;
          hoopa: string;
          volcanion: string;
          rowlet: string;
          dartrix: string;
          decidueye: string;
          litten: string;
          torracat: string;
          incineroar: string;
          popplio: string;
          brionne: string;
          primarina: string;
          pikipek: string;
          trumbeak: string;
          toucannon: string;
          yungoos: string;
          gumshoos: string;
          grubbin: string;
          charjabug: string;
          vikavolt: string;
          crabrawler: string;
          crabominable: string;
          oricorio: string;
          cutiefly: string;
          ribombee: string;
          rockruff: string;
          lycanroc: string;
          wishiwashi: string;
          mareanie: string;
          toxapex: string;
          mudbray: string;
          mudsdale: string;
          dewpider: string;
          araquanid: string;
          fomantis: string;
          lurantis: string;
          morelull: string;
          shiinotic: string;
          salandit: string;
          salazzle: string;
          stufful: string;
          bewear: string;
          bounsweet: string;
          steenee: string;
          tsareena: string;
          comfey: string;
          oranguru: string;
          passimian: string;
          wimpod: string;
          golisopod: string;
          sandygast: string;
          palossand: string;
          pyukumuku: string;
          type_null: string;
          silvally: string;
          minior: string;
          komala: string;
          turtonator: string;
          togedemaru: string;
          mimikyu: string;
          bruxish: string;
          drampa: string;
          dhelmise: string;
          jangmo_o: string;
          hakamo_o: string;
          kommo_o: string;
          tapu_koko: string;
          tapu_lele: string;
          tapu_bulu: string;
          tapu_fini: string;
          cosmog: string;
          cosmoem: string;
          solgaleo: string;
          lunala: string;
          nihilego: string;
          buzzwole: string;
          pheromosa: string;
          xurkitree: string;
          celesteela: string;
          kartana: string;
          guzzlord: string;
          necrozma: string;
          magearna: string;
          marshadow: string;
          poipole: string;
          naganadel: string;
          stakataka: string;
          blacephalon: string;
          zeraora: string;
          meltan: string;
          melmetal: string;
          grookey: string;
          thwackey: string;
          rillaboom: string;
          scorbunny: string;
          raboot: string;
          cinderace: string;
          sobble: string;
          drizzile: string;
          inteleon: string;
          skwovet: string;
          greedent: string;
          rookidee: string;
          corvisquire: string;
          corviknight: string;
          blipbug: string;
          dottler: string;
          orbeetle: string;
          nickit: string;
          thievul: string;
          gossifleur: string;
          eldegoss: string;
          wooloo: string;
          dubwool: string;
          chewtle: string;
          drednaw: string;
          yamper: string;
          boltund: string;
          rolycoly: string;
          carkol: string;
          coalossal: string;
          applin: string;
          flapple: string;
          appletun: string;
          silicobra: string;
          sandaconda: string;
          cramorant: string;
          arrokuda: string;
          barraskewda: string;
          toxel: string;
          toxtricity: string;
          sizzlipede: string;
          centiskorch: string;
          clobbopus: string;
          grapploct: string;
          sinistea: string;
          polteageist: string;
          hatenna: string;
          hattrem: string;
          hatterene: string;
          impidimp: string;
          morgrem: string;
          grimmsnarl: string;
          obstagoon: string;
          perrserker: string;
          cursola: string;
          sirfetchd: string;
          mr_rime: string;
          runerigus: string;
          milcery: string;
          alcremie: string;
          falinks: string;
          pincurchin: string;
          snom: string;
          frosmoth: string;
          stonjourner: string;
          eiscue: string;
          indeedee: string;
          morpeko: string;
          cufant: string;
          copperajah: string;
          dracozolt: string;
          arctozolt: string;
          dracovish: string;
          arctovish: string;
          duraludon: string;
          dreepy: string;
          drakloak: string;
          dragapult: string;
          zacian: string;
          zamazenta: string;
          eternatus: string;
          kubfu: string;
          urshifu: string;
          zarude: string;
          regieleki: string;
          regidrago: string;
          glastrier: string;
          spectrier: string;
          calyrex: string;
          wyrdeer: string;
          kleavor: string;
          ursaluna: string;
          basculegion: string;
          sneasler: string;
          overqwil: string;
          enamorus: string;
          sprigatito: string;
          floragato: string;
          meowscarada: string;
          fuecoco: string;
          crocalor: string;
          skeledirge: string;
          quaxly: string;
          quaxwell: string;
          quaquaval: string;
          lechonk: string;
          oinkologne: string;
          tarountula: string;
          spidops: string;
          nymble: string;
          lokix: string;
          pawmi: string;
          pawmo: string;
          pawmot: string;
          tandemaus: string;
          maushold: string;
          fidough: string;
          dachsbun: string;
          smoliv: string;
          dolliv: string;
          arboliva: string;
          squawkabilly: string;
          nacli: string;
          naclstack: string;
          garganacl: string;
          charcadet: string;
          armarouge: string;
          ceruledge: string;
          tadbulb: string;
          bellibolt: string;
          wattrel: string;
          kilowattrel: string;
          maschiff: string;
          mabosstiff: string;
          shroodle: string;
          grafaiai: string;
          bramblin: string;
          brambleghast: string;
          toedscool: string;
          toedscruel: string;
          klawf: string;
          capsakid: string;
          scovillain: string;
          rellor: string;
          rabsca: string;
          flittle: string;
          espathra: string;
          tinkatink: string;
          tinkatuff: string;
          tinkaton: string;
          wiglett: string;
          wugtrio: string;
          bombirdier: string;
          finizen: string;
          palafin: string;
          varoom: string;
          revavroom: string;
          cyclizar: string;
          orthworm: string;
          glimmet: string;
          glimmora: string;
          greavard: string;
          houndstone: string;
          flamigo: string;
          cetoddle: string;
          cetitan: string;
          veluza: string;
          dondozo: string;
          tatsugiri: string;
          annihilape: string;
          clodsire: string;
          farigiraf: string;
          dudunsparce: string;
          kingambit: string;
          great_tusk: string;
          scream_tail: string;
          brute_bonnet: string;
          flutter_mane: string;
          slither_wing: string;
          sandy_shocks: string;
          iron_treads: string;
          iron_bundle: string;
          iron_hands: string;
          iron_jugulis: string;
          iron_moth: string;
          iron_thorns: string;
          frigibax: string;
          arctibax: string;
          baxcalibur: string;
          gimmighoul: string;
          gholdengo: string;
          wo_chien: string;
          chien_pao: string;
          ting_lu: string;
          chi_yu: string;
          roaring_moon: string;
          iron_valiant: string;
          koraidon: string;
          miraidon: string;
          walking_wake: string;
          iron_leaves: string;
          dipplin: string;
          poltchageist: string;
          sinistcha: string;
          okidogi: string;
          munkidori: string;
          fezandipiti: string;
          ogerpon: string;
          archaludon: string;
          hydrapple: string;
          gouging_fire: string;
          raging_bolt: string;
          iron_boulder: string;
          iron_crown: string;
          terapagos: string;
          pecharunt: string;
          alola_rattata: string;
          alola_raticate: string;
          alola_raichu: string;
          alola_sandshrew: string;
          alola_sandslash: string;
          alola_vulpix: string;
          alola_ninetales: string;
          alola_diglett: string;
          alola_dugtrio: string;
          alola_meowth: string;
          alola_persian: string;
          alola_geodude: string;
          alola_graveler: string;
          alola_golem: string;
          alola_grimer: string;
          alola_muk: string;
          alola_exeggutor: string;
          alola_marowak: string;
          eternal_floette: string;
          galar_meowth: string;
          galar_ponyta: string;
          galar_rapidash: string;
          galar_slowpoke: string;
          galar_slowbro: string;
          galar_farfetchd: string;
          galar_weezing: string;
          galar_mr_mime: string;
          galar_articuno: string;
          galar_zapdos: string;
          galar_moltres: string;
          galar_slowking: string;
          galar_corsola: string;
          galar_zigzagoon: string;
          galar_linoone: string;
          galar_darumaka: string;
          galar_darmanitan: string;
          galar_yamask: string;
          galar_stunfisk: string;
          hisui_growlithe: string;
          hisui_arcanine: string;
          hisui_voltorb: string;
          hisui_electrode: string;
          hisui_typhlosion: string;
          hisui_qwilfish: string;
          hisui_sneasel: string;
          hisui_samurott: string;
          hisui_lilligant: string;
          hisui_zorua: string;
          hisui_zoroark: string;
          hisui_braviary: string;
          hisui_sliggoo: string;
          hisui_goodra: string;
          hisui_avalugg: string;
          hisui_decidueye: string;
          paldea_tauros: string;
          paldea_wooper: string;
          bloodmoon_ursaluna: string;
      };
      pokemonForm: {
          pikachuCosplay: string;
          pikachuCoolCosplay: string;
          pikachuBeautyCosplay: string;
          pikachuCuteCosplay: string;
          pikachuSmartCosplay: string;
          pikachuToughCosplay: string;
          pikachuPartner: string;
          eeveePartner: string;
          pichuSpiky: string;
          unownA: string;
          unownB: string;
          unownC: string;
          unownD: string;
          unownE: string;
          unownF: string;
          unownG: string;
          unownH: string;
          unownI: string;
          unownJ: string;
          unownK: string;
          unownL: string;
          unownM: string;
          unownN: string;
          unownO: string;
          unownP: string;
          unownQ: string;
          unownR: string;
          unownS: string;
          unownT: string;
          unownU: string;
          unownV: string;
          unownW: string;
          unownX: string;
          unownY: string;
          unownZ: string;
          unownExclamation: string;
          unownQuestion: string;
          castformSunny: string;
          castformRainy: string;
          castformSnowy: string;
          deoxysNormal: string;
          burmyPlant: string;
          burmySandy: string;
          burmyTrash: string;
          shellosEast: string;
          shellosWest: string;
          rotomHeat: string;
          rotomWash: string;
          rotomFrost: string;
          rotomFan: string;
          rotomMow: string;
          giratinaAltered: string;
          shayminLand: string;
          basculinRedStriped: string;
          basculinBlueStriped: string;
          basculinWhiteStriped: string;
          deerlingSpring: string;
          deerlingSummer: string;
          deerlingAutumn: string;
          deerlingWinter: string;
          tornadusIncarnate: string;
          thundurusIncarnate: string;
          landorusIncarnate: string;
          keldeoOrdinary: string;
          meloettaAria: string;
          meloettaPirouette: string;
          froakieBattleBond: string;
          scatterbugMeadow: string;
          scatterbugIcySnow: string;
          scatterbugPolar: string;
          scatterbugTundra: string;
          scatterbugContinental: string;
          scatterbugGarden: string;
          scatterbugElegant: string;
          scatterbugModern: string;
          scatterbugMarine: string;
          scatterbugArchipelago: string;
          scatterbugHighPlains: string;
          scatterbugSandstorm: string;
          scatterbugRiver: string;
          scatterbugMonsoon: string;
          scatterbugSavanna: string;
          scatterbugSun: string;
          scatterbugOcean: string;
          scatterbugJungle: string;
          scatterbugFancy: string;
          scatterbugPokeBall: string;
          flabebeRed: string;
          flabebeYellow: string;
          flabebeOrange: string;
          flabebeBlue: string;
          flabebeWhite: string;
          furfrouHeart: string;
          furfrouStar: string;
          furfrouDiamond: string;
          furfrouDebutante: string;
          furfrouMatron: string;
          furfrouDandy: string;
          furfrouLaReine: string;
          furfrouKabuki: string;
          furfrouPharaoh: string;
          pumpkabooSmall: string;
          pumpkabooLarge: string;
          pumpkabooSuper: string;
          xerneasNeutral: string;
          xerneasActive: string;
          zygarde50: string;
          zygarde10: string;
          zygarde50Pc: string;
          zygarde10Pc: string;
          zygardeComplete: string;
          oricorioBaile: string;
          oricorioPompom: string;
          oricorioPau: string;
          oricorioSensu: string;
          rockruffOwnTempo: string;
          miniorRedMeteor: string;
          miniorOrangeMeteor: string;
          miniorYellowMeteor: string;
          miniorGreenMeteor: string;
          miniorBlueMeteor: string;
          miniorIndigoMeteor: string;
          miniorVioletMeteor: string;
          miniorRed: string;
          miniorOrange: string;
          miniorYellow: string;
          miniorGreen: string;
          miniorBlue: string;
          miniorIndigo: string;
          miniorViolet: string;
          mimikyuDisguised: string;
          mimikyuBusted: string;
          magearnaOriginal: string;
          marshadowZenith: string;
          sinisteaPhony: string;
          sinisteaAntique: string;
          eiscueNoIce: string;
          indeedeeMale: string;
          indeedeeFemale: string;
          morpekoFullBelly: string;
          zacianHeroOfManyBattles: string;
          zamazentaHeroOfManyBattles: string;
          zarudeDada: string;
          enamorusIncarnate: string;
          squawkabillyGreenPlumage: string;
          squawkabillyBluePlumage: string;
          squawkabillyYellowPlumage: string;
          squawkabillyWhitePlumage: string;
          tatsugiriCurly: string;
          tatsugiriDroopy: string;
          tatsugiriStretchy: string;
          gimmighoulChest: string;
          gimmighoulRoaming: string;
          koraidonApexBuild: string;
          koraidonLimitedBuild: string;
          koraidonSprintingBuild: string;
          koraidonSwimmingBuild: string;
          koraidonGlidingBuild: string;
          miraidonUltimateMode: string;
          miraidonLowPowerMode: string;
          miraidonDriveMode: string;
          miraidonAquaticMode: string;
          miraidonGlideMode: string;
          poltchageistCounterfeit: string;
          poltchageistArtisan: string;
          paldeaTaurosCombat: string;
          paldeaTaurosBlaze: string;
          paldeaTaurosAqua: string;
      };
      pokemonInfo: {
          Stat: {
              HP: string;
              HPshortened: string;
              ATK: string;
              ATKshortened: string;
              DEF: string;
              DEFshortened: string;
              SPATK: string;
              SPATKshortened: string;
              SPDEF: string;
              SPDEFshortened: string;
              SPD: string;
              SPDshortened: string;
              ACC: string;
              EVA: string;
              HPStat: string;
          };
          Type: {
              UNKNOWN: string;
              NORMAL: string;
              FIGHTING: string;
              FLYING: string;
              POISON: string;
              GROUND: string;
              ROCK: string;
              BUG: string;
              GHOST: string;
              STEEL: string;
              FIRE: string;
              WATER: string;
              GRASS: string;
              ELECTRIC: string;
              PSYCHIC: string;
              ICE: string;
              DRAGON: string;
              DARK: string;
              FAIRY: string;
              STELLAR: string;
          };
      };
      pokemonInfoContainer: {
          moveset: string;
          gender: string;
          ability: string;
          nature: string;
          form: string;
      };
      pokemonSummary: {
          pokemonInfo: string;
          status: string;
          powerAccuracyCategory: string;
          type: string;
          unknownTrainer: string;
          ot: string;
          nature: string;
          expPoints: string;
          nextLv: string;
          cancel: string;
          memoString: string;
          metFragment: {
              normal: string;
              apparently: string;
          };
          natureFragment: {
              Hardy: string;
              Lonely: string;
              Brave: string;
              Adamant: string;
              Naughty: string;
              Bold: string;
              Docile: string;
              Relaxed: string;
              Impish: string;
              Lax: string;
              Timid: string;
              Hasty: string;
              Serious: string;
              Jolly: string;
              Naive: string;
              Modest: string;
              Mild: string;
              Quiet: string;
              Bashful: string;
              Rash: string;
              Calm: string;
              Gentle: string;
              Sassy: string;
              Careful: string;
              Quirky: string;
          };
      };
      saveSlotSelectUiHandler: {
          overwriteData: string;
          loading: string;
          wave: string;
          lv: string;
          empty: string;
      };
      settings: {
          boy: string;
          girl: string;
          general: string;
          display: string;
          audio: string;
          gamepad: string;
          keyboard: string;
          gameSpeed: string;
          hpBarSpeed: string;
          expGainsSpeed: string;
          expPartyDisplay: string;
          skipSeenDialogues: string;
          battleStyle: string;
          enableRetries: string;
          hideIvs: string;
          tutorials: string;
          touchControls: string;
          vibrations: string;
          normal: string;
          fast: string;
          faster: string;
          skip: string;
          levelUpNotifications: string;
          on: string;
          off: string;
          switch: string;
          set: string;
          auto: string;
          disabled: string;
          language: string;
          change: string;
          uiTheme: string;
          default: string;
          legacy: string;
          windowType: string;
          moneyFormat: string;
          damageNumbers: string;
          simple: string;
          fancy: string;
          abbreviated: string;
          moveAnimations: string;
          showStatsOnLevelUp: string;
          candyUpgradeNotification: string;
          passivesOnly: string;
          candyUpgradeDisplay: string;
          icon: string;
          animation: string;
          moveInfo: string;
          showMovesetFlyout: string;
          showArenaFlyout: string;
          showTimeOfDayWidget: string;
          timeOfDayAnimation: string;
          bounce: string;
          timeOfDay_back: string;
          spriteSet: string;
          consistent: string;
          mixedAnimated: string;
          fusionPaletteSwaps: string;
          playerGender: string;
          typeHints: string;
          masterVolume: string;
          bgmVolume: string;
          fieldVolume: string;
          seVolume: string;
          uiVolume: string;
          musicPreference: string;
          mixed: string;
          gamepadPleasePlug: string;
          delete: string;
          keyboardPleasePress: string;
          reset: string;
          requireReload: string;
          action: string;
          back: string;
          pressToBind: string;
          pressButton: string;
          buttonUp: string;
          buttonDown: string;
          buttonLeft: string;
          buttonRight: string;
          buttonAction: string;
          buttonMenu: string;
          buttonSubmit: string;
          buttonCancel: string;
          buttonStats: string;
          buttonCycleForm: string;
          buttonCycleShiny: string;
          buttonCycleGender: string;
          buttonCycleAbility: string;
          buttonCycleNature: string;
          buttonCycleVariant: string;
          buttonSpeedUp: string;
          buttonSlowDown: string;
          alt: string;
          mute: string;
          controller: string;
          gamepadSupport: string;
          showBgmBar: string;
          moveTouchControls: string;
          shopOverlayOpacity: string;
          shopCursorTarget: string;
          rewards: string;
          reroll: string;
          shop: string;
          checkTeam: string;
      };
      splashMessages: {
          battlesWon: string;
          joinTheDiscord: string;
          infiniteLevels: string;
          everythingStacks: string;
          optionalSaveScumming: string;
          biomes: string;
          openSource: string;
          playWithSpeed: string;
          liveBugTesting: string;
          heavyInfluence: string;
          pokemonRiskAndPokemonRain: string;
          nowWithMoreSalt: string;
          infiniteFusionAtHome: string;
          brokenEggMoves: string;
          magnificent: string;
          mubstitute: string;
          thatsCrazy: string;
          oranceJuice: string;
          questionableBalancing: string;
          coolShaders: string;
          aiFree: string;
          suddenDifficultySpikes: string;
          basedOnAnUnfinishedFlashGame: string;
          moreAddictiveThanIntended: string;
          mostlyConsistentSeeds: string;
          achievementPointsDontDoAnything: string;
          youDoNotStartAtLevel: string;
          dontTalkAboutTheManaphyEggIncident: string;
          alsoTryPokengine: string;
          alsoTryEmeraldRogue: string;
          alsoTryRadicalRed: string;
          eeveeExpo: string;
          ynoproject: string;
          breedersInSpace: string;
      };
      starterSelectUiHandler: {
          confirmStartTeam: string;
          confirmExit: string;
          invalidParty: string;
          gen1: string;
          gen2: string;
          gen3: string;
          gen4: string;
          gen5: string;
          gen6: string;
          gen7: string;
          gen8: string;
          gen9: string;
          growthRate: string;
          ability: string;
          passive: string;
          nature: string;
          eggMoves: string;
          addToParty: string;
          removeFromParty: string;
          toggleIVs: string;
          manageMoves: string;
          manageNature: string;
          addToFavorites: string;
          removeFromFavorites: string;
          useCandies: string;
          selectNature: string;
          selectMoveSwapOut: string;
          selectMoveSwapWith: string;
          sameSpeciesEgg: string;
          unlockPassive: string;
          reduceCost: string;
          cycleShiny: string;
          cycleForm: string;
          cycleGender: string;
          cycleAbility: string;
          cycleNature: string;
          cycleVariant: string;
          goFilter: string;
          enablePassive: string;
          disablePassive: string;
          locked: string;
          disabled: string;
          uncaught: string;
      };
      statusEffect: {
          none: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          poison: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          toxic: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          paralysis: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          sleep: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          freeze: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          burn: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
      };
      terrain: {
          misty: string;
          mistyStartMessage: string;
          mistyClearMessage: string;
          mistyBlockMessage: string;
          electric: string;
          electricStartMessage: string;
          electricClearMessage: string;
          grassy: string;
          grassyStartMessage: string;
          grassyClearMessage: string;
          psychic: string;
          psychicStartMessage: string;
          psychicClearMessage: string;
          defaultBlockMessage: string;
      };
      titles: {
          elite_four: string;
          elite_four_female: string;
          gym_leader: string;
          gym_leader_female: string;
          gym_leader_double: string;
          champion: string;
          champion_female: string;
          champion_double: string;
          rival: string;
          professor: string;
          frontier_brain: string;
          rocket_boss: string;
          magma_boss: string;
          aqua_boss: string;
          galactic_boss: string;
          plasma_boss: string;
          flare_boss: string;
          aether_boss: string;
          skull_boss: string;
          macro_boss: string;
          rocket_admin: string;
          rocket_admin_female: string;
          magma_admin: string;
          magma_admin_female: string;
          aqua_admin: string;
          aqua_admin_female: string;
          galactic_commander: string;
          galactic_commander_female: string;
          plasma_sage: string;
          plasma_admin: string;
          flare_admin: string;
          flare_admin_female: string;
          aether_admin: string;
          skull_admin: string;
          macro_admin: string;
      };
      trainerClasses: {
          ace_trainer: string;
          ace_trainer_female: string;
          ace_duo: string;
          artist: string;
          artist_female: string;
          backers: string;
          backpacker: string;
          backpacker_female: string;
          backpackers: string;
          baker: string;
          battle_girl: string;
          beauty: string;
          beginners: string;
          biker: string;
          black_belt: string;
          breeder: string;
          breeder_female: string;
          breeders: string;
          clerk: string;
          clerk_female: string;
          colleagues: string;
          crush_kin: string;
          cyclist: string;
          cyclist_female: string;
          cyclists: string;
          dancer: string;
          dancer_female: string;
          depot_agent: string;
          doctor: string;
          doctor_female: string;
          firebreather: string;
          fisherman: string;
          fisherman_female: string;
          gentleman: string;
          guitarist: string;
          guitarist_female: string;
          harlequin: string;
          hiker: string;
          hooligans: string;
          hoopster: string;
          infielder: string;
          janitor: string;
          lady: string;
          lass: string;
          linebacker: string;
          maid: string;
          madame: string;
          medical_team: string;
          musician: string;
          hex_maniac: string;
          nurse: string;
          nursery_aide: string;
          officer: string;
          parasol_lady: string;
          pilot: string;
          pokéfan: string;
          pokéfan_female: string;
          pokéfan_family: string;
          preschooler: string;
          preschooler_female: string;
          preschoolers: string;
          psychic: string;
          psychic_female: string;
          psychics: string;
          pokémon_ranger: string;
          pokémon_ranger_female: string;
          pokémon_rangers: string;
          ranger: string;
          restaurant_staff: string;
          rich: string;
          rich_female: string;
          rich_boy: string;
          rich_couple: string;
          rich_kid: string;
          rich_kid_female: string;
          rich_kids: string;
          roughneck: string;
          scientist: string;
          scientist_female: string;
          scientists: string;
          smasher: string;
          snow_worker: string;
          snow_worker_female: string;
          sailor: string;
          striker: string;
          school_kid: string;
          school_kid_female: string;
          school_kids: string;
          swimmer: string;
          swimmer_female: string;
          swimmers: string;
          twins: string;
          veteran: string;
          veteran_female: string;
          veteran_duo: string;
          waiter: string;
          waitress: string;
          worker: string;
          worker_female: string;
          workers: string;
          youngster: string;
          rocket_grunt: string;
          rocket_grunt_female: string;
          rocket_grunts: string;
          magma_grunt: string;
          magma_grunt_female: string;
          magma_grunts: string;
          aqua_grunt: string;
          aqua_grunt_female: string;
          aqua_grunts: string;
          galactic_grunt: string;
          galactic_grunt_female: string;
          galactic_grunts: string;
          plasma_grunt: string;
          plasma_grunt_female: string;
          plasma_grunts: string;
          flare_grunt: string;
          flare_grunt_female: string;
          flare_grunts: string;
          aether_grunt: string;
          aether_grunt_female: string;
          aether_grunts: string;
          skull_grunt: string;
          skull_grunt_female: string;
          skull_grunts: string;
          macro_grunt: string;
          macro_grunt_female: string;
          macro_grunts: string;
      };
      trainerNames: {
          brock: string;
          misty: string;
          lt_surge: string;
          erika: string;
          janine: string;
          sabrina: string;
          blaine: string;
          giovanni: string;
          falkner: string;
          bugsy: string;
          whitney: string;
          morty: string;
          chuck: string;
          jasmine: string;
          pryce: string;
          clair: string;
          roxanne: string;
          brawly: string;
          wattson: string;
          flannery: string;
          norman: string;
          winona: string;
          tate: string;
          liza: string;
          juan: string;
          roark: string;
          gardenia: string;
          maylene: string;
          crasher_wake: string;
          fantina: string;
          byron: string;
          candice: string;
          volkner: string;
          cilan: string;
          chili: string;
          cress: string;
          cheren: string;
          lenora: string;
          roxie: string;
          burgh: string;
          elesa: string;
          clay: string;
          skyla: string;
          brycen: string;
          drayden: string;
          marlon: string;
          viola: string;
          grant: string;
          korrina: string;
          ramos: string;
          clemont: string;
          valerie: string;
          olympia: string;
          wulfric: string;
          milo: string;
          nessa: string;
          kabu: string;
          bea: string;
          allister: string;
          opal: string;
          bede: string;
          gordie: string;
          melony: string;
          piers: string;
          marnie: string;
          raihan: string;
          katy: string;
          brassius: string;
          iono: string;
          kofu: string;
          larry: string;
          ryme: string;
          tulip: string;
          grusha: string;
          lorelei: string;
          bruno: string;
          agatha: string;
          lance: string;
          will: string;
          koga: string;
          karen: string;
          sidney: string;
          phoebe: string;
          glacia: string;
          drake: string;
          aaron: string;
          bertha: string;
          flint: string;
          lucian: string;
          shauntal: string;
          marshal: string;
          grimsley: string;
          caitlin: string;
          malva: string;
          siebold: string;
          wikstrom: string;
          drasna: string;
          hala: string;
          molayne: string;
          olivia: string;
          acerola: string;
          kahili: string;
          rika: string;
          poppy: string;
          hassel: string;
          crispin: string;
          amarys: string;
          lacey: string;
          drayton: string;
          blue: string;
          red: string;
          steven: string;
          wallace: string;
          cynthia: string;
          alder: string;
          iris: string;
          diantha: string;
          hau: string;
          geeta: string;
          nemona: string;
          kieran: string;
          leon: string;
          rival: string;
          rival_female: string;
          archer: string;
          ariana: string;
          proton: string;
          petrel: string;
          tabitha: string;
          courtney: string;
          shelly: string;
          matt: string;
          mars: string;
          jupiter: string;
          saturn: string;
          zinzolin: string;
          rood: string;
          xerosic: string;
          bryony: string;
          faba: string;
          plumeria: string;
          oleana: string;
          maxie: string;
          archie: string;
          cyrus: string;
          ghetsis: string;
          lysandre: string;
          lusamine: string;
          guzma: string;
          rose: string;
          blue_red_double: string;
          red_blue_double: string;
          tate_liza_double: string;
          liza_tate_double: string;
          steven_wallace_double: string;
          wallace_steven_double: string;
          alder_iris_double: string;
          iris_alder_double: string;
          marnie_piers_double: string;
          piers_marnie_double: string;
      };
      tutorial: {
          intro: string;
          accessMenu: string;
          menu: string;
          starterSelect: string;
          pokerus: string;
          statChange: string;
          selectItem: string;
          eggGacha: string;
      };
      voucher: {
          vouchers: string;
          eggVoucher: string;
          eggVoucherPlus: string;
          eggVoucherPremium: string;
          eggVoucherGold: string;
          locked: string;
          defeatTrainer: string;
      };
      weather: {
          sunnyStartMessage: string;
          sunnyLapseMessage: string;
          sunnyClearMessage: string;
          rainStartMessage: string;
          rainLapseMessage: string;
          rainClearMessage: string;
          sandstormStartMessage: string;
          sandstormLapseMessage: string;
          sandstormClearMessage: string;
          sandstormDamageMessage: string;
          hailStartMessage: string;
          hailLapseMessage: string;
          hailClearMessage: string;
          hailDamageMessage: string;
          snowStartMessage: string;
          snowLapseMessage: string;
          snowClearMessage: string;
          fogStartMessage: string;
          fogLapseMessage: string;
          fogClearMessage: string;
          heavyRainStartMessage: string;
          heavyRainLapseMessage: string;
          heavyRainClearMessage: string;
          harshSunStartMessage: string;
          harshSunLapseMessage: string;
          harshSunClearMessage: string;
          strongWindsStartMessage: string;
          strongWindsLapseMessage: string;
          strongWindsEffectMessage: string;
          strongWindsClearMessage: string;
      };
      partyUiHandler: {
          SEND_OUT: string;
          SUMMARY: string;
          CANCEL: string;
          RELEASE: string;
          APPLY: string;
          TEACH: string;
          SPLICE: string;
          UNSPLICE: string;
          ACTIVATE: string;
          DEACTIVATE: string;
          TRANSFER: string;
          ALL: string;
          PASS_BATON: string;
          UNPAUSE_EVOLUTION: string;
          REVIVE: string;
          RENAME: string;
          choosePokemon: string;
          doWhatWithThisPokemon: string;
          noEnergy: string;
          hasEnergy: string;
          cantBeUsed: string;
          tooManyItems: string;
          anyEffect: string;
          unpausedEvolutions: string;
          unspliceConfirmation: string;
          wasReverted: string;
          releaseConfirmation: string;
          releaseInBattle: string;
          selectAMove: string;
          changeQuantity: string;
          selectAnotherPokemonToSplice: string;
          cancel: string;
          able: string;
          notAble: string;
          learned: string;
          goodbye: string;
          byebye: string;
          farewell: string;
          soLong: string;
          thisIsWhereWePart: string;
          illMissYou: string;
          illNeverForgetYou: string;
          untilWeMeetAgain: string;
          sayonara: string;
          smellYaLater: string;
      };
      modifierSelectUiHandler: {
          transfer: string;
          reroll: string;
          lockRarities: string;
          checkTeam: string;
          transferDesc: string;
          rerollDesc: string;
          lockRaritiesDesc: string;
          checkTeamDesc: string;
          rerollCost: string;
          itemCost: string;
      };
      moveTriggers: {
          hitWithRecoil: string;
          cutHpPowerUpMove: string;
          absorbedElectricity: string;
          switchedStatChanges: string;
          switchedTwoStatChanges: string;
          switchedStat: string;
          sharedGuard: string;
          sharedPower: string;
          goingAllOutForAttack: string;
          regainedHealth: string;
          keptGoingAndCrashed: string;
          fled: string;
          cannotBeSwitchedOut: string;
          swappedAbilitiesWithTarget: string;
          coinsScatteredEverywhere: string;
          attackedByItem: string;
          whippedUpAWhirlwind: string;
          flewUpHigh: string;
          tookInSunlight: string;
          dugAHole: string;
          loweredItsHead: string;
          isGlowing: string;
          bellChimed: string;
          foresawAnAttack: string;
          isTighteningFocus: string;
          hidUnderwater: string;
          soothingAromaWaftedThroughArea: string;
          sprangUp: string;
          choseDoomDesireAsDestiny: string;
          vanishedInstantly: string;
          tookTargetIntoSky: string;
          becameCloakedInFreezingLight: string;
          becameCloakedInFreezingAir: string;
          isChargingPower: string;
          burnedItselfOut: string;
          startedHeatingUpBeak: string;
          setUpShellTrap: string;
          isOverflowingWithSpacePower: string;
          usedUpAllElectricity: string;
          stoleItem: string;
          incineratedItem: string;
          knockedOffItem: string;
          tookMoveAttack: string;
          cutOwnHpAndMaximizedStat: string;
          copiedStatChanges: string;
          magnitudeMessage: string;
          tookAimAtTarget: string;
          transformedIntoType: string;
          copiedMove: string;
          sketchedMove: string;
          acquiredAbility: string;
          copiedTargetAbility: string;
          transformedIntoTarget: string;
          tryingToTakeFoeDown: string;
          addType: string;
          cannotUseMove: string;
          healHp: string;
          sacrificialFullRestore: string;
          invertStats: string;
          resetStats: string;
          statEliminated: string;
          faintCountdown: string;
          copyType: string;
          suppressAbilities: string;
          revivalBlessing: string;
          swapArenaTags: string;
          exposedMove: string;
          safeguard: string;
      };
      runHistory: {
          victory: string;
          defeatedWild: string;
          defeatedTrainer: string;
          defeatedTrainerDouble: string;
          defeatedRival: string;
          defeated: string;
          defeatedWild_female: string;
          defeatedTrainer_female: string;
          defeatedTrainerDouble_female: string;
          defeatedRival_female: string;
          defeated_female: string;
          luck: string;
          score: string;
          mode: string;
          challengeRules: string;
          challengeMonoGen1: string;
          challengeMonoGen2: string;
          challengeMonoGen3: string;
          challengeMonoGen4: string;
          challengeMonoGen5: string;
          challengeMonoGen6: string;
          challengeMonoGen7: string;
          challengeMonoGen8: string;
          challengeMonoGen9: string;
          playerItems: string;
          personalBest: string;
          SPDshortened: string;
          runInfo: string;
          money: string;
          runLength: string;
          viewHeldItems: string;
          hallofFameText: string;
          hallofFameText_female: string;
          viewHallOfFame: string;
          viewEndingSplash: string;
      };
  };
  
}

declare namespace PokeRogue.locales.pt_BR {
  export declare const ptBrConfig: {
      ability: {
          stench: {
              name: string;
              description: string;
          };
          drizzle: {
              name: string;
              description: string;
          };
          speedBoost: {
              name: string;
              description: string;
          };
          battleArmor: {
              name: string;
              description: string;
          };
          sturdy: {
              name: string;
              description: string;
          };
          damp: {
              name: string;
              description: string;
          };
          limber: {
              name: string;
              description: string;
          };
          sandVeil: {
              name: string;
              description: string;
          };
          static: {
              name: string;
              description: string;
          };
          voltAbsorb: {
              name: string;
              description: string;
          };
          waterAbsorb: {
              name: string;
              description: string;
          };
          oblivious: {
              name: string;
              description: string;
          };
          cloudNine: {
              name: string;
              description: string;
          };
          compoundEyes: {
              name: string;
              description: string;
          };
          insomnia: {
              name: string;
              description: string;
          };
          colorChange: {
              name: string;
              description: string;
          };
          immunity: {
              name: string;
              description: string;
          };
          flashFire: {
              name: string;
              description: string;
          };
          shieldDust: {
              name: string;
              description: string;
          };
          ownTempo: {
              name: string;
              description: string;
          };
          suctionCups: {
              name: string;
              description: string;
          };
          intimidate: {
              name: string;
              description: string;
          };
          shadowTag: {
              name: string;
              description: string;
          };
          roughSkin: {
              name: string;
              description: string;
          };
          wonderGuard: {
              name: string;
              description: string;
          };
          levitate: {
              name: string;
              description: string;
          };
          effectSpore: {
              name: string;
              description: string;
          };
          synchronize: {
              name: string;
              description: string;
          };
          clearBody: {
              name: string;
              description: string;
          };
          naturalCure: {
              name: string;
              description: string;
          };
          lightningRod: {
              name: string;
              description: string;
          };
          sereneGrace: {
              name: string;
              description: string;
          };
          swiftSwim: {
              name: string;
              description: string;
          };
          chlorophyll: {
              name: string;
              description: string;
          };
          illuminate: {
              name: string;
              description: string;
          };
          trace: {
              name: string;
              description: string;
          };
          hugePower: {
              name: string;
              description: string;
          };
          poisonPoint: {
              name: string;
              description: string;
          };
          innerFocus: {
              name: string;
              description: string;
          };
          magmaArmor: {
              name: string;
              description: string;
          };
          waterVeil: {
              name: string;
              description: string;
          };
          magnetPull: {
              name: string;
              description: string;
          };
          soundproof: {
              name: string;
              description: string;
          };
          rainDish: {
              name: string;
              description: string;
          };
          sandStream: {
              name: string;
              description: string;
          };
          pressure: {
              name: string;
              description: string;
          };
          thickFat: {
              name: string;
              description: string;
          };
          earlyBird: {
              name: string;
              description: string;
          };
          flameBody: {
              name: string;
              description: string;
          };
          runAway: {
              name: string;
              description: string;
          };
          keenEye: {
              name: string;
              description: string;
          };
          hyperCutter: {
              name: string;
              description: string;
          };
          pickup: {
              name: string;
              description: string;
          };
          truant: {
              name: string;
              description: string;
          };
          hustle: {
              name: string;
              description: string;
          };
          cuteCharm: {
              name: string;
              description: string;
          };
          plus: {
              name: string;
              description: string;
          };
          minus: {
              name: string;
              description: string;
          };
          forecast: {
              name: string;
              description: string;
          };
          stickyHold: {
              name: string;
              description: string;
          };
          shedSkin: {
              name: string;
              description: string;
          };
          guts: {
              name: string;
              description: string;
          };
          marvelScale: {
              name: string;
              description: string;
          };
          liquidOoze: {
              name: string;
              description: string;
          };
          overgrow: {
              name: string;
              description: string;
          };
          blaze: {
              name: string;
              description: string;
          };
          torrent: {
              name: string;
              description: string;
          };
          swarm: {
              name: string;
              description: string;
          };
          rockHead: {
              name: string;
              description: string;
          };
          drought: {
              name: string;
              description: string;
          };
          arenaTrap: {
              name: string;
              description: string;
          };
          vitalSpirit: {
              name: string;
              description: string;
          };
          whiteSmoke: {
              name: string;
              description: string;
          };
          purePower: {
              name: string;
              description: string;
          };
          shellArmor: {
              name: string;
              description: string;
          };
          airLock: {
              name: string;
              description: string;
          };
          tangledFeet: {
              name: string;
              description: string;
          };
          motorDrive: {
              name: string;
              description: string;
          };
          rivalry: {
              name: string;
              description: string;
          };
          steadfast: {
              name: string;
              description: string;
          };
          snowCloak: {
              name: string;
              description: string;
          };
          gluttony: {
              name: string;
              description: string;
          };
          angerPoint: {
              name: string;
              description: string;
          };
          unburden: {
              name: string;
              description: string;
          };
          heatproof: {
              name: string;
              description: string;
          };
          simple: {
              name: string;
              description: string;
          };
          drySkin: {
              name: string;
              description: string;
          };
          download: {
              name: string;
              description: string;
          };
          ironFist: {
              name: string;
              description: string;
          };
          poisonHeal: {
              name: string;
              description: string;
          };
          adaptability: {
              name: string;
              description: string;
          };
          skillLink: {
              name: string;
              description: string;
          };
          hydration: {
              name: string;
              description: string;
          };
          solarPower: {
              name: string;
              description: string;
          };
          quickFeet: {
              name: string;
              description: string;
          };
          normalize: {
              name: string;
              description: string;
          };
          sniper: {
              name: string;
              description: string;
          };
          magicGuard: {
              name: string;
              description: string;
          };
          noGuard: {
              name: string;
              description: string;
          };
          stall: {
              name: string;
              description: string;
          };
          technician: {
              name: string;
              description: string;
          };
          leafGuard: {
              name: string;
              description: string;
          };
          klutz: {
              name: string;
              description: string;
          };
          moldBreaker: {
              name: string;
              description: string;
          };
          superLuck: {
              name: string;
              description: string;
          };
          aftermath: {
              name: string;
              description: string;
          };
          anticipation: {
              name: string;
              description: string;
          };
          forewarn: {
              name: string;
              description: string;
          };
          unaware: {
              name: string;
              description: string;
          };
          tintedLens: {
              name: string;
              description: string;
          };
          filter: {
              name: string;
              description: string;
          };
          slowStart: {
              name: string;
              description: string;
          };
          scrappy: {
              name: string;
              description: string;
          };
          stormDrain: {
              name: string;
              description: string;
          };
          iceBody: {
              name: string;
              description: string;
          };
          solidRock: {
              name: string;
              description: string;
          };
          snowWarning: {
              name: string;
              description: string;
          };
          honeyGather: {
              name: string;
              description: string;
          };
          frisk: {
              name: string;
              description: string;
          };
          reckless: {
              name: string;
              description: string;
          };
          multitype: {
              name: string;
              description: string;
          };
          flowerGift: {
              name: string;
              description: string;
          };
          badDreams: {
              name: string;
              description: string;
          };
          pickpocket: {
              name: string;
              description: string;
          };
          sheerForce: {
              name: string;
              description: string;
          };
          contrary: {
              name: string;
              description: string;
          };
          unnerve: {
              name: string;
              description: string;
          };
          defiant: {
              name: string;
              description: string;
          };
          defeatist: {
              name: string;
              description: string;
          };
          cursedBody: {
              name: string;
              description: string;
          };
          healer: {
              name: string;
              description: string;
          };
          friendGuard: {
              name: string;
              description: string;
          };
          weakArmor: {
              name: string;
              description: string;
          };
          heavyMetal: {
              name: string;
              description: string;
          };
          lightMetal: {
              name: string;
              description: string;
          };
          multiscale: {
              name: string;
              description: string;
          };
          toxicBoost: {
              name: string;
              description: string;
          };
          flareBoost: {
              name: string;
              description: string;
          };
          harvest: {
              name: string;
              description: string;
          };
          telepathy: {
              name: string;
              description: string;
          };
          moody: {
              name: string;
              description: string;
          };
          overcoat: {
              name: string;
              description: string;
          };
          poisonTouch: {
              name: string;
              description: string;
          };
          regenerator: {
              name: string;
              description: string;
          };
          bigPecks: {
              name: string;
              description: string;
          };
          sandRush: {
              name: string;
              description: string;
          };
          wonderSkin: {
              name: string;
              description: string;
          };
          analytic: {
              name: string;
              description: string;
          };
          illusion: {
              name: string;
              description: string;
          };
          imposter: {
              name: string;
              description: string;
          };
          infiltrator: {
              name: string;
              description: string;
          };
          mummy: {
              name: string;
              description: string;
          };
          moxie: {
              name: string;
              description: string;
          };
          justified: {
              name: string;
              description: string;
          };
          rattled: {
              name: string;
              description: string;
          };
          magicBounce: {
              name: string;
              description: string;
          };
          sapSipper: {
              name: string;
              description: string;
          };
          prankster: {
              name: string;
              description: string;
          };
          sandForce: {
              name: string;
              description: string;
          };
          ironBarbs: {
              name: string;
              description: string;
          };
          zenMode: {
              name: string;
              description: string;
          };
          victoryStar: {
              name: string;
              description: string;
          };
          turboblaze: {
              name: string;
              description: string;
          };
          teravolt: {
              name: string;
              description: string;
          };
          aromaVeil: {
              name: string;
              description: string;
          };
          flowerVeil: {
              name: string;
              description: string;
          };
          cheekPouch: {
              name: string;
              description: string;
          };
          protean: {
              name: string;
              description: string;
          };
          furCoat: {
              name: string;
              description: string;
          };
          magician: {
              name: string;
              description: string;
          };
          bulletproof: {
              name: string;
              description: string;
          };
          competitive: {
              name: string;
              description: string;
          };
          strongJaw: {
              name: string;
              description: string;
          };
          refrigerate: {
              name: string;
              description: string;
          };
          sweetVeil: {
              name: string;
              description: string;
          };
          stanceChange: {
              name: string;
              description: string;
          };
          galeWings: {
              name: string;
              description: string;
          };
          megaLauncher: {
              name: string;
              description: string;
          };
          grassPelt: {
              name: string;
              description: string;
          };
          symbiosis: {
              name: string;
              description: string;
          };
          toughClaws: {
              name: string;
              description: string;
          };
          pixilate: {
              name: string;
              description: string;
          };
          gooey: {
              name: string;
              description: string;
          };
          aerilate: {
              name: string;
              description: string;
          };
          parentalBond: {
              name: string;
              description: string;
          };
          darkAura: {
              name: string;
              description: string;
          };
          fairyAura: {
              name: string;
              description: string;
          };
          auraBreak: {
              name: string;
              description: string;
          };
          primordialSea: {
              name: string;
              description: string;
          };
          desolateLand: {
              name: string;
              description: string;
          };
          deltaStream: {
              name: string;
              description: string;
          };
          stamina: {
              name: string;
              description: string;
          };
          wimpOut: {
              name: string;
              description: string;
          };
          emergencyExit: {
              name: string;
              description: string;
          };
          waterCompaction: {
              name: string;
              description: string;
          };
          merciless: {
              name: string;
              description: string;
          };
          shieldsDown: {
              name: string;
              description: string;
          };
          stakeout: {
              name: string;
              description: string;
          };
          waterBubble: {
              name: string;
              description: string;
          };
          steelworker: {
              name: string;
              description: string;
          };
          berserk: {
              name: string;
              description: string;
          };
          slushRush: {
              name: string;
              description: string;
          };
          longReach: {
              name: string;
              description: string;
          };
          liquidVoice: {
              name: string;
              description: string;
          };
          triage: {
              name: string;
              description: string;
          };
          galvanize: {
              name: string;
              description: string;
          };
          surgeSurfer: {
              name: string;
              description: string;
          };
          schooling: {
              name: string;
              description: string;
          };
          disguise: {
              name: string;
              description: string;
          };
          battleBond: {
              name: string;
              description: string;
          };
          powerConstruct: {
              name: string;
              description: string;
          };
          corrosion: {
              name: string;
              description: string;
          };
          comatose: {
              name: string;
              description: string;
          };
          queenlyMajesty: {
              name: string;
              description: string;
          };
          innardsOut: {
              name: string;
              description: string;
          };
          dancer: {
              name: string;
              description: string;
          };
          battery: {
              name: string;
              description: string;
          };
          fluffy: {
              name: string;
              description: string;
          };
          dazzling: {
              name: string;
              description: string;
          };
          soulHeart: {
              name: string;
              description: string;
          };
          tanglingHair: {
              name: string;
              description: string;
          };
          receiver: {
              name: string;
              description: string;
          };
          powerOfAlchemy: {
              name: string;
              description: string;
          };
          beastBoost: {
              name: string;
              description: string;
          };
          rksSystem: {
              name: string;
              description: string;
          };
          electricSurge: {
              name: string;
              description: string;
          };
          psychicSurge: {
              name: string;
              description: string;
          };
          mistySurge: {
              name: string;
              description: string;
          };
          grassySurge: {
              name: string;
              description: string;
          };
          fullMetalBody: {
              name: string;
              description: string;
          };
          shadowShield: {
              name: string;
              description: string;
          };
          prismArmor: {
              name: string;
              description: string;
          };
          neuroforce: {
              name: string;
              description: string;
          };
          intrepidSword: {
              name: string;
              description: string;
          };
          dauntlessShield: {
              name: string;
              description: string;
          };
          libero: {
              name: string;
              description: string;
          };
          ballFetch: {
              name: string;
              description: string;
          };
          cottonDown: {
              name: string;
              description: string;
          };
          propellerTail: {
              name: string;
              description: string;
          };
          mirrorArmor: {
              name: string;
              description: string;
          };
          gulpMissile: {
              name: string;
              description: string;
          };
          stalwart: {
              name: string;
              description: string;
          };
          steamEngine: {
              name: string;
              description: string;
          };
          punkRock: {
              name: string;
              description: string;
          };
          sandSpit: {
              name: string;
              description: string;
          };
          iceScales: {
              name: string;
              description: string;
          };
          ripen: {
              name: string;
              description: string;
          };
          iceFace: {
              name: string;
              description: string;
          };
          powerSpot: {
              name: string;
              description: string;
          };
          mimicry: {
              name: string;
              description: string;
          };
          screenCleaner: {
              name: string;
              description: string;
          };
          steelySpirit: {
              name: string;
              description: string;
          };
          perishBody: {
              name: string;
              description: string;
          };
          wanderingSpirit: {
              name: string;
              description: string;
          };
          gorillaTactics: {
              name: string;
              description: string;
          };
          neutralizingGas: {
              name: string;
              description: string;
          };
          pastelVeil: {
              name: string;
              description: string;
          };
          hungerSwitch: {
              name: string;
              description: string;
          };
          quickDraw: {
              name: string;
              description: string;
          };
          unseenFist: {
              name: string;
              description: string;
          };
          curiousMedicine: {
              name: string;
              description: string;
          };
          transistor: {
              name: string;
              description: string;
          };
          dragonsMaw: {
              name: string;
              description: string;
          };
          chillingNeigh: {
              name: string;
              description: string;
          };
          grimNeigh: {
              name: string;
              description: string;
          };
          asOneGlastrier: {
              name: string;
              description: string;
          };
          asOneSpectrier: {
              name: string;
              description: string;
          };
          lingeringAroma: {
              name: string;
              description: string;
          };
          seedSower: {
              name: string;
              description: string;
          };
          thermalExchange: {
              name: string;
              description: string;
          };
          angerShell: {
              name: string;
              description: string;
          };
          purifyingSalt: {
              name: string;
              description: string;
          };
          wellBakedBody: {
              name: string;
              description: string;
          };
          windRider: {
              name: string;
              description: string;
          };
          guardDog: {
              name: string;
              description: string;
          };
          rockyPayload: {
              name: string;
              description: string;
          };
          windPower: {
              name: string;
              description: string;
          };
          zeroToHero: {
              name: string;
              description: string;
          };
          commander: {
              name: string;
              description: string;
          };
          electromorphosis: {
              name: string;
              description: string;
          };
          protosynthesis: {
              name: string;
              description: string;
          };
          quarkDrive: {
              name: string;
              description: string;
          };
          goodAsGold: {
              name: string;
              description: string;
          };
          vesselOfRuin: {
              name: string;
              description: string;
          };
          swordOfRuin: {
              name: string;
              description: string;
          };
          tabletsOfRuin: {
              name: string;
              description: string;
          };
          beadsOfRuin: {
              name: string;
              description: string;
          };
          orichalcumPulse: {
              name: string;
              description: string;
          };
          hadronEngine: {
              name: string;
              description: string;
          };
          opportunist: {
              name: string;
              description: string;
          };
          cudChew: {
              name: string;
              description: string;
          };
          sharpness: {
              name: string;
              description: string;
          };
          supremeOverlord: {
              name: string;
              description: string;
          };
          costar: {
              name: string;
              description: string;
          };
          toxicDebris: {
              name: string;
              description: string;
          };
          armorTail: {
              name: string;
              description: string;
          };
          earthEater: {
              name: string;
              description: string;
          };
          myceliumMight: {
              name: string;
              description: string;
          };
          mindsEye: {
              name: string;
              description: string;
          };
          supersweetSyrup: {
              name: string;
              description: string;
          };
          hospitality: {
              name: string;
              description: string;
          };
          toxicChain: {
              name: string;
              description: string;
          };
          embodyAspectTeal: {
              name: string;
              description: string;
          };
          embodyAspectWellspring: {
              name: string;
              description: string;
          };
          embodyAspectHearthflame: {
              name: string;
              description: string;
          };
          embodyAspectCornerstone: {
              name: string;
              description: string;
          };
          teraShift: {
              name: string;
              description: string;
          };
          teraShell: {
              name: string;
              description: string;
          };
          teraformZero: {
              name: string;
              description: string;
          };
          poisonPuppeteer: {
              name: string;
              description: string;
          };
      };
      abilityTriggers: {
          blockRecoilDamage: string;
          badDreams: string;
          costar: string;
          iceFaceAvoidedDamage: string;
          perishBody: string;
          poisonHeal: string;
          trace: string;
          windPowerCharged: string;
          quickDraw: string;
          disguiseAvoidedDamage: string;
          blockItemTheft: string;
          typeImmunityHeal: string;
          nonSuperEffectiveImmunity: string;
          moveImmunity: string;
          reverseDrain: string;
          postDefendTypeChange: string;
          postDefendContactDamage: string;
          postDefendAbilitySwap: string;
          postDefendAbilityGive: string;
          postDefendMoveDisable: string;
          pokemonTypeChange: string;
          postAttackStealHeldItem: string;
          postDefendStealHeldItem: string;
          copyFaintedAllyAbility: string;
          intimidateImmunity: string;
          postSummonAllyHeal: string;
          postSummonClearAllyStats: string;
          postSummonTransform: string;
          protectStat: string;
          statusEffectImmunityWithName: string;
          statusEffectImmunity: string;
          battlerTagImmunity: string;
          forewarn: string;
          frisk: string;
          postWeatherLapseHeal: string;
          postWeatherLapseDamage: string;
          postTurnLootCreateEatenBerry: string;
          postTurnHeal: string;
          fetchBall: string;
          healFromBerryUse: string;
          arenaTrap: string;
          postBattleLoot: string;
          postFaintContactDamage: string;
          postFaintHpDamage: string;
          postSummonPressure: string;
          weatherEffectDisappeared: string;
          postSummonMoldBreaker: string;
          postSummonAnticipation: string;
          postSummonTurboblaze: string;
          postSummonTeravolt: string;
          postSummonDarkAura: string;
          postSummonFairyAura: string;
          postSummonNeutralizingGas: string;
          postSummonAsOneGlastrier: string;
          postSummonAsOneSpectrier: string;
          postSummonVesselOfRuin: string;
          postSummonSwordOfRuin: string;
          postSummonTabletsOfRuin: string;
          postSummonBeadsOfRuin: string;
          preventBerryUse: string;
      };
      arenaFlyout: {
          activeBattleEffects: string;
          player: string;
          neutral: string;
          enemy: string;
          sunny: string;
          rain: string;
          sandstorm: string;
          hail: string;
          snow: string;
          fog: string;
          heavyRain: string;
          harshSun: string;
          strongWinds: string;
          misty: string;
          electric: string;
          grassy: string;
          psychic: string;
          mudSport: string;
          waterSport: string;
          spikes: string;
          toxicSpikes: string;
          mist: string;
          futureSight: string;
          doomDesire: string;
          wish: string;
          stealthRock: string;
          stickyWeb: string;
          trickRoom: string;
          gravity: string;
          reflect: string;
          lightScreen: string;
          auroraVeil: string;
          quickGuard: string;
          wideGuard: string;
          matBlock: string;
          craftyShield: string;
          tailwind: string;
          happyHour: string;
          safeguard: string;
      };
      arenaTag: {
          yourTeam: string;
          opposingTeam: string;
          arenaOnRemove: string;
          arenaOnRemovePlayer: string;
          arenaOnRemoveEnemy: string;
          mistOnAdd: string;
          mistApply: string;
          reflectOnAdd: string;
          reflectOnAddPlayer: string;
          reflectOnAddEnemy: string;
          lightScreenOnAdd: string;
          lightScreenOnAddPlayer: string;
          lightScreenOnAddEnemy: string;
          auroraVeilOnAdd: string;
          auroraVeilOnAddPlayer: string;
          auroraVeilOnAddEnemy: string;
          conditionalProtectOnAdd: string;
          conditionalProtectOnAddPlayer: string;
          conditionalProtectOnAddEnemy: string;
          conditionalProtectApply: string;
          matBlockOnAdd: string;
          noCritOnAddPlayer: string;
          noCritOnAddEnemy: string;
          noCritOnRemove: string;
          wishTagOnAdd: string;
          mudSportOnAdd: string;
          mudSportOnRemove: string;
          waterSportOnAdd: string;
          waterSportOnRemove: string;
          spikesOnAdd: string;
          spikesActivateTrap: string;
          toxicSpikesOnAdd: string;
          toxicSpikesActivateTrapPoison: string;
          stealthRockOnAdd: string;
          stealthRockActivateTrap: string;
          stickyWebOnAdd: string;
          stickyWebActivateTrap: string;
          trickRoomOnAdd: string;
          trickRoomOnRemove: string;
          gravityOnAdd: string;
          gravityOnRemove: string;
          tailwindOnAdd: string;
          tailwindOnAddPlayer: string;
          tailwindOnAddEnemy: string;
          tailwindOnRemove: string;
          tailwindOnRemovePlayer: string;
          tailwindOnRemoveEnemy: string;
          happyHourOnAdd: string;
          happyHourOnRemove: string;
          safeguardOnAdd: string;
          safeguardOnAddPlayer: string;
          safeguardOnAddEnemy: string;
          safeguardOnRemove: string;
          safeguardOnRemovePlayer: string;
          safeguardOnRemoveEnemy: string;
      };
      battle: {
          bossAppeared: string;
          trainerAppeared: string;
          trainerAppearedDouble: string;
          singleWildAppeared: string;
          trainerSendOut: string;
          multiWildAppeared: string;
          playerComeBack: string;
          trainerComeBack: string;
          playerGo: string;
          trainerGo: string;
          switchQuestion: string;
          trainerDefeated: string;
          moneyWon: string;
          moneyPickedUp: string;
          pokemonCaught: string;
          addedAsAStarter: string;
          partyFull: string;
          pokemon: string;
          sendOutPokemon: string;
          hitResultCriticalHit: string;
          hitResultSuperEffective: string;
          hitResultNotVeryEffective: string;
          hitResultNoEffect: string;
          hitResultImmune: string;
          hitResultOneHitKO: string;
          attackFailed: string;
          attackMissed: string;
          attackHitsCount: string;
          rewardGain: string;
          expGain: string;
          levelUp: string;
          learnMove: string;
          learnMovePrompt: string;
          learnMoveLimitReached: string;
          learnMoveReplaceQuestion: string;
          learnMoveStopTeaching: string;
          learnMoveNotLearned: string;
          learnMoveForgetQuestion: string;
          learnMoveForgetSuccess: string;
          countdownPoof: string;
          learnMoveAnd: string;
          levelCapUp: string;
          moveNotImplemented: string;
          moveNoPP: string;
          moveDisabled: string;
          noPokeballForce: string;
          noPokeballTrainer: string;
          noPokeballMulti: string;
          noPokeballStrong: string;
          noEscapeForce: string;
          noEscapeTrainer: string;
          noEscapePokemon: string;
          runAwaySuccess: string;
          runAwayCannotEscape: string;
          escapeVerbSwitch: string;
          escapeVerbFlee: string;
          notDisabled: string;
          turnEndHpRestore: string;
          hpIsFull: string;
          skipItemQuestion: string;
          itemStackFull: string;
          eggHatching: string;
          ivScannerUseQuestion: string;
          wildPokemonWithAffix: string;
          foePokemonWithAffix: string;
          useMove: string;
          drainMessage: string;
          regainHealth: string;
          stealEatBerry: string;
          ppHealBerry: string;
          hpHealBerry: string;
          fainted: string;
          statsAnd: string;
          stats: string;
          statRose_one: string;
          statRose_other: string;
          statSharplyRose_one: string;
          statSharplyRose_other: string;
          statRoseDrastically_one: string;
          statRoseDrastically_other: string;
          statWontGoAnyHigher_one: string;
          statWontGoAnyHigher_other: string;
          statFell_one: string;
          statFell_other: string;
          statHarshlyFell_one: string;
          statHarshlyFell_other: string;
          statSeverelyFell_one: string;
          statSeverelyFell_other: string;
          statWontGoAnyLower_one: string;
          statWontGoAnyLower_other: string;
          transformedIntoType: string;
          ppReduced: string;
          retryBattle: string;
          unlockedSomething: string;
          congratulations: string;
          beatModeFirstTime: string;
      };
      battleScene: {
          moneyOwned: string;
      };
      battleInfo: {
          generation: string;
      };
      battleMessageUiHandler: {
          ivBest: string;
          ivFantastic: string;
          ivVeryGood: string;
          ivPrettyGood: string;
          ivDecent: string;
          ivNoGood: string;
      };
      battlePokemonForm: {
          mega: string;
          "mega-x": string;
          "mega-y": string;
          primal: string;
          gigantamax: string;
          eternamax: string;
          megaChange: string;
          gigantamaxChange: string;
          eternamaxChange: string;
          revertChange: string;
          formChange: string;
          disguiseChange: string;
      };
      battlerTags: {
          trappedDesc: string;
          flinchedDesc: string;
          confusedDesc: string;
          infatuatedDesc: string;
          seedDesc: string;
          nightmareDesc: string;
          ingrainDesc: string;
          drowsyDesc: string;
          rechargingLapse: string;
          trappedOnAdd: string;
          trappedOnRemove: string;
          flinchedLapse: string;
          confusedOnAdd: string;
          confusedOnRemove: string;
          confusedOnOverlap: string;
          confusedLapse: string;
          confusedLapseHurtItself: string;
          destinyBondLapseIsBoss: string;
          destinyBondLapse: string;
          infatuatedOnAdd: string;
          infatuatedOnOverlap: string;
          infatuatedLapse: string;
          infatuatedLapseImmobilize: string;
          infatuatedOnRemove: string;
          seededOnAdd: string;
          seededLapse: string;
          seededLapseShed: string;
          nightmareOnAdd: string;
          nightmareOnOverlap: string;
          nightmareLapse: string;
          encoreOnAdd: string;
          encoreOnRemove: string;
          helpingHandOnAdd: string;
          ingrainLapse: string;
          ingrainOnTrap: string;
          aquaRingOnAdd: string;
          aquaRingLapse: string;
          drowsyOnAdd: string;
          damagingTrapLapse: string;
          bindOnTrap: string;
          wrapOnTrap: string;
          vortexOnTrap: string;
          clampOnTrap: string;
          sandTombOnTrap: string;
          magmaStormOnTrap: string;
          snapTrapOnTrap: string;
          thunderCageOnTrap: string;
          infestationOnTrap: string;
          protectedOnAdd: string;
          protectedLapse: string;
          enduringOnAdd: string;
          enduringLapse: string;
          sturdyLapse: string;
          perishSongLapse: string;
          centerOfAttentionOnAdd: string;
          truantLapse: string;
          slowStartOnAdd: string;
          slowStartOnRemove: string;
          highestStatBoostOnAdd: string;
          highestStatBoostOnRemove: string;
          magnetRisenOnAdd: string;
          magnetRisenOnRemove: string;
          critBoostOnAdd: string;
          critBoostOnRemove: string;
          saltCuredOnAdd: string;
          saltCuredLapse: string;
          cursedOnAdd: string;
          cursedLapse: string;
          stockpilingOnAdd: string;
      };
      berry: {
          SITRUS: {
              name: string;
              effect: string;
          };
          LUM: {
              name: string;
              effect: string;
          };
          ENIGMA: {
              name: string;
              effect: string;
          };
          LIECHI: {
              name: string;
              effect: string;
          };
          GANLON: {
              name: string;
              effect: string;
          };
          PETAYA: {
              name: string;
              effect: string;
          };
          APICOT: {
              name: string;
              effect: string;
          };
          SALAC: {
              name: string;
              effect: string;
          };
          LANSAT: {
              name: string;
              effect: string;
          };
          STARF: {
              name: string;
              effect: string;
          };
          LEPPA: {
              name: string;
              effect: string;
          };
      };
      bgmName: {
          music: string;
          missing_entries: string;
          battle_kanto_champion: string;
          battle_johto_champion: string;
          battle_hoenn_champion_g5: string;
          battle_hoenn_champion_g6: string;
          battle_sinnoh_champion: string;
          battle_champion_alder: string;
          battle_champion_iris: string;
          battle_kalos_champion: string;
          battle_alola_champion: string;
          battle_galar_champion: string;
          battle_champion_geeta: string;
          battle_champion_nemona: string;
          battle_champion_kieran: string;
          battle_hoenn_elite: string;
          battle_unova_elite: string;
          battle_kalos_elite: string;
          battle_alola_elite: string;
          battle_galar_elite: string;
          battle_paldea_elite: string;
          battle_bb_elite: string;
          battle_final_encounter: string;
          battle_final: string;
          battle_kanto_gym: string;
          battle_johto_gym: string;
          battle_hoenn_gym: string;
          battle_sinnoh_gym: string;
          battle_unova_gym: string;
          battle_kalos_gym: string;
          battle_galar_gym: string;
          battle_paldea_gym: string;
          battle_legendary_kanto: string;
          battle_legendary_raikou: string;
          battle_legendary_entei: string;
          battle_legendary_suicune: string;
          battle_legendary_lugia: string;
          battle_legendary_ho_oh: string;
          battle_legendary_regis_g5: string;
          battle_legendary_regis_g6: string;
          battle_legendary_gro_kyo: string;
          battle_legendary_rayquaza: string;
          battle_legendary_deoxys: string;
          battle_legendary_lake_trio: string;
          battle_legendary_sinnoh: string;
          battle_legendary_dia_pal: string;
          battle_legendary_origin_forme: string;
          battle_legendary_giratina: string;
          battle_legendary_arceus: string;
          battle_legendary_unova: string;
          battle_legendary_kyurem: string;
          battle_legendary_res_zek: string;
          battle_legendary_xern_yvel: string;
          battle_legendary_tapu: string;
          battle_legendary_sol_lun: string;
          battle_legendary_ub: string;
          battle_legendary_dusk_dawn: string;
          battle_legendary_ultra_nec: string;
          battle_legendary_zac_zam: string;
          battle_legendary_glas_spec: string;
          battle_legendary_calyrex: string;
          battle_legendary_riders: string;
          battle_legendary_birds_galar: string;
          battle_legendary_ruinous: string;
          battle_legendary_kor_mir: string;
          battle_legendary_loyal_three: string;
          battle_legendary_ogerpon: string;
          battle_legendary_terapagos: string;
          battle_legendary_pecharunt: string;
          battle_rival: string;
          battle_rival_2: string;
          battle_rival_3: string;
          battle_trainer: string;
          battle_wild: string;
          battle_wild_strong: string;
          end_summit: string;
          battle_rocket_grunt: string;
          battle_aqua_magma_grunt: string;
          battle_galactic_grunt: string;
          battle_plasma_grunt: string;
          battle_flare_grunt: string;
          battle_aether_grunt: string;
          battle_skull_grunt: string;
          battle_macro_grunt: string;
          battle_galactic_admin: string;
          battle_skull_admin: string;
          battle_oleana: string;
          battle_rocket_boss: string;
          battle_aqua_magma_boss: string;
          battle_galactic_boss: string;
          battle_plasma_boss: string;
          battle_flare_boss: string;
          battle_aether_boss: string;
          battle_skull_boss: string;
          battle_macro_boss: string;
          abyss: string;
          badlands: string;
          beach: string;
          cave: string;
          construction_site: string;
          desert: string;
          dojo: string;
          end: string;
          factory: string;
          fairy_cave: string;
          forest: string;
          grass: string;
          graveyard: string;
          ice_cave: string;
          island: string;
          jungle: string;
          laboratory: string;
          lake: string;
          meadow: string;
          metropolis: string;
          mountain: string;
          plains: string;
          power_plant: string;
          ruins: string;
          sea: string;
          seabed: string;
          slum: string;
          snowy_forest: string;
          space: string;
          swamp: string;
          tall_grass: string;
          temple: string;
          town: string;
          volcano: string;
          wasteland: string;
          encounter_ace_trainer: string;
          encounter_backpacker: string;
          encounter_clerk: string;
          encounter_cyclist: string;
          encounter_lass: string;
          encounter_parasol_lady: string;
          encounter_pokefan: string;
          encounter_psychic: string;
          encounter_rich: string;
          encounter_rival: string;
          encounter_roughneck: string;
          encounter_scientist: string;
          encounter_twins: string;
          encounter_youngster: string;
          heal: string;
          menu: string;
          title: string;
      };
      biome: {
          unknownLocation: string;
          TOWN: string;
          PLAINS: string;
          GRASS: string;
          TALL_GRASS: string;
          METROPOLIS: string;
          FOREST: string;
          SEA: string;
          SWAMP: string;
          BEACH: string;
          LAKE: string;
          SEABED: string;
          MOUNTAIN: string;
          BADLANDS: string;
          CAVE: string;
          DESERT: string;
          ICE_CAVE: string;
          MEADOW: string;
          POWER_PLANT: string;
          VOLCANO: string;
          GRAVEYARD: string;
          DOJO: string;
          FACTORY: string;
          RUINS: string;
          WASTELAND: string;
          ABYSS: string;
          SPACE: string;
          CONSTRUCTION_SITE: string;
          JUNGLE: string;
          FAIRY_CAVE: string;
          TEMPLE: string;
          SLUM: string;
          SNOWY_FOREST: string;
          ISLAND: string;
          LABORATORY: string;
          END: string;
      };
      challenges: {
          title: string;
          illegalEvolution: string;
          singleGeneration: {
              name: string;
              desc: string;
              desc_default: string;
              gen_1: string;
              gen_2: string;
              gen_3: string;
              gen_4: string;
              gen_5: string;
              gen_6: string;
              gen_7: string;
              gen_8: string;
              gen_9: string;
          };
          singleType: {
              name: string;
              desc: string;
              desc_default: string;
          };
          freshStart: {
              name: string;
              desc: string;
              "value.0": string;
              "value.1": string;
          };
          inverseBattle: {
              name: string;
              shortName: string;
              desc: string;
              "value.0": string;
              "value.1": string;
          };
      };
      commandUiHandler: {
          fight: string;
          ball: string;
          pokemon: string;
          run: string;
          actionMessage: string;
      };
      common: {
          start: string;
          luckIndicator: string;
          shinyOnHover: string;
          commonShiny: string;
          rareShiny: string;
          epicShiny: string;
      };
      achv: {
          Achievements: {
              name: string;
          };
          Locked: {
              name: string;
          };
          MoneyAchv: {
              description: string;
          };
          "10K_MONEY": {
              name: string;
          };
          "100K_MONEY": {
              name: string;
          };
          "1M_MONEY": {
              name: string;
          };
          "10M_MONEY": {
              name: string;
          };
          DamageAchv: {
              description: string;
          };
          "250_DMG": {
              name: string;
          };
          "1000_DMG": {
              name: string;
          };
          "2500_DMG": {
              name: string;
          };
          "10000_DMG": {
              name: string;
          };
          HealAchv: {
              description: string;
          };
          "250_HEAL": {
              name: string;
          };
          "1000_HEAL": {
              name: string;
              name_female: string;
          };
          "2500_HEAL": {
              name: string;
              name_female: string;
          };
          "10000_HEAL": {
              name: string;
              name_female: string;
          };
          LevelAchv: {
              description: string;
          };
          LV_100: {
              name: string;
          };
          LV_250: {
              name: string;
              name_female: string;
          };
          LV_1000: {
              name: string;
          };
          RibbonAchv: {
              description: string;
          };
          "10_RIBBONS": {
              name: string;
          };
          "25_RIBBONS": {
              name: string;
          };
          "50_RIBBONS": {
              name: string;
          };
          "75_RIBBONS": {
              name: string;
          };
          "100_RIBBONS": {
              name: string;
          };
          TRANSFER_MAX_STAT_STAGE: {
              name: string;
              description: string;
          };
          MAX_FRIENDSHIP: {
              name: string;
              description: string;
          };
          MEGA_EVOLVE: {
              name: string;
              description: string;
          };
          GIGANTAMAX: {
              name: string;
              description: string;
          };
          TERASTALLIZE: {
              name: string;
              description: string;
          };
          STELLAR_TERASTALLIZE: {
              name: string;
              description: string;
          };
          SPLICE: {
              name: string;
              description: string;
          };
          MINI_BLACK_HOLE: {
              name: string;
              description: string;
          };
          CATCH_MYTHICAL: {
              name: string;
              description: string;
          };
          CATCH_SUB_LEGENDARY: {
              name: string;
              description: string;
          };
          CATCH_LEGENDARY: {
              name: string;
              description: string;
          };
          SEE_SHINY: {
              name: string;
              description: string;
          };
          SHINY_PARTY: {
              name: string;
              description: string;
          };
          HATCH_MYTHICAL: {
              name: string;
              description: string;
          };
          HATCH_SUB_LEGENDARY: {
              name: string;
              description: string;
          };
          HATCH_LEGENDARY: {
              name: string;
              description: string;
          };
          HATCH_SHINY: {
              name: string;
              description: string;
          };
          HIDDEN_ABILITY: {
              name: string;
              description: string;
          };
          PERFECT_IVS: {
              name: string;
              description: string;
          };
          CLASSIC_VICTORY: {
              name: string;
              description: string;
          };
          UNEVOLVED_CLASSIC_VICTORY: {
              name: string;
              description: string;
          };
          MONO_GEN_ONE: {
              name: string;
              description: string;
          };
          MONO_GEN_TWO: {
              name: string;
              description: string;
          };
          MONO_GEN_THREE: {
              name: string;
              description: string;
          };
          MONO_GEN_FOUR: {
              name: string;
              description: string;
          };
          MONO_GEN_FIVE: {
              name: string;
              description: string;
          };
          MONO_GEN_SIX: {
              name: string;
              description: string;
          };
          MONO_GEN_SEVEN: {
              name: string;
              description: string;
          };
          MONO_GEN_EIGHT: {
              name: string;
              description: string;
          };
          MONO_GEN_NINE: {
              name: string;
              description: string;
          };
          MonoType: {
              description: string;
          };
          MONO_NORMAL: {
              name: string;
          };
          MONO_FIGHTING: {
              name: string;
          };
          MONO_FLYING: {
              name: string;
          };
          MONO_POISON: {
              name: string;
          };
          MONO_GROUND: {
              name: string;
          };
          MONO_ROCK: {
              name: string;
          };
          MONO_BUG: {
              name: string;
          };
          MONO_GHOST: {
              name: string;
          };
          MONO_STEEL: {
              name: string;
          };
          MONO_FIRE: {
              name: string;
          };
          MONO_WATER: {
              name: string;
          };
          MONO_GRASS: {
              name: string;
          };
          MONO_ELECTRIC: {
              name: string;
          };
          MONO_PSYCHIC: {
              name: string;
          };
          MONO_ICE: {
              name: string;
          };
          MONO_DRAGON: {
              name: string;
          };
          MONO_DARK: {
              name: string;
          };
          MONO_FAIRY: {
              name: string;
          };
          FRESH_START: {
              name: string;
              description: string;
          };
          INVERSE_BATTLE: {
              name: string;
              description: string;
          };
      };
      dialogue: {
          youngster: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "4_female": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
                  "9_female": string;
                  "10": string;
                  "11": string;
                  "12": string;
                  "13": string;
                  "13_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "5_female": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
                  "10": string;
                  "11": string;
                  "12": string;
                  "13": string;
              };
          };
          lass: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "6_female": string;
                  "7": string;
                  "8": string;
                  "9": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "8_female": string;
                  "9": string;
              };
          };
          breeder: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          breeder_female: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          fisherman: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          fisherman_female: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          swimmer: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          backpacker: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          ace_trainer: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
                  "4": string;
                  "4_female": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          parasol_lady: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          twins: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          cyclist: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          black_belt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          battle_girl: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          hiker: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          ranger: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          scientist: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          school_kid: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          artist: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          guitarist: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          worker: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          worker_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          worker_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          hex_maniac: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "2_female": string;
              };
          };
          psychic: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          officer: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          beauty: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          baker: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
          };
          biker: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          firebreather: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          sailor: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          archer: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          ariana: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
          };
          proton: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          petrel: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          tabitha: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
          };
          courtney: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          shelly: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
          };
          matt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
          };
          mars: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          jupiter: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          saturn: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          zinzolin: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
          };
          rood: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
          };
          xerosic: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
          };
          bryony: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          rocket_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "5_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          magma_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          aqua_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          galactic_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "5_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          plasma_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          flare_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          aether_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          faba: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          skull_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          plumeria: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          macro_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          oleana: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          rocket_boss_giovanni_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rocket_boss_giovanni_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          magma_boss_maxie_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          magma_boss_maxie_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aqua_boss_archie_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aqua_boss_archie_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          galactic_boss_cyrus_1: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          galactic_boss_cyrus_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          plasma_boss_ghetsis_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          plasma_boss_ghetsis_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          flare_boss_lysandre_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          flare_boss_lysandre_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aether_boss_lusamine_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aether_boss_lusamine_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          skull_boss_guzma_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          skull_boss_guzma_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          macro_boss_rose_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          macro_boss_rose_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          brock: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          misty: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          lt_surge: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
          };
          erika: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          janine: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          sabrina: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          blaine: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          giovanni: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          roxanne: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          brawly: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          wattson: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
          };
          flannery: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          norman: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          winona: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          tate: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          liza: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          juan: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          crasher_wake: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          falkner: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          nessa: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          melony: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          marlon: {
              encounter: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          shauntal: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          marshal: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          cheren: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          chili: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
                  "3_female": string;
              };
          };
          cilan: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "3_female": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "3_female": string;
              };
          };
          roark: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "4_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          morty: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
              };
          };
          crispin: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          amarys: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lacey: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drayton: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
              };
          };
          ramos: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          viola: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          candice: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "2_female": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          gardenia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aaron: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          cress: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          allister: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          clay: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kofu: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          tulip: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          sidney: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          phoebe: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          glacia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drake: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          wallace: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lorelei: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
              };
          };
          will: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          malva: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          hala: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          molayne: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rika: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
              };
          };
          bruno: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bugsy: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          koga: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bertha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lenora: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          siebold: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          roxie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
              };
          };
          olivia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          poppy: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          agatha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          flint: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          grimsley: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          caitlin: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          diantha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          wikstrom: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
                  "1_female": string;
              };
          };
          acerola: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          larry_elite: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lance: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "2_female": string;
              };
          };
          karen: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          milo: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lucian: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drasna: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kahili: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          hassel: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          blue: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          piers: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          red: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          jasmine: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lance_champion: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          steven: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          cynthia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          iris: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          hau: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          geeta: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          nemona: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          leon: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          whitney: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          chuck: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          katy: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          pryce: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          clair: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          maylene: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          fantina: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          byron: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          olympia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          volkner: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          burgh: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          elesa: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          skyla: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          brycen: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drayden: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          grant: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          korrina: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          clemont: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          valerie: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          wulfric: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kabu: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bea: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          opal: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bede: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          gordie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          marnie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          raihan: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          brassius: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          iono: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          larry: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          ryme: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
                  "1_female": string;
              };
              defeat: {
                  "1": string;
              };
          };
          grusha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          marnie_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          nessa_elite: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
                  "2_female": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          bea_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          allister_elite: {
              encounter: {
                  "1": string;
                  "1_female": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          raihan_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "2_female": string;
              };
          };
          alder: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kieran: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_2_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_3: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_3_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_4: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_4_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_5: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_5_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_6: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_6_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
      };
      battleSpecDialogue: {
          encounter: string;
          encounter_female: string;
          firstStageWin: string;
          secondStageWin: string;
      };
      miscDialogue: {
          ending: string;
          ending_female: string;
          ending_endless: string;
          ending_name: string;
      };
      doubleBattleDialogue: {
          blue_red_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          red_blue_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          tate_liza_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          liza_tate_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          wallace_steven_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          steven_wallace_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          alder_iris_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          iris_alder_double: {
              encounter: {
                  "1": string;
                  "1_female": string;
              };
              victory: {
                  "1": string;
              };
          };
          piers_marnie_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          marnie_piers_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
      };
      egg: {
          egg: string;
          greatTier: string;
          ultraTier: string;
          masterTier: string;
          defaultTier: string;
          hatchWavesMessageSoon: string;
          hatchWavesMessageClose: string;
          hatchWavesMessageNotClose: string;
          hatchWavesMessageLongTime: string;
          gachaTypeLegendary: string;
          gachaTypeMove: string;
          gachaTypeShiny: string;
          selectMachine: string;
          notEnoughVouchers: string;
          tooManyEggs: string;
          pull: string;
          pulls: string;
          sameSpeciesEgg: string;
          hatchFromTheEgg: string;
          eggMoveUnlock: string;
          rareEggMoveUnlock: string;
          moveUPGacha: string;
          shinyUPGacha: string;
          legendaryUPGacha: string;
      };
      fightUiHandler: {
          pp: string;
          power: string;
          accuracy: string;
          abilityFlyInText: string;
          passive: string;
      };
      filterBar: {
          genFilter: string;
          typeFilter: string;
          caughtFilter: string;
          unlocksFilter: string;
          miscFilter: string;
          sortFilter: string;
          all: string;
          normal: string;
          uncaught: string;
          passive: string;
          passiveUnlocked: string;
          passiveLocked: string;
          passiveUnlockable: string;
          costReduction: string;
          costReductionUnlocked: string;
          costReductionLocked: string;
          costReductionUnlockable: string;
          favorite: string;
          isFavorite: string;
          notFavorite: string;
          ribbon: string;
          hasWon: string;
          hasNotWon: string;
          hiddenAbility: string;
          hasHiddenAbility: string;
          noHiddenAbility: string;
          egg: string;
          eggPurchasable: string;
          pokerus: string;
          hasPokerus: string;
          noPokerus: string;
          sortByNumber: string;
          sortByCost: string;
          sortByCandies: string;
          sortByIVs: string;
          sortByName: string;
      };
      gameMode: {
          classic: string;
          endless: string;
          endlessSpliced: string;
          dailyRun: string;
          unknown: string;
          challenge: string;
      };
      gameStatsUiHandler: {
          stats: string;
          playTime: string;
          totalBattles: string;
          starters: string;
          shinyStarters: string;
          speciesSeen: string;
          speciesCaught: string;
          ribbonsOwned: string;
          classicRuns: string;
          classicWins: string;
          dailyRunAttempts: string;
          dailyRunWins: string;
          endlessRuns: string;
          highestWaveEndless: string;
          highestMoney: string;
          highestDamage: string;
          highestHPHealed: string;
          pokemonEncountered: string;
          pokemonDefeated: string;
          pokemonCaught: string;
          eggsHatched: string;
          subLegendsSeen: string;
          subLegendsCaught: string;
          subLegendsHatched: string;
          legendsSeen: string;
          legendsCaught: string;
          legendsHatched: string;
          mythicalsSeen: string;
          mythicalsCaught: string;
          mythicalsHatched: string;
          shiniesSeen: string;
          shiniesCaught: string;
          shiniesHatched: string;
          pokemonFused: string;
          trainersDefeated: string;
          eggsPulled: string;
          rareEggsPulled: string;
          epicEggsPulled: string;
          legendaryEggsPulled: string;
          manaphyEggsPulled: string;
      };
      growth: {
          Erratic: string;
          Fast: string;
          Medium_Fast: string;
          Medium_Slow: string;
          Slow: string;
          Fluctuating: string;
      };
      menu: {
          cancel: string;
          continue: string;
          dailyRun: string;
          loadGame: string;
          newGame: string;
          settings: string;
          selectGameMode: string;
          logInOrCreateAccount: string;
          username: string;
          password: string;
          login: string;
          orUse: string;
          register: string;
          emptyUsername: string;
          invalidLoginUsername: string;
          invalidRegisterUsername: string;
          invalidLoginPassword: string;
          invalidRegisterPassword: string;
          usernameAlreadyUsed: string;
          accountNonExistent: string;
          unmatchingPassword: string;
          passwordNotMatchingConfirmPassword: string;
          confirmPassword: string;
          registrationAgeWarning: string;
          backToLogin: string;
          failedToLoadSaveData: string;
          sessionSuccess: string;
          failedToLoadSession: string;
          boyOrGirl: string;
          evolving: string;
          stoppedEvolving: string;
          pauseEvolutionsQuestion: string;
          evolutionsPaused: string;
          evolutionDone: string;
          dailyRankings: string;
          weeklyRankings: string;
          noRankings: string;
          positionIcon: string;
          usernameScoreboard: string;
          score: string;
          wave: string;
          loading: string;
          loadingAsset: string;
          playersOnline: string;
          yes: string;
          no: string;
          disclaimer: string;
          disclaimerDescription: string;
          choosePokemon: string;
          renamePokemon: string;
          rename: string;
          nickname: string;
          errorServerDown: string;
      };
      menuUiHandler: {
          GAME_SETTINGS: string;
          ACHIEVEMENTS: string;
          STATS: string;
          RUN_HISTORY: string;
          EGG_LIST: string;
          EGG_GACHA: string;
          MANAGE_DATA: string;
          COMMUNITY: string;
          SAVE_AND_QUIT: string;
          LOG_OUT: string;
          slot: string;
          importSession: string;
          importSlotSelect: string;
          exportSession: string;
          exportSlotSelect: string;
          importRunHistory: string;
          exportRunHistory: string;
          importData: string;
          exportData: string;
          consentPreferences: string;
          linkDiscord: string;
          unlinkDiscord: string;
          linkGoogle: string;
          unlinkGoogle: string;
          cancel: string;
          losingProgressionWarning: string;
          noEggs: string;
      };
      modifier: {
          surviveDamageApply: string;
          turnHealApply: string;
          hitHealApply: string;
          pokemonInstantReviveApply: string;
          resetNegativeStatStageApply: string;
          moneyInterestApply: string;
          turnHeldItemTransferApply: string;
          contactHeldItemTransferApply: string;
          enemyTurnHealApply: string;
          bypassSpeedChanceApply: string;
      };
      modifierType: {
          ModifierType: {
              AddPokeballModifierType: {
                  name: string;
                  description: string;
              };
              AddVoucherModifierType: {
                  name: string;
                  description: string;
              };
              PokemonHeldItemModifierType: {
                  extra: {
                      inoperable: string;
                      tooMany: string;
                  };
              };
              PokemonHpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                      fullyWithStatus: string;
                  };
              };
              PokemonReviveModifierType: {
                  description: string;
              };
              PokemonStatusHealModifierType: {
                  description: string;
              };
              PokemonPpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                  };
              };
              PokemonAllMovePpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                  };
              };
              PokemonPpUpModifierType: {
                  description: string;
              };
              PokemonNatureChangeModifierType: {
                  name: string;
                  description: string;
              };
              DoubleBattleChanceBoosterModifierType: {
                  description: string;
              };
              TempStatStageBoosterModifierType: {
                  description: string;
              };
              AttackTypeBoosterModifierType: {
                  description: string;
              };
              PokemonLevelIncrementModifierType: {
                  description: string;
              };
              AllPokemonLevelIncrementModifierType: {
                  description: string;
              };
              BaseStatBoosterModifierType: {
                  description: string;
              };
              AllPokemonFullHpRestoreModifierType: {
                  description: string;
              };
              AllPokemonFullReviveModifierType: {
                  description: string;
              };
              MoneyRewardModifierType: {
                  description: string;
                  extra: {
                      small: string;
                      moderate: string;
                      large: string;
                  };
              };
              ExpBoosterModifierType: {
                  description: string;
              };
              PokemonExpBoosterModifierType: {
                  description: string;
              };
              PokemonFriendshipBoosterModifierType: {
                  description: string;
              };
              PokemonMoveAccuracyBoosterModifierType: {
                  description: string;
              };
              PokemonMultiHitModifierType: {
                  description: string;
              };
              TmModifierType: {
                  name: string;
                  description: string;
              };
              TmModifierTypeWithInfo: {
                  name: string;
                  description: string;
              };
              EvolutionItemModifierType: {
                  description: string;
              };
              FormChangeItemModifierType: {
                  description: string;
              };
              FusePokemonModifierType: {
                  description: string;
              };
              TerastallizeModifierType: {
                  name: string;
                  description: string;
              };
              ContactHeldItemTransferChanceModifierType: {
                  description: string;
              };
              TurnHeldItemTransferModifierType: {
                  description: string;
              };
              EnemyAttackStatusEffectChanceModifierType: {
                  description: string;
              };
              EnemyEndureChanceModifierType: {
                  description: string;
              };
              RARE_CANDY: {
                  name: string;
              };
              RARER_CANDY: {
                  name: string;
              };
              MEGA_BRACELET: {
                  name: string;
                  description: string;
              };
              DYNAMAX_BAND: {
                  name: string;
                  description: string;
              };
              TERA_ORB: {
                  name: string;
                  description: string;
              };
              MAP: {
                  name: string;
                  description: string;
              };
              POTION: {
                  name: string;
              };
              SUPER_POTION: {
                  name: string;
              };
              HYPER_POTION: {
                  name: string;
              };
              MAX_POTION: {
                  name: string;
              };
              FULL_RESTORE: {
                  name: string;
              };
              REVIVE: {
                  name: string;
              };
              MAX_REVIVE: {
                  name: string;
              };
              FULL_HEAL: {
                  name: string;
              };
              SACRED_ASH: {
                  name: string;
              };
              REVIVER_SEED: {
                  name: string;
                  description: string;
              };
              WHITE_HERB: {
                  name: string;
                  description: string;
              };
              ETHER: {
                  name: string;
              };
              MAX_ETHER: {
                  name: string;
              };
              ELIXIR: {
                  name: string;
              };
              MAX_ELIXIR: {
                  name: string;
              };
              PP_UP: {
                  name: string;
              };
              PP_MAX: {
                  name: string;
              };
              LURE: {
                  name: string;
              };
              SUPER_LURE: {
                  name: string;
              };
              MAX_LURE: {
                  name: string;
              };
              MEMORY_MUSHROOM: {
                  name: string;
                  description: string;
              };
              EXP_SHARE: {
                  name: string;
                  description: string;
              };
              EXP_BALANCE: {
                  name: string;
                  description: string;
              };
              OVAL_CHARM: {
                  name: string;
                  description: string;
              };
              EXP_CHARM: {
                  name: string;
              };
              SUPER_EXP_CHARM: {
                  name: string;
              };
              GOLDEN_EXP_CHARM: {
                  name: string;
              };
              LUCKY_EGG: {
                  name: string;
              };
              GOLDEN_EGG: {
                  name: string;
              };
              SOOTHE_BELL: {
                  name: string;
              };
              SCOPE_LENS: {
                  name: string;
                  description: string;
              };
              DIRE_HIT: {
                  name: string;
                  extra: {
                      raises: string;
                  };
              };
              LEEK: {
                  name: string;
                  description: string;
              };
              EVIOLITE: {
                  name: string;
                  description: string;
              };
              SOUL_DEW: {
                  name: string;
                  description: string;
              };
              NUGGET: {
                  name: string;
              };
              BIG_NUGGET: {
                  name: string;
              };
              RELIC_GOLD: {
                  name: string;
              };
              AMULET_COIN: {
                  name: string;
                  description: string;
              };
              GOLDEN_PUNCH: {
                  name: string;
                  description: string;
              };
              COIN_CASE: {
                  name: string;
                  description: string;
              };
              LOCK_CAPSULE: {
                  name: string;
                  description: string;
              };
              GRIP_CLAW: {
                  name: string;
              };
              WIDE_LENS: {
                  name: string;
              };
              MULTI_LENS: {
                  name: string;
              };
              HEALING_CHARM: {
                  name: string;
                  description: string;
              };
              CANDY_JAR: {
                  name: string;
                  description: string;
              };
              BERRY_POUCH: {
                  name: string;
                  description: string;
              };
              FOCUS_BAND: {
                  name: string;
                  description: string;
              };
              QUICK_CLAW: {
                  name: string;
                  description: string;
              };
              KINGS_ROCK: {
                  name: string;
                  description: string;
              };
              LEFTOVERS: {
                  name: string;
                  description: string;
              };
              SHELL_BELL: {
                  name: string;
                  description: string;
              };
              TOXIC_ORB: {
                  name: string;
                  description: string;
              };
              FLAME_ORB: {
                  name: string;
                  description: string;
              };
              BATON: {
                  name: string;
                  description: string;
              };
              SHINY_CHARM: {
                  name: string;
                  description: string;
              };
              ABILITY_CHARM: {
                  name: string;
                  description: string;
              };
              IV_SCANNER: {
                  name: string;
                  description: string;
              };
              DNA_SPLICERS: {
                  name: string;
              };
              MINI_BLACK_HOLE: {
                  name: string;
              };
              GOLDEN_POKEBALL: {
                  name: string;
                  description: string;
              };
              ENEMY_DAMAGE_BOOSTER: {
                  name: string;
                  description: string;
              };
              ENEMY_DAMAGE_REDUCTION: {
                  name: string;
                  description: string;
              };
              ENEMY_HEAL: {
                  name: string;
                  description: string;
              };
              ENEMY_ATTACK_POISON_CHANCE: {
                  name: string;
              };
              ENEMY_ATTACK_PARALYZE_CHANCE: {
                  name: string;
              };
              ENEMY_ATTACK_BURN_CHANCE: {
                  name: string;
              };
              ENEMY_STATUS_EFFECT_HEAL_CHANCE: {
                  name: string;
                  description: string;
              };
              ENEMY_ENDURE_CHANCE: {
                  name: string;
              };
              ENEMY_FUSED_CHANCE: {
                  name: string;
                  description: string;
              };
          };
          SpeciesBoosterItem: {
              LIGHT_BALL: {
                  name: string;
                  description: string;
              };
              THICK_CLUB: {
                  name: string;
                  description: string;
              };
              METAL_POWDER: {
                  name: string;
                  description: string;
              };
              QUICK_POWDER: {
                  name: string;
                  description: string;
              };
          };
          TempStatStageBoosterItem: {
              x_attack: string;
              x_defense: string;
              x_sp_atk: string;
              x_sp_def: string;
              x_speed: string;
              x_accuracy: string;
          };
          AttackTypeBoosterItem: {
              silk_scarf: string;
              black_belt: string;
              sharp_beak: string;
              poison_barb: string;
              soft_sand: string;
              hard_stone: string;
              silver_powder: string;
              spell_tag: string;
              metal_coat: string;
              charcoal: string;
              mystic_water: string;
              miracle_seed: string;
              magnet: string;
              twisted_spoon: string;
              never_melt_ice: string;
              dragon_fang: string;
              black_glasses: string;
              fairy_feather: string;
          };
          BaseStatBoosterItem: {
              hp_up: string;
              protein: string;
              iron: string;
              calcium: string;
              zinc: string;
              carbos: string;
          };
          EvolutionItem: {
              NONE: string;
              LINKING_CORD: string;
              SUN_STONE: string;
              MOON_STONE: string;
              LEAF_STONE: string;
              FIRE_STONE: string;
              WATER_STONE: string;
              THUNDER_STONE: string;
              ICE_STONE: string;
              DUSK_STONE: string;
              DAWN_STONE: string;
              SHINY_STONE: string;
              CRACKED_POT: string;
              SWEET_APPLE: string;
              TART_APPLE: string;
              STRAWBERRY_SWEET: string;
              UNREMARKABLE_TEACUP: string;
              CHIPPED_POT: string;
              BLACK_AUGURITE: string;
              GALARICA_CUFF: string;
              GALARICA_WREATH: string;
              PEAT_BLOCK: string;
              AUSPICIOUS_ARMOR: string;
              MALICIOUS_ARMOR: string;
              MASTERPIECE_TEACUP: string;
              METAL_ALLOY: string;
              SCROLL_OF_DARKNESS: string;
              SCROLL_OF_WATERS: string;
              SYRUPY_APPLE: string;
          };
          FormChangeItem: {
              NONE: string;
              ABOMASITE: string;
              ABSOLITE: string;
              AERODACTYLITE: string;
              AGGRONITE: string;
              ALAKAZITE: string;
              ALTARIANITE: string;
              AMPHAROSITE: string;
              AUDINITE: string;
              BANETTITE: string;
              BEEDRILLITE: string;
              BLASTOISINITE: string;
              BLAZIKENITE: string;
              CAMERUPTITE: string;
              CHARIZARDITE_X: string;
              CHARIZARDITE_Y: string;
              DIANCITE: string;
              GALLADITE: string;
              GARCHOMPITE: string;
              GARDEVOIRITE: string;
              GENGARITE: string;
              GLALITITE: string;
              GYARADOSITE: string;
              HERACRONITE: string;
              HOUNDOOMINITE: string;
              KANGASKHANITE: string;
              LATIASITE: string;
              LATIOSITE: string;
              LOPUNNITE: string;
              LUCARIONITE: string;
              MANECTITE: string;
              MAWILITE: string;
              MEDICHAMITE: string;
              METAGROSSITE: string;
              MEWTWONITE_X: string;
              MEWTWONITE_Y: string;
              PIDGEOTITE: string;
              PINSIRITE: string;
              RAYQUAZITE: string;
              SABLENITE: string;
              SALAMENCITE: string;
              SCEPTILITE: string;
              SCIZORITE: string;
              SHARPEDONITE: string;
              SLOWBRONITE: string;
              STEELIXITE: string;
              SWAMPERTITE: string;
              TYRANITARITE: string;
              VENUSAURITE: string;
              BLUE_ORB: string;
              RED_ORB: string;
              SHARP_METEORITE: string;
              HARD_METEORITE: string;
              SMOOTH_METEORITE: string;
              ADAMANT_CRYSTAL: string;
              LUSTROUS_GLOBE: string;
              GRISEOUS_CORE: string;
              REVEAL_GLASS: string;
              GRACIDEA: string;
              MAX_MUSHROOMS: string;
              DARK_STONE: string;
              LIGHT_STONE: string;
              PRISON_BOTTLE: string;
              N_LUNARIZER: string;
              N_SOLARIZER: string;
              RUSTED_SWORD: string;
              RUSTED_SHIELD: string;
              ICY_REINS_OF_UNITY: string;
              SHADOW_REINS_OF_UNITY: string;
              WELLSPRING_MASK: string;
              HEARTHFLAME_MASK: string;
              CORNERSTONE_MASK: string;
              SHOCK_DRIVE: string;
              BURN_DRIVE: string;
              CHILL_DRIVE: string;
              DOUSE_DRIVE: string;
              ULTRANECROZIUM_Z: string;
              FIST_PLATE: string;
              SKY_PLATE: string;
              TOXIC_PLATE: string;
              EARTH_PLATE: string;
              STONE_PLATE: string;
              INSECT_PLATE: string;
              SPOOKY_PLATE: string;
              IRON_PLATE: string;
              FLAME_PLATE: string;
              SPLASH_PLATE: string;
              MEADOW_PLATE: string;
              ZAP_PLATE: string;
              MIND_PLATE: string;
              ICICLE_PLATE: string;
              DRACO_PLATE: string;
              DREAD_PLATE: string;
              PIXIE_PLATE: string;
              BLANK_PLATE: string;
              LEGEND_PLATE: string;
              FIGHTING_MEMORY: string;
              FLYING_MEMORY: string;
              POISON_MEMORY: string;
              GROUND_MEMORY: string;
              ROCK_MEMORY: string;
              BUG_MEMORY: string;
              GHOST_MEMORY: string;
              STEEL_MEMORY: string;
              FIRE_MEMORY: string;
              WATER_MEMORY: string;
              GRASS_MEMORY: string;
              ELECTRIC_MEMORY: string;
              PSYCHIC_MEMORY: string;
              ICE_MEMORY: string;
              DRAGON_MEMORY: string;
              DARK_MEMORY: string;
              FAIRY_MEMORY: string;
              NORMAL_MEMORY: string;
          };
      };
      move: {
          pound: {
              name: string;
              effect: string;
          };
          karateChop: {
              name: string;
              effect: string;
          };
          doubleSlap: {
              name: string;
              effect: string;
          };
          cometPunch: {
              name: string;
              effect: string;
          };
          megaPunch: {
              name: string;
              effect: string;
          };
          payDay: {
              name: string;
              effect: string;
          };
          firePunch: {
              name: string;
              effect: string;
          };
          icePunch: {
              name: string;
              effect: string;
          };
          thunderPunch: {
              name: string;
              effect: string;
          };
          scratch: {
              name: string;
              effect: string;
          };
          viseGrip: {
              name: string;
              effect: string;
          };
          guillotine: {
              name: string;
              effect: string;
          };
          razorWind: {
              name: string;
              effect: string;
          };
          swordsDance: {
              name: string;
              effect: string;
          };
          cut: {
              name: string;
              effect: string;
          };
          gust: {
              name: string;
              effect: string;
          };
          wingAttack: {
              name: string;
              effect: string;
          };
          whirlwind: {
              name: string;
              effect: string;
          };
          fly: {
              name: string;
              effect: string;
          };
          bind: {
              name: string;
              effect: string;
          };
          slam: {
              name: string;
              effect: string;
          };
          vineWhip: {
              name: string;
              effect: string;
          };
          stomp: {
              name: string;
              effect: string;
          };
          doubleKick: {
              name: string;
              effect: string;
          };
          megaKick: {
              name: string;
              effect: string;
          };
          jumpKick: {
              name: string;
              effect: string;
          };
          rollingKick: {
              name: string;
              effect: string;
          };
          sandAttack: {
              name: string;
              effect: string;
          };
          headbutt: {
              name: string;
              effect: string;
          };
          hornAttack: {
              name: string;
              effect: string;
          };
          furyAttack: {
              name: string;
              effect: string;
          };
          hornDrill: {
              name: string;
              effect: string;
          };
          tackle: {
              name: string;
              effect: string;
          };
          bodySlam: {
              name: string;
              effect: string;
          };
          wrap: {
              name: string;
              effect: string;
          };
          takeDown: {
              name: string;
              effect: string;
          };
          thrash: {
              name: string;
              effect: string;
          };
          doubleEdge: {
              name: string;
              effect: string;
          };
          tailWhip: {
              name: string;
              effect: string;
          };
          poisonSting: {
              name: string;
              effect: string;
          };
          twineedle: {
              name: string;
              effect: string;
          };
          pinMissile: {
              name: string;
              effect: string;
          };
          leer: {
              name: string;
              effect: string;
          };
          bite: {
              name: string;
              effect: string;
          };
          growl: {
              name: string;
              effect: string;
          };
          roar: {
              name: string;
              effect: string;
          };
          sing: {
              name: string;
              effect: string;
          };
          supersonic: {
              name: string;
              effect: string;
          };
          sonicBoom: {
              name: string;
              effect: string;
          };
          disable: {
              name: string;
              effect: string;
          };
          acid: {
              name: string;
              effect: string;
          };
          ember: {
              name: string;
              effect: string;
          };
          flamethrower: {
              name: string;
              effect: string;
          };
          mist: {
              name: string;
              effect: string;
          };
          waterGun: {
              name: string;
              effect: string;
          };
          hydroPump: {
              name: string;
              effect: string;
          };
          surf: {
              name: string;
              effect: string;
          };
          iceBeam: {
              name: string;
              effect: string;
          };
          blizzard: {
              name: string;
              effect: string;
          };
          psybeam: {
              name: string;
              effect: string;
          };
          bubbleBeam: {
              name: string;
              effect: string;
          };
          auroraBeam: {
              name: string;
              effect: string;
          };
          hyperBeam: {
              name: string;
              effect: string;
          };
          peck: {
              name: string;
              effect: string;
          };
          drillPeck: {
              name: string;
              effect: string;
          };
          submission: {
              name: string;
              effect: string;
          };
          lowKick: {
              name: string;
              effect: string;
          };
          counter: {
              name: string;
              effect: string;
          };
          seismicToss: {
              name: string;
              effect: string;
          };
          strength: {
              name: string;
              effect: string;
          };
          absorb: {
              name: string;
              effect: string;
          };
          megaDrain: {
              name: string;
              effect: string;
          };
          leechSeed: {
              name: string;
              effect: string;
          };
          growth: {
              name: string;
              effect: string;
          };
          razorLeaf: {
              name: string;
              effect: string;
          };
          solarBeam: {
              name: string;
              effect: string;
          };
          poisonPowder: {
              name: string;
              effect: string;
          };
          stunSpore: {
              name: string;
              effect: string;
          };
          sleepPowder: {
              name: string;
              effect: string;
          };
          petalDance: {
              name: string;
              effect: string;
          };
          stringShot: {
              name: string;
              effect: string;
          };
          dragonRage: {
              name: string;
              effect: string;
          };
          fireSpin: {
              name: string;
              effect: string;
          };
          thunderShock: {
              name: string;
              effect: string;
          };
          thunderbolt: {
              name: string;
              effect: string;
          };
          thunderWave: {
              name: string;
              effect: string;
          };
          thunder: {
              name: string;
              effect: string;
          };
          rockThrow: {
              name: string;
              effect: string;
          };
          earthquake: {
              name: string;
              effect: string;
          };
          fissure: {
              name: string;
              effect: string;
          };
          dig: {
              name: string;
              effect: string;
          };
          toxic: {
              name: string;
              effect: string;
          };
          confusion: {
              name: string;
              effect: string;
          };
          psychic: {
              name: string;
              effect: string;
          };
          hypnosis: {
              name: string;
              effect: string;
          };
          meditate: {
              name: string;
              effect: string;
          };
          agility: {
              name: string;
              effect: string;
          };
          quickAttack: {
              name: string;
              effect: string;
          };
          rage: {
              name: string;
              effect: string;
          };
          teleport: {
              name: string;
              effect: string;
          };
          nightShade: {
              name: string;
              effect: string;
          };
          mimic: {
              name: string;
              effect: string;
          };
          screech: {
              name: string;
              effect: string;
          };
          doubleTeam: {
              name: string;
              effect: string;
          };
          recover: {
              name: string;
              effect: string;
          };
          harden: {
              name: string;
              effect: string;
          };
          minimize: {
              name: string;
              effect: string;
          };
          smokescreen: {
              name: string;
              effect: string;
          };
          confuseRay: {
              name: string;
              effect: string;
          };
          withdraw: {
              name: string;
              effect: string;
          };
          defenseCurl: {
              name: string;
              effect: string;
          };
          barrier: {
              name: string;
              effect: string;
          };
          lightScreen: {
              name: string;
              effect: string;
          };
          haze: {
              name: string;
              effect: string;
          };
          reflect: {
              name: string;
              effect: string;
          };
          focusEnergy: {
              name: string;
              effect: string;
          };
          bide: {
              name: string;
              effect: string;
          };
          metronome: {
              name: string;
              effect: string;
          };
          mirrorMove: {
              name: string;
              effect: string;
          };
          selfDestruct: {
              name: string;
              effect: string;
          };
          eggBomb: {
              name: string;
              effect: string;
          };
          lick: {
              name: string;
              effect: string;
          };
          smog: {
              name: string;
              effect: string;
          };
          sludge: {
              name: string;
              effect: string;
          };
          boneClub: {
              name: string;
              effect: string;
          };
          fireBlast: {
              name: string;
              effect: string;
          };
          waterfall: {
              name: string;
              effect: string;
          };
          clamp: {
              name: string;
              effect: string;
          };
          swift: {
              name: string;
              effect: string;
          };
          skullBash: {
              name: string;
              effect: string;
          };
          spikeCannon: {
              name: string;
              effect: string;
          };
          constrict: {
              name: string;
              effect: string;
          };
          amnesia: {
              name: string;
              effect: string;
          };
          kinesis: {
              name: string;
              effect: string;
          };
          softBoiled: {
              name: string;
              effect: string;
          };
          highJumpKick: {
              name: string;
              effect: string;
          };
          glare: {
              name: string;
              effect: string;
          };
          dreamEater: {
              name: string;
              effect: string;
          };
          poisonGas: {
              name: string;
              effect: string;
          };
          barrage: {
              name: string;
              effect: string;
          };
          leechLife: {
              name: string;
              effect: string;
          };
          lovelyKiss: {
              name: string;
              effect: string;
          };
          skyAttack: {
              name: string;
              effect: string;
          };
          transform: {
              name: string;
              effect: string;
          };
          bubble: {
              name: string;
              effect: string;
          };
          dizzyPunch: {
              name: string;
              effect: string;
          };
          spore: {
              name: string;
              effect: string;
          };
          flash: {
              name: string;
              effect: string;
          };
          psywave: {
              name: string;
              effect: string;
          };
          splash: {
              name: string;
              effect: string;
          };
          acidArmor: {
              name: string;
              effect: string;
          };
          crabhammer: {
              name: string;
              effect: string;
          };
          explosion: {
              name: string;
              effect: string;
          };
          furySwipes: {
              name: string;
              effect: string;
          };
          bonemerang: {
              name: string;
              effect: string;
          };
          rest: {
              name: string;
              effect: string;
          };
          rockSlide: {
              name: string;
              effect: string;
          };
          hyperFang: {
              name: string;
              effect: string;
          };
          sharpen: {
              name: string;
              effect: string;
          };
          conversion: {
              name: string;
              effect: string;
          };
          triAttack: {
              name: string;
              effect: string;
          };
          superFang: {
              name: string;
              effect: string;
          };
          slash: {
              name: string;
              effect: string;
          };
          substitute: {
              name: string;
              effect: string;
          };
          struggle: {
              name: string;
              effect: string;
          };
          sketch: {
              name: string;
              effect: string;
          };
          tripleKick: {
              name: string;
              effect: string;
          };
          thief: {
              name: string;
              effect: string;
          };
          spiderWeb: {
              name: string;
              effect: string;
          };
          mindReader: {
              name: string;
              effect: string;
          };
          nightmare: {
              name: string;
              effect: string;
          };
          flameWheel: {
              name: string;
              effect: string;
          };
          snore: {
              name: string;
              effect: string;
          };
          curse: {
              name: string;
              effect: string;
          };
          flail: {
              name: string;
              effect: string;
          };
          conversion2: {
              name: string;
              effect: string;
          };
          aeroblast: {
              name: string;
              effect: string;
          };
          cottonSpore: {
              name: string;
              effect: string;
          };
          reversal: {
              name: string;
              effect: string;
          };
          spite: {
              name: string;
              effect: string;
          };
          powderSnow: {
              name: string;
              effect: string;
          };
          protect: {
              name: string;
              effect: string;
          };
          machPunch: {
              name: string;
              effect: string;
          };
          scaryFace: {
              name: string;
              effect: string;
          };
          feintAttack: {
              name: string;
              effect: string;
          };
          sweetKiss: {
              name: string;
              effect: string;
          };
          bellyDrum: {
              name: string;
              effect: string;
          };
          sludgeBomb: {
              name: string;
              effect: string;
          };
          mudSlap: {
              name: string;
              effect: string;
          };
          octazooka: {
              name: string;
              effect: string;
          };
          spikes: {
              name: string;
              effect: string;
          };
          zapCannon: {
              name: string;
              effect: string;
          };
          foresight: {
              name: string;
              effect: string;
          };
          destinyBond: {
              name: string;
              effect: string;
          };
          perishSong: {
              name: string;
              effect: string;
          };
          icyWind: {
              name: string;
              effect: string;
          };
          detect: {
              name: string;
              effect: string;
          };
          boneRush: {
              name: string;
              effect: string;
          };
          lockOn: {
              name: string;
              effect: string;
          };
          outrage: {
              name: string;
              effect: string;
          };
          sandstorm: {
              name: string;
              effect: string;
          };
          gigaDrain: {
              name: string;
              effect: string;
          };
          endure: {
              name: string;
              effect: string;
          };
          charm: {
              name: string;
              effect: string;
          };
          rollout: {
              name: string;
              effect: string;
          };
          falseSwipe: {
              name: string;
              effect: string;
          };
          swagger: {
              name: string;
              effect: string;
          };
          milkDrink: {
              name: string;
              effect: string;
          };
          spark: {
              name: string;
              effect: string;
          };
          furyCutter: {
              name: string;
              effect: string;
          };
          steelWing: {
              name: string;
              effect: string;
          };
          meanLook: {
              name: string;
              effect: string;
          };
          attract: {
              name: string;
              effect: string;
          };
          sleepTalk: {
              name: string;
              effect: string;
          };
          healBell: {
              name: string;
              effect: string;
          };
          return: {
              name: string;
              effect: string;
          };
          present: {
              name: string;
              effect: string;
          };
          frustration: {
              name: string;
              effect: string;
          };
          safeguard: {
              name: string;
              effect: string;
          };
          painSplit: {
              name: string;
              effect: string;
          };
          sacredFire: {
              name: string;
              effect: string;
          };
          magnitude: {
              name: string;
              effect: string;
          };
          dynamicPunch: {
              name: string;
              effect: string;
          };
          megahorn: {
              name: string;
              effect: string;
          };
          dragonBreath: {
              name: string;
              effect: string;
          };
          batonPass: {
              name: string;
              effect: string;
          };
          encore: {
              name: string;
              effect: string;
          };
          pursuit: {
              name: string;
              effect: string;
          };
          rapidSpin: {
              name: string;
              effect: string;
          };
          sweetScent: {
              name: string;
              effect: string;
          };
          ironTail: {
              name: string;
              effect: string;
          };
          metalClaw: {
              name: string;
              effect: string;
          };
          vitalThrow: {
              name: string;
              effect: string;
          };
          morningSun: {
              name: string;
              effect: string;
          };
          synthesis: {
              name: string;
              effect: string;
          };
          moonlight: {
              name: string;
              effect: string;
          };
          hiddenPower: {
              name: string;
              effect: string;
          };
          crossChop: {
              name: string;
              effect: string;
          };
          twister: {
              name: string;
              effect: string;
          };
          rainDance: {
              name: string;
              effect: string;
          };
          sunnyDay: {
              name: string;
              effect: string;
          };
          crunch: {
              name: string;
              effect: string;
          };
          mirrorCoat: {
              name: string;
              effect: string;
          };
          psychUp: {
              name: string;
              effect: string;
          };
          extremeSpeed: {
              name: string;
              effect: string;
          };
          ancientPower: {
              name: string;
              effect: string;
          };
          shadowBall: {
              name: string;
              effect: string;
          };
          futureSight: {
              name: string;
              effect: string;
          };
          rockSmash: {
              name: string;
              effect: string;
          };
          whirlpool: {
              name: string;
              effect: string;
          };
          beatUp: {
              name: string;
              effect: string;
          };
          fakeOut: {
              name: string;
              effect: string;
          };
          uproar: {
              name: string;
              effect: string;
          };
          stockpile: {
              name: string;
              effect: string;
          };
          spitUp: {
              name: string;
              effect: string;
          };
          swallow: {
              name: string;
              effect: string;
          };
          heatWave: {
              name: string;
              effect: string;
          };
          hail: {
              name: string;
              effect: string;
          };
          torment: {
              name: string;
              effect: string;
          };
          flatter: {
              name: string;
              effect: string;
          };
          willOWisp: {
              name: string;
              effect: string;
          };
          memento: {
              name: string;
              effect: string;
          };
          facade: {
              name: string;
              effect: string;
          };
          focusPunch: {
              name: string;
              effect: string;
          };
          smellingSalts: {
              name: string;
              effect: string;
          };
          followMe: {
              name: string;
              effect: string;
          };
          naturePower: {
              name: string;
              effect: string;
          };
          charge: {
              name: string;
              effect: string;
          };
          taunt: {
              name: string;
              effect: string;
          };
          helpingHand: {
              name: string;
              effect: string;
          };
          trick: {
              name: string;
              effect: string;
          };
          rolePlay: {
              name: string;
              effect: string;
          };
          wish: {
              name: string;
              effect: string;
          };
          assist: {
              name: string;
              effect: string;
          };
          ingrain: {
              name: string;
              effect: string;
          };
          superpower: {
              name: string;
              effect: string;
          };
          magicCoat: {
              name: string;
              effect: string;
          };
          recycle: {
              name: string;
              effect: string;
          };
          revenge: {
              name: string;
              effect: string;
          };
          brickBreak: {
              name: string;
              effect: string;
          };
          yawn: {
              name: string;
              effect: string;
          };
          knockOff: {
              name: string;
              effect: string;
          };
          endeavor: {
              name: string;
              effect: string;
          };
          eruption: {
              name: string;
              effect: string;
          };
          skillSwap: {
              name: string;
              effect: string;
          };
          imprison: {
              name: string;
              effect: string;
          };
          refresh: {
              name: string;
              effect: string;
          };
          grudge: {
              name: string;
              effect: string;
          };
          snatch: {
              name: string;
              effect: string;
          };
          secretPower: {
              name: string;
              effect: string;
          };
          dive: {
              name: string;
              effect: string;
          };
          armThrust: {
              name: string;
              effect: string;
          };
          camouflage: {
              name: string;
              effect: string;
          };
          tailGlow: {
              name: string;
              effect: string;
          };
          lusterPurge: {
              name: string;
              effect: string;
          };
          mistBall: {
              name: string;
              effect: string;
          };
          featherDance: {
              name: string;
              effect: string;
          };
          teeterDance: {
              name: string;
              effect: string;
          };
          blazeKick: {
              name: string;
              effect: string;
          };
          mudSport: {
              name: string;
              effect: string;
          };
          iceBall: {
              name: string;
              effect: string;
          };
          needleArm: {
              name: string;
              effect: string;
          };
          slackOff: {
              name: string;
              effect: string;
          };
          hyperVoice: {
              name: string;
              effect: string;
          };
          poisonFang: {
              name: string;
              effect: string;
          };
          crushClaw: {
              name: string;
              effect: string;
          };
          blastBurn: {
              name: string;
              effect: string;
          };
          hydroCannon: {
              name: string;
              effect: string;
          };
          meteorMash: {
              name: string;
              effect: string;
          };
          astonish: {
              name: string;
              effect: string;
          };
          weatherBall: {
              name: string;
              effect: string;
          };
          aromatherapy: {
              name: string;
              effect: string;
          };
          fakeTears: {
              name: string;
              effect: string;
          };
          airCutter: {
              name: string;
              effect: string;
          };
          overheat: {
              name: string;
              effect: string;
          };
          odorSleuth: {
              name: string;
              effect: string;
          };
          rockTomb: {
              name: string;
              effect: string;
          };
          silverWind: {
              name: string;
              effect: string;
          };
          metalSound: {
              name: string;
              effect: string;
          };
          grassWhistle: {
              name: string;
              effect: string;
          };
          tickle: {
              name: string;
              effect: string;
          };
          cosmicPower: {
              name: string;
              effect: string;
          };
          waterSpout: {
              name: string;
              effect: string;
          };
          signalBeam: {
              name: string;
              effect: string;
          };
          shadowPunch: {
              name: string;
              effect: string;
          };
          extrasensory: {
              name: string;
              effect: string;
          };
          skyUppercut: {
              name: string;
              effect: string;
          };
          sandTomb: {
              name: string;
              effect: string;
          };
          sheerCold: {
              name: string;
              effect: string;
          };
          muddyWater: {
              name: string;
              effect: string;
          };
          bulletSeed: {
              name: string;
              effect: string;
          };
          aerialAce: {
              name: string;
              effect: string;
          };
          icicleSpear: {
              name: string;
              effect: string;
          };
          ironDefense: {
              name: string;
              effect: string;
          };
          block: {
              name: string;
              effect: string;
          };
          howl: {
              name: string;
              effect: string;
          };
          dragonClaw: {
              name: string;
              effect: string;
          };
          frenzyPlant: {
              name: string;
              effect: string;
          };
          bulkUp: {
              name: string;
              effect: string;
          };
          bounce: {
              name: string;
              effect: string;
          };
          mudShot: {
              name: string;
              effect: string;
          };
          poisonTail: {
              name: string;
              effect: string;
          };
          covet: {
              name: string;
              effect: string;
          };
          voltTackle: {
              name: string;
              effect: string;
          };
          magicalLeaf: {
              name: string;
              effect: string;
          };
          waterSport: {
              name: string;
              effect: string;
          };
          calmMind: {
              name: string;
              effect: string;
          };
          leafBlade: {
              name: string;
              effect: string;
          };
          dragonDance: {
              name: string;
              effect: string;
          };
          rockBlast: {
              name: string;
              effect: string;
          };
          shockWave: {
              name: string;
              effect: string;
          };
          waterPulse: {
              name: string;
              effect: string;
          };
          doomDesire: {
              name: string;
              effect: string;
          };
          psychoBoost: {
              name: string;
              effect: string;
          };
          roost: {
              name: string;
              effect: string;
          };
          gravity: {
              name: string;
              effect: string;
          };
          miracleEye: {
              name: string;
              effect: string;
          };
          wakeUpSlap: {
              name: string;
              effect: string;
          };
          hammerArm: {
              name: string;
              effect: string;
          };
          gyroBall: {
              name: string;
              effect: string;
          };
          healingWish: {
              name: string;
              effect: string;
          };
          brine: {
              name: string;
              effect: string;
          };
          naturalGift: {
              name: string;
              effect: string;
          };
          feint: {
              name: string;
              effect: string;
          };
          pluck: {
              name: string;
              effect: string;
          };
          tailwind: {
              name: string;
              effect: string;
          };
          acupressure: {
              name: string;
              effect: string;
          };
          metalBurst: {
              name: string;
              effect: string;
          };
          uTurn: {
              name: string;
              effect: string;
          };
          closeCombat: {
              name: string;
              effect: string;
          };
          payback: {
              name: string;
              effect: string;
          };
          assurance: {
              name: string;
              effect: string;
          };
          embargo: {
              name: string;
              effect: string;
          };
          fling: {
              name: string;
              effect: string;
          };
          psychoShift: {
              name: string;
              effect: string;
          };
          trumpCard: {
              name: string;
              effect: string;
          };
          healBlock: {
              name: string;
              effect: string;
          };
          wringOut: {
              name: string;
              effect: string;
          };
          powerTrick: {
              name: string;
              effect: string;
          };
          gastroAcid: {
              name: string;
              effect: string;
          };
          luckyChant: {
              name: string;
              effect: string;
          };
          meFirst: {
              name: string;
              effect: string;
          };
          copycat: {
              name: string;
              effect: string;
          };
          powerSwap: {
              name: string;
              effect: string;
          };
          guardSwap: {
              name: string;
              effect: string;
          };
          punishment: {
              name: string;
              effect: string;
          };
          lastResort: {
              name: string;
              effect: string;
          };
          worrySeed: {
              name: string;
              effect: string;
          };
          suckerPunch: {
              name: string;
              effect: string;
          };
          toxicSpikes: {
              name: string;
              effect: string;
          };
          heartSwap: {
              name: string;
              effect: string;
          };
          aquaRing: {
              name: string;
              effect: string;
          };
          magnetRise: {
              name: string;
              effect: string;
          };
          flareBlitz: {
              name: string;
              effect: string;
          };
          forcePalm: {
              name: string;
              effect: string;
          };
          auraSphere: {
              name: string;
              effect: string;
          };
          rockPolish: {
              name: string;
              effect: string;
          };
          poisonJab: {
              name: string;
              effect: string;
          };
          darkPulse: {
              name: string;
              effect: string;
          };
          nightSlash: {
              name: string;
              effect: string;
          };
          aquaTail: {
              name: string;
              effect: string;
          };
          seedBomb: {
              name: string;
              effect: string;
          };
          airSlash: {
              name: string;
              effect: string;
          };
          xScissor: {
              name: string;
              effect: string;
          };
          bugBuzz: {
              name: string;
              effect: string;
          };
          dragonPulse: {
              name: string;
              effect: string;
          };
          dragonRush: {
              name: string;
              effect: string;
          };
          powerGem: {
              name: string;
              effect: string;
          };
          drainPunch: {
              name: string;
              effect: string;
          };
          vacuumWave: {
              name: string;
              effect: string;
          };
          focusBlast: {
              name: string;
              effect: string;
          };
          energyBall: {
              name: string;
              effect: string;
          };
          braveBird: {
              name: string;
              effect: string;
          };
          earthPower: {
              name: string;
              effect: string;
          };
          switcheroo: {
              name: string;
              effect: string;
          };
          gigaImpact: {
              name: string;
              effect: string;
          };
          nastyPlot: {
              name: string;
              effect: string;
          };
          bulletPunch: {
              name: string;
              effect: string;
          };
          avalanche: {
              name: string;
              effect: string;
          };
          iceShard: {
              name: string;
              effect: string;
          };
          shadowClaw: {
              name: string;
              effect: string;
          };
          thunderFang: {
              name: string;
              effect: string;
          };
          iceFang: {
              name: string;
              effect: string;
          };
          fireFang: {
              name: string;
              effect: string;
          };
          shadowSneak: {
              name: string;
              effect: string;
          };
          mudBomb: {
              name: string;
              effect: string;
          };
          psychoCut: {
              name: string;
              effect: string;
          };
          zenHeadbutt: {
              name: string;
              effect: string;
          };
          mirrorShot: {
              name: string;
              effect: string;
          };
          flashCannon: {
              name: string;
              effect: string;
          };
          rockClimb: {
              name: string;
              effect: string;
          };
          defog: {
              name: string;
              effect: string;
          };
          trickRoom: {
              name: string;
              effect: string;
          };
          dracoMeteor: {
              name: string;
              effect: string;
          };
          discharge: {
              name: string;
              effect: string;
          };
          lavaPlume: {
              name: string;
              effect: string;
          };
          leafStorm: {
              name: string;
              effect: string;
          };
          powerWhip: {
              name: string;
              effect: string;
          };
          rockWrecker: {
              name: string;
              effect: string;
          };
          crossPoison: {
              name: string;
              effect: string;
          };
          gunkShot: {
              name: string;
              effect: string;
          };
          ironHead: {
              name: string;
              effect: string;
          };
          magnetBomb: {
              name: string;
              effect: string;
          };
          stoneEdge: {
              name: string;
              effect: string;
          };
          captivate: {
              name: string;
              effect: string;
          };
          stealthRock: {
              name: string;
              effect: string;
          };
          grassKnot: {
              name: string;
              effect: string;
          };
          chatter: {
              name: string;
              effect: string;
          };
          judgment: {
              name: string;
              effect: string;
          };
          bugBite: {
              name: string;
              effect: string;
          };
          chargeBeam: {
              name: string;
              effect: string;
          };
          woodHammer: {
              name: string;
              effect: string;
          };
          aquaJet: {
              name: string;
              effect: string;
          };
          attackOrder: {
              name: string;
              effect: string;
          };
          defendOrder: {
              name: string;
              effect: string;
          };
          healOrder: {
              name: string;
              effect: string;
          };
          headSmash: {
              name: string;
              effect: string;
          };
          doubleHit: {
              name: string;
              effect: string;
          };
          roarOfTime: {
              name: string;
              effect: string;
          };
          spacialRend: {
              name: string;
              effect: string;
          };
          lunarDance: {
              name: string;
              effect: string;
          };
          crushGrip: {
              name: string;
              effect: string;
          };
          magmaStorm: {
              name: string;
              effect: string;
          };
          darkVoid: {
              name: string;
              effect: string;
          };
          seedFlare: {
              name: string;
              effect: string;
          };
          ominousWind: {
              name: string;
              effect: string;
          };
          shadowForce: {
              name: string;
              effect: string;
          };
          honeClaws: {
              name: string;
              effect: string;
          };
          wideGuard: {
              name: string;
              effect: string;
          };
          guardSplit: {
              name: string;
              effect: string;
          };
          powerSplit: {
              name: string;
              effect: string;
          };
          wonderRoom: {
              name: string;
              effect: string;
          };
          psyshock: {
              name: string;
              effect: string;
          };
          venoshock: {
              name: string;
              effect: string;
          };
          autotomize: {
              name: string;
              effect: string;
          };
          ragePowder: {
              name: string;
              effect: string;
          };
          telekinesis: {
              name: string;
              effect: string;
          };
          magicRoom: {
              name: string;
              effect: string;
          };
          smackDown: {
              name: string;
              effect: string;
          };
          stormThrow: {
              name: string;
              effect: string;
          };
          flameBurst: {
              name: string;
              effect: string;
          };
          sludgeWave: {
              name: string;
              effect: string;
          };
          quiverDance: {
              name: string;
              effect: string;
          };
          heavySlam: {
              name: string;
              effect: string;
          };
          synchronoise: {
              name: string;
              effect: string;
          };
          electroBall: {
              name: string;
              effect: string;
          };
          soak: {
              name: string;
              effect: string;
          };
          flameCharge: {
              name: string;
              effect: string;
          };
          coil: {
              name: string;
              effect: string;
          };
          lowSweep: {
              name: string;
              effect: string;
          };
          acidSpray: {
              name: string;
              effect: string;
          };
          foulPlay: {
              name: string;
              effect: string;
          };
          simpleBeam: {
              name: string;
              effect: string;
          };
          entrainment: {
              name: string;
              effect: string;
          };
          afterYou: {
              name: string;
              effect: string;
          };
          round: {
              name: string;
              effect: string;
          };
          echoedVoice: {
              name: string;
              effect: string;
          };
          chipAway: {
              name: string;
              effect: string;
          };
          clearSmog: {
              name: string;
              effect: string;
          };
          storedPower: {
              name: string;
              effect: string;
          };
          quickGuard: {
              name: string;
              effect: string;
          };
          allySwitch: {
              name: string;
              effect: string;
          };
          scald: {
              name: string;
              effect: string;
          };
          shellSmash: {
              name: string;
              effect: string;
          };
          healPulse: {
              name: string;
              effect: string;
          };
          hex: {
              name: string;
              effect: string;
          };
          skyDrop: {
              name: string;
              effect: string;
          };
          shiftGear: {
              name: string;
              effect: string;
          };
          circleThrow: {
              name: string;
              effect: string;
          };
          incinerate: {
              name: string;
              effect: string;
          };
          quash: {
              name: string;
              effect: string;
          };
          acrobatics: {
              name: string;
              effect: string;
          };
          reflectType: {
              name: string;
              effect: string;
          };
          retaliate: {
              name: string;
              effect: string;
          };
          finalGambit: {
              name: string;
              effect: string;
          };
          bestow: {
              name: string;
              effect: string;
          };
          inferno: {
              name: string;
              effect: string;
          };
          waterPledge: {
              name: string;
              effect: string;
          };
          firePledge: {
              name: string;
              effect: string;
          };
          grassPledge: {
              name: string;
              effect: string;
          };
          voltSwitch: {
              name: string;
              effect: string;
          };
          struggleBug: {
              name: string;
              effect: string;
          };
          bulldoze: {
              name: string;
              effect: string;
          };
          frostBreath: {
              name: string;
              effect: string;
          };
          dragonTail: {
              name: string;
              effect: string;
          };
          workUp: {
              name: string;
              effect: string;
          };
          electroweb: {
              name: string;
              effect: string;
          };
          wildCharge: {
              name: string;
              effect: string;
          };
          drillRun: {
              name: string;
              effect: string;
          };
          dualChop: {
              name: string;
              effect: string;
          };
          heartStamp: {
              name: string;
              effect: string;
          };
          hornLeech: {
              name: string;
              effect: string;
          };
          sacredSword: {
              name: string;
              effect: string;
          };
          razorShell: {
              name: string;
              effect: string;
          };
          heatCrash: {
              name: string;
              effect: string;
          };
          leafTornado: {
              name: string;
              effect: string;
          };
          steamroller: {
              name: string;
              effect: string;
          };
          cottonGuard: {
              name: string;
              effect: string;
          };
          nightDaze: {
              name: string;
              effect: string;
          };
          psystrike: {
              name: string;
              effect: string;
          };
          tailSlap: {
              name: string;
              effect: string;
          };
          hurricane: {
              name: string;
              effect: string;
          };
          headCharge: {
              name: string;
              effect: string;
          };
          gearGrind: {
              name: string;
              effect: string;
          };
          searingShot: {
              name: string;
              effect: string;
          };
          technoBlast: {
              name: string;
              effect: string;
          };
          relicSong: {
              name: string;
              effect: string;
          };
          secretSword: {
              name: string;
              effect: string;
          };
          glaciate: {
              name: string;
              effect: string;
          };
          boltStrike: {
              name: string;
              effect: string;
          };
          blueFlare: {
              name: string;
              effect: string;
          };
          fieryDance: {
              name: string;
              effect: string;
          };
          freezeShock: {
              name: string;
              effect: string;
          };
          iceBurn: {
              name: string;
              effect: string;
          };
          snarl: {
              name: string;
              effect: string;
          };
          icicleCrash: {
              name: string;
              effect: string;
          };
          vCreate: {
              name: string;
              effect: string;
          };
          fusionFlare: {
              name: string;
              effect: string;
          };
          fusionBolt: {
              name: string;
              effect: string;
          };
          flyingPress: {
              name: string;
              effect: string;
          };
          matBlock: {
              name: string;
              effect: string;
          };
          belch: {
              name: string;
              effect: string;
          };
          rototiller: {
              name: string;
              effect: string;
          };
          stickyWeb: {
              name: string;
              effect: string;
          };
          fellStinger: {
              name: string;
              effect: string;
          };
          phantomForce: {
              name: string;
              effect: string;
          };
          trickOrTreat: {
              name: string;
              effect: string;
          };
          nobleRoar: {
              name: string;
              effect: string;
          };
          ionDeluge: {
              name: string;
              effect: string;
          };
          parabolicCharge: {
              name: string;
              effect: string;
          };
          forestsCurse: {
              name: string;
              effect: string;
          };
          petalBlizzard: {
              name: string;
              effect: string;
          };
          freezeDry: {
              name: string;
              effect: string;
          };
          disarmingVoice: {
              name: string;
              effect: string;
          };
          partingShot: {
              name: string;
              effect: string;
          };
          topsyTurvy: {
              name: string;
              effect: string;
          };
          drainingKiss: {
              name: string;
              effect: string;
          };
          craftyShield: {
              name: string;
              effect: string;
          };
          flowerShield: {
              name: string;
              effect: string;
          };
          grassyTerrain: {
              name: string;
              effect: string;
          };
          mistyTerrain: {
              name: string;
              effect: string;
          };
          electrify: {
              name: string;
              effect: string;
          };
          playRough: {
              name: string;
              effect: string;
          };
          fairyWind: {
              name: string;
              effect: string;
          };
          moonblast: {
              name: string;
              effect: string;
          };
          boomburst: {
              name: string;
              effect: string;
          };
          fairyLock: {
              name: string;
              effect: string;
          };
          kingsShield: {
              name: string;
              effect: string;
          };
          playNice: {
              name: string;
              effect: string;
          };
          confide: {
              name: string;
              effect: string;
          };
          diamondStorm: {
              name: string;
              effect: string;
          };
          steamEruption: {
              name: string;
              effect: string;
          };
          hyperspaceHole: {
              name: string;
              effect: string;
          };
          waterShuriken: {
              name: string;
              effect: string;
          };
          mysticalFire: {
              name: string;
              effect: string;
          };
          spikyShield: {
              name: string;
              effect: string;
          };
          aromaticMist: {
              name: string;
              effect: string;
          };
          eerieImpulse: {
              name: string;
              effect: string;
          };
          venomDrench: {
              name: string;
              effect: string;
          };
          powder: {
              name: string;
              effect: string;
          };
          geomancy: {
              name: string;
              effect: string;
          };
          magneticFlux: {
              name: string;
              effect: string;
          };
          happyHour: {
              name: string;
              effect: string;
          };
          electricTerrain: {
              name: string;
              effect: string;
          };
          dazzlingGleam: {
              name: string;
              effect: string;
          };
          celebrate: {
              name: string;
              effect: string;
          };
          holdHands: {
              name: string;
              effect: string;
          };
          babyDollEyes: {
              name: string;
              effect: string;
          };
          nuzzle: {
              name: string;
              effect: string;
          };
          holdBack: {
              name: string;
              effect: string;
          };
          infestation: {
              name: string;
              effect: string;
          };
          powerUpPunch: {
              name: string;
              effect: string;
          };
          oblivionWing: {
              name: string;
              effect: string;
          };
          thousandArrows: {
              name: string;
              effect: string;
          };
          thousandWaves: {
              name: string;
              effect: string;
          };
          landsWrath: {
              name: string;
              effect: string;
          };
          lightOfRuin: {
              name: string;
              effect: string;
          };
          originPulse: {
              name: string;
              effect: string;
          };
          precipiceBlades: {
              name: string;
              effect: string;
          };
          dragonAscent: {
              name: string;
              effect: string;
          };
          hyperspaceFury: {
              name: string;
              effect: string;
          };
          breakneckBlitzPhysical: {
              name: string;
              effect: string;
          };
          breakneckBlitzSpecial: {
              name: string;
              effect: string;
          };
          allOutPummelingPhysical: {
              name: string;
              effect: string;
          };
          allOutPummelingSpecial: {
              name: string;
              effect: string;
          };
          supersonicSkystrikePhysical: {
              name: string;
              effect: string;
          };
          supersonicSkystrikeSpecial: {
              name: string;
              effect: string;
          };
          acidDownpourPhysical: {
              name: string;
              effect: string;
          };
          acidDownpourSpecial: {
              name: string;
              effect: string;
          };
          tectonicRagePhysical: {
              name: string;
              effect: string;
          };
          tectonicRageSpecial: {
              name: string;
              effect: string;
          };
          continentalCrushPhysical: {
              name: string;
              effect: string;
          };
          continentalCrushSpecial: {
              name: string;
              effect: string;
          };
          savageSpinOutPhysical: {
              name: string;
              effect: string;
          };
          savageSpinOutSpecial: {
              name: string;
              effect: string;
          };
          neverEndingNightmarePhysical: {
              name: string;
              effect: string;
          };
          neverEndingNightmareSpecial: {
              name: string;
              effect: string;
          };
          corkscrewCrashPhysical: {
              name: string;
              effect: string;
          };
          corkscrewCrashSpecial: {
              name: string;
              effect: string;
          };
          infernoOverdrivePhysical: {
              name: string;
              effect: string;
          };
          infernoOverdriveSpecial: {
              name: string;
              effect: string;
          };
          hydroVortexPhysical: {
              name: string;
              effect: string;
          };
          hydroVortexSpecial: {
              name: string;
              effect: string;
          };
          bloomDoomPhysical: {
              name: string;
              effect: string;
          };
          bloomDoomSpecial: {
              name: string;
              effect: string;
          };
          gigavoltHavocPhysical: {
              name: string;
              effect: string;
          };
          gigavoltHavocSpecial: {
              name: string;
              effect: string;
          };
          shatteredPsychePhysical: {
              name: string;
              effect: string;
          };
          shatteredPsycheSpecial: {
              name: string;
              effect: string;
          };
          subzeroSlammerPhysical: {
              name: string;
              effect: string;
          };
          subzeroSlammerSpecial: {
              name: string;
              effect: string;
          };
          devastatingDrakePhysical: {
              name: string;
              effect: string;
          };
          devastatingDrakeSpecial: {
              name: string;
              effect: string;
          };
          blackHoleEclipsePhysical: {
              name: string;
              effect: string;
          };
          blackHoleEclipseSpecial: {
              name: string;
              effect: string;
          };
          twinkleTacklePhysical: {
              name: string;
              effect: string;
          };
          twinkleTackleSpecial: {
              name: string;
              effect: string;
          };
          catastropika: {
              name: string;
              effect: string;
          };
          shoreUp: {
              name: string;
              effect: string;
          };
          firstImpression: {
              name: string;
              effect: string;
          };
          banefulBunker: {
              name: string;
              effect: string;
          };
          spiritShackle: {
              name: string;
              effect: string;
          };
          darkestLariat: {
              name: string;
              effect: string;
          };
          sparklingAria: {
              name: string;
              effect: string;
          };
          iceHammer: {
              name: string;
              effect: string;
          };
          floralHealing: {
              name: string;
              effect: string;
          };
          highHorsepower: {
              name: string;
              effect: string;
          };
          strengthSap: {
              name: string;
              effect: string;
          };
          solarBlade: {
              name: string;
              effect: string;
          };
          leafage: {
              name: string;
              effect: string;
          };
          spotlight: {
              name: string;
              effect: string;
          };
          toxicThread: {
              name: string;
              effect: string;
          };
          laserFocus: {
              name: string;
              effect: string;
          };
          gearUp: {
              name: string;
              effect: string;
          };
          throatChop: {
              name: string;
              effect: string;
          };
          pollenPuff: {
              name: string;
              effect: string;
          };
          anchorShot: {
              name: string;
              effect: string;
          };
          psychicTerrain: {
              name: string;
              effect: string;
          };
          lunge: {
              name: string;
              effect: string;
          };
          fireLash: {
              name: string;
              effect: string;
          };
          powerTrip: {
              name: string;
              effect: string;
          };
          burnUp: {
              name: string;
              effect: string;
          };
          speedSwap: {
              name: string;
              effect: string;
          };
          smartStrike: {
              name: string;
              effect: string;
          };
          purify: {
              name: string;
              effect: string;
          };
          revelationDance: {
              name: string;
              effect: string;
          };
          coreEnforcer: {
              name: string;
              effect: string;
          };
          tropKick: {
              name: string;
              effect: string;
          };
          instruct: {
              name: string;
              effect: string;
          };
          beakBlast: {
              name: string;
              effect: string;
          };
          clangingScales: {
              name: string;
              effect: string;
          };
          dragonHammer: {
              name: string;
              effect: string;
          };
          brutalSwing: {
              name: string;
              effect: string;
          };
          auroraVeil: {
              name: string;
              effect: string;
          };
          sinisterArrowRaid: {
              name: string;
              effect: string;
          };
          maliciousMoonsault: {
              name: string;
              effect: string;
          };
          oceanicOperetta: {
              name: string;
              effect: string;
          };
          guardianOfAlola: {
              name: string;
              effect: string;
          };
          soulStealing7StarStrike: {
              name: string;
              effect: string;
          };
          stokedSparksurfer: {
              name: string;
              effect: string;
          };
          pulverizingPancake: {
              name: string;
              effect: string;
          };
          extremeEvoboost: {
              name: string;
              effect: string;
          };
          genesisSupernova: {
              name: string;
              effect: string;
          };
          shellTrap: {
              name: string;
              effect: string;
          };
          fleurCannon: {
              name: string;
              effect: string;
          };
          psychicFangs: {
              name: string;
              effect: string;
          };
          stompingTantrum: {
              name: string;
              effect: string;
          };
          shadowBone: {
              name: string;
              effect: string;
          };
          accelerock: {
              name: string;
              effect: string;
          };
          liquidation: {
              name: string;
              effect: string;
          };
          prismaticLaser: {
              name: string;
              effect: string;
          };
          spectralThief: {
              name: string;
              effect: string;
          };
          sunsteelStrike: {
              name: string;
              effect: string;
          };
          moongeistBeam: {
              name: string;
              effect: string;
          };
          tearfulLook: {
              name: string;
              effect: string;
          };
          zingZap: {
              name: string;
              effect: string;
          };
          naturesMadness: {
              name: string;
              effect: string;
          };
          multiAttack: {
              name: string;
              effect: string;
          };
          tenMillionVoltThunderbolt: {
              name: string;
              effect: string;
          };
          mindBlown: {
              name: string;
              effect: string;
          };
          plasmaFists: {
              name: string;
              effect: string;
          };
          photonGeyser: {
              name: string;
              effect: string;
          };
          lightThatBurnsTheSky: {
              name: string;
              effect: string;
          };
          searingSunrazeSmash: {
              name: string;
              effect: string;
          };
          menacingMoonrazeMaelstrom: {
              name: string;
              effect: string;
          };
          letsSnuggleForever: {
              name: string;
              effect: string;
          };
          splinteredStormshards: {
              name: string;
              effect: string;
          };
          clangorousSoulblaze: {
              name: string;
              effect: string;
          };
          zippyZap: {
              name: string;
              effect: string;
          };
          splishySplash: {
              name: string;
              effect: string;
          };
          floatyFall: {
              name: string;
              effect: string;
          };
          pikaPapow: {
              name: string;
              effect: string;
          };
          bouncyBubble: {
              name: string;
              effect: string;
          };
          buzzyBuzz: {
              name: string;
              effect: string;
          };
          sizzlySlide: {
              name: string;
              effect: string;
          };
          glitzyGlow: {
              name: string;
              effect: string;
          };
          baddyBad: {
              name: string;
              effect: string;
          };
          sappySeed: {
              name: string;
              effect: string;
          };
          freezyFrost: {
              name: string;
              effect: string;
          };
          sparklySwirl: {
              name: string;
              effect: string;
          };
          veeveeVolley: {
              name: string;
              effect: string;
          };
          doubleIronBash: {
              name: string;
              effect: string;
          };
          maxGuard: {
              name: string;
              effect: string;
          };
          dynamaxCannon: {
              name: string;
              effect: string;
          };
          snipeShot: {
              name: string;
              effect: string;
          };
          jawLock: {
              name: string;
              effect: string;
          };
          stuffCheeks: {
              name: string;
              effect: string;
          };
          noRetreat: {
              name: string;
              effect: string;
          };
          tarShot: {
              name: string;
              effect: string;
          };
          magicPowder: {
              name: string;
              effect: string;
          };
          dragonDarts: {
              name: string;
              effect: string;
          };
          teatime: {
              name: string;
              effect: string;
          };
          octolock: {
              name: string;
              effect: string;
          };
          boltBeak: {
              name: string;
              effect: string;
          };
          fishiousRend: {
              name: string;
              effect: string;
          };
          courtChange: {
              name: string;
              effect: string;
          };
          maxFlare: {
              name: string;
              effect: string;
          };
          maxFlutterby: {
              name: string;
              effect: string;
          };
          maxLightning: {
              name: string;
              effect: string;
          };
          maxStrike: {
              name: string;
              effect: string;
          };
          maxKnuckle: {
              name: string;
              effect: string;
          };
          maxPhantasm: {
              name: string;
              effect: string;
          };
          maxHailstorm: {
              name: string;
              effect: string;
          };
          maxOoze: {
              name: string;
              effect: string;
          };
          maxGeyser: {
              name: string;
              effect: string;
          };
          maxAirstream: {
              name: string;
              effect: string;
          };
          maxStarfall: {
              name: string;
              effect: string;
          };
          maxWyrmwind: {
              name: string;
              effect: string;
          };
          maxMindstorm: {
              name: string;
              effect: string;
          };
          maxRockfall: {
              name: string;
              effect: string;
          };
          maxQuake: {
              name: string;
              effect: string;
          };
          maxDarkness: {
              name: string;
              effect: string;
          };
          maxOvergrowth: {
              name: string;
              effect: string;
          };
          maxSteelspike: {
              name: string;
              effect: string;
          };
          clangorousSoul: {
              name: string;
              effect: string;
          };
          bodyPress: {
              name: string;
              effect: string;
          };
          decorate: {
              name: string;
              effect: string;
          };
          drumBeating: {
              name: string;
              effect: string;
          };
          snapTrap: {
              name: string;
              effect: string;
          };
          pyroBall: {
              name: string;
              effect: string;
          };
          behemothBlade: {
              name: string;
              effect: string;
          };
          behemothBash: {
              name: string;
              effect: string;
          };
          auraWheel: {
              name: string;
              effect: string;
          };
          breakingSwipe: {
              name: string;
              effect: string;
          };
          branchPoke: {
              name: string;
              effect: string;
          };
          overdrive: {
              name: string;
              effect: string;
          };
          appleAcid: {
              name: string;
              effect: string;
          };
          gravApple: {
              name: string;
              effect: string;
          };
          spiritBreak: {
              name: string;
              effect: string;
          };
          strangeSteam: {
              name: string;
              effect: string;
          };
          lifeDew: {
              name: string;
              effect: string;
          };
          obstruct: {
              name: string;
              effect: string;
          };
          falseSurrender: {
              name: string;
              effect: string;
          };
          meteorAssault: {
              name: string;
              effect: string;
          };
          eternabeam: {
              name: string;
              effect: string;
          };
          steelBeam: {
              name: string;
              effect: string;
          };
          expandingForce: {
              name: string;
              effect: string;
          };
          steelRoller: {
              name: string;
              effect: string;
          };
          scaleShot: {
              name: string;
              effect: string;
          };
          meteorBeam: {
              name: string;
              effect: string;
          };
          shellSideArm: {
              name: string;
              effect: string;
          };
          mistyExplosion: {
              name: string;
              effect: string;
          };
          grassyGlide: {
              name: string;
              effect: string;
          };
          risingVoltage: {
              name: string;
              effect: string;
          };
          terrainPulse: {
              name: string;
              effect: string;
          };
          skitterSmack: {
              name: string;
              effect: string;
          };
          burningJealousy: {
              name: string;
              effect: string;
          };
          lashOut: {
              name: string;
              effect: string;
          };
          poltergeist: {
              name: string;
              effect: string;
          };
          corrosiveGas: {
              name: string;
              effect: string;
          };
          coaching: {
              name: string;
              effect: string;
          };
          flipTurn: {
              name: string;
              effect: string;
          };
          tripleAxel: {
              name: string;
              effect: string;
          };
          dualWingbeat: {
              name: string;
              effect: string;
          };
          scorchingSands: {
              name: string;
              effect: string;
          };
          jungleHealing: {
              name: string;
              effect: string;
          };
          wickedBlow: {
              name: string;
              effect: string;
          };
          surgingStrikes: {
              name: string;
              effect: string;
          };
          thunderCage: {
              name: string;
              effect: string;
          };
          dragonEnergy: {
              name: string;
              effect: string;
          };
          freezingGlare: {
              name: string;
              effect: string;
          };
          fieryWrath: {
              name: string;
              effect: string;
          };
          thunderousKick: {
              name: string;
              effect: string;
          };
          glacialLance: {
              name: string;
              effect: string;
          };
          astralBarrage: {
              name: string;
              effect: string;
          };
          eerieSpell: {
              name: string;
              effect: string;
          };
          direClaw: {
              name: string;
              effect: string;
          };
          psyshieldBash: {
              name: string;
              effect: string;
          };
          powerShift: {
              name: string;
              effect: string;
          };
          stoneAxe: {
              name: string;
              effect: string;
          };
          springtideStorm: {
              name: string;
              effect: string;
          };
          mysticalPower: {
              name: string;
              effect: string;
          };
          ragingFury: {
              name: string;
              effect: string;
          };
          waveCrash: {
              name: string;
              effect: string;
          };
          chloroblast: {
              name: string;
              effect: string;
          };
          mountainGale: {
              name: string;
              effect: string;
          };
          victoryDance: {
              name: string;
              effect: string;
          };
          headlongRush: {
              name: string;
              effect: string;
          };
          barbBarrage: {
              name: string;
              effect: string;
          };
          esperWing: {
              name: string;
              effect: string;
          };
          bitterMalice: {
              name: string;
              effect: string;
          };
          shelter: {
              name: string;
              effect: string;
          };
          tripleArrows: {
              name: string;
              effect: string;
          };
          infernalParade: {
              name: string;
              effect: string;
          };
          ceaselessEdge: {
              name: string;
              effect: string;
          };
          bleakwindStorm: {
              name: string;
              effect: string;
          };
          wildboltStorm: {
              name: string;
              effect: string;
          };
          sandsearStorm: {
              name: string;
              effect: string;
          };
          lunarBlessing: {
              name: string;
              effect: string;
          };
          takeHeart: {
              name: string;
              effect: string;
          };
          gMaxWildfire: {
              name: string;
              effect: string;
          };
          gMaxBefuddle: {
              name: string;
              effect: string;
          };
          gMaxVoltCrash: {
              name: string;
              effect: string;
          };
          gMaxGoldRush: {
              name: string;
              effect: string;
          };
          gMaxChiStrike: {
              name: string;
              effect: string;
          };
          gMaxTerror: {
              name: string;
              effect: string;
          };
          gMaxResonance: {
              name: string;
              effect: string;
          };
          gMaxCuddle: {
              name: string;
              effect: string;
          };
          gMaxReplenish: {
              name: string;
              effect: string;
          };
          gMaxMalodor: {
              name: string;
              effect: string;
          };
          gMaxStonesurge: {
              name: string;
              effect: string;
          };
          gMaxWindRage: {
              name: string;
              effect: string;
          };
          gMaxStunShock: {
              name: string;
              effect: string;
          };
          gMaxFinale: {
              name: string;
              effect: string;
          };
          gMaxDepletion: {
              name: string;
              effect: string;
          };
          gMaxGravitas: {
              name: string;
              effect: string;
          };
          gMaxVolcalith: {
              name: string;
              effect: string;
          };
          gMaxSandblast: {
              name: string;
              effect: string;
          };
          gMaxSnooze: {
              name: string;
              effect: string;
          };
          gMaxTartness: {
              name: string;
              effect: string;
          };
          gMaxSweetness: {
              name: string;
              effect: string;
          };
          gMaxSmite: {
              name: string;
              effect: string;
          };
          gMaxSteelsurge: {
              name: string;
              effect: string;
          };
          gMaxMeltdown: {
              name: string;
              effect: string;
          };
          gMaxFoamBurst: {
              name: string;
              effect: string;
          };
          gMaxCentiferno: {
              name: string;
              effect: string;
          };
          gMaxVineLash: {
              name: string;
              effect: string;
          };
          gMaxCannonade: {
              name: string;
              effect: string;
          };
          gMaxDrumSolo: {
              name: string;
              effect: string;
          };
          gMaxFireball: {
              name: string;
              effect: string;
          };
          gMaxHydrosnipe: {
              name: string;
              effect: string;
          };
          gMaxOneBlow: {
              name: string;
              effect: string;
          };
          gMaxRapidFlow: {
              name: string;
              effect: string;
          };
          teraBlast: {
              name: string;
              effect: string;
          };
          silkTrap: {
              name: string;
              effect: string;
          };
          axeKick: {
              name: string;
              effect: string;
          };
          lastRespects: {
              name: string;
              effect: string;
          };
          luminaCrash: {
              name: string;
              effect: string;
          };
          orderUp: {
              name: string;
              effect: string;
          };
          jetPunch: {
              name: string;
              effect: string;
          };
          spicyExtract: {
              name: string;
              effect: string;
          };
          spinOut: {
              name: string;
              effect: string;
          };
          populationBomb: {
              name: string;
              effect: string;
          };
          iceSpinner: {
              name: string;
              effect: string;
          };
          glaiveRush: {
              name: string;
              effect: string;
          };
          revivalBlessing: {
              name: string;
              effect: string;
          };
          saltCure: {
              name: string;
              effect: string;
          };
          tripleDive: {
              name: string;
              effect: string;
          };
          mortalSpin: {
              name: string;
              effect: string;
          };
          doodle: {
              name: string;
              effect: string;
          };
          filletAway: {
              name: string;
              effect: string;
          };
          kowtowCleave: {
              name: string;
              effect: string;
          };
          flowerTrick: {
              name: string;
              effect: string;
          };
          torchSong: {
              name: string;
              effect: string;
          };
          aquaStep: {
              name: string;
              effect: string;
          };
          ragingBull: {
              name: string;
              effect: string;
          };
          makeItRain: {
              name: string;
              effect: string;
          };
          psyblade: {
              name: string;
              effect: string;
          };
          hydroSteam: {
              name: string;
              effect: string;
          };
          ruination: {
              name: string;
              effect: string;
          };
          collisionCourse: {
              name: string;
              effect: string;
          };
          electroDrift: {
              name: string;
              effect: string;
          };
          shedTail: {
              name: string;
              effect: string;
          };
          chillyReception: {
              name: string;
              effect: string;
          };
          tidyUp: {
              name: string;
              effect: string;
          };
          snowscape: {
              name: string;
              effect: string;
          };
          pounce: {
              name: string;
              effect: string;
          };
          trailblaze: {
              name: string;
              effect: string;
          };
          chillingWater: {
              name: string;
              effect: string;
          };
          hyperDrill: {
              name: string;
              effect: string;
          };
          twinBeam: {
              name: string;
              effect: string;
          };
          rageFist: {
              name: string;
              effect: string;
          };
          armorCannon: {
              name: string;
              effect: string;
          };
          bitterBlade: {
              name: string;
              effect: string;
          };
          doubleShock: {
              name: string;
              effect: string;
          };
          gigatonHammer: {
              name: string;
              effect: string;
          };
          comeuppance: {
              name: string;
              effect: string;
          };
          aquaCutter: {
              name: string;
              effect: string;
          };
          blazingTorque: {
              name: string;
              effect: string;
          };
          wickedTorque: {
              name: string;
              effect: string;
          };
          noxiousTorque: {
              name: string;
              effect: string;
          };
          combatTorque: {
              name: string;
              effect: string;
          };
          magicalTorque: {
              name: string;
              effect: string;
          };
          bloodMoon: {
              name: string;
              effect: string;
          };
          matchaGotcha: {
              name: string;
              effect: string;
          };
          syrupBomb: {
              name: string;
              effect: string;
          };
          ivyCudgel: {
              name: string;
              effect: string;
          };
          electroShot: {
              name: string;
              effect: string;
          };
          teraStarstorm: {
              name: string;
              effect: string;
          };
          fickleBeam: {
              name: string;
              effect: string;
          };
          burningBulwark: {
              name: string;
              effect: string;
          };
          thunderclap: {
              name: string;
              effect: string;
          };
          mightyCleave: {
              name: string;
              effect: string;
          };
          tachyonCutter: {
              name: string;
              effect: string;
          };
          hardPress: {
              name: string;
              effect: string;
          };
          dragonCheer: {
              name: string;
              effect: string;
          };
          alluringVoice: {
              name: string;
              effect: string;
          };
          temperFlare: {
              name: string;
              effect: string;
          };
          supercellSlam: {
              name: string;
              effect: string;
          };
          psychicNoise: {
              name: string;
              effect: string;
          };
          upperHand: {
              name: string;
              effect: string;
          };
          malignantChain: {
              name: string;
              effect: string;
          };
      };
      nature: {
          Hardy: string;
          Lonely: string;
          Brave: string;
          Adamant: string;
          Naughty: string;
          Bold: string;
          Docile: string;
          Relaxed: string;
          Impish: string;
          Lax: string;
          Timid: string;
          Hasty: string;
          Serious: string;
          Jolly: string;
          Naive: string;
          Modest: string;
          Mild: string;
          Quiet: string;
          Bashful: string;
          Rash: string;
          Calm: string;
          Gentle: string;
          Sassy: string;
          Careful: string;
          Quirky: string;
      };
      pokeball: {
          pokeBall: string;
          greatBall: string;
          ultraBall: string;
          rogueBall: string;
          masterBall: string;
          luxuryBall: string;
      };
      pokemon: {
          bulbasaur: string;
          ivysaur: string;
          venusaur: string;
          charmander: string;
          charmeleon: string;
          charizard: string;
          squirtle: string;
          wartortle: string;
          blastoise: string;
          caterpie: string;
          metapod: string;
          butterfree: string;
          weedle: string;
          kakuna: string;
          beedrill: string;
          pidgey: string;
          pidgeotto: string;
          pidgeot: string;
          rattata: string;
          raticate: string;
          spearow: string;
          fearow: string;
          ekans: string;
          arbok: string;
          pikachu: string;
          raichu: string;
          sandshrew: string;
          sandslash: string;
          nidoran_f: string;
          nidorina: string;
          nidoqueen: string;
          nidoran_m: string;
          nidorino: string;
          nidoking: string;
          clefairy: string;
          clefable: string;
          vulpix: string;
          ninetales: string;
          jigglypuff: string;
          wigglytuff: string;
          zubat: string;
          golbat: string;
          oddish: string;
          gloom: string;
          vileplume: string;
          paras: string;
          parasect: string;
          venonat: string;
          venomoth: string;
          diglett: string;
          dugtrio: string;
          meowth: string;
          persian: string;
          psyduck: string;
          golduck: string;
          mankey: string;
          primeape: string;
          growlithe: string;
          arcanine: string;
          poliwag: string;
          poliwhirl: string;
          poliwrath: string;
          abra: string;
          kadabra: string;
          alakazam: string;
          machop: string;
          machoke: string;
          machamp: string;
          bellsprout: string;
          weepinbell: string;
          victreebel: string;
          tentacool: string;
          tentacruel: string;
          geodude: string;
          graveler: string;
          golem: string;
          ponyta: string;
          rapidash: string;
          slowpoke: string;
          slowbro: string;
          magnemite: string;
          magneton: string;
          farfetchd: string;
          doduo: string;
          dodrio: string;
          seel: string;
          dewgong: string;
          grimer: string;
          muk: string;
          shellder: string;
          cloyster: string;
          gastly: string;
          haunter: string;
          gengar: string;
          onix: string;
          drowzee: string;
          hypno: string;
          krabby: string;
          kingler: string;
          voltorb: string;
          electrode: string;
          exeggcute: string;
          exeggutor: string;
          cubone: string;
          marowak: string;
          hitmonlee: string;
          hitmonchan: string;
          lickitung: string;
          koffing: string;
          weezing: string;
          rhyhorn: string;
          rhydon: string;
          chansey: string;
          tangela: string;
          kangaskhan: string;
          horsea: string;
          seadra: string;
          goldeen: string;
          seaking: string;
          staryu: string;
          starmie: string;
          mr_mime: string;
          scyther: string;
          jynx: string;
          electabuzz: string;
          magmar: string;
          pinsir: string;
          tauros: string;
          magikarp: string;
          gyarados: string;
          lapras: string;
          ditto: string;
          eevee: string;
          vaporeon: string;
          jolteon: string;
          flareon: string;
          porygon: string;
          omanyte: string;
          omastar: string;
          kabuto: string;
          kabutops: string;
          aerodactyl: string;
          snorlax: string;
          articuno: string;
          zapdos: string;
          moltres: string;
          dratini: string;
          dragonair: string;
          dragonite: string;
          mewtwo: string;
          mew: string;
          chikorita: string;
          bayleef: string;
          meganium: string;
          cyndaquil: string;
          quilava: string;
          typhlosion: string;
          totodile: string;
          croconaw: string;
          feraligatr: string;
          sentret: string;
          furret: string;
          hoothoot: string;
          noctowl: string;
          ledyba: string;
          ledian: string;
          spinarak: string;
          ariados: string;
          crobat: string;
          chinchou: string;
          lanturn: string;
          pichu: string;
          cleffa: string;
          igglybuff: string;
          togepi: string;
          togetic: string;
          natu: string;
          xatu: string;
          mareep: string;
          flaaffy: string;
          ampharos: string;
          bellossom: string;
          marill: string;
          azumarill: string;
          sudowoodo: string;
          politoed: string;
          hoppip: string;
          skiploom: string;
          jumpluff: string;
          aipom: string;
          sunkern: string;
          sunflora: string;
          yanma: string;
          wooper: string;
          quagsire: string;
          espeon: string;
          umbreon: string;
          murkrow: string;
          slowking: string;
          misdreavus: string;
          unown: string;
          wobbuffet: string;
          girafarig: string;
          pineco: string;
          forretress: string;
          dunsparce: string;
          gligar: string;
          steelix: string;
          snubbull: string;
          granbull: string;
          qwilfish: string;
          scizor: string;
          shuckle: string;
          heracross: string;
          sneasel: string;
          teddiursa: string;
          ursaring: string;
          slugma: string;
          magcargo: string;
          swinub: string;
          piloswine: string;
          corsola: string;
          remoraid: string;
          octillery: string;
          delibird: string;
          mantine: string;
          skarmory: string;
          houndour: string;
          houndoom: string;
          kingdra: string;
          phanpy: string;
          donphan: string;
          porygon2: string;
          stantler: string;
          smeargle: string;
          tyrogue: string;
          hitmontop: string;
          smoochum: string;
          elekid: string;
          magby: string;
          miltank: string;
          blissey: string;
          raikou: string;
          entei: string;
          suicune: string;
          larvitar: string;
          pupitar: string;
          tyranitar: string;
          lugia: string;
          ho_oh: string;
          celebi: string;
          treecko: string;
          grovyle: string;
          sceptile: string;
          torchic: string;
          combusken: string;
          blaziken: string;
          mudkip: string;
          marshtomp: string;
          swampert: string;
          poochyena: string;
          mightyena: string;
          zigzagoon: string;
          linoone: string;
          wurmple: string;
          silcoon: string;
          beautifly: string;
          cascoon: string;
          dustox: string;
          lotad: string;
          lombre: string;
          ludicolo: string;
          seedot: string;
          nuzleaf: string;
          shiftry: string;
          taillow: string;
          swellow: string;
          wingull: string;
          pelipper: string;
          ralts: string;
          kirlia: string;
          gardevoir: string;
          surskit: string;
          masquerain: string;
          shroomish: string;
          breloom: string;
          slakoth: string;
          vigoroth: string;
          slaking: string;
          nincada: string;
          ninjask: string;
          shedinja: string;
          whismur: string;
          loudred: string;
          exploud: string;
          makuhita: string;
          hariyama: string;
          azurill: string;
          nosepass: string;
          skitty: string;
          delcatty: string;
          sableye: string;
          mawile: string;
          aron: string;
          lairon: string;
          aggron: string;
          meditite: string;
          medicham: string;
          electrike: string;
          manectric: string;
          plusle: string;
          minun: string;
          volbeat: string;
          illumise: string;
          roselia: string;
          gulpin: string;
          swalot: string;
          carvanha: string;
          sharpedo: string;
          wailmer: string;
          wailord: string;
          numel: string;
          camerupt: string;
          torkoal: string;
          spoink: string;
          grumpig: string;
          spinda: string;
          trapinch: string;
          vibrava: string;
          flygon: string;
          cacnea: string;
          cacturne: string;
          swablu: string;
          altaria: string;
          zangoose: string;
          seviper: string;
          lunatone: string;
          solrock: string;
          barboach: string;
          whiscash: string;
          corphish: string;
          crawdaunt: string;
          baltoy: string;
          claydol: string;
          lileep: string;
          cradily: string;
          anorith: string;
          armaldo: string;
          feebas: string;
          milotic: string;
          castform: string;
          kecleon: string;
          shuppet: string;
          banette: string;
          duskull: string;
          dusclops: string;
          tropius: string;
          chimecho: string;
          absol: string;
          wynaut: string;
          snorunt: string;
          glalie: string;
          spheal: string;
          sealeo: string;
          walrein: string;
          clamperl: string;
          huntail: string;
          gorebyss: string;
          relicanth: string;
          luvdisc: string;
          bagon: string;
          shelgon: string;
          salamence: string;
          beldum: string;
          metang: string;
          metagross: string;
          regirock: string;
          regice: string;
          registeel: string;
          latias: string;
          latios: string;
          kyogre: string;
          groudon: string;
          rayquaza: string;
          jirachi: string;
          deoxys: string;
          turtwig: string;
          grotle: string;
          torterra: string;
          chimchar: string;
          monferno: string;
          infernape: string;
          piplup: string;
          prinplup: string;
          empoleon: string;
          starly: string;
          staravia: string;
          staraptor: string;
          bidoof: string;
          bibarel: string;
          kricketot: string;
          kricketune: string;
          shinx: string;
          luxio: string;
          luxray: string;
          budew: string;
          roserade: string;
          cranidos: string;
          rampardos: string;
          shieldon: string;
          bastiodon: string;
          burmy: string;
          wormadam: string;
          mothim: string;
          combee: string;
          vespiquen: string;
          pachirisu: string;
          buizel: string;
          floatzel: string;
          cherubi: string;
          cherrim: string;
          shellos: string;
          gastrodon: string;
          ambipom: string;
          drifloon: string;
          drifblim: string;
          buneary: string;
          lopunny: string;
          mismagius: string;
          honchkrow: string;
          glameow: string;
          purugly: string;
          chingling: string;
          stunky: string;
          skuntank: string;
          bronzor: string;
          bronzong: string;
          bonsly: string;
          mime_jr: string;
          happiny: string;
          chatot: string;
          spiritomb: string;
          gible: string;
          gabite: string;
          garchomp: string;
          munchlax: string;
          riolu: string;
          lucario: string;
          hippopotas: string;
          hippowdon: string;
          skorupi: string;
          drapion: string;
          croagunk: string;
          toxicroak: string;
          carnivine: string;
          finneon: string;
          lumineon: string;
          mantyke: string;
          snover: string;
          abomasnow: string;
          weavile: string;
          magnezone: string;
          lickilicky: string;
          rhyperior: string;
          tangrowth: string;
          electivire: string;
          magmortar: string;
          togekiss: string;
          yanmega: string;
          leafeon: string;
          glaceon: string;
          gliscor: string;
          mamoswine: string;
          porygon_z: string;
          gallade: string;
          probopass: string;
          dusknoir: string;
          froslass: string;
          rotom: string;
          uxie: string;
          mesprit: string;
          azelf: string;
          dialga: string;
          palkia: string;
          heatran: string;
          regigigas: string;
          giratina: string;
          cresselia: string;
          phione: string;
          manaphy: string;
          darkrai: string;
          shaymin: string;
          arceus: string;
          victini: string;
          snivy: string;
          servine: string;
          serperior: string;
          tepig: string;
          pignite: string;
          emboar: string;
          oshawott: string;
          dewott: string;
          samurott: string;
          patrat: string;
          watchog: string;
          lillipup: string;
          herdier: string;
          stoutland: string;
          purrloin: string;
          liepard: string;
          pansage: string;
          simisage: string;
          pansear: string;
          simisear: string;
          panpour: string;
          simipour: string;
          munna: string;
          musharna: string;
          pidove: string;
          tranquill: string;
          unfezant: string;
          blitzle: string;
          zebstrika: string;
          roggenrola: string;
          boldore: string;
          gigalith: string;
          woobat: string;
          swoobat: string;
          drilbur: string;
          excadrill: string;
          audino: string;
          timburr: string;
          gurdurr: string;
          conkeldurr: string;
          tympole: string;
          palpitoad: string;
          seismitoad: string;
          throh: string;
          sawk: string;
          sewaddle: string;
          swadloon: string;
          leavanny: string;
          venipede: string;
          whirlipede: string;
          scolipede: string;
          cottonee: string;
          whimsicott: string;
          petilil: string;
          lilligant: string;
          basculin: string;
          sandile: string;
          krokorok: string;
          krookodile: string;
          darumaka: string;
          darmanitan: string;
          maractus: string;
          dwebble: string;
          crustle: string;
          scraggy: string;
          scrafty: string;
          sigilyph: string;
          yamask: string;
          cofagrigus: string;
          tirtouga: string;
          carracosta: string;
          archen: string;
          archeops: string;
          trubbish: string;
          garbodor: string;
          zorua: string;
          zoroark: string;
          minccino: string;
          cinccino: string;
          gothita: string;
          gothorita: string;
          gothitelle: string;
          solosis: string;
          duosion: string;
          reuniclus: string;
          ducklett: string;
          swanna: string;
          vanillite: string;
          vanillish: string;
          vanilluxe: string;
          deerling: string;
          sawsbuck: string;
          emolga: string;
          karrablast: string;
          escavalier: string;
          foongus: string;
          amoonguss: string;
          frillish: string;
          jellicent: string;
          alomomola: string;
          joltik: string;
          galvantula: string;
          ferroseed: string;
          ferrothorn: string;
          klink: string;
          klang: string;
          klinklang: string;
          tynamo: string;
          eelektrik: string;
          eelektross: string;
          elgyem: string;
          beheeyem: string;
          litwick: string;
          lampent: string;
          chandelure: string;
          axew: string;
          fraxure: string;
          haxorus: string;
          cubchoo: string;
          beartic: string;
          cryogonal: string;
          shelmet: string;
          accelgor: string;
          stunfisk: string;
          mienfoo: string;
          mienshao: string;
          druddigon: string;
          golett: string;
          golurk: string;
          pawniard: string;
          bisharp: string;
          bouffalant: string;
          rufflet: string;
          braviary: string;
          vullaby: string;
          mandibuzz: string;
          heatmor: string;
          durant: string;
          deino: string;
          zweilous: string;
          hydreigon: string;
          larvesta: string;
          volcarona: string;
          cobalion: string;
          terrakion: string;
          virizion: string;
          tornadus: string;
          thundurus: string;
          reshiram: string;
          zekrom: string;
          landorus: string;
          kyurem: string;
          keldeo: string;
          meloetta: string;
          genesect: string;
          chespin: string;
          quilladin: string;
          chesnaught: string;
          fennekin: string;
          braixen: string;
          delphox: string;
          froakie: string;
          frogadier: string;
          greninja: string;
          bunnelby: string;
          diggersby: string;
          fletchling: string;
          fletchinder: string;
          talonflame: string;
          scatterbug: string;
          spewpa: string;
          vivillon: string;
          litleo: string;
          pyroar: string;
          flabebe: string;
          floette: string;
          florges: string;
          skiddo: string;
          gogoat: string;
          pancham: string;
          pangoro: string;
          furfrou: string;
          espurr: string;
          meowstic: string;
          honedge: string;
          doublade: string;
          aegislash: string;
          spritzee: string;
          aromatisse: string;
          swirlix: string;
          slurpuff: string;
          inkay: string;
          malamar: string;
          binacle: string;
          barbaracle: string;
          skrelp: string;
          dragalge: string;
          clauncher: string;
          clawitzer: string;
          helioptile: string;
          heliolisk: string;
          tyrunt: string;
          tyrantrum: string;
          amaura: string;
          aurorus: string;
          sylveon: string;
          hawlucha: string;
          dedenne: string;
          carbink: string;
          goomy: string;
          sliggoo: string;
          goodra: string;
          klefki: string;
          phantump: string;
          trevenant: string;
          pumpkaboo: string;
          gourgeist: string;
          bergmite: string;
          avalugg: string;
          noibat: string;
          noivern: string;
          xerneas: string;
          yveltal: string;
          zygarde: string;
          diancie: string;
          hoopa: string;
          volcanion: string;
          rowlet: string;
          dartrix: string;
          decidueye: string;
          litten: string;
          torracat: string;
          incineroar: string;
          popplio: string;
          brionne: string;
          primarina: string;
          pikipek: string;
          trumbeak: string;
          toucannon: string;
          yungoos: string;
          gumshoos: string;
          grubbin: string;
          charjabug: string;
          vikavolt: string;
          crabrawler: string;
          crabominable: string;
          oricorio: string;
          cutiefly: string;
          ribombee: string;
          rockruff: string;
          lycanroc: string;
          wishiwashi: string;
          mareanie: string;
          toxapex: string;
          mudbray: string;
          mudsdale: string;
          dewpider: string;
          araquanid: string;
          fomantis: string;
          lurantis: string;
          morelull: string;
          shiinotic: string;
          salandit: string;
          salazzle: string;
          stufful: string;
          bewear: string;
          bounsweet: string;
          steenee: string;
          tsareena: string;
          comfey: string;
          oranguru: string;
          passimian: string;
          wimpod: string;
          golisopod: string;
          sandygast: string;
          palossand: string;
          pyukumuku: string;
          type_null: string;
          silvally: string;
          minior: string;
          komala: string;
          turtonator: string;
          togedemaru: string;
          mimikyu: string;
          bruxish: string;
          drampa: string;
          dhelmise: string;
          jangmo_o: string;
          hakamo_o: string;
          kommo_o: string;
          tapu_koko: string;
          tapu_lele: string;
          tapu_bulu: string;
          tapu_fini: string;
          cosmog: string;
          cosmoem: string;
          solgaleo: string;
          lunala: string;
          nihilego: string;
          buzzwole: string;
          pheromosa: string;
          xurkitree: string;
          celesteela: string;
          kartana: string;
          guzzlord: string;
          necrozma: string;
          magearna: string;
          marshadow: string;
          poipole: string;
          naganadel: string;
          stakataka: string;
          blacephalon: string;
          zeraora: string;
          meltan: string;
          melmetal: string;
          grookey: string;
          thwackey: string;
          rillaboom: string;
          scorbunny: string;
          raboot: string;
          cinderace: string;
          sobble: string;
          drizzile: string;
          inteleon: string;
          skwovet: string;
          greedent: string;
          rookidee: string;
          corvisquire: string;
          corviknight: string;
          blipbug: string;
          dottler: string;
          orbeetle: string;
          nickit: string;
          thievul: string;
          gossifleur: string;
          eldegoss: string;
          wooloo: string;
          dubwool: string;
          chewtle: string;
          drednaw: string;
          yamper: string;
          boltund: string;
          rolycoly: string;
          carkol: string;
          coalossal: string;
          applin: string;
          flapple: string;
          appletun: string;
          silicobra: string;
          sandaconda: string;
          cramorant: string;
          arrokuda: string;
          barraskewda: string;
          toxel: string;
          toxtricity: string;
          sizzlipede: string;
          centiskorch: string;
          clobbopus: string;
          grapploct: string;
          sinistea: string;
          polteageist: string;
          hatenna: string;
          hattrem: string;
          hatterene: string;
          impidimp: string;
          morgrem: string;
          grimmsnarl: string;
          obstagoon: string;
          perrserker: string;
          cursola: string;
          sirfetchd: string;
          mr_rime: string;
          runerigus: string;
          milcery: string;
          alcremie: string;
          falinks: string;
          pincurchin: string;
          snom: string;
          frosmoth: string;
          stonjourner: string;
          eiscue: string;
          indeedee: string;
          morpeko: string;
          cufant: string;
          copperajah: string;
          dracozolt: string;
          arctozolt: string;
          dracovish: string;
          arctovish: string;
          duraludon: string;
          dreepy: string;
          drakloak: string;
          dragapult: string;
          zacian: string;
          zamazenta: string;
          eternatus: string;
          kubfu: string;
          urshifu: string;
          zarude: string;
          regieleki: string;
          regidrago: string;
          glastrier: string;
          spectrier: string;
          calyrex: string;
          wyrdeer: string;
          kleavor: string;
          ursaluna: string;
          basculegion: string;
          sneasler: string;
          overqwil: string;
          enamorus: string;
          sprigatito: string;
          floragato: string;
          meowscarada: string;
          fuecoco: string;
          crocalor: string;
          skeledirge: string;
          quaxly: string;
          quaxwell: string;
          quaquaval: string;
          lechonk: string;
          oinkologne: string;
          tarountula: string;
          spidops: string;
          nymble: string;
          lokix: string;
          pawmi: string;
          pawmo: string;
          pawmot: string;
          tandemaus: string;
          maushold: string;
          fidough: string;
          dachsbun: string;
          smoliv: string;
          dolliv: string;
          arboliva: string;
          squawkabilly: string;
          nacli: string;
          naclstack: string;
          garganacl: string;
          charcadet: string;
          armarouge: string;
          ceruledge: string;
          tadbulb: string;
          bellibolt: string;
          wattrel: string;
          kilowattrel: string;
          maschiff: string;
          mabosstiff: string;
          shroodle: string;
          grafaiai: string;
          bramblin: string;
          brambleghast: string;
          toedscool: string;
          toedscruel: string;
          klawf: string;
          capsakid: string;
          scovillain: string;
          rellor: string;
          rabsca: string;
          flittle: string;
          espathra: string;
          tinkatink: string;
          tinkatuff: string;
          tinkaton: string;
          wiglett: string;
          wugtrio: string;
          bombirdier: string;
          finizen: string;
          palafin: string;
          varoom: string;
          revavroom: string;
          cyclizar: string;
          orthworm: string;
          glimmet: string;
          glimmora: string;
          greavard: string;
          houndstone: string;
          flamigo: string;
          cetoddle: string;
          cetitan: string;
          veluza: string;
          dondozo: string;
          tatsugiri: string;
          annihilape: string;
          clodsire: string;
          farigiraf: string;
          dudunsparce: string;
          kingambit: string;
          great_tusk: string;
          scream_tail: string;
          brute_bonnet: string;
          flutter_mane: string;
          slither_wing: string;
          sandy_shocks: string;
          iron_treads: string;
          iron_bundle: string;
          iron_hands: string;
          iron_jugulis: string;
          iron_moth: string;
          iron_thorns: string;
          frigibax: string;
          arctibax: string;
          baxcalibur: string;
          gimmighoul: string;
          gholdengo: string;
          wo_chien: string;
          chien_pao: string;
          ting_lu: string;
          chi_yu: string;
          roaring_moon: string;
          iron_valiant: string;
          koraidon: string;
          miraidon: string;
          walking_wake: string;
          iron_leaves: string;
          dipplin: string;
          poltchageist: string;
          sinistcha: string;
          okidogi: string;
          munkidori: string;
          fezandipiti: string;
          ogerpon: string;
          archaludon: string;
          hydrapple: string;
          gouging_fire: string;
          raging_bolt: string;
          iron_boulder: string;
          iron_crown: string;
          terapagos: string;
          pecharunt: string;
          alola_rattata: string;
          alola_raticate: string;
          alola_raichu: string;
          alola_sandshrew: string;
          alola_sandslash: string;
          alola_vulpix: string;
          alola_ninetales: string;
          alola_diglett: string;
          alola_dugtrio: string;
          alola_meowth: string;
          alola_persian: string;
          alola_geodude: string;
          alola_graveler: string;
          alola_golem: string;
          alola_grimer: string;
          alola_muk: string;
          alola_exeggutor: string;
          alola_marowak: string;
          eternal_floette: string;
          galar_meowth: string;
          galar_ponyta: string;
          galar_rapidash: string;
          galar_slowpoke: string;
          galar_slowbro: string;
          galar_farfetchd: string;
          galar_weezing: string;
          galar_mr_mime: string;
          galar_articuno: string;
          galar_zapdos: string;
          galar_moltres: string;
          galar_slowking: string;
          galar_corsola: string;
          galar_zigzagoon: string;
          galar_linoone: string;
          galar_darumaka: string;
          galar_darmanitan: string;
          galar_yamask: string;
          galar_stunfisk: string;
          hisui_growlithe: string;
          hisui_arcanine: string;
          hisui_voltorb: string;
          hisui_electrode: string;
          hisui_typhlosion: string;
          hisui_qwilfish: string;
          hisui_sneasel: string;
          hisui_samurott: string;
          hisui_lilligant: string;
          hisui_zorua: string;
          hisui_zoroark: string;
          hisui_braviary: string;
          hisui_sliggoo: string;
          hisui_goodra: string;
          hisui_avalugg: string;
          hisui_decidueye: string;
          paldea_tauros: string;
          paldea_wooper: string;
          bloodmoon_ursaluna: string;
      };
      pokemonForm: {
          pikachuCosplay: string;
          pikachuCoolCosplay: string;
          pikachuBeautyCosplay: string;
          pikachuCuteCosplay: string;
          pikachuSmartCosplay: string;
          pikachuToughCosplay: string;
          pikachuPartner: string;
          eeveePartner: string;
          pichuSpiky: string;
          unownA: string;
          unownB: string;
          unownC: string;
          unownD: string;
          unownE: string;
          unownF: string;
          unownG: string;
          unownH: string;
          unownI: string;
          unownJ: string;
          unownK: string;
          unownL: string;
          unownM: string;
          unownN: string;
          unownO: string;
          unownP: string;
          unownQ: string;
          unownR: string;
          unownS: string;
          unownT: string;
          unownU: string;
          unownV: string;
          unownW: string;
          unownX: string;
          unownY: string;
          unownZ: string;
          unownExclamation: string;
          unownQuestion: string;
          castformSunny: string;
          castformRainy: string;
          castformSnowy: string;
          deoxysNormal: string;
          burmyPlant: string;
          burmySandy: string;
          burmyTrash: string;
          shellosEast: string;
          shellosWest: string;
          rotomHeat: string;
          rotomWash: string;
          rotomFrost: string;
          rotomFan: string;
          rotomMow: string;
          giratinaAltered: string;
          shayminLand: string;
          basculinRedStriped: string;
          basculinBlueStriped: string;
          basculinWhiteStriped: string;
          deerlingSpring: string;
          deerlingSummer: string;
          deerlingAutumn: string;
          deerlingWinter: string;
          tornadusIncarnate: string;
          thundurusIncarnate: string;
          landorusIncarnate: string;
          keldeoOrdinary: string;
          meloettaAria: string;
          meloettaPirouette: string;
          froakieBattleBond: string;
          scatterbugMeadow: string;
          scatterbugIcySnow: string;
          scatterbugPolar: string;
          scatterbugTundra: string;
          scatterbugContinental: string;
          scatterbugGarden: string;
          scatterbugElegant: string;
          scatterbugModern: string;
          scatterbugMarine: string;
          scatterbugArchipelago: string;
          scatterbugHighPlains: string;
          scatterbugSandstorm: string;
          scatterbugRiver: string;
          scatterbugMonsoon: string;
          scatterbugSavanna: string;
          scatterbugSun: string;
          scatterbugOcean: string;
          scatterbugJungle: string;
          scatterbugFancy: string;
          scatterbugPokeBall: string;
          flabebeRed: string;
          flabebeYellow: string;
          flabebeOrange: string;
          flabebeBlue: string;
          flabebeWhite: string;
          furfrouHeart: string;
          furfrouStar: string;
          furfrouDiamond: string;
          furfrouDebutante: string;
          furfrouMatron: string;
          furfrouDandy: string;
          furfrouLaReine: string;
          furfrouKabuki: string;
          furfrouPharaoh: string;
          pumpkabooSmall: string;
          pumpkabooLarge: string;
          pumpkabooSuper: string;
          xerneasNeutral: string;
          xerneasActive: string;
          zygarde50: string;
          zygarde10: string;
          zygarde50Pc: string;
          zygarde10Pc: string;
          zygardeComplete: string;
          oricorioBaile: string;
          oricorioPompom: string;
          oricorioPau: string;
          oricorioSensu: string;
          rockruffOwnTempo: string;
          miniorRedMeteor: string;
          miniorOrangeMeteor: string;
          miniorYellowMeteor: string;
          miniorGreenMeteor: string;
          miniorBlueMeteor: string;
          miniorIndigoMeteor: string;
          miniorVioletMeteor: string;
          miniorRed: string;
          miniorOrange: string;
          miniorYellow: string;
          miniorGreen: string;
          miniorBlue: string;
          miniorIndigo: string;
          miniorViolet: string;
          mimikyuDisguised: string;
          mimikyuBusted: string;
          magearnaOriginal: string;
          marshadowZenith: string;
          sinisteaPhony: string;
          sinisteaAntique: string;
          eiscueNoIce: string;
          indeedeeMale: string;
          indeedeeFemale: string;
          morpekoFullBelly: string;
          zacianHeroOfManyBattles: string;
          zamazentaHeroOfManyBattles: string;
          zarudeDada: string;
          enamorusIncarnate: string;
          squawkabillyGreenPlumage: string;
          squawkabillyBluePlumage: string;
          squawkabillyYellowPlumage: string;
          squawkabillyWhitePlumage: string;
          tatsugiriCurly: string;
          tatsugiriDroopy: string;
          tatsugiriStretchy: string;
          gimmighoulChest: string;
          gimmighoulRoaming: string;
          koraidonApexBuild: string;
          koraidonLimitedBuild: string;
          koraidonSprintingBuild: string;
          koraidonSwimmingBuild: string;
          koraidonGlidingBuild: string;
          miraidonUltimateMode: string;
          miraidonLowPowerMode: string;
          miraidonDriveMode: string;
          miraidonAquaticMode: string;
          miraidonGlideMode: string;
          poltchageistCounterfeit: string;
          poltchageistArtisan: string;
          paldeaTaurosCombat: string;
          paldeaTaurosBlaze: string;
          paldeaTaurosAqua: string;
      };
      pokemonInfo: {
          Stat: {
              HP: string;
              HPshortened: string;
              ATK: string;
              ATKshortened: string;
              DEF: string;
              DEFshortened: string;
              SPATK: string;
              SPATKshortened: string;
              SPDEF: string;
              SPDEFshortened: string;
              SPD: string;
              SPDshortened: string;
              ACC: string;
              EVA: string;
              HPStat: string;
          };
          Type: {
              UNKNOWN: string;
              NORMAL: string;
              FIGHTING: string;
              FLYING: string;
              POISON: string;
              GROUND: string;
              ROCK: string;
              BUG: string;
              GHOST: string;
              STEEL: string;
              FIRE: string;
              WATER: string;
              GRASS: string;
              ELECTRIC: string;
              PSYCHIC: string;
              ICE: string;
              DRAGON: string;
              DARK: string;
              FAIRY: string;
              STELLAR: string;
          };
      };
      pokemonInfoContainer: {
          moveset: string;
          gender: string;
          ability: string;
          nature: string;
          form: string;
      };
      pokemonSummary: {
          pokemonInfo: string;
          status: string;
          powerAccuracyCategory: string;
          type: string;
          unknownTrainer: string;
          ot: string;
          nature: string;
          expPoints: string;
          nextLv: string;
          cancel: string;
          memoString: string;
          metFragment: {
              normal: string;
              apparently: string;
          };
          natureFragment: {
              Hardy: string;
              Lonely: string;
              Brave: string;
              Adamant: string;
              Naughty: string;
              Bold: string;
              Docile: string;
              Relaxed: string;
              Impish: string;
              Lax: string;
              Timid: string;
              Hasty: string;
              Serious: string;
              Jolly: string;
              Naive: string;
              Modest: string;
              Mild: string;
              Quiet: string;
              Bashful: string;
              Rash: string;
              Calm: string;
              Gentle: string;
              Sassy: string;
              Careful: string;
              Quirky: string;
          };
      };
      saveSlotSelectUiHandler: {
          overwriteData: string;
          loading: string;
          wave: string;
          lv: string;
          empty: string;
      };
      settings: {
          boy: string;
          girl: string;
          general: string;
          display: string;
          audio: string;
          gamepad: string;
          keyboard: string;
          gameSpeed: string;
          hpBarSpeed: string;
          expGainsSpeed: string;
          expPartyDisplay: string;
          skipSeenDialogues: string;
          battleStyle: string;
          enableRetries: string;
          hideIvs: string;
          tutorials: string;
          touchControls: string;
          vibrations: string;
          normal: string;
          fast: string;
          faster: string;
          skip: string;
          levelUpNotifications: string;
          on: string;
          off: string;
          switch: string;
          set: string;
          auto: string;
          disabled: string;
          language: string;
          change: string;
          uiTheme: string;
          default: string;
          legacy: string;
          windowType: string;
          moneyFormat: string;
          damageNumbers: string;
          simple: string;
          fancy: string;
          abbreviated: string;
          moveAnimations: string;
          showStatsOnLevelUp: string;
          candyUpgradeNotification: string;
          passivesOnly: string;
          candyUpgradeDisplay: string;
          icon: string;
          animation: string;
          moveInfo: string;
          showMovesetFlyout: string;
          showArenaFlyout: string;
          showTimeOfDayWidget: string;
          timeOfDayAnimation: string;
          bounce: string;
          timeOfDay_back: string;
          spriteSet: string;
          consistent: string;
          mixedAnimated: string;
          fusionPaletteSwaps: string;
          playerGender: string;
          typeHints: string;
          masterVolume: string;
          bgmVolume: string;
          fieldVolume: string;
          seVolume: string;
          uiVolume: string;
          musicPreference: string;
          mixed: string;
          gamepadPleasePlug: string;
          delete: string;
          keyboardPleasePress: string;
          reset: string;
          requireReload: string;
          action: string;
          back: string;
          pressToBind: string;
          pressButton: string;
          buttonUp: string;
          buttonDown: string;
          buttonLeft: string;
          buttonRight: string;
          buttonAction: string;
          buttonMenu: string;
          buttonSubmit: string;
          buttonCancel: string;
          buttonStats: string;
          buttonCycleForm: string;
          buttonCycleShiny: string;
          buttonCycleGender: string;
          buttonCycleAbility: string;
          buttonCycleNature: string;
          buttonCycleVariant: string;
          buttonSpeedUp: string;
          buttonSlowDown: string;
          alt: string;
          mute: string;
          controller: string;
          gamepadSupport: string;
          showBgmBar: string;
          moveTouchControls: string;
          shopOverlayOpacity: string;
          shopCursorTarget: string;
          rewards: string;
          reroll: string;
          shop: string;
          checkTeam: string;
      };
      splashMessages: {
          battlesWon: string;
          joinTheDiscord: string;
          infiniteLevels: string;
          everythingStacks: string;
          optionalSaveScumming: string;
          biomes: string;
          openSource: string;
          playWithSpeed: string;
          liveBugTesting: string;
          heavyInfluence: string;
          pokemonRiskAndPokemonRain: string;
          nowWithMoreSalt: string;
          infiniteFusionAtHome: string;
          brokenEggMoves: string;
          magnificent: string;
          mubstitute: string;
          thatsCrazy: string;
          oranceJuice: string;
          questionableBalancing: string;
          coolShaders: string;
          aiFree: string;
          suddenDifficultySpikes: string;
          basedOnAnUnfinishedFlashGame: string;
          moreAddictiveThanIntended: string;
          mostlyConsistentSeeds: string;
          achievementPointsDontDoAnything: string;
          youDoNotStartAtLevel: string;
          dontTalkAboutTheManaphyEggIncident: string;
          alsoTryPokengine: string;
          alsoTryEmeraldRogue: string;
          alsoTryRadicalRed: string;
          eeveeExpo: string;
          ynoproject: string;
          breedersInSpace: string;
      };
      starterSelectUiHandler: {
          confirmStartTeam: string;
          confirmExit: string;
          invalidParty: string;
          gen1: string;
          gen2: string;
          gen3: string;
          gen4: string;
          gen5: string;
          gen6: string;
          gen7: string;
          gen8: string;
          gen9: string;
          growthRate: string;
          ability: string;
          passive: string;
          nature: string;
          eggMoves: string;
          addToParty: string;
          removeFromParty: string;
          toggleIVs: string;
          manageMoves: string;
          manageNature: string;
          addToFavorites: string;
          removeFromFavorites: string;
          useCandies: string;
          selectNature: string;
          selectMoveSwapOut: string;
          selectMoveSwapWith: string;
          sameSpeciesEgg: string;
          unlockPassive: string;
          reduceCost: string;
          cycleShiny: string;
          cycleForm: string;
          cycleGender: string;
          cycleAbility: string;
          cycleNature: string;
          cycleVariant: string;
          goFilter: string;
          enablePassive: string;
          disablePassive: string;
          locked: string;
          disabled: string;
          uncaught: string;
      };
      statusEffect: {
          none: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          poison: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          toxic: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          paralysis: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          sleep: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          freeze: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          burn: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
      };
      terrain: {
          misty: string;
          mistyStartMessage: string;
          mistyClearMessage: string;
          mistyBlockMessage: string;
          electric: string;
          electricStartMessage: string;
          electricClearMessage: string;
          grassy: string;
          grassyStartMessage: string;
          grassyClearMessage: string;
          psychic: string;
          psychicStartMessage: string;
          psychicClearMessage: string;
          defaultBlockMessage: string;
      };
      titles: {
          elite_four: string;
          elite_four_female: string;
          gym_leader: string;
          gym_leader_female: string;
          gym_leader_double: string;
          champion: string;
          champion_female: string;
          champion_double: string;
          rival: string;
          professor: string;
          frontier_brain: string;
          rocket_boss: string;
          magma_boss: string;
          aqua_boss: string;
          galactic_boss: string;
          plasma_boss: string;
          flare_boss: string;
          aether_boss: string;
          skull_boss: string;
          macro_boss: string;
          rocket_admin: string;
          rocket_admin_female: string;
          magma_admin: string;
          magma_admin_female: string;
          aqua_admin: string;
          aqua_admin_female: string;
          galactic_commander: string;
          galactic_commander_female: string;
          plasma_sage: string;
          plasma_admin: string;
          flare_admin: string;
          flare_admin_female: string;
          aether_admin: string;
          skull_admin: string;
          macro_admin: string;
      };
      trainerClasses: {
          ace_trainer: string;
          ace_trainer_female: string;
          ace_duo: string;
          artist: string;
          artist_female: string;
          backers: string;
          backpacker: string;
          backpacker_female: string;
          backpackers: string;
          baker: string;
          battle_girl: string;
          beauty: string;
          beginners: string;
          biker: string;
          black_belt: string;
          breeder: string;
          breeder_female: string;
          breeders: string;
          clerk: string;
          clerk_female: string;
          colleagues: string;
          crush_kin: string;
          cyclist: string;
          cyclist_female: string;
          cyclists: string;
          dancer: string;
          dancer_female: string;
          depot_agent: string;
          doctor: string;
          doctor_female: string;
          firebreather: string;
          fisherman: string;
          fisherman_female: string;
          gentleman: string;
          guitarist: string;
          guitarist_female: string;
          harlequin: string;
          hiker: string;
          hooligans: string;
          hoopster: string;
          infielder: string;
          janitor: string;
          lady: string;
          lass: string;
          linebacker: string;
          maid: string;
          madame: string;
          medical_team: string;
          musician: string;
          hex_maniac: string;
          nurse: string;
          nursery_aide: string;
          officer: string;
          parasol_lady: string;
          pilot: string;
          pokéfan: string;
          pokéfan_female: string;
          pokéfan_family: string;
          preschooler: string;
          preschooler_female: string;
          preschoolers: string;
          psychic: string;
          psychic_female: string;
          psychics: string;
          pokémon_ranger: string;
          pokémon_ranger_female: string;
          pokémon_rangers: string;
          ranger: string;
          restaurant_staff: string;
          rich: string;
          rich_female: string;
          rich_boy: string;
          rich_couple: string;
          rich_kid: string;
          rich_kid_female: string;
          rich_kids: string;
          roughneck: string;
          sailor: string;
          scientist: string;
          scientist_female: string;
          scientists: string;
          smasher: string;
          snow_worker: string;
          snow_worker_female: string;
          striker: string;
          school_kid: string;
          school_kid_female: string;
          school_kids: string;
          swimmer: string;
          swimmer_female: string;
          swimmers: string;
          twins: string;
          veteran: string;
          veteran_female: string;
          veteran_duo: string;
          waiter: string;
          waitress: string;
          worker: string;
          worker_female: string;
          workers: string;
          youngster: string;
          rocket_grunt: string;
          rocket_grunts: string;
          rocket_grunt_female: string;
          magma_grunt: string;
          magma_grunt_female: string;
          magma_grunts: string;
          aqua_grunt: string;
          aqua_grunt_female: string;
          aqua_grunts: string;
          galactic_grunt: string;
          galactic_grunt_female: string;
          galactic_grunts: string;
          plasma_grunt: string;
          plasma_grunt_female: string;
          plasma_grunts: string;
          flare_grunt: string;
          flare_grunt_female: string;
          flare_grunts: string;
          aether_grunt: string;
          aether_grunt_female: string;
          aether_grunts: string;
          skull_grunt: string;
          skull_grunt_female: string;
          skull_grunts: string;
          macro_grunt: string;
          macro_grunt_female: string;
          macro_grunts: string;
      };
      trainerNames: {
          brock: string;
          misty: string;
          lt_surge: string;
          erika: string;
          janine: string;
          sabrina: string;
          blaine: string;
          giovanni: string;
          falkner: string;
          bugsy: string;
          whitney: string;
          morty: string;
          chuck: string;
          jasmine: string;
          pryce: string;
          clair: string;
          roxanne: string;
          brawly: string;
          wattson: string;
          flannery: string;
          norman: string;
          winona: string;
          tate: string;
          liza: string;
          juan: string;
          roark: string;
          gardenia: string;
          maylene: string;
          crasher_wake: string;
          fantina: string;
          byron: string;
          candice: string;
          volkner: string;
          cilan: string;
          chili: string;
          cress: string;
          cheren: string;
          lenora: string;
          roxie: string;
          burgh: string;
          elesa: string;
          clay: string;
          skyla: string;
          brycen: string;
          drayden: string;
          marlon: string;
          viola: string;
          grant: string;
          korrina: string;
          ramos: string;
          clemont: string;
          valerie: string;
          olympia: string;
          wulfric: string;
          milo: string;
          nessa: string;
          kabu: string;
          bea: string;
          allister: string;
          opal: string;
          bede: string;
          gordie: string;
          melony: string;
          piers: string;
          marnie: string;
          raihan: string;
          katy: string;
          brassius: string;
          iono: string;
          kofu: string;
          larry: string;
          ryme: string;
          tulip: string;
          grusha: string;
          lorelei: string;
          bruno: string;
          agatha: string;
          lance: string;
          will: string;
          koga: string;
          karen: string;
          sidney: string;
          phoebe: string;
          glacia: string;
          drake: string;
          aaron: string;
          bertha: string;
          flint: string;
          lucian: string;
          shauntal: string;
          marshal: string;
          grimsley: string;
          caitlin: string;
          malva: string;
          siebold: string;
          wikstrom: string;
          drasna: string;
          hala: string;
          molayne: string;
          olivia: string;
          acerola: string;
          kahili: string;
          rika: string;
          poppy: string;
          hassel: string;
          crispin: string;
          amarys: string;
          lacey: string;
          drayton: string;
          blue: string;
          red: string;
          steven: string;
          wallace: string;
          cynthia: string;
          alder: string;
          iris: string;
          diantha: string;
          hau: string;
          geeta: string;
          nemona: string;
          kieran: string;
          leon: string;
          rival: string;
          rival_female: string;
          archer: string;
          ariana: string;
          proton: string;
          petrel: string;
          tabitha: string;
          courtney: string;
          shelly: string;
          matt: string;
          mars: string;
          jupiter: string;
          saturn: string;
          zinzolin: string;
          rood: string;
          xerosic: string;
          bryony: string;
          faba: string;
          plumeria: string;
          oleana: string;
          maxie: string;
          archie: string;
          cyrus: string;
          ghetsis: string;
          lysandre: string;
          lusamine: string;
          guzma: string;
          rose: string;
          blue_red_double: string;
          red_blue_double: string;
          tate_liza_double: string;
          liza_tate_double: string;
          steven_wallace_double: string;
          wallace_steven_double: string;
          alder_iris_double: string;
          iris_alder_double: string;
          marnie_piers_double: string;
          piers_marnie_double: string;
      };
      tutorial: {
          intro: string;
          accessMenu: string;
          menu: string;
          starterSelect: string;
          pokerus: string;
          statChange: string;
          selectItem: string;
          eggGacha: string;
      };
      voucher: {
          vouchers: string;
          eggVoucher: string;
          eggVoucherPlus: string;
          eggVoucherPremium: string;
          eggVoucherGold: string;
          locked: string;
          defeatTrainer: string;
      };
      weather: {
          sunnyStartMessage: string;
          sunnyLapseMessage: string;
          sunnyClearMessage: string;
          rainStartMessage: string;
          rainLapseMessage: string;
          rainClearMessage: string;
          sandstormStartMessage: string;
          sandstormLapseMessage: string;
          sandstormClearMessage: string;
          sandstormDamageMessage: string;
          hailStartMessage: string;
          hailLapseMessage: string;
          hailClearMessage: string;
          hailDamageMessage: string;
          snowStartMessage: string;
          snowLapseMessage: string;
          snowClearMessage: string;
          fogStartMessage: string;
          fogLapseMessage: string;
          fogClearMessage: string;
          heavyRainStartMessage: string;
          heavyRainLapseMessage: string;
          heavyRainClearMessage: string;
          harshSunStartMessage: string;
          harshSunLapseMessage: string;
          harshSunClearMessage: string;
          strongWindsStartMessage: string;
          strongWindsLapseMessage: string;
          strongWindsEffectMessage: string;
          strongWindsClearMessage: string;
      };
      partyUiHandler: {
          SEND_OUT: string;
          SUMMARY: string;
          CANCEL: string;
          RELEASE: string;
          APPLY: string;
          TEACH: string;
          SPLICE: string;
          UNSPLICE: string;
          ACTIVATE: string;
          DEACTIVATE: string;
          TRANSFER: string;
          ALL: string;
          PASS_BATON: string;
          UNPAUSE_EVOLUTION: string;
          REVIVE: string;
          RENAME: string;
          choosePokemon: string;
          doWhatWithThisPokemon: string;
          noEnergy: string;
          hasEnergy: string;
          cantBeUsed: string;
          tooManyItems: string;
          anyEffect: string;
          unpausedEvolutions: string;
          unspliceConfirmation: string;
          wasReverted: string;
          releaseConfirmation: string;
          releaseInBattle: string;
          selectAMove: string;
          changeQuantity: string;
          selectAnotherPokemonToSplice: string;
          cancel: string;
          able: string;
          notAble: string;
          learned: string;
          goodbye: string;
          byebye: string;
          farewell: string;
          soLong: string;
          thisIsWhereWePart: string;
          illMissYou: string;
          illNeverForgetYou: string;
          untilWeMeetAgain: string;
          sayonara: string;
          smellYaLater: string;
      };
      modifierSelectUiHandler: {
          transfer: string;
          reroll: string;
          lockRarities: string;
          checkTeam: string;
          transferDesc: string;
          rerollDesc: string;
          lockRaritiesDesc: string;
          checkTeamDesc: string;
          rerollCost: string;
          itemCost: string;
      };
      moveTriggers: {
          hitWithRecoil: string;
          cutHpPowerUpMove: string;
          absorbedElectricity: string;
          switchedStatChanges: string;
          goingAllOutForAttack: string;
          regainedHealth: string;
          keptGoingAndCrashed: string;
          fled: string;
          cannotBeSwitchedOut: string;
          swappedAbilitiesWithTarget: string;
          coinsScatteredEverywhere: string;
          attackedByItem: string;
          whippedUpAWhirlwind: string;
          flewUpHigh: string;
          tookInSunlight: string;
          dugAHole: string;
          loweredItsHead: string;
          isGlowing: string;
          bellChimed: string;
          foresawAnAttack: string;
          isTighteningFocus: string;
          hidUnderwater: string;
          soothingAromaWaftedThroughArea: string;
          sprangUp: string;
          choseDoomDesireAsDestiny: string;
          vanishedInstantly: string;
          tookTargetIntoSky: string;
          becameCloakedInFreezingLight: string;
          becameCloakedInFreezingAir: string;
          isChargingPower: string;
          burnedItselfOut: string;
          startedHeatingUpBeak: string;
          setUpShellTrap: string;
          isOverflowingWithSpacePower: string;
          usedUpAllElectricity: string;
          stoleItem: string;
          incineratedItem: string;
          knockedOffItem: string;
          tookMoveAttack: string;
          cutOwnHpAndMaximizedStat: string;
          copiedStatChanges: string;
          magnitudeMessage: string;
          tookAimAtTarget: string;
          transformedIntoType: string;
          copiedMove: string;
          sketchedMove: string;
          acquiredAbility: string;
          copiedTargetAbility: string;
          transformedIntoTarget: string;
          tryingToTakeFoeDown: string;
          addType: string;
          cannotUseMove: string;
          healHp: string;
          sacrificialFullRestore: string;
          invertStats: string;
          resetStats: string;
          statEliminated: string;
          faintCountdown: string;
          copyType: string;
          suppressAbilities: string;
          revivalBlessing: string;
          swapArenaTags: string;
          exposedMove: string;
          safeguard: string;
      };
      runHistory: {
          victory: string;
          defeatedWild: string;
          defeatedTrainer: string;
          defeatedTrainerDouble: string;
          defeatedRival: string;
          defeated: string;
          defeatedWild_female: string;
          defeatedTrainer_female: string;
          defeatedTrainerDouble_female: string;
          defeatedRival_female: string;
          defeated_female: string;
          luck: string;
          score: string;
          mode: string;
          challengeRules: string;
          challengeMonoGen1: string;
          challengeMonoGen2: string;
          challengeMonoGen3: string;
          challengeMonoGen4: string;
          challengeMonoGen5: string;
          challengeMonoGen6: string;
          challengeMonoGen7: string;
          challengeMonoGen8: string;
          challengeMonoGen9: string;
          playerItems: string;
          personalBest: string;
          SPDshortened: string;
          runInfo: string;
          money: string;
          runLength: string;
          viewHeldItems: string;
          hallofFameText: string;
          hallofFameText_female: string;
          viewHallOfFame: string;
          viewEndingSplash: string;
      };
  };
  
}

declare namespace PokeRogue.locales.zh_CN {
  export declare const zhCnConfig: {
      ability: {
          stench: {
              name: string;
              description: string;
          };
          drizzle: {
              name: string;
              description: string;
          };
          speedBoost: {
              name: string;
              description: string;
          };
          battleArmor: {
              name: string;
              description: string;
          };
          sturdy: {
              name: string;
              description: string;
          };
          damp: {
              name: string;
              description: string;
          };
          limber: {
              name: string;
              description: string;
          };
          sandVeil: {
              name: string;
              description: string;
          };
          static: {
              name: string;
              description: string;
          };
          voltAbsorb: {
              name: string;
              description: string;
          };
          waterAbsorb: {
              name: string;
              description: string;
          };
          oblivious: {
              name: string;
              description: string;
          };
          cloudNine: {
              name: string;
              description: string;
          };
          compoundEyes: {
              name: string;
              description: string;
          };
          insomnia: {
              name: string;
              description: string;
          };
          colorChange: {
              name: string;
              description: string;
          };
          immunity: {
              name: string;
              description: string;
          };
          flashFire: {
              name: string;
              description: string;
          };
          shieldDust: {
              name: string;
              description: string;
          };
          ownTempo: {
              name: string;
              description: string;
          };
          suctionCups: {
              name: string;
              description: string;
          };
          intimidate: {
              name: string;
              description: string;
          };
          shadowTag: {
              name: string;
              description: string;
          };
          roughSkin: {
              name: string;
              description: string;
          };
          wonderGuard: {
              name: string;
              description: string;
          };
          levitate: {
              name: string;
              description: string;
          };
          effectSpore: {
              name: string;
              description: string;
          };
          synchronize: {
              name: string;
              description: string;
          };
          clearBody: {
              name: string;
              description: string;
          };
          naturalCure: {
              name: string;
              description: string;
          };
          lightningRod: {
              name: string;
              description: string;
          };
          sereneGrace: {
              name: string;
              description: string;
          };
          swiftSwim: {
              name: string;
              description: string;
          };
          chlorophyll: {
              name: string;
              description: string;
          };
          illuminate: {
              name: string;
              description: string;
          };
          trace: {
              name: string;
              description: string;
          };
          hugePower: {
              name: string;
              description: string;
          };
          poisonPoint: {
              name: string;
              description: string;
          };
          innerFocus: {
              name: string;
              description: string;
          };
          magmaArmor: {
              name: string;
              description: string;
          };
          waterVeil: {
              name: string;
              description: string;
          };
          magnetPull: {
              name: string;
              description: string;
          };
          soundproof: {
              name: string;
              description: string;
          };
          rainDish: {
              name: string;
              description: string;
          };
          sandStream: {
              name: string;
              description: string;
          };
          pressure: {
              name: string;
              description: string;
          };
          thickFat: {
              name: string;
              description: string;
          };
          earlyBird: {
              name: string;
              description: string;
          };
          flameBody: {
              name: string;
              description: string;
          };
          runAway: {
              name: string;
              description: string;
          };
          keenEye: {
              name: string;
              description: string;
          };
          hyperCutter: {
              name: string;
              description: string;
          };
          pickup: {
              name: string;
              description: string;
          };
          truant: {
              name: string;
              description: string;
          };
          hustle: {
              name: string;
              description: string;
          };
          cuteCharm: {
              name: string;
              description: string;
          };
          plus: {
              name: string;
              description: string;
          };
          minus: {
              name: string;
              description: string;
          };
          forecast: {
              name: string;
              description: string;
          };
          stickyHold: {
              name: string;
              description: string;
          };
          shedSkin: {
              name: string;
              description: string;
          };
          guts: {
              name: string;
              description: string;
          };
          marvelScale: {
              name: string;
              description: string;
          };
          liquidOoze: {
              name: string;
              description: string;
          };
          overgrow: {
              name: string;
              description: string;
          };
          blaze: {
              name: string;
              description: string;
          };
          torrent: {
              name: string;
              description: string;
          };
          swarm: {
              name: string;
              description: string;
          };
          rockHead: {
              name: string;
              description: string;
          };
          drought: {
              name: string;
              description: string;
          };
          arenaTrap: {
              name: string;
              description: string;
          };
          vitalSpirit: {
              name: string;
              description: string;
          };
          whiteSmoke: {
              name: string;
              description: string;
          };
          purePower: {
              name: string;
              description: string;
          };
          shellArmor: {
              name: string;
              description: string;
          };
          airLock: {
              name: string;
              description: string;
          };
          tangledFeet: {
              name: string;
              description: string;
          };
          motorDrive: {
              name: string;
              description: string;
          };
          rivalry: {
              name: string;
              description: string;
          };
          steadfast: {
              name: string;
              description: string;
          };
          snowCloak: {
              name: string;
              description: string;
          };
          gluttony: {
              name: string;
              description: string;
          };
          angerPoint: {
              name: string;
              description: string;
          };
          unburden: {
              name: string;
              description: string;
          };
          heatproof: {
              name: string;
              description: string;
          };
          simple: {
              name: string;
              description: string;
          };
          drySkin: {
              name: string;
              description: string;
          };
          download: {
              name: string;
              description: string;
          };
          ironFist: {
              name: string;
              description: string;
          };
          poisonHeal: {
              name: string;
              description: string;
          };
          adaptability: {
              name: string;
              description: string;
          };
          skillLink: {
              name: string;
              description: string;
          };
          hydration: {
              name: string;
              description: string;
          };
          solarPower: {
              name: string;
              description: string;
          };
          quickFeet: {
              name: string;
              description: string;
          };
          normalize: {
              name: string;
              description: string;
          };
          sniper: {
              name: string;
              description: string;
          };
          magicGuard: {
              name: string;
              description: string;
          };
          noGuard: {
              name: string;
              description: string;
          };
          stall: {
              name: string;
              description: string;
          };
          technician: {
              name: string;
              description: string;
          };
          leafGuard: {
              name: string;
              description: string;
          };
          klutz: {
              name: string;
              description: string;
          };
          moldBreaker: {
              name: string;
              description: string;
          };
          superLuck: {
              name: string;
              description: string;
          };
          aftermath: {
              name: string;
              description: string;
          };
          anticipation: {
              name: string;
              description: string;
          };
          forewarn: {
              name: string;
              description: string;
          };
          unaware: {
              name: string;
              description: string;
          };
          tintedLens: {
              name: string;
              description: string;
          };
          filter: {
              name: string;
              description: string;
          };
          slowStart: {
              name: string;
              description: string;
          };
          scrappy: {
              name: string;
              description: string;
          };
          stormDrain: {
              name: string;
              description: string;
          };
          iceBody: {
              name: string;
              description: string;
          };
          solidRock: {
              name: string;
              description: string;
          };
          snowWarning: {
              name: string;
              description: string;
          };
          honeyGather: {
              name: string;
              description: string;
          };
          frisk: {
              name: string;
              description: string;
          };
          reckless: {
              name: string;
              description: string;
          };
          multitype: {
              name: string;
              description: string;
          };
          flowerGift: {
              name: string;
              description: string;
          };
          badDreams: {
              name: string;
              description: string;
          };
          pickpocket: {
              name: string;
              description: string;
          };
          sheerForce: {
              name: string;
              description: string;
          };
          contrary: {
              name: string;
              description: string;
          };
          unnerve: {
              name: string;
              description: string;
          };
          defiant: {
              name: string;
              description: string;
          };
          defeatist: {
              name: string;
              description: string;
          };
          cursedBody: {
              name: string;
              description: string;
          };
          healer: {
              name: string;
              description: string;
          };
          friendGuard: {
              name: string;
              description: string;
          };
          weakArmor: {
              name: string;
              description: string;
          };
          heavyMetal: {
              name: string;
              description: string;
          };
          lightMetal: {
              name: string;
              description: string;
          };
          multiscale: {
              name: string;
              description: string;
          };
          toxicBoost: {
              name: string;
              description: string;
          };
          flareBoost: {
              name: string;
              description: string;
          };
          harvest: {
              name: string;
              description: string;
          };
          telepathy: {
              name: string;
              description: string;
          };
          moody: {
              name: string;
              description: string;
          };
          overcoat: {
              name: string;
              description: string;
          };
          poisonTouch: {
              name: string;
              description: string;
          };
          regenerator: {
              name: string;
              description: string;
          };
          bigPecks: {
              name: string;
              description: string;
          };
          sandRush: {
              name: string;
              description: string;
          };
          wonderSkin: {
              name: string;
              description: string;
          };
          analytic: {
              name: string;
              description: string;
          };
          illusion: {
              name: string;
              description: string;
          };
          imposter: {
              name: string;
              description: string;
          };
          infiltrator: {
              name: string;
              description: string;
          };
          mummy: {
              name: string;
              description: string;
          };
          moxie: {
              name: string;
              description: string;
          };
          justified: {
              name: string;
              description: string;
          };
          rattled: {
              name: string;
              description: string;
          };
          magicBounce: {
              name: string;
              description: string;
          };
          sapSipper: {
              name: string;
              description: string;
          };
          prankster: {
              name: string;
              description: string;
          };
          sandForce: {
              name: string;
              description: string;
          };
          ironBarbs: {
              name: string;
              description: string;
          };
          zenMode: {
              name: string;
              description: string;
          };
          victoryStar: {
              name: string;
              description: string;
          };
          turboblaze: {
              name: string;
              description: string;
          };
          teravolt: {
              name: string;
              description: string;
          };
          aromaVeil: {
              name: string;
              description: string;
          };
          flowerVeil: {
              name: string;
              description: string;
          };
          cheekPouch: {
              name: string;
              description: string;
          };
          protean: {
              name: string;
              description: string;
          };
          furCoat: {
              name: string;
              description: string;
          };
          magician: {
              name: string;
              description: string;
          };
          bulletproof: {
              name: string;
              description: string;
          };
          competitive: {
              name: string;
              description: string;
          };
          strongJaw: {
              name: string;
              description: string;
          };
          refrigerate: {
              name: string;
              description: string;
          };
          sweetVeil: {
              name: string;
              description: string;
          };
          stanceChange: {
              name: string;
              description: string;
          };
          galeWings: {
              name: string;
              description: string;
          };
          megaLauncher: {
              name: string;
              description: string;
          };
          grassPelt: {
              name: string;
              description: string;
          };
          symbiosis: {
              name: string;
              description: string;
          };
          toughClaws: {
              name: string;
              description: string;
          };
          pixilate: {
              name: string;
              description: string;
          };
          gooey: {
              name: string;
              description: string;
          };
          aerilate: {
              name: string;
              description: string;
          };
          parentalBond: {
              name: string;
              description: string;
          };
          darkAura: {
              name: string;
              description: string;
          };
          fairyAura: {
              name: string;
              description: string;
          };
          auraBreak: {
              name: string;
              description: string;
          };
          primordialSea: {
              name: string;
              description: string;
          };
          desolateLand: {
              name: string;
              description: string;
          };
          deltaStream: {
              name: string;
              description: string;
          };
          stamina: {
              name: string;
              description: string;
          };
          wimpOut: {
              name: string;
              description: string;
          };
          emergencyExit: {
              name: string;
              description: string;
          };
          waterCompaction: {
              name: string;
              description: string;
          };
          merciless: {
              name: string;
              description: string;
          };
          shieldsDown: {
              name: string;
              description: string;
          };
          stakeout: {
              name: string;
              description: string;
          };
          waterBubble: {
              name: string;
              description: string;
          };
          steelworker: {
              name: string;
              description: string;
          };
          berserk: {
              name: string;
              description: string;
          };
          slushRush: {
              name: string;
              description: string;
          };
          longReach: {
              name: string;
              description: string;
          };
          liquidVoice: {
              name: string;
              description: string;
          };
          triage: {
              name: string;
              description: string;
          };
          galvanize: {
              name: string;
              description: string;
          };
          surgeSurfer: {
              name: string;
              description: string;
          };
          schooling: {
              name: string;
              description: string;
          };
          disguise: {
              name: string;
              description: string;
          };
          battleBond: {
              name: string;
              description: string;
          };
          powerConstruct: {
              name: string;
              description: string;
          };
          corrosion: {
              name: string;
              description: string;
          };
          comatose: {
              name: string;
              description: string;
          };
          queenlyMajesty: {
              name: string;
              description: string;
          };
          innardsOut: {
              name: string;
              description: string;
          };
          dancer: {
              name: string;
              description: string;
          };
          battery: {
              name: string;
              description: string;
          };
          fluffy: {
              name: string;
              description: string;
          };
          dazzling: {
              name: string;
              description: string;
          };
          soulHeart: {
              name: string;
              description: string;
          };
          tanglingHair: {
              name: string;
              description: string;
          };
          receiver: {
              name: string;
              description: string;
          };
          powerOfAlchemy: {
              name: string;
              description: string;
          };
          beastBoost: {
              name: string;
              description: string;
          };
          rksSystem: {
              name: string;
              description: string;
          };
          electricSurge: {
              name: string;
              description: string;
          };
          psychicSurge: {
              name: string;
              description: string;
          };
          mistySurge: {
              name: string;
              description: string;
          };
          grassySurge: {
              name: string;
              description: string;
          };
          fullMetalBody: {
              name: string;
              description: string;
          };
          shadowShield: {
              name: string;
              description: string;
          };
          prismArmor: {
              name: string;
              description: string;
          };
          neuroforce: {
              name: string;
              description: string;
          };
          intrepidSword: {
              name: string;
              description: string;
          };
          dauntlessShield: {
              name: string;
              description: string;
          };
          libero: {
              name: string;
              description: string;
          };
          ballFetch: {
              name: string;
              description: string;
          };
          cottonDown: {
              name: string;
              description: string;
          };
          propellerTail: {
              name: string;
              description: string;
          };
          mirrorArmor: {
              name: string;
              description: string;
          };
          gulpMissile: {
              name: string;
              description: string;
          };
          stalwart: {
              name: string;
              description: string;
          };
          steamEngine: {
              name: string;
              description: string;
          };
          punkRock: {
              name: string;
              description: string;
          };
          sandSpit: {
              name: string;
              description: string;
          };
          iceScales: {
              name: string;
              description: string;
          };
          ripen: {
              name: string;
              description: string;
          };
          iceFace: {
              name: string;
              description: string;
          };
          powerSpot: {
              name: string;
              description: string;
          };
          mimicry: {
              name: string;
              description: string;
          };
          screenCleaner: {
              name: string;
              description: string;
          };
          steelySpirit: {
              name: string;
              description: string;
          };
          perishBody: {
              name: string;
              description: string;
          };
          wanderingSpirit: {
              name: string;
              description: string;
          };
          gorillaTactics: {
              name: string;
              description: string;
          };
          neutralizingGas: {
              name: string;
              description: string;
          };
          pastelVeil: {
              name: string;
              description: string;
          };
          hungerSwitch: {
              name: string;
              description: string;
          };
          quickDraw: {
              name: string;
              description: string;
          };
          unseenFist: {
              name: string;
              description: string;
          };
          curiousMedicine: {
              name: string;
              description: string;
          };
          transistor: {
              name: string;
              description: string;
          };
          dragonsMaw: {
              name: string;
              description: string;
          };
          chillingNeigh: {
              name: string;
              description: string;
          };
          grimNeigh: {
              name: string;
              description: string;
          };
          asOneGlastrier: {
              name: string;
              description: string;
          };
          asOneSpectrier: {
              name: string;
              description: string;
          };
          lingeringAroma: {
              name: string;
              description: string;
          };
          seedSower: {
              name: string;
              description: string;
          };
          thermalExchange: {
              name: string;
              description: string;
          };
          angerShell: {
              name: string;
              description: string;
          };
          purifyingSalt: {
              name: string;
              description: string;
          };
          wellBakedBody: {
              name: string;
              description: string;
          };
          windRider: {
              name: string;
              description: string;
          };
          guardDog: {
              name: string;
              description: string;
          };
          rockyPayload: {
              name: string;
              description: string;
          };
          windPower: {
              name: string;
              description: string;
          };
          zeroToHero: {
              name: string;
              description: string;
          };
          commander: {
              name: string;
              description: string;
          };
          electromorphosis: {
              name: string;
              description: string;
          };
          protosynthesis: {
              name: string;
              description: string;
          };
          quarkDrive: {
              name: string;
              description: string;
          };
          goodAsGold: {
              name: string;
              description: string;
          };
          vesselOfRuin: {
              name: string;
              description: string;
          };
          swordOfRuin: {
              name: string;
              description: string;
          };
          tabletsOfRuin: {
              name: string;
              description: string;
          };
          beadsOfRuin: {
              name: string;
              description: string;
          };
          orichalcumPulse: {
              name: string;
              description: string;
          };
          hadronEngine: {
              name: string;
              description: string;
          };
          opportunist: {
              name: string;
              description: string;
          };
          cudChew: {
              name: string;
              description: string;
          };
          sharpness: {
              name: string;
              description: string;
          };
          supremeOverlord: {
              name: string;
              description: string;
          };
          costar: {
              name: string;
              description: string;
          };
          toxicDebris: {
              name: string;
              description: string;
          };
          armorTail: {
              name: string;
              description: string;
          };
          earthEater: {
              name: string;
              description: string;
          };
          myceliumMight: {
              name: string;
              description: string;
          };
          mindsEye: {
              name: string;
              description: string;
          };
          supersweetSyrup: {
              name: string;
              description: string;
          };
          hospitality: {
              name: string;
              description: string;
          };
          toxicChain: {
              name: string;
              description: string;
          };
          embodyAspectTeal: {
              name: string;
              description: string;
          };
          embodyAspectWellspring: {
              name: string;
              description: string;
          };
          embodyAspectHearthflame: {
              name: string;
              description: string;
          };
          embodyAspectCornerstone: {
              name: string;
              description: string;
          };
          teraShift: {
              name: string;
              description: string;
          };
          teraShell: {
              name: string;
              description: string;
          };
          teraformZero: {
              name: string;
              description: string;
          };
          poisonPuppeteer: {
              name: string;
              description: string;
          };
      };
      abilityTriggers: {
          blockRecoilDamage: string;
          badDreams: string;
          costar: string;
          iceFaceAvoidedDamage: string;
          perishBody: string;
          poisonHeal: string;
          trace: string;
          windPowerCharged: string;
          quickDraw: string;
          disguiseAvoidedDamage: string;
          blockItemTheft: string;
          typeImmunityHeal: string;
          nonSuperEffectiveImmunity: string;
          moveImmunity: string;
          reverseDrain: string;
          postDefendTypeChange: string;
          postDefendContactDamage: string;
          postDefendAbilitySwap: string;
          postDefendAbilityGive: string;
          postDefendMoveDisable: string;
          pokemonTypeChange: string;
          postAttackStealHeldItem: string;
          postDefendStealHeldItem: string;
          copyFaintedAllyAbility: string;
          intimidateImmunity: string;
          postSummonAllyHeal: string;
          postSummonClearAllyStats: string;
          postSummonTransform: string;
          protectStat: string;
          statusEffectImmunityWithName: string;
          statusEffectImmunity: string;
          battlerTagImmunity: string;
          forewarn: string;
          frisk: string;
          postWeatherLapseHeal: string;
          postWeatherLapseDamage: string;
          postTurnLootCreateEatenBerry: string;
          postTurnHeal: string;
          fetchBall: string;
          healFromBerryUse: string;
          arenaTrap: string;
          postBattleLoot: string;
          postFaintContactDamage: string;
          postFaintHpDamage: string;
          postSummonPressure: string;
          weatherEffectDisappeared: string;
          postSummonMoldBreaker: string;
          postSummonAnticipation: string;
          postSummonTurboblaze: string;
          postSummonTeravolt: string;
          postSummonDarkAura: string;
          postSummonFairyAura: string;
          postSummonNeutralizingGas: string;
          postSummonAsOneGlastrier: string;
          postSummonAsOneSpectrier: string;
          postSummonVesselOfRuin: string;
          postSummonSwordOfRuin: string;
          postSummonTabletsOfRuin: string;
          postSummonBeadsOfRuin: string;
          preventBerryUse: string;
      };
      arenaFlyout: {
          activeBattleEffects: string;
          player: string;
          neutral: string;
          enemy: string;
          sunny: string;
          rain: string;
          sandstorm: string;
          hail: string;
          snow: string;
          fog: string;
          heavyRain: string;
          harshSun: string;
          strongWinds: string;
          misty: string;
          electric: string;
          grassy: string;
          psychic: string;
          mudSport: string;
          waterSport: string;
          spikes: string;
          toxicSpikes: string;
          mist: string;
          futureSight: string;
          doomDesire: string;
          wish: string;
          stealthRock: string;
          stickyWeb: string;
          trickRoom: string;
          gravity: string;
          reflect: string;
          lightScreen: string;
          auroraVeil: string;
          quickGuard: string;
          wideGuard: string;
          matBlock: string;
          craftyShield: string;
          tailwind: string;
          happyHour: string;
          safeguard: string;
      };
      arenaTag: {
          yourTeam: string;
          opposingTeam: string;
          arenaOnRemove: string;
          arenaOnRemovePlayer: string;
          arenaOnRemoveEnemy: string;
          mistOnAdd: string;
          mistApply: string;
          reflectOnAdd: string;
          reflectOnAddPlayer: string;
          reflectOnAddEnemy: string;
          lightScreenOnAdd: string;
          lightScreenOnAddPlayer: string;
          lightScreenOnAddEnemy: string;
          auroraVeilOnAdd: string;
          auroraVeilOnAddPlayer: string;
          auroraVeilOnAddEnemy: string;
          conditionalProtectOnAdd: string;
          conditionalProtectOnAddPlayer: string;
          conditionalProtectOnAddEnemy: string;
          conditionalProtectApply: string;
          matBlockOnAdd: string;
          noCritOnAddPlayer: string;
          noCritOnAddEnemy: string;
          noCritOnRemove: string;
          wishTagOnAdd: string;
          mudSportOnAdd: string;
          mudSportOnRemove: string;
          waterSportOnAdd: string;
          waterSportOnRemove: string;
          spikesOnAdd: string;
          spikesActivateTrap: string;
          toxicSpikesOnAdd: string;
          toxicSpikesActivateTrapPoison: string;
          stealthRockOnAdd: string;
          stealthRockActivateTrap: string;
          stickyWebOnAdd: string;
          stickyWebActivateTrap: string;
          trickRoomOnAdd: string;
          trickRoomOnRemove: string;
          gravityOnAdd: string;
          gravityOnRemove: string;
          tailwindOnAdd: string;
          tailwindOnAddPlayer: string;
          tailwindOnAddEnemy: string;
          tailwindOnRemove: string;
          tailwindOnRemovePlayer: string;
          tailwindOnRemoveEnemy: string;
          happyHourOnAdd: string;
          happyHourOnRemove: string;
          safeguardOnAdd: string;
          safeguardOnAddPlayer: string;
          safeguardOnAddEnemy: string;
          safeguardOnRemove: string;
          safeguardOnRemovePlayer: string;
          safeguardOnRemoveEnemy: string;
      };
      battle: {
          bossAppeared: string;
          trainerAppeared: string;
          trainerAppearedDouble: string;
          trainerSendOut: string;
          singleWildAppeared: string;
          multiWildAppeared: string;
          playerComeBack: string;
          trainerComeBack: string;
          playerGo: string;
          trainerGo: string;
          switchQuestion: string;
          trainerDefeated: string;
          moneyWon: string;
          moneyPickedUp: string;
          pokemonCaught: string;
          addedAsAStarter: string;
          partyFull: string;
          pokemon: string;
          sendOutPokemon: string;
          hitResultCriticalHit: string;
          hitResultSuperEffective: string;
          hitResultNotVeryEffective: string;
          hitResultNoEffect: string;
          hitResultImmune: string;
          hitResultOneHitKO: string;
          attackFailed: string;
          attackMissed: string;
          attackHitsCount: string;
          rewardGain: string;
          expGain: string;
          levelUp: string;
          learnMove: string;
          learnMovePrompt: string;
          learnMoveLimitReached: string;
          learnMoveReplaceQuestion: string;
          learnMoveStopTeaching: string;
          learnMoveNotLearned: string;
          learnMoveForgetQuestion: string;
          learnMoveForgetSuccess: string;
          countdownPoof: string;
          learnMoveAnd: string;
          levelCapUp: string;
          moveNotImplemented: string;
          moveNoPP: string;
          moveDisabled: string;
          noPokeballForce: string;
          noPokeballTrainer: string;
          noPokeballMulti: string;
          noPokeballStrong: string;
          noEscapeForce: string;
          noEscapeTrainer: string;
          noEscapePokemon: string;
          runAwaySuccess: string;
          runAwayCannotEscape: string;
          escapeVerbSwitch: string;
          escapeVerbFlee: string;
          notDisabled: string;
          turnEndHpRestore: string;
          hpIsFull: string;
          skipItemQuestion: string;
          itemStackFull: string;
          eggHatching: string;
          stealEatBerry: string;
          ppHealBerry: string;
          hpHealBerry: string;
          ivScannerUseQuestion: string;
          wildPokemonWithAffix: string;
          foePokemonWithAffix: string;
          useMove: string;
          drainMessage: string;
          regainHealth: string;
          fainted: string;
          statsAnd: string;
          stats: string;
          statRose_other: string;
          statSharplyRose_other: string;
          statRoseDrastically_other: string;
          statWontGoAnyHigher_other: string;
          statFell_other: string;
          statHarshlyFell_other: string;
          statSeverelyFell_other: string;
          statWontGoAnyLower_other: string;
          transformedIntoType: string;
          ppReduced: string;
          retryBattle: string;
          unlockedSomething: string;
          congratulations: string;
          beatModeFirstTime: string;
      };
      battleScene: {
          moneyOwned: string;
      };
      battleInfo: {
          generation: string;
      };
      battleMessageUiHandler: {
          ivBest: string;
          ivFantastic: string;
          ivVeryGood: string;
          ivPrettyGood: string;
          ivDecent: string;
          ivNoGood: string;
      };
      battlePokemonForm: {
          mega: string;
          "mega-x": string;
          "mega-y": string;
          primal: string;
          gigantamax: string;
          eternamax: string;
          megaChange: string;
          gigantamaxChange: string;
          eternamaxChange: string;
          revertChange: string;
          formChange: string;
          disguiseChange: string;
      };
      battlerTags: {
          trappedDesc: string;
          flinchedDesc: string;
          confusedDesc: string;
          infatuatedDesc: string;
          seedDesc: string;
          nightmareDesc: string;
          ingrainDesc: string;
          drowsyDesc: string;
          rechargingLapse: string;
          trappedOnAdd: string;
          trappedOnRemove: string;
          flinchedLapse: string;
          confusedOnAdd: string;
          confusedOnRemove: string;
          confusedOnOverlap: string;
          confusedLapse: string;
          confusedLapseHurtItself: string;
          destinyBondLapseIsBoss: string;
          destinyBondLapse: string;
          infatuatedOnAdd: string;
          infatuatedOnOverlap: string;
          infatuatedLapse: string;
          infatuatedLapseImmobilize: string;
          infatuatedOnRemove: string;
          seededOnAdd: string;
          seededLapse: string;
          seededLapseShed: string;
          nightmareOnAdd: string;
          nightmareOnOverlap: string;
          nightmareLapse: string;
          encoreOnAdd: string;
          encoreOnRemove: string;
          helpingHandOnAdd: string;
          ingrainLapse: string;
          ingrainOnTrap: string;
          aquaRingOnAdd: string;
          aquaRingLapse: string;
          drowsyOnAdd: string;
          damagingTrapLapse: string;
          bindOnTrap: string;
          wrapOnTrap: string;
          vortexOnTrap: string;
          clampOnTrap: string;
          sandTombOnTrap: string;
          magmaStormOnTrap: string;
          snapTrapOnTrap: string;
          thunderCageOnTrap: string;
          infestationOnTrap: string;
          protectedOnAdd: string;
          protectedLapse: string;
          enduringOnAdd: string;
          enduringLapse: string;
          sturdyLapse: string;
          perishSongLapse: string;
          centerOfAttentionOnAdd: string;
          truantLapse: string;
          slowStartOnAdd: string;
          slowStartOnRemove: string;
          highestStatBoostOnAdd: string;
          highestStatBoostOnRemove: string;
          magnetRisenOnAdd: string;
          magnetRisenOnRemove: string;
          critBoostOnAdd: string;
          critBoostOnRemove: string;
          saltCuredOnAdd: string;
          saltCuredLapse: string;
          cursedOnAdd: string;
          cursedLapse: string;
          stockpilingOnAdd: string;
      };
      berry: {
          SITRUS: {
              name: string;
              effect: string;
          };
          LUM: {
              name: string;
              effect: string;
          };
          ENIGMA: {
              name: string;
              effect: string;
          };
          LIECHI: {
              name: string;
              effect: string;
          };
          GANLON: {
              name: string;
              effect: string;
          };
          PETAYA: {
              name: string;
              effect: string;
          };
          APICOT: {
              name: string;
              effect: string;
          };
          SALAC: {
              name: string;
              effect: string;
          };
          LANSAT: {
              name: string;
              effect: string;
          };
          STARF: {
              name: string;
              effect: string;
          };
          LEPPA: {
              name: string;
              effect: string;
          };
      };
      bgmName: {
          music: string;
          missing_entries: string;
          battle_kanto_champion: string;
          battle_johto_champion: string;
          battle_hoenn_champion_g5: string;
          battle_hoenn_champion_g6: string;
          battle_sinnoh_champion: string;
          battle_champion_alder: string;
          battle_champion_iris: string;
          battle_kalos_champion: string;
          battle_alola_champion: string;
          battle_galar_champion: string;
          battle_champion_geeta: string;
          battle_champion_nemona: string;
          battle_champion_kieran: string;
          battle_hoenn_elite: string;
          battle_unova_elite: string;
          battle_kalos_elite: string;
          battle_alola_elite: string;
          battle_galar_elite: string;
          battle_paldea_elite: string;
          battle_bb_elite: string;
          battle_final_encounter: string;
          battle_final: string;
          battle_kanto_gym: string;
          battle_johto_gym: string;
          battle_hoenn_gym: string;
          battle_sinnoh_gym: string;
          battle_unova_gym: string;
          battle_kalos_gym: string;
          battle_galar_gym: string;
          battle_paldea_gym: string;
          battle_legendary_kanto: string;
          battle_legendary_raikou: string;
          battle_legendary_entei: string;
          battle_legendary_suicune: string;
          battle_legendary_lugia: string;
          battle_legendary_ho_oh: string;
          battle_legendary_regis_g5: string;
          battle_legendary_regis_g6: string;
          battle_legendary_gro_kyo: string;
          battle_legendary_rayquaza: string;
          battle_legendary_deoxys: string;
          battle_legendary_lake_trio: string;
          battle_legendary_sinnoh: string;
          battle_legendary_dia_pal: string;
          battle_legendary_giratina: string;
          battle_legendary_arceus: string;
          battle_legendary_unova: string;
          battle_legendary_kyurem: string;
          battle_legendary_res_zek: string;
          battle_legendary_xern_yvel: string;
          battle_legendary_tapu: string;
          battle_legendary_sol_lun: string;
          battle_legendary_ub: string;
          battle_legendary_dusk_dawn: string;
          battle_legendary_ultra_nec: string;
          battle_legendary_zac_zam: string;
          battle_legendary_glas_spec: string;
          battle_legendary_calyrex: string;
          battle_legendary_birds_galar: string;
          battle_legendary_ruinous: string;
          battle_legendary_kor_mir: string;
          battle_legendary_loyal_three: string;
          battle_legendary_ogerpon: string;
          battle_legendary_terapagos: string;
          battle_legendary_pecharunt: string;
          battle_rival: string;
          battle_rival_2: string;
          battle_rival_3: string;
          battle_trainer: string;
          battle_wild: string;
          battle_wild_strong: string;
          end_summit: string;
          battle_rocket_grunt: string;
          battle_aqua_magma_grunt: string;
          battle_galactic_grunt: string;
          battle_plasma_grunt: string;
          battle_flare_grunt: string;
          battle_aether_grunt: string;
          battle_skull_grunt: string;
          battle_macro_grunt: string;
          battle_galactic_admin: string;
          battle_skull_admin: string;
          battle_oleana: string;
          battle_rocket_boss: string;
          battle_aqua_magma_boss: string;
          battle_galactic_boss: string;
          battle_plasma_boss: string;
          battle_flare_boss: string;
          battle_aether_boss: string;
          battle_skull_boss: string;
          battle_macro_boss: string;
          abyss: string;
          badlands: string;
          beach: string;
          cave: string;
          construction_site: string;
          desert: string;
          dojo: string;
          end: string;
          factory: string;
          fairy_cave: string;
          forest: string;
          grass: string;
          graveyard: string;
          ice_cave: string;
          island: string;
          jungle: string;
          laboratory: string;
          lake: string;
          meadow: string;
          metropolis: string;
          mountain: string;
          plains: string;
          power_plant: string;
          ruins: string;
          sea: string;
          seabed: string;
          slum: string;
          snowy_forest: string;
          space: string;
          swamp: string;
          tall_grass: string;
          temple: string;
          town: string;
          volcano: string;
          wasteland: string;
          encounter_ace_trainer: string;
          encounter_backpacker: string;
          encounter_clerk: string;
          encounter_cyclist: string;
          encounter_lass: string;
          encounter_parasol_lady: string;
          encounter_pokefan: string;
          encounter_psychic: string;
          encounter_rich: string;
          encounter_rival: string;
          encounter_roughneck: string;
          encounter_scientist: string;
          encounter_twins: string;
          encounter_youngster: string;
          heal: string;
          menu: string;
          title: string;
      };
      biome: {
          unknownLocation: string;
          TOWN: string;
          PLAINS: string;
          GRASS: string;
          TALL_GRASS: string;
          METROPOLIS: string;
          FOREST: string;
          SEA: string;
          SWAMP: string;
          BEACH: string;
          LAKE: string;
          SEABED: string;
          MOUNTAIN: string;
          BADLANDS: string;
          CAVE: string;
          DESERT: string;
          ICE_CAVE: string;
          MEADOW: string;
          POWER_PLANT: string;
          VOLCANO: string;
          GRAVEYARD: string;
          DOJO: string;
          FACTORY: string;
          RUINS: string;
          WASTELAND: string;
          ABYSS: string;
          SPACE: string;
          CONSTRUCTION_SITE: string;
          JUNGLE: string;
          FAIRY_CAVE: string;
          TEMPLE: string;
          SLUM: string;
          SNOWY_FOREST: string;
          ISLAND: string;
          LABORATORY: string;
          END: string;
      };
      challenges: {
          title: string;
          illegalEvolution: string;
          singleGeneration: {
              name: string;
              desc: string;
              desc_default: string;
              gen_1: string;
              gen_2: string;
              gen_3: string;
              gen_4: string;
              gen_5: string;
              gen_6: string;
              gen_7: string;
              gen_8: string;
              gen_9: string;
          };
          singleType: {
              name: string;
              desc: string;
              desc_default: string;
          };
          freshStart: {
              name: string;
              desc: string;
              "value.0": string;
              "value.1": string;
          };
          inverseBattle: {
              name: string;
              shortName: string;
              desc: string;
              "value.0": string;
              "value.1": string;
          };
      };
      commandUiHandler: {
          fight: string;
          ball: string;
          pokemon: string;
          run: string;
          actionMessage: string;
      };
      common: {
          start: string;
          luckIndicator: string;
          shinyOnHover: string;
          commonShiny: string;
          rareShiny: string;
          epicShiny: string;
      };
      achv: {
          Achievements: {
              name: string;
          };
          Locked: {
              name: string;
          };
          MoneyAchv: {
              description: string;
          };
          "10K_MONEY": {
              name: string;
          };
          "100K_MONEY": {
              name: string;
          };
          "1M_MONEY": {
              name: string;
          };
          "10M_MONEY": {
              name: string;
          };
          DamageAchv: {
              description: string;
          };
          "250_DMG": {
              name: string;
          };
          "1000_DMG": {
              name: string;
          };
          "2500_DMG": {
              name: string;
          };
          "10000_DMG": {
              name: string;
          };
          HealAchv: {
              description: string;
          };
          "250_HEAL": {
              name: string;
          };
          "1000_HEAL": {
              name: string;
          };
          "2500_HEAL": {
              name: string;
          };
          "10000_HEAL": {
              name: string;
          };
          LevelAchv: {
              description: string;
          };
          LV_100: {
              name: string;
          };
          LV_250: {
              name: string;
          };
          LV_1000: {
              name: string;
          };
          RibbonAchv: {
              description: string;
          };
          "10_RIBBONS": {
              name: string;
          };
          "25_RIBBONS": {
              name: string;
          };
          "50_RIBBONS": {
              name: string;
          };
          "75_RIBBONS": {
              name: string;
          };
          "100_RIBBONS": {
              name: string;
          };
          TRANSFER_MAX_STAT_STAGE: {
              name: string;
              description: string;
          };
          MAX_FRIENDSHIP: {
              name: string;
              description: string;
          };
          MEGA_EVOLVE: {
              name: string;
              description: string;
          };
          GIGANTAMAX: {
              name: string;
              description: string;
          };
          TERASTALLIZE: {
              name: string;
              description: string;
          };
          STELLAR_TERASTALLIZE: {
              name: string;
              description: string;
          };
          SPLICE: {
              name: string;
              description: string;
          };
          MINI_BLACK_HOLE: {
              name: string;
              description: string;
          };
          CATCH_MYTHICAL: {
              name: string;
              description: string;
          };
          CATCH_SUB_LEGENDARY: {
              name: string;
              description: string;
          };
          CATCH_LEGENDARY: {
              name: string;
              description: string;
          };
          SEE_SHINY: {
              name: string;
              description: string;
          };
          SHINY_PARTY: {
              name: string;
              description: string;
          };
          HATCH_MYTHICAL: {
              name: string;
              description: string;
          };
          HATCH_SUB_LEGENDARY: {
              name: string;
              description: string;
          };
          HATCH_LEGENDARY: {
              name: string;
              description: string;
          };
          HATCH_SHINY: {
              name: string;
              description: string;
          };
          HIDDEN_ABILITY: {
              name: string;
              description: string;
          };
          PERFECT_IVS: {
              name: string;
              description: string;
          };
          CLASSIC_VICTORY: {
              name: string;
              description: string;
          };
          UNEVOLVED_CLASSIC_VICTORY: {
              name: string;
              description: string;
          };
          MONO_GEN_ONE: {
              name: string;
              description: string;
          };
          MONO_GEN_TWO: {
              name: string;
              description: string;
          };
          MONO_GEN_THREE: {
              name: string;
              description: string;
          };
          MONO_GEN_FOUR: {
              name: string;
              description: string;
          };
          MONO_GEN_FIVE: {
              name: string;
              description: string;
          };
          MONO_GEN_SIX: {
              name: string;
              description: string;
          };
          MONO_GEN_SEVEN: {
              name: string;
              description: string;
          };
          MONO_GEN_EIGHT: {
              name: string;
              description: string;
          };
          MONO_GEN_NINE: {
              name: string;
              description: string;
          };
          MonoType: {
              description: string;
          };
          MONO_NORMAL: {
              name: string;
          };
          MONO_FIGHTING: {
              name: string;
          };
          MONO_FLYING: {
              name: string;
          };
          MONO_POISON: {
              name: string;
          };
          MONO_GROUND: {
              name: string;
          };
          MONO_ROCK: {
              name: string;
          };
          MONO_BUG: {
              name: string;
          };
          MONO_GHOST: {
              name: string;
          };
          MONO_STEEL: {
              name: string;
          };
          MONO_FIRE: {
              name: string;
          };
          MONO_WATER: {
              name: string;
          };
          MONO_GRASS: {
              name: string;
          };
          MONO_ELECTRIC: {
              name: string;
          };
          MONO_PSYCHIC: {
              name: string;
          };
          MONO_ICE: {
              name: string;
          };
          MONO_DRAGON: {
              name: string;
          };
          MONO_DARK: {
              name: string;
          };
          MONO_FAIRY: {
              name: string;
          };
          FRESH_START: {
              name: string;
              description: string;
          };
          INVERSE_BATTLE: {
              name: string;
              description: string;
          };
      };
      dialogue: {
          youngster: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
                  "10": string;
                  "11": string;
                  "12": string;
                  "13": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
                  "10": string;
                  "11": string;
                  "12": string;
                  "13": string;
              };
          };
          lass: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
              };
          };
          breeder: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          breeder_female: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          fisherman: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          fisherman_female: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          swimmer: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          backpacker: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          ace_trainer: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          parasol_lady: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          twins: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          cyclist: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          black_belt: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          battle_girl: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          hiker: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          ranger: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          scientist: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          school_kid: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          artist: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          guitarist: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          worker: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          worker_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          worker_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          hex_maniac: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          psychic: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          officer: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          beauty: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          baker: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          biker: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          firebreather: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          sailor: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          archer: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          ariana: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          proton: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          petrel: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          tabitha: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          courtney: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          shelly: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          matt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          mars: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          jupiter: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          saturn: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          zinzolin: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          rood: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          xerosic: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          bryony: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          rocket_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          magma_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          aqua_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          galactic_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          plasma_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          flare_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          aether_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          faba: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          skull_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
          };
          plumeria: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          macro_grunt: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          oleana: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          rocket_boss_giovanni_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rocket_boss_giovanni_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          magma_boss_maxie_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          magma_boss_maxie_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aqua_boss_archie_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aqua_boss_archie_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          galactic_boss_cyrus_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          galactic_boss_cyrus_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          plasma_boss_ghetsis_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          plasma_boss_ghetsis_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          flare_boss_lysandre_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          flare_boss_lysandre_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aether_boss_lusamine_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aether_boss_lusamine_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          skull_boss_guzma_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          skull_boss_guzma_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          macro_boss_rose_1: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          macro_boss_rose_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          brock: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          misty: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          lt_surge: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          erika: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          janine: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          sabrina: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          blaine: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          giovanni: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          roxanne: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          brawly: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          wattson: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          flannery: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          norman: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          winona: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          tate: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          liza: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          juan: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          crasher_wake: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          falkner: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          nessa: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          melony: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          marlon: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          shauntal: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          marshal: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          cheren: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          chili: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          cilan: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          roark: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          morty: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
              };
          };
          crispin: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          amarys: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lacey: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drayton: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          ramos: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          viola: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          candice: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          gardenia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aaron: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          cress: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          allister: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          clay: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kofu: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          tulip: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          sidney: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          phoebe: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          glacia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drake: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          wallace: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lorelei: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          will: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          malva: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          hala: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rika: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          molayne: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bruno: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bugsy: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          koga: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bertha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lenora: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          siebold: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          roxie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          olivia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          poppy: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          agatha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          flint: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          grimsley: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          caitlin: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          diantha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          wikstrom: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          acerola: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          larry_elite: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lance: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          karen: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          milo: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lucian: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drasna: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kahili: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          hassel: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          blue: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          piers: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          red: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          jasmine: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lance_champion: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          steven: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          cynthia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          iris: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          hau: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          geeta: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          nemona: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          leon: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          whitney: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          chuck: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          katy: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          pryce: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          clair: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          maylene: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          fantina: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          byron: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          olympia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          volkner: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          burgh: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          elesa: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          skyla: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          brycen: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drayden: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          grant: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          korrina: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          clemont: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          valerie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          wulfric: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kabu: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bea: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          opal: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bede: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          gordie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          marnie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          raihan: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          brassius: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          iono: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          larry: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          ryme: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          grusha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          marnie_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          nessa_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          bea_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          allister_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          raihan_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          alder: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kieran: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_2_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_3: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_3_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_4: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_4_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_5: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_5_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_6: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_6_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
      };
      battleSpecDialogue: {
          encounter: string;
          firstStageWin: string;
          secondStageWin: string;
      };
      miscDialogue: {
          ending: string;
          ending_female: string;
      };
      doubleBattleDialogue: {
          blue_red_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          red_blue_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          tate_liza_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          liza_tate_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          wallace_steven_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          steven_wallace_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          alder_iris_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          iris_alder_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          piers_marnie_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          marnie_piers_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
      };
      egg: {
          egg: string;
          greatTier: string;
          ultraTier: string;
          masterTier: string;
          defaultTier: string;
          hatchWavesMessageSoon: string;
          hatchWavesMessageClose: string;
          hatchWavesMessageNotClose: string;
          hatchWavesMessageLongTime: string;
          gachaTypeLegendary: string;
          gachaTypeMove: string;
          gachaTypeShiny: string;
          selectMachine: string;
          notEnoughVouchers: string;
          tooManyEggs: string;
          pull: string;
          pulls: string;
          sameSpeciesEgg: string;
          hatchFromTheEgg: string;
          eggMoveUnlock: string;
          rareEggMoveUnlock: string;
          moveUPGacha: string;
          shinyUPGacha: string;
          legendaryUPGacha: string;
      };
      fightUiHandler: {
          pp: string;
          power: string;
          accuracy: string;
          abilityFlyInText: string;
          passive: string;
      };
      filterBar: {
          genFilter: string;
          typeFilter: string;
          caughtFilter: string;
          unlocksFilter: string;
          miscFilter: string;
          sortFilter: string;
          all: string;
          normal: string;
          uncaught: string;
          passive: string;
          passiveUnlocked: string;
          passiveLocked: string;
          passiveUnlockable: string;
          costReduction: string;
          costReductionUnlocked: string;
          costReductionLocked: string;
          costReductionUnlockable: string;
          favorite: string;
          isFavorite: string;
          notFavorite: string;
          ribbon: string;
          hasWon: string;
          hasNotWon: string;
          hiddenAbility: string;
          hasHiddenAbility: string;
          noHiddenAbility: string;
          egg: string;
          eggPurchasable: string;
          pokerus: string;
          hasPokerus: string;
          noPokerus: string;
          sortByNumber: string;
          sortByCost: string;
          sortByCandies: string;
          sortByIVs: string;
          sortByName: string;
      };
      gameMode: {
          classic: string;
          endless: string;
          endlessSpliced: string;
          dailyRun: string;
          unknown: string;
          challenge: string;
      };
      gameStatsUiHandler: {
          stats: string;
          playTime: string;
          totalBattles: string;
          starters: string;
          shinyStarters: string;
          speciesSeen: string;
          speciesCaught: string;
          ribbonsOwned: string;
          classicRuns: string;
          classicWins: string;
          dailyRunAttempts: string;
          dailyRunWins: string;
          endlessRuns: string;
          highestWaveEndless: string;
          highestMoney: string;
          highestDamage: string;
          highestHPHealed: string;
          pokemonEncountered: string;
          pokemonDefeated: string;
          pokemonCaught: string;
          eggsHatched: string;
          subLegendsSeen: string;
          subLegendsCaught: string;
          subLegendsHatched: string;
          legendsSeen: string;
          legendsCaught: string;
          legendsHatched: string;
          mythicalsSeen: string;
          mythicalsCaught: string;
          mythicalsHatched: string;
          shiniesSeen: string;
          shiniesCaught: string;
          shiniesHatched: string;
          pokemonFused: string;
          trainersDefeated: string;
          eggsPulled: string;
          rareEggsPulled: string;
          epicEggsPulled: string;
          legendaryEggsPulled: string;
          manaphyEggsPulled: string;
      };
      growth: {
          Erratic: string;
          Fast: string;
          Medium_Fast: string;
          Medium_Slow: string;
          Slow: string;
          Fluctuating: string;
      };
      menu: {
          cancel: string;
          continue: string;
          dailyRun: string;
          loadGame: string;
          newGame: string;
          settings: string;
          selectGameMode: string;
          logInOrCreateAccount: string;
          username: string;
          password: string;
          login: string;
          "Or use": string;
          register: string;
          emptyUsername: string;
          invalidLoginUsername: string;
          invalidRegisterUsername: string;
          invalidLoginPassword: string;
          invalidRegisterPassword: string;
          usernameAlreadyUsed: string;
          accountNonExistent: string;
          unmatchingPassword: string;
          passwordNotMatchingConfirmPassword: string;
          confirmPassword: string;
          registrationAgeWarning: string;
          backToLogin: string;
          failedToLoadSaveData: string;
          sessionSuccess: string;
          failedToLoadSession: string;
          boyOrGirl: string;
          evolving: string;
          stoppedEvolving: string;
          pauseEvolutionsQuestion: string;
          evolutionsPaused: string;
          evolutionDone: string;
          dailyRankings: string;
          weeklyRankings: string;
          noRankings: string;
          positionIcon: string;
          usernameScoreboard: string;
          score: string;
          wave: string;
          loading: string;
          loadingAsset: string;
          playersOnline: string;
          yes: string;
          no: string;
          disclaimer: string;
          disclaimerDescription: string;
          choosePokemon: string;
          renamePokemon: string;
          rename: string;
          nickname: string;
          errorServerDown: string;
      };
      menuUiHandler: {
          GAME_SETTINGS: string;
          ACHIEVEMENTS: string;
          STATS: string;
          RUN_HISTORY: string;
          EGG_LIST: string;
          EGG_GACHA: string;
          MANAGE_DATA: string;
          COMMUNITY: string;
          SAVE_AND_QUIT: string;
          LOG_OUT: string;
          slot: string;
          importSession: string;
          importSlotSelect: string;
          exportSession: string;
          exportSlotSelect: string;
          importRunHistory: string;
          exportRunHistory: string;
          importData: string;
          exportData: string;
          consentPreferences: string;
          linkDiscord: string;
          unlinkDiscord: string;
          linkGoogle: string;
          unlinkGoogle: string;
          cancel: string;
          losingProgressionWarning: string;
          noEggs: string;
      };
      modifier: {
          surviveDamageApply: string;
          turnHealApply: string;
          hitHealApply: string;
          pokemonInstantReviveApply: string;
          resetNegativeStatStageApply: string;
          moneyInterestApply: string;
          turnHeldItemTransferApply: string;
          contactHeldItemTransferApply: string;
          enemyTurnHealApply: string;
          bypassSpeedChanceApply: string;
      };
      modifierType: {
          ModifierType: {
              AddPokeballModifierType: {
                  name: string;
                  description: string;
              };
              AddVoucherModifierType: {
                  name: string;
                  description: string;
              };
              PokemonHeldItemModifierType: {
                  extra: {
                      inoperable: string;
                      tooMany: string;
                  };
              };
              PokemonHpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                      fullyWithStatus: string;
                  };
              };
              PokemonReviveModifierType: {
                  description: string;
              };
              PokemonStatusHealModifierType: {
                  description: string;
              };
              PokemonPpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                  };
              };
              PokemonAllMovePpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                  };
              };
              PokemonPpUpModifierType: {
                  description: string;
              };
              PokemonNatureChangeModifierType: {
                  name: string;
                  description: string;
              };
              DoubleBattleChanceBoosterModifierType: {
                  description: string;
              };
              TempStatStageBoosterModifierType: {
                  description: string;
              };
              AttackTypeBoosterModifierType: {
                  description: string;
              };
              PokemonLevelIncrementModifierType: {
                  description: string;
              };
              AllPokemonLevelIncrementModifierType: {
                  description: string;
              };
              BaseStatBoosterModifierType: {
                  description: string;
              };
              AllPokemonFullHpRestoreModifierType: {
                  description: string;
              };
              AllPokemonFullReviveModifierType: {
                  description: string;
              };
              MoneyRewardModifierType: {
                  description: string;
                  extra: {
                      small: string;
                      moderate: string;
                      large: string;
                  };
              };
              ExpBoosterModifierType: {
                  description: string;
              };
              PokemonExpBoosterModifierType: {
                  description: string;
              };
              PokemonFriendshipBoosterModifierType: {
                  description: string;
              };
              PokemonMoveAccuracyBoosterModifierType: {
                  description: string;
              };
              PokemonMultiHitModifierType: {
                  description: string;
              };
              TmModifierType: {
                  name: string;
                  description: string;
              };
              TmModifierTypeWithInfo: {
                  name: string;
                  description: string;
              };
              EvolutionItemModifierType: {
                  description: string;
              };
              FormChangeItemModifierType: {
                  description: string;
              };
              FusePokemonModifierType: {
                  description: string;
              };
              TerastallizeModifierType: {
                  name: string;
                  description: string;
              };
              ContactHeldItemTransferChanceModifierType: {
                  description: string;
              };
              TurnHeldItemTransferModifierType: {
                  description: string;
              };
              EnemyAttackStatusEffectChanceModifierType: {
                  description: string;
              };
              EnemyEndureChanceModifierType: {
                  description: string;
              };
              RARE_CANDY: {
                  name: string;
              };
              RARER_CANDY: {
                  name: string;
              };
              MEGA_BRACELET: {
                  name: string;
                  description: string;
              };
              DYNAMAX_BAND: {
                  name: string;
                  description: string;
              };
              TERA_ORB: {
                  name: string;
                  description: string;
              };
              MAP: {
                  name: string;
                  description: string;
              };
              POTION: {
                  name: string;
              };
              SUPER_POTION: {
                  name: string;
              };
              HYPER_POTION: {
                  name: string;
              };
              MAX_POTION: {
                  name: string;
              };
              FULL_RESTORE: {
                  name: string;
              };
              REVIVE: {
                  name: string;
              };
              MAX_REVIVE: {
                  name: string;
              };
              FULL_HEAL: {
                  name: string;
              };
              SACRED_ASH: {
                  name: string;
              };
              REVIVER_SEED: {
                  name: string;
                  description: string;
              };
              WHITE_HERB: {
                  name: string;
                  description: string;
              };
              ETHER: {
                  name: string;
              };
              MAX_ETHER: {
                  name: string;
              };
              ELIXIR: {
                  name: string;
              };
              MAX_ELIXIR: {
                  name: string;
              };
              PP_UP: {
                  name: string;
              };
              PP_MAX: {
                  name: string;
              };
              LURE: {
                  name: string;
              };
              SUPER_LURE: {
                  name: string;
              };
              MAX_LURE: {
                  name: string;
              };
              MEMORY_MUSHROOM: {
                  name: string;
                  description: string;
              };
              EXP_SHARE: {
                  name: string;
                  description: string;
              };
              EXP_BALANCE: {
                  name: string;
                  description: string;
              };
              OVAL_CHARM: {
                  name: string;
                  description: string;
              };
              EXP_CHARM: {
                  name: string;
              };
              SUPER_EXP_CHARM: {
                  name: string;
              };
              GOLDEN_EXP_CHARM: {
                  name: string;
              };
              LUCKY_EGG: {
                  name: string;
              };
              GOLDEN_EGG: {
                  name: string;
              };
              SOOTHE_BELL: {
                  name: string;
              };
              SCOPE_LENS: {
                  name: string;
                  description: string;
              };
              DIRE_HIT: {
                  name: string;
                  extra: {
                      raises: string;
                  };
              };
              LEEK: {
                  name: string;
                  description: string;
              };
              EVIOLITE: {
                  name: string;
                  description: string;
              };
              SOUL_DEW: {
                  name: string;
                  description: string;
              };
              NUGGET: {
                  name: string;
              };
              BIG_NUGGET: {
                  name: string;
              };
              RELIC_GOLD: {
                  name: string;
              };
              AMULET_COIN: {
                  name: string;
                  description: string;
              };
              GOLDEN_PUNCH: {
                  name: string;
                  description: string;
              };
              COIN_CASE: {
                  name: string;
                  description: string;
              };
              LOCK_CAPSULE: {
                  name: string;
                  description: string;
              };
              GRIP_CLAW: {
                  name: string;
              };
              WIDE_LENS: {
                  name: string;
              };
              MULTI_LENS: {
                  name: string;
              };
              HEALING_CHARM: {
                  name: string;
                  description: string;
              };
              CANDY_JAR: {
                  name: string;
                  description: string;
              };
              BERRY_POUCH: {
                  name: string;
                  description: string;
              };
              FOCUS_BAND: {
                  name: string;
                  description: string;
              };
              QUICK_CLAW: {
                  name: string;
                  description: string;
              };
              KINGS_ROCK: {
                  name: string;
                  description: string;
              };
              LEFTOVERS: {
                  name: string;
                  description: string;
              };
              SHELL_BELL: {
                  name: string;
                  description: string;
              };
              TOXIC_ORB: {
                  name: string;
                  description: string;
              };
              FLAME_ORB: {
                  name: string;
                  description: string;
              };
              BATON: {
                  name: string;
                  description: string;
              };
              SHINY_CHARM: {
                  name: string;
                  description: string;
              };
              ABILITY_CHARM: {
                  name: string;
                  description: string;
              };
              IV_SCANNER: {
                  name: string;
                  description: string;
              };
              DNA_SPLICERS: {
                  name: string;
              };
              MINI_BLACK_HOLE: {
                  name: string;
              };
              GOLDEN_POKEBALL: {
                  name: string;
                  description: string;
              };
              ENEMY_DAMAGE_BOOSTER: {
                  name: string;
                  description: string;
              };
              ENEMY_DAMAGE_REDUCTION: {
                  name: string;
                  description: string;
              };
              ENEMY_HEAL: {
                  name: string;
                  description: string;
              };
              ENEMY_ATTACK_POISON_CHANCE: {
                  name: string;
              };
              ENEMY_ATTACK_PARALYZE_CHANCE: {
                  name: string;
              };
              ENEMY_ATTACK_BURN_CHANCE: {
                  name: string;
              };
              ENEMY_STATUS_EFFECT_HEAL_CHANCE: {
                  name: string;
                  description: string;
              };
              ENEMY_ENDURE_CHANCE: {
                  name: string;
              };
              ENEMY_FUSED_CHANCE: {
                  name: string;
                  description: string;
              };
          };
          SpeciesBoosterItem: {
              LIGHT_BALL: {
                  name: string;
                  description: string;
              };
              THICK_CLUB: {
                  name: string;
                  description: string;
              };
              METAL_POWDER: {
                  name: string;
                  description: string;
              };
              QUICK_POWDER: {
                  name: string;
                  description: string;
              };
          };
          TempStatStageBoosterItem: {
              x_attack: string;
              x_defense: string;
              x_sp_atk: string;
              x_sp_def: string;
              x_speed: string;
              x_accuracy: string;
          };
          AttackTypeBoosterItem: {
              silk_scarf: string;
              black_belt: string;
              sharp_beak: string;
              poison_barb: string;
              soft_sand: string;
              hard_stone: string;
              silver_powder: string;
              spell_tag: string;
              metal_coat: string;
              charcoal: string;
              mystic_water: string;
              miracle_seed: string;
              magnet: string;
              twisted_spoon: string;
              never_melt_ice: string;
              dragon_fang: string;
              black_glasses: string;
              fairy_feather: string;
          };
          BaseStatBoosterItem: {
              hp_up: string;
              protein: string;
              iron: string;
              calcium: string;
              zinc: string;
              carbos: string;
          };
          EvolutionItem: {
              NONE: string;
              LINKING_CORD: string;
              SUN_STONE: string;
              MOON_STONE: string;
              LEAF_STONE: string;
              FIRE_STONE: string;
              WATER_STONE: string;
              THUNDER_STONE: string;
              ICE_STONE: string;
              DUSK_STONE: string;
              DAWN_STONE: string;
              SHINY_STONE: string;
              CRACKED_POT: string;
              SWEET_APPLE: string;
              TART_APPLE: string;
              STRAWBERRY_SWEET: string;
              UNREMARKABLE_TEACUP: string;
              CHIPPED_POT: string;
              BLACK_AUGURITE: string;
              GALARICA_CUFF: string;
              GALARICA_WREATH: string;
              PEAT_BLOCK: string;
              AUSPICIOUS_ARMOR: string;
              MALICIOUS_ARMOR: string;
              MASTERPIECE_TEACUP: string;
              METAL_ALLOY: string;
              SCROLL_OF_DARKNESS: string;
              SCROLL_OF_WATERS: string;
              SYRUPY_APPLE: string;
          };
          FormChangeItem: {
              NONE: string;
              ABOMASITE: string;
              ABSOLITE: string;
              AERODACTYLITE: string;
              AGGRONITE: string;
              ALAKAZITE: string;
              ALTARIANITE: string;
              AMPHAROSITE: string;
              AUDINITE: string;
              BANETTITE: string;
              BEEDRILLITE: string;
              BLASTOISINITE: string;
              BLAZIKENITE: string;
              CAMERUPTITE: string;
              CHARIZARDITE_X: string;
              CHARIZARDITE_Y: string;
              DIANCITE: string;
              GALLADITE: string;
              GARCHOMPITE: string;
              GARDEVOIRITE: string;
              GENGARITE: string;
              GLALITITE: string;
              GYARADOSITE: string;
              HERACRONITE: string;
              HOUNDOOMINITE: string;
              KANGASKHANITE: string;
              LATIASITE: string;
              LATIOSITE: string;
              LOPUNNITE: string;
              LUCARIONITE: string;
              MANECTITE: string;
              MAWILITE: string;
              MEDICHAMITE: string;
              METAGROSSITE: string;
              MEWTWONITE_X: string;
              MEWTWONITE_Y: string;
              PIDGEOTITE: string;
              PINSIRITE: string;
              RAYQUAZITE: string;
              SABLENITE: string;
              SALAMENCITE: string;
              SCEPTILITE: string;
              SCIZORITE: string;
              SHARPEDONITE: string;
              SLOWBRONITE: string;
              STEELIXITE: string;
              SWAMPERTITE: string;
              TYRANITARITE: string;
              VENUSAURITE: string;
              BLUE_ORB: string;
              RED_ORB: string;
              SHARP_METEORITE: string;
              HARD_METEORITE: string;
              SMOOTH_METEORITE: string;
              ADAMANT_CRYSTAL: string;
              LUSTROUS_GLOBE: string;
              GRISEOUS_CORE: string;
              REVEAL_GLASS: string;
              GRACIDEA: string;
              MAX_MUSHROOMS: string;
              DARK_STONE: string;
              LIGHT_STONE: string;
              PRISON_BOTTLE: string;
              N_LUNARIZER: string;
              N_SOLARIZER: string;
              RUSTED_SWORD: string;
              RUSTED_SHIELD: string;
              ICY_REINS_OF_UNITY: string;
              SHADOW_REINS_OF_UNITY: string;
              WELLSPRING_MASK: string;
              HEARTHFLAME_MASK: string;
              CORNERSTONE_MASK: string;
              SHOCK_DRIVE: string;
              BURN_DRIVE: string;
              CHILL_DRIVE: string;
              DOUSE_DRIVE: string;
              ULTRANECROZIUM_Z: string;
              FIST_PLATE: string;
              SKY_PLATE: string;
              TOXIC_PLATE: string;
              EARTH_PLATE: string;
              STONE_PLATE: string;
              INSECT_PLATE: string;
              SPOOKY_PLATE: string;
              IRON_PLATE: string;
              FLAME_PLATE: string;
              SPLASH_PLATE: string;
              MEADOW_PLATE: string;
              ZAP_PLATE: string;
              MIND_PLATE: string;
              ICICLE_PLATE: string;
              DRACO_PLATE: string;
              DREAD_PLATE: string;
              PIXIE_PLATE: string;
              BLANK_PLATE: string;
              LEGEND_PLATE: string;
              FIGHTING_MEMORY: string;
              FLYING_MEMORY: string;
              POISON_MEMORY: string;
              GROUND_MEMORY: string;
              ROCK_MEMORY: string;
              BUG_MEMORY: string;
              GHOST_MEMORY: string;
              STEEL_MEMORY: string;
              FIRE_MEMORY: string;
              WATER_MEMORY: string;
              GRASS_MEMORY: string;
              ELECTRIC_MEMORY: string;
              PSYCHIC_MEMORY: string;
              ICE_MEMORY: string;
              DRAGON_MEMORY: string;
              DARK_MEMORY: string;
              FAIRY_MEMORY: string;
              NORMAL_MEMORY: string;
          };
      };
      move: {
          pound: {
              name: string;
              effect: string;
          };
          karateChop: {
              name: string;
              effect: string;
          };
          doubleSlap: {
              name: string;
              effect: string;
          };
          cometPunch: {
              name: string;
              effect: string;
          };
          megaPunch: {
              name: string;
              effect: string;
          };
          payDay: {
              name: string;
              effect: string;
          };
          firePunch: {
              name: string;
              effect: string;
          };
          icePunch: {
              name: string;
              effect: string;
          };
          thunderPunch: {
              name: string;
              effect: string;
          };
          scratch: {
              name: string;
              effect: string;
          };
          viseGrip: {
              name: string;
              effect: string;
          };
          guillotine: {
              name: string;
              effect: string;
          };
          razorWind: {
              name: string;
              effect: string;
          };
          swordsDance: {
              name: string;
              effect: string;
          };
          cut: {
              name: string;
              effect: string;
          };
          gust: {
              name: string;
              effect: string;
          };
          wingAttack: {
              name: string;
              effect: string;
          };
          whirlwind: {
              name: string;
              effect: string;
          };
          fly: {
              name: string;
              effect: string;
          };
          bind: {
              name: string;
              effect: string;
          };
          slam: {
              name: string;
              effect: string;
          };
          vineWhip: {
              name: string;
              effect: string;
          };
          stomp: {
              name: string;
              effect: string;
          };
          doubleKick: {
              name: string;
              effect: string;
          };
          megaKick: {
              name: string;
              effect: string;
          };
          jumpKick: {
              name: string;
              effect: string;
          };
          rollingKick: {
              name: string;
              effect: string;
          };
          sandAttack: {
              name: string;
              effect: string;
          };
          headbutt: {
              name: string;
              effect: string;
          };
          hornAttack: {
              name: string;
              effect: string;
          };
          furyAttack: {
              name: string;
              effect: string;
          };
          hornDrill: {
              name: string;
              effect: string;
          };
          tackle: {
              name: string;
              effect: string;
          };
          bodySlam: {
              name: string;
              effect: string;
          };
          wrap: {
              name: string;
              effect: string;
          };
          takeDown: {
              name: string;
              effect: string;
          };
          thrash: {
              name: string;
              effect: string;
          };
          doubleEdge: {
              name: string;
              effect: string;
          };
          tailWhip: {
              name: string;
              effect: string;
          };
          poisonSting: {
              name: string;
              effect: string;
          };
          twineedle: {
              name: string;
              effect: string;
          };
          pinMissile: {
              name: string;
              effect: string;
          };
          leer: {
              name: string;
              effect: string;
          };
          bite: {
              name: string;
              effect: string;
          };
          growl: {
              name: string;
              effect: string;
          };
          roar: {
              name: string;
              effect: string;
          };
          sing: {
              name: string;
              effect: string;
          };
          supersonic: {
              name: string;
              effect: string;
          };
          sonicBoom: {
              name: string;
              effect: string;
          };
          disable: {
              name: string;
              effect: string;
          };
          acid: {
              name: string;
              effect: string;
          };
          ember: {
              name: string;
              effect: string;
          };
          flamethrower: {
              name: string;
              effect: string;
          };
          mist: {
              name: string;
              effect: string;
          };
          waterGun: {
              name: string;
              effect: string;
          };
          hydroPump: {
              name: string;
              effect: string;
          };
          surf: {
              name: string;
              effect: string;
          };
          iceBeam: {
              name: string;
              effect: string;
          };
          blizzard: {
              name: string;
              effect: string;
          };
          psybeam: {
              name: string;
              effect: string;
          };
          bubbleBeam: {
              name: string;
              effect: string;
          };
          auroraBeam: {
              name: string;
              effect: string;
          };
          hyperBeam: {
              name: string;
              effect: string;
          };
          peck: {
              name: string;
              effect: string;
          };
          drillPeck: {
              name: string;
              effect: string;
          };
          submission: {
              name: string;
              effect: string;
          };
          lowKick: {
              name: string;
              effect: string;
          };
          counter: {
              name: string;
              effect: string;
          };
          seismicToss: {
              name: string;
              effect: string;
          };
          strength: {
              name: string;
              effect: string;
          };
          absorb: {
              name: string;
              effect: string;
          };
          megaDrain: {
              name: string;
              effect: string;
          };
          leechSeed: {
              name: string;
              effect: string;
          };
          growth: {
              name: string;
              effect: string;
          };
          razorLeaf: {
              name: string;
              effect: string;
          };
          solarBeam: {
              name: string;
              effect: string;
          };
          poisonPowder: {
              name: string;
              effect: string;
          };
          stunSpore: {
              name: string;
              effect: string;
          };
          sleepPowder: {
              name: string;
              effect: string;
          };
          petalDance: {
              name: string;
              effect: string;
          };
          stringShot: {
              name: string;
              effect: string;
          };
          dragonRage: {
              name: string;
              effect: string;
          };
          fireSpin: {
              name: string;
              effect: string;
          };
          thunderShock: {
              name: string;
              effect: string;
          };
          thunderbolt: {
              name: string;
              effect: string;
          };
          thunderWave: {
              name: string;
              effect: string;
          };
          thunder: {
              name: string;
              effect: string;
          };
          rockThrow: {
              name: string;
              effect: string;
          };
          earthquake: {
              name: string;
              effect: string;
          };
          fissure: {
              name: string;
              effect: string;
          };
          dig: {
              name: string;
              effect: string;
          };
          toxic: {
              name: string;
              effect: string;
          };
          confusion: {
              name: string;
              effect: string;
          };
          psychic: {
              name: string;
              effect: string;
          };
          hypnosis: {
              name: string;
              effect: string;
          };
          meditate: {
              name: string;
              effect: string;
          };
          agility: {
              name: string;
              effect: string;
          };
          quickAttack: {
              name: string;
              effect: string;
          };
          rage: {
              name: string;
              effect: string;
          };
          teleport: {
              name: string;
              effect: string;
          };
          nightShade: {
              name: string;
              effect: string;
          };
          mimic: {
              name: string;
              effect: string;
          };
          screech: {
              name: string;
              effect: string;
          };
          doubleTeam: {
              name: string;
              effect: string;
          };
          recover: {
              name: string;
              effect: string;
          };
          harden: {
              name: string;
              effect: string;
          };
          minimize: {
              name: string;
              effect: string;
          };
          smokescreen: {
              name: string;
              effect: string;
          };
          confuseRay: {
              name: string;
              effect: string;
          };
          withdraw: {
              name: string;
              effect: string;
          };
          defenseCurl: {
              name: string;
              effect: string;
          };
          barrier: {
              name: string;
              effect: string;
          };
          lightScreen: {
              name: string;
              effect: string;
          };
          haze: {
              name: string;
              effect: string;
          };
          reflect: {
              name: string;
              effect: string;
          };
          focusEnergy: {
              name: string;
              effect: string;
          };
          bide: {
              name: string;
              effect: string;
          };
          metronome: {
              name: string;
              effect: string;
          };
          mirrorMove: {
              name: string;
              effect: string;
          };
          selfDestruct: {
              name: string;
              effect: string;
          };
          eggBomb: {
              name: string;
              effect: string;
          };
          lick: {
              name: string;
              effect: string;
          };
          smog: {
              name: string;
              effect: string;
          };
          sludge: {
              name: string;
              effect: string;
          };
          boneClub: {
              name: string;
              effect: string;
          };
          fireBlast: {
              name: string;
              effect: string;
          };
          waterfall: {
              name: string;
              effect: string;
          };
          clamp: {
              name: string;
              effect: string;
          };
          swift: {
              name: string;
              effect: string;
          };
          skullBash: {
              name: string;
              effect: string;
          };
          spikeCannon: {
              name: string;
              effect: string;
          };
          constrict: {
              name: string;
              effect: string;
          };
          amnesia: {
              name: string;
              effect: string;
          };
          kinesis: {
              name: string;
              effect: string;
          };
          softBoiled: {
              name: string;
              effect: string;
          };
          highJumpKick: {
              name: string;
              effect: string;
          };
          glare: {
              name: string;
              effect: string;
          };
          dreamEater: {
              name: string;
              effect: string;
          };
          poisonGas: {
              name: string;
              effect: string;
          };
          barrage: {
              name: string;
              effect: string;
          };
          leechLife: {
              name: string;
              effect: string;
          };
          lovelyKiss: {
              name: string;
              effect: string;
          };
          skyAttack: {
              name: string;
              effect: string;
          };
          transform: {
              name: string;
              effect: string;
          };
          bubble: {
              name: string;
              effect: string;
          };
          dizzyPunch: {
              name: string;
              effect: string;
          };
          spore: {
              name: string;
              effect: string;
          };
          flash: {
              name: string;
              effect: string;
          };
          psywave: {
              name: string;
              effect: string;
          };
          splash: {
              name: string;
              effect: string;
          };
          acidArmor: {
              name: string;
              effect: string;
          };
          crabhammer: {
              name: string;
              effect: string;
          };
          explosion: {
              name: string;
              effect: string;
          };
          furySwipes: {
              name: string;
              effect: string;
          };
          bonemerang: {
              name: string;
              effect: string;
          };
          rest: {
              name: string;
              effect: string;
          };
          rockSlide: {
              name: string;
              effect: string;
          };
          hyperFang: {
              name: string;
              effect: string;
          };
          sharpen: {
              name: string;
              effect: string;
          };
          conversion: {
              name: string;
              effect: string;
          };
          triAttack: {
              name: string;
              effect: string;
          };
          superFang: {
              name: string;
              effect: string;
          };
          slash: {
              name: string;
              effect: string;
          };
          substitute: {
              name: string;
              effect: string;
          };
          struggle: {
              name: string;
              effect: string;
          };
          sketch: {
              name: string;
              effect: string;
          };
          tripleKick: {
              name: string;
              effect: string;
          };
          thief: {
              name: string;
              effect: string;
          };
          spiderWeb: {
              name: string;
              effect: string;
          };
          mindReader: {
              name: string;
              effect: string;
          };
          nightmare: {
              name: string;
              effect: string;
          };
          flameWheel: {
              name: string;
              effect: string;
          };
          snore: {
              name: string;
              effect: string;
          };
          curse: {
              name: string;
              effect: string;
          };
          flail: {
              name: string;
              effect: string;
          };
          conversion2: {
              name: string;
              effect: string;
          };
          aeroblast: {
              name: string;
              effect: string;
          };
          cottonSpore: {
              name: string;
              effect: string;
          };
          reversal: {
              name: string;
              effect: string;
          };
          spite: {
              name: string;
              effect: string;
          };
          powderSnow: {
              name: string;
              effect: string;
          };
          protect: {
              name: string;
              effect: string;
          };
          machPunch: {
              name: string;
              effect: string;
          };
          scaryFace: {
              name: string;
              effect: string;
          };
          feintAttack: {
              name: string;
              effect: string;
          };
          sweetKiss: {
              name: string;
              effect: string;
          };
          bellyDrum: {
              name: string;
              effect: string;
          };
          sludgeBomb: {
              name: string;
              effect: string;
          };
          mudSlap: {
              name: string;
              effect: string;
          };
          octazooka: {
              name: string;
              effect: string;
          };
          spikes: {
              name: string;
              effect: string;
          };
          zapCannon: {
              name: string;
              effect: string;
          };
          foresight: {
              name: string;
              effect: string;
          };
          destinyBond: {
              name: string;
              effect: string;
          };
          perishSong: {
              name: string;
              effect: string;
          };
          icyWind: {
              name: string;
              effect: string;
          };
          detect: {
              name: string;
              effect: string;
          };
          boneRush: {
              name: string;
              effect: string;
          };
          lockOn: {
              name: string;
              effect: string;
          };
          outrage: {
              name: string;
              effect: string;
          };
          sandstorm: {
              name: string;
              effect: string;
          };
          gigaDrain: {
              name: string;
              effect: string;
          };
          endure: {
              name: string;
              effect: string;
          };
          charm: {
              name: string;
              effect: string;
          };
          rollout: {
              name: string;
              effect: string;
          };
          falseSwipe: {
              name: string;
              effect: string;
          };
          swagger: {
              name: string;
              effect: string;
          };
          milkDrink: {
              name: string;
              effect: string;
          };
          spark: {
              name: string;
              effect: string;
          };
          furyCutter: {
              name: string;
              effect: string;
          };
          steelWing: {
              name: string;
              effect: string;
          };
          meanLook: {
              name: string;
              effect: string;
          };
          attract: {
              name: string;
              effect: string;
          };
          sleepTalk: {
              name: string;
              effect: string;
          };
          healBell: {
              name: string;
              effect: string;
          };
          return: {
              name: string;
              effect: string;
          };
          present: {
              name: string;
              effect: string;
          };
          frustration: {
              name: string;
              effect: string;
          };
          safeguard: {
              name: string;
              effect: string;
          };
          painSplit: {
              name: string;
              effect: string;
          };
          sacredFire: {
              name: string;
              effect: string;
          };
          magnitude: {
              name: string;
              effect: string;
          };
          dynamicPunch: {
              name: string;
              effect: string;
          };
          megahorn: {
              name: string;
              effect: string;
          };
          dragonBreath: {
              name: string;
              effect: string;
          };
          batonPass: {
              name: string;
              effect: string;
          };
          encore: {
              name: string;
              effect: string;
          };
          pursuit: {
              name: string;
              effect: string;
          };
          rapidSpin: {
              name: string;
              effect: string;
          };
          sweetScent: {
              name: string;
              effect: string;
          };
          ironTail: {
              name: string;
              effect: string;
          };
          metalClaw: {
              name: string;
              effect: string;
          };
          vitalThrow: {
              name: string;
              effect: string;
          };
          morningSun: {
              name: string;
              effect: string;
          };
          synthesis: {
              name: string;
              effect: string;
          };
          moonlight: {
              name: string;
              effect: string;
          };
          hiddenPower: {
              name: string;
              effect: string;
          };
          crossChop: {
              name: string;
              effect: string;
          };
          twister: {
              name: string;
              effect: string;
          };
          rainDance: {
              name: string;
              effect: string;
          };
          sunnyDay: {
              name: string;
              effect: string;
          };
          crunch: {
              name: string;
              effect: string;
          };
          mirrorCoat: {
              name: string;
              effect: string;
          };
          psychUp: {
              name: string;
              effect: string;
          };
          extremeSpeed: {
              name: string;
              effect: string;
          };
          ancientPower: {
              name: string;
              effect: string;
          };
          shadowBall: {
              name: string;
              effect: string;
          };
          futureSight: {
              name: string;
              effect: string;
          };
          rockSmash: {
              name: string;
              effect: string;
          };
          whirlpool: {
              name: string;
              effect: string;
          };
          beatUp: {
              name: string;
              effect: string;
          };
          fakeOut: {
              name: string;
              effect: string;
          };
          uproar: {
              name: string;
              effect: string;
          };
          stockpile: {
              name: string;
              effect: string;
          };
          spitUp: {
              name: string;
              effect: string;
          };
          swallow: {
              name: string;
              effect: string;
          };
          heatWave: {
              name: string;
              effect: string;
          };
          hail: {
              name: string;
              effect: string;
          };
          torment: {
              name: string;
              effect: string;
          };
          flatter: {
              name: string;
              effect: string;
          };
          willOWisp: {
              name: string;
              effect: string;
          };
          memento: {
              name: string;
              effect: string;
          };
          facade: {
              name: string;
              effect: string;
          };
          focusPunch: {
              name: string;
              effect: string;
          };
          smellingSalts: {
              name: string;
              effect: string;
          };
          followMe: {
              name: string;
              effect: string;
          };
          naturePower: {
              name: string;
              effect: string;
          };
          charge: {
              name: string;
              effect: string;
          };
          taunt: {
              name: string;
              effect: string;
          };
          helpingHand: {
              name: string;
              effect: string;
          };
          trick: {
              name: string;
              effect: string;
          };
          rolePlay: {
              name: string;
              effect: string;
          };
          wish: {
              name: string;
              effect: string;
          };
          assist: {
              name: string;
              effect: string;
          };
          ingrain: {
              name: string;
              effect: string;
          };
          superpower: {
              name: string;
              effect: string;
          };
          magicCoat: {
              name: string;
              effect: string;
          };
          recycle: {
              name: string;
              effect: string;
          };
          revenge: {
              name: string;
              effect: string;
          };
          brickBreak: {
              name: string;
              effect: string;
          };
          yawn: {
              name: string;
              effect: string;
          };
          knockOff: {
              name: string;
              effect: string;
          };
          endeavor: {
              name: string;
              effect: string;
          };
          eruption: {
              name: string;
              effect: string;
          };
          skillSwap: {
              name: string;
              effect: string;
          };
          imprison: {
              name: string;
              effect: string;
          };
          refresh: {
              name: string;
              effect: string;
          };
          grudge: {
              name: string;
              effect: string;
          };
          snatch: {
              name: string;
              effect: string;
          };
          secretPower: {
              name: string;
              effect: string;
          };
          dive: {
              name: string;
              effect: string;
          };
          armThrust: {
              name: string;
              effect: string;
          };
          camouflage: {
              name: string;
              effect: string;
          };
          tailGlow: {
              name: string;
              effect: string;
          };
          lusterPurge: {
              name: string;
              effect: string;
          };
          mistBall: {
              name: string;
              effect: string;
          };
          featherDance: {
              name: string;
              effect: string;
          };
          teeterDance: {
              name: string;
              effect: string;
          };
          blazeKick: {
              name: string;
              effect: string;
          };
          mudSport: {
              name: string;
              effect: string;
          };
          iceBall: {
              name: string;
              effect: string;
          };
          needleArm: {
              name: string;
              effect: string;
          };
          slackOff: {
              name: string;
              effect: string;
          };
          hyperVoice: {
              name: string;
              effect: string;
          };
          poisonFang: {
              name: string;
              effect: string;
          };
          crushClaw: {
              name: string;
              effect: string;
          };
          blastBurn: {
              name: string;
              effect: string;
          };
          hydroCannon: {
              name: string;
              effect: string;
          };
          meteorMash: {
              name: string;
              effect: string;
          };
          astonish: {
              name: string;
              effect: string;
          };
          weatherBall: {
              name: string;
              effect: string;
          };
          aromatherapy: {
              name: string;
              effect: string;
          };
          fakeTears: {
              name: string;
              effect: string;
          };
          airCutter: {
              name: string;
              effect: string;
          };
          overheat: {
              name: string;
              effect: string;
          };
          odorSleuth: {
              name: string;
              effect: string;
          };
          rockTomb: {
              name: string;
              effect: string;
          };
          silverWind: {
              name: string;
              effect: string;
          };
          metalSound: {
              name: string;
              effect: string;
          };
          grassWhistle: {
              name: string;
              effect: string;
          };
          tickle: {
              name: string;
              effect: string;
          };
          cosmicPower: {
              name: string;
              effect: string;
          };
          waterSpout: {
              name: string;
              effect: string;
          };
          signalBeam: {
              name: string;
              effect: string;
          };
          shadowPunch: {
              name: string;
              effect: string;
          };
          extrasensory: {
              name: string;
              effect: string;
          };
          skyUppercut: {
              name: string;
              effect: string;
          };
          sandTomb: {
              name: string;
              effect: string;
          };
          sheerCold: {
              name: string;
              effect: string;
          };
          muddyWater: {
              name: string;
              effect: string;
          };
          bulletSeed: {
              name: string;
              effect: string;
          };
          aerialAce: {
              name: string;
              effect: string;
          };
          icicleSpear: {
              name: string;
              effect: string;
          };
          ironDefense: {
              name: string;
              effect: string;
          };
          block: {
              name: string;
              effect: string;
          };
          howl: {
              name: string;
              effect: string;
          };
          dragonClaw: {
              name: string;
              effect: string;
          };
          frenzyPlant: {
              name: string;
              effect: string;
          };
          bulkUp: {
              name: string;
              effect: string;
          };
          bounce: {
              name: string;
              effect: string;
          };
          mudShot: {
              name: string;
              effect: string;
          };
          poisonTail: {
              name: string;
              effect: string;
          };
          covet: {
              name: string;
              effect: string;
          };
          voltTackle: {
              name: string;
              effect: string;
          };
          magicalLeaf: {
              name: string;
              effect: string;
          };
          waterSport: {
              name: string;
              effect: string;
          };
          calmMind: {
              name: string;
              effect: string;
          };
          leafBlade: {
              name: string;
              effect: string;
          };
          dragonDance: {
              name: string;
              effect: string;
          };
          rockBlast: {
              name: string;
              effect: string;
          };
          shockWave: {
              name: string;
              effect: string;
          };
          waterPulse: {
              name: string;
              effect: string;
          };
          doomDesire: {
              name: string;
              effect: string;
          };
          psychoBoost: {
              name: string;
              effect: string;
          };
          roost: {
              name: string;
              effect: string;
          };
          gravity: {
              name: string;
              effect: string;
          };
          miracleEye: {
              name: string;
              effect: string;
          };
          wakeUpSlap: {
              name: string;
              effect: string;
          };
          hammerArm: {
              name: string;
              effect: string;
          };
          gyroBall: {
              name: string;
              effect: string;
          };
          healingWish: {
              name: string;
              effect: string;
          };
          brine: {
              name: string;
              effect: string;
          };
          naturalGift: {
              name: string;
              effect: string;
          };
          feint: {
              name: string;
              effect: string;
          };
          pluck: {
              name: string;
              effect: string;
          };
          tailwind: {
              name: string;
              effect: string;
          };
          acupressure: {
              name: string;
              effect: string;
          };
          metalBurst: {
              name: string;
              effect: string;
          };
          uTurn: {
              name: string;
              effect: string;
          };
          closeCombat: {
              name: string;
              effect: string;
          };
          payback: {
              name: string;
              effect: string;
          };
          assurance: {
              name: string;
              effect: string;
          };
          embargo: {
              name: string;
              effect: string;
          };
          fling: {
              name: string;
              effect: string;
          };
          psychoShift: {
              name: string;
              effect: string;
          };
          trumpCard: {
              name: string;
              effect: string;
          };
          healBlock: {
              name: string;
              effect: string;
          };
          wringOut: {
              name: string;
              effect: string;
          };
          powerTrick: {
              name: string;
              effect: string;
          };
          gastroAcid: {
              name: string;
              effect: string;
          };
          luckyChant: {
              name: string;
              effect: string;
          };
          meFirst: {
              name: string;
              effect: string;
          };
          copycat: {
              name: string;
              effect: string;
          };
          powerSwap: {
              name: string;
              effect: string;
          };
          guardSwap: {
              name: string;
              effect: string;
          };
          punishment: {
              name: string;
              effect: string;
          };
          lastResort: {
              name: string;
              effect: string;
          };
          worrySeed: {
              name: string;
              effect: string;
          };
          suckerPunch: {
              name: string;
              effect: string;
          };
          toxicSpikes: {
              name: string;
              effect: string;
          };
          heartSwap: {
              name: string;
              effect: string;
          };
          aquaRing: {
              name: string;
              effect: string;
          };
          magnetRise: {
              name: string;
              effect: string;
          };
          flareBlitz: {
              name: string;
              effect: string;
          };
          forcePalm: {
              name: string;
              effect: string;
          };
          auraSphere: {
              name: string;
              effect: string;
          };
          rockPolish: {
              name: string;
              effect: string;
          };
          poisonJab: {
              name: string;
              effect: string;
          };
          darkPulse: {
              name: string;
              effect: string;
          };
          nightSlash: {
              name: string;
              effect: string;
          };
          aquaTail: {
              name: string;
              effect: string;
          };
          seedBomb: {
              name: string;
              effect: string;
          };
          airSlash: {
              name: string;
              effect: string;
          };
          xScissor: {
              name: string;
              effect: string;
          };
          bugBuzz: {
              name: string;
              effect: string;
          };
          dragonPulse: {
              name: string;
              effect: string;
          };
          dragonRush: {
              name: string;
              effect: string;
          };
          powerGem: {
              name: string;
              effect: string;
          };
          drainPunch: {
              name: string;
              effect: string;
          };
          vacuumWave: {
              name: string;
              effect: string;
          };
          focusBlast: {
              name: string;
              effect: string;
          };
          energyBall: {
              name: string;
              effect: string;
          };
          braveBird: {
              name: string;
              effect: string;
          };
          earthPower: {
              name: string;
              effect: string;
          };
          switcheroo: {
              name: string;
              effect: string;
          };
          gigaImpact: {
              name: string;
              effect: string;
          };
          nastyPlot: {
              name: string;
              effect: string;
          };
          bulletPunch: {
              name: string;
              effect: string;
          };
          avalanche: {
              name: string;
              effect: string;
          };
          iceShard: {
              name: string;
              effect: string;
          };
          shadowClaw: {
              name: string;
              effect: string;
          };
          thunderFang: {
              name: string;
              effect: string;
          };
          iceFang: {
              name: string;
              effect: string;
          };
          fireFang: {
              name: string;
              effect: string;
          };
          shadowSneak: {
              name: string;
              effect: string;
          };
          mudBomb: {
              name: string;
              effect: string;
          };
          psychoCut: {
              name: string;
              effect: string;
          };
          zenHeadbutt: {
              name: string;
              effect: string;
          };
          mirrorShot: {
              name: string;
              effect: string;
          };
          flashCannon: {
              name: string;
              effect: string;
          };
          rockClimb: {
              name: string;
              effect: string;
          };
          defog: {
              name: string;
              effect: string;
          };
          trickRoom: {
              name: string;
              effect: string;
          };
          dracoMeteor: {
              name: string;
              effect: string;
          };
          discharge: {
              name: string;
              effect: string;
          };
          lavaPlume: {
              name: string;
              effect: string;
          };
          leafStorm: {
              name: string;
              effect: string;
          };
          powerWhip: {
              name: string;
              effect: string;
          };
          rockWrecker: {
              name: string;
              effect: string;
          };
          crossPoison: {
              name: string;
              effect: string;
          };
          gunkShot: {
              name: string;
              effect: string;
          };
          ironHead: {
              name: string;
              effect: string;
          };
          magnetBomb: {
              name: string;
              effect: string;
          };
          stoneEdge: {
              name: string;
              effect: string;
          };
          captivate: {
              name: string;
              effect: string;
          };
          stealthRock: {
              name: string;
              effect: string;
          };
          grassKnot: {
              name: string;
              effect: string;
          };
          chatter: {
              name: string;
              effect: string;
          };
          judgment: {
              name: string;
              effect: string;
          };
          bugBite: {
              name: string;
              effect: string;
          };
          chargeBeam: {
              name: string;
              effect: string;
          };
          woodHammer: {
              name: string;
              effect: string;
          };
          aquaJet: {
              name: string;
              effect: string;
          };
          attackOrder: {
              name: string;
              effect: string;
          };
          defendOrder: {
              name: string;
              effect: string;
          };
          healOrder: {
              name: string;
              effect: string;
          };
          headSmash: {
              name: string;
              effect: string;
          };
          doubleHit: {
              name: string;
              effect: string;
          };
          roarOfTime: {
              name: string;
              effect: string;
          };
          spacialRend: {
              name: string;
              effect: string;
          };
          lunarDance: {
              name: string;
              effect: string;
          };
          crushGrip: {
              name: string;
              effect: string;
          };
          magmaStorm: {
              name: string;
              effect: string;
          };
          darkVoid: {
              name: string;
              effect: string;
          };
          seedFlare: {
              name: string;
              effect: string;
          };
          ominousWind: {
              name: string;
              effect: string;
          };
          shadowForce: {
              name: string;
              effect: string;
          };
          honeClaws: {
              name: string;
              effect: string;
          };
          wideGuard: {
              name: string;
              effect: string;
          };
          guardSplit: {
              name: string;
              effect: string;
          };
          powerSplit: {
              name: string;
              effect: string;
          };
          wonderRoom: {
              name: string;
              effect: string;
          };
          psyshock: {
              name: string;
              effect: string;
          };
          venoshock: {
              name: string;
              effect: string;
          };
          autotomize: {
              name: string;
              effect: string;
          };
          ragePowder: {
              name: string;
              effect: string;
          };
          telekinesis: {
              name: string;
              effect: string;
          };
          magicRoom: {
              name: string;
              effect: string;
          };
          smackDown: {
              name: string;
              effect: string;
          };
          stormThrow: {
              name: string;
              effect: string;
          };
          flameBurst: {
              name: string;
              effect: string;
          };
          sludgeWave: {
              name: string;
              effect: string;
          };
          quiverDance: {
              name: string;
              effect: string;
          };
          heavySlam: {
              name: string;
              effect: string;
          };
          synchronoise: {
              name: string;
              effect: string;
          };
          electroBall: {
              name: string;
              effect: string;
          };
          soak: {
              name: string;
              effect: string;
          };
          flameCharge: {
              name: string;
              effect: string;
          };
          coil: {
              name: string;
              effect: string;
          };
          lowSweep: {
              name: string;
              effect: string;
          };
          acidSpray: {
              name: string;
              effect: string;
          };
          foulPlay: {
              name: string;
              effect: string;
          };
          simpleBeam: {
              name: string;
              effect: string;
          };
          entrainment: {
              name: string;
              effect: string;
          };
          afterYou: {
              name: string;
              effect: string;
          };
          round: {
              name: string;
              effect: string;
          };
          echoedVoice: {
              name: string;
              effect: string;
          };
          chipAway: {
              name: string;
              effect: string;
          };
          clearSmog: {
              name: string;
              effect: string;
          };
          storedPower: {
              name: string;
              effect: string;
          };
          quickGuard: {
              name: string;
              effect: string;
          };
          allySwitch: {
              name: string;
              effect: string;
          };
          scald: {
              name: string;
              effect: string;
          };
          shellSmash: {
              name: string;
              effect: string;
          };
          healPulse: {
              name: string;
              effect: string;
          };
          hex: {
              name: string;
              effect: string;
          };
          skyDrop: {
              name: string;
              effect: string;
          };
          shiftGear: {
              name: string;
              effect: string;
          };
          circleThrow: {
              name: string;
              effect: string;
          };
          incinerate: {
              name: string;
              effect: string;
          };
          quash: {
              name: string;
              effect: string;
          };
          acrobatics: {
              name: string;
              effect: string;
          };
          reflectType: {
              name: string;
              effect: string;
          };
          retaliate: {
              name: string;
              effect: string;
          };
          finalGambit: {
              name: string;
              effect: string;
          };
          bestow: {
              name: string;
              effect: string;
          };
          inferno: {
              name: string;
              effect: string;
          };
          waterPledge: {
              name: string;
              effect: string;
          };
          firePledge: {
              name: string;
              effect: string;
          };
          grassPledge: {
              name: string;
              effect: string;
          };
          voltSwitch: {
              name: string;
              effect: string;
          };
          struggleBug: {
              name: string;
              effect: string;
          };
          bulldoze: {
              name: string;
              effect: string;
          };
          frostBreath: {
              name: string;
              effect: string;
          };
          dragonTail: {
              name: string;
              effect: string;
          };
          workUp: {
              name: string;
              effect: string;
          };
          electroweb: {
              name: string;
              effect: string;
          };
          wildCharge: {
              name: string;
              effect: string;
          };
          drillRun: {
              name: string;
              effect: string;
          };
          dualChop: {
              name: string;
              effect: string;
          };
          heartStamp: {
              name: string;
              effect: string;
          };
          hornLeech: {
              name: string;
              effect: string;
          };
          sacredSword: {
              name: string;
              effect: string;
          };
          razorShell: {
              name: string;
              effect: string;
          };
          heatCrash: {
              name: string;
              effect: string;
          };
          leafTornado: {
              name: string;
              effect: string;
          };
          steamroller: {
              name: string;
              effect: string;
          };
          cottonGuard: {
              name: string;
              effect: string;
          };
          nightDaze: {
              name: string;
              effect: string;
          };
          psystrike: {
              name: string;
              effect: string;
          };
          tailSlap: {
              name: string;
              effect: string;
          };
          hurricane: {
              name: string;
              effect: string;
          };
          headCharge: {
              name: string;
              effect: string;
          };
          gearGrind: {
              name: string;
              effect: string;
          };
          searingShot: {
              name: string;
              effect: string;
          };
          technoBlast: {
              name: string;
              effect: string;
          };
          relicSong: {
              name: string;
              effect: string;
          };
          secretSword: {
              name: string;
              effect: string;
          };
          glaciate: {
              name: string;
              effect: string;
          };
          boltStrike: {
              name: string;
              effect: string;
          };
          blueFlare: {
              name: string;
              effect: string;
          };
          fieryDance: {
              name: string;
              effect: string;
          };
          freezeShock: {
              name: string;
              effect: string;
          };
          iceBurn: {
              name: string;
              effect: string;
          };
          snarl: {
              name: string;
              effect: string;
          };
          icicleCrash: {
              name: string;
              effect: string;
          };
          vCreate: {
              name: string;
              effect: string;
          };
          fusionFlare: {
              name: string;
              effect: string;
          };
          fusionBolt: {
              name: string;
              effect: string;
          };
          flyingPress: {
              name: string;
              effect: string;
          };
          matBlock: {
              name: string;
              effect: string;
          };
          belch: {
              name: string;
              effect: string;
          };
          rototiller: {
              name: string;
              effect: string;
          };
          stickyWeb: {
              name: string;
              effect: string;
          };
          fellStinger: {
              name: string;
              effect: string;
          };
          phantomForce: {
              name: string;
              effect: string;
          };
          trickOrTreat: {
              name: string;
              effect: string;
          };
          nobleRoar: {
              name: string;
              effect: string;
          };
          ionDeluge: {
              name: string;
              effect: string;
          };
          parabolicCharge: {
              name: string;
              effect: string;
          };
          forestsCurse: {
              name: string;
              effect: string;
          };
          petalBlizzard: {
              name: string;
              effect: string;
          };
          freezeDry: {
              name: string;
              effect: string;
          };
          disarmingVoice: {
              name: string;
              effect: string;
          };
          partingShot: {
              name: string;
              effect: string;
          };
          topsyTurvy: {
              name: string;
              effect: string;
          };
          drainingKiss: {
              name: string;
              effect: string;
          };
          craftyShield: {
              name: string;
              effect: string;
          };
          flowerShield: {
              name: string;
              effect: string;
          };
          grassyTerrain: {
              name: string;
              effect: string;
          };
          mistyTerrain: {
              name: string;
              effect: string;
          };
          electrify: {
              name: string;
              effect: string;
          };
          playRough: {
              name: string;
              effect: string;
          };
          fairyWind: {
              name: string;
              effect: string;
          };
          moonblast: {
              name: string;
              effect: string;
          };
          boomburst: {
              name: string;
              effect: string;
          };
          fairyLock: {
              name: string;
              effect: string;
          };
          kingsShield: {
              name: string;
              effect: string;
          };
          playNice: {
              name: string;
              effect: string;
          };
          confide: {
              name: string;
              effect: string;
          };
          diamondStorm: {
              name: string;
              effect: string;
          };
          steamEruption: {
              name: string;
              effect: string;
          };
          hyperspaceHole: {
              name: string;
              effect: string;
          };
          waterShuriken: {
              name: string;
              effect: string;
          };
          mysticalFire: {
              name: string;
              effect: string;
          };
          spikyShield: {
              name: string;
              effect: string;
          };
          aromaticMist: {
              name: string;
              effect: string;
          };
          eerieImpulse: {
              name: string;
              effect: string;
          };
          venomDrench: {
              name: string;
              effect: string;
          };
          powder: {
              name: string;
              effect: string;
          };
          geomancy: {
              name: string;
              effect: string;
          };
          magneticFlux: {
              name: string;
              effect: string;
          };
          happyHour: {
              name: string;
              effect: string;
          };
          electricTerrain: {
              name: string;
              effect: string;
          };
          dazzlingGleam: {
              name: string;
              effect: string;
          };
          celebrate: {
              name: string;
              effect: string;
          };
          holdHands: {
              name: string;
              effect: string;
          };
          babyDollEyes: {
              name: string;
              effect: string;
          };
          nuzzle: {
              name: string;
              effect: string;
          };
          holdBack: {
              name: string;
              effect: string;
          };
          infestation: {
              name: string;
              effect: string;
          };
          powerUpPunch: {
              name: string;
              effect: string;
          };
          oblivionWing: {
              name: string;
              effect: string;
          };
          thousandArrows: {
              name: string;
              effect: string;
          };
          thousandWaves: {
              name: string;
              effect: string;
          };
          landsWrath: {
              name: string;
              effect: string;
          };
          lightOfRuin: {
              name: string;
              effect: string;
          };
          originPulse: {
              name: string;
              effect: string;
          };
          precipiceBlades: {
              name: string;
              effect: string;
          };
          dragonAscent: {
              name: string;
              effect: string;
          };
          hyperspaceFury: {
              name: string;
              effect: string;
          };
          breakneckBlitzPhysical: {
              name: string;
              effect: string;
          };
          breakneckBlitzSpecial: {
              name: string;
              effect: string;
          };
          allOutPummelingPhysical: {
              name: string;
              effect: string;
          };
          allOutPummelingSpecial: {
              name: string;
              effect: string;
          };
          supersonicSkystrikePhysical: {
              name: string;
              effect: string;
          };
          supersonicSkystrikeSpecial: {
              name: string;
              effect: string;
          };
          acidDownpourPhysical: {
              name: string;
              effect: string;
          };
          acidDownpourSpecial: {
              name: string;
              effect: string;
          };
          tectonicRagePhysical: {
              name: string;
              effect: string;
          };
          tectonicRageSpecial: {
              name: string;
              effect: string;
          };
          continentalCrushPhysical: {
              name: string;
              effect: string;
          };
          continentalCrushSpecial: {
              name: string;
              effect: string;
          };
          savageSpinOutPhysical: {
              name: string;
              effect: string;
          };
          savageSpinOutSpecial: {
              name: string;
              effect: string;
          };
          neverEndingNightmarePhysical: {
              name: string;
              effect: string;
          };
          neverEndingNightmareSpecial: {
              name: string;
              effect: string;
          };
          corkscrewCrashPhysical: {
              name: string;
              effect: string;
          };
          corkscrewCrashSpecial: {
              name: string;
              effect: string;
          };
          infernoOverdrivePhysical: {
              name: string;
              effect: string;
          };
          infernoOverdriveSpecial: {
              name: string;
              effect: string;
          };
          hydroVortexPhysical: {
              name: string;
              effect: string;
          };
          hydroVortexSpecial: {
              name: string;
              effect: string;
          };
          bloomDoomPhysical: {
              name: string;
              effect: string;
          };
          bloomDoomSpecial: {
              name: string;
              effect: string;
          };
          gigavoltHavocPhysical: {
              name: string;
              effect: string;
          };
          gigavoltHavocSpecial: {
              name: string;
              effect: string;
          };
          shatteredPsychePhysical: {
              name: string;
              effect: string;
          };
          shatteredPsycheSpecial: {
              name: string;
              effect: string;
          };
          subzeroSlammerPhysical: {
              name: string;
              effect: string;
          };
          subzeroSlammerSpecial: {
              name: string;
              effect: string;
          };
          devastatingDrakePhysical: {
              name: string;
              effect: string;
          };
          devastatingDrakeSpecial: {
              name: string;
              effect: string;
          };
          blackHoleEclipsePhysical: {
              name: string;
              effect: string;
          };
          blackHoleEclipseSpecial: {
              name: string;
              effect: string;
          };
          twinkleTacklePhysical: {
              name: string;
              effect: string;
          };
          twinkleTackleSpecial: {
              name: string;
              effect: string;
          };
          catastropika: {
              name: string;
              effect: string;
          };
          shoreUp: {
              name: string;
              effect: string;
          };
          firstImpression: {
              name: string;
              effect: string;
          };
          banefulBunker: {
              name: string;
              effect: string;
          };
          spiritShackle: {
              name: string;
              effect: string;
          };
          darkestLariat: {
              name: string;
              effect: string;
          };
          sparklingAria: {
              name: string;
              effect: string;
          };
          iceHammer: {
              name: string;
              effect: string;
          };
          floralHealing: {
              name: string;
              effect: string;
          };
          highHorsepower: {
              name: string;
              effect: string;
          };
          strengthSap: {
              name: string;
              effect: string;
          };
          solarBlade: {
              name: string;
              effect: string;
          };
          leafage: {
              name: string;
              effect: string;
          };
          spotlight: {
              name: string;
              effect: string;
          };
          toxicThread: {
              name: string;
              effect: string;
          };
          laserFocus: {
              name: string;
              effect: string;
          };
          gearUp: {
              name: string;
              effect: string;
          };
          throatChop: {
              name: string;
              effect: string;
          };
          pollenPuff: {
              name: string;
              effect: string;
          };
          anchorShot: {
              name: string;
              effect: string;
          };
          psychicTerrain: {
              name: string;
              effect: string;
          };
          lunge: {
              name: string;
              effect: string;
          };
          fireLash: {
              name: string;
              effect: string;
          };
          powerTrip: {
              name: string;
              effect: string;
          };
          burnUp: {
              name: string;
              effect: string;
          };
          speedSwap: {
              name: string;
              effect: string;
          };
          smartStrike: {
              name: string;
              effect: string;
          };
          purify: {
              name: string;
              effect: string;
          };
          revelationDance: {
              name: string;
              effect: string;
          };
          coreEnforcer: {
              name: string;
              effect: string;
          };
          tropKick: {
              name: string;
              effect: string;
          };
          instruct: {
              name: string;
              effect: string;
          };
          beakBlast: {
              name: string;
              effect: string;
          };
          clangingScales: {
              name: string;
              effect: string;
          };
          dragonHammer: {
              name: string;
              effect: string;
          };
          brutalSwing: {
              name: string;
              effect: string;
          };
          auroraVeil: {
              name: string;
              effect: string;
          };
          sinisterArrowRaid: {
              name: string;
              effect: string;
          };
          maliciousMoonsault: {
              name: string;
              effect: string;
          };
          oceanicOperetta: {
              name: string;
              effect: string;
          };
          guardianOfAlola: {
              name: string;
              effect: string;
          };
          soulStealing7StarStrike: {
              name: string;
              effect: string;
          };
          stokedSparksurfer: {
              name: string;
              effect: string;
          };
          pulverizingPancake: {
              name: string;
              effect: string;
          };
          extremeEvoboost: {
              name: string;
              effect: string;
          };
          genesisSupernova: {
              name: string;
              effect: string;
          };
          shellTrap: {
              name: string;
              effect: string;
          };
          fleurCannon: {
              name: string;
              effect: string;
          };
          psychicFangs: {
              name: string;
              effect: string;
          };
          stompingTantrum: {
              name: string;
              effect: string;
          };
          shadowBone: {
              name: string;
              effect: string;
          };
          accelerock: {
              name: string;
              effect: string;
          };
          liquidation: {
              name: string;
              effect: string;
          };
          prismaticLaser: {
              name: string;
              effect: string;
          };
          spectralThief: {
              name: string;
              effect: string;
          };
          sunsteelStrike: {
              name: string;
              effect: string;
          };
          moongeistBeam: {
              name: string;
              effect: string;
          };
          tearfulLook: {
              name: string;
              effect: string;
          };
          zingZap: {
              name: string;
              effect: string;
          };
          naturesMadness: {
              name: string;
              effect: string;
          };
          multiAttack: {
              name: string;
              effect: string;
          };
          tenMillionVoltThunderbolt: {
              name: string;
              effect: string;
          };
          mindBlown: {
              name: string;
              effect: string;
          };
          plasmaFists: {
              name: string;
              effect: string;
          };
          photonGeyser: {
              name: string;
              effect: string;
          };
          lightThatBurnsTheSky: {
              name: string;
              effect: string;
          };
          searingSunrazeSmash: {
              name: string;
              effect: string;
          };
          menacingMoonrazeMaelstrom: {
              name: string;
              effect: string;
          };
          letsSnuggleForever: {
              name: string;
              effect: string;
          };
          splinteredStormshards: {
              name: string;
              effect: string;
          };
          clangorousSoulblaze: {
              name: string;
              effect: string;
          };
          zippyZap: {
              name: string;
              effect: string;
          };
          splishySplash: {
              name: string;
              effect: string;
          };
          floatyFall: {
              name: string;
              effect: string;
          };
          pikaPapow: {
              name: string;
              effect: string;
          };
          bouncyBubble: {
              name: string;
              effect: string;
          };
          buzzyBuzz: {
              name: string;
              effect: string;
          };
          sizzlySlide: {
              name: string;
              effect: string;
          };
          glitzyGlow: {
              name: string;
              effect: string;
          };
          baddyBad: {
              name: string;
              effect: string;
          };
          sappySeed: {
              name: string;
              effect: string;
          };
          freezyFrost: {
              name: string;
              effect: string;
          };
          sparklySwirl: {
              name: string;
              effect: string;
          };
          veeveeVolley: {
              name: string;
              effect: string;
          };
          doubleIronBash: {
              name: string;
              effect: string;
          };
          maxGuard: {
              name: string;
              effect: string;
          };
          dynamaxCannon: {
              name: string;
              effect: string;
          };
          snipeShot: {
              name: string;
              effect: string;
          };
          jawLock: {
              name: string;
              effect: string;
          };
          stuffCheeks: {
              name: string;
              effect: string;
          };
          noRetreat: {
              name: string;
              effect: string;
          };
          tarShot: {
              name: string;
              effect: string;
          };
          magicPowder: {
              name: string;
              effect: string;
          };
          dragonDarts: {
              name: string;
              effect: string;
          };
          teatime: {
              name: string;
              effect: string;
          };
          octolock: {
              name: string;
              effect: string;
          };
          boltBeak: {
              name: string;
              effect: string;
          };
          fishiousRend: {
              name: string;
              effect: string;
          };
          courtChange: {
              name: string;
              effect: string;
          };
          maxFlare: {
              name: string;
              effect: string;
          };
          maxFlutterby: {
              name: string;
              effect: string;
          };
          maxLightning: {
              name: string;
              effect: string;
          };
          maxStrike: {
              name: string;
              effect: string;
          };
          maxKnuckle: {
              name: string;
              effect: string;
          };
          maxPhantasm: {
              name: string;
              effect: string;
          };
          maxHailstorm: {
              name: string;
              effect: string;
          };
          maxOoze: {
              name: string;
              effect: string;
          };
          maxGeyser: {
              name: string;
              effect: string;
          };
          maxAirstream: {
              name: string;
              effect: string;
          };
          maxStarfall: {
              name: string;
              effect: string;
          };
          maxWyrmwind: {
              name: string;
              effect: string;
          };
          maxMindstorm: {
              name: string;
              effect: string;
          };
          maxRockfall: {
              name: string;
              effect: string;
          };
          maxQuake: {
              name: string;
              effect: string;
          };
          maxDarkness: {
              name: string;
              effect: string;
          };
          maxOvergrowth: {
              name: string;
              effect: string;
          };
          maxSteelspike: {
              name: string;
              effect: string;
          };
          clangorousSoul: {
              name: string;
              effect: string;
          };
          bodyPress: {
              name: string;
              effect: string;
          };
          decorate: {
              name: string;
              effect: string;
          };
          drumBeating: {
              name: string;
              effect: string;
          };
          snapTrap: {
              name: string;
              effect: string;
          };
          pyroBall: {
              name: string;
              effect: string;
          };
          behemothBlade: {
              name: string;
              effect: string;
          };
          behemothBash: {
              name: string;
              effect: string;
          };
          auraWheel: {
              name: string;
              effect: string;
          };
          breakingSwipe: {
              name: string;
              effect: string;
          };
          branchPoke: {
              name: string;
              effect: string;
          };
          overdrive: {
              name: string;
              effect: string;
          };
          appleAcid: {
              name: string;
              effect: string;
          };
          gravApple: {
              name: string;
              effect: string;
          };
          spiritBreak: {
              name: string;
              effect: string;
          };
          strangeSteam: {
              name: string;
              effect: string;
          };
          lifeDew: {
              name: string;
              effect: string;
          };
          obstruct: {
              name: string;
              effect: string;
          };
          falseSurrender: {
              name: string;
              effect: string;
          };
          meteorAssault: {
              name: string;
              effect: string;
          };
          eternabeam: {
              name: string;
              effect: string;
          };
          steelBeam: {
              name: string;
              effect: string;
          };
          expandingForce: {
              name: string;
              effect: string;
          };
          steelRoller: {
              name: string;
              effect: string;
          };
          scaleShot: {
              name: string;
              effect: string;
          };
          meteorBeam: {
              name: string;
              effect: string;
          };
          shellSideArm: {
              name: string;
              effect: string;
          };
          mistyExplosion: {
              name: string;
              effect: string;
          };
          grassyGlide: {
              name: string;
              effect: string;
          };
          risingVoltage: {
              name: string;
              effect: string;
          };
          terrainPulse: {
              name: string;
              effect: string;
          };
          skitterSmack: {
              name: string;
              effect: string;
          };
          burningJealousy: {
              name: string;
              effect: string;
          };
          lashOut: {
              name: string;
              effect: string;
          };
          poltergeist: {
              name: string;
              effect: string;
          };
          corrosiveGas: {
              name: string;
              effect: string;
          };
          coaching: {
              name: string;
              effect: string;
          };
          flipTurn: {
              name: string;
              effect: string;
          };
          tripleAxel: {
              name: string;
              effect: string;
          };
          dualWingbeat: {
              name: string;
              effect: string;
          };
          scorchingSands: {
              name: string;
              effect: string;
          };
          jungleHealing: {
              name: string;
              effect: string;
          };
          wickedBlow: {
              name: string;
              effect: string;
          };
          surgingStrikes: {
              name: string;
              effect: string;
          };
          thunderCage: {
              name: string;
              effect: string;
          };
          dragonEnergy: {
              name: string;
              effect: string;
          };
          freezingGlare: {
              name: string;
              effect: string;
          };
          fieryWrath: {
              name: string;
              effect: string;
          };
          thunderousKick: {
              name: string;
              effect: string;
          };
          glacialLance: {
              name: string;
              effect: string;
          };
          astralBarrage: {
              name: string;
              effect: string;
          };
          eerieSpell: {
              name: string;
              effect: string;
          };
          direClaw: {
              name: string;
              effect: string;
          };
          psyshieldBash: {
              name: string;
              effect: string;
          };
          powerShift: {
              name: string;
              effect: string;
          };
          stoneAxe: {
              name: string;
              effect: string;
          };
          springtideStorm: {
              name: string;
              effect: string;
          };
          mysticalPower: {
              name: string;
              effect: string;
          };
          ragingFury: {
              name: string;
              effect: string;
          };
          waveCrash: {
              name: string;
              effect: string;
          };
          chloroblast: {
              name: string;
              effect: string;
          };
          mountainGale: {
              name: string;
              effect: string;
          };
          victoryDance: {
              name: string;
              effect: string;
          };
          headlongRush: {
              name: string;
              effect: string;
          };
          barbBarrage: {
              name: string;
              effect: string;
          };
          esperWing: {
              name: string;
              effect: string;
          };
          bitterMalice: {
              name: string;
              effect: string;
          };
          shelter: {
              name: string;
              effect: string;
          };
          tripleArrows: {
              name: string;
              effect: string;
          };
          infernalParade: {
              name: string;
              effect: string;
          };
          ceaselessEdge: {
              name: string;
              effect: string;
          };
          bleakwindStorm: {
              name: string;
              effect: string;
          };
          wildboltStorm: {
              name: string;
              effect: string;
          };
          sandsearStorm: {
              name: string;
              effect: string;
          };
          lunarBlessing: {
              name: string;
              effect: string;
          };
          takeHeart: {
              name: string;
              effect: string;
          };
          gMaxWildfire: {
              name: string;
              effect: string;
          };
          gMaxBefuddle: {
              name: string;
              effect: string;
          };
          gMaxVoltCrash: {
              name: string;
              effect: string;
          };
          gMaxGoldRush: {
              name: string;
              effect: string;
          };
          gMaxChiStrike: {
              name: string;
              effect: string;
          };
          gMaxTerror: {
              name: string;
              effect: string;
          };
          gMaxResonance: {
              name: string;
              effect: string;
          };
          gMaxCuddle: {
              name: string;
              effect: string;
          };
          gMaxReplenish: {
              name: string;
              effect: string;
          };
          gMaxMalodor: {
              name: string;
              effect: string;
          };
          gMaxStonesurge: {
              name: string;
              effect: string;
          };
          gMaxWindRage: {
              name: string;
              effect: string;
          };
          gMaxStunShock: {
              name: string;
              effect: string;
          };
          gMaxFinale: {
              name: string;
              effect: string;
          };
          gMaxDepletion: {
              name: string;
              effect: string;
          };
          gMaxGravitas: {
              name: string;
              effect: string;
          };
          gMaxVolcalith: {
              name: string;
              effect: string;
          };
          gMaxSandblast: {
              name: string;
              effect: string;
          };
          gMaxSnooze: {
              name: string;
              effect: string;
          };
          gMaxTartness: {
              name: string;
              effect: string;
          };
          gMaxSweetness: {
              name: string;
              effect: string;
          };
          gMaxSmite: {
              name: string;
              effect: string;
          };
          gMaxSteelsurge: {
              name: string;
              effect: string;
          };
          gMaxMeltdown: {
              name: string;
              effect: string;
          };
          gMaxFoamBurst: {
              name: string;
              effect: string;
          };
          gMaxCentiferno: {
              name: string;
              effect: string;
          };
          gMaxVineLash: {
              name: string;
              effect: string;
          };
          gMaxCannonade: {
              name: string;
              effect: string;
          };
          gMaxDrumSolo: {
              name: string;
              effect: string;
          };
          gMaxFireball: {
              name: string;
              effect: string;
          };
          gMaxHydrosnipe: {
              name: string;
              effect: string;
          };
          gMaxOneBlow: {
              name: string;
              effect: string;
          };
          gMaxRapidFlow: {
              name: string;
              effect: string;
          };
          teraBlast: {
              name: string;
              effect: string;
          };
          silkTrap: {
              name: string;
              effect: string;
          };
          axeKick: {
              name: string;
              effect: string;
          };
          lastRespects: {
              name: string;
              effect: string;
          };
          luminaCrash: {
              name: string;
              effect: string;
          };
          orderUp: {
              name: string;
              effect: string;
          };
          jetPunch: {
              name: string;
              effect: string;
          };
          spicyExtract: {
              name: string;
              effect: string;
          };
          spinOut: {
              name: string;
              effect: string;
          };
          populationBomb: {
              name: string;
              effect: string;
          };
          iceSpinner: {
              name: string;
              effect: string;
          };
          glaiveRush: {
              name: string;
              effect: string;
          };
          revivalBlessing: {
              name: string;
              effect: string;
          };
          saltCure: {
              name: string;
              effect: string;
          };
          tripleDive: {
              name: string;
              effect: string;
          };
          mortalSpin: {
              name: string;
              effect: string;
          };
          doodle: {
              name: string;
              effect: string;
          };
          filletAway: {
              name: string;
              effect: string;
          };
          kowtowCleave: {
              name: string;
              effect: string;
          };
          flowerTrick: {
              name: string;
              effect: string;
          };
          torchSong: {
              name: string;
              effect: string;
          };
          aquaStep: {
              name: string;
              effect: string;
          };
          ragingBull: {
              name: string;
              effect: string;
          };
          makeItRain: {
              name: string;
              effect: string;
          };
          psyblade: {
              name: string;
              effect: string;
          };
          hydroSteam: {
              name: string;
              effect: string;
          };
          ruination: {
              name: string;
              effect: string;
          };
          collisionCourse: {
              name: string;
              effect: string;
          };
          electroDrift: {
              name: string;
              effect: string;
          };
          shedTail: {
              name: string;
              effect: string;
          };
          chillyReception: {
              name: string;
              effect: string;
          };
          tidyUp: {
              name: string;
              effect: string;
          };
          snowscape: {
              name: string;
              effect: string;
          };
          pounce: {
              name: string;
              effect: string;
          };
          trailblaze: {
              name: string;
              effect: string;
          };
          chillingWater: {
              name: string;
              effect: string;
          };
          hyperDrill: {
              name: string;
              effect: string;
          };
          twinBeam: {
              name: string;
              effect: string;
          };
          rageFist: {
              name: string;
              effect: string;
          };
          armorCannon: {
              name: string;
              effect: string;
          };
          bitterBlade: {
              name: string;
              effect: string;
          };
          doubleShock: {
              name: string;
              effect: string;
          };
          gigatonHammer: {
              name: string;
              effect: string;
          };
          comeuppance: {
              name: string;
              effect: string;
          };
          aquaCutter: {
              name: string;
              effect: string;
          };
          blazingTorque: {
              name: string;
              effect: string;
          };
          wickedTorque: {
              name: string;
              effect: string;
          };
          noxiousTorque: {
              name: string;
              effect: string;
          };
          combatTorque: {
              name: string;
              effect: string;
          };
          magicalTorque: {
              name: string;
              effect: string;
          };
          bloodMoon: {
              name: string;
              effect: string;
          };
          matchaGotcha: {
              name: string;
              effect: string;
          };
          syrupBomb: {
              name: string;
              effect: string;
          };
          ivyCudgel: {
              name: string;
              effect: string;
          };
          electroShot: {
              name: string;
              effect: string;
          };
          teraStarstorm: {
              name: string;
              effect: string;
          };
          fickleBeam: {
              name: string;
              effect: string;
          };
          burningBulwark: {
              name: string;
              effect: string;
          };
          thunderclap: {
              name: string;
              effect: string;
          };
          mightyCleave: {
              name: string;
              effect: string;
          };
          tachyonCutter: {
              name: string;
              effect: string;
          };
          hardPress: {
              name: string;
              effect: string;
          };
          dragonCheer: {
              name: string;
              effect: string;
          };
          alluringVoice: {
              name: string;
              effect: string;
          };
          temperFlare: {
              name: string;
              effect: string;
          };
          supercellSlam: {
              name: string;
              effect: string;
          };
          psychicNoise: {
              name: string;
              effect: string;
          };
          upperHand: {
              name: string;
              effect: string;
          };
          malignantChain: {
              name: string;
              effect: string;
          };
      };
      nature: {
          Hardy: string;
          Lonely: string;
          Brave: string;
          Adamant: string;
          Naughty: string;
          Bold: string;
          Docile: string;
          Relaxed: string;
          Impish: string;
          Lax: string;
          Timid: string;
          Hasty: string;
          Serious: string;
          Jolly: string;
          Naive: string;
          Modest: string;
          Mild: string;
          Quiet: string;
          Bashful: string;
          Rash: string;
          Calm: string;
          Gentle: string;
          Sassy: string;
          Careful: string;
          Quirky: string;
      };
      pokeball: {
          pokeBall: string;
          greatBall: string;
          ultraBall: string;
          rogueBall: string;
          masterBall: string;
          luxuryBall: string;
      };
      pokemon: {
          bulbasaur: string;
          ivysaur: string;
          venusaur: string;
          charmander: string;
          charmeleon: string;
          charizard: string;
          squirtle: string;
          wartortle: string;
          blastoise: string;
          caterpie: string;
          metapod: string;
          butterfree: string;
          weedle: string;
          kakuna: string;
          beedrill: string;
          pidgey: string;
          pidgeotto: string;
          pidgeot: string;
          rattata: string;
          raticate: string;
          spearow: string;
          fearow: string;
          ekans: string;
          arbok: string;
          pikachu: string;
          raichu: string;
          sandshrew: string;
          sandslash: string;
          nidoran_f: string;
          nidorina: string;
          nidoqueen: string;
          nidoran_m: string;
          nidorino: string;
          nidoking: string;
          clefairy: string;
          clefable: string;
          vulpix: string;
          ninetales: string;
          jigglypuff: string;
          wigglytuff: string;
          zubat: string;
          golbat: string;
          oddish: string;
          gloom: string;
          vileplume: string;
          paras: string;
          parasect: string;
          venonat: string;
          venomoth: string;
          diglett: string;
          dugtrio: string;
          meowth: string;
          persian: string;
          psyduck: string;
          golduck: string;
          mankey: string;
          primeape: string;
          growlithe: string;
          arcanine: string;
          poliwag: string;
          poliwhirl: string;
          poliwrath: string;
          abra: string;
          kadabra: string;
          alakazam: string;
          machop: string;
          machoke: string;
          machamp: string;
          bellsprout: string;
          weepinbell: string;
          victreebel: string;
          tentacool: string;
          tentacruel: string;
          geodude: string;
          graveler: string;
          golem: string;
          ponyta: string;
          rapidash: string;
          slowpoke: string;
          slowbro: string;
          magnemite: string;
          magneton: string;
          farfetchd: string;
          doduo: string;
          dodrio: string;
          seel: string;
          dewgong: string;
          grimer: string;
          muk: string;
          shellder: string;
          cloyster: string;
          gastly: string;
          haunter: string;
          gengar: string;
          onix: string;
          drowzee: string;
          hypno: string;
          krabby: string;
          kingler: string;
          voltorb: string;
          electrode: string;
          exeggcute: string;
          exeggutor: string;
          cubone: string;
          marowak: string;
          hitmonlee: string;
          hitmonchan: string;
          lickitung: string;
          koffing: string;
          weezing: string;
          rhyhorn: string;
          rhydon: string;
          chansey: string;
          tangela: string;
          kangaskhan: string;
          horsea: string;
          seadra: string;
          goldeen: string;
          seaking: string;
          staryu: string;
          starmie: string;
          mr_mime: string;
          scyther: string;
          jynx: string;
          electabuzz: string;
          magmar: string;
          pinsir: string;
          tauros: string;
          magikarp: string;
          gyarados: string;
          lapras: string;
          ditto: string;
          eevee: string;
          vaporeon: string;
          jolteon: string;
          flareon: string;
          porygon: string;
          omanyte: string;
          omastar: string;
          kabuto: string;
          kabutops: string;
          aerodactyl: string;
          snorlax: string;
          articuno: string;
          zapdos: string;
          moltres: string;
          dratini: string;
          dragonair: string;
          dragonite: string;
          mewtwo: string;
          mew: string;
          chikorita: string;
          bayleef: string;
          meganium: string;
          cyndaquil: string;
          quilava: string;
          typhlosion: string;
          totodile: string;
          croconaw: string;
          feraligatr: string;
          sentret: string;
          furret: string;
          hoothoot: string;
          noctowl: string;
          ledyba: string;
          ledian: string;
          spinarak: string;
          ariados: string;
          crobat: string;
          chinchou: string;
          lanturn: string;
          pichu: string;
          cleffa: string;
          igglybuff: string;
          togepi: string;
          togetic: string;
          natu: string;
          xatu: string;
          mareep: string;
          flaaffy: string;
          ampharos: string;
          bellossom: string;
          marill: string;
          azumarill: string;
          sudowoodo: string;
          politoed: string;
          hoppip: string;
          skiploom: string;
          jumpluff: string;
          aipom: string;
          sunkern: string;
          sunflora: string;
          yanma: string;
          wooper: string;
          quagsire: string;
          espeon: string;
          umbreon: string;
          murkrow: string;
          slowking: string;
          misdreavus: string;
          unown: string;
          wobbuffet: string;
          girafarig: string;
          pineco: string;
          forretress: string;
          dunsparce: string;
          gligar: string;
          steelix: string;
          snubbull: string;
          granbull: string;
          qwilfish: string;
          scizor: string;
          shuckle: string;
          heracross: string;
          sneasel: string;
          teddiursa: string;
          ursaring: string;
          slugma: string;
          magcargo: string;
          swinub: string;
          piloswine: string;
          corsola: string;
          remoraid: string;
          octillery: string;
          delibird: string;
          mantine: string;
          skarmory: string;
          houndour: string;
          houndoom: string;
          kingdra: string;
          phanpy: string;
          donphan: string;
          porygon2: string;
          stantler: string;
          smeargle: string;
          tyrogue: string;
          hitmontop: string;
          smoochum: string;
          elekid: string;
          magby: string;
          miltank: string;
          blissey: string;
          raikou: string;
          entei: string;
          suicune: string;
          larvitar: string;
          pupitar: string;
          tyranitar: string;
          lugia: string;
          ho_oh: string;
          celebi: string;
          treecko: string;
          grovyle: string;
          sceptile: string;
          torchic: string;
          combusken: string;
          blaziken: string;
          mudkip: string;
          marshtomp: string;
          swampert: string;
          poochyena: string;
          mightyena: string;
          zigzagoon: string;
          linoone: string;
          wurmple: string;
          silcoon: string;
          beautifly: string;
          cascoon: string;
          dustox: string;
          lotad: string;
          lombre: string;
          ludicolo: string;
          seedot: string;
          nuzleaf: string;
          shiftry: string;
          taillow: string;
          swellow: string;
          wingull: string;
          pelipper: string;
          ralts: string;
          kirlia: string;
          gardevoir: string;
          surskit: string;
          masquerain: string;
          shroomish: string;
          breloom: string;
          slakoth: string;
          vigoroth: string;
          slaking: string;
          nincada: string;
          ninjask: string;
          shedinja: string;
          whismur: string;
          loudred: string;
          exploud: string;
          makuhita: string;
          hariyama: string;
          azurill: string;
          nosepass: string;
          skitty: string;
          delcatty: string;
          sableye: string;
          mawile: string;
          aron: string;
          lairon: string;
          aggron: string;
          meditite: string;
          medicham: string;
          electrike: string;
          manectric: string;
          plusle: string;
          minun: string;
          volbeat: string;
          illumise: string;
          roselia: string;
          gulpin: string;
          swalot: string;
          carvanha: string;
          sharpedo: string;
          wailmer: string;
          wailord: string;
          numel: string;
          camerupt: string;
          torkoal: string;
          spoink: string;
          grumpig: string;
          spinda: string;
          trapinch: string;
          vibrava: string;
          flygon: string;
          cacnea: string;
          cacturne: string;
          swablu: string;
          altaria: string;
          zangoose: string;
          seviper: string;
          lunatone: string;
          solrock: string;
          barboach: string;
          whiscash: string;
          corphish: string;
          crawdaunt: string;
          baltoy: string;
          claydol: string;
          lileep: string;
          cradily: string;
          anorith: string;
          armaldo: string;
          feebas: string;
          milotic: string;
          castform: string;
          kecleon: string;
          shuppet: string;
          banette: string;
          duskull: string;
          dusclops: string;
          tropius: string;
          chimecho: string;
          absol: string;
          wynaut: string;
          snorunt: string;
          glalie: string;
          spheal: string;
          sealeo: string;
          walrein: string;
          clamperl: string;
          huntail: string;
          gorebyss: string;
          relicanth: string;
          luvdisc: string;
          bagon: string;
          shelgon: string;
          salamence: string;
          beldum: string;
          metang: string;
          metagross: string;
          regirock: string;
          regice: string;
          registeel: string;
          latias: string;
          latios: string;
          kyogre: string;
          groudon: string;
          rayquaza: string;
          jirachi: string;
          deoxys: string;
          turtwig: string;
          grotle: string;
          torterra: string;
          chimchar: string;
          monferno: string;
          infernape: string;
          piplup: string;
          prinplup: string;
          empoleon: string;
          starly: string;
          staravia: string;
          staraptor: string;
          bidoof: string;
          bibarel: string;
          kricketot: string;
          kricketune: string;
          shinx: string;
          luxio: string;
          luxray: string;
          budew: string;
          roserade: string;
          cranidos: string;
          rampardos: string;
          shieldon: string;
          bastiodon: string;
          burmy: string;
          wormadam: string;
          mothim: string;
          combee: string;
          vespiquen: string;
          pachirisu: string;
          buizel: string;
          floatzel: string;
          cherubi: string;
          cherrim: string;
          shellos: string;
          gastrodon: string;
          ambipom: string;
          drifloon: string;
          drifblim: string;
          buneary: string;
          lopunny: string;
          mismagius: string;
          honchkrow: string;
          glameow: string;
          purugly: string;
          chingling: string;
          stunky: string;
          skuntank: string;
          bronzor: string;
          bronzong: string;
          bonsly: string;
          mime_jr: string;
          happiny: string;
          chatot: string;
          spiritomb: string;
          gible: string;
          gabite: string;
          garchomp: string;
          munchlax: string;
          riolu: string;
          lucario: string;
          hippopotas: string;
          hippowdon: string;
          skorupi: string;
          drapion: string;
          croagunk: string;
          toxicroak: string;
          carnivine: string;
          finneon: string;
          lumineon: string;
          mantyke: string;
          snover: string;
          abomasnow: string;
          weavile: string;
          magnezone: string;
          lickilicky: string;
          rhyperior: string;
          tangrowth: string;
          electivire: string;
          magmortar: string;
          togekiss: string;
          yanmega: string;
          leafeon: string;
          glaceon: string;
          gliscor: string;
          mamoswine: string;
          porygon_z: string;
          gallade: string;
          probopass: string;
          dusknoir: string;
          froslass: string;
          rotom: string;
          uxie: string;
          mesprit: string;
          azelf: string;
          dialga: string;
          palkia: string;
          heatran: string;
          regigigas: string;
          giratina: string;
          cresselia: string;
          phione: string;
          manaphy: string;
          darkrai: string;
          shaymin: string;
          arceus: string;
          victini: string;
          snivy: string;
          servine: string;
          serperior: string;
          tepig: string;
          pignite: string;
          emboar: string;
          oshawott: string;
          dewott: string;
          samurott: string;
          patrat: string;
          watchog: string;
          lillipup: string;
          herdier: string;
          stoutland: string;
          purrloin: string;
          liepard: string;
          pansage: string;
          simisage: string;
          pansear: string;
          simisear: string;
          panpour: string;
          simipour: string;
          munna: string;
          musharna: string;
          pidove: string;
          tranquill: string;
          unfezant: string;
          blitzle: string;
          zebstrika: string;
          roggenrola: string;
          boldore: string;
          gigalith: string;
          woobat: string;
          swoobat: string;
          drilbur: string;
          excadrill: string;
          audino: string;
          timburr: string;
          gurdurr: string;
          conkeldurr: string;
          tympole: string;
          palpitoad: string;
          seismitoad: string;
          throh: string;
          sawk: string;
          sewaddle: string;
          swadloon: string;
          leavanny: string;
          venipede: string;
          whirlipede: string;
          scolipede: string;
          cottonee: string;
          whimsicott: string;
          petilil: string;
          lilligant: string;
          basculin: string;
          sandile: string;
          krokorok: string;
          krookodile: string;
          darumaka: string;
          darmanitan: string;
          maractus: string;
          dwebble: string;
          crustle: string;
          scraggy: string;
          scrafty: string;
          sigilyph: string;
          yamask: string;
          cofagrigus: string;
          tirtouga: string;
          carracosta: string;
          archen: string;
          archeops: string;
          trubbish: string;
          garbodor: string;
          zorua: string;
          zoroark: string;
          minccino: string;
          cinccino: string;
          gothita: string;
          gothorita: string;
          gothitelle: string;
          solosis: string;
          duosion: string;
          reuniclus: string;
          ducklett: string;
          swanna: string;
          vanillite: string;
          vanillish: string;
          vanilluxe: string;
          deerling: string;
          sawsbuck: string;
          emolga: string;
          karrablast: string;
          escavalier: string;
          foongus: string;
          amoonguss: string;
          frillish: string;
          jellicent: string;
          alomomola: string;
          joltik: string;
          galvantula: string;
          ferroseed: string;
          ferrothorn: string;
          klink: string;
          klang: string;
          klinklang: string;
          tynamo: string;
          eelektrik: string;
          eelektross: string;
          elgyem: string;
          beheeyem: string;
          litwick: string;
          lampent: string;
          chandelure: string;
          axew: string;
          fraxure: string;
          haxorus: string;
          cubchoo: string;
          beartic: string;
          cryogonal: string;
          shelmet: string;
          accelgor: string;
          stunfisk: string;
          mienfoo: string;
          mienshao: string;
          druddigon: string;
          golett: string;
          golurk: string;
          pawniard: string;
          bisharp: string;
          bouffalant: string;
          rufflet: string;
          braviary: string;
          vullaby: string;
          mandibuzz: string;
          heatmor: string;
          durant: string;
          deino: string;
          zweilous: string;
          hydreigon: string;
          larvesta: string;
          volcarona: string;
          cobalion: string;
          terrakion: string;
          virizion: string;
          tornadus: string;
          thundurus: string;
          reshiram: string;
          zekrom: string;
          landorus: string;
          kyurem: string;
          keldeo: string;
          meloetta: string;
          genesect: string;
          chespin: string;
          quilladin: string;
          chesnaught: string;
          fennekin: string;
          braixen: string;
          delphox: string;
          froakie: string;
          frogadier: string;
          greninja: string;
          bunnelby: string;
          diggersby: string;
          fletchling: string;
          fletchinder: string;
          talonflame: string;
          scatterbug: string;
          spewpa: string;
          vivillon: string;
          litleo: string;
          pyroar: string;
          flabebe: string;
          floette: string;
          florges: string;
          skiddo: string;
          gogoat: string;
          pancham: string;
          pangoro: string;
          furfrou: string;
          espurr: string;
          meowstic: string;
          honedge: string;
          doublade: string;
          aegislash: string;
          spritzee: string;
          aromatisse: string;
          swirlix: string;
          slurpuff: string;
          inkay: string;
          malamar: string;
          binacle: string;
          barbaracle: string;
          skrelp: string;
          dragalge: string;
          clauncher: string;
          clawitzer: string;
          helioptile: string;
          heliolisk: string;
          tyrunt: string;
          tyrantrum: string;
          amaura: string;
          aurorus: string;
          sylveon: string;
          hawlucha: string;
          dedenne: string;
          carbink: string;
          goomy: string;
          sliggoo: string;
          goodra: string;
          klefki: string;
          phantump: string;
          trevenant: string;
          pumpkaboo: string;
          gourgeist: string;
          bergmite: string;
          avalugg: string;
          noibat: string;
          noivern: string;
          xerneas: string;
          yveltal: string;
          zygarde: string;
          diancie: string;
          hoopa: string;
          volcanion: string;
          rowlet: string;
          dartrix: string;
          decidueye: string;
          litten: string;
          torracat: string;
          incineroar: string;
          popplio: string;
          brionne: string;
          primarina: string;
          pikipek: string;
          trumbeak: string;
          toucannon: string;
          yungoos: string;
          gumshoos: string;
          grubbin: string;
          charjabug: string;
          vikavolt: string;
          crabrawler: string;
          crabominable: string;
          oricorio: string;
          cutiefly: string;
          ribombee: string;
          rockruff: string;
          lycanroc: string;
          wishiwashi: string;
          mareanie: string;
          toxapex: string;
          mudbray: string;
          mudsdale: string;
          dewpider: string;
          araquanid: string;
          fomantis: string;
          lurantis: string;
          morelull: string;
          shiinotic: string;
          salandit: string;
          salazzle: string;
          stufful: string;
          bewear: string;
          bounsweet: string;
          steenee: string;
          tsareena: string;
          comfey: string;
          oranguru: string;
          passimian: string;
          wimpod: string;
          golisopod: string;
          sandygast: string;
          palossand: string;
          pyukumuku: string;
          type_null: string;
          silvally: string;
          minior: string;
          komala: string;
          turtonator: string;
          togedemaru: string;
          mimikyu: string;
          bruxish: string;
          drampa: string;
          dhelmise: string;
          jangmo_o: string;
          hakamo_o: string;
          kommo_o: string;
          tapu_koko: string;
          tapu_lele: string;
          tapu_bulu: string;
          tapu_fini: string;
          cosmog: string;
          cosmoem: string;
          solgaleo: string;
          lunala: string;
          nihilego: string;
          buzzwole: string;
          pheromosa: string;
          xurkitree: string;
          celesteela: string;
          kartana: string;
          guzzlord: string;
          necrozma: string;
          magearna: string;
          marshadow: string;
          poipole: string;
          naganadel: string;
          stakataka: string;
          blacephalon: string;
          zeraora: string;
          meltan: string;
          melmetal: string;
          grookey: string;
          thwackey: string;
          rillaboom: string;
          scorbunny: string;
          raboot: string;
          cinderace: string;
          sobble: string;
          drizzile: string;
          inteleon: string;
          skwovet: string;
          greedent: string;
          rookidee: string;
          corvisquire: string;
          corviknight: string;
          blipbug: string;
          dottler: string;
          orbeetle: string;
          nickit: string;
          thievul: string;
          gossifleur: string;
          eldegoss: string;
          wooloo: string;
          dubwool: string;
          chewtle: string;
          drednaw: string;
          yamper: string;
          boltund: string;
          rolycoly: string;
          carkol: string;
          coalossal: string;
          applin: string;
          flapple: string;
          appletun: string;
          silicobra: string;
          sandaconda: string;
          cramorant: string;
          arrokuda: string;
          barraskewda: string;
          toxel: string;
          toxtricity: string;
          sizzlipede: string;
          centiskorch: string;
          clobbopus: string;
          grapploct: string;
          sinistea: string;
          polteageist: string;
          hatenna: string;
          hattrem: string;
          hatterene: string;
          impidimp: string;
          morgrem: string;
          grimmsnarl: string;
          obstagoon: string;
          perrserker: string;
          cursola: string;
          sirfetchd: string;
          mr_rime: string;
          runerigus: string;
          milcery: string;
          alcremie: string;
          falinks: string;
          pincurchin: string;
          snom: string;
          frosmoth: string;
          stonjourner: string;
          eiscue: string;
          indeedee: string;
          morpeko: string;
          cufant: string;
          copperajah: string;
          dracozolt: string;
          arctozolt: string;
          dracovish: string;
          arctovish: string;
          duraludon: string;
          dreepy: string;
          drakloak: string;
          dragapult: string;
          zacian: string;
          zamazenta: string;
          eternatus: string;
          kubfu: string;
          urshifu: string;
          zarude: string;
          regieleki: string;
          regidrago: string;
          glastrier: string;
          spectrier: string;
          calyrex: string;
          wyrdeer: string;
          kleavor: string;
          ursaluna: string;
          basculegion: string;
          sneasler: string;
          overqwil: string;
          enamorus: string;
          sprigatito: string;
          floragato: string;
          meowscarada: string;
          fuecoco: string;
          crocalor: string;
          skeledirge: string;
          quaxly: string;
          quaxwell: string;
          quaquaval: string;
          lechonk: string;
          oinkologne: string;
          tarountula: string;
          spidops: string;
          nymble: string;
          lokix: string;
          pawmi: string;
          pawmo: string;
          pawmot: string;
          tandemaus: string;
          maushold: string;
          fidough: string;
          dachsbun: string;
          smoliv: string;
          dolliv: string;
          arboliva: string;
          squawkabilly: string;
          nacli: string;
          naclstack: string;
          garganacl: string;
          charcadet: string;
          armarouge: string;
          ceruledge: string;
          tadbulb: string;
          bellibolt: string;
          wattrel: string;
          kilowattrel: string;
          maschiff: string;
          mabosstiff: string;
          shroodle: string;
          grafaiai: string;
          bramblin: string;
          brambleghast: string;
          toedscool: string;
          toedscruel: string;
          klawf: string;
          capsakid: string;
          scovillain: string;
          rellor: string;
          rabsca: string;
          flittle: string;
          espathra: string;
          tinkatink: string;
          tinkatuff: string;
          tinkaton: string;
          wiglett: string;
          wugtrio: string;
          bombirdier: string;
          finizen: string;
          palafin: string;
          varoom: string;
          revavroom: string;
          cyclizar: string;
          orthworm: string;
          glimmet: string;
          glimmora: string;
          greavard: string;
          houndstone: string;
          flamigo: string;
          cetoddle: string;
          cetitan: string;
          veluza: string;
          dondozo: string;
          tatsugiri: string;
          annihilape: string;
          clodsire: string;
          farigiraf: string;
          dudunsparce: string;
          kingambit: string;
          great_tusk: string;
          scream_tail: string;
          brute_bonnet: string;
          flutter_mane: string;
          slither_wing: string;
          sandy_shocks: string;
          iron_treads: string;
          iron_bundle: string;
          iron_hands: string;
          iron_jugulis: string;
          iron_moth: string;
          iron_thorns: string;
          frigibax: string;
          arctibax: string;
          baxcalibur: string;
          gimmighoul: string;
          gholdengo: string;
          wo_chien: string;
          chien_pao: string;
          ting_lu: string;
          chi_yu: string;
          roaring_moon: string;
          iron_valiant: string;
          koraidon: string;
          miraidon: string;
          walking_wake: string;
          iron_leaves: string;
          dipplin: string;
          poltchageist: string;
          sinistcha: string;
          okidogi: string;
          munkidori: string;
          fezandipiti: string;
          ogerpon: string;
          archaludon: string;
          hydrapple: string;
          gouging_fire: string;
          raging_bolt: string;
          iron_boulder: string;
          iron_crown: string;
          terapagos: string;
          pecharunt: string;
          alola_rattata: string;
          alola_raticate: string;
          alola_raichu: string;
          alola_sandshrew: string;
          alola_sandslash: string;
          alola_vulpix: string;
          alola_ninetales: string;
          alola_diglett: string;
          alola_dugtrio: string;
          alola_meowth: string;
          alola_persian: string;
          alola_geodude: string;
          alola_graveler: string;
          alola_golem: string;
          alola_grimer: string;
          alola_muk: string;
          alola_exeggutor: string;
          alola_marowak: string;
          eternal_floette: string;
          galar_meowth: string;
          galar_ponyta: string;
          galar_rapidash: string;
          galar_slowpoke: string;
          galar_slowbro: string;
          galar_farfetchd: string;
          galar_weezing: string;
          galar_mr_mime: string;
          galar_articuno: string;
          galar_zapdos: string;
          galar_moltres: string;
          galar_slowking: string;
          galar_corsola: string;
          galar_zigzagoon: string;
          galar_linoone: string;
          galar_darumaka: string;
          galar_darmanitan: string;
          galar_yamask: string;
          galar_stunfisk: string;
          hisui_growlithe: string;
          hisui_arcanine: string;
          hisui_voltorb: string;
          hisui_electrode: string;
          hisui_typhlosion: string;
          hisui_qwilfish: string;
          hisui_sneasel: string;
          hisui_samurott: string;
          hisui_lilligant: string;
          hisui_zorua: string;
          hisui_zoroark: string;
          hisui_braviary: string;
          hisui_sliggoo: string;
          hisui_goodra: string;
          hisui_avalugg: string;
          hisui_decidueye: string;
          paldea_tauros: string;
          paldea_wooper: string;
          bloodmoon_ursaluna: string;
      };
      pokemonForm: {
          pikachuCosplay: string;
          pikachuCoolCosplay: string;
          pikachuBeautyCosplay: string;
          pikachuCuteCosplay: string;
          pikachuSmartCosplay: string;
          pikachuToughCosplay: string;
          pikachuPartner: string;
          eeveePartner: string;
          pichuSpiky: string;
          unownA: string;
          unownB: string;
          unownC: string;
          unownD: string;
          unownE: string;
          unownF: string;
          unownG: string;
          unownH: string;
          unownI: string;
          unownJ: string;
          unownK: string;
          unownL: string;
          unownM: string;
          unownN: string;
          unownO: string;
          unownP: string;
          unownQ: string;
          unownR: string;
          unownS: string;
          unownT: string;
          unownU: string;
          unownV: string;
          unownW: string;
          unownX: string;
          unownY: string;
          unownZ: string;
          unownExclamation: string;
          unownQuestion: string;
          castformSunny: string;
          castformRainy: string;
          castformSnowy: string;
          deoxysNormal: string;
          burmyPlant: string;
          burmySandy: string;
          burmyTrash: string;
          shellosEast: string;
          shellosWest: string;
          rotomHeat: string;
          rotomWash: string;
          rotomFrost: string;
          rotomFan: string;
          rotomMow: string;
          giratinaAltered: string;
          shayminLand: string;
          basculinRedStriped: string;
          basculinBlueStriped: string;
          basculinWhiteStriped: string;
          deerlingSpring: string;
          deerlingSummer: string;
          deerlingAutumn: string;
          deerlingWinter: string;
          tornadusIncarnate: string;
          thundurusIncarnate: string;
          landorusIncarnate: string;
          keldeoOrdinary: string;
          meloettaAria: string;
          meloettaPirouette: string;
          froakieBattleBond: string;
          scatterbugMeadow: string;
          scatterbugIcySnow: string;
          scatterbugPolar: string;
          scatterbugTundra: string;
          scatterbugContinental: string;
          scatterbugGarden: string;
          scatterbugElegant: string;
          scatterbugModern: string;
          scatterbugMarine: string;
          scatterbugArchipelago: string;
          scatterbugHighPlains: string;
          scatterbugSandstorm: string;
          scatterbugRiver: string;
          scatterbugMonsoon: string;
          scatterbugSavanna: string;
          scatterbugSun: string;
          scatterbugOcean: string;
          scatterbugJungle: string;
          scatterbugFancy: string;
          scatterbugPokeBall: string;
          flabebeRed: string;
          flabebeYellow: string;
          flabebeOrange: string;
          flabebeBlue: string;
          flabebeWhite: string;
          furfrouHeart: string;
          furfrouStar: string;
          furfrouDiamond: string;
          furfrouDebutante: string;
          furfrouMatron: string;
          furfrouDandy: string;
          furfrouLaReine: string;
          furfrouKabuki: string;
          furfrouPharaoh: string;
          pumpkabooSmall: string;
          pumpkabooLarge: string;
          pumpkabooSuper: string;
          xerneasNeutral: string;
          xerneasActive: string;
          zygarde50: string;
          zygarde10: string;
          zygarde50Pc: string;
          zygarde10Pc: string;
          zygardeComplete: string;
          oricorioBaile: string;
          oricorioPompom: string;
          oricorioPau: string;
          oricorioSensu: string;
          rockruffOwnTempo: string;
          miniorRedMeteor: string;
          miniorOrangeMeteor: string;
          miniorYellowMeteor: string;
          miniorGreenMeteor: string;
          miniorBlueMeteor: string;
          miniorIndigoMeteor: string;
          miniorVioletMeteor: string;
          miniorRed: string;
          miniorOrange: string;
          miniorYellow: string;
          miniorGreen: string;
          miniorBlue: string;
          miniorIndigo: string;
          miniorViolet: string;
          mimikyuDisguised: string;
          mimikyuBusted: string;
          magearnaOriginal: string;
          marshadowZenith: string;
          sinisteaPhony: string;
          sinisteaAntique: string;
          eiscueNoIce: string;
          indeedeeMale: string;
          indeedeeFemale: string;
          morpekoFullBelly: string;
          zacianHeroOfManyBattles: string;
          zamazentaHeroOfManyBattles: string;
          zarudeDada: string;
          enamorusIncarnate: string;
          squawkabillyGreenPlumage: string;
          squawkabillyBluePlumage: string;
          squawkabillyYellowPlumage: string;
          squawkabillyWhitePlumage: string;
          tatsugiriCurly: string;
          tatsugiriDroopy: string;
          tatsugiriStretchy: string;
          gimmighoulChest: string;
          gimmighoulRoaming: string;
          koraidonApexBuild: string;
          koraidonLimitedBuild: string;
          koraidonSprintingBuild: string;
          koraidonSwimmingBuild: string;
          koraidonGlidingBuild: string;
          miraidonUltimateMode: string;
          miraidonLowPowerMode: string;
          miraidonDriveMode: string;
          miraidonAquaticMode: string;
          miraidonGlideMode: string;
          poltchageistCounterfeit: string;
          poltchageistArtisan: string;
          paldeaTaurosCombat: string;
          paldeaTaurosBlaze: string;
          paldeaTaurosAqua: string;
      };
      pokemonInfo: {
          Stat: {
              HP: string;
              HPshortened: string;
              ATK: string;
              ATKshortened: string;
              DEF: string;
              DEFshortened: string;
              SPATK: string;
              SPATKshortened: string;
              SPDEF: string;
              SPDEFshortened: string;
              SPD: string;
              SPDshortened: string;
              ACC: string;
              EVA: string;
          };
          Type: {
              UNKNOWN: string;
              NORMAL: string;
              FIGHTING: string;
              FLYING: string;
              POISON: string;
              GROUND: string;
              ROCK: string;
              BUG: string;
              GHOST: string;
              STEEL: string;
              FIRE: string;
              WATER: string;
              GRASS: string;
              ELECTRIC: string;
              PSYCHIC: string;
              ICE: string;
              DRAGON: string;
              DARK: string;
              FAIRY: string;
              STELLAR: string;
          };
      };
      pokemonInfoContainer: {
          moveset: string;
          gender: string;
          ability: string;
          nature: string;
      };
      pokemonSummary: {
          pokemonInfo: string;
          status: string;
          powerAccuracyCategory: string;
          type: string;
          unknownTrainer: string;
          ot: string;
          nature: string;
          expPoints: string;
          nextLv: string;
          cancel: string;
          memoString: string;
          metFragment: {
              apparently: string;
          };
      };
      saveSlotSelectUiHandler: {
          overwriteData: string;
          loading: string;
          wave: string;
          lv: string;
          empty: string;
      };
      settings: {
          boy: string;
          girl: string;
          general: string;
          display: string;
          audio: string;
          gamepad: string;
          keyboard: string;
          gameSpeed: string;
          hpBarSpeed: string;
          expGainsSpeed: string;
          expPartyDisplay: string;
          skipSeenDialogues: string;
          battleStyle: string;
          enableRetries: string;
          hideIvs: string;
          tutorials: string;
          touchControls: string;
          vibrations: string;
          normal: string;
          fast: string;
          faster: string;
          skip: string;
          levelUpNotifications: string;
          on: string;
          off: string;
          switch: string;
          set: string;
          auto: string;
          disabled: string;
          language: string;
          change: string;
          uiTheme: string;
          default: string;
          legacy: string;
          windowType: string;
          moneyFormat: string;
          damageNumbers: string;
          simple: string;
          fancy: string;
          abbreviated: string;
          moveAnimations: string;
          showStatsOnLevelUp: string;
          candyUpgradeNotification: string;
          passivesOnly: string;
          candyUpgradeDisplay: string;
          icon: string;
          animation: string;
          moveInfo: string;
          showMovesetFlyout: string;
          showArenaFlyout: string;
          showTimeOfDayWidget: string;
          timeOfDayAnimation: string;
          bounce: string;
          timeOfDay_back: string;
          spriteSet: string;
          consistent: string;
          mixedAnimated: string;
          fusionPaletteSwaps: string;
          playerGender: string;
          typeHints: string;
          masterVolume: string;
          bgmVolume: string;
          fieldVolume: string;
          seVolume: string;
          musicPreference: string;
          mixed: string;
          gamepadPleasePlug: string;
          delete: string;
          keyboardPleasePress: string;
          reset: string;
          requireReload: string;
          action: string;
          back: string;
          pressToBind: string;
          pressButton: string;
          buttonUp: string;
          buttonDown: string;
          buttonLeft: string;
          buttonRight: string;
          buttonAction: string;
          buttonMenu: string;
          buttonSubmit: string;
          buttonCancel: string;
          buttonStats: string;
          buttonCycleForm: string;
          buttonCycleShiny: string;
          buttonCycleGender: string;
          buttonCycleAbility: string;
          buttonCycleNature: string;
          buttonCycleVariant: string;
          buttonSpeedUp: string;
          buttonSlowDown: string;
          alt: string;
          mute: string;
          controller: string;
          gamepadSupport: string;
          showBgmBar: string;
          moveTouchControls: string;
          shopOverlayOpacity: string;
          shopCursorTarget: string;
          rewards: string;
          reroll: string;
          shop: string;
          checkTeam: string;
      };
      splashMessages: {
          battlesWon: string;
          joinTheDiscord: string;
          infiniteLevels: string;
          everythingStacks: string;
          optionalSaveScumming: string;
          biomes: string;
          openSource: string;
          playWithSpeed: string;
          liveBugTesting: string;
          heavyInfluence: string;
          pokemonRiskAndPokemonRain: string;
          nowWithMoreSalt: string;
          infiniteFusionAtHome: string;
          brokenEggMoves: string;
          magnificent: string;
          mubstitute: string;
          thatsCrazy: string;
          oranceJuice: string;
          questionableBalancing: string;
          coolShaders: string;
          aiFree: string;
          suddenDifficultySpikes: string;
          basedOnAnUnfinishedFlashGame: string;
          moreAddictiveThanIntended: string;
          mostlyConsistentSeeds: string;
          achievementPointsDontDoAnything: string;
          youDoNotStartAtLevel: string;
          dontTalkAboutTheManaphyEggIncident: string;
          alsoTryPokengine: string;
          alsoTryEmeraldRogue: string;
          alsoTryRadicalRed: string;
          eeveeExpo: string;
          ynoproject: string;
          breedersInSpace: string;
      };
      starterSelectUiHandler: {
          confirmStartTeam: string;
          confirmExit: string;
          invalidParty: string;
          gen1: string;
          gen2: string;
          gen3: string;
          gen4: string;
          gen5: string;
          gen6: string;
          gen7: string;
          gen8: string;
          gen9: string;
          growthRate: string;
          ability: string;
          passive: string;
          nature: string;
          eggMoves: string;
          addToParty: string;
          removeFromParty: string;
          toggleIVs: string;
          manageMoves: string;
          manageNature: string;
          addToFavorites: string;
          removeFromFavorites: string;
          useCandies: string;
          selectNature: string;
          selectMoveSwapOut: string;
          selectMoveSwapWith: string;
          sameSpeciesEgg: string;
          unlockPassive: string;
          reduceCost: string;
          cycleShiny: string;
          cycleForm: string;
          cycleGender: string;
          cycleAbility: string;
          cycleNature: string;
          cycleVariant: string;
          goFilter: string;
          enablePassive: string;
          disablePassive: string;
          locked: string;
          disabled: string;
          uncaught: string;
      };
      statusEffect: {
          none: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          poison: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          toxic: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          paralysis: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          sleep: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          freeze: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
          burn: {
              name: string;
              description: string;
              obtain: string;
              obtainSource: string;
              activation: string;
              overlap: string;
              heal: string;
          };
      };
      terrain: {
          misty: string;
          mistyStartMessage: string;
          mistyClearMessage: string;
          mistyBlockMessage: string;
          electric: string;
          electricStartMessage: string;
          electricClearMessage: string;
          grassy: string;
          grassyStartMessage: string;
          grassyClearMessage: string;
          psychic: string;
          psychicStartMessage: string;
          psychicClearMessage: string;
          defaultBlockMessage: string;
      };
      titles: {
          elite_four: string;
          elite_four_female: string;
          gym_leader: string;
          gym_leader_female: string;
          gym_leader_double: string;
          champion: string;
          champion_female: string;
          champion_double: string;
          rival: string;
          professor: string;
          frontier_brain: string;
          rocket_boss: string;
          magma_boss: string;
          aqua_boss: string;
          galactic_boss: string;
          plasma_boss: string;
          flare_boss: string;
          aether_boss: string;
          skull_boss: string;
          macro_boss: string;
          rocket_admin: string;
          rocket_admin_female: string;
          magma_admin: string;
          magma_admin_female: string;
          aqua_admin: string;
          aqua_admin_female: string;
          galactic_commander: string;
          galactic_commander_female: string;
          plasma_sage: string;
          plasma_admin: string;
          flare_admin: string;
          flare_admin_female: string;
          aether_admin: string;
          skull_admin: string;
          macro_admin: string;
      };
      trainerClasses: {
          ace_trainer: string;
          ace_trainer_female: string;
          ace_duo: string;
          artist: string;
          artist_female: string;
          backers: string;
          backpacker: string;
          backpacker_female: string;
          backpackers: string;
          baker: string;
          battle_girl: string;
          beauty: string;
          beginners: string;
          biker: string;
          black_belt: string;
          breeder: string;
          breeder_female: string;
          breeders: string;
          clerk: string;
          clerk_female: string;
          colleagues: string;
          crush_kin: string;
          cyclist: string;
          cyclist_female: string;
          cyclists: string;
          dancer: string;
          dancer_female: string;
          depot_agent: string;
          doctor: string;
          doctor_female: string;
          firebreather: string;
          fisherman: string;
          fisherman_female: string;
          gentleman: string;
          guitarist: string;
          guitarist_female: string;
          harlequin: string;
          hiker: string;
          hooligans: string;
          hoopster: string;
          infielder: string;
          janitor: string;
          lady: string;
          lass: string;
          linebacker: string;
          maid: string;
          madame: string;
          medical_team: string;
          musician: string;
          hex_maniac: string;
          nurse: string;
          nursery_aide: string;
          officer: string;
          parasol_lady: string;
          pilot: string;
          pokéfan: string;
          pokéfan_female: string;
          pokéfan_family: string;
          preschooler: string;
          preschooler_female: string;
          preschoolers: string;
          psychic: string;
          psychic_female: string;
          psychics: string;
          pokémon_ranger: string;
          pokémon_ranger_female: string;
          pokémon_rangers: string;
          ranger: string;
          restaurant_staff: string;
          rich: string;
          rich_female: string;
          rich_boy: string;
          rich_couple: string;
          rich_kid: string;
          rich_kid_female: string;
          rich_kids: string;
          roughneck: string;
          sailor: string;
          scientist: string;
          scientist_female: string;
          scientists: string;
          smasher: string;
          snow_worker: string;
          snow_worker_female: string;
          striker: string;
          school_kid: string;
          school_kid_female: string;
          school_kids: string;
          swimmer: string;
          swimmer_female: string;
          swimmers: string;
          twins: string;
          veteran: string;
          veteran_female: string;
          veteran_duo: string;
          waiter: string;
          waitress: string;
          worker: string;
          worker_female: string;
          workers: string;
          youngster: string;
          rocket_grunt: string;
          rocket_grunt_female: string;
          rocket_grunts: string;
          magma_grunt: string;
          magma_grunt_female: string;
          magma_grunts: string;
          aqua_grunt: string;
          aqua_grunt_female: string;
          aqua_grunts: string;
          galactic_grunt: string;
          galactic_grunt_female: string;
          galactic_grunts: string;
          plasma_grunt: string;
          plasma_grunt_female: string;
          plasma_grunts: string;
          flare_grunt: string;
          flare_grunt_female: string;
          flare_grunts: string;
          aether_grunt: string;
          aether_grunt_female: string;
          aether_grunts: string;
          skull_grunt: string;
          skull_grunt_female: string;
          skull_grunts: string;
          macro_grunt: string;
          macro_grunt_female: string;
          macro_grunts: string;
      };
      trainerNames: {
          brock: string;
          misty: string;
          lt_surge: string;
          erika: string;
          janine: string;
          sabrina: string;
          blaine: string;
          giovanni: string;
          falkner: string;
          bugsy: string;
          whitney: string;
          morty: string;
          chuck: string;
          jasmine: string;
          pryce: string;
          clair: string;
          roxanne: string;
          brawly: string;
          wattson: string;
          flannery: string;
          norman: string;
          winona: string;
          tate: string;
          liza: string;
          juan: string;
          roark: string;
          gardenia: string;
          maylene: string;
          crasher_wake: string;
          fantina: string;
          byron: string;
          faba: string;
          plumeria: string;
          oleana: string;
          candice: string;
          volkner: string;
          cilan: string;
          chili: string;
          cress: string;
          cheren: string;
          lenora: string;
          roxie: string;
          burgh: string;
          elesa: string;
          clay: string;
          skyla: string;
          brycen: string;
          drayden: string;
          marlon: string;
          viola: string;
          grant: string;
          korrina: string;
          ramos: string;
          clemont: string;
          valerie: string;
          olympia: string;
          wulfric: string;
          milo: string;
          nessa: string;
          kabu: string;
          bea: string;
          allister: string;
          opal: string;
          bede: string;
          gordie: string;
          melony: string;
          piers: string;
          marnie: string;
          raihan: string;
          katy: string;
          brassius: string;
          iono: string;
          kofu: string;
          larry: string;
          ryme: string;
          tulip: string;
          grusha: string;
          lorelei: string;
          bruno: string;
          agatha: string;
          lance: string;
          will: string;
          koga: string;
          karen: string;
          sidney: string;
          phoebe: string;
          glacia: string;
          drake: string;
          aaron: string;
          bertha: string;
          flint: string;
          lucian: string;
          shauntal: string;
          marshal: string;
          grimsley: string;
          caitlin: string;
          malva: string;
          siebold: string;
          wikstrom: string;
          drasna: string;
          hala: string;
          molayne: string;
          olivia: string;
          acerola: string;
          kahili: string;
          rika: string;
          poppy: string;
          hassel: string;
          crispin: string;
          amarys: string;
          lacey: string;
          drayton: string;
          blue: string;
          red: string;
          steven: string;
          wallace: string;
          cynthia: string;
          alder: string;
          iris: string;
          diantha: string;
          hau: string;
          leon: string;
          geeta: string;
          nemona: string;
          kieran: string;
          rival: string;
          rival_female: string;
          archer: string;
          ariana: string;
          proton: string;
          petrel: string;
          tabitha: string;
          courtney: string;
          shelly: string;
          matt: string;
          mars: string;
          jupiter: string;
          saturn: string;
          zinzolin: string;
          rood: string;
          xerosic: string;
          bryony: string;
          maxie: string;
          archie: string;
          cyrus: string;
          ghetsis: string;
          lysandre: string;
          lusamine: string;
          guzma: string;
          rose: string;
          blue_red_double: string;
          red_blue_double: string;
          tate_liza_double: string;
          liza_tate_double: string;
          steven_wallace_double: string;
          wallace_steven_double: string;
          alder_iris_double: string;
          iris_alder_double: string;
          marnie_piers_double: string;
          piers_marnie_double: string;
      };
      tutorial: {
          intro: string;
          accessMenu: string;
          menu: string;
          starterSelect: string;
          pokerus: string;
          statChange: string;
          selectItem: string;
          eggGacha: string;
      };
      voucher: {
          vouchers: string;
          eggVoucher: string;
          eggVoucherPlus: string;
          eggVoucherPremium: string;
          eggVoucherGold: string;
          locked: string;
          defeatTrainer: string;
      };
      weather: {
          sunnyStartMessage: string;
          sunnyLapseMessage: string;
          sunnyClearMessage: string;
          rainStartMessage: string;
          rainLapseMessage: string;
          rainClearMessage: string;
          sandstormStartMessage: string;
          sandstormLapseMessage: string;
          sandstormClearMessage: string;
          sandstormDamageMessage: string;
          hailStartMessage: string;
          hailLapseMessage: string;
          hailClearMessage: string;
          hailDamageMessage: string;
          snowStartMessage: string;
          snowLapseMessage: string;
          snowClearMessage: string;
          fogStartMessage: string;
          fogLapseMessage: string;
          fogClearMessage: string;
          heavyRainStartMessage: string;
          heavyRainLapseMessage: string;
          heavyRainClearMessage: string;
          harshSunStartMessage: string;
          harshSunLapseMessage: string;
          harshSunClearMessage: string;
          strongWindsStartMessage: string;
          strongWindsLapseMessage: string;
          strongWindsClearMessage: string;
      };
      partyUiHandler: {
          SEND_OUT: string;
          SUMMARY: string;
          CANCEL: string;
          RELEASE: string;
          APPLY: string;
          TEACH: string;
          SPLICE: string;
          UNSPLICE: string;
          ACTIVATE: string;
          DEACTIVATE: string;
          TRANSFER: string;
          ALL: string;
          PASS_BATON: string;
          UNPAUSE_EVOLUTION: string;
          REVIVE: string;
          RENAME: string;
          choosePokemon: string;
          doWhatWithThisPokemon: string;
          noEnergy: string;
          hasEnergy: string;
          cantBeUsed: string;
          tooManyItems: string;
          anyEffect: string;
          unpausedEvolutions: string;
          unspliceConfirmation: string;
          wasReverted: string;
          releaseConfirmation: string;
          releaseInBattle: string;
          selectAMove: string;
          changeQuantity: string;
          selectAnotherPokemonToSplice: string;
          cancel: string;
          able: string;
          notAble: string;
          learned: string;
          goodbye: string;
          byebye: string;
          farewell: string;
          soLong: string;
          thisIsWhereWePart: string;
          illMissYou: string;
          illNeverForgetYou: string;
          untilWeMeetAgain: string;
          sayonara: string;
          smellYaLater: string;
      };
      modifierSelectUiHandler: {
          transfer: string;
          reroll: string;
          lockRarities: string;
          checkTeam: string;
          transferDesc: string;
          rerollDesc: string;
          lockRaritiesDesc: string;
          checkTeamDesc: string;
          rerollCost: string;
          itemCost: string;
      };
      moveTriggers: {
          hitWithRecoil: string;
          cutHpPowerUpMove: string;
          absorbedElectricity: string;
          switchedStatChanges: string;
          switchedTwoStatChanges: string;
          switchedStat: string;
          sharedGuard: string;
          sharedPower: string;
          goingAllOutForAttack: string;
          regainedHealth: string;
          keptGoingAndCrashed: string;
          fled: string;
          cannotBeSwitchedOut: string;
          swappedAbilitiesWithTarget: string;
          coinsScatteredEverywhere: string;
          attackedByItem: string;
          whippedUpAWhirlwind: string;
          flewUpHigh: string;
          tookInSunlight: string;
          dugAHole: string;
          loweredItsHead: string;
          isGlowing: string;
          bellChimed: string;
          foresawAnAttack: string;
          isTighteningFocus: string;
          hidUnderwater: string;
          soothingAromaWaftedThroughArea: string;
          sprangUp: string;
          choseDoomDesireAsDestiny: string;
          vanishedInstantly: string;
          tookTargetIntoSky: string;
          becameCloakedInFreezingLight: string;
          becameCloakedInFreezingAir: string;
          isChargingPower: string;
          burnedItselfOut: string;
          startedHeatingUpBeak: string;
          setUpShellTrap: string;
          isOverflowingWithSpacePower: string;
          usedUpAllElectricity: string;
          stoleItem: string;
          incineratedItem: string;
          knockedOffItem: string;
          tookMoveAttack: string;
          cutOwnHpAndMaximizedStat: string;
          copiedStatChanges: string;
          magnitudeMessage: string;
          tookAimAtTarget: string;
          transformedIntoType: string;
          copiedMove: string;
          sketchedMove: string;
          acquiredAbility: string;
          copiedTargetAbility: string;
          transformedIntoTarget: string;
          tryingToTakeFoeDown: string;
          addType: string;
          cannotUseMove: string;
          healHp: string;
          sacrificialFullRestore: string;
          invertStats: string;
          resetStats: string;
          statEliminated: string;
          faintCountdown: string;
          copyType: string;
          suppressAbilities: string;
          revivalBlessing: string;
          swapArenaTags: string;
          exposedMove: string;
          safeguard: string;
      };
      runHistory: {
          victory: string;
          defeatedWild: string;
          defeatedTrainer: string;
          defeatedTrainerDouble: string;
          defeatedRival: string;
          defeated: string;
          defeatedWild_female: string;
          defeatedTrainer_female: string;
          defeatedTrainerDouble_female: string;
          defeatedRival_female: string;
          defeated_female: string;
          luck: string;
          score: string;
          mode: string;
          challengeRules: string;
          challengeMonoGen1: string;
          challengeMonoGen2: string;
          challengeMonoGen3: string;
          challengeMonoGen4: string;
          challengeMonoGen5: string;
          challengeMonoGen6: string;
          challengeMonoGen7: string;
          challengeMonoGen8: string;
          challengeMonoGen9: string;
          playerItems: string;
          personalBest: string;
          SPDshortened: string;
          runInfo: string;
          money: string;
          runLength: string;
          viewHeldItems: string;
          hallofFameText: string;
          hallofFameText_female: string;
          viewHallOfFame: string;
          viewEndingSplash: string;
      };
  };
  
}

declare namespace PokeRogue.locales.zh_TW {
  export declare const zhTwConfig: {
      ability: {
          stench: {
              name: string;
              description: string;
          };
          drizzle: {
              name: string;
              description: string;
          };
          speedBoost: {
              name: string;
              description: string;
          };
          battleArmor: {
              name: string;
              description: string;
          };
          sturdy: {
              name: string;
              description: string;
          };
          damp: {
              name: string;
              description: string;
          };
          limber: {
              name: string;
              description: string;
          };
          sandVeil: {
              name: string;
              description: string;
          };
          static: {
              name: string;
              description: string;
          };
          voltAbsorb: {
              name: string;
              description: string;
          };
          waterAbsorb: {
              name: string;
              description: string;
          };
          oblivious: {
              name: string;
              description: string;
          };
          cloudNine: {
              name: string;
              description: string;
          };
          compoundEyes: {
              name: string;
              description: string;
          };
          insomnia: {
              name: string;
              description: string;
          };
          colorChange: {
              name: string;
              description: string;
          };
          immunity: {
              name: string;
              description: string;
          };
          flashFire: {
              name: string;
              description: string;
          };
          shieldDust: {
              name: string;
              description: string;
          };
          ownTempo: {
              name: string;
              description: string;
          };
          suctionCups: {
              name: string;
              description: string;
          };
          intimidate: {
              name: string;
              description: string;
          };
          shadowTag: {
              name: string;
              description: string;
          };
          roughSkin: {
              name: string;
              description: string;
          };
          wonderGuard: {
              name: string;
              description: string;
          };
          levitate: {
              name: string;
              description: string;
          };
          effectSpore: {
              name: string;
              description: string;
          };
          synchronize: {
              name: string;
              description: string;
          };
          clearBody: {
              name: string;
              description: string;
          };
          naturalCure: {
              name: string;
              description: string;
          };
          lightningRod: {
              name: string;
              description: string;
          };
          sereneGrace: {
              name: string;
              description: string;
          };
          swiftSwim: {
              name: string;
              description: string;
          };
          chlorophyll: {
              name: string;
              description: string;
          };
          illuminate: {
              name: string;
              description: string;
          };
          trace: {
              name: string;
              description: string;
          };
          hugePower: {
              name: string;
              description: string;
          };
          poisonPoint: {
              name: string;
              description: string;
          };
          innerFocus: {
              name: string;
              description: string;
          };
          magmaArmor: {
              name: string;
              description: string;
          };
          waterVeil: {
              name: string;
              description: string;
          };
          magnetPull: {
              name: string;
              description: string;
          };
          soundproof: {
              name: string;
              description: string;
          };
          rainDish: {
              name: string;
              description: string;
          };
          sandStream: {
              name: string;
              description: string;
          };
          pressure: {
              name: string;
              description: string;
          };
          thickFat: {
              name: string;
              description: string;
          };
          earlyBird: {
              name: string;
              description: string;
          };
          flameBody: {
              name: string;
              description: string;
          };
          runAway: {
              name: string;
              description: string;
          };
          keenEye: {
              name: string;
              description: string;
          };
          hyperCutter: {
              name: string;
              description: string;
          };
          pickup: {
              name: string;
              description: string;
          };
          truant: {
              name: string;
              description: string;
          };
          hustle: {
              name: string;
              description: string;
          };
          cuteCharm: {
              name: string;
              description: string;
          };
          plus: {
              name: string;
              description: string;
          };
          minus: {
              name: string;
              description: string;
          };
          forecast: {
              name: string;
              description: string;
          };
          stickyHold: {
              name: string;
              description: string;
          };
          shedSkin: {
              name: string;
              description: string;
          };
          guts: {
              name: string;
              description: string;
          };
          marvelScale: {
              name: string;
              description: string;
          };
          liquidOoze: {
              name: string;
              description: string;
          };
          overgrow: {
              name: string;
              description: string;
          };
          blaze: {
              name: string;
              description: string;
          };
          torrent: {
              name: string;
              description: string;
          };
          swarm: {
              name: string;
              description: string;
          };
          rockHead: {
              name: string;
              description: string;
          };
          drought: {
              name: string;
              description: string;
          };
          arenaTrap: {
              name: string;
              description: string;
          };
          vitalSpirit: {
              name: string;
              description: string;
          };
          whiteSmoke: {
              name: string;
              description: string;
          };
          purePower: {
              name: string;
              description: string;
          };
          shellArmor: {
              name: string;
              description: string;
          };
          airLock: {
              name: string;
              description: string;
          };
          tangledFeet: {
              name: string;
              description: string;
          };
          motorDrive: {
              name: string;
              description: string;
          };
          rivalry: {
              name: string;
              description: string;
          };
          steadfast: {
              name: string;
              description: string;
          };
          snowCloak: {
              name: string;
              description: string;
          };
          gluttony: {
              name: string;
              description: string;
          };
          angerPoint: {
              name: string;
              description: string;
          };
          unburden: {
              name: string;
              description: string;
          };
          heatproof: {
              name: string;
              description: string;
          };
          simple: {
              name: string;
              description: string;
          };
          drySkin: {
              name: string;
              description: string;
          };
          download: {
              name: string;
              description: string;
          };
          ironFist: {
              name: string;
              description: string;
          };
          poisonHeal: {
              name: string;
              description: string;
          };
          adaptability: {
              name: string;
              description: string;
          };
          skillLink: {
              name: string;
              description: string;
          };
          hydration: {
              name: string;
              description: string;
          };
          solarPower: {
              name: string;
              description: string;
          };
          quickFeet: {
              name: string;
              description: string;
          };
          normalize: {
              name: string;
              description: string;
          };
          sniper: {
              name: string;
              description: string;
          };
          magicGuard: {
              name: string;
              description: string;
          };
          noGuard: {
              name: string;
              description: string;
          };
          stall: {
              name: string;
              description: string;
          };
          technician: {
              name: string;
              description: string;
          };
          leafGuard: {
              name: string;
              description: string;
          };
          klutz: {
              name: string;
              description: string;
          };
          moldBreaker: {
              name: string;
              description: string;
          };
          superLuck: {
              name: string;
              description: string;
          };
          aftermath: {
              name: string;
              description: string;
          };
          anticipation: {
              name: string;
              description: string;
          };
          forewarn: {
              name: string;
              description: string;
          };
          unaware: {
              name: string;
              description: string;
          };
          tintedLens: {
              name: string;
              description: string;
          };
          filter: {
              name: string;
              description: string;
          };
          slowStart: {
              name: string;
              description: string;
          };
          scrappy: {
              name: string;
              description: string;
          };
          stormDrain: {
              name: string;
              description: string;
          };
          iceBody: {
              name: string;
              description: string;
          };
          solidRock: {
              name: string;
              description: string;
          };
          snowWarning: {
              name: string;
              description: string;
          };
          honeyGather: {
              name: string;
              description: string;
          };
          frisk: {
              name: string;
              description: string;
          };
          reckless: {
              name: string;
              description: string;
          };
          multitype: {
              name: string;
              description: string;
          };
          flowerGift: {
              name: string;
              description: string;
          };
          badDreams: {
              name: string;
              description: string;
          };
          pickpocket: {
              name: string;
              description: string;
          };
          sheerForce: {
              name: string;
              description: string;
          };
          contrary: {
              name: string;
              description: string;
          };
          unnerve: {
              name: string;
              description: string;
          };
          defiant: {
              name: string;
              description: string;
          };
          defeatist: {
              name: string;
              description: string;
          };
          cursedBody: {
              name: string;
              description: string;
          };
          healer: {
              name: string;
              description: string;
          };
          friendGuard: {
              name: string;
              description: string;
          };
          weakArmor: {
              name: string;
              description: string;
          };
          heavyMetal: {
              name: string;
              description: string;
          };
          lightMetal: {
              name: string;
              description: string;
          };
          multiscale: {
              name: string;
              description: string;
          };
          toxicBoost: {
              name: string;
              description: string;
          };
          flareBoost: {
              name: string;
              description: string;
          };
          harvest: {
              name: string;
              description: string;
          };
          telepathy: {
              name: string;
              description: string;
          };
          moody: {
              name: string;
              description: string;
          };
          overcoat: {
              name: string;
              description: string;
          };
          poisonTouch: {
              name: string;
              description: string;
          };
          regenerator: {
              name: string;
              description: string;
          };
          bigPecks: {
              name: string;
              description: string;
          };
          sandRush: {
              name: string;
              description: string;
          };
          wonderSkin: {
              name: string;
              description: string;
          };
          analytic: {
              name: string;
              description: string;
          };
          illusion: {
              name: string;
              description: string;
          };
          imposter: {
              name: string;
              description: string;
          };
          infiltrator: {
              name: string;
              description: string;
          };
          mummy: {
              name: string;
              description: string;
          };
          moxie: {
              name: string;
              description: string;
          };
          justified: {
              name: string;
              description: string;
          };
          rattled: {
              name: string;
              description: string;
          };
          magicBounce: {
              name: string;
              description: string;
          };
          sapSipper: {
              name: string;
              description: string;
          };
          prankster: {
              name: string;
              description: string;
          };
          sandForce: {
              name: string;
              description: string;
          };
          ironBarbs: {
              name: string;
              description: string;
          };
          zenMode: {
              name: string;
              description: string;
          };
          victoryStar: {
              name: string;
              description: string;
          };
          turboblaze: {
              name: string;
              description: string;
          };
          teravolt: {
              name: string;
              description: string;
          };
          aromaVeil: {
              name: string;
              description: string;
          };
          flowerVeil: {
              name: string;
              description: string;
          };
          cheekPouch: {
              name: string;
              description: string;
          };
          protean: {
              name: string;
              description: string;
          };
          furCoat: {
              name: string;
              description: string;
          };
          magician: {
              name: string;
              description: string;
          };
          bulletproof: {
              name: string;
              description: string;
          };
          competitive: {
              name: string;
              description: string;
          };
          strongJaw: {
              name: string;
              description: string;
          };
          refrigerate: {
              name: string;
              description: string;
          };
          sweetVeil: {
              name: string;
              description: string;
          };
          stanceChange: {
              name: string;
              description: string;
          };
          galeWings: {
              name: string;
              description: string;
          };
          megaLauncher: {
              name: string;
              description: string;
          };
          grassPelt: {
              name: string;
              description: string;
          };
          symbiosis: {
              name: string;
              description: string;
          };
          toughClaws: {
              name: string;
              description: string;
          };
          pixilate: {
              name: string;
              description: string;
          };
          gooey: {
              name: string;
              description: string;
          };
          aerilate: {
              name: string;
              description: string;
          };
          parentalBond: {
              name: string;
              description: string;
          };
          darkAura: {
              name: string;
              description: string;
          };
          fairyAura: {
              name: string;
              description: string;
          };
          auraBreak: {
              name: string;
              description: string;
          };
          primordialSea: {
              name: string;
              description: string;
          };
          desolateLand: {
              name: string;
              description: string;
          };
          deltaStream: {
              name: string;
              description: string;
          };
          stamina: {
              name: string;
              description: string;
          };
          wimpOut: {
              name: string;
              description: string;
          };
          emergencyExit: {
              name: string;
              description: string;
          };
          waterCompaction: {
              name: string;
              description: string;
          };
          merciless: {
              name: string;
              description: string;
          };
          shieldsDown: {
              name: string;
              description: string;
          };
          stakeout: {
              name: string;
              description: string;
          };
          waterBubble: {
              name: string;
              description: string;
          };
          steelworker: {
              name: string;
              description: string;
          };
          berserk: {
              name: string;
              description: string;
          };
          slushRush: {
              name: string;
              description: string;
          };
          longReach: {
              name: string;
              description: string;
          };
          liquidVoice: {
              name: string;
              description: string;
          };
          triage: {
              name: string;
              description: string;
          };
          galvanize: {
              name: string;
              description: string;
          };
          surgeSurfer: {
              name: string;
              description: string;
          };
          schooling: {
              name: string;
              description: string;
          };
          disguise: {
              name: string;
              description: string;
          };
          battleBond: {
              name: string;
              description: string;
          };
          powerConstruct: {
              name: string;
              description: string;
          };
          corrosion: {
              name: string;
              description: string;
          };
          comatose: {
              name: string;
              description: string;
          };
          queenlyMajesty: {
              name: string;
              description: string;
          };
          innardsOut: {
              name: string;
              description: string;
          };
          dancer: {
              name: string;
              description: string;
          };
          battery: {
              name: string;
              description: string;
          };
          fluffy: {
              name: string;
              description: string;
          };
          dazzling: {
              name: string;
              description: string;
          };
          soulHeart: {
              name: string;
              description: string;
          };
          tanglingHair: {
              name: string;
              description: string;
          };
          receiver: {
              name: string;
              description: string;
          };
          powerOfAlchemy: {
              name: string;
              description: string;
          };
          beastBoost: {
              name: string;
              description: string;
          };
          rksSystem: {
              name: string;
              description: string;
          };
          electricSurge: {
              name: string;
              description: string;
          };
          psychicSurge: {
              name: string;
              description: string;
          };
          mistySurge: {
              name: string;
              description: string;
          };
          grassySurge: {
              name: string;
              description: string;
          };
          fullMetalBody: {
              name: string;
              description: string;
          };
          shadowShield: {
              name: string;
              description: string;
          };
          prismArmor: {
              name: string;
              description: string;
          };
          neuroforce: {
              name: string;
              description: string;
          };
          intrepidSword: {
              name: string;
              description: string;
          };
          dauntlessShield: {
              name: string;
              description: string;
          };
          libero: {
              name: string;
              description: string;
          };
          ballFetch: {
              name: string;
              description: string;
          };
          cottonDown: {
              name: string;
              description: string;
          };
          propellerTail: {
              name: string;
              description: string;
          };
          mirrorArmor: {
              name: string;
              description: string;
          };
          gulpMissile: {
              name: string;
              description: string;
          };
          stalwart: {
              name: string;
              description: string;
          };
          steamEngine: {
              name: string;
              description: string;
          };
          punkRock: {
              name: string;
              description: string;
          };
          sandSpit: {
              name: string;
              description: string;
          };
          iceScales: {
              name: string;
              description: string;
          };
          ripen: {
              name: string;
              description: string;
          };
          iceFace: {
              name: string;
              description: string;
          };
          powerSpot: {
              name: string;
              description: string;
          };
          mimicry: {
              name: string;
              description: string;
          };
          screenCleaner: {
              name: string;
              description: string;
          };
          steelySpirit: {
              name: string;
              description: string;
          };
          perishBody: {
              name: string;
              description: string;
          };
          wanderingSpirit: {
              name: string;
              description: string;
          };
          gorillaTactics: {
              name: string;
              description: string;
          };
          neutralizingGas: {
              name: string;
              description: string;
          };
          pastelVeil: {
              name: string;
              description: string;
          };
          hungerSwitch: {
              name: string;
              description: string;
          };
          quickDraw: {
              name: string;
              description: string;
          };
          unseenFist: {
              name: string;
              description: string;
          };
          curiousMedicine: {
              name: string;
              description: string;
          };
          transistor: {
              name: string;
              description: string;
          };
          dragonsMaw: {
              name: string;
              description: string;
          };
          chillingNeigh: {
              name: string;
              description: string;
          };
          grimNeigh: {
              name: string;
              description: string;
          };
          asOneGlastrier: {
              name: string;
              description: string;
          };
          asOneSpectrier: {
              name: string;
              description: string;
          };
          lingeringAroma: {
              name: string;
              description: string;
          };
          seedSower: {
              name: string;
              description: string;
          };
          thermalExchange: {
              name: string;
              description: string;
          };
          angerShell: {
              name: string;
              description: string;
          };
          purifyingSalt: {
              name: string;
              description: string;
          };
          wellBakedBody: {
              name: string;
              description: string;
          };
          windRider: {
              name: string;
              description: string;
          };
          guardDog: {
              name: string;
              description: string;
          };
          rockyPayload: {
              name: string;
              description: string;
          };
          windPower: {
              name: string;
              description: string;
          };
          zeroToHero: {
              name: string;
              description: string;
          };
          commander: {
              name: string;
              description: string;
          };
          electromorphosis: {
              name: string;
              description: string;
          };
          protosynthesis: {
              name: string;
              description: string;
          };
          quarkDrive: {
              name: string;
              description: string;
          };
          goodAsGold: {
              name: string;
              description: string;
          };
          vesselOfRuin: {
              name: string;
              description: string;
          };
          swordOfRuin: {
              name: string;
              description: string;
          };
          tabletsOfRuin: {
              name: string;
              description: string;
          };
          beadsOfRuin: {
              name: string;
              description: string;
          };
          orichalcumPulse: {
              name: string;
              description: string;
          };
          hadronEngine: {
              name: string;
              description: string;
          };
          opportunist: {
              name: string;
              description: string;
          };
          cudChew: {
              name: string;
              description: string;
          };
          sharpness: {
              name: string;
              description: string;
          };
          supremeOverlord: {
              name: string;
              description: string;
          };
          costar: {
              name: string;
              description: string;
          };
          toxicDebris: {
              name: string;
              description: string;
          };
          armorTail: {
              name: string;
              description: string;
          };
          earthEater: {
              name: string;
              description: string;
          };
          myceliumMight: {
              name: string;
              description: string;
          };
          mindsEye: {
              name: string;
              description: string;
          };
          supersweetSyrup: {
              name: string;
              description: string;
          };
          hospitality: {
              name: string;
              description: string;
          };
          toxicChain: {
              name: string;
              description: string;
          };
          embodyAspectTeal: {
              name: string;
              description: string;
          };
          embodyAspectWellspring: {
              name: string;
              description: string;
          };
          embodyAspectHearthflame: {
              name: string;
              description: string;
          };
          embodyAspectCornerstone: {
              name: string;
              description: string;
          };
          teraShift: {
              name: string;
              description: string;
          };
          teraShell: {
              name: string;
              description: string;
          };
          teraformZero: {
              name: string;
              description: string;
          };
          poisonPuppeteer: {
              name: string;
              description: string;
          };
      };
      abilityTriggers: {
          blockRecoilDamage: string;
          badDreams: string;
          costar: string;
          iceFaceAvoidedDamage: string;
          trace: string;
          windPowerCharged: string;
          disguiseAvoidedDamage: string;
          weatherEffectDisappeared: string;
          preventBerryUse: string;
      };
      arenaFlyout: {};
      arenaTag: {
          noCritOnAddPlayer: string;
          noCritOnAddEnemy: string;
          noCritOnRemove: string;
          safeguardOnAdd: string;
          safeguardOnAddPlayer: string;
          safeguardOnAddEnemy: string;
          safeguardOnRemove: string;
          safeguardOnRemovePlayer: string;
          safeguardOnRemoveEnemy: string;
      };
      battle: {
          bossAppeared: string;
          trainerAppeared: string;
          trainerAppearedDouble: string;
          singleWildAppeared: string;
          multiWildAppeared: string;
          playerComeBack: string;
          trainerComeBack: string;
          playerGo: string;
          trainerGo: string;
          switchQuestion: string;
          trainerDefeated: string;
          moneyPickedUp: string;
          pokemonCaught: string;
          pokemon: string;
          sendOutPokemon: string;
          hitResultCriticalHit: string;
          hitResultSuperEffective: string;
          hitResultNotVeryEffective: string;
          hitResultNoEffect: string;
          hitResultImmune: string;
          hitResultOneHitKO: string;
          attackFailed: string;
          attackMissed: string;
          attackHitsCount: string;
          rewardGain: string;
          expGain: string;
          levelUp: string;
          learnMove: string;
          learnMovePrompt: string;
          learnMoveLimitReached: string;
          learnMoveReplaceQuestion: string;
          learnMoveStopTeaching: string;
          learnMoveNotLearned: string;
          learnMoveForgetQuestion: string;
          learnMoveForgetSuccess: string;
          countdownPoof: string;
          learnMoveAnd: string;
          levelCapUp: string;
          moveNotImplemented: string;
          moveNoPP: string;
          moveDisabled: string;
          noPokeballForce: string;
          noPokeballTrainer: string;
          noPokeballMulti: string;
          noPokeballStrong: string;
          noEscapeForce: string;
          noEscapeTrainer: string;
          noEscapePokemon: string;
          runAwaySuccess: string;
          runAwayCannotEscape: string;
          escapeVerbSwitch: string;
          escapeVerbFlee: string;
          ppHealBerry: string;
          hpHealBerry: string;
          notDisabled: string;
          skipItemQuestion: string;
          itemStackFull: string;
          eggHatching: string;
          ivScannerUseQuestion: string;
          wildPokemonWithAffix: string;
          foePokemonWithAffix: string;
          useMove: string;
          drainMessage: string;
          regainHealth: string;
          fainted: string;
          ppReduced: string;
      };
      battleScene: {
          moneyOwned: string;
      };
      battleInfo: {
          generation: string;
      };
      battleMessageUiHandler: {
          ivBest: string;
          ivFantastic: string;
          ivVeryGood: string;
          ivPrettyGood: string;
          ivDecent: string;
          ivNoGood: string;
      };
      battlePokemonForm: {
          mega: string;
          "mega-x": string;
          "mega-y": string;
          primal: string;
          gigantamax: string;
          eternamax: string;
          megaChange: string;
          gigantamaxChange: string;
          eternamaxChange: string;
          revertChange: string;
          formChange: string;
          disguiseChange: string;
      };
      battlerTags: {
          trappedDesc: string;
          flinchedDesc: string;
          confusedDesc: string;
          infatuatedDesc: string;
          seedDesc: string;
          nightmareDesc: string;
          ingrainDesc: string;
          drowsyDesc: string;
          rechargingLapse: string;
          trappedOnAdd: string;
          trappedOnRemove: string;
          flinchedLapse: string;
          confusedOnAdd: string;
          confusedOnRemove: string;
          confusedOnOverlap: string;
          confusedLapse: string;
          confusedLapseHurtItself: string;
          destinyBondLapseIsBoss: string;
          destinyBondLapse: string;
          infatuatedOnAdd: string;
          infatuatedOnOverlap: string;
          infatuatedLapse: string;
          infatuatedLapseImmobilize: string;
          infatuatedOnRemove: string;
          seededOnAdd: string;
          seededLapse: string;
          seededLapseShed: string;
          nightmareOnAdd: string;
          nightmareOnOverlap: string;
          nightmareLapse: string;
          encoreOnAdd: string;
          encoreOnRemove: string;
          helpingHandOnAdd: string;
          ingrainLapse: string;
          ingrainOnTrap: string;
          aquaRingOnAdd: string;
          aquaRingLapse: string;
          drowsyOnAdd: string;
          damagingTrapLapse: string;
          bindOnTrap: string;
          wrapOnTrap: string;
          vortexOnTrap: string;
          clampOnTrap: string;
          sandTombOnTrap: string;
          magmaStormOnTrap: string;
          snapTrapOnTrap: string;
          thunderCageOnTrap: string;
          infestationOnTrap: string;
          protectedOnAdd: string;
          protectedLapse: string;
          enduringOnAdd: string;
          enduringLapse: string;
          sturdyLapse: string;
          perishSongLapse: string;
          centerOfAttentionOnAdd: string;
          truantLapse: string;
          slowStartOnAdd: string;
          slowStartOnRemove: string;
          highestStatBoostOnAdd: string;
          highestStatBoostOnRemove: string;
          magnetRisenOnAdd: string;
          magnetRisenOnRemove: string;
          critBoostOnAdd: string;
          critBoostOnRemove: string;
          saltCuredOnAdd: string;
          saltCuredLapse: string;
          cursedOnAdd: string;
          cursedLapse: string;
      };
      berry: {
          SITRUS: {
              name: string;
              effect: string;
          };
          LUM: {
              name: string;
              effect: string;
          };
          ENIGMA: {
              name: string;
              effect: string;
          };
          LIECHI: {
              name: string;
              effect: string;
          };
          GANLON: {
              name: string;
              effect: string;
          };
          PETAYA: {
              name: string;
              effect: string;
          };
          APICOT: {
              name: string;
              effect: string;
          };
          SALAC: {
              name: string;
              effect: string;
          };
          LANSAT: {
              name: string;
              effect: string;
          };
          STARF: {
              name: string;
              effect: string;
          };
          LEPPA: {
              name: string;
              effect: string;
          };
      };
      bgmName: {};
      biome: {
          unknownLocation: string;
          TOWN: string;
          PLAINS: string;
          GRASS: string;
          TALL_GRASS: string;
          METROPOLIS: string;
          FOREST: string;
          SEA: string;
          SWAMP: string;
          BEACH: string;
          LAKE: string;
          SEABED: string;
          MOUNTAIN: string;
          BADLANDS: string;
          CAVE: string;
          DESERT: string;
          ICE_CAVE: string;
          MEADOW: string;
          POWER_PLANT: string;
          VOLCANO: string;
          GRAVEYARD: string;
          DOJO: string;
          FACTORY: string;
          RUINS: string;
          WASTELAND: string;
          ABYSS: string;
          SPACE: string;
          CONSTRUCTION_SITE: string;
          JUNGLE: string;
          FAIRY_CAVE: string;
          TEMPLE: string;
          SLUM: string;
          SNOWY_FOREST: string;
          ISLAND: string;
          LABORATORY: string;
          END: string;
      };
      challenges: {
          title: string;
          illegalEvolution: string;
          singleGeneration: {
              name: string;
              desc: string;
              desc_default: string;
              gen_1: string;
              gen_2: string;
              gen_3: string;
              gen_4: string;
              gen_5: string;
              gen_6: string;
              gen_7: string;
              gen_8: string;
              gen_9: string;
          };
          singleType: {
              name: string;
              desc: string;
              desc_default: string;
          };
          inverseBattle: {
              name: string;
              shortName: string;
              desc: string;
              "value.0": string;
              "value.1": string;
          };
      };
      commandUiHandler: {
          fight: string;
          ball: string;
          pokemon: string;
          run: string;
          actionMessage: string;
      };
      common: {
          start: string;
          luckIndicator: string;
          shinyOnHover: string;
          commonShiny: string;
          rareShiny: string;
          epicShiny: string;
      };
      achv: {
          Achievements: {
              name: string;
          };
          Locked: {
              name: string;
          };
          MoneyAchv: {
              description: string;
          };
          "10K_MONEY": {
              name: string;
          };
          "100K_MONEY": {
              name: string;
          };
          "1M_MONEY": {
              name: string;
          };
          "10M_MONEY": {
              name: string;
          };
          DamageAchv: {
              description: string;
          };
          "250_DMG": {
              name: string;
          };
          "1000_DMG": {
              name: string;
          };
          "2500_DMG": {
              name: string;
          };
          "10000_DMG": {
              name: string;
          };
          HealAchv: {
              description: string;
          };
          "250_HEAL": {
              name: string;
          };
          "1000_HEAL": {
              name: string;
          };
          "2500_HEAL": {
              name: string;
          };
          "10000_HEAL": {
              name: string;
          };
          LevelAchv: {
              description: string;
          };
          LV_100: {
              name: string;
          };
          LV_250: {
              name: string;
          };
          LV_1000: {
              name: string;
          };
          RibbonAchv: {
              description: string;
          };
          "10_RIBBONS": {
              name: string;
          };
          "25_RIBBONS": {
              name: string;
          };
          "50_RIBBONS": {
              name: string;
          };
          "75_RIBBONS": {
              name: string;
          };
          "100_RIBBONS": {
              name: string;
          };
          TRANSFER_MAX_STAT_STAGE: {
              name: string;
              description: string;
          };
          MAX_FRIENDSHIP: {
              name: string;
              description: string;
          };
          MEGA_EVOLVE: {
              name: string;
              description: string;
          };
          GIGANTAMAX: {
              name: string;
              description: string;
          };
          TERASTALLIZE: {
              name: string;
              description: string;
          };
          STELLAR_TERASTALLIZE: {
              name: string;
              description: string;
          };
          SPLICE: {
              name: string;
              description: string;
          };
          MINI_BLACK_HOLE: {
              name: string;
              description: string;
          };
          CATCH_MYTHICAL: {
              name: string;
              description: string;
          };
          CATCH_SUB_LEGENDARY: {
              name: string;
              description: string;
          };
          CATCH_LEGENDARY: {
              name: string;
              description: string;
          };
          SEE_SHINY: {
              name: string;
              description: string;
          };
          SHINY_PARTY: {
              name: string;
              description: string;
          };
          HATCH_MYTHICAL: {
              name: string;
              description: string;
          };
          HATCH_SUB_LEGENDARY: {
              name: string;
              description: string;
          };
          HATCH_LEGENDARY: {
              name: string;
              description: string;
          };
          HATCH_SHINY: {
              name: string;
              description: string;
          };
          HIDDEN_ABILITY: {
              name: string;
              description: string;
          };
          PERFECT_IVS: {
              name: string;
              description: string;
          };
          CLASSIC_VICTORY: {
              name: string;
              description: string;
          };
          MONO_GEN_ONE: {
              name: string;
              description: string;
          };
          MONO_GEN_TWO: {
              name: string;
              description: string;
          };
          MONO_GEN_THREE: {
              name: string;
              description: string;
          };
          MONO_GEN_FOUR: {
              name: string;
              description: string;
          };
          MONO_GEN_FIVE: {
              name: string;
              description: string;
          };
          MONO_GEN_SIX: {
              name: string;
              description: string;
          };
          MONO_GEN_SEVEN: {
              name: string;
              description: string;
          };
          MONO_GEN_EIGHT: {
              name: string;
              description: string;
          };
          MONO_GEN_NINE: {
              name: string;
              description: string;
          };
          MonoType: {
              description: string;
          };
          MONO_NORMAL: {
              name: string;
          };
          MONO_FIGHTING: {
              name: string;
          };
          MONO_FLYING: {
              name: string;
          };
          MONO_POISON: {
              name: string;
          };
          MONO_GROUND: {
              name: string;
          };
          MONO_ROCK: {
              name: string;
          };
          MONO_BUG: {
              name: string;
          };
          MONO_GHOST: {
              name: string;
          };
          MONO_STEEL: {
              name: string;
          };
          MONO_FIRE: {
              name: string;
          };
          MONO_WATER: {
              name: string;
          };
          MONO_GRASS: {
              name: string;
          };
          MONO_ELECTRIC: {
              name: string;
          };
          MONO_PSYCHIC: {
              name: string;
          };
          MONO_ICE: {
              name: string;
          };
          MONO_DRAGON: {
              name: string;
          };
          MONO_DARK: {
              name: string;
          };
          MONO_FAIRY: {
              name: string;
          };
          INVERSE_BATTLE: {
              name: string;
              description: string;
          };
      };
      dialogue: {
          youngster: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
                  "10": string;
                  "11": string;
                  "12": string;
                  "13": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
                  "10": string;
                  "11": string;
                  "12": string;
                  "13": string;
              };
          };
          lass: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
                  "7": string;
                  "8": string;
                  "9": string;
              };
          };
          breeder: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          breeder_female: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          fisherman: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          fisherman_female: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          swimmer: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          backpacker: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          ace_trainer: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          parasol_lady: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          twins: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          cyclist: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          black_belt: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          battle_girl: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          hiker: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          ranger: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          scientist: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          school_kid: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          artist: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          guitarist: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          worker: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          worker_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          worker_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          hex_maniac: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          psychic: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          officer: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
          };
          beauty: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          baker: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          biker: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          firebreather: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          sailor: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          brock: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          misty: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          lt_surge: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          erika: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          janine: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          sabrina: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          blaine: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          giovanni: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          roxanne: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          brawly: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          wattson: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          flannery: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          norman: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          winona: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          tate: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          liza: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          juan: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
          };
          crasher_wake: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          falkner: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          nessa: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          melony: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          marlon: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          shauntal: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          marshal: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          cheren: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          chili: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          cilan: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          roark: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          morty: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
                  "4": string;
                  "5": string;
                  "6": string;
              };
          };
          crispin: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          amarys: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lacey: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drayton: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          ramos: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          viola: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          candice: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          gardenia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          aaron: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          cress: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          allister: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          clay: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kofu: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          tulip: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          sidney: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          phoebe: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          glacia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drake: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          wallace: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lorelei: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          will: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          malva: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          hala: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          molayne: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rika: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bruno: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bugsy: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          koga: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bertha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lenora: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          siebold: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          roxie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          olivia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          poppy: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          agatha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          flint: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          grimsley: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          caitlin: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          diantha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          wikstrom: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          acerola: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          larry_elite: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lance: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          karen: {
              encounter: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              victory: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
                  "3": string;
              };
          };
          milo: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lucian: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drasna: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kahili: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          hassel: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          blue: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          piers: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          red: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          jasmine: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          lance_champion: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          steven: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          cynthia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          iris: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          hau: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          geeta: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          nemona: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          leon: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          whitney: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          chuck: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          katy: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          pryce: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          clair: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          maylene: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          fantina: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          byron: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          olympia: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          volkner: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          burgh: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          elesa: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          skyla: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          brycen: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          drayden: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          grant: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          korrina: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          clemont: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          valerie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          wulfric: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kabu: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bea: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          opal: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          bede: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          gordie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          marnie: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          raihan: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          brassius: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          iono: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          larry: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          ryme: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          grusha: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          marnie_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          nessa_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          bea_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          allister_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          raihan_elite: {
              encounter: {
                  "1": string;
                  "2": string;
              };
              victory: {
                  "1": string;
                  "2": string;
              };
              defeat: {
                  "1": string;
                  "2": string;
              };
          };
          alder: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          kieran: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_2: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_2_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_3: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_3_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_4: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_4_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_5: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_5_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
              defeat: {
                  "1": string;
              };
          };
          rival_6: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          rival_6_female: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
      };
      battleSpecDialogue: {
          encounter: string;
          firstStageWin: string;
          secondStageWin: string;
      };
      miscDialogue: {
          ending: string;
          ending_female: string;
      };
      doubleBattleDialogue: {
          blue_red_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          red_blue_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          tate_liza_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          liza_tate_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          wallace_steven_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          steven_wallace_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          alder_iris_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          iris_alder_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          piers_marnie_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
          marnie_piers_double: {
              encounter: {
                  "1": string;
              };
              victory: {
                  "1": string;
              };
          };
      };
      egg: {
          egg: string;
          greatTier: string;
          ultraTier: string;
          masterTier: string;
          defaultTier: string;
          hatchWavesMessageSoon: string;
          hatchWavesMessageClose: string;
          hatchWavesMessageNotClose: string;
          hatchWavesMessageLongTime: string;
          gachaTypeLegendary: string;
          gachaTypeMove: string;
          gachaTypeShiny: string;
          selectMachine: string;
          notEnoughVouchers: string;
          tooManyEggs: string;
          pull: string;
          pulls: string;
          sameSpeciesEgg: string;
          hatchFromTheEgg: string;
          eggMoveUnlock: string;
          rareEggMoveUnlock: string;
          moveUPGacha: string;
          shinyUPGacha: string;
          legendaryUPGacha: string;
      };
      fightUiHandler: {
          pp: string;
          power: string;
          accuracy: string;
          abilityFlyInText: string;
          passive: string;
      };
      filterBar: {
          genFilter: string;
          typeFilter: string;
          caughtFilter: string;
          unlocksFilter: string;
          miscFilter: string;
          sortFilter: string;
          all: string;
          normal: string;
          uncaught: string;
          passive: string;
          passiveUnlocked: string;
          passiveLocked: string;
          passiveUnlockable: string;
          costReduction: string;
          costReductionUnlocked: string;
          costReductionLocked: string;
          costReductionUnlockable: string;
          favorite: string;
          isFavorite: string;
          notFavorite: string;
          ribbon: string;
          hasWon: string;
          hasNotWon: string;
          hiddenAbility: string;
          hasHiddenAbility: string;
          noHiddenAbility: string;
          egg: string;
          eggPurchasable: string;
          pokerus: string;
          hasPokerus: string;
          noPokerus: string;
          sortByNumber: string;
          sortByCost: string;
          sortByCandies: string;
          sortByIVs: string;
          sortByName: string;
      };
      gameMode: {
          classic: string;
          endless: string;
          endlessSpliced: string;
          dailyRun: string;
          unknown: string;
          challenge: string;
      };
      gameStatsUiHandler: {
          stats: string;
          playTime: string;
          totalBattles: string;
          starters: string;
          shinyStarters: string;
          speciesSeen: string;
          speciesCaught: string;
          ribbonsOwned: string;
          classicRuns: string;
          classicWins: string;
          dailyRunAttempts: string;
          dailyRunWins: string;
          endlessRuns: string;
          highestWaveEndless: string;
          highestMoney: string;
          highestDamage: string;
          highestHPHealed: string;
          pokemonEncountered: string;
          pokemonDefeated: string;
          pokemonCaught: string;
          eggsHatched: string;
          subLegendsSeen: string;
          subLegendsCaught: string;
          subLegendsHatched: string;
          legendsSeen: string;
          legendsCaught: string;
          legendsHatched: string;
          mythicalsSeen: string;
          mythicalsCaught: string;
          mythicalsHatched: string;
          shiniesSeen: string;
          shiniesCaught: string;
          shiniesHatched: string;
          pokemonFused: string;
          trainersDefeated: string;
          eggsPulled: string;
          rareEggsPulled: string;
          epicEggsPulled: string;
          legendaryEggsPulled: string;
          manaphyEggsPulled: string;
      };
      growth: {
          Erratic: string;
          Fast: string;
          Medium_Fast: string;
          Medium_Slow: string;
          Slow: string;
          Fluctuating: string;
      };
      menu: {
          cancel: string;
          continue: string;
          dailyRun: string;
          loadGame: string;
          newGame: string;
          settings: string;
          selectGameMode: string;
          logInOrCreateAccount: string;
          username: string;
          password: string;
          login: string;
          orUse: string;
          register: string;
          emptyUsername: string;
          invalidLoginUsername: string;
          invalidRegisterUsername: string;
          invalidLoginPassword: string;
          invalidRegisterPassword: string;
          usernameAlreadyUsed: string;
          accountNonExistent: string;
          unmatchingPassword: string;
          passwordNotMatchingConfirmPassword: string;
          confirmPassword: string;
          registrationAgeWarning: string;
          backToLogin: string;
          failedToLoadSaveData: string;
          sessionSuccess: string;
          failedToLoadSession: string;
          boyOrGirl: string;
          evolving: string;
          stoppedEvolving: string;
          pauseEvolutionsQuestion: string;
          evolutionsPaused: string;
          evolutionDone: string;
          dailyRankings: string;
          weeklyRankings: string;
          noRankings: string;
          positionIcon: string;
          loading: string;
          playersOnline: string;
          yes: string;
          no: string;
      };
      menuUiHandler: {
          GAME_SETTINGS: string;
          ACHIEVEMENTS: string;
          STATS: string;
          RUN_HISTORY: string;
          EGG_LIST: string;
          EGG_GACHA: string;
          MANAGE_DATA: string;
          COMMUNITY: string;
          RETURN_TO_TITLE: string;
          LOG_OUT: string;
          slot: string;
          importSession: string;
          importSlotSelect: string;
          exportSession: string;
          exportSlotSelect: string;
          importRunHistory: string;
          exportRunHistory: string;
          importData: string;
          exportData: string;
          consentPreferences: string;
          cancel: string;
          losingProgressionWarning: string;
      };
      modifier: {
          surviveDamageApply: string;
          turnHealApply: string;
          hitHealApply: string;
          pokemonInstantReviveApply: string;
          moneyInterestApply: string;
          turnHeldItemTransferApply: string;
          contactHeldItemTransferApply: string;
          enemyTurnHealApply: string;
          bypassSpeedChanceApply: string;
      };
      modifierType: {
          ModifierType: {
              AddPokeballModifierType: {
                  name: string;
                  description: string;
              };
              AddVoucherModifierType: {
                  name: string;
                  description: string;
              };
              PokemonHeldItemModifierType: {
                  extra: {
                      inoperable: string;
                      tooMany: string;
                  };
              };
              PokemonHpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                      fullyWithStatus: string;
                  };
              };
              PokemonReviveModifierType: {
                  description: string;
              };
              PokemonStatusHealModifierType: {
                  description: string;
              };
              PokemonPpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                  };
              };
              PokemonAllMovePpRestoreModifierType: {
                  description: string;
                  extra: {
                      fully: string;
                  };
              };
              PokemonPpUpModifierType: {
                  description: string;
              };
              PokemonNatureChangeModifierType: {
                  name: string;
                  description: string;
              };
              DoubleBattleChanceBoosterModifierType: {
                  description: string;
              };
              TempStatStageBoosterModifierType: {
                  description: string;
              };
              AttackTypeBoosterModifierType: {
                  description: string;
              };
              PokemonLevelIncrementModifierType: {
                  description: string;
              };
              AllPokemonLevelIncrementModifierType: {
                  description: string;
              };
              BaseStatBoosterModifierType: {
                  description: string;
              };
              AllPokemonFullHpRestoreModifierType: {
                  description: string;
              };
              AllPokemonFullReviveModifierType: {
                  description: string;
              };
              MoneyRewardModifierType: {
                  description: string;
                  extra: {
                      small: string;
                      moderate: string;
                      large: string;
                  };
              };
              ExpBoosterModifierType: {
                  description: string;
              };
              PokemonExpBoosterModifierType: {
                  description: string;
              };
              PokemonFriendshipBoosterModifierType: {
                  description: string;
              };
              PokemonMoveAccuracyBoosterModifierType: {
                  description: string;
              };
              PokemonMultiHitModifierType: {
                  description: string;
              };
              TmModifierType: {
                  name: string;
                  description: string;
              };
              TmModifierTypeWithInfo: {
                  name: string;
                  description: string;
              };
              EvolutionItemModifierType: {
                  description: string;
              };
              FormChangeItemModifierType: {
                  description: string;
              };
              FusePokemonModifierType: {
                  description: string;
              };
              TerastallizeModifierType: {
                  name: string;
                  description: string;
              };
              ContactHeldItemTransferChanceModifierType: {
                  description: string;
              };
              TurnHeldItemTransferModifierType: {
                  description: string;
              };
              EnemyAttackStatusEffectChanceModifierType: {
                  description: string;
              };
              EnemyEndureChanceModifierType: {
                  description: string;
              };
              RARE_CANDY: {
                  name: string;
              };
              RARER_CANDY: {
                  name: string;
              };
              MEGA_BRACELET: {
                  name: string;
                  description: string;
              };
              DYNAMAX_BAND: {
                  name: string;
                  description: string;
              };
              TERA_ORB: {
                  name: string;
                  description: string;
              };
              MAP: {
                  name: string;
                  description: string;
              };
              POTION: {
                  name: string;
              };
              SUPER_POTION: {
                  name: string;
              };
              HYPER_POTION: {
                  name: string;
              };
              MAX_POTION: {
                  name: string;
              };
              FULL_RESTORE: {
                  name: string;
              };
              REVIVE: {
                  name: string;
              };
              MAX_REVIVE: {
                  name: string;
              };
              FULL_HEAL: {
                  name: string;
              };
              SACRED_ASH: {
                  name: string;
              };
              REVIVER_SEED: {
                  name: string;
                  description: string;
              };
              ETHER: {
                  name: string;
              };
              MAX_ETHER: {
                  name: string;
              };
              ELIXIR: {
                  name: string;
              };
              MAX_ELIXIR: {
                  name: string;
              };
              PP_UP: {
                  name: string;
              };
              PP_MAX: {
                  name: string;
              };
              LURE: {
                  name: string;
              };
              SUPER_LURE: {
                  name: string;
              };
              MAX_LURE: {
                  name: string;
              };
              MEMORY_MUSHROOM: {
                  name: string;
                  description: string;
              };
              EXP_SHARE: {
                  name: string;
                  description: string;
              };
              EXP_BALANCE: {
                  name: string;
                  description: string;
              };
              OVAL_CHARM: {
                  name: string;
                  description: string;
              };
              EXP_CHARM: {
                  name: string;
              };
              SUPER_EXP_CHARM: {
                  name: string;
              };
              GOLDEN_EXP_CHARM: {
                  name: string;
              };
              LUCKY_EGG: {
                  name: string;
              };
              GOLDEN_EGG: {
                  name: string;
              };
              SOOTHE_BELL: {
                  name: string;
              };
              SCOPE_LENS: {
                  name: string;
                  description: string;
              };
              DIRE_HIT: {
                  name: string;
                  extra: {
                      raises: string;
                  };
              };
              LEEK: {
                  name: string;
                  description: string;
              };
              EVIOLITE: {
                  name: string;
                  description: string;
              };
              SOUL_DEW: {
                  name: string;
                  description: string;
              };
              NUGGET: {
                  name: string;
              };
              BIG_NUGGET: {
                  name: string;
              };
              RELIC_GOLD: {
                  name: string;
              };
              AMULET_COIN: {
                  name: string;
                  description: string;
              };
              GOLDEN_PUNCH: {
                  name: string;
                  description: string;
              };
              COIN_CASE: {
                  name: string;
                  description: string;
              };
              LOCK_CAPSULE: {
                  name: string;
                  description: string;
              };
              GRIP_CLAW: {
                  name: string;
              };
              WIDE_LENS: {
                  name: string;
              };
              MULTI_LENS: {
                  name: string;
              };
              HEALING_CHARM: {
                  name: string;
                  description: string;
              };
              CANDY_JAR: {
                  name: string;
                  description: string;
              };
              BERRY_POUCH: {
                  name: string;
                  description: string;
              };
              FOCUS_BAND: {
                  name: string;
                  description: string;
              };
              QUICK_CLAW: {
                  name: string;
                  description: string;
              };
              KINGS_ROCK: {
                  name: string;
                  description: string;
              };
              LEFTOVERS: {
                  name: string;
                  description: string;
              };
              SHELL_BELL: {
                  name: string;
                  description: string;
              };
              TOXIC_ORB: {
                  name: string;
                  description: string;
              };
              FLAME_ORB: {
                  name: string;
                  description: string;
              };
              BATON: {
                  name: string;
                  description: string;
              };
              SHINY_CHARM: {
                  name: string;
                  description: string;
              };
              ABILITY_CHARM: {
                  name: string;
                  description: string;
              };
              IV_SCANNER: {
                  name: string;
                  description: string;
              };
              DNA_SPLICERS: {
                  name: string;
              };
              MINI_BLACK_HOLE: {
                  name: string;
              };
              GOLDEN_POKEBALL: {
                  name: string;
                  description: string;
              };
              ENEMY_DAMAGE_BOOSTER: {
                  name: string;
                  description: string;
              };
              ENEMY_DAMAGE_REDUCTION: {
                  name: string;
                  description: string;
              };
              ENEMY_HEAL: {
                  name: string;
                  description: string;
              };
              ENEMY_ATTACK_POISON_CHANCE: {
                  name: string;
              };
              ENEMY_ATTACK_PARALYZE_CHANCE: {
                  name: string;
              };
              ENEMY_ATTACK_BURN_CHANCE: {
                  name: string;
              };
              ENEMY_STATUS_EFFECT_HEAL_CHANCE: {
                  name: string;
                  description: string;
              };
              ENEMY_ENDURE_CHANCE: {
                  name: string;
              };
              ENEMY_FUSED_CHANCE: {
                  name: string;
                  description: string;
              };
          };
          SpeciesBoosterItem: {
              LIGHT_BALL: {
                  name: string;
                  description: string;
              };
              THICK_CLUB: {
                  name: string;
                  description: string;
              };
              METAL_POWDER: {
                  name: string;
                  description: string;
              };
              QUICK_POWDER: {
                  name: string;
                  description: string;
              };
          };
          TempStatStageBoosterItem: {
              x_attack: string;
              x_defense: string;
              x_sp_atk: string;
              x_sp_def: string;
              x_speed: string;
              x_accuracy: string;
          };
          AttackTypeBoosterItem: {
              silk_scarf: string;
              black_belt: string;
              sharp_beak: string;
              poison_barb: string;
              soft_sand: string;
              hard_stone: string;
              silver_powder: string;
              spell_tag: string;
              metal_coat: string;
              charcoal: string;
              mystic_water: string;
              miracle_seed: string;
              magnet: string;
              twisted_spoon: string;
              never_melt_ice: string;
              dragon_fang: string;
              black_glasses: string;
              fairy_feather: string;
          };
          BaseStatBoosterItem: {
              hp_up: string;
              protein: string;
              iron: string;
              calcium: string;
              zinc: string;
              carbos: string;
          };
          EvolutionItem: {
              NONE: string;
              LINKING_CORD: string;
              SUN_STONE: string;
              MOON_STONE: string;
              LEAF_STONE: string;
              FIRE_STONE: string;
              WATER_STONE: string;
              THUNDER_STONE: string;
              ICE_STONE: string;
              DUSK_STONE: string;
              DAWN_STONE: string;
              SHINY_STONE: string;
              CRACKED_POT: string;
              SWEET_APPLE: string;
              TART_APPLE: string;
              STRAWBERRY_SWEET: string;
              UNREMARKABLE_TEACUP: string;
              CHIPPED_POT: string;
              BLACK_AUGURITE: string;
              GALARICA_CUFF: string;
              GALARICA_WREATH: string;
              PEAT_BLOCK: string;
              AUSPICIOUS_ARMOR: string;
              MALICIOUS_ARMOR: string;
              MASTERPIECE_TEACUP: string;
              METAL_ALLOY: string;
              SCROLL_OF_DARKNESS: string;
              SCROLL_OF_WATERS: string;
              SYRUPY_APPLE: string;
          };
          FormChangeItem: {
              NONE: string;
              ABOMASITE: string;
              ABSOLITE: string;
              AERODACTYLITE: string;
              AGGRONITE: string;
              ALAKAZITE: string;
              ALTARIANITE: string;
              AMPHAROSITE: string;
              AUDINITE: string;
              BANETTITE: string;
              BEEDRILLITE: string;
              BLASTOISINITE: string;
              BLAZIKENITE: string;
              CAMERUPTITE: string;
              CHARIZARDITE_X: string;
              CHARIZARDITE_Y: string;
              DIANCITE: string;
              GALLADITE: string;
              GARCHOMPITE: string;
              GARDEVOIRITE: string;
              GENGARITE: string;
              GLALITITE: string;
              GYARADOSITE: string;
              HERACRONITE: string;
              HOUNDOOMINITE: string;
              KANGASKHANITE: string;
              LATIASITE: string;
              LATIOSITE: string;
              LOPUNNITE: string;
              LUCARIONITE: string;
              MANECTITE: string;
              MAWILITE: string;
              MEDICHAMITE: string;
              METAGROSSITE: string;
              MEWTWONITE_X: string;
              MEWTWONITE_Y: string;
              PIDGEOTITE: string;
              PINSIRITE: string;
              RAYQUAZITE: string;
              SABLENITE: string;
              SALAMENCITE: string;
              SCEPTILITE: string;
              SCIZORITE: string;
              SHARPEDONITE: string;
              SLOWBRONITE: string;
              STEELIXITE: string;
              SWAMPERTITE: string;
              TYRANITARITE: string;
              VENUSAURITE: string;
              BLUE_ORB: string;
              RED_ORB: string;
              SHARP_METEORITE: string;
              HARD_METEORITE: string;
              SMOOTH_METEORITE: string;
              ADAMANT_CRYSTAL: string;
              LUSTROUS_GLOBE: string;
              GRISEOUS_CORE: string;
              REVEAL_GLASS: string;
              GRACIDEA: string;
              MAX_MUSHROOMS: string;
              DARK_STONE: string;
              LIGHT_STONE: string;
              PRISON_BOTTLE: string;
              N_LUNARIZER: string;
              N_SOLARIZER: string;
              RUSTED_SWORD: string;
              RUSTED_SHIELD: string;
              ICY_REINS_OF_UNITY: string;
              SHADOW_REINS_OF_UNITY: string;
              WELLSPRING_MASK: string;
              HEARTHFLAME_MASK: string;
              CORNERSTONE_MASK: string;
              SHOCK_DRIVE: string;
              BURN_DRIVE: string;
              CHILL_DRIVE: string;
              DOUSE_DRIVE: string;
              ULTRANECROZIUM_Z: string;
              FIST_PLATE: string;
              SKY_PLATE: string;
              TOXIC_PLATE: string;
              EARTH_PLATE: string;
              STONE_PLATE: string;
              INSECT_PLATE: string;
              SPOOKY_PLATE: string;
              IRON_PLATE: string;
              FLAME_PLATE: string;
              SPLASH_PLATE: string;
              MEADOW_PLATE: string;
              ZAP_PLATE: string;
              MIND_PLATE: string;
              ICICLE_PLATE: string;
              DRACO_PLATE: string;
              DREAD_PLATE: string;
              PIXIE_PLATE: string;
              BLANK_PLATE: string;
              LEGEND_PLATE: string;
              FIGHTING_MEMORY: string;
              FLYING_MEMORY: string;
              POISON_MEMORY: string;
              GROUND_MEMORY: string;
              ROCK_MEMORY: string;
              BUG_MEMORY: string;
              GHOST_MEMORY: string;
              STEEL_MEMORY: string;
              FIRE_MEMORY: string;
              WATER_MEMORY: string;
              GRASS_MEMORY: string;
              ELECTRIC_MEMORY: string;
              PSYCHIC_MEMORY: string;
              ICE_MEMORY: string;
              DRAGON_MEMORY: string;
              DARK_MEMORY: string;
              FAIRY_MEMORY: string;
              NORMAL_MEMORY: string;
          };
      };
      move: {
          pound: {
              name: string;
              effect: string;
          };
          karateChop: {
              name: string;
              effect: string;
          };
          doubleSlap: {
              name: string;
              effect: string;
          };
          cometPunch: {
              name: string;
              effect: string;
          };
          megaPunch: {
              name: string;
              effect: string;
          };
          payDay: {
              name: string;
              effect: string;
          };
          firePunch: {
              name: string;
              effect: string;
          };
          icePunch: {
              name: string;
              effect: string;
          };
          thunderPunch: {
              name: string;
              effect: string;
          };
          scratch: {
              name: string;
              effect: string;
          };
          viseGrip: {
              name: string;
              effect: string;
          };
          guillotine: {
              name: string;
              effect: string;
          };
          razorWind: {
              name: string;
              effect: string;
          };
          swordsDance: {
              name: string;
              effect: string;
          };
          cut: {
              name: string;
              effect: string;
          };
          gust: {
              name: string;
              effect: string;
          };
          wingAttack: {
              name: string;
              effect: string;
          };
          whirlwind: {
              name: string;
              effect: string;
          };
          fly: {
              name: string;
              effect: string;
          };
          bind: {
              name: string;
              effect: string;
          };
          slam: {
              name: string;
              effect: string;
          };
          vineWhip: {
              name: string;
              effect: string;
          };
          stomp: {
              name: string;
              effect: string;
          };
          doubleKick: {
              name: string;
              effect: string;
          };
          megaKick: {
              name: string;
              effect: string;
          };
          jumpKick: {
              name: string;
              effect: string;
          };
          rollingKick: {
              name: string;
              effect: string;
          };
          sandAttack: {
              name: string;
              effect: string;
          };
          headbutt: {
              name: string;
              effect: string;
          };
          hornAttack: {
              name: string;
              effect: string;
          };
          furyAttack: {
              name: string;
              effect: string;
          };
          hornDrill: {
              name: string;
              effect: string;
          };
          tackle: {
              name: string;
              effect: string;
          };
          bodySlam: {
              name: string;
              effect: string;
          };
          wrap: {
              name: string;
              effect: string;
          };
          takeDown: {
              name: string;
              effect: string;
          };
          thrash: {
              name: string;
              effect: string;
          };
          doubleEdge: {
              name: string;
              effect: string;
          };
          tailWhip: {
              name: string;
              effect: string;
          };
          poisonSting: {
              name: string;
              effect: string;
          };
          twineedle: {
              name: string;
              effect: string;
          };
          pinMissile: {
              name: string;
              effect: string;
          };
          leer: {
              name: string;
              effect: string;
          };
          bite: {
              name: string;
              effect: string;
          };
          growl: {
              name: string;
              effect: string;
          };
          roar: {
              name: string;
              effect: string;
          };
          sing: {
              name: string;
              effect: string;
          };
          supersonic: {
              name: string;
              effect: string;
          };
          sonicBoom: {
              name: string;
              effect: string;
          };
          disable: {
              name: string;
              effect: string;
          };
          acid: {
              name: string;
              effect: string;
          };
          ember: {
              name: string;
              effect: string;
          };
          flamethrower: {
              name: string;
              effect: string;
          };
          mist: {
              name: string;
              effect: string;
          };
          waterGun: {
              name: string;
              effect: string;
          };
          hydroPump: {
              name: string;
              effect: string;
          };
          surf: {
              name: string;
              effect: string;
          };
          iceBeam: {
              name: string;
              effect: string;
          };
          blizzard: {
              name: string;
              effect: string;
          };
          psybeam: {
              name: string;
              effect: string;
          };
          bubbleBeam: {
              name: string;
              effect: string;
          };
          auroraBeam: {
              name: string;
              effect: string;
          };
          hyperBeam: {
              name: string;
              effect: string;
          };
          peck: {
              name: string;
              effect: string;
          };
          drillPeck: {
              name: string;
              effect: string;
          };
          submission: {
              name: string;
              effect: string;
          };
          lowKick: {
              name: string;
              effect: string;
          };
          counter: {
              name: string;
              effect: string;
          };
          seismicToss: {
              name: string;
              effect: string;
          };
          strength: {
              name: string;
              effect: string;
          };
          absorb: {
              name: string;
              effect: string;
          };
          megaDrain: {
              name: string;
              effect: string;
          };
          leechSeed: {
              name: string;
              effect: string;
          };
          growth: {
              name: string;
              effect: string;
          };
          razorLeaf: {
              name: string;
              effect: string;
          };
          solarBeam: {
              name: string;
              effect: string;
          };
          poisonPowder: {
              name: string;
              effect: string;
          };
          stunSpore: {
              name: string;
              effect: string;
          };
          sleepPowder: {
              name: string;
              effect: string;
          };
          petalDance: {
              name: string;
              effect: string;
          };
          stringShot: {
              name: string;
              effect: string;
          };
          dragonRage: {
              name: string;
              effect: string;
          };
          fireSpin: {
              name: string;
              effect: string;
          };
          thunderShock: {
              name: string;
              effect: string;
          };
          thunderbolt: {
              name: string;
              effect: string;
          };
          thunderWave: {
              name: string;
              effect: string;
          };
          thunder: {
              name: string;
              effect: string;
          };
          rockThrow: {
              name: string;
              effect: string;
          };
          earthquake: {
              name: string;
              effect: string;
          };
          fissure: {
              name: string;
              effect: string;
          };
          dig: {
              name: string;
              effect: string;
          };
          toxic: {
              name: string;
              effect: string;
          };
          confusion: {
              name: string;
              effect: string;
          };
          psychic: {
              name: string;
              effect: string;
          };
          hypnosis: {
              name: string;
              effect: string;
          };
          meditate: {
              name: string;
              effect: string;
          };
          agility: {
              name: string;
              effect: string;
          };
          quickAttack: {
              name: string;
              effect: string;
          };
          rage: {
              name: string;
              effect: string;
          };
          teleport: {
              name: string;
              effect: string;
          };
          nightShade: {
              name: string;
              effect: string;
          };
          mimic: {
              name: string;
              effect: string;
          };
          screech: {
              name: string;
              effect: string;
          };
          doubleTeam: {
              name: string;
              effect: string;
          };
          recover: {
              name: string;
              effect: string;
          };
          harden: {
              name: string;
              effect: string;
          };
          minimize: {
              name: string;
              effect: string;
          };
          smokescreen: {
              name: string;
              effect: string;
          };
          confuseRay: {
              name: string;
              effect: string;
          };
          withdraw: {
              name: string;
              effect: string;
          };
          defenseCurl: {
              name: string;
              effect: string;
          };
          barrier: {
              name: string;
              effect: string;
          };
          lightScreen: {
              name: string;
              effect: string;
          };
          haze: {
              name: string;
              effect: string;
          };
          reflect: {
              name: string;
              effect: string;
          };
          focusEnergy: {
              name: string;
              effect: string;
          };
          bide: {
              name: string;
              effect: string;
          };
          metronome: {
              name: string;
              effect: string;
          };
          mirrorMove: {
              name: string;
              effect: string;
          };
          selfDestruct: {
              name: string;
              effect: string;
          };
          eggBomb: {
              name: string;
              effect: string;
          };
          lick: {
              name: string;
              effect: string;
          };
          smog: {
              name: string;
              effect: string;
          };
          sludge: {
              name: string;
              effect: string;
          };
          boneClub: {
              name: string;
              effect: string;
          };
          fireBlast: {
              name: string;
              effect: string;
          };
          waterfall: {
              name: string;
              effect: string;
          };
          clamp: {
              name: string;
              effect: string;
          };
          swift: {
              name: string;
              effect: string;
          };
          skullBash: {
              name: string;
              effect: string;
          };
          spikeCannon: {
              name: string;
              effect: string;
          };
          constrict: {
              name: string;
              effect: string;
          };
          amnesia: {
              name: string;
              effect: string;
          };
          kinesis: {
              name: string;
              effect: string;
          };
          softBoiled: {
              name: string;
              effect: string;
          };
          highJumpKick: {
              name: string;
              effect: string;
          };
          glare: {
              name: string;
              effect: string;
          };
          dreamEater: {
              name: string;
              effect: string;
          };
          poisonGas: {
              name: string;
              effect: string;
          };
          barrage: {
              name: string;
              effect: string;
          };
          leechLife: {
              name: string;
              effect: string;
          };
          lovelyKiss: {
              name: string;
              effect: string;
          };
          skyAttack: {
              name: string;
              effect: string;
          };
          transform: {
              name: string;
              effect: string;
          };
          bubble: {
              name: string;
              effect: string;
          };
          dizzyPunch: {
              name: string;
              effect: string;
          };
          spore: {
              name: string;
              effect: string;
          };
          flash: {
              name: string;
              effect: string;
          };
          psywave: {
              name: string;
              effect: string;
          };
          splash: {
              name: string;
              effect: string;
          };
          acidArmor: {
              name: string;
              effect: string;
          };
          crabhammer: {
              name: string;
              effect: string;
          };
          explosion: {
              name: string;
              effect: string;
          };
          furySwipes: {
              name: string;
              effect: string;
          };
          bonemerang: {
              name: string;
              effect: string;
          };
          rest: {
              name: string;
              effect: string;
          };
          rockSlide: {
              name: string;
              effect: string;
          };
          hyperFang: {
              name: string;
              effect: string;
          };
          sharpen: {
              name: string;
              effect: string;
          };
          conversion: {
              name: string;
              effect: string;
          };
          triAttack: {
              name: string;
              effect: string;
          };
          superFang: {
              name: string;
              effect: string;
          };
          slash: {
              name: string;
              effect: string;
          };
          substitute: {
              name: string;
              effect: string;
          };
          struggle: {
              name: string;
              effect: string;
          };
          sketch: {
              name: string;
              effect: string;
          };
          tripleKick: {
              name: string;
              effect: string;
          };
          thief: {
              name: string;
              effect: string;
          };
          spiderWeb: {
              name: string;
              effect: string;
          };
          mindReader: {
              name: string;
              effect: string;
          };
          nightmare: {
              name: string;
              effect: string;
          };
          flameWheel: {
              name: string;
              effect: string;
          };
          snore: {
              name: string;
              effect: string;
          };
          curse: {
              name: string;
              effect: string;
          };
          flail: {
              name: string;
              effect: string;
          };
          conversion2: {
              name: string;
              effect: string;
          };
          aeroblast: {
              name: string;
              effect: string;
          };
          cottonSpore: {
              name: string;
              effect: string;
          };
          reversal: {
              name: string;
              effect: string;
          };
          spite: {
              name: string;
              effect: string;
          };
          powderSnow: {
              name: string;
              effect: string;
          };
          protect: {
              name: string;
              effect: string;
          };
          machPunch: {
              name: string;
              effect: string;
          };
          scaryFace: {
              name: string;
              effect: string;
          };
          feintAttack: {
              name: string;
              effect: string;
          };
          sweetKiss: {
              name: string;
              effect: string;
          };
          bellyDrum: {
              name: string;
              effect: string;
          };
          sludgeBomb: {
              name: string;
              effect: string;
          };
          mudSlap: {
              name: string;
              effect: string;
          };
          octazooka: {
              name: string;
              effect: string;
          };
          spikes: {
              name: string;
              effect: string;
          };
          zapCannon: {
              name: string;
              effect: string;
          };
          foresight: {
              name: string;
              effect: string;
          };
          destinyBond: {
              name: string;
              effect: string;
          };
          perishSong: {
              name: string;
              effect: string;
          };
          icyWind: {
              name: string;
              effect: string;
          };
          detect: {
              name: string;
              effect: string;
          };
          boneRush: {
              name: string;
              effect: string;
          };
          lockOn: {
              name: string;
              effect: string;
          };
          outrage: {
              name: string;
              effect: string;
          };
          sandstorm: {
              name: string;
              effect: string;
          };
          gigaDrain: {
              name: string;
              effect: string;
          };
          endure: {
              name: string;
              effect: string;
          };
          charm: {
              name: string;
              effect: string;
          };
          rollout: {
              name: string;
              effect: string;
          };
          falseSwipe: {
              name: string;
              effect: string;
          };
          swagger: {
              name: string;
              effect: string;
          };
          milkDrink: {
              name: string;
              effect: string;
          };
          spark: {
              name: string;
              effect: string;
          };
          furyCutter: {
              name: string;
              effect: string;
          };
          steelWing: {
              name: string;
              effect: string;
          };
          meanLook: {
              name: string;
              effect: string;
          };
          attract: {
              name: string;
              effect: string;
          };
          sleepTalk: {
              name: string;
              effect: string;
          };
          healBell: {
              name: string;
              effect: string;
          };
          return: {
              name: string;
              effect: string;
          };
          present: {
              name: string;
              effect: string;
          };
          frustration: {
              name: string;
              effect: string;
          };
          safeguard: {
              name: string;
              effect: string;
          };
          painSplit: {
              name: string;
              effect: string;
          };
          sacredFire: {
              name: string;
              effect: string;
          };
          magnitude: {
              name: string;
              effect: string;
          };
          dynamicPunch: {
              name: string;
              effect: string;
          };
          megahorn: {
              name: string;
              effect: string;
          };
          dragonBreath: {
              name: string;
              effect: string;
          };
          batonPass: {
              name: string;
              effect: string;
          };
          encore: {
              name: string;
              effect: string;
          };
          pursuit: {
              name: string;
              effect: string;
          };
          rapidSpin: {
              name: string;
              effect: string;
          };
          sweetScent: {
              name: string;
              effect: string;
          };
          ironTail: {
              name: string;
              effect: string;
          };
          metalClaw: {
              name: string;
              effect: string;
          };
          vitalThrow: {
              name: string;
              effect: string;
          };
          morningSun: {
              name: string;
              effect: string;
          };
          synthesis: {
              name: string;
              effect: string;
          };
          moonlight: {
              name: string;
              effect: string;
          };
          hiddenPower: {
              name: string;
              effect: string;
          };
          crossChop: {
              name: string;
              effect: string;
          };
          twister: {
              name: string;
              effect: string;
          };
          rainDance: {
              name: string;
              effect: string;
          };
          sunnyDay: {
              name: string;
              effect: string;
          };
          crunch: {
              name: string;
              effect: string;
          };
          mirrorCoat: {
              name: string;
              effect: string;
          };
          psychUp: {
              name: string;
              effect: string;
          };
          extremeSpeed: {
              name: string;
              effect: string;
          };
          ancientPower: {
              name: string;
              effect: string;
          };
          shadowBall: {
              name: string;
              effect: string;
          };
          futureSight: {
              name: string;
              effect: string;
          };
          rockSmash: {
              name: string;
              effect: string;
          };
          whirlpool: {
              name: string;
              effect: string;
          };
          beatUp: {
              name: string;
              effect: string;
          };
          fakeOut: {
              name: string;
              effect: string;
          };
          uproar: {
              name: string;
              effect: string;
          };
          stockpile: {
              name: string;
              effect: string;
          };
          spitUp: {
              name: string;
              effect: string;
          };
          swallow: {
              name: string;
              effect: string;
          };
          heatWave: {
              name: string;
              effect: string;
          };
          hail: {
              name: string;
              effect: string;
          };
          torment: {
              name: string;
              effect: string;
          };
          flatter: {
              name: string;
              effect: string;
          };
          willOWisp: {
              name: string;
              effect: string;
          };
          memento: {
              name: string;
              effect: string;
          };
          facade: {
              name: string;
              effect: string;
          };
          focusPunch: {
              name: string;
              effect: string;
          };
          smellingSalts: {
              name: string;
              effect: string;
          };
          followMe: {
              name: string;
              effect: string;
          };
          naturePower: {
              name: string;
              effect: string;
          };
          charge: {
              name: string;
              effect: string;
          };
          taunt: {
              name: string;
              effect: string;
          };
          helpingHand: {
              name: string;
              effect: string;
          };
          trick: {
              name: string;
              effect: string;
          };
          rolePlay: {
              name: string;
              effect: string;
          };
          wish: {
              name: string;
              effect: string;
          };
          assist: {
              name: string;
              effect: string;
          };
          ingrain: {
              name: string;
              effect: string;
          };
          superpower: {
              name: string;
              effect: string;
          };
          magicCoat: {
              name: string;
              effect: string;
          };
          recycle: {
              name: string;
              effect: string;
          };
          revenge: {
              name: string;
              effect: string;
          };
          brickBreak: {
              name: string;
              effect: string;
          };
          yawn: {
              name: string;
              effect: string;
          };
          knockOff: {
              name: string;
              effect: string;
          };
          endeavor: {
              name: string;
              effect: string;
          };
          eruption: {
              name: string;
              effect: string;
          };
          skillSwap: {
              name: string;
              effect: string;
          };
          imprison: {
              name: string;
              effect: string;
          };
          refresh: {
              name: string;
              effect: string;
          };
          grudge: {
              name: string;
              effect: string;
          };
          snatch: {
              name: string;
              effect: string;
          };
          secretPower: {
              name: string;
              effect: string;
          };
          dive: {
              name: string;
              effect: string;
          };
          armThrust: {
              name: string;
              effect: string;
          };
          camouflage: {
              name: string;
              effect: string;
          };
          tailGlow: {
              name: string;
              effect: string;
          };
          lusterPurge: {
              name: string;
              effect: string;
          };
          mistBall: {
              name: string;
              effect: string;
          };
          featherDance: {
              name: string;
              effect: string;
          };
          teeterDance: {
              name: string;
              effect: string;
          };
          blazeKick: {
              name: string;
              effect: string;
          };
          mudSport: {
              name: string;
              effect: string;
          };
          iceBall: {
              name: string;
              effect: string;
          };
          needleArm: {
              name: string;
              effect: string;
          };
          slackOff: {
              name: string;
              effect: string;
          };
          hyperVoice: {
              name: string;
              effect: string;
          };
          poisonFang: {
              name: string;
              effect: string;
          };
          crushClaw: {
              name: string;
              effect: string;
          };
          blastBurn: {
              name: string;
              effect: string;
          };
          hydroCannon: {
              name: string;
              effect: string;
          };
          meteorMash: {
              name: string;
              effect: string;
          };
          astonish: {
              name: string;
              effect: string;
          };
          weatherBall: {
              name: string;
              effect: string;
          };
          aromatherapy: {
              name: string;
              effect: string;
          };
          fakeTears: {
              name: string;
              effect: string;
          };
          airCutter: {
              name: string;
              effect: string;
          };
          overheat: {
              name: string;
              effect: string;
          };
          odorSleuth: {
              name: string;
              effect: string;
          };
          rockTomb: {
              name: string;
              effect: string;
          };
          silverWind: {
              name: string;
              effect: string;
          };
          metalSound: {
              name: string;
              effect: string;
          };
          grassWhistle: {
              name: string;
              effect: string;
          };
          tickle: {
              name: string;
              effect: string;
          };
          cosmicPower: {
              name: string;
              effect: string;
          };
          waterSpout: {
              name: string;
              effect: string;
          };
          signalBeam: {
              name: string;
              effect: string;
          };
          shadowPunch: {
              name: string;
              effect: string;
          };
          extrasensory: {
              name: string;
              effect: string;
          };
          skyUppercut: {
              name: string;
              effect: string;
          };
          sandTomb: {
              name: string;
              effect: string;
          };
          sheerCold: {
              name: string;
              effect: string;
          };
          muddyWater: {
              name: string;
              effect: string;
          };
          bulletSeed: {
              name: string;
              effect: string;
          };
          aerialAce: {
              name: string;
              effect: string;
          };
          icicleSpear: {
              name: string;
              effect: string;
          };
          ironDefense: {
              name: string;
              effect: string;
          };
          block: {
              name: string;
              effect: string;
          };
          howl: {
              name: string;
              effect: string;
          };
          dragonClaw: {
              name: string;
              effect: string;
          };
          frenzyPlant: {
              name: string;
              effect: string;
          };
          bulkUp: {
              name: string;
              effect: string;
          };
          bounce: {
              name: string;
              effect: string;
          };
          mudShot: {
              name: string;
              effect: string;
          };
          poisonTail: {
              name: string;
              effect: string;
          };
          covet: {
              name: string;
              effect: string;
          };
          voltTackle: {
              name: string;
              effect: string;
          };
          magicalLeaf: {
              name: string;
              effect: string;
          };
          waterSport: {
              name: string;
              effect: string;
          };
          calmMind: {
              name: string;
              effect: string;
          };
          leafBlade: {
              name: string;
              effect: string;
          };
          dragonDance: {
              name: string;
              effect: string;
          };
          rockBlast: {
              name: string;
              effect: string;
          };
          shockWave: {
              name: string;
              effect: string;
          };
          waterPulse: {
              name: string;
              effect: string;
          };
          doomDesire: {
              name: string;
              effect: string;
          };
          psychoBoost: {
              name: string;
              effect: string;
          };
          roost: {
              name: string;
              effect: string;
          };
          gravity: {
              name: string;
              effect: string;
          };
          miracleEye: {
              name: string;
              effect: string;
          };
          wakeUpSlap: {
              name: string;
              effect: string;
          };
          hammerArm: {
              name: string;
              effect: string;
          };
          gyroBall: {
              name: string;
              effect: string;
          };
          healingWish: {
              name: string;
              effect: string;
          };
          brine: {
              name: string;
              effect: string;
          };
          naturalGift: {
              name: string;
              effect: string;
          };
          feint: {
              name: string;
              effect: string;
          };
          pluck: {
              name: string;
              effect: string;
          };
          tailwind: {
              name: string;
              effect: string;
          };
          acupressure: {
              name: string;
              effect: string;
          };
          metalBurst: {
              name: string;
              effect: string;
          };
          uTurn: {
              name: string;
              effect: string;
          };
          closeCombat: {
              name: string;
              effect: string;
          };
          payback: {
              name: string;
              effect: string;
          };
          assurance: {
              name: string;
              effect: string;
          };
          embargo: {
              name: string;
              effect: string;
          };
          fling: {
              name: string;
              effect: string;
          };
          psychoShift: {
              name: string;
              effect: string;
          };
          trumpCard: {
              name: string;
              effect: string;
          };
          healBlock: {
              name: string;
              effect: string;
          };
          wringOut: {
              name: string;
              effect: string;
          };
          powerTrick: {
              name: string;
              effect: string;
          };
          gastroAcid: {
              name: string;
              effect: string;
          };
          luckyChant: {
              name: string;
              effect: string;
          };
          meFirst: {
              name: string;
              effect: string;
          };
          copycat: {
              name: string;
              effect: string;
          };
          powerSwap: {
              name: string;
              effect: string;
          };
          guardSwap: {
              name: string;
              effect: string;
          };
          punishment: {
              name: string;
              effect: string;
          };
          lastResort: {
              name: string;
              effect: string;
          };
          worrySeed: {
              name: string;
              effect: string;
          };
          suckerPunch: {
              name: string;
              effect: string;
          };
          toxicSpikes: {
              name: string;
              effect: string;
          };
          heartSwap: {
              name: string;
              effect: string;
          };
          aquaRing: {
              name: string;
              effect: string;
          };
          magnetRise: {
              name: string;
              effect: string;
          };
          flareBlitz: {
              name: string;
              effect: string;
          };
          forcePalm: {
              name: string;
              effect: string;
          };
          auraSphere: {
              name: string;
              effect: string;
          };
          rockPolish: {
              name: string;
              effect: string;
          };
          poisonJab: {
              name: string;
              effect: string;
          };
          darkPulse: {
              name: string;
              effect: string;
          };
          nightSlash: {
              name: string;
              effect: string;
          };
          aquaTail: {
              name: string;
              effect: string;
          };
          seedBomb: {
              name: string;
              effect: string;
          };
          airSlash: {
              name: string;
              effect: string;
          };
          xScissor: {
              name: string;
              effect: string;
          };
          bugBuzz: {
              name: string;
              effect: string;
          };
          dragonPulse: {
              name: string;
              effect: string;
          };
          dragonRush: {
              name: string;
              effect: string;
          };
          powerGem: {
              name: string;
              effect: string;
          };
          drainPunch: {
              name: string;
              effect: string;
          };
          vacuumWave: {
              name: string;
              effect: string;
          };
          focusBlast: {
              name: string;
              effect: string;
          };
          energyBall: {
              name: string;
              effect: string;
          };
          braveBird: {
              name: string;
              effect: string;
          };
          earthPower: {
              name: string;
              effect: string;
          };
          switcheroo: {
              name: string;
              effect: string;
          };
          gigaImpact: {
              name: string;
              effect: string;
          };
          nastyPlot: {
              name: string;
              effect: string;
          };
          bulletPunch: {
              name: string;
              effect: string;
          };
          avalanche: {
              name: string;
              effect: string;
          };
          iceShard: {
              name: string;
              effect: string;
          };
          shadowClaw: {
              name: string;
              effect: string;
          };
          thunderFang: {
              name: string;
              effect: string;
          };
          iceFang: {
              name: string;
              effect: string;
          };
          fireFang: {
              name: string;
              effect: string;
          };
          shadowSneak: {
              name: string;
              effect: string;
          };
          mudBomb: {
              name: string;
              effect: string;
          };
          psychoCut: {
              name: string;
              effect: string;
          };
          zenHeadbutt: {
              name: string;
              effect: string;
          };
          mirrorShot: {
              name: string;
              effect: string;
          };
          flashCannon: {
              name: string;
              effect: string;
          };
          rockClimb: {
              name: string;
              effect: string;
          };
          defog: {
              name: string;
              effect: string;
          };
          trickRoom: {
              name: string;
              effect: string;
          };
          dracoMeteor: {
              name: string;
              effect: string;
          };
          discharge: {
              name: string;
              effect: string;
          };
          lavaPlume: {
              name: string;
              effect: string;
          };
          leafStorm: {
              name: string;
              effect: string;
          };
          powerWhip: {
              name: string;
              effect: string;
          };
          rockWrecker: {
              name: string;
              effect: string;
          };
          crossPoison: {
              name: string;
              effect: string;
          };
          gunkShot: {
              name: string;
              effect: string;
          };
          ironHead: {
              name: string;
              effect: string;
          };
          magnetBomb: {
              name: string;
              effect: string;
          };
          stoneEdge: {
              name: string;
              effect: string;
          };
          captivate: {
              name: string;
              effect: string;
          };
          stealthRock: {
              name: string;
              effect: string;
          };
          grassKnot: {
              name: string;
              effect: string;
          };
          chatter: {
              name: string;
              effect: string;
          };
          judgment: {
              name: string;
              effect: string;
          };
          bugBite: {
              name: string;
              effect: string;
          };
          chargeBeam: {
              name: string;
              effect: string;
          };
          woodHammer: {
              name: string;
              effect: string;
          };
          aquaJet: {
              name: string;
              effect: string;
          };
          attackOrder: {
              name: string;
              effect: string;
          };
          defendOrder: {
              name: string;
              effect: string;
          };
          healOrder: {
              name: string;
              effect: string;
          };
          headSmash: {
              name: string;
              effect: string;
          };
          doubleHit: {
              name: string;
              effect: string;
          };
          roarOfTime: {
              name: string;
              effect: string;
          };
          spacialRend: {
              name: string;
              effect: string;
          };
          lunarDance: {
              name: string;
              effect: string;
          };
          crushGrip: {
              name: string;
              effect: string;
          };
          magmaStorm: {
              name: string;
              effect: string;
          };
          darkVoid: {
              name: string;
              effect: string;
          };
          seedFlare: {
              name: string;
              effect: string;
          };
          ominousWind: {
              name: string;
              effect: string;
          };
          shadowForce: {
              name: string;
              effect: string;
          };
          honeClaws: {
              name: string;
              effect: string;
          };
          wideGuard: {
              name: string;
              effect: string;
          };
          guardSplit: {
              name: string;
              effect: string;
          };
          powerSplit: {
              name: string;
              effect: string;
          };
          wonderRoom: {
              name: string;
              effect: string;
          };
          psyshock: {
              name: string;
              effect: string;
          };
          venoshock: {
              name: string;
              effect: string;
          };
          autotomize: {
              name: string;
              effect: string;
          };
          ragePowder: {
              name: string;
              effect: string;
          };
          telekinesis: {
              name: string;
              effect: string;
          };
          magicRoom: {
              name: string;
              effect: string;
          };
          smackDown: {
              name: string;
              effect: string;
          };
          stormThrow: {
              name: string;
              effect: string;
          };
          flameBurst: {
              name: string;
              effect: string;
          };
          sludgeWave: {
              name: string;
              effect: string;
          };
          quiverDance: {
              name: string;
              effect: string;
          };
          heavySlam: {
              name: string;
              effect: string;
          };
          synchronoise: {
              name: string;
              effect: string;
          };
          electroBall: {
              name: string;
              effect: string;
          };
          soak: {
              name: string;
              effect: string;
          };
          flameCharge: {
              name: string;
              effect: string;
          };
          coil: {
              name: string;
              effect: string;
          };
          lowSweep: {
              name: string;
              effect: string;
          };
          acidSpray: {
              name: string;
              effect: string;
          };
          foulPlay: {
              name: string;
              effect: string;
          };
          simpleBeam: {
              name: string;
              effect: string;
          };
          entrainment: {
              name: string;
              effect: string;
          };
          afterYou: {
              name: string;
              effect: string;
          };
          round: {
              name: string;
              effect: string;
          };
          echoedVoice: {
              name: string;
              effect: string;
          };
          chipAway: {
              name: string;
              effect: string;
          };
          clearSmog: {
              name: string;
              effect: string;
          };
          storedPower: {
              name: string;
              effect: string;
          };
          quickGuard: {
              name: string;
              effect: string;
          };
          allySwitch: {
              name: string;
              effect: string;
          };
          scald: {
              name: string;
              effect: string;
          };
          shellSmash: {
              name: string;
              effect: string;
          };
          healPulse: {
              name: string;
              effect: string;
          };
          hex: {
              name: string;
              effect: string;
          };
          skyDrop: {
              name: string;
              effect: string;
          };
          shiftGear: {
              name: string;
              effect: string;
          };
          circleThrow: {
              name: string;
              effect: string;
          };
          incinerate: {
              name: string;
              effect: string;
          };
          quash: {
              name: string;
              effect: string;
          };
          acrobatics: {
              name: string;
              effect: string;
          };
          reflectType: {
              name: string;
              effect: string;
          };
          retaliate: {
              name: string;
              effect: string;
          };
          finalGambit: {
              name: string;
              effect: string;
          };
          bestow: {
              name: string;
              effect: string;
          };
          inferno: {
              name: string;
              effect: string;
          };
          waterPledge: {
              name: string;
              effect: string;
          };
          firePledge: {
              name: string;
              effect: string;
          };
          grassPledge: {
              name: string;
              effect: string;
          };
          voltSwitch: {
              name: string;
              effect: string;
          };
          struggleBug: {
              name: string;
              effect: string;
          };
          bulldoze: {
              name: string;
              effect: string;
          };
          frostBreath: {
              name: string;
              effect: string;
          };
          dragonTail: {
              name: string;
              effect: string;
          };
          workUp: {
              name: string;
              effect: string;
          };
          electroweb: {
              name: string;
              effect: string;
          };
          wildCharge: {
              name: string;
              effect: string;
          };
          drillRun: {
              name: string;
              effect: string;
          };
          dualChop: {
              name: string;
              effect: string;
          };
          heartStamp: {
              name: string;
              effect: string;
          };
          hornLeech: {
              name: string;
              effect: string;
          };
          sacredSword: {
              name: string;
              effect: string;
          };
          razorShell: {
              name: string;
              effect: string;
          };
          heatCrash: {
              name: string;
              effect: string;
          };
          leafTornado: {
              name: string;
              effect: string;
          };
          steamroller: {
              name: string;
              effect: string;
          };
          cottonGuard: {
              name: string;
              effect: string;
          };
          nightDaze: {
              name: string;
              effect: string;
          };
          psystrike: {
              name: string;
              effect: string;
          };
          tailSlap: {
              name: string;
              effect: string;
          };
          hurricane: {
              name: string;
              effect: string;
          };
          headCharge: {
              name: string;
              effect: string;
          };
          gearGrind: {
              name: string;
              effect: string;
          };
          searingShot: {
              name: string;
              effect: string;
          };
          technoBlast: {
              name: string;
              effect: string;
          };
          relicSong: {
              name: string;
              effect: string;
          };
          secretSword: {
              name: string;
              effect: string;
          };
          glaciate: {
              name: string;
              effect: string;
          };
          boltStrike: {
              name: string;
              effect: string;
          };
          blueFlare: {
              name: string;
              effect: string;
          };
          fieryDance: {
              name: string;
              effect: string;
          };
          freezeShock: {
              name: string;
              effect: string;
          };
          iceBurn: {
              name: string;
              effect: string;
          };
          snarl: {
              name: string;
              effect: string;
          };
          icicleCrash: {
              name: string;
              effect: string;
          };
          vCreate: {
              name: string;
              effect: string;
          };
          fusionFlare: {
              name: string;
              effect: string;
          };
          fusionBolt: {
              name: string;
              effect: string;
          };
          flyingPress: {
              name: string;
              effect: string;
          };
          matBlock: {
              name: string;
              effect: string;
          };
          belch: {
              name: string;
              effect: string;
          };
          rototiller: {
              name: string;
              effect: string;
          };
          stickyWeb: {
              name: string;
              effect: string;
          };
          fellStinger: {
              name: string;
              effect: string;
          };
          phantomForce: {
              name: string;
              effect: string;
          };
          trickOrTreat: {
              name: string;
              effect: string;
          };
          nobleRoar: {
              name: string;
              effect: string;
          };
          ionDeluge: {
              name: string;
              effect: string;
          };
          parabolicCharge: {
              name: string;
              effect: string;
          };
          forestsCurse: {
              name: string;
              effect: string;
          };
          petalBlizzard: {
              name: string;
              effect: string;
          };
          freezeDry: {
              name: string;
              effect: string;
          };
          disarmingVoice: {
              name: string;
              effect: string;
          };
          partingShot: {
              name: string;
              effect: string;
          };
          topsyTurvy: {
              name: string;
              effect: string;
          };
          drainingKiss: {
              name: string;
              effect: string;
          };
          craftyShield: {
              name: string;
              effect: string;
          };
          flowerShield: {
              name: string;
              effect: string;
          };
          grassyTerrain: {
              name: string;
              effect: string;
          };
          mistyTerrain: {
              name: string;
              effect: string;
          };
          electrify: {
              name: string;
              effect: string;
          };
          playRough: {
              name: string;
              effect: string;
          };
          fairyWind: {
              name: string;
              effect: string;
          };
          moonblast: {
              name: string;
              effect: string;
          };
          boomburst: {
              name: string;
              effect: string;
          };
          fairyLock: {
              name: string;
              effect: string;
          };
          kingsShield: {
              name: string;
              effect: string;
          };
          playNice: {
              name: string;
              effect: string;
          };
          confide: {
              name: string;
              effect: string;
          };
          diamondStorm: {
              name: string;
              effect: string;
          };
          steamEruption: {
              name: string;
              effect: string;
          };
          hyperspaceHole: {
              name: string;
              effect: string;
          };
          waterShuriken: {
              name: string;
              effect: string;
          };
          mysticalFire: {
              name: string;
              effect: string;
          };
          spikyShield: {
              name: string;
              effect: string;
          };
          aromaticMist: {
              name: string;
              effect: string;
          };
          eerieImpulse: {
              name: string;
              effect: string;
          };
          venomDrench: {
              name: string;
              effect: string;
          };
          powder: {
              name: string;
              effect: string;
          };
          geomancy: {
              name: string;
              effect: string;
          };
          magneticFlux: {
              name: string;
              effect: string;
          };
          happyHour: {
              name: string;
              effect: string;
          };
          electricTerrain: {
              name: string;
              effect: string;
          };
          dazzlingGleam: {
              name: string;
              effect: string;
          };
          celebrate: {
              name: string;
              effect: string;
          };
          holdHands: {
              name: string;
              effect: string;
          };
          babyDollEyes: {
              name: string;
              effect: string;
          };
          nuzzle: {
              name: string;
              effect: string;
          };
          holdBack: {
              name: string;
              effect: string;
          };
          infestation: {
              name: string;
              effect: string;
          };
          powerUpPunch: {
              name: string;
              effect: string;
          };
          oblivionWing: {
              name: string;
              effect: string;
          };
          thousandArrows: {
              name: string;
              effect: string;
          };
          thousandWaves: {
              name: string;
              effect: string;
          };
          landsWrath: {
              name: string;
              effect: string;
          };
          lightOfRuin: {
              name: string;
              effect: string;
          };
          originPulse: {
              name: string;
              effect: string;
          };
          precipiceBlades: {
              name: string;
              effect: string;
          };
          dragonAscent: {
              name: string;
              effect: string;
          };
          hyperspaceFury: {
              name: string;
              effect: string;
          };
          breakneckBlitzPhysical: {
              name: string;
              effect: string;
          };
          breakneckBlitzSpecial: {
              name: string;
              effect: string;
          };
          allOutPummelingPhysical: {
              name: string;
              effect: string;
          };
          allOutPummelingSpecial: {
              name: string;
              effect: string;
          };
          supersonicSkystrikePhysical: {
              name: string;
              effect: string;
          };
          supersonicSkystrikeSpecial: {
              name: string;
              effect: string;
          };
          acidDownpourPhysical: {
              name: string;
              effect: string;
          };
          acidDownpourSpecial: {
              name: string;
              effect: string;
          };
          tectonicRagePhysical: {
              name: string;
              effect: string;
          };
          tectonicRageSpecial: {
              name: string;
              effect: string;
          };
          continentalCrushPhysical: {
              name: string;
              effect: string;
          };
          continentalCrushSpecial: {
              name: string;
              effect: string;
          };
          savageSpinOutPhysical: {
              name: string;
              effect: string;
          };
          savageSpinOutSpecial: {
              name: string;
              effect: string;
          };
          neverEndingNightmarePhysical: {
              name: string;
              effect: string;
          };
          neverEndingNightmareSpecial: {
              name: string;
              effect: string;
          };
          corkscrewCrashPhysical: {
              name: string;
              effect: string;
          };
          corkscrewCrashSpecial: {
              name: string;
              effect: string;
          };
          infernoOverdrivePhysical: {
              name: string;
              effect: string;
          };
          infernoOverdriveSpecial: {
              name: string;
              effect: string;
          };
          hydroVortexPhysical: {
              name: string;
              effect: string;
          };
          hydroVortexSpecial: {
              name: string;
              effect: string;
          };
          bloomDoomPhysical: {
              name: string;
              effect: string;
          };
          bloomDoomSpecial: {
              name: string;
              effect: string;
          };
          gigavoltHavocPhysical: {
              name: string;
              effect: string;
          };
          gigavoltHavocSpecial: {
              name: string;
              effect: string;
          };
          shatteredPsychePhysical: {
              name: string;
              effect: string;
          };
          shatteredPsycheSpecial: {
              name: string;
              effect: string;
          };
          subzeroSlammerPhysical: {
              name: string;
              effect: string;
          };
          subzeroSlammerSpecial: {
              name: string;
              effect: string;
          };
          devastatingDrakePhysical: {
              name: string;
              effect: string;
          };
          devastatingDrakeSpecial: {
              name: string;
              effect: string;
          };
          blackHoleEclipsePhysical: {
              name: string;
              effect: string;
          };
          blackHoleEclipseSpecial: {
              name: string;
              effect: string;
          };
          twinkleTacklePhysical: {
              name: string;
              effect: string;
          };
          twinkleTackleSpecial: {
              name: string;
              effect: string;
          };
          catastropika: {
              name: string;
              effect: string;
          };
          shoreUp: {
              name: string;
              effect: string;
          };
          firstImpression: {
              name: string;
              effect: string;
          };
          banefulBunker: {
              name: string;
              effect: string;
          };
          spiritShackle: {
              name: string;
              effect: string;
          };
          darkestLariat: {
              name: string;
              effect: string;
          };
          sparklingAria: {
              name: string;
              effect: string;
          };
          iceHammer: {
              name: string;
              effect: string;
          };
          floralHealing: {
              name: string;
              effect: string;
          };
          highHorsepower: {
              name: string;
              effect: string;
          };
          strengthSap: {
              name: string;
              effect: string;
          };
          solarBlade: {
              name: string;
              effect: string;
          };
          leafage: {
              name: string;
              effect: string;
          };
          spotlight: {
              name: string;
              effect: string;
          };
          toxicThread: {
              name: string;
              effect: string;
          };
          laserFocus: {
              name: string;
              effect: string;
          };
          gearUp: {
              name: string;
              effect: string;
          };
          throatChop: {
              name: string;
              effect: string;
          };
          pollenPuff: {
              name: string;
              effect: string;
          };
          anchorShot: {
              name: string;
              effect: string;
          };
          psychicTerrain: {
              name: string;
              effect: string;
          };
          lunge: {
              name: string;
              effect: string;
          };
          fireLash: {
              name: string;
              effect: string;
          };
          powerTrip: {
              name: string;
              effect: string;
          };
          burnUp: {
              name: string;
              effect: string;
          };
          speedSwap: {
              name: string;
              effect: string;
          };
          smartStrike: {
              name: string;
              effect: string;
          };
          purify: {
              name: string;
              effect: string;
          };
          revelationDance: {
              name: string;
              effect: string;
          };
          coreEnforcer: {
              name: string;
              effect: string;
          };
          tropKick: {
              name: string;
              effect: string;
          };
          instruct: {
              name: string;
              effect: string;
          };
          beakBlast: {
              name: string;
              effect: string;
          };
          clangingScales: {
              name: string;
              effect: string;
          };
          dragonHammer: {
              name: string;
              effect: string;
          };
          brutalSwing: {
              name: string;
              effect: string;
          };
          auroraVeil: {
              name: string;
              effect: string;
          };
          sinisterArrowRaid: {
              name: string;
              effect: string;
          };
          maliciousMoonsault: {
              name: string;
              effect: string;
          };
          oceanicOperetta: {
              name: string;
              effect: string;
          };
          guardianOfAlola: {
              name: string;
              effect: string;
          };
          soulStealing7StarStrike: {
              name: string;
              effect: string;
          };
          stokedSparksurfer: {
              name: string;
              effect: string;
          };
          pulverizingPancake: {
              name: string;
              effect: string;
          };
          extremeEvoboost: {
              name: string;
              effect: string;
          };
          genesisSupernova: {
              name: string;
              effect: string;
          };
          shellTrap: {
              name: string;
              effect: string;
          };
          fleurCannon: {
              name: string;
              effect: string;
          };
          psychicFangs: {
              name: string;
              effect: string;
          };
          stompingTantrum: {
              name: string;
              effect: string;
          };
          shadowBone: {
              name: string;
              effect: string;
          };
          accelerock: {
              name: string;
              effect: string;
          };
          liquidation: {
              name: string;
              effect: string;
          };
          prismaticLaser: {
              name: string;
              effect: string;
          };
          spectralThief: {
              name: string;
              effect: string;
          };
          sunsteelStrike: {
              name: string;
              effect: string;
          };
          moongeistBeam: {
              name: string;
              effect: string;
          };
          tearfulLook: {
              name: string;
              effect: string;
          };
          zingZap: {
              name: string;
              effect: string;
          };
          naturesMadness: {
              name: string;
              effect: string;
          };
          multiAttack: {
              name: string;
              effect: string;
          };
          tenMillionVoltThunderbolt: {
              name: string;
              effect: string;
          };
          mindBlown: {
              name: string;
              effect: string;
          };
          plasmaFists: {
              name: string;
              effect: string;
          };
          photonGeyser: {
              name: string;
              effect: string;
          };
          lightThatBurnsTheSky: {
              name: string;
              effect: string;
          };
          searingSunrazeSmash: {
              name: string;
              effect: string;
          };
          menacingMoonrazeMaelstrom: {
              name: string;
              effect: string;
          };
          letsSnuggleForever: {
              name: string;
              effect: string;
          };
          splinteredStormshards: {
              name: string;
              effect: string;
          };
          clangorousSoulblaze: {
              name: string;
              effect: string;
          };
          zippyZap: {
              name: string;
              effect: string;
          };
          splishySplash: {
              name: string;
              effect: string;
          };
          floatyFall: {
              name: string;
              effect: string;
          };
          pikaPapow: {
              name: string;
              effect: string;
          };
          bouncyBubble: {
              name: string;
              effect: string;
          };
          buzzyBuzz: {
              name: string;
              effect: string;
          };
          sizzlySlide: {
              name: string;
              effect: string;
          };
          glitzyGlow: {
              name: string;
              effect: string;
          };
          baddyBad: {
              name: string;
              effect: string;
          };
          sappySeed: {
              name: string;
              effect: string;
          };
          freezyFrost: {
              name: string;
              effect: string;
          };
          sparklySwirl: {
              name: string;
              effect: string;
          };
          veeveeVolley: {
              name: string;
              effect: string;
          };
          doubleIronBash: {
              name: string;
              effect: string;
          };
          maxGuard: {
              name: string;
              effect: string;
          };
          dynamaxCannon: {
              name: string;
              effect: string;
          };
          snipeShot: {
              name: string;
              effect: string;
          };
          jawLock: {
              name: string;
              effect: string;
          };
          stuffCheeks: {
              name: string;
              effect: string;
          };
          noRetreat: {
              name: string;
              effect: string;
          };
          tarShot: {
              name: string;
              effect: string;
          };
          magicPowder: {
              name: string;
              effect: string;
          };
          dragonDarts: {
              name: string;
              effect: string;
          };
          teatime: {
              name: string;
              effect: string;
          };
          octolock: {
              name: string;
              effect: string;
          };
          boltBeak: {
              name: string;
              effect: string;
          };
          fishiousRend: {
              name: string;
              effect: string;
          };
          courtChange: {
              name: string;
              effect: string;
          };
          maxFlare: {
              name: string;
              effect: string;
          };
          maxFlutterby: {
              name: string;
              effect: string;
          };
          maxLightning: {
              name: string;
              effect: string;
          };
          maxStrike: {
              name: string;
              effect: string;
          };
          maxKnuckle: {
              name: string;
              effect: string;
          };
          maxPhantasm: {
              name: string;
              effect: string;
          };
          maxHailstorm: {
              name: string;
              effect: string;
          };
          maxOoze: {
              name: string;
              effect: string;
          };
          maxGeyser: {
              name: string;
              effect: string;
          };
          maxAirstream: {
              name: string;
              effect: string;
          };
          maxStarfall: {
              name: string;
              effect: string;
          };
          maxWyrmwind: {
              name: string;
              effect: string;
          };
          maxMindstorm: {
              name: string;
              effect: string;
          };
          maxRockfall: {
              name: string;
              effect: string;
          };
          maxQuake: {
              name: string;
              effect: string;
          };
          maxDarkness: {
              name: string;
              effect: string;
          };
          maxOvergrowth: {
              name: string;
              effect: string;
          };
          maxSteelspike: {
              name: string;
              effect: string;
          };
          clangorousSoul: {
              name: string;
              effect: string;
          };
          bodyPress: {
              name: string;
              effect: string;
          };
          decorate: {
              name: string;
              effect: string;
          };
          drumBeating: {
              name: string;
              effect: string;
          };
          snapTrap: {
              name: string;
              effect: string;
          };
          pyroBall: {
              name: string;
              effect: string;
          };
          behemothBlade: {
              name: string;
              effect: string;
          };
          behemothBash: {
              name: string;
              effect: string;
          };
          auraWheel: {
              name: string;
              effect: string;
          };
          breakingSwipe: {
              name: string;
              effect: string;
          };
          branchPoke: {
              name: string;
              effect: string;
          };
          overdrive: {
              name: string;
              effect: string;
          };
          appleAcid: {
              name: string;
              effect: string;
          };
          gravApple: {
              name: string;
              effect: string;
          };
          spiritBreak: {
              name: string;
              effect: string;
          };
          strangeSteam: {
              name: string;
              effect: string;
          };
          lifeDew: {
              name: string;
              effect: string;
          };
          obstruct: {
              name: string;
              effect: string;
          };
          falseSurrender: {
              name: string;
              effect: string;
          };
          meteorAssault: {
              name: string;
              effect: string;
          };
          eternabeam: {
              name: string;
              effect: string;
          };
          steelBeam: {
              name: string;
              effect: string;
          };
          expandingForce: {
              name: string;
              effect: string;
          };
          steelRoller: {
              name: string;
              effect: string;
          };
          scaleShot: {
              name: string;
              effect: string;
          };
          meteorBeam: {
              name: string;
              effect: string;
          };
          shellSideArm: {
              name: string;
              effect: string;
          };
          mistyExplosion: {
              name: string;
              effect: string;
          };
          grassyGlide: {
              name: string;
              effect: string;
          };
          risingVoltage: {
              name: string;
              effect: string;
          };
          terrainPulse: {
              name: string;
              effect: string;
          };
          skitterSmack: {
              name: string;
              effect: string;
          };
          burningJealousy: {
              name: string;
              effect: string;
          };
          lashOut: {
              name: string;
              effect: string;
          };
          poltergeist: {
              name: string;
              effect: string;
          };
          corrosiveGas: {
              name: string;
              effect: string;
          };
          coaching: {
              name: string;
              effect: string;
          };
          flipTurn: {
              name: string;
              effect: string;
          };
          tripleAxel: {
              name: string;
              effect: string;
          };
          dualWingbeat: {
              name: string;
              effect: string;
          };
          scorchingSands: {
              name: string;
              effect: string;
          };
          jungleHealing: {
              name: string;
              effect: string;
          };
          wickedBlow: {
              name: string;
              effect: string;
          };
          surgingStrikes: {
              name: string;
              effect: string;
          };
          thunderCage: {
              name: string;
              effect: string;
          };
          dragonEnergy: {
              name: string;
              effect: string;
          };
          freezingGlare: {
              name: string;
              effect: string;
          };
          fieryWrath: {
              name: string;
              effect: string;
          };
          thunderousKick: {
              name: string;
              effect: string;
          };
          glacialLance: {
              name: string;
              effect: string;
          };
          astralBarrage: {
              name: string;
              effect: string;
          };
          eerieSpell: {
              name: string;
              effect: string;
          };
          direClaw: {
              name: string;
              effect: string;
          };
          psyshieldBash: {
              name: string;
              effect: string;
          };
          powerShift: {
              name: string;
              effect: string;
          };
          stoneAxe: {
              name: string;
              effect: string;
          };
          springtideStorm: {
              name: string;
              effect: string;
          };
          mysticalPower: {
              name: string;
              effect: string;
          };
          ragingFury: {
              name: string;
              effect: string;
          };
          waveCrash: {
              name: string;
              effect: string;
          };
          chloroblast: {
              name: string;
              effect: string;
          };
          mountainGale: {
              name: string;
              effect: string;
          };
          victoryDance: {
              name: string;
              effect: string;
          };
          headlongRush: {
              name: string;
              effect: string;
          };
          barbBarrage: {
              name: string;
              effect: string;
          };
          esperWing: {
              name: string;
              effect: string;
          };
          bitterMalice: {
              name: string;
              effect: string;
          };
          shelter: {
              name: string;
              effect: string;
          };
          tripleArrows: {
              name: string;
              effect: string;
          };
          infernalParade: {
              name: string;
              effect: string;
          };
          ceaselessEdge: {
              name: string;
              effect: string;
          };
          bleakwindStorm: {
              name: string;
              effect: string;
          };
          wildboltStorm: {
              name: string;
              effect: string;
          };
          sandsearStorm: {
              name: string;
              effect: string;
          };
          lunarBlessing: {
              name: string;
              effect: string;
          };
          takeHeart: {
              name: string;
              effect: string;
          };
          gMaxWildfire: {
              name: string;
              effect: string;
          };
          gMaxBefuddle: {
              name: string;
              effect: string;
          };
          gMaxVoltCrash: {
              name: string;
              effect: string;
          };
          gMaxGoldRush: {
              name: string;
              effect: string;
          };
          gMaxChiStrike: {
              name: string;
              effect: string;
          };
          gMaxTerror: {
              name: string;
              effect: string;
          };
          gMaxResonance: {
              name: string;
              effect: string;
          };
          gMaxCuddle: {
              name: string;
              effect: string;
          };
          gMaxReplenish: {
              name: string;
              effect: string;
          };
          gMaxMalodor: {
              name: string;
              effect: string;
          };
          gMaxStonesurge: {
              name: string;
              effect: string;
          };
          gMaxWindRage: {
              name: string;
              effect: string;
          };
          gMaxStunShock: {
              name: string;
              effect: string;
          };
          gMaxFinale: {
              name: string;
              effect: string;
          };
          gMaxDepletion: {
              name: string;
              effect: string;
          };
          gMaxGravitas: {
              name: string;
              effect: string;
          };
          gMaxVolcalith: {
              name: string;
              effect: string;
          };
          gMaxSandblast: {
              name: string;
              effect: string;
          };
          gMaxSnooze: {
              name: string;
              effect: string;
          };
          gMaxTartness: {
              name: string;
              effect: string;
          };
          gMaxSweetness: {
              name: string;
              effect: string;
          };
          gMaxSmite: {
              name: string;
              effect: string;
          };
          gMaxSteelsurge: {
              name: string;
              effect: string;
          };
          gMaxMeltdown: {
              name: string;
              effect: string;
          };
          gMaxFoamBurst: {
              name: string;
              effect: string;
          };
          gMaxCentiferno: {
              name: string;
              effect: string;
          };
          gMaxVineLash: {
              name: string;
              effect: string;
          };
          gMaxCannonade: {
              name: string;
              effect: string;
          };
          gMaxDrumSolo: {
              name: string;
              effect: string;
          };
          gMaxFireball: {
              name: string;
              effect: string;
          };
          gMaxHydrosnipe: {
              name: string;
              effect: string;
          };
          gMaxOneBlow: {
              name: string;
              effect: string;
          };
          gMaxRapidFlow: {
              name: string;
              effect: string;
          };
          teraBlast: {
              name: string;
              effect: string;
          };
          silkTrap: {
              name: string;
              effect: string;
          };
          axeKick: {
              name: string;
              effect: string;
          };
          lastRespects: {
              name: string;
              effect: string;
          };
          luminaCrash: {
              name: string;
              effect: string;
          };
          orderUp: {
              name: string;
              effect: string;
          };
          jetPunch: {
              name: string;
              effect: string;
          };
          spicyExtract: {
              name: string;
              effect: string;
          };
          spinOut: {
              name: string;
              effect: string;
          };
          populationBomb: {
              name: string;
              effect: string;
          };
          iceSpinner: {
              name: string;
              effect: string;
          };
          glaiveRush: {
              name: string;
              effect: string;
          };
          revivalBlessing: {
              name: string;
              effect: string;
          };
          saltCure: {
              name: string;
              effect: string;
          };
          tripleDive: {
              name: string;
              effect: string;
          };
          mortalSpin: {
              name: string;
              effect: string;
          };
          doodle: {
              name: string;
              effect: string;
          };
          filletAway: {
              name: string;
              effect: string;
          };
          kowtowCleave: {
              name: string;
              effect: string;
          };
          flowerTrick: {
              name: string;
              effect: string;
          };
          torchSong: {
              name: string;
              effect: string;
          };
          aquaStep: {
              name: string;
              effect: string;
          };
          ragingBull: {
              name: string;
              effect: string;
          };
          makeItRain: {
              name: string;
              effect: string;
          };
          psyblade: {
              name: string;
              effect: string;
          };
          hydroSteam: {
              name: string;
              effect: string;
          };
          ruination: {
              name: string;
              effect: string;
          };
          collisionCourse: {
              name: string;
              effect: string;
          };
          electroDrift: {
              name: string;
              effect: string;
          };
          shedTail: {
              name: string;
              effect: string;
          };
          chillyReception: {
              name: string;
              effect: string;
          };
          tidyUp: {
              name: string;
              effect: string;
          };
          snowscape: {
              name: string;
              effect: string;
          };
          pounce: {
              name: string;
              effect: string;
          };
          trailblaze: {
              name: string;
              effect: string;
          };
          chillingWater: {
              name: string;
              effect: string;
          };
          hyperDrill: {
              name: string;
              effect: string;
          };
          twinBeam: {
              name: string;
              effect: string;
          };
          rageFist: {
              name: string;
              effect: string;
          };
          armorCannon: {
              name: string;
              effect: string;
          };
          bitterBlade: {
              name: string;
              effect: string;
          };
          doubleShock: {
              name: string;
              effect: string;
          };
          gigatonHammer: {
              name: string;
              effect: string;
          };
          comeuppance: {
              name: string;
              effect: string;
          };
          aquaCutter: {
              name: string;
              effect: string;
          };
          blazingTorque: {
              name: string;
              effect: string;
          };
          wickedTorque: {
              name: string;
              effect: string;
          };
          noxiousTorque: {
              name: string;
              effect: string;
          };
          combatTorque: {
              name: string;
              effect: string;
          };
          magicalTorque: {
              name: string;
              effect: string;
          };
          bloodMoon: {
              name: string;
              effect: string;
          };
          matchaGotcha: {
              name: string;
              effect: string;
          };
          syrupBomb: {
              name: string;
              effect: string;
          };
          ivyCudgel: {
              name: string;
              effect: string;
          };
          electroShot: {
              name: string;
              effect: string;
          };
          teraStarstorm: {
              name: string;
              effect: string;
          };
          fickleBeam: {
              name: string;
              effect: string;
          };
          burningBulwark: {
              name: string;
              effect: string;
          };
          thunderclap: {
              name: string;
              effect: string;
          };
          mightyCleave: {
              name: string;
              effect: string;
          };
          tachyonCutter: {
              name: string;
              effect: string;
          };
          hardPress: {
              name: string;
              effect: string;
          };
          dragonCheer: {
              name: string;
              effect: string;
          };
          alluringVoice: {
              name: string;
              effect: string;
          };
          temperFlare: {
              name: string;
              effect: string;
          };
          supercellSlam: {
              name: string;
              effect: string;
          };
          psychicNoise: {
              name: string;
              effect: string;
          };
          upperHand: {
              name: string;
              effect: string;
          };
          malignantChain: {
              name: string;
              effect: string;
          };
      };
      nature: {
          Hardy: string;
          Lonely: string;
          Brave: string;
          Adamant: string;
          Naughty: string;
          Bold: string;
          Docile: string;
          Relaxed: string;
          Impish: string;
          Lax: string;
          Timid: string;
          Hasty: string;
          Serious: string;
          Jolly: string;
          Naive: string;
          Modest: string;
          Mild: string;
          Quiet: string;
          Bashful: string;
          Rash: string;
          Calm: string;
          Gentle: string;
          Sassy: string;
          Careful: string;
          Quirky: string;
      };
      pokeball: {
          pokeBall: string;
          greatBall: string;
          ultraBall: string;
          rogueBall: string;
          masterBall: string;
          luxuryBall: string;
      };
      pokemon: {
          bulbasaur: string;
          ivysaur: string;
          venusaur: string;
          charmander: string;
          charmeleon: string;
          charizard: string;
          squirtle: string;
          wartortle: string;
          blastoise: string;
          caterpie: string;
          metapod: string;
          butterfree: string;
          weedle: string;
          kakuna: string;
          beedrill: string;
          pidgey: string;
          pidgeotto: string;
          pidgeot: string;
          rattata: string;
          raticate: string;
          spearow: string;
          fearow: string;
          ekans: string;
          arbok: string;
          pikachu: string;
          raichu: string;
          sandshrew: string;
          sandslash: string;
          nidoran_f: string;
          nidorina: string;
          nidoqueen: string;
          nidoran_m: string;
          nidorino: string;
          nidoking: string;
          clefairy: string;
          clefable: string;
          vulpix: string;
          ninetales: string;
          jigglypuff: string;
          wigglytuff: string;
          zubat: string;
          golbat: string;
          oddish: string;
          gloom: string;
          vileplume: string;
          paras: string;
          parasect: string;
          venonat: string;
          venomoth: string;
          diglett: string;
          dugtrio: string;
          meowth: string;
          persian: string;
          psyduck: string;
          golduck: string;
          mankey: string;
          primeape: string;
          growlithe: string;
          arcanine: string;
          poliwag: string;
          poliwhirl: string;
          poliwrath: string;
          abra: string;
          kadabra: string;
          alakazam: string;
          machop: string;
          machoke: string;
          machamp: string;
          bellsprout: string;
          weepinbell: string;
          victreebel: string;
          tentacool: string;
          tentacruel: string;
          geodude: string;
          graveler: string;
          golem: string;
          ponyta: string;
          rapidash: string;
          slowpoke: string;
          slowbro: string;
          magnemite: string;
          magneton: string;
          farfetchd: string;
          doduo: string;
          dodrio: string;
          seel: string;
          dewgong: string;
          grimer: string;
          muk: string;
          shellder: string;
          cloyster: string;
          gastly: string;
          haunter: string;
          gengar: string;
          onix: string;
          drowzee: string;
          hypno: string;
          krabby: string;
          kingler: string;
          voltorb: string;
          electrode: string;
          exeggcute: string;
          exeggutor: string;
          cubone: string;
          marowak: string;
          hitmonlee: string;
          hitmonchan: string;
          lickitung: string;
          koffing: string;
          weezing: string;
          rhyhorn: string;
          rhydon: string;
          chansey: string;
          tangela: string;
          kangaskhan: string;
          horsea: string;
          seadra: string;
          goldeen: string;
          seaking: string;
          staryu: string;
          starmie: string;
          mr_mime: string;
          scyther: string;
          jynx: string;
          electabuzz: string;
          magmar: string;
          pinsir: string;
          tauros: string;
          magikarp: string;
          gyarados: string;
          lapras: string;
          ditto: string;
          eevee: string;
          vaporeon: string;
          jolteon: string;
          flareon: string;
          porygon: string;
          omanyte: string;
          omastar: string;
          kabuto: string;
          kabutops: string;
          aerodactyl: string;
          snorlax: string;
          articuno: string;
          zapdos: string;
          moltres: string;
          dratini: string;
          dragonair: string;
          dragonite: string;
          mewtwo: string;
          mew: string;
          chikorita: string;
          bayleef: string;
          meganium: string;
          cyndaquil: string;
          quilava: string;
          typhlosion: string;
          totodile: string;
          croconaw: string;
          feraligatr: string;
          sentret: string;
          furret: string;
          hoothoot: string;
          noctowl: string;
          ledyba: string;
          ledian: string;
          spinarak: string;
          ariados: string;
          crobat: string;
          chinchou: string;
          lanturn: string;
          pichu: string;
          cleffa: string;
          igglybuff: string;
          togepi: string;
          togetic: string;
          natu: string;
          xatu: string;
          mareep: string;
          flaaffy: string;
          ampharos: string;
          bellossom: string;
          marill: string;
          azumarill: string;
          sudowoodo: string;
          politoed: string;
          hoppip: string;
          skiploom: string;
          jumpluff: string;
          aipom: string;
          sunkern: string;
          sunflora: string;
          yanma: string;
          wooper: string;
          quagsire: string;
          espeon: string;
          umbreon: string;
          murkrow: string;
          slowking: string;
          misdreavus: string;
          unown: string;
          wobbuffet: string;
          girafarig: string;
          pineco: string;
          forretress: string;
          dunsparce: string;
          gligar: string;
          steelix: string;
          snubbull: string;
          granbull: string;
          qwilfish: string;
          scizor: string;
          shuckle: string;
          heracross: string;
          sneasel: string;
          teddiursa: string;
          ursaring: string;
          slugma: string;
          magcargo: string;
          swinub: string;
          piloswine: string;
          corsola: string;
          remoraid: string;
          octillery: string;
          delibird: string;
          mantine: string;
          skarmory: string;
          houndour: string;
          houndoom: string;
          kingdra: string;
          phanpy: string;
          donphan: string;
          porygon2: string;
          stantler: string;
          smeargle: string;
          tyrogue: string;
          hitmontop: string;
          smoochum: string;
          elekid: string;
          magby: string;
          miltank: string;
          blissey: string;
          raikou: string;
          entei: string;
          suicune: string;
          larvitar: string;
          pupitar: string;
          tyranitar: string;
          lugia: string;
          ho_oh: string;
          celebi: string;
          treecko: string;
          grovyle: string;
          sceptile: string;
          torchic: string;
          combusken: string;
          blaziken: string;
          mudkip: string;
          marshtomp: string;
          swampert: string;
          poochyena: string;
          mightyena: string;
          zigzagoon: string;
          linoone: string;
          wurmple: string;
          silcoon: string;
          beautifly: string;
          cascoon: string;
          dustox: string;
          lotad: string;
          lombre: string;
          ludicolo: string;
          seedot: string;
          nuzleaf: string;
          shiftry: string;
          taillow: string;
          swellow: string;
          wingull: string;
          pelipper: string;
          ralts: string;
          kirlia: string;
          gardevoir: string;
          surskit: string;
          masquerain: string;
          shroomish: string;
          breloom: string;
          slakoth: string;
          vigoroth: string;
          slaking: string;
          nincada: string;
          ninjask: string;
          shedinja: string;
          whismur: string;
          loudred: string;
          exploud: string;
          makuhita: string;
          hariyama: string;
          azurill: string;
          nosepass: string;
          skitty: string;
          delcatty: string;
          sableye: string;
          mawile: string;
          aron: string;
          lairon: string;
          aggron: string;
          meditite: string;
          medicham: string;
          electrike: string;
          manectric: string;
          plusle: string;
          minun: string;
          volbeat: string;
          illumise: string;
          roselia: string;
          gulpin: string;
          swalot: string;
          carvanha: string;
          sharpedo: string;
          wailmer: string;
          wailord: string;
          numel: string;
          camerupt: string;
          torkoal: string;
          spoink: string;
          grumpig: string;
          spinda: string;
          trapinch: string;
          vibrava: string;
          flygon: string;
          cacnea: string;
          cacturne: string;
          swablu: string;
          altaria: string;
          zangoose: string;
          seviper: string;
          lunatone: string;
          solrock: string;
          barboach: string;
          whiscash: string;
          corphish: string;
          crawdaunt: string;
          baltoy: string;
          claydol: string;
          lileep: string;
          cradily: string;
          anorith: string;
          armaldo: string;
          feebas: string;
          milotic: string;
          castform: string;
          kecleon: string;
          shuppet: string;
          banette: string;
          duskull: string;
          dusclops: string;
          tropius: string;
          chimecho: string;
          absol: string;
          wynaut: string;
          snorunt: string;
          glalie: string;
          spheal: string;
          sealeo: string;
          walrein: string;
          clamperl: string;
          huntail: string;
          gorebyss: string;
          relicanth: string;
          luvdisc: string;
          bagon: string;
          shelgon: string;
          salamence: string;
          beldum: string;
          metang: string;
          metagross: string;
          regirock: string;
          regice: string;
          registeel: string;
          latias: string;
          latios: string;
          kyogre: string;
          groudon: string;
          rayquaza: string;
          jirachi: string;
          deoxys: string;
          turtwig: string;
          grotle: string;
          torterra: string;
          chimchar: string;
          monferno: string;
          infernape: string;
          piplup: string;
          prinplup: string;
          empoleon: string;
          starly: string;
          staravia: string;
          staraptor: string;
          bidoof: string;
          bibarel: string;
          kricketot: string;
          kricketune: string;
          shinx: string;
          luxio: string;
          luxray: string;
          budew: string;
          roserade: string;
          cranidos: string;
          rampardos: string;
          shieldon: string;
          bastiodon: string;
          burmy: string;
          wormadam: string;
          mothim: string;
          combee: string;
          vespiquen: string;
          pachirisu: string;
          buizel: string;
          floatzel: string;
          cherubi: string;
          cherrim: string;
          shellos: string;
          gastrodon: string;
          ambipom: string;
          drifloon: string;
          drifblim: string;
          buneary: string;
          lopunny: string;
          mismagius: string;
          honchkrow: string;
          glameow: string;
          purugly: string;
          chingling: string;
          stunky: string;
          skuntank: string;
          bronzor: string;
          bronzong: string;
          bonsly: string;
          mime_jr: string;
          happiny: string;
          chatot: string;
          spiritomb: string;
          gible: string;
          gabite: string;
          garchomp: string;
          munchlax: string;
          riolu: string;
          lucario: string;
          hippopotas: string;
          hippowdon: string;
          skorupi: string;
          drapion: string;
          croagunk: string;
          toxicroak: string;
          carnivine: string;
          finneon: string;
          lumineon: string;
          mantyke: string;
          snover: string;
          abomasnow: string;
          weavile: string;
          magnezone: string;
          lickilicky: string;
          rhyperior: string;
          tangrowth: string;
          electivire: string;
          magmortar: string;
          togekiss: string;
          yanmega: string;
          leafeon: string;
          glaceon: string;
          gliscor: string;
          mamoswine: string;
          porygon_z: string;
          gallade: string;
          probopass: string;
          dusknoir: string;
          froslass: string;
          rotom: string;
          uxie: string;
          mesprit: string;
          azelf: string;
          dialga: string;
          palkia: string;
          heatran: string;
          regigigas: string;
          giratina: string;
          cresselia: string;
          phione: string;
          manaphy: string;
          darkrai: string;
          shaymin: string;
          arceus: string;
          victini: string;
          snivy: string;
          servine: string;
          serperior: string;
          tepig: string;
          pignite: string;
          emboar: string;
          oshawott: string;
          dewott: string;
          samurott: string;
          patrat: string;
          watchog: string;
          lillipup: string;
          herdier: string;
          stoutland: string;
          purrloin: string;
          liepard: string;
          pansage: string;
          simisage: string;
          pansear: string;
          simisear: string;
          panpour: string;
          simipour: string;
          munna: string;
          musharna: string;
          pidove: string;
          tranquill: string;
          unfezant: string;
          blitzle: string;
          zebstrika: string;
          roggenrola: string;
          boldore: string;
          gigalith: string;
          woobat: string;
          swoobat: string;
          drilbur: string;
          excadrill: string;
          audino: string;
          timburr: string;
          gurdurr: string;
          conkeldurr: string;
          tympole: string;
          palpitoad: string;
          seismitoad: string;
          throh: string;
          sawk: string;
          sewaddle: string;
          swadloon: string;
          leavanny: string;
          venipede: string;
          whirlipede: string;
          scolipede: string;
          cottonee: string;
          whimsicott: string;
          petilil: string;
          lilligant: string;
          basculin: string;
          sandile: string;
          krokorok: string;
          krookodile: string;
          darumaka: string;
          darmanitan: string;
          maractus: string;
          dwebble: string;
          crustle: string;
          scraggy: string;
          scrafty: string;
          sigilyph: string;
          yamask: string;
          cofagrigus: string;
          tirtouga: string;
          carracosta: string;
          archen: string;
          archeops: string;
          trubbish: string;
          garbodor: string;
          zorua: string;
          zoroark: string;
          minccino: string;
          cinccino: string;
          gothita: string;
          gothorita: string;
          gothitelle: string;
          solosis: string;
          duosion: string;
          reuniclus: string;
          ducklett: string;
          swanna: string;
          vanillite: string;
          vanillish: string;
          vanilluxe: string;
          deerling: string;
          sawsbuck: string;
          emolga: string;
          karrablast: string;
          escavalier: string;
          foongus: string;
          amoonguss: string;
          frillish: string;
          jellicent: string;
          alomomola: string;
          joltik: string;
          galvantula: string;
          ferroseed: string;
          ferrothorn: string;
          klink: string;
          klang: string;
          klinklang: string;
          tynamo: string;
          eelektrik: string;
          eelektross: string;
          elgyem: string;
          beheeyem: string;
          litwick: string;
          lampent: string;
          chandelure: string;
          axew: string;
          fraxure: string;
          haxorus: string;
          cubchoo: string;
          beartic: string;
          cryogonal: string;
          shelmet: string;
          accelgor: string;
          stunfisk: string;
          mienfoo: string;
          mienshao: string;
          druddigon: string;
          golett: string;
          golurk: string;
          pawniard: string;
          bisharp: string;
          bouffalant: string;
          rufflet: string;
          braviary: string;
          vullaby: string;
          mandibuzz: string;
          heatmor: string;
          durant: string;
          deino: string;
          zweilous: string;
          hydreigon: string;
          larvesta: string;
          volcarona: string;
          cobalion: string;
          terrakion: string;
          virizion: string;
          tornadus: string;
          thundurus: string;
          reshiram: string;
          zekrom: string;
          landorus: string;
          kyurem: string;
          keldeo: string;
          meloetta: string;
          genesect: string;
          chespin: string;
          quilladin: string;
          chesnaught: string;
          fennekin: string;
          braixen: string;
          delphox: string;
          froakie: string;
          frogadier: string;
          greninja: string;
          bunnelby: string;
          diggersby: string;
          fletchling: string;
          fletchinder: string;
          talonflame: string;
          scatterbug: string;
          spewpa: string;
          vivillon: string;
          litleo: string;
          pyroar: string;
          flabebe: string;
          floette: string;
          florges: string;
          skiddo: string;
          gogoat: string;
          pancham: string;
          pangoro: string;
          furfrou: string;
          espurr: string;
          meowstic: string;
          honedge: string;
          doublade: string;
          aegislash: string;
          spritzee: string;
          aromatisse: string;
          swirlix: string;
          slurpuff: string;
          inkay: string;
          malamar: string;
          binacle: string;
          barbaracle: string;
          skrelp: string;
          dragalge: string;
          clauncher: string;
          clawitzer: string;
          helioptile: string;
          heliolisk: string;
          tyrunt: string;
          tyrantrum: string;
          amaura: string;
          aurorus: string;
          sylveon: string;
          hawlucha: string;
          dedenne: string;
          carbink: string;
          goomy: string;
          sliggoo: string;
          goodra: string;
          klefki: string;
          phantump: string;
          trevenant: string;
          pumpkaboo: string;
          gourgeist: string;
          bergmite: string;
          avalugg: string;
          noibat: string;
          noivern: string;
          xerneas: string;
          yveltal: string;
          zygarde: string;
          diancie: string;
          hoopa: string;
          volcanion: string;
          rowlet: string;
          dartrix: string;
          decidueye: string;
          litten: string;
          torracat: string;
          incineroar: string;
          popplio: string;
          brionne: string;
          primarina: string;
          pikipek: string;
          trumbeak: string;
          toucannon: string;
          yungoos: string;
          gumshoos: string;
          grubbin: string;
          charjabug: string;
          vikavolt: string;
          crabrawler: string;
          crabominable: string;
          oricorio: string;
          cutiefly: string;
          ribombee: string;
          rockruff: string;
          lycanroc: string;
          wishiwashi: string;
          mareanie: string;
          toxapex: string;
          mudbray: string;
          mudsdale: string;
          dewpider: string;
          araquanid: string;
          fomantis: string;
          lurantis: string;
          morelull: string;
          shiinotic: string;
          salandit: string;
          salazzle: string;
          stufful: string;
          bewear: string;
          bounsweet: string;
          steenee: string;
          tsareena: string;
          comfey: string;
          oranguru: string;
          passimian: string;
          wimpod: string;
          golisopod: string;
          sandygast: string;
          palossand: string;
          pyukumuku: string;
          type_null: string;
          silvally: string;
          minior: string;
          komala: string;
          turtonator: string;
          togedemaru: string;
          mimikyu: string;
          bruxish: string;
          drampa: string;
          dhelmise: string;
          jangmo_o: string;
          hakamo_o: string;
          kommo_o: string;
          tapu_koko: string;
          tapu_lele: string;
          tapu_bulu: string;
          tapu_fini: string;
          cosmog: string;
          cosmoem: string;
          solgaleo: string;
          lunala: string;
          nihilego: string;
          buzzwole: string;
          pheromosa: string;
          xurkitree: string;
          celesteela: string;
          kartana: string;
          guzzlord: string;
          necrozma: string;
          magearna: string;
          marshadow: string;
          poipole: string;
          naganadel: string;
          stakataka: string;
          blacephalon: string;
          zeraora: string;
          meltan: string;
          melmetal: string;
          grookey: string;
          thwackey: string;
          rillaboom: string;
          scorbunny: string;
          raboot: string;
          cinderace: string;
          sobble: string;
          drizzile: string;
          inteleon: string;
          skwovet: string;
          greedent: string;
          rookidee: string;
          corvisquire: string;
          corviknight: string;
          blipbug: string;
          dottler: string;
          orbeetle: string;
          nickit: string;
          thievul: string;
          gossifleur: string;
          eldegoss: string;
          wooloo: string;
          dubwool: string;
          chewtle: string;
          drednaw: string;
          yamper: string;
          boltund: string;
          rolycoly: string;
          carkol: string;
          coalossal: string;
          applin: string;
          flapple: string;
          appletun: string;
          silicobra: string;
          sandaconda: string;
          cramorant: string;
          arrokuda: string;
          barraskewda: string;
          toxel: string;
          toxtricity: string;
          sizzlipede: string;
          centiskorch: string;
          clobbopus: string;
          grapploct: string;
          sinistea: string;
          polteageist: string;
          hatenna: string;
          hattrem: string;
          hatterene: string;
          impidimp: string;
          morgrem: string;
          grimmsnarl: string;
          obstagoon: string;
          perrserker: string;
          cursola: string;
          sirfetchd: string;
          mr_rime: string;
          runerigus: string;
          milcery: string;
          alcremie: string;
          falinks: string;
          pincurchin: string;
          snom: string;
          frosmoth: string;
          stonjourner: string;
          eiscue: string;
          indeedee: string;
          morpeko: string;
          cufant: string;
          copperajah: string;
          dracozolt: string;
          arctozolt: string;
          dracovish: string;
          arctovish: string;
          duraludon: string;
          dreepy: string;
          drakloak: string;
          dragapult: string;
          zacian: string;
          zamazenta: string;
          eternatus: string;
          kubfu: string;
          urshifu: string;
          zarude: string;
          regieleki: string;
          regidrago: string;
          glastrier: string;
          spectrier: string;
          calyrex: string;
          wyrdeer: string;
          kleavor: string;
          ursaluna: string;
          basculegion: string;
          sneasler: string;
          overqwil: string;
          enamorus: string;
          sprigatito: string;
          floragato: string;
          meowscarada: string;
          fuecoco: string;
          crocalor: string;
          skeledirge: string;
          quaxly: string;
          quaxwell: string;
          quaquaval: string;
          lechonk: string;
          oinkologne: string;
          tarountula: string;
          spidops: string;
          nymble: string;
          lokix: string;
          pawmi: string;
          pawmo: string;
          pawmot: string;
          tandemaus: string;
          maushold: string;
          fidough: string;
          dachsbun: string;
          smoliv: string;
          dolliv: string;
          arboliva: string;
          squawkabilly: string;
          nacli: string;
          naclstack: string;
          garganacl: string;
          charcadet: string;
          armarouge: string;
          ceruledge: string;
          tadbulb: string;
          bellibolt: string;
          wattrel: string;
          kilowattrel: string;
          maschiff: string;
          mabosstiff: string;
          shroodle: string;
          grafaiai: string;
          bramblin: string;
          brambleghast: string;
          toedscool: string;
          toedscruel: string;
          klawf: string;
          capsakid: string;
          scovillain: string;
          rellor: string;
          rabsca: string;
          flittle: string;
          espathra: string;
          tinkatink: string;
          tinkatuff: string;
          tinkaton: string;
          wiglett: string;
          wugtrio: string;
          bombirdier: string;
          finizen: string;
          palafin: string;
          varoom: string;
          revavroom: string;
          cyclizar: string;
          orthworm: string;
          glimmet: string;
          glimmora: string;
          greavard: string;
          houndstone: string;
          flamigo: string;
          cetoddle: string;
          cetitan: string;
          veluza: string;
          dondozo: string;
          tatsugiri: string;
          annihilape: string;
          clodsire: string;
          farigiraf: string;
          dudunsparce: string;
          kingambit: string;
          great_tusk: string;
          scream_tail: string;
          brute_bonnet: string;
          flutter_mane: string;
          slither_wing: string;
          sandy_shocks: string;
          iron_treads: string;
          iron_bundle: string;
          iron_hands: string;
          iron_jugulis: string;
          iron_moth: string;
          iron_thorns: string;
          frigibax: string;
          arctibax: string;
          baxcalibur: string;
          gimmighoul: string;
          gholdengo: string;
          wo_chien: string;
          chien_pao: string;
          ting_lu: string;
          chi_yu: string;
          roaring_moon: string;
          iron_valiant: string;
          koraidon: string;
          miraidon: string;
          walking_wake: string;
          iron_leaves: string;
          dipplin: string;
          poltchageist: string;
          sinistcha: string;
          okidogi: string;
          munkidori: string;
          fezandipiti: string;
          ogerpon: string;
          archaludon: string;
          hydrapple: string;
          gouging_fire: string;
          raging_bolt: string;
          iron_boulder: string;
          iron_crown: string;
          terapagos: string;
          pecharunt: string;
          alola_rattata: string;
          alola_raticate: string;
          alola_raichu: string;
          alola_sandshrew: string;
          alola_sandslash: string;
          alola_vulpix: string;
          alola_ninetales: string;
          alola_diglett: string;
          alola_dugtrio: string;
          alola_meowth: string;
          alola_persian: string;
          alola_geodude: string;
          alola_graveler: string;
          alola_golem: string;
          alola_grimer: string;
          alola_muk: string;
          alola_exeggutor: string;
          alola_marowak: string;
          eternal_floette: string;
          galar_meowth: string;
          galar_ponyta: string;
          galar_rapidash: string;
          galar_slowpoke: string;
          galar_slowbro: string;
          galar_farfetchd: string;
          galar_weezing: string;
          galar_mr_mime: string;
          galar_articuno: string;
          galar_zapdos: string;
          galar_moltres: string;
          galar_slowking: string;
          galar_corsola: string;
          galar_zigzagoon: string;
          galar_linoone: string;
          galar_darumaka: string;
          galar_darmanitan: string;
          galar_yamask: string;
          galar_stunfisk: string;
          hisui_growlithe: string;
          hisui_arcanine: string;
          hisui_voltorb: string;
          hisui_electrode: string;
          hisui_typhlosion: string;
          hisui_qwilfish: string;
          hisui_sneasel: string;
          hisui_samurott: string;
          hisui_lilligant: string;
          hisui_zorua: string;
          hisui_zoroark: string;
          hisui_braviary: string;
          hisui_sliggoo: string;
          hisui_goodra: string;
          hisui_avalugg: string;
          hisui_decidueye: string;
          paldea_tauros: string;
          paldea_wooper: string;
          bloodmoon_ursaluna: string;
      };
      pokemonForm: {
          meloettaPirouette: string;
      };
      pokemonInfo: {
          Stat: {
              HP: string;
              HPshortened: string;
              ATK: string;
              ATKshortened: string;
              DEF: string;
              DEFshortened: string;
              SPATK: string;
              SPATKshortened: string;
              SPDEF: string;
              SPDEFshortened: string;
              SPD: string;
              SPDshortened: string;
          };
          Type: {
              UNKNOWN: string;
              NORMAL: string;
              FIGHTING: string;
              FLYING: string;
              POISON: string;
              GROUND: string;
              ROCK: string;
              BUG: string;
              GHOST: string;
              STEEL: string;
              FIRE: string;
              WATER: string;
              GRASS: string;
              ELECTRIC: string;
              PSYCHIC: string;
              ICE: string;
              DRAGON: string;
              DARK: string;
              FAIRY: string;
              STELLAR: string;
          };
      };
      pokemonInfoContainer: {
          moveset: string;
          gender: string;
          ability: string;
          nature: string;
      };
      pokemonSummary: {};
      saveSlotSelectUiHandler: {
          overwriteData: string;
          loading: string;
          wave: string;
          lv: string;
          empty: string;
      };
      settings: {
          boy: string;
          girl: string;
          general: string;
          display: string;
          audio: string;
          gamepad: string;
          keyboard: string;
          gameSpeed: string;
          hpBarSpeed: string;
          expGainsSpeed: string;
          expPartyDisplay: string;
          skipSeenDialogues: string;
          battleStyle: string;
          enableRetries: string;
          hideIvs: string;
          tutorials: string;
          touchControls: string;
          vibrations: string;
          normal: string;
          fast: string;
          faster: string;
          skip: string;
          levelUpNotifications: string;
          on: string;
          off: string;
          switch: string;
          set: string;
          auto: string;
          disabled: string;
          language: string;
          change: string;
          uiTheme: string;
          default: string;
          legacy: string;
          windowType: string;
          moneyFormat: string;
          damageNumbers: string;
          simple: string;
          fancy: string;
          abbreviated: string;
          moveAnimations: string;
          showStatsOnLevelUp: string;
          candyUpgradeNotification: string;
          passivesOnly: string;
          candyUpgradeDisplay: string;
          icon: string;
          animation: string;
          moveInfo: string;
          showMovesetFlyout: string;
          showArenaFlyout: string;
          showTimeOfDayWidget: string;
          timeOfDayAnimation: string;
          bounce: string;
          timeOfDay_back: string;
          spriteSet: string;
          consistent: string;
          mixedAnimated: string;
          fusionPaletteSwaps: string;
          playerGender: string;
          typeHints: string;
          masterVolume: string;
          bgmVolume: string;
          fieldVolume: string;
          seVolume: string;
          musicPreference: string;
          mixed: string;
          gamepadPleasePlug: string;
          delete: string;
          keyboardPleasePress: string;
          reset: string;
          requireReload: string;
          action: string;
          back: string;
          pressToBind: string;
          pressButton: string;
          buttonUp: string;
          buttonDown: string;
          buttonLeft: string;
          buttonRight: string;
          buttonAction: string;
          buttonMenu: string;
          buttonSubmit: string;
          buttonCancel: string;
          buttonStats: string;
          buttonCycleForm: string;
          buttonCycleShiny: string;
          buttonCycleGender: string;
          buttonCycleAbility: string;
          buttonCycleNature: string;
          buttonCycleVariant: string;
          buttonSpeedUp: string;
          buttonSlowDown: string;
          alt: string;
          mute: string;
          controller: string;
          gamepadSupport: string;
          moveTouchControls: string;
      };
      splashMessages: {
          battlesWon: string;
          joinTheDiscord: string;
          infiniteLevels: string;
          everythingStacks: string;
          optionalSaveScumming: string;
          biomes: string;
          openSource: string;
          playWithSpeed: string;
          liveBugTesting: string;
          heavyInfluence: string;
          pokemonRiskAndPokemonRain: string;
          nowWithMoreSalt: string;
          infiniteFusionAtHome: string;
          brokenEggMoves: string;
          magnificent: string;
          mubstitute: string;
          thatsCrazy: string;
          oranceJuice: string;
          questionableBalancing: string;
          coolShaders: string;
          aiFree: string;
          suddenDifficultySpikes: string;
          basedOnAnUnfinishedFlashGame: string;
          moreAddictiveThanIntended: string;
          mostlyConsistentSeeds: string;
          achievementPointsDontDoAnything: string;
          youDoNotStartAtLevel: string;
          dontTalkAboutTheManaphyEggIncident: string;
          alsoTryPokengine: string;
          alsoTryEmeraldRogue: string;
          alsoTryRadicalRed: string;
          eeveeExpo: string;
          ynoproject: string;
      };
      starterSelectUiHandler: {
          confirmStartTeam: string;
          invalidParty: string;
          gen1: string;
          gen2: string;
          gen3: string;
          gen4: string;
          gen5: string;
          gen6: string;
          gen7: string;
          gen8: string;
          gen9: string;
          growthRate: string;
          ability: string;
          passive: string;
          nature: string;
          eggMoves: string;
          start: string;
          addToParty: string;
          removeFromParty: string;
          toggleIVs: string;
          manageMoves: string;
          manageNature: string;
          useCandies: string;
          selectNature: string;
          selectMoveSwapOut: string;
          selectMoveSwapWith: string;
          sameSpeciesEgg: string;
          unlockPassive: string;
          reduceCost: string;
          cycleShiny: string;
          cycleForm: string;
          cycleGender: string;
          cycleAbility: string;
          cycleNature: string;
          cycleVariant: string;
          goFilter: string;
          enablePassive: string;
          disablePassive: string;
          locked: string;
          disabled: string;
          uncaught: string;
      };
      statusEffect: {};
      terrain: {
          misty: string;
          mistyStartMessage: string;
          mistyClearMessage: string;
          mistyBlockMessage: string;
          electric: string;
          electricStartMessage: string;
          electricClearMessage: string;
          grassy: string;
          grassyStartMessage: string;
          grassyClearMessage: string;
          psychic: string;
          psychicStartMessage: string;
          psychicClearMessage: string;
          defaultBlockMessage: string;
      };
      titles: {
          elite_four: string;
          elite_four_female: string;
          gym_leader: string;
          gym_leader_female: string;
          gym_leader_double: string;
          champion: string;
          champion_female: string;
          champion_double: string;
          rival: string;
          professor: string;
          frontier_brain: string;
      };
      trainerClasses: {
          ace_trainer: string;
          ace_trainer_female: string;
          ace_duo: string;
          artist: string;
          artist_female: string;
          backers: string;
          backpacker: string;
          backpacker_female: string;
          backpackers: string;
          baker: string;
          battle_girl: string;
          beauty: string;
          beginners: string;
          biker: string;
          black_belt: string;
          breeder: string;
          breeder_female: string;
          breeders: string;
          clerk: string;
          clerk_female: string;
          colleagues: string;
          crush_kin: string;
          cyclist: string;
          cyclist_female: string;
          cyclists: string;
          dancer: string;
          dancer_female: string;
          depot_agent: string;
          doctor: string;
          doctor_female: string;
          firebreather: string;
          fisherman: string;
          fisherman_female: string;
          gentleman: string;
          guitarist: string;
          guitarist_female: string;
          harlequin: string;
          hiker: string;
          hooligans: string;
          hoopster: string;
          infielder: string;
          janitor: string;
          lady: string;
          lass: string;
          linebacker: string;
          maid: string;
          madame: string;
          medical_team: string;
          musician: string;
          hex_maniac: string;
          nurse: string;
          nursery_aide: string;
          officer: string;
          parasol_lady: string;
          pilot: string;
          pokéfan: string;
          pokéfan_female: string;
          pokéfan_family: string;
          preschooler: string;
          preschooler_female: string;
          preschoolers: string;
          psychic: string;
          psychic_female: string;
          psychics: string;
          pokémon_ranger: string;
          pokémon_ranger_female: string;
          pokémon_rangers: string;
          ranger: string;
          restaurant_staff: string;
          rich: string;
          rich_female: string;
          rich_boy: string;
          rich_couple: string;
          rich_kid: string;
          rich_kid_female: string;
          rich_kids: string;
          roughneck: string;
          sailor: string;
          scientist: string;
          scientist_female: string;
          scientists: string;
          smasher: string;
          snow_worker: string;
          snow_worker_female: string;
          striker: string;
          school_kid: string;
          school_kid_female: string;
          school_kids: string;
          swimmer: string;
          swimmer_female: string;
          swimmers: string;
          twins: string;
          veteran: string;
          veteran_female: string;
          veteran_duo: string;
          waiter: string;
          waitress: string;
          worker: string;
          worker_female: string;
          workers: string;
          youngster: string;
          rocket_grunts: string;
          magma_grunt: string;
          magma_grunt_female: string;
          magma_grunts: string;
          aqua_grunt: string;
          aqua_grunt_female: string;
          aqua_grunts: string;
          galactic_grunt: string;
          galactic_grunt_female: string;
          galactic_grunts: string;
          plasma_grunt: string;
          plasma_grunt_female: string;
          plasma_grunts: string;
          flare_grunt: string;
          flare_grunt_female: string;
          flare_grunts: string;
      };
      trainerNames: {
          brock: string;
          misty: string;
          lt_surge: string;
          erika: string;
          janine: string;
          sabrina: string;
          blaine: string;
          giovanni: string;
          falkner: string;
          bugsy: string;
          whitney: string;
          morty: string;
          chuck: string;
          jasmine: string;
          pryce: string;
          clair: string;
          roxanne: string;
          brawly: string;
          wattson: string;
          flannery: string;
          norman: string;
          winona: string;
          tate: string;
          liza: string;
          juan: string;
          roark: string;
          gardenia: string;
          maylene: string;
          crasher_wake: string;
          fantina: string;
          byron: string;
          candice: string;
          volkner: string;
          cilan: string;
          chili: string;
          cress: string;
          cheren: string;
          lenora: string;
          roxie: string;
          burgh: string;
          elesa: string;
          clay: string;
          skyla: string;
          brycen: string;
          drayden: string;
          marlon: string;
          viola: string;
          grant: string;
          korrina: string;
          ramos: string;
          clemont: string;
          valerie: string;
          olympia: string;
          wulfric: string;
          milo: string;
          nessa: string;
          kabu: string;
          bea: string;
          allister: string;
          opal: string;
          bede: string;
          gordie: string;
          melony: string;
          piers: string;
          marnie: string;
          raihan: string;
          katy: string;
          brassius: string;
          iono: string;
          kofu: string;
          larry: string;
          ryme: string;
          tulip: string;
          grusha: string;
          lorelei: string;
          bruno: string;
          agatha: string;
          lance: string;
          will: string;
          koga: string;
          karen: string;
          sidney: string;
          phoebe: string;
          glacia: string;
          drake: string;
          aaron: string;
          bertha: string;
          flint: string;
          lucian: string;
          shauntal: string;
          marshal: string;
          grimsley: string;
          caitlin: string;
          malva: string;
          siebold: string;
          wikstrom: string;
          drasna: string;
          hala: string;
          molayne: string;
          olivia: string;
          acerola: string;
          kahili: string;
          rika: string;
          poppy: string;
          hassel: string;
          crispin: string;
          amarys: string;
          lacey: string;
          drayton: string;
          blue: string;
          red: string;
          steven: string;
          wallace: string;
          cynthia: string;
          alder: string;
          iris: string;
          diantha: string;
          hau: string;
          leon: string;
          geeta: string;
          nemona: string;
          kieran: string;
          rival: string;
          rival_female: string;
          blue_red_double: string;
          red_blue_double: string;
          tate_liza_double: string;
          liza_tate_double: string;
          steven_wallace_double: string;
          wallace_steven_double: string;
          alder_iris_double: string;
          iris_alder_double: string;
          marnie_piers_double: string;
          piers_marnie_double: string;
      };
      tutorial: {
          intro: string;
          accessMenu: string;
          menu: string;
          starterSelect: string;
          pokerus: string;
          statChange: string;
          selectItem: string;
          eggGacha: string;
      };
      voucher: {
          vouchers: string;
          eggVoucher: string;
          eggVoucherPlus: string;
          eggVoucherPremium: string;
          eggVoucherGold: string;
          locked: string;
          defeatTrainer: string;
      };
      weather: {
          sunnyStartMessage: string;
          sunnyLapseMessage: string;
          sunnyClearMessage: string;
          rainStartMessage: string;
          rainLapseMessage: string;
          rainClearMessage: string;
          sandstormStartMessage: string;
          sandstormLapseMessage: string;
          sandstormClearMessage: string;
          sandstormDamageMessage: string;
          hailStartMessage: string;
          hailLapseMessage: string;
          hailClearMessage: string;
          hailDamageMessage: string;
          snowStartMessage: string;
          snowLapseMessage: string;
          snowClearMessage: string;
          fogStartMessage: string;
          fogLapseMessage: string;
          fogClearMessage: string;
          heavyRainStartMessage: string;
          heavyRainLapseMessage: string;
          heavyRainClearMessage: string;
          harshSunStartMessage: string;
          harshSunLapseMessage: string;
          harshSunClearMessage: string;
          strongWindsStartMessage: string;
          strongWindsLapseMessage: string;
          strongWindsClearMessage: string;
      };
      partyUiHandler: {
          SEND_OUT: string;
          SUMMARY: string;
          CANCEL: string;
          RELEASE: string;
          APPLY: string;
          TEACH: string;
      };
      modifierSelectUiHandler: {};
      moveTriggers: {
          hitWithRecoil: string;
          cutHpPowerUpMove: string;
          absorbedElectricity: string;
          switchedStatChanges: string;
          switchedTwoStatChanges: string;
          switchedStat: string;
          sharedGuard: string;
          sharedPower: string;
          goingAllOutForAttack: string;
          regainedHealth: string;
          keptGoingAndCrashed: string;
          fled: string;
          cannotBeSwitchedOut: string;
          swappedAbilitiesWithTarget: string;
          coinsScatteredEverywhere: string;
          attackedByItem: string;
          whippedUpAWhirlwind: string;
          flewUpHigh: string;
          tookInSunlight: string;
          dugAHole: string;
          loweredItsHead: string;
          isGlowing: string;
          bellChimed: string;
          foresawAnAttack: string;
          isTighteningFocus: string;
          hidUnderwater: string;
          soothingAromaWaftedThroughArea: string;
          sprangUp: string;
          choseDoomDesireAsDestiny: string;
          vanishedInstantly: string;
          tookTargetIntoSky: string;
          becameCloakedInFreezingLight: string;
          becameCloakedInFreezingAir: string;
          isChargingPower: string;
          burnedItselfOut: string;
          startedHeatingUpBeak: string;
          setUpShellTrap: string;
          isOverflowingWithSpacePower: string;
          usedUpAllElectricity: string;
          stoleItem: string;
          incineratedItem: string;
          knockedOffItem: string;
          tookMoveAttack: string;
          cutOwnHpAndMaximizedStat: string;
          copiedStatChanges: string;
          magnitudeMessage: string;
          tookAimAtTarget: string;
          transformedIntoType: string;
          copiedMove: string;
          sketchedMove: string;
          acquiredAbility: string;
          copiedTargetAbility: string;
          transformedIntoTarget: string;
          tryingToTakeFoeDown: string;
          addType: string;
          cannotUseMove: string;
          healHp: string;
          sacrificialFullRestore: string;
          invertStats: string;
          resetStats: string;
          statEliminated: string;
          faintCountdown: string;
          copyType: string;
          suppressAbilities: string;
          revivalBlessing: string;
          swapArenaTags: string;
          exposedMove: string;
          safeguard: string;
      };
      runHistory: {
          victory: string;
          defeatedWild: string;
          defeatedTrainer: string;
          defeatedTrainerDouble: string;
          defeatedRival: string;
          defeated: string;
          defeatedWild_female: string;
          defeatedTrainer_female: string;
          defeatedTrainerDouble_female: string;
          defeatedRival_female: string;
          defeated_female: string;
          luck: string;
          score: string;
          mode: string;
          challengeRules: string;
          challengeMonoGen1: string;
          challengeMonoGen2: string;
          challengeMonoGen3: string;
          challengeMonoGen4: string;
          challengeMonoGen5: string;
          challengeMonoGen6: string;
          challengeMonoGen7: string;
          challengeMonoGen8: string;
          challengeMonoGen9: string;
          playerItems: string;
          personalBest: string;
          SPDshortened: string;
          runInfo: string;
          money: string;
          runLength: string;
          viewHeldItems: string;
          hallofFameText: string;
          hallofFameText_female: string;
          viewHallOfFame: string;
          viewEndingSplash: string;
      };
  };
  
}

declare namespace PokeRogue {
  declare let game: any;

}

declare namespace PokeRogue {
  //import Pokemon from "./field/pokemon";
  /**
   * Retrieves the Pokemon's name, potentially with an affix indicating its role (wild or foe) in the current battle context, translated
   * @param pokemon {@linkcode Pokemon} name and battle context will be retrieved from this instance
   * @returns {string} ex: "Wild Gengar", "Ectoplasma sauvage"
   */
  export declare function getPokemonNameWithAffix(pokemon: PokeRogue.field.Pokemon | undefined): string;
  
}

declare namespace PokeRogue.modifier {
  export declare enum ModifierTier {
      COMMON = 0,
      GREAT = 1,
      ULTRA = 2,
      ROGUE = 3,
      MASTER = 4,
      LUXURY = 5
  }
  
}

declare namespace PokeRogue.modifier {
  //import * as ModifierTypes from "./modifier-type";
  //import BattleScene from "../battle-scene";
  //import { PokeballType } from "../data/pokeball";
  //import Pokemon, { PlayerPokemon } from "../field/pokemon";
  //import { Type } from "../data/type";
  //import { BerryType } from "#enums/berry-type";
  //import { StatusEffect } from "../data/status-effect";
  //import { VoucherType } from "../system/voucher";
  //import { FormChangeItem } from "../data/pokemon-forms";
  //import { Nature } from "#app/data/nature";
  //import { ModifierType } from "./modifier-type";
  //import { Species } from "#enums/species";
  //import { Stat, type PermanentStat, type TempBattleStat } from "#app/enums/stat";
  export type ModifierPredicate = (modifier: Modifier) => boolean;
  export declare const modifierSortFunc: (a: Modifier, b: Modifier) => number;
  export declare class ModifierBar extends Phaser.GameObjects.Container {
      public player;
      public modifierCache;
      constructor(scene: PokeRogue.BattleScene, enemy?: boolean);
      /**
       * Method to update content displayed in {@linkcode ModifierBar}
       * @param {PersistentModifier[]} modifiers - The list of modifiers to be displayed in the {@linkcode ModifierBar}
       * @param {boolean} hideHeldItems - If set to "true", only modifiers not assigned to a Pokémon are displayed
       */
      updateModifiers(modifiers: PersistentModifier[], hideHeldItems?: boolean): void;
      updateModifierOverflowVisibility(ignoreLimit: boolean): void;
      setModifierIconPosition(icon: Phaser.GameObjects.Container, modifierCount: integer): void;
  }
  export declare abstract class Modifier {
      type: PokeRogue.modifier.ModifierType;
      constructor(type: PokeRogue.modifier.ModifierType);
      match(_modifier: Modifier): boolean;
      shouldApply(_args: any[]): boolean;
      abstract apply(args: any[]): boolean | Promise<boolean>;
  }
  export declare abstract class PersistentModifier extends Modifier {
      stackCount: integer;
      virtualStackCount: integer;
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      add(modifiers: PersistentModifier[], virtual: boolean, scene: PokeRogue.BattleScene): boolean;
      abstract clone(): PersistentModifier;
      getArgs(): any[];
      incrementStack(scene: PokeRogue.BattleScene, amount: integer, virtual: boolean): boolean;
      getStackCount(): integer;
      abstract getMaxStackCount(scene: PokeRogue.BattleScene, forThreshold?: boolean): integer;
      isIconVisible(scene: PokeRogue.BattleScene): boolean;
      getIcon(scene: PokeRogue.BattleScene, forSummary?: boolean): Phaser.GameObjects.Container;
      getIconStackText(scene: PokeRogue.BattleScene, virtual?: boolean): Phaser.GameObjects.BitmapText | null;
  }
  export declare abstract class ConsumableModifier extends Modifier {
      constructor(type: PokeRogue.modifier.ModifierType);
      add(_modifiers: Modifier[]): boolean;
      shouldApply(args: any[]): boolean;
  }
  export declare class AddPokeballModifier extends ConsumableModifier {
      public pokeballType;
      public count;
      constructor(type: PokeRogue.modifier.ModifierType, pokeballType: PokeRogue.data.PokeballType, count: integer);
      apply(args: any[]): boolean;
  }
  export declare class AddVoucherModifier extends ConsumableModifier {
      public voucherType;
      public count;
      constructor(type: PokeRogue.modifier.ModifierType, voucherType: PokeRogue.system.VoucherType, count: integer);
      apply(args: any[]): boolean;
  }
  /**
   * Modifier used for party-wide or passive items that start an initial
   * {@linkcode battleCount} equal to {@linkcode maxBattles} that, for every
   * battle, decrements. Typically, when {@linkcode battleCount} reaches 0, the
   * modifier will be removed. If a modifier of the same type is to be added, it
   * will reset {@linkcode battleCount} back to {@linkcode maxBattles} of the
   * existing modifier instead of adding that modifier directly.
   * @extends PersistentModifier
   * @abstract
   * @see {@linkcode add}
   */
  export declare abstract class LapsingPersistentModifier extends PersistentModifier {
      /** The maximum amount of battles the modifier will exist for */
      public maxBattles;
      /** The current amount of battles the modifier will exist for */
      public battleCount;
      constructor(type: ModifierTypes.ModifierType, maxBattles: number, battleCount?: number, stackCount?: integer);
      /**
       * Goes through existing modifiers for any that match the selected modifier,
       * which will then either add it to the existing modifiers if none were found
       * or, if one was found, it will refresh {@linkcode battleCount}.
       * @param modifiers {@linkcode PersistentModifier} array of the player's modifiers
       * @param _virtual N/A
       * @param _scene N/A
       * @returns true if the modifier was successfully added or applied, false otherwise
       */
      add(modifiers: PersistentModifier[], _virtual: boolean, scene: PokeRogue.BattleScene): boolean;
      lapse(_args: any[]): boolean;
      getIcon(scene: PokeRogue.BattleScene): Phaser.GameObjects.Container;
      getBattleCount(): number;
      resetBattleCount(): void;
      getMaxBattles(): number;
      getArgs(): any[];
      getMaxStackCount(_scene: PokeRogue.BattleScene, _forThreshold?: boolean): number;
  }
  /**
   * Modifier used for passive items, specifically lures, that
   * temporarily increases the chance of a double battle.
   * @extends LapsingPersistentModifier
   * @see {@linkcode apply}
   */
  export declare class DoubleBattleChanceBoosterModifier extends LapsingPersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, maxBattles: number, battleCount?: number, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): DoubleBattleChanceBoosterModifier;
      /**
       * Modifies the chance of a double battle occurring
       * @param args [0] {@linkcode Utils.NumberHolder} for double battle chance
       * @returns true if the modifier was applied
       */
      apply(args: any[]): boolean;
  }
  /**
   * Modifier used for party-wide items, specifically the X items, that
   * temporarily increases the stat stage multiplier of the corresponding
   * {@linkcode TempBattleStat}.
   * @extends LapsingPersistentModifier
   * @see {@linkcode apply}
   */
  export declare class TempStatStageBoosterModifier extends LapsingPersistentModifier {
      /** The stat whose stat stage multiplier will be temporarily increased */
      public stat;
      /** The amount by which the stat stage itself or its multiplier will be increased by */
      public boost;
      constructor(type: PokeRogue.modifier.ModifierType, stat: TempBattleStat, maxBattles: number, battleCount?: number, stackCount?: number);
      match(modifier: Modifier): boolean;
      clone(): TempStatStageBoosterModifier;
      getArgs(): any[];
      /**
       * Checks if {@linkcode args} contains the necessary elements and if the
       * incoming stat is matches {@linkcode stat}.
       * @param args [0] {@linkcode TempBattleStat} being checked at the time
       *             [1] {@linkcode Utils.NumberHolder} N/A
       * @returns true if the modifier can be applied, false otherwise
       */
      shouldApply(args: any[]): boolean;
      /**
       * Increases the incoming stat stage matching {@linkcode stat} by {@linkcode boost}.
       * @param args [0] {@linkcode TempBattleStat} N/A
       *             [1] {@linkcode Utils.NumberHolder} that holds the resulting value of the stat stage multiplier
       */
      apply(args: any[]): boolean;
  }
  /**
   * Modifier used for party-wide items, namely Dire Hit, that
   * temporarily increments the critical-hit stage
   * @extends LapsingPersistentModifier
   * @see {@linkcode apply}
   */
  export declare class TempCritBoosterModifier extends LapsingPersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, maxBattles: number, battleCount?: number, stackCount?: number);
      clone(): TempCritBoosterModifier;
      match(modifier: Modifier): boolean;
      /**
       * Checks if {@linkcode args} contains the necessary elements.
       * @param args [1] {@linkcode Utils.NumberHolder} N/A
       * @returns true if the critical-hit stage boost applies successfully
       */
      shouldApply(args: any[]): boolean;
      /**
       * Increases the current critical-hit stage value by 1.
       * @param args [0] {@linkcode Utils.IntegerHolder} that holds the resulting critical-hit level
       * @returns true if the critical-hit stage boost applies successfully
       */
      apply(args: any[]): boolean;
  }
  export declare class MapModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      clone(): MapModifier;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class MegaEvolutionAccessModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      clone(): MegaEvolutionAccessModifier;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class GigantamaxAccessModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      clone(): GigantamaxAccessModifier;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class TerastallizeAccessModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      clone(): TerastallizeAccessModifier;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare abstract class PokemonHeldItemModifier extends PersistentModifier {
      pokemonId: integer;
      readonly isTransferrable: boolean;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      abstract matchType(_modifier: Modifier): boolean;
      match(modifier: Modifier): boolean;
      getArgs(): any[];
      shouldApply(args: any[]): boolean;
      isIconVisible(scene: PokeRogue.BattleScene): boolean;
      getIcon(scene: PokeRogue.BattleScene, forSummary?: boolean): Phaser.GameObjects.Container;
      getPokemon(scene: PokeRogue.BattleScene): Pokemon | undefined;
      getScoreMultiplier(): number;
      getSecondaryChanceMultiplier(pokemon: PokeRogue.field.Pokemon): integer;
      getMaxStackCount(scene: PokeRogue.BattleScene, forThreshold?: boolean): integer;
      abstract getMaxHeldItemCount(pokemon?: Pokemon): integer;
  }
  export declare abstract class LapsingPokemonHeldItemModifier extends PokemonHeldItemModifier {
      protected battlesLeft: integer;
      readonly isTransferrable: boolean;
      constructor(type: ModifierTypes.ModifierType, pokemonId: integer, battlesLeft?: integer, stackCount?: integer);
      lapse(args: any[]): boolean;
      getIcon(scene: PokeRogue.BattleScene, forSummary?: boolean): Phaser.GameObjects.Container;
      getBattlesLeft(): integer;
      getMaxStackCount(scene: PokeRogue.BattleScene, forThreshold?: boolean): number;
  }
  export declare class TerastallizeModifier extends LapsingPokemonHeldItemModifier {
      teraType: PokeRogue.data.Type;
      readonly isTransferrable: boolean;
      constructor(type: ModifierTypes.TerastallizeModifierType, pokemonId: integer, teraType: PokeRogue.data.Type, battlesLeft?: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): TerastallizeModifier;
      getArgs(): any[];
      apply(args: any[]): boolean;
      lapse(args: any[]): boolean;
      getScoreMultiplier(): number;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  /**
   * Modifier used for held items, specifically vitamins like Carbos, Hp Up, etc., that
   * increase the value of a given {@linkcode PermanentStat}.
   * @extends LapsingPersistentModifier
   * @see {@linkcode apply}
   */
  export declare class BaseStatModifier extends PokemonHeldItemModifier {
      protected stat: PermanentStat;
      readonly isTransferrable: boolean;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stat: PermanentStat, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): PersistentModifier;
      getArgs(): any[];
      shouldApply(args: any[]): boolean;
      apply(args: any[]): boolean;
      getScoreMultiplier(): number;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  /**
   * Modifier used for held items that apply {@linkcode Stat} boost(s)
   * using a multiplier.
   * @extends PokemonHeldItemModifier
   * @see {@linkcode apply}
   */
  export declare class StatBoosterModifier extends PokemonHeldItemModifier {
      /** The stats that the held item boosts */
      protected stats: PokeRogue.enums.Stat[];
      /** The multiplier used to increase the relevant stat(s) */
      protected multiplier: number;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stats: PokeRogue.enums.Stat[], multiplier: number, stackCount?: integer);
      clone(): StatBoosterModifier;
      getArgs(): any[];
      matchType(modifier: Modifier): boolean;
      /**
       * Checks if the incoming stat is listed in {@linkcode stats}
       * @param args [0] {@linkcode Pokemon} N/A
       *             [1] {@linkcode Stat} being checked at the time
       *             [2] {@linkcode Utils.NumberHolder} N/A
       * @returns true if the stat could be boosted, false otherwise
       */
      shouldApply(args: any[]): boolean;
      /**
       * Boosts the incoming stat by a {@linkcode multiplier} if the stat is listed
       * in {@linkcode stats}.
       * @param args [0] {@linkcode Pokemon} N/A
       *             [1] {@linkcode Stat} N/A
       *             [2] {@linkcode Utils.NumberHolder} that holds the resulting value of the stat
       * @returns true if the stat boost applies successfully, false otherwise
       * @see shouldApply
       */
      apply(args: any[]): boolean;
      getMaxHeldItemCount(_pokemon: PokeRogue.field.Pokemon): number;
  }
  /**
   * Modifier used for held items, specifically Eviolite, that apply
   * {@linkcode Stat} boost(s) using a multiplier if the holder can evolve.
   * @extends StatBoosterModifier
   * @see {@linkcode apply}
   */
  export declare class EvolutionStatBoosterModifier extends StatBoosterModifier {
      clone(): EvolutionStatBoosterModifier;
      matchType(modifier: Modifier): boolean;
      /**
       * Boosts the incoming stat value by a {@linkcode multiplier} if the holder
       * can evolve. Note that, if the holder is a fusion, they will receive
       * only half of the boost if either of the fused members are fully
       * evolved. However, if they are both unevolved, the full boost
       * will apply.
       * @param args [0] {@linkcode Pokemon} that holds the held item
       *             [1] {@linkcode Stat} N/A
       *             [2] {@linkcode Utils.NumberHolder} that holds the resulting value of the stat
       * @returns true if the stat boost applies successfully, false otherwise
       * @see shouldApply
       */
      apply(args: any[]): boolean;
  }
  /**
   * Modifier used for held items that apply {@linkcode Stat} boost(s) using a
   * multiplier if the holder is of a specific {@linkcode Species}.
   * @extends StatBoosterModifier
   * @see {@linkcode apply}
   */
  export declare class SpeciesStatBoosterModifier extends StatBoosterModifier {
      /** The species that the held item's stat boost(s) apply to */
      public species;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stats: PokeRogue.enums.Stat[], multiplier: number, species: PokeRogue.enums.Species[], stackCount?: integer);
      clone(): SpeciesStatBoosterModifier;
      getArgs(): any[];
      matchType(modifier: Modifier): boolean;
      /**
       * Checks if the incoming stat is listed in {@linkcode stats} and if the holder's {@linkcode Species}
       * (or its fused species) is listed in {@linkcode species}.
       * @param args [0] {@linkcode Pokemon} that holds the held item
       *             [1] {@linkcode Stat} being checked at the time
       *             [2] {@linkcode Utils.NumberHolder} N/A
       * @returns true if the stat could be boosted, false otherwise
       */
      shouldApply(args: any[]): boolean;
      /**
       * Checks if either parameter is included in the corresponding lists
       * @param speciesId {@linkcode Species} being checked
       * @param stat {@linkcode Stat} being checked
       * @returns true if both parameters are in {@linkcode species} and {@linkcode stats} respectively, false otherwise
       */
      contains(speciesId: PokeRogue.enums.Species, stat: PokeRogue.enums.Stat): boolean;
  }
  /**
   * Modifier used for held items that apply critical-hit stage boost(s).
   * @extends PokemonHeldItemModifier
   * @see {@linkcode apply}
   */
  export declare class CritBoosterModifier extends PokemonHeldItemModifier {
      /** The amount of stages by which the held item increases the current critical-hit stage value */
      protected stageIncrement: number;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stageIncrement: number, stackCount?: integer);
      clone(): CritBoosterModifier;
      getArgs(): any[];
      matchType(modifier: Modifier): boolean;
      /**
       * Increases the current critical-hit stage value by {@linkcode stageIncrement}.
       * @param args [0] {@linkcode Pokemon} N/A
       *             [1] {@linkcode Utils.IntegerHolder} that holds the resulting critical-hit level
       * @returns true if the critical-hit stage boost applies successfully, false otherwise
       */
      apply(args: any[]): boolean;
      getMaxHeldItemCount(_pokemon: PokeRogue.field.Pokemon): number;
  }
  /**
   * Modifier used for held items that apply critical-hit stage boost(s)
   * if the holder is of a specific {@linkcode Species}.
   * @extends CritBoosterModifier
   * @see {@linkcode shouldApply}
   */
  export declare class SpeciesCritBoosterModifier extends CritBoosterModifier {
      /** The species that the held item's critical-hit stage boost applies to */
      public species;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stageIncrement: number, species: PokeRogue.enums.Species[], stackCount?: integer);
      clone(): SpeciesCritBoosterModifier;
      getArgs(): any[];
      matchType(modifier: Modifier): boolean;
      /**
       * Checks if the holder's {@linkcode Species} (or its fused species) is listed
       * in {@linkcode species}.
       * @param args [0] {@linkcode Pokemon} that holds the held item
       *             [1] {@linkcode Utils.IntegerHolder} N/A
       * @returns true if the critical-hit level can be incremented, false otherwise
       */
      shouldApply(args: any[]): boolean;
  }
  /**
   * Applies Specific Type item boosts (e.g., Magnet)
   */
  export declare class AttackTypeBoosterModifier extends PokemonHeldItemModifier {
      public moveType;
      public boostMultiplier;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, moveType: PokeRogue.data.Type, boostPercent: number, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): AttackTypeBoosterModifier;
      getArgs(): any[];
      shouldApply(args: any[]): boolean;
      /**
     * @param {Array<any>} args Array
     *                          - Index 0: {Pokemon} Pokemon
     *                          - Index 1: {number} Move type
     *                          - Index 2: {Utils.NumberHolder} Move power
     * @returns {boolean} Returns true if boosts have been applied to the move.
     */
      apply(args: any[]): boolean;
      getScoreMultiplier(): number;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class SurviveDamageModifier extends PokemonHeldItemModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): SurviveDamageModifier;
      shouldApply(args: any[]): boolean;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class BypassSpeedChanceModifier extends PokemonHeldItemModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): modifier is BypassSpeedChanceModifier;
      clone(): BypassSpeedChanceModifier;
      shouldApply(args: any[]): boolean;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class FlinchChanceModifier extends PokemonHeldItemModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): modifier is FlinchChanceModifier;
      clone(): FlinchChanceModifier;
      shouldApply(args: any[]): boolean;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class TurnHealModifier extends PokemonHeldItemModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): modifier is TurnHealModifier;
      clone(): TurnHealModifier;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  /**
   * Modifier used for held items, namely Toxic Orb and Flame Orb, that apply a
   * set {@linkcode StatusEffect} at the end of a turn.
   * @extends PokemonHeldItemModifier
   * @see {@linkcode apply}
   */
  export declare class TurnStatusEffectModifier extends PokemonHeldItemModifier {
      /** The status effect to be applied by the held item */
      public effect;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      /**
       * Checks if {@linkcode modifier} is an instance of this class,
       * intentionally ignoring potentially different {@linkcode effect}s
       * to prevent held item stockpiling since the item obtained first
       * would be the only item able to {@linkcode apply} successfully.
       * @override
       * @param modifier {@linkcode Modifier} being type tested
       * @return true if {@linkcode modifier} is an instance of
       * TurnStatusEffectModifier, false otherwise
       */
      matchType(modifier: Modifier): boolean;
      clone(): TurnStatusEffectModifier;
      /**
       * Tries to inflicts the holder with the associated {@linkcode StatusEffect}.
       * @param args [0] {@linkcode Pokemon} that holds the held item
       * @returns true if the status effect was applied successfully, false if
       * otherwise
       */
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
      getStatusEffect(): StatusEffect;
  }
  export declare class HitHealModifier extends PokemonHeldItemModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): modifier is HitHealModifier;
      clone(): HitHealModifier;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class LevelIncrementBoosterModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): modifier is LevelIncrementBoosterModifier;
      clone(): LevelIncrementBoosterModifier;
      shouldApply(args: any[]): boolean;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene, forThreshold?: boolean): number;
  }
  export declare class BerryModifier extends PokemonHeldItemModifier {
      berryType: PokeRogue.enums.BerryType;
      consumed: boolean;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, berryType: PokeRogue.enums.BerryType, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): BerryModifier;
      getArgs(): any[];
      shouldApply(args: any[]): boolean;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class PreserveBerryModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): modifier is PreserveBerryModifier;
      clone(): PreserveBerryModifier;
      shouldApply(args: any[]): boolean;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class PokemonInstantReviveModifier extends PokemonHeldItemModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): modifier is PokemonInstantReviveModifier;
      clone(): PokemonInstantReviveModifier;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  /**
   * Modifier used for held items, namely White Herb, that restore adverse stat
   * stages in battle.
   * @extends PokemonHeldItemModifier
   * @see {@linkcode apply}
   */
  export declare class ResetNegativeStatStageModifier extends PokemonHeldItemModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): modifier is ResetNegativeStatStageModifier;
      clone(): ResetNegativeStatStageModifier;
      /**
       * Goes through the holder's stat stages and, if any are negative, resets that
       * stat stage back to 0.
       * @param args [0] {@linkcode Pokemon} that holds the held item
       * @returns true if any stat stages were reset, false otherwise
       */
      apply(args: any[]): boolean;
      getMaxHeldItemCount(_pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare abstract class ConsumablePokemonModifier extends ConsumableModifier {
      pokemonId: integer;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer);
      shouldApply(args: any[]): boolean;
      getPokemon(scene: PokeRogue.BattleScene): PlayerPokemon;
  }
  export declare class PokemonHpRestoreModifier extends ConsumablePokemonModifier {
      public restorePoints;
      public restorePercent;
      public healStatus;
      fainted: boolean;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, restorePoints: integer, restorePercent: number, healStatus: boolean, fainted?: boolean);
      shouldApply(args: any[]): boolean;
      apply(args: any[]): boolean;
  }
  export declare class PokemonStatusHealModifier extends ConsumablePokemonModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer);
      apply(args: any[]): boolean;
  }
  export declare abstract class ConsumablePokemonMoveModifier extends ConsumablePokemonModifier {
      moveIndex: integer;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, moveIndex: integer);
  }
  export declare class PokemonPpRestoreModifier extends ConsumablePokemonMoveModifier {
      public restorePoints;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, moveIndex: integer, restorePoints: integer);
      apply(args: any[]): boolean;
  }
  export declare class PokemonAllMovePpRestoreModifier extends ConsumablePokemonModifier {
      public restorePoints;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, restorePoints: integer);
      apply(args: any[]): boolean;
  }
  export declare class PokemonPpUpModifier extends ConsumablePokemonMoveModifier {
      public upPoints;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, moveIndex: integer, upPoints: integer);
      apply(args: any[]): boolean;
  }
  export declare class PokemonNatureChangeModifier extends ConsumablePokemonModifier {
      nature: PokeRogue.data.Nature;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, nature: PokeRogue.data.Nature);
      apply(args: any[]): boolean;
  }
  export declare class PokemonLevelIncrementModifier extends ConsumablePokemonModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer);
      apply(args: any[]): boolean;
  }
  export declare class TmModifier extends ConsumablePokemonModifier {
      constructor(type: ModifierTypes.TmModifierType, pokemonId: integer);
      apply(args: any[]): boolean;
  }
  export declare class RememberMoveModifier extends ConsumablePokemonModifier {
      levelMoveIndex: integer;
      constructor(type: ModifierTypes.ModifierType, pokemonId: integer, levelMoveIndex: integer);
      apply(args: any[]): boolean;
  }
  export declare class EvolutionItemModifier extends ConsumablePokemonModifier {
      constructor(type: ModifierTypes.EvolutionItemModifierType, pokemonId: integer);
      apply(args: any[]): boolean;
  }
  export declare class FusePokemonModifier extends ConsumablePokemonModifier {
      fusePokemonId: integer;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, fusePokemonId: integer);
      shouldApply(args: any[]): boolean;
      apply(args: any[]): Promise<boolean>;
  }
  export declare class MultipleParticipantExpBonusModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      apply(_args: any[]): boolean;
      clone(): MultipleParticipantExpBonusModifier;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class HealingBoosterModifier extends PersistentModifier {
      public multiplier;
      constructor(type: PokeRogue.modifier.ModifierType, multiplier: number, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): HealingBoosterModifier;
      getArgs(): any[];
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class ExpBoosterModifier extends PersistentModifier {
      public boostMultiplier;
      constructor(type: PokeRogue.modifier.ModifierType, boostPercent: number, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): ExpBoosterModifier;
      getArgs(): any[];
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene, forThreshold?: boolean): integer;
  }
  export declare class PokemonExpBoosterModifier extends PokemonHeldItemModifier {
      public boostMultiplier;
      constructor(type: ModifierTypes.PokemonExpBoosterModifierType, pokemonId: integer, boostPercent: number, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): PersistentModifier;
      getArgs(): any[];
      shouldApply(args: any[]): boolean;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class ExpShareModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): ExpShareModifier;
      apply(_args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class ExpBalanceModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): ExpBalanceModifier;
      apply(_args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class PokemonFriendshipBoosterModifier extends PokemonHeldItemModifier {
      constructor(type: ModifierTypes.PokemonFriendshipBoosterModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): PersistentModifier;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class PokemonNatureWeightModifier extends PokemonHeldItemModifier {
      constructor(type: ModifierTypes.ModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): PersistentModifier;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class PokemonMoveAccuracyBoosterModifier extends PokemonHeldItemModifier {
      public accuracyAmount;
      constructor(type: ModifierTypes.PokemonMoveAccuracyBoosterModifierType, pokemonId: integer, accuracy: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): PersistentModifier;
      getArgs(): any[];
      shouldApply(args: any[]): boolean;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class PokemonMultiHitModifier extends PokemonHeldItemModifier {
      constructor(type: ModifierTypes.PokemonMultiHitModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): PersistentModifier;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class PokemonFormChangeItemModifier extends PokemonHeldItemModifier {
      formChangeItem: PokeRogue.data.FormChangeItem;
      active: boolean;
      readonly isTransferrable: boolean;
      constructor(type: ModifierTypes.FormChangeItemModifierType, pokemonId: integer, formChangeItem: PokeRogue.data.FormChangeItem, active: boolean, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): PersistentModifier;
      getArgs(): any[];
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class MoneyRewardModifier extends ConsumableModifier {
      public moneyMultiplier;
      constructor(type: PokeRogue.modifier.ModifierType, moneyMultiplier: number);
      apply(args: any[]): boolean;
  }
  export declare class MoneyMultiplierModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): MoneyMultiplierModifier;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class DamageMoneyRewardModifier extends PokemonHeldItemModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): DamageMoneyRewardModifier;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class MoneyInterestModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      apply(args: any[]): boolean;
      clone(): MoneyInterestModifier;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class HiddenAbilityRateBoosterModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): HiddenAbilityRateBoosterModifier;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class ShinyRateBoosterModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): ShinyRateBoosterModifier;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class LockModifierTiersModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      apply(args: any[]): boolean;
      clone(): LockModifierTiersModifier;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class SwitchEffectTransferModifier extends PokemonHeldItemModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): SwitchEffectTransferModifier;
      apply(args: any[]): boolean;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  /**
   * Abstract class for held items that steal other Pokemon's items.
   * @see {@linkcode TurnHeldItemTransferModifier}
   * @see {@linkcode ContactHeldItemTransferChanceModifier}
   */
  export declare abstract class HeldItemTransferModifier extends PokemonHeldItemModifier {
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      /**
       * Determines the targets to transfer items from when this applies.
       * @param args\[0\] the {@linkcode Pokemon} holding this item
       * @returns the opponents of the source {@linkcode Pokemon}
       */
      getTargets(args: any[]): Pokemon[];
      /**
       * Steals an item from a set of target Pokemon.
       * This prioritizes high-tier held items when selecting the item to steal.
       * @param args \[0\] The {@linkcode Pokemon} holding this item
       * @returns true if an item was stolen; false otherwise.
       */
      apply(args: any[]): boolean;
      abstract getTransferredItemCount(): integer;
      abstract getTransferMessage(pokemon: PokeRogue.field.Pokemon, targetPokemon: PokeRogue.field.Pokemon, item: ModifierTypes.ModifierType): string;
  }
  /**
   * Modifier for held items that steal items from the enemy at the end of
   * each turn.
   * @see {@linkcode modifierTypes[MINI_BLACK_HOLE]}
   */
  export declare class TurnHeldItemTransferModifier extends HeldItemTransferModifier {
      isTransferrable: boolean;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, stackCount?: integer);
      matchType(modifier: Modifier): boolean;
      clone(): TurnHeldItemTransferModifier;
      getTransferredItemCount(): integer;
      getTransferMessage(pokemon: PokeRogue.field.Pokemon, targetPokemon: PokeRogue.field.Pokemon, item: ModifierTypes.ModifierType): string;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
      setTransferrableFalse(): void;
  }
  /**
   * Modifier for held items that add a chance to steal items from the target of a
   * successful attack.
   * @see {@linkcode modifierTypes[GRIP_CLAW]}
   * @see {@linkcode HeldItemTransferModifier}
   */
  export declare class ContactHeldItemTransferChanceModifier extends HeldItemTransferModifier {
      public chance;
      constructor(type: PokeRogue.modifier.ModifierType, pokemonId: integer, chancePercent: number, stackCount?: integer);
      /**
       * Determines the target to steal items from when this applies.
       * @param args\[0\] The {@linkcode Pokemon} holding this item
       * @param args\[1\] The {@linkcode Pokemon} the holder is targeting with an attack
       * @returns The target (args[1]) stored in array format for use in {@linkcode HeldItemTransferModifier.apply}
       */
      getTargets(args: any[]): Pokemon[];
      matchType(modifier: Modifier): boolean;
      clone(): ContactHeldItemTransferChanceModifier;
      getArgs(): any[];
      getTransferredItemCount(): integer;
      getTransferMessage(pokemon: PokeRogue.field.Pokemon, targetPokemon: PokeRogue.field.Pokemon, item: ModifierTypes.ModifierType): string;
      getMaxHeldItemCount(pokemon: PokeRogue.field.Pokemon): integer;
  }
  export declare class IvScannerModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): IvScannerModifier;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class ExtraModifierModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): ExtraModifierModifier;
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare abstract class EnemyPersistentModifier extends PersistentModifier {
      constructor(type: PokeRogue.modifier.ModifierType, stackCount?: integer);
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  declare abstract class EnemyDamageMultiplierModifier extends EnemyPersistentModifier {
      protected damageMultiplier: number;
      constructor(type: PokeRogue.modifier.ModifierType, damageMultiplier: number, stackCount?: integer);
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class EnemyDamageBoosterModifier extends EnemyDamageMultiplierModifier {
      constructor(type: PokeRogue.modifier.ModifierType, boostPercent: number, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): EnemyDamageBoosterModifier;
      getArgs(): any[];
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class EnemyDamageReducerModifier extends EnemyDamageMultiplierModifier {
      constructor(type: PokeRogue.modifier.ModifierType, reductionPercent: number, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): EnemyDamageReducerModifier;
      getArgs(): any[];
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class EnemyTurnHealModifier extends EnemyPersistentModifier {
      healPercent: number;
      constructor(type: PokeRogue.modifier.ModifierType, healPercent: number, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): EnemyTurnHealModifier;
      getArgs(): any[];
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class EnemyAttackStatusEffectChanceModifier extends EnemyPersistentModifier {
      effect: PokeRogue.data.StatusEffect;
      chance: number;
      constructor(type: PokeRogue.modifier.ModifierType, effect: PokeRogue.data.StatusEffect, chancePercent: number, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): EnemyAttackStatusEffectChanceModifier;
      getArgs(): any[];
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class EnemyStatusEffectHealChanceModifier extends EnemyPersistentModifier {
      chance: number;
      constructor(type: PokeRogue.modifier.ModifierType, chancePercent: number, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): EnemyStatusEffectHealChanceModifier;
      getArgs(): any[];
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class EnemyEndureChanceModifier extends EnemyPersistentModifier {
      chance: number;
      constructor(type: PokeRogue.modifier.ModifierType, chancePercent?: number, stackCount?: integer);
      match(modifier: Modifier): modifier is EnemyEndureChanceModifier;
      clone(): EnemyEndureChanceModifier;
      getArgs(): any[];
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  export declare class EnemyFusionChanceModifier extends EnemyPersistentModifier {
      public chance;
      constructor(type: PokeRogue.modifier.ModifierType, chancePercent: number, stackCount?: integer);
      match(modifier: Modifier): boolean;
      clone(): EnemyFusionChanceModifier;
      getArgs(): any[];
      apply(args: any[]): boolean;
      getMaxStackCount(scene: PokeRogue.BattleScene): integer;
  }
  /**
   * Uses either `MODIFIER_OVERRIDE` in overrides.ts to set {@linkcode PersistentModifier}s for either:
   *  - The player
   *  - The enemy
   * @param scene current {@linkcode BattleScene}
   * @param isPlayer {@linkcode boolean} for whether the player (`true`) or enemy (`false`) is being overridden
   */
  export declare function overrideModifiers(scene: PokeRogue.BattleScene, isPlayer?: boolean): void;
  /**
   * Uses either `HELD_ITEMS_OVERRIDE` in overrides.ts to set {@linkcode PokemonHeldItemModifier}s for either:
   *  - The first member of the player's team when starting a new game
   *  - An enemy {@linkcode Pokemon} being spawned in
   * @param scene current {@linkcode BattleScene}
   * @param pokemon {@linkcode Pokemon} whose held items are being overridden
   * @param isPlayer {@linkcode boolean} for whether the {@linkcode pokemon} is the player's (`true`) or an enemy (`false`)
   */
  export declare function overrideHeldItems(scene: PokeRogue.BattleScene, pokemon: PokeRogue.field.Pokemon, isPlayer?: boolean): void;
  export {};
  
}

declare namespace PokeRogue {
  //import { Abilities } from "#enums/abilities";
  //import { Biome } from "#enums/biome";
  //import { EggTier } from "#enums/egg-type";
  //import { Moves } from "#enums/moves";
  //import { Species } from "#enums/species";
  //import { StatusEffect } from "#enums/status-effect";
  //import { TimeOfDay } from "#enums/time-of-day";
  //import { VariantTier } from "#enums/variant-tiers";
  //import { WeatherType } from "#enums/weather-type";
  //import { type PokeballCounts } from "./battle-scene";
  //import { Gender } from "./data/gender";
  //import { Variant } from "./data/variant";
  //import { type ModifierOverride } from "./modifier/modifier-type";
  /**
   * If you need to add Overrides values for local testing do that inside {@linkcode overrides}
   * ---
   * Defaults for Overrides that are used when testing different in game situations
   *
   * If an override name starts with "STARTING", it will apply when a new run begins
   */
  declare class DefaultOverrides {
      /** a specific seed (default: a random string of 24 characters) */
      readonly SEED_OVERRIDE: string;
      readonly WEATHER_OVERRIDE: PokeRogue.enums.WeatherType;
      readonly BATTLE_TYPE_OVERRIDE: "double" | "single" | null;
      readonly STARTING_WAVE_OVERRIDE: number;
      readonly STARTING_BIOME_OVERRIDE: PokeRogue.enums.Biome;
      readonly ARENA_TINT_OVERRIDE: PokeRogue.enums.TimeOfDay | null;
      /** Multiplies XP gained by this value including 0. Set to null to ignore the override */
      readonly XP_MULTIPLIER_OVERRIDE: number | null;
      readonly NEVER_CRIT_OVERRIDE: boolean;
      /** default 1000 */
      readonly STARTING_MONEY_OVERRIDE: number;
      /** Sets all shop item prices to 0 */
      readonly WAIVE_SHOP_FEES_OVERRIDE: boolean;
      /** Sets reroll price to 0 */
      readonly WAIVE_ROLL_FEE_OVERRIDE: boolean;
      readonly FREE_CANDY_UPGRADE_OVERRIDE: boolean;
      readonly POKEBALL_OVERRIDE: {
          active: boolean;
          pokeballs: PokeballCounts;
      };
      /**
       * Set the form index of any starter in the party whose `speciesId` is inside this override
       * @see {@link allSpecies} in `src/data/pokemon-species.ts` for form indexes
       * @example
       * ```
       * const STARTER_FORM_OVERRIDES = {
       *   [Species.DARMANITAN]: 1
       * }
       * ```
       */
      readonly STARTER_FORM_OVERRIDES: Partial<Record<Species, number>>;
      /** default 5 or 20 for Daily */
      readonly STARTING_LEVEL_OVERRIDE: number;
      /**
       * SPECIES OVERRIDE
       * will only apply to the first starter in your party or each enemy pokemon
       * default is 0 to not override
       * @example SPECIES_OVERRIDE = Species.Bulbasaur;
       */
      readonly STARTER_SPECIES_OVERRIDE: PokeRogue.enums.Species | number;
      readonly ABILITY_OVERRIDE: PokeRogue.enums.Abilities;
      readonly PASSIVE_ABILITY_OVERRIDE: PokeRogue.enums.Abilities;
      readonly STATUS_OVERRIDE: PokeRogue.enums.StatusEffect;
      readonly GENDER_OVERRIDE: PokeRogue.data.Gender | null;
      readonly MOVESET_OVERRIDE: Array<Moves>;
      readonly SHINY_OVERRIDE: boolean;
      readonly VARIANT_OVERRIDE: PokeRogue.data.Variant;
      readonly OPP_SPECIES_OVERRIDE: PokeRogue.enums.Species | number;
      readonly OPP_LEVEL_OVERRIDE: number;
      readonly OPP_ABILITY_OVERRIDE: PokeRogue.enums.Abilities;
      readonly OPP_PASSIVE_ABILITY_OVERRIDE: PokeRogue.enums.Abilities;
      readonly OPP_STATUS_OVERRIDE: PokeRogue.enums.StatusEffect;
      readonly OPP_GENDER_OVERRIDE: PokeRogue.data.Gender | null;
      readonly OPP_MOVESET_OVERRIDE: Array<Moves>;
      readonly OPP_SHINY_OVERRIDE: boolean;
      readonly OPP_VARIANT_OVERRIDE: PokeRogue.data.Variant;
      readonly OPP_IVS_OVERRIDE: number | number[];
      readonly OPP_FORM_OVERRIDES: Partial<Record<Species, number>>;
      /**
       * Override to give the enemy Pokemon a given amount of health segments
       *
       * 0 (default): the health segments will be handled normally based on wave, level and species
       * 1: the Pokemon will have a single health segment and therefore will not be a boss
       * 2+: the Pokemon will be a boss with the given number of health segments
       */
      readonly OPP_HEALTH_SEGMENTS_OVERRIDE: number;
      readonly EGG_IMMEDIATE_HATCH_OVERRIDE: boolean;
      readonly EGG_TIER_OVERRIDE: PokeRogue.enums.EggTier | null;
      readonly EGG_SHINY_OVERRIDE: boolean;
      readonly EGG_VARIANT_OVERRIDE: PokeRogue.enums.VariantTier | null;
      readonly EGG_FREE_GACHA_PULLS_OVERRIDE: boolean;
      readonly EGG_GACHA_PULL_COUNT_OVERRIDE: number;
      /**
       * Overrides labeled `MODIFIER` deal with any modifier so long as it doesn't require a party
       * member to hold it (typically this is, extends, or generates a {@linkcode ModifierType}),
       * like `EXP_SHARE`, `CANDY_JAR`, etc.
       *
       * Overrides labeled `HELD_ITEM` specifically pertain to any entry in {@linkcode modifierTypes} that
       * extends, or generates a {@linkcode PokemonHeldItemModifierType}, like `SOUL_DEW`, `TOXIC_ORB`, etc.
       *
       * Note that, if count is not provided, it will default to 1.
       *
       * Additionally, note that some held items and modifiers are grouped together via
       * a {@linkcode ModifierTypeGenerator} and require pre-generation arguments to get
       * a specific item from that group. If a type is not set, the generator will either
       * use the party to weight item choice or randomly pick an item.
       *
       * @example
       * ```
       * // Will have a quantity of 2 in-game
       * STARTING_MODIFIER_OVERRIDE = [{name: "EXP_SHARE", count: 2}]
       * // Will have a quantity of 1 in-game
       * STARTING_HELD_ITEM_OVERRIDE = [{name: "LUCKY_EGG"}]
       * // Type must be given to get a specific berry
       * STARTING_HELD_ITEM_OVERRIDE = [{name: "BERRY", type: BerryType.SITRUS}]
       * // A random berry will be generated at runtime
       * STARTING_HELD_ITEM_OVERRIDE = [{name: "BERRY"}]
       * ```
       */
      readonly STARTING_MODIFIER_OVERRIDE: ModifierOverride[];
      /**
       * Override array of {@linkcode ModifierOverride}s used to provide modifiers to enemies.
       *
       * Note that any previous modifiers are cleared.
       */
      readonly OPP_MODIFIER_OVERRIDE: ModifierOverride[];
      /** Override array of {@linkcode ModifierOverride}s used to provide held items to first party member when starting a new game. */
      readonly STARTING_HELD_ITEMS_OVERRIDE: ModifierOverride[];
      /** Override array of {@linkcode ModifierOverride}s used to provide held items to enemies on spawn. */
      readonly OPP_HELD_ITEMS_OVERRIDE: ModifierOverride[];
      /**
       * Override array of {@linkcode ModifierOverride}s used to replace the generated item rolls after a wave.
       *
       * If less entries are listed than rolled, only those entries will be used to replace the corresponding items while the rest randomly generated.
       * If more entries are listed than rolled, only the first X entries will be used, where X is the number of items rolled.
       *
       * Note that, for all items in the array, `count` is not used.
       */
      readonly ITEM_REWARD_OVERRIDE: ModifierOverride[];
  }
  export declare const defaultOverrides: DefaultOverrides;
  declare const _default: {
      SEED_OVERRIDE: string;
      WEATHER_OVERRIDE: PokeRogue.enums.WeatherType;
      BATTLE_TYPE_OVERRIDE: "double" | "single" | null;
      STARTING_WAVE_OVERRIDE: number;
      STARTING_BIOME_OVERRIDE: PokeRogue.enums.Biome;
      ARENA_TINT_OVERRIDE: PokeRogue.enums.TimeOfDay | null;
      XP_MULTIPLIER_OVERRIDE: number | null;
      NEVER_CRIT_OVERRIDE: boolean;
      STARTING_MONEY_OVERRIDE: number;
      WAIVE_SHOP_FEES_OVERRIDE: boolean;
      WAIVE_ROLL_FEE_OVERRIDE: boolean;
      FREE_CANDY_UPGRADE_OVERRIDE: boolean;
      POKEBALL_OVERRIDE: {
          active: boolean;
          pokeballs: PokeballCounts;
      };
      STARTER_FORM_OVERRIDES: Partial<Record<Species, number>>;
      STARTING_LEVEL_OVERRIDE: number;
      STARTER_SPECIES_OVERRIDE: PokeRogue.enums.Species | number;
      ABILITY_OVERRIDE: PokeRogue.enums.Abilities;
      PASSIVE_ABILITY_OVERRIDE: PokeRogue.enums.Abilities;
      STATUS_OVERRIDE: PokeRogue.enums.StatusEffect;
      GENDER_OVERRIDE: PokeRogue.data.Gender | null;
      MOVESET_OVERRIDE: Array<Moves>;
      SHINY_OVERRIDE: boolean;
      VARIANT_OVERRIDE: PokeRogue.data.Variant;
      OPP_SPECIES_OVERRIDE: PokeRogue.enums.Species | number;
      OPP_LEVEL_OVERRIDE: number;
      OPP_ABILITY_OVERRIDE: PokeRogue.enums.Abilities;
      OPP_PASSIVE_ABILITY_OVERRIDE: PokeRogue.enums.Abilities;
      OPP_STATUS_OVERRIDE: PokeRogue.enums.StatusEffect;
      OPP_GENDER_OVERRIDE: PokeRogue.data.Gender | null;
      OPP_MOVESET_OVERRIDE: Array<Moves>;
      OPP_SHINY_OVERRIDE: boolean;
      OPP_VARIANT_OVERRIDE: PokeRogue.data.Variant;
      OPP_IVS_OVERRIDE: number | number[];
      OPP_FORM_OVERRIDES: Partial<Record<Species, number>>;
      OPP_HEALTH_SEGMENTS_OVERRIDE: number;
      EGG_IMMEDIATE_HATCH_OVERRIDE: boolean;
      EGG_TIER_OVERRIDE: PokeRogue.enums.EggTier | null;
      EGG_SHINY_OVERRIDE: boolean;
      EGG_VARIANT_OVERRIDE: PokeRogue.enums.VariantTier | null;
      EGG_FREE_GACHA_PULLS_OVERRIDE: boolean;
      EGG_GACHA_PULL_COUNT_OVERRIDE: number;
      STARTING_MODIFIER_OVERRIDE: ModifierOverride[];
      OPP_MODIFIER_OVERRIDE: ModifierOverride[];
      STARTING_HELD_ITEMS_OVERRIDE: ModifierOverride[];
      OPP_HELD_ITEMS_OVERRIDE: ModifierOverride[];
      ITEM_REWARD_OVERRIDE: ModifierOverride[];
  };

}

declare namespace PokeRogue {
  //import BattleScene from "./battle-scene";
  export declare class Phase {
      protected scene: PokeRogue.BattleScene;
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
      end(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { Phase } from "#app/phase.js";
  export declare class AddEnemyBuffModifierPhase extends PokeRogue.Phase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { PokeballType } from "#app/enums/pokeball.js";
  //import { PokemonPhase } from "./pokemon-phase";
  export declare class AttemptCapturePhase extends PokeRogue.phases.PokemonPhase {
      public pokeballType;
      public pokeball;
      public originalY;
      constructor(scene: PokeRogue.BattleScene, targetIndex: integer, pokeballType: PokeRogue.enums.PokeballType);
      start(): void;
      failCatch(shakeCount: integer): void;
      catch(): void;
      removePb(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene";
  //import { PlayerPokemon, EnemyPokemon } from "#app/field/pokemon";
  //import * as Utils from "#app/utils";
  //import { PokemonPhase } from "./pokemon-phase";
  export declare class AttemptRunPhase extends PokeRogue.phases.PokemonPhase {
      constructor(scene: PokeRogue.BattleScene, fieldIndex: number);
      start(): void;
      attemptRunAway(playerField: PokeRogue.field.PlayerPokemon[], enemyField: PokeRogue.field.EnemyPokemon[], escapeChance: Utils.NumberHolder): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import { BattlePhase } from "./battle-phase";
  export declare class BattleEndPhase extends PokeRogue.phases.BattlePhase {
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { TrainerSlot } from "#app/data/trainer-config.js";
  //import { Phase } from "#app/phase.js";
  export declare class BattlePhase extends PokeRogue.Phase {
      constructor(scene: PokeRogue.BattleScene);
      showEnemyTrainer(trainerSlot?: TrainerSlot): void;
      hideEnemyTrainer(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import { FieldPhase } from "./field-phase";
  /** The phase after attacks where the pokemon eat berries */
  export declare class BerryPhase extends PokeRogue.phases.FieldPhase {
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlePhase } from "./battle-phase";
  export declare class CheckSwitchPhase extends PokeRogue.phases.BattlePhase {
      protected fieldIndex: integer;
      protected useName: boolean;
      constructor(scene: PokeRogue.BattleScene, fieldIndex: integer, useName: boolean);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene";
  //import { PlayerPokemon } from "#app/field/pokemon";
  //import { Command } from "#app/ui/command-ui-handler";
  //import { FieldPhase } from "./field-phase";
  export declare class CommandPhase extends PokeRogue.phases.FieldPhase {
      protected fieldIndex: integer;
      constructor(scene: PokeRogue.BattleScene, fieldIndex: integer);
      start(): void;
      handleCommand(command: PokeRogue.ui.Command, cursor: integer, ...args: any[]): boolean;
      cancel(): void;
      checkFightOverride(): boolean;
      getFieldIndex(): integer;
      getPokemon(): PlayerPokemon;
      end(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlerIndex } from "#app/battle.js";
  //import { CommonAnim } from "#app/data/battle-anims.js";
  //import { PokemonPhase } from "./pokemon-phase";
  export declare class CommonAnimPhase extends PokeRogue.phases.PokemonPhase {
      public anim;
      public targetIndex;
      constructor(scene: PokeRogue.BattleScene, battlerIndex?: BattlerIndex, targetIndex?: BattlerIndex | undefined, anim?: CommonAnim);
      setAnimation(anim: PokeRogue.data.CommonAnim): void;
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlerIndex } from "#app/battle.js";
  //import { DamageResult } from "#app/field/pokemon.js";
  //import { PokemonPhase } from "./pokemon-phase";
  export declare class DamagePhase extends PokeRogue.phases.PokemonPhase {
      public amount;
      public damageResult;
      public critical;
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex, amount: integer, damageResult?: DamageResult, critical?: boolean);
      start(): void;
      updateAmount(amount: integer): void;
      applyDamage(): void;
      end(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene";
  //import { Egg } from "#app/data/egg";
  //import { PlayerPokemon } from "#app/field/pokemon";
  //import { Phase } from "#app/phase";
  //import { EggLapsePhase } from "./egg-lapse-phase";
  /**
   * Class that represents egg hatching
   */
  export declare class EggHatchPhase extends PokeRogue.Phase {
      /** The egg that is hatching */
      public egg;
      /** The new EggHatchData for the egg/pokemon that hatches */
      public eggHatchData;
      /** The number of eggs that are hatching */
      public eggsToHatchCount;
      /** The container that lists how many eggs are hatching */
      public eggCounterContainer;
      /** The scene handler for egg hatching */
      public eggHatchHandler;
      /** The phaser gameobject container that holds everything */
      public eggHatchContainer;
      /** The phaser image that is the background */
      public eggHatchBg;
      /** The phaser rectangle that overlays during the scene */
      public eggHatchOverlay;
      /** The phaser container that holds the egg */
      public eggContainer;
      /** The phaser sprite of the egg */
      public eggSprite;
      /** The phaser sprite of the cracks in an egg */
      public eggCrackSprite;
      /** The phaser sprite that represents the overlaid light rays */
      public eggLightraysOverlay;
      /** The phaser sprite of the hatched Pokemon */
      public pokemonSprite;
      /** The phaser sprite for shiny sparkles */
      public pokemonShinySparkle;
      /** The {@link PokemonInfoContainer} of the newly hatched Pokemon */
      public infoContainer;
      /** The newly hatched {@link PlayerPokemon} */
      public pokemon;
      /** The index of which egg move is unlocked. 0-2 is common, 3 is rare */
      public eggMoveIndex;
      /** Internal booleans representing if the egg is hatched, able to be skipped, or skipped */
      public hatched;
      public canSkip;
      public skipped;
      /** The sound effect being played when the egg is hatched */
      public evolutionBgm;
      public eggLapsePhase;
      constructor(scene: PokeRogue.BattleScene, hatchScene: PokeRogue.phases.EggLapsePhase, egg: PokeRogue.data.Egg, eggsToHatchCount: integer);
      start(): void;
      end(): void;
      /**
       * Function that animates egg shaking
       * @param intensity of horizontal shaking. Doubled on the first call (where count is 0)
       * @param repeatCount the number of times this function should be called (asynchronous recursion?!?)
       * @param count the current number of times this function has been called.
       * @returns nothing since it's a Promise<void>
       */
      doEggShake(intensity: number, repeatCount?: integer, count?: integer): Promise<void>;
      /**
       * Tries to skip the hatching animation
       * @returns false if cannot be skipped or already skipped. True otherwise
       */
      trySkip(): boolean;
      /**
       * Plays the animation of an egg hatch
       */
      doHatch(): void;
      /**
       * Function to do the logic and animation of completing a hatch and revealing the Pokemon
       */
      doReveal(): void;
      /**
       * Helper function to generate sine. (Why is this not a Utils?!?)
       * @param index random number from 0-7 being passed in to scale pi/128
       * @param amplitude Scaling
       * @returns a number
       */
      sin(index: integer, amplitude: integer): number;
      /**
       * Animates spraying
       * @param intensity number of times this is repeated (this is a badly named variable)
       * @param offsetY how much to offset the Y coordinates
       */
      doSpray(intensity: integer, offsetY?: number): void;
      /**
       * Animates a particle used in the spray animation
       * @param trigIndex Used to modify the particle's vertical speed, is a random number from 0-7
       * @param offsetY how much to offset the Y coordinate
       */
      doSprayParticle(trigIndex: integer, offsetY: number): void;
      /**
       * Generates a Pokemon to be hatched by the egg
       * Also stores the generated pokemon in this.eggHatchData
       * @returns the hatched PlayerPokemon
       */
      generatePokemon(): PlayerPokemon;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene";
  //import { Egg } from "#app/data/egg";
  //import { Phase } from "#app/phase";
  //import { EggHatchData } from "#app/data/egg-hatch-data";
  /**
   * Phase that handles updating eggs, and hatching any ready eggs
   * Also handles prompts for skipping animation, and calling the egg summary phase
   */
  export declare class EggLapsePhase extends PokeRogue.Phase {
      public eggHatchData;
      public readonly minEggsToPromptSkip;
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
      /**
       * Hatches eggs normally one by one, showing animations
       * @param eggsToHatch list of eggs to hatch
       */
      hatchEggsRegular(eggsToHatch: PokeRogue.data.Egg[]): void;
      /**
       * Hatches eggs with no animations
       * @param eggsToHatch list of eggs to hatch
       */
      hatchEggsSkipped(eggsToHatch: PokeRogue.data.Egg[]): void;
      showSummary(): void;
      /**
       * Hatches an egg and stores it in the local EggHatchData array without animations
       * Also validates the achievements for the hatched pokemon and removes the egg
       * @param egg egg to hatch
       */
      hatchEggSilently(egg: PokeRogue.data.Egg): void;
      /**
       * Generates a Pokemon and creates a new EggHatchData instance for the given egg
       * @param egg the egg to hatch
       * @returns the hatched PlayerPokemon
       */
      generatePokemon(egg: PokeRogue.data.Egg): EggHatchData;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene";
  //import { Phase } from "#app/phase";
  //import { EggHatchData } from "#app/data/egg-hatch-data";
  /**
   * Class that represents the egg summary phase
   * It does some of the function for updating egg data
   * Phase is handled mostly by the egg-hatch-scene-handler UI
   */
  export declare class EggSummaryPhase extends PokeRogue.Phase {
      public eggHatchData;
      public eggHatchHandler;
      constructor(scene: PokeRogue.BattleScene, eggHatchData: PokeRogue.data.EggHatchData[]);
      start(): void;
      end(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene";
  //import { BattlePhase } from "./battle-phase";
  export declare class EncounterPhase extends PokeRogue.phases.BattlePhase {
      public loaded;
      constructor(scene: PokeRogue.BattleScene, loaded?: boolean);
      start(): void;
      doEncounter(): void;
      getEncounterMessage(): string;
      doEncounterCommon(showEncounterMessage?: boolean): void;
      end(): void;
      tryOverrideForBattleSpec(): boolean;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { Phase } from "#app/phase.js";
  export declare class EndCardPhase extends PokeRogue.Phase {
      endCard: Phaser.GameObjects.Image;
      text: Phaser.GameObjects.Text;
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { Phase } from "#app/phase.js";
  export declare class EndEvolutionPhase extends PokeRogue.Phase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene";
  //import { FieldPhase } from "./field-phase";
  /**
   * Phase for determining an enemy AI's action for the next turn.
   * During this phase, the enemy decides whether to switch (if it has a trainer)
   * or to use a move from its moveset.
   *
   * For more information on how the Enemy AI works, see docs/enemy-ai.md
   * @see {@linkcode Pokemon.getMatchupScore}
   * @see {@linkcode EnemyPokemon.getNextMove}
   */
  export declare class EnemyCommandPhase extends PokeRogue.phases.FieldPhase {
      protected fieldIndex: integer;
      constructor(scene: PokeRogue.BattleScene, fieldIndex: integer);
      start(): void;
      getFieldIndex(): number;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { EnemyPokemon } from "#app/field/pokemon.js";
  //import { PartyMemberPokemonPhase } from "./party-member-pokemon-phase";
  export declare abstract class EnemyPartyMemberPokemonPhase extends PokeRogue.phases.PartyMemberPokemonPhase {
      constructor(scene: PokeRogue.BattleScene, partyMemberIndex: integer);
      getEnemyPokemon(): EnemyPokemon;
  }
  
}

declare namespace PokeRogue.phases {
  //import { Phase } from "../phase";
  //import BattleScene from "../battle-scene";
  //import { SpeciesFormEvolution } from "../data/pokemon-evolutions";
  //import { PlayerPokemon } from "../field/pokemon";
  export declare class EvolutionPhase extends PokeRogue.Phase {
      protected pokemon: PokeRogue.field.PlayerPokemon;
      protected lastLevel: integer;
      public evolution;
      protected evolutionContainer: Phaser.GameObjects.Container;
      protected evolutionBaseBg: Phaser.GameObjects.Image;
      protected evolutionBg: Phaser.GameObjects.Video;
      protected evolutionBgOverlay: Phaser.GameObjects.Rectangle;
      protected evolutionOverlay: Phaser.GameObjects.Rectangle;
      protected pokemonSprite: Phaser.GameObjects.Sprite;
      protected pokemonTintSprite: Phaser.GameObjects.Sprite;
      protected pokemonEvoSprite: Phaser.GameObjects.Sprite;
      protected pokemonEvoTintSprite: Phaser.GameObjects.Sprite;
      constructor(scene: PokeRogue.BattleScene, pokemon: PokeRogue.field.PlayerPokemon, evolution: PokeRogue.data.SpeciesFormEvolution | null, lastLevel: integer);
      validate(): boolean;
      setMode(): Promise<void>;
      start(): void;
      doEvolution(): void;
      doSpiralUpward(): void;
      doArcDownward(): void;
      doCycle(l: number, lastCycle?: integer): Promise<boolean>;
      doCircleInward(): void;
      doSpray(): void;
      doSpiralUpwardParticle(trigIndex: integer): void;
      doArcDownParticle(trigIndex: integer): void;
      doCircleInwardParticle(trigIndex: integer, speed: integer): void;
      doSprayParticle(trigIndex: integer): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { PlayerPartyMemberPokemonPhase } from "./player-party-member-pokemon-phase";
  export declare class ExpPhase extends PokeRogue.phases.PlayerPartyMemberPokemonPhase {
      public expValue;
      constructor(scene: PokeRogue.BattleScene, partyMemberIndex: integer, expValue: number);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene";
  //import { BattlerIndex } from "#app/battle";
  //import { PokemonPhase } from "./pokemon-phase";
  export declare class FaintPhase extends PokeRogue.phases.PokemonPhase {
      public preventEndure;
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex, preventEndure?: boolean);
      start(): void;
      doFaint(): void;
      tryOverrideForBattleSpec(): boolean;
  }
  
}

declare namespace PokeRogue.phases {
  //import Pokemon from "#app/field/pokemon.js";
  //import { BattlePhase } from "./battle-phase";
  type PokemonFunc = (pokemon: PokeRogue.field.Pokemon) => void;
  export declare abstract class FieldPhase extends PokeRogue.phases.BattlePhase {
      executeForAll(func: PokemonFunc): void;
  }
  export {};
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "../battle-scene";
  //import { SpeciesFormChange } from "../data/pokemon-forms";
  //import { PlayerPokemon } from "../field/pokemon";
  //import { EvolutionPhase } from "./evolution-phase";
  export declare class FormChangePhase extends PokeRogue.phases.EvolutionPhase {
      public formChange;
      public modal;
      constructor(scene: PokeRogue.BattleScene, pokemon: PokeRogue.field.PlayerPokemon, formChange: PokeRogue.data.SpeciesFormChange, modal: boolean);
      validate(): boolean;
      setMode(): Promise<void>;
      doEvolution(): void;
      end(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { ModifierTypeFunc } from "#app/modifier/modifier-type.js";
  //import { ModifierRewardPhase } from "./modifier-reward-phase";
  export declare class GameOverModifierRewardPhase extends PokeRogue.phases.ModifierRewardPhase {
      constructor(scene: PokeRogue.BattleScene, modifierTypeFunc: PokeRogue.modifier.ModifierTypeFunc);
      doReward(): Promise<void>;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene";
  //import Pokemon from "#app/field/pokemon";
  //import { BattlePhase } from "./battle-phase";
  export declare class GameOverPhase extends PokeRogue.phases.BattlePhase {
      public victory;
      public firstRibbons;
      constructor(scene: PokeRogue.BattleScene, victory?: boolean);
      start(): void;
      handleGameOver(): void;
      handleUnlocks(): void;
      awardRibbon(pokemon: PokeRogue.field.Pokemon, forStarter?: boolean): void;
      /**
       * This function mirrors game-data.ts' getSessionSaveData() to update the session data to reflect any changes that occurred within the last wave
       * This means that level ups, item usage, evolutions, etc. will all be accurately reflected.
       * @returns {@linkCode SessionSaveData} an updated version of the wave's SessionSaveData that accurately reflects the events of the wave
       */
      public getFinalSessionData;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlePhase } from "./battle-phase";
  export declare class HidePartyExpBarPhase extends PokeRogue.phases.BattlePhase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { Moves } from "#app/enums/moves.js";
  //import { PlayerPartyMemberPokemonPhase } from "./player-party-member-pokemon-phase";
  export declare class LearnMovePhase extends PokeRogue.phases.PlayerPartyMemberPokemonPhase {
      public moveId;
      public fromTM;
      constructor(scene: PokeRogue.BattleScene, partyMemberIndex: integer, moveId: PokeRogue.enums.Moves, fromTM?: boolean);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { FieldPhase } from "./field-phase";
  export declare class LevelCapPhase extends PokeRogue.phases.FieldPhase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { PlayerPartyMemberPokemonPhase } from "./player-party-member-pokemon-phase";
  export declare class LevelUpPhase extends PokeRogue.phases.PlayerPartyMemberPokemonPhase {
      public lastLevel;
      public level;
      constructor(scene: PokeRogue.BattleScene, partyMemberIndex: integer, lastLevel: integer, level: integer);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { Phase } from "#app/phase.js";
  export declare class LoginPhase extends PokeRogue.Phase {
      public showText;
      constructor(scene: PokeRogue.BattleScene, showText?: boolean);
      start(): void;
      end(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { Phase } from "#app/phase.js";
  export declare class MessagePhase extends PokeRogue.Phase {
      public text;
      public callbackDelay;
      public prompt;
      public promptDelay;
      constructor(scene: PokeRogue.BattleScene, text: string, callbackDelay?: integer | null, prompt?: boolean | null, promptDelay?: integer | null);
      start(): void;
      end(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { ModifierType, ModifierTypeFunc } from "#app/modifier/modifier-type.js";
  //import { BattlePhase } from "./battle-phase";
  export declare class ModifierRewardPhase extends PokeRogue.phases.BattlePhase {
      protected modifierType: PokeRogue.modifier.ModifierType;
      constructor(scene: PokeRogue.BattleScene, modifierTypeFunc: PokeRogue.modifier.ModifierTypeFunc);
      start(): void;
      doReward(): Promise<void>;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlePhase } from "./battle-phase";
  export declare class MoneyRewardPhase extends PokeRogue.phases.BattlePhase {
      public moneyMultiplier;
      constructor(scene: PokeRogue.BattleScene, moneyMultiplier: number);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { Moves } from "#app/enums/moves.js";
  //import { BattlePhase } from "./battle-phase";
  export declare class MoveAnimTestPhase extends PokeRogue.phases.BattlePhase {
      public moveQueue;
      constructor(scene: PokeRogue.BattleScene, moveQueue?: Moves[]);
      start(): void;
      playMoveAnim(moveQueue: PokeRogue.enums.Moves[], player: boolean): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlerIndex } from "#app/battle.js";
  //import Pokemon, { PokemonMove } from "#app/field/pokemon.js";
  //import { PokemonPhase } from "./pokemon-phase";
  export declare class MoveEffectPhase extends PokeRogue.phases.PokemonPhase {
      move: PokeRogue.field.PokemonMove;
      protected targets: PokeRogue.BattlerIndex[];
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex, targets: PokeRogue.BattlerIndex[], move: PokeRogue.field.PokemonMove);
      start(): void;
      end(): void;
      /**
         * Resolves whether this phase's invoked move hits or misses the given target
         * @param target {@linkcode Pokemon} the Pokemon targeted by the invoked move
         * @returns `true` if the move does not miss the target; `false` otherwise
         */
      hitCheck(target: PokeRogue.field.Pokemon): boolean;
      /** Returns the {@linkcode Pokemon} using this phase's invoked move */
      getUserPokemon(): Pokemon | undefined;
      /** Returns an array of all {@linkcode Pokemon} targeted by this phase's invoked move */
      getTargets(): Pokemon[];
      /** Returns the first target of this phase's invoked move */
      getTarget(): Pokemon | undefined;
      /**
         * Removes the given {@linkcode Pokemon} from this phase's target list
         * @param target {@linkcode Pokemon} the Pokemon to be removed
         */
      removeTarget(target: PokeRogue.field.Pokemon): void;
      /**
         * Prevents subsequent strikes of this phase's invoked move from occurring
         * @param target {@linkcode Pokemon} if defined, only stop subsequent
         * strikes against this Pokemon
         */
      stopMultiHit(target?: Pokemon): void;
      /** Returns a new MoveEffectPhase with the same properties as this phase */
      getNewHitPhase(): MoveEffectPhase;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlerIndex } from "#app/battle.js";
  //import { PokemonPhase } from "./pokemon-phase";
  export declare class MoveEndPhase extends PokeRogue.phases.PokemonPhase {
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import Pokemon, { PokemonMove } from "#app/field/pokemon.js";
  //import { BattlePhase } from "./battle-phase";
  export declare class MoveHeaderPhase extends PokeRogue.phases.BattlePhase {
      pokemon: PokeRogue.field.Pokemon;
      move: PokeRogue.field.PokemonMove;
      constructor(scene: PokeRogue.BattleScene, pokemon: PokeRogue.field.Pokemon, move: PokeRogue.field.PokemonMove);
      canMove(): boolean;
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlerIndex } from "#app/battle.js";
  //import Pokemon, { PokemonMove } from "#app/field/pokemon.js";
  //import { BattlePhase } from "./battle-phase";
  //import { MoveEffectPhase } from "./move-effect-phase";
  export declare class MovePhase extends PokeRogue.phases.BattlePhase {
      pokemon: PokeRogue.field.Pokemon;
      move: PokeRogue.field.PokemonMove;
      targets: PokeRogue.BattlerIndex[];
      protected followUp: boolean;
      protected ignorePp: boolean;
      protected failed: boolean;
      protected cancelled: boolean;
      constructor(scene: PokeRogue.BattleScene, pokemon: PokeRogue.field.Pokemon, targets: PokeRogue.BattlerIndex[], move: PokeRogue.field.PokemonMove, followUp?: boolean, ignorePp?: boolean);
      canMove(ignoreDisableTags?: boolean): boolean;
      /**Signifies the current move should fail but still use PP */
      fail(): void;
      /**Signifies the current move should cancel and retain PP */
      cancel(): void;
      start(): void;
      getEffectPhase(): MoveEffectPhase;
      showMoveText(): void;
      showFailedText(failedText?: string | null): void;
      end(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import { BattlePhase } from "./battle-phase";
  export declare class NewBattlePhase extends PokeRogue.phases.BattlePhase {
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { NextEncounterPhase } from "./next-encounter-phase";
  export declare class NewBiomeEncounterPhase extends PokeRogue.phases.NextEncounterPhase {
      constructor(scene: PokeRogue.BattleScene);
      doEncounter(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { EncounterPhase } from "./encounter-phase";
  export declare class NextEncounterPhase extends PokeRogue.phases.EncounterPhase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
      doEncounter(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlerIndex } from "#app/battle.js";
  //import { StatusEffect } from "#app/enums/status-effect.js";
  //import Pokemon from "#app/field/pokemon.js";
  //import { PokemonPhase } from "./pokemon-phase";
  export declare class ObtainStatusEffectPhase extends PokeRogue.phases.PokemonPhase {
      public statusEffect;
      public cureTurn;
      public sourceText;
      public sourcePokemon;
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex, statusEffect?: StatusEffect, cureTurn?: integer | null, sourceText?: string, sourcePokemon?: Pokemon);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { Phase } from "#app/phase.js";
  export declare class OutdatedPhase extends PokeRogue.Phase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlePhase } from "./battle-phase";
  export declare class PartyHealPhase extends PokeRogue.phases.BattlePhase {
      public resumeBgm;
      constructor(scene: PokeRogue.BattleScene, resumeBgm: boolean);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import Pokemon from "#app/field/pokemon.js";
  //import { FieldPhase } from "./field-phase";
  export declare abstract class PartyMemberPokemonPhase extends PokeRogue.phases.FieldPhase {
      protected partyMemberIndex: integer;
      protected fieldIndex: integer;
      protected player: boolean;
      constructor(scene: PokeRogue.BattleScene, partyMemberIndex: integer, player: boolean);
      getParty(): Pokemon[];
      getPokemon(): Pokemon;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { Abilities } from "#app/enums/abilities.js";
  //import Pokemon from "#app/field/pokemon.js";
  //import { BattlePhase } from "./battle-phase";
  /**
   * Cures the party of all non-volatile status conditions, shows a message
   * @param {BattleScene} scene The current scene
   * @param {Pokemon} user The user of the move that cures the party
   * @param {string} message The message that should be displayed
   * @param {Abilities} abilityCondition Pokemon with this ability will not be affected ie. Soundproof
   */
  export declare class PartyStatusCurePhase extends PokeRogue.phases.BattlePhase {
      public user;
      public message;
      public abilityCondition;
      constructor(scene: PokeRogue.BattleScene, user: PokeRogue.field.Pokemon, message: string, abilityCondition: PokeRogue.enums.Abilities);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { PlayerPokemon } from "#app/field/pokemon.js";
  //import { PartyMemberPokemonPhase } from "./party-member-pokemon-phase";
  export declare abstract class PlayerPartyMemberPokemonPhase extends PokeRogue.phases.PartyMemberPokemonPhase {
      constructor(scene: PokeRogue.BattleScene, partyMemberIndex: integer);
      getPlayerPokemon(): PlayerPokemon;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlerIndex } from "#app/battle.js";
  //import { CommonAnimPhase } from "./common-anim-phase";
  export declare class PokemonHealPhase extends PokeRogue.phases.CommonAnimPhase {
      public hpHealed;
      public message;
      public showFullHpMessage;
      public skipAnim;
      public revive;
      public healStatus;
      public preventFullHeal;
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex, hpHealed: integer, message: string | null, showFullHpMessage: boolean, skipAnim?: boolean, revive?: boolean, healStatus?: boolean, preventFullHeal?: boolean);
      start(): void;
      end(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlerIndex } from "#app/battle.js";
  //import Pokemon from "#app/field/pokemon.js";
  //import { FieldPhase } from "./field-phase";
  export declare abstract class PokemonPhase extends PokeRogue.phases.FieldPhase {
      protected battlerIndex: PokeRogue.BattlerIndex | integer;
      player: boolean;
      fieldIndex: integer;
      constructor(scene: PokeRogue.BattleScene, battlerIndex?: BattlerIndex | integer);
      getPokemon(): Pokemon;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { Phase } from "#app/phase.js";
  //import { EndCardPhase } from "./end-card-phase";
  export declare class PostGameOverPhase extends PokeRogue.Phase {
      public endCardPhase;
      constructor(scene: PokeRogue.BattleScene, endCardPhase?: EndCardPhase);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlerIndex } from "#app/battle.js";
  //import { PokemonPhase } from "./pokemon-phase";
  export declare class PostSummonPhase extends PokeRogue.phases.PokemonPhase {
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlerIndex } from "#app/battle.js";
  //import { PokemonPhase } from "./pokemon-phase";
  export declare class PostTurnStatusEffectPhase extends PokeRogue.phases.PokemonPhase {
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex);
      start(): void;
      end(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { SpeciesFormChange } from "#app/data/pokemon-forms.js";
  //import Pokemon from "#app/field/pokemon.js";
  //import { BattlePhase } from "./battle-phase";
  export declare class QuietFormChangePhase extends PokeRogue.phases.BattlePhase {
      protected pokemon: PokeRogue.field.Pokemon;
      protected formChange: PokeRogue.data.SpeciesFormChange;
      constructor(scene: PokeRogue.BattleScene, pokemon: PokeRogue.field.Pokemon, formChange: PokeRogue.data.SpeciesFormChange);
      start(): void;
      end(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { Phase } from "#app/phase.js";
  export declare class ReloadSessionPhase extends PokeRogue.Phase {
      public systemDataStr;
      constructor(scene: PokeRogue.BattleScene, systemDataStr?: string);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { SwitchSummonPhase } from "./switch-summon-phase";
  export declare class ReturnPhase extends PokeRogue.phases.SwitchSummonPhase {
      constructor(scene: PokeRogue.BattleScene, fieldIndex: integer);
      switchAndSummon(): void;
      summon(): void;
      onEnd(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import PokemonSpecies from "#app/data/pokemon-species.js";
  //import { ModifierTypeFunc } from "#app/modifier/modifier-type.js";
  //import { ModifierRewardPhase } from "./modifier-reward-phase";
  export declare class RibbonModifierRewardPhase extends PokeRogue.phases.ModifierRewardPhase {
      public species;
      constructor(scene: PokeRogue.BattleScene, modifierTypeFunc: PokeRogue.modifier.ModifierTypeFunc, species: PokeRogue.data.PokemonSpecies);
      doReward(): Promise<void>;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlerIndex } from "#app/battle.js";
  //import { PokemonPhase } from "./pokemon-phase";
  export declare class ScanIvsPhase extends PokeRogue.phases.PokemonPhase {
      public shownIvs;
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex, shownIvs: integer);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { Biome } from "#app/enums/biome.js";
  //import { BattlePhase } from "./battle-phase";
  export declare class SelectBiomePhase extends PokeRogue.phases.BattlePhase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
      generateNextBiome(): Biome;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { Phase } from "#app/phase.js";
  export declare class SelectChallengePhase extends PokeRogue.Phase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { Phase } from "#app/phase.js";
  export declare class SelectGenderPhase extends PokeRogue.Phase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
      end(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { ModifierTier } from "#app/modifier/modifier-tier.js";
  //import { ModifierTypeOption, ModifierPoolType } from "#app/modifier/modifier-type.js";
  //import { Modifier } from "#app/modifier/modifier.js";
  //import { BattlePhase } from "./battle-phase";
  export declare class SelectModifierPhase extends PokeRogue.phases.BattlePhase {
      public rerollCount;
      public modifierTiers;
      constructor(scene: PokeRogue.BattleScene, rerollCount?: integer, modifierTiers?: ModifierTier[]);
      start(): void;
      updateSeed(): void;
      isPlayer(): boolean;
      getRerollCost(typeOptions: PokeRogue.modifier.ModifierTypeOption[], lockRarities: boolean): number;
      getPoolType(): ModifierPoolType;
      getModifierTypeOptions(modifierCount: integer): ModifierTypeOption[];
      addModifier(modifier: PokeRogue.modifier.Modifier): Promise<boolean>;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { Phase } from "#app/phase.js";
  //import { Starter } from "#app/ui/starter-select-ui-handler.js";
  export declare class SelectStarterPhase extends PokeRogue.Phase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
      /**
       * Initialize starters before starting the first battle
       * @param starters {@linkcode Pokemon} with which to start the first battle
       */
      initBattle(starters: PokeRogue.ui.Starter[]): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { PokemonPhase } from "./pokemon-phase";
  export declare class SelectTargetPhase extends PokeRogue.phases.PokemonPhase {
      constructor(scene: PokeRogue.BattleScene, fieldIndex: integer);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlerIndex } from "#app/battle.js";
  //import { PokemonPhase } from "./pokemon-phase";
  export declare class ShinySparklePhase extends PokeRogue.phases.PokemonPhase {
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlerIndex } from "#app/battle.js";
  //import { PokemonPhase } from "./pokemon-phase";
  export declare class ShowAbilityPhase extends PokeRogue.phases.PokemonPhase {
      public passive;
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex, passive?: boolean);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { PlayerPartyMemberPokemonPhase } from "./player-party-member-pokemon-phase";
  export declare class ShowPartyExpBarPhase extends PokeRogue.phases.PlayerPartyMemberPokemonPhase {
      public expValue;
      constructor(scene: PokeRogue.BattleScene, partyMemberIndex: integer, expValue: number);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlePhase } from "./battle-phase";
  export declare class ShowTrainerPhase extends PokeRogue.phases.BattlePhase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import { BattlerIndex } from "#app/battle";
  //import BattleScene from "#app/battle-scene";
  //import Pokemon from "#app/field/pokemon";
  //import { PokemonPhase } from "./pokemon-phase";
  //import { type BattleStat } from "#enums/stat";
  export type StatStageChangeCallback = (target: PokeRogue.field.Pokemon | null, changed: BattleStat[], relativeChanges: number[]) => void;
  export declare class StatStageChangePhase extends PokeRogue.phases.PokemonPhase {
      public stats;
      public selfTarget;
      public stages;
      public showMessage;
      public ignoreAbilities;
      public canBeCopied;
      public onChange;
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex, selfTarget: boolean, stats: BattleStat[], stages: integer, showMessage?: boolean, ignoreAbilities?: boolean, canBeCopied?: boolean, onChange?: StatStageChangeCallback | null);
      start(): void;
      aggregateStatStageChanges(): void;
      getStatStageChangeMessages(stats: BattleStat[], stages: integer, relStages: integer[]): string[];
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { SummonPhase } from "./summon-phase";
  export declare class SummonMissingPhase extends PokeRogue.phases.SummonPhase {
      constructor(scene: PokeRogue.BattleScene, fieldIndex: integer);
      preSummon(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { PartyMemberPokemonPhase } from "./party-member-pokemon-phase";
  export declare class SummonPhase extends PokeRogue.phases.PartyMemberPokemonPhase {
      public loaded;
      constructor(scene: PokeRogue.BattleScene, fieldIndex: integer, player?: boolean, loaded?: boolean);
      start(): void;
      /**
        * Sends out a Pokemon before the battle begins and shows the appropriate messages
        */
      preSummon(): void;
      summon(): void;
      onEnd(): void;
      queuePostSummon(): void;
      end(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { Biome } from "#app/enums/biome.js";
  //import { BattlePhase } from "./battle-phase";
  export declare class SwitchBiomePhase extends PokeRogue.phases.BattlePhase {
      public nextBiome;
      constructor(scene: PokeRogue.BattleScene, nextBiome: PokeRogue.enums.Biome);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlePhase } from "./battle-phase";
  /**
   * Opens the party selector UI and transitions into a {@linkcode SwitchSummonPhase}
   * for the player (if a switch would be valid for the current battle state).
   */
  export declare class SwitchPhase extends PokeRogue.phases.BattlePhase {
      protected fieldIndex: integer;
      public isModal;
      public doReturn;
      /**
         * Creates a new SwitchPhase
         * @param scene {@linkcode BattleScene} Current battle scene
         * @param fieldIndex Field index to switch out
         * @param isModal Indicates if the switch should be forced (true) or is
         * optional (false).
         * @param doReturn Indicates if the party member on the field should be
         * recalled to ball or has already left the field. Passed to {@linkcode SwitchSummonPhase}.
         */
      constructor(scene: PokeRogue.BattleScene, fieldIndex: integer, isModal: boolean, doReturn: boolean);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { SummonPhase } from "./summon-phase";
  export declare class SwitchSummonPhase extends PokeRogue.phases.SummonPhase {
      public slotIndex;
      public doReturn;
      public batonPass;
      public lastPokemon;
      /**
         * Constructor for creating a new SwitchSummonPhase
         * @param scene {@linkcode BattleScene} the scene the phase is associated with
         * @param fieldIndex integer representing position on the battle field
         * @param slotIndex integer for the index of pokemon (in party of 6) to switch into
         * @param doReturn boolean whether to render "comeback" dialogue
         * @param batonPass boolean if the switch is from baton pass
         * @param player boolean if the switch is from the player
         */
      constructor(scene: PokeRogue.BattleScene, fieldIndex: integer, slotIndex: integer, doReturn: boolean, batonPass: boolean, player?: boolean);
      start(): void;
      preSummon(): void;
      switchAndSummon(): void;
      onEnd(): void;
      queuePostSummon(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { MessagePhase } from "./message-phase";
  export declare class TestMessagePhase extends PokeRogue.phases.MessagePhase {
      constructor(scene: PokeRogue.BattleScene, message: string);
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { GameModes } from "#app/game-mode.js";
  //import { Phase } from "#app/phase.js";
  export declare class TitlePhase extends PokeRogue.Phase {
      public loaded;
      public lastSessionData;
      gameMode: PokeRogue.GameModes;
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
      showOptions(): void;
      loadSaveSlot(slotId: integer): void;
      initDailyRun(): void;
      end(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlePhase } from "./battle-phase";
  export declare class ToggleDoublePositionPhase extends PokeRogue.phases.BattlePhase {
      public double;
      constructor(scene: PokeRogue.BattleScene, double: boolean);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { TrainerType } from "#app/enums/trainer-type.js";
  //import { BattlePhase } from "./battle-phase";
  export declare class TrainerMessageTestPhase extends PokeRogue.phases.BattlePhase {
      public trainerTypes;
      constructor(scene: PokeRogue.BattleScene, ...trainerTypes: PokeRogue.enums.TrainerType[]);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlePhase } from "./battle-phase";
  export declare class TrainerVictoryPhase extends PokeRogue.phases.BattlePhase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { FieldPhase } from "./field-phase";
  export declare class TurnEndPhase extends PokeRogue.phases.FieldPhase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { FieldPhase } from "./field-phase";
  export declare class TurnInitPhase extends PokeRogue.phases.FieldPhase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene";
  //import { FieldPhase } from "./field-phase";
  //import { BattlerIndex } from "#app/battle";
  export declare class TurnStartPhase extends PokeRogue.phases.FieldPhase {
      constructor(scene: PokeRogue.BattleScene);
      /**
       * This orders the active Pokemon on the field by speed into an BattlerIndex array and returns that array.
       * It also checks for Trick Room and reverses the array if it is present.
       * @returns {@linkcode BattlerIndex[]} the battle indices of all pokemon on the field ordered by speed
       */
      getSpeedOrder(): BattlerIndex[];
      /**
       * This takes the result of getSpeedOrder and applies priority / bypass speed attributes to it.
       * This also considers the priority levels of various commands and changes the result of getSpeedOrder based on such.
       * @returns {@linkcode BattlerIndex[]} the final sequence of commands for this turn
       */
      getCommandOrder(): BattlerIndex[];
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { Phase } from "#app/phase.js";
  export declare class UnavailablePhase extends PokeRogue.Phase {
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { Phase } from "#app/phase.js";
  //import { Unlockables } from "#app/system/unlockables.js";
  export declare class UnlockPhase extends PokeRogue.Phase {
      public unlockable;
      constructor(scene: PokeRogue.BattleScene, unlockable: PokeRogue.system.Unlockables);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene.js";
  //import { BattlerIndex } from "#app/battle.js";
  //import { PokemonPhase } from "./pokemon-phase";
  export declare class VictoryPhase extends PokeRogue.phases.PokemonPhase {
      constructor(scene: PokeRogue.BattleScene, battlerIndex: PokeRogue.BattlerIndex);
      start(): void;
  }
  
}

declare namespace PokeRogue.phases {
  //import BattleScene from "#app/battle-scene";
  //import { Weather } from "#app/data/weather";
  //import { CommonAnimPhase } from "./common-anim-phase";
  export declare class WeatherEffectPhase extends PokeRogue.phases.CommonAnimPhase {
      weather: PokeRogue.data.Weather | null;
      constructor(scene: PokeRogue.BattleScene);
      start(): void;
  }
  
}

declare namespace PokeRogue.pipelines {
  export class FieldSpritePipeline extends Phaser.Renderer.WebGL.Pipelines.MultiPipeline {
      constructor(game: Phaser.Game, config?: Phaser.Types.Renderer.WebGL.WebGLPipelineConfig);
      onPreRender(): void;
      onBind(gameObject: Phaser.GameObjects.GameObject): void;
      onBatch(gameObject: Phaser.GameObjects.GameObject): void;
  }
  
}

declare namespace PokeRogue.pipelines {
  import { Game } from "phaser";
  export class InvertPostFX extends Phaser.Renderer.WebGL.Pipelines.PostFXPipeline {
      constructor(game: Game);
  }
  
}

declare namespace PokeRogue.pipelines {
  //import FieldSpritePipeline from "./field-sprite";
  export class SpritePipeline extends PokeRogue.pipelines.FieldSpritePipeline {
      public _tone;
      constructor(game: Phaser.Game);
      onPreRender(): void;
      onBind(gameObject: Phaser.GameObjects.GameObject): void;
      onBatch(gameObject: Phaser.GameObjects.GameObject): void;
      batchQuad(gameObject: Phaser.GameObjects.GameObject, x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, u0: number, v0: number, u1: number, v1: number, tintTL: number, tintTR: number, tintBL: number, tintBR: number, tintEffect: number | boolean, texture?: Phaser.Renderer.WebGL.Wrappers.WebGLTextureWrapper, unit?: number): boolean;
      get tone(): number[];
      set tone(value: number[]);
  }
  
}

declare namespace PokeRogue.plugins {
  export class CacheBustedLoaderPlugin extends Phaser.Loader.LoaderPlugin {
      constructor(scene: Phaser.Scene);
      get manifest(): object;
      set manifest(manifestObj: object);
      addFile(file: any): void;
  }
  
}

declare namespace PokeRogue.plugins {
  import i18next from "i18next";
  export declare function initI18n(): Promise<void>;

  export declare function getIsInitialized(): boolean;
  
}

declare namespace PokeRogue.plugins.vite {
  import { type Plugin as VitePlugin } from "vite";
  /**
   * Plugin to mnify json files in the build folder after the bundling is done.
   * @param basePath base path/es starting inside the build dir (e.g. will always start with "/dist" if dist is the build dir)
   * @param recursive if true, will crawl subdirectories
   */
  export declare function minifyJsonPlugin(basePath: string | string[], recursive?: boolean): VitePlugin;
  
}

declare namespace PokeRogue {
  export declare const legacyCompatibleImages: string[];
  export declare class SceneBase extends Phaser.Scene {
      /**
       * Since everything is scaled up by 6 by default using the game.canvas is annoying
       * Until such point that we use the canvas normally, this will be easier than
       * having to divide every width and heigh by 6 to position and scale the ui
       * @readonly
       * @defaultValue
       * width: `320`
       * height: `180`
       */
      readonly scaledCanvas: {
          width: number;
          height: number;
      };
      constructor(config?: string | Phaser.Types.Scenes.SettingsConfig);
      getCachedUrl(url: string): string;
      loadImage(key: string, folder: string, filename?: string): void;
      loadSpritesheet(key: string, folder: string, size: integer, filename?: string): void;
      loadAtlas(key: string, folder: string, filenameRoot?: string): void;
      loadSe(key: string, folder?: string, filenames?: string | string[]): void;
      loadBgm(key: string, filename?: string): void;
  }
  
}

declare namespace PokeRogue.system {
  import { Modifier } from "typescript";
  //import BattleScene from "../battle-scene";
  //import { PlayerGender } from "#enums/player-gender";
  //import { Challenge } from "#app/data/challenge";
  //import { ConditionFn } from "#app/@types/common";
  export declare enum AchvTier {
      COMMON = 0,
      GREAT = 1,
      ULTRA = 2,
      ROGUE = 3,
      MASTER = 4
  }
  export declare class Achv {
      localizationKey: string;
      id: string;
      name: string;
      description: string;
      iconImage: string;
      score: integer;
      secret: boolean;
      hasParent: boolean;
      parentId: string;
      public conditionFunc;
      constructor(localizationKey: string, name: string, description: string, iconImage: string, score: integer, conditionFunc?: ConditionFn);
      /**
       * Get the name of the achievement based on the gender of the player
       * @param playerGender - the gender of the player (default: {@linkcode PlayerGender.UNSET})
       * @returns the name of the achievement localized for the player gender
       */
      getName(playerGender?: PlayerGender): string;
      getDescription(): string;
      getIconImage(): string;
      setSecret(hasParent?: boolean): this;
      validate(scene: PokeRogue.BattleScene, args?: any[]): boolean;
      getTier(): AchvTier;
  }
  export declare class MoneyAchv extends Achv {
      moneyAmount: integer;
      constructor(localizationKey: string, name: string, moneyAmount: integer, iconImage: string, score: integer);
  }
  export declare class RibbonAchv extends Achv {
      ribbonAmount: integer;
      constructor(localizationKey: string, name: string, ribbonAmount: integer, iconImage: string, score: integer);
  }
  export declare class DamageAchv extends Achv {
      damageAmount: integer;
      constructor(localizationKey: string, name: string, damageAmount: integer, iconImage: string, score: integer);
  }
  export declare class HealAchv extends Achv {
      healAmount: integer;
      constructor(localizationKey: string, name: string, healAmount: integer, iconImage: string, score: integer);
  }
  export declare class LevelAchv extends Achv {
      level: integer;
      constructor(localizationKey: string, name: string, level: integer, iconImage: string, score: integer);
  }
  export declare class ModifierAchv extends Achv {
      constructor(localizationKey: string, name: string, description: string, iconImage: string, score: integer, modifierFunc: (modifier: Modifier) => boolean);
  }
  export declare class ChallengeAchv extends Achv {
      constructor(localizationKey: string, name: string, description: string, iconImage: string, score: integer, challengeFunc: (challenge: PokeRogue.data.Challenge, scene: PokeRogue.BattleScene) => boolean);
  }
  /**
   * Get the description of an achievement from the localization file with all the necessary variables filled in
   * @param localizationKey The localization key of the achievement
   * @returns The description of the achievement
   */
  export declare function getAchievementDescription(localizationKey: string): string;
  export declare const achvs: {
      _10K_MONEY: MoneyAchv;
      _100K_MONEY: MoneyAchv;
      _1M_MONEY: MoneyAchv;
      _10M_MONEY: MoneyAchv;
      _250_DMG: DamageAchv;
      _1000_DMG: DamageAchv;
      _2500_DMG: DamageAchv;
      _10000_DMG: DamageAchv;
      _250_HEAL: HealAchv;
      _1000_HEAL: HealAchv;
      _2500_HEAL: HealAchv;
      _10000_HEAL: HealAchv;
      LV_100: LevelAchv;
      LV_250: LevelAchv;
      LV_1000: LevelAchv;
      _10_RIBBONS: RibbonAchv;
      _25_RIBBONS: RibbonAchv;
      _50_RIBBONS: RibbonAchv;
      _75_RIBBONS: RibbonAchv;
      _100_RIBBONS: RibbonAchv;
      TRANSFER_MAX_STAT_STAGE: Achv;
      MAX_FRIENDSHIP: Achv;
      MEGA_EVOLVE: Achv;
      GIGANTAMAX: Achv;
      TERASTALLIZE: Achv;
      STELLAR_TERASTALLIZE: Achv;
      SPLICE: Achv;
      MINI_BLACK_HOLE: ModifierAchv;
      CATCH_MYTHICAL: Achv;
      CATCH_SUB_LEGENDARY: Achv;
      CATCH_LEGENDARY: Achv;
      SEE_SHINY: Achv;
      SHINY_PARTY: Achv;
      HATCH_MYTHICAL: Achv;
      HATCH_SUB_LEGENDARY: Achv;
      HATCH_LEGENDARY: Achv;
      HATCH_SHINY: Achv;
      HIDDEN_ABILITY: Achv;
      PERFECT_IVS: Achv;
      CLASSIC_VICTORY: Achv;
      UNEVOLVED_CLASSIC_VICTORY: Achv;
      MONO_GEN_ONE_VICTORY: ChallengeAchv;
      MONO_GEN_TWO_VICTORY: ChallengeAchv;
      MONO_GEN_THREE_VICTORY: ChallengeAchv;
      MONO_GEN_FOUR_VICTORY: ChallengeAchv;
      MONO_GEN_FIVE_VICTORY: ChallengeAchv;
      MONO_GEN_SIX_VICTORY: ChallengeAchv;
      MONO_GEN_SEVEN_VICTORY: ChallengeAchv;
      MONO_GEN_EIGHT_VICTORY: ChallengeAchv;
      MONO_GEN_NINE_VICTORY: ChallengeAchv;
      MONO_NORMAL: ChallengeAchv;
      MONO_FIGHTING: ChallengeAchv;
      MONO_FLYING: ChallengeAchv;
      MONO_POISON: ChallengeAchv;
      MONO_GROUND: ChallengeAchv;
      MONO_ROCK: ChallengeAchv;
      MONO_BUG: ChallengeAchv;
      MONO_GHOST: ChallengeAchv;
      MONO_STEEL: ChallengeAchv;
      MONO_FIRE: ChallengeAchv;
      MONO_WATER: ChallengeAchv;
      MONO_GRASS: ChallengeAchv;
      MONO_ELECTRIC: ChallengeAchv;
      MONO_PSYCHIC: ChallengeAchv;
      MONO_ICE: ChallengeAchv;
      MONO_DRAGON: ChallengeAchv;
      MONO_DARK: ChallengeAchv;
      MONO_FAIRY: ChallengeAchv;
      FRESH_START: ChallengeAchv;
      INVERSE_BATTLE: ChallengeAchv;
  };
  export declare function initAchievements(): void;
  
}

declare namespace PokeRogue.system {
  //import { Arena } from "../field/arena";
  //import { ArenaTag } from "../data/arena-tag";
  //import { Biome } from "#enums/biome";
  //import { Weather } from "../data/weather";
  //import { Terrain } from "#app/data/terrain.js";
  export class ArenaData {
      biome: PokeRogue.enums.Biome;
      weather: PokeRogue.data.Weather | null;
      terrain: PokeRogue.data.Terrain | null;
      tags: PokeRogue.data.ArenaTag[];
      constructor(source: PokeRogue.field.Arena | any);
  }
  
}

declare namespace PokeRogue.system {
  //import { Challenge } from "#app/data/challenge.js";
  export class ChallengeData {
      id: integer;
      value: integer;
      severity: integer;
      constructor(source: PokeRogue.data.Challenge | any);
      toChallenge(): Challenge;
  }
  
}

declare namespace PokeRogue.system {
  //import { EggTier } from "#enums/egg-type";
  //import { Species } from "#enums/species";
  //import { VariantTier } from "#enums/variant-tiers";
  //import { Egg } from "../data/egg";
  //import { EggSourceType } from "#app/enums/egg-source-types.js";
  export class EggData {
      id: integer;
      tier: PokeRogue.enums.EggTier;
      sourceType: PokeRogue.enums.EggSourceType;
      hatchWaves: integer;
      timestamp: integer;
      variantTier: PokeRogue.enums.VariantTier;
      isShiny: boolean;
      species: PokeRogue.enums.Species;
      eggMoveIndex: number;
      overrideHiddenAbility: boolean;
      constructor(source: PokeRogue.data.Egg | any);
      toEgg(): Egg;
  }
  
}

declare namespace PokeRogue.system {
  //import BattleScene, { PokeballCounts } from "../battle-scene";
  //import Pokemon from "../field/pokemon";
  //import PokemonSpecies from "../data/pokemon-species";
  //import PokemonData from "./pokemon-data";
  //import PersistentModifierData from "./modifier-data";
  //import ArenaData from "./arena-data";
  //import { GameModes } from "../game-mode";
  //import { BattleType } from "../battle";
  //import TrainerData from "./trainer-data";
  //import EggData from "./egg-data";
  //import { Egg } from "../data/egg";
  //import { Nature } from "../data/nature";
  //import { GameStats } from "./game-stats";
  //import { Tutorial } from "../tutorial";
  //import { Variant } from "#app/data/variant";
  //import { SettingGamepad } from "./settings/settings-gamepad";
  //import { SettingKeyboard } from "#app/system/settings/settings-keyboard";
  //import ChallengeData from "./challenge-data";
  //import { Device } from "#enums/devices";
  //import { GameDataType } from "#enums/game-data-type";
  //import { Moves } from "#enums/moves";
  //import { PlayerGender } from "#enums/player-gender";
  //import { Species } from "#enums/species";
  export declare const defaultStarterSpecies: PokeRogue.enums.Species[];
  export declare function getDataTypeKey(dataType: PokeRogue.enums.GameDataType, slotId?: integer): string;
  export declare function encrypt(data: string, bypassLogin: boolean): string;
  export declare function decrypt(data: string, bypassLogin: boolean): string;
  export interface SystemSaveData {
      trainerId: integer;
      secretId: integer;
      gender: PokeRogue.enums.PlayerGender;
      dexData: DexData;
      starterData: StarterData;
      gameStats: PokeRogue.system.GameStats;
      unlocks: Unlocks;
      achvUnlocks: AchvUnlocks;
      voucherUnlocks: VoucherUnlocks;
      voucherCounts: VoucherCounts;
      eggs: PokeRogue.system.EggData[];
      gameVersion: string;
      timestamp: integer;
      eggPity: integer[];
      unlockPity: integer[];
  }
  export interface SessionSaveData {
      seed: string;
      playTime: integer;
      gameMode: PokeRogue.GameModes;
      party: PokeRogue.system.PokemonData[];
      enemyParty: PokeRogue.system.PokemonData[];
      modifiers: PokeRogue.system.PersistentModifierData[];
      enemyModifiers: PokeRogue.system.PersistentModifierData[];
      arena: PokeRogue.system.ArenaData;
      pokeballCounts: PokeRogue.PokeballCounts;
      money: integer;
      score: integer;
      waveIndex: integer;
      battleType: PokeRogue.BattleType;
      trainer: PokeRogue.system.TrainerData;
      gameVersion: string;
      timestamp: integer;
      challenges: PokeRogue.system.ChallengeData[];
  }
  interface Unlocks {
      [key: integer]: boolean;
  }
  interface AchvUnlocks {
      [key: string]: integer;
  }
  interface VoucherUnlocks {
      [key: string]: integer;
  }
  export interface VoucherCounts {
      [type: string]: integer;
  }
  export interface DexData {
      [key: integer]: DexEntry;
  }
  export interface DexEntry {
      seenAttr: bigint;
      caughtAttr: bigint;
      natureAttr: integer;
      seenCount: integer;
      caughtCount: integer;
      hatchedCount: integer;
      ivs: integer[];
  }
  export declare const DexAttr: {
      NON_SHINY: bigint;
      SHINY: bigint;
      MALE: bigint;
      FEMALE: bigint;
      DEFAULT_VARIANT: bigint;
      VARIANT_2: bigint;
      VARIANT_3: bigint;
      DEFAULT_FORM: bigint;
  };
  export interface DexAttrProps {
      shiny: boolean;
      female: boolean;
      variant: PokeRogue.data.Variant;
      formIndex: integer;
  }
  export declare const AbilityAttr: {
      ABILITY_1: number;
      ABILITY_2: number;
      ABILITY_HIDDEN: number;
  };
  export type RunHistoryData = Record<number, RunEntry>;
  export interface RunEntry {
      entry: SessionSaveData;
      isVictory: boolean;
      isFavorite: boolean;
  }
  export type StarterMoveset = [Moves] | [Moves, Moves] | [Moves, Moves, Moves] | [Moves, Moves, Moves, Moves];
  export interface StarterFormMoveData {
      [key: integer]: StarterMoveset;
  }
  export interface StarterMoveData {
      [key: integer]: StarterMoveset | StarterFormMoveData;
  }
  export interface StarterAttributes {
      nature?: integer;
      ability?: integer;
      variant?: integer;
      form?: integer;
      female?: boolean;
      shiny?: boolean;
      favorite?: boolean;
      nickname?: string;
  }
  export interface StarterPreferences {
      [key: integer]: StarterAttributes;
  }
  export declare class StarterPrefs {
      static load(): StarterPreferences;
      static save(prefs: StarterPreferences): void;
  }
  export interface StarterDataEntry {
      moveset: StarterMoveset | StarterFormMoveData | null;
      eggMoves: integer;
      candyCount: integer;
      friendship: integer;
      abilityAttr: integer;
      passiveAttr: integer;
      valueReduction: integer;
      classicWinCount: integer;
  }
  export interface StarterData {
      [key: integer]: StarterDataEntry;
  }
  export interface TutorialFlags {
      [key: string]: boolean;
  }
  export interface SeenDialogues {
      [key: string]: boolean;
  }
  export declare class GameData {
      public scene;
      trainerId: integer;
      secretId: integer;
      gender: PokeRogue.enums.PlayerGender;
      dexData: DexData;
      public defaultDexData;
      starterData: StarterData;
      gameStats: PokeRogue.system.GameStats;
      runHistory: RunHistoryData;
      unlocks: Unlocks;
      achvUnlocks: AchvUnlocks;
      voucherUnlocks: VoucherUnlocks;
      voucherCounts: VoucherCounts;
      eggs: PokeRogue.data.Egg[];
      eggPity: integer[];
      unlockPity: integer[];
      constructor(scene: PokeRogue.BattleScene);
      getSystemSaveData(): SystemSaveData;
      saveSystem(): Promise<boolean>;
      loadSystem(): Promise<boolean>;
      initSystem(systemDataStr: string, cachedSystemDataStr?: string): Promise<boolean>;
      /**
       * Retrieves current run history data, organized by time stamp.
       * At the moment, only retrievable from locale cache
       */
      getRunHistoryData(scene: PokeRogue.BattleScene): Promise<RunHistoryData>;
      /**
       * Saves a new entry to Run History
       * @param scene: PokeRogue.BattleScene object
       * @param runEntry: most recent SessionSaveData of the run
       * @param isVictory: result of the run
       * Arbitrary limit of 25 runs per player - Will delete runs, starting with the oldest one, if needed
       */
      saveRunHistory(scene: PokeRogue.BattleScene, runEntry: SessionSaveData, isVictory: boolean): Promise<boolean>;
      parseSystemData(dataStr: string): SystemSaveData;
      convertSystemDataStr(dataStr: string, shorten?: boolean): string;
      verify(): Promise<boolean>;
      clearLocalData(): void;
      /**
       * Saves a setting to localStorage
       * @param setting string ideally of SettingKeys
       * @param valueIndex index of the setting's option
       * @returns true
       */
      saveSetting(setting: string, valueIndex: integer): boolean;
      /**
       * Saves the mapping configurations for a specified device.
       *
       * @param deviceName - The name of the device for which the configurations are being saved.
       * @param config - The configuration object containing custom mapping details.
       * @returns `true` if the configurations are successfully saved.
       */
      saveMappingConfigs(deviceName: string, config: any): boolean;
      /**
       * Loads the mapping configurations from localStorage and injects them into the input controller.
       *
       * @returns `true` if the configurations are successfully loaded and injected; `false` if no configurations are found in localStorage.
       *
       * @remarks
       * This method checks if the 'mappingConfigs' entry exists in localStorage. If it does not exist, the method returns `false`.
       * If 'mappingConfigs' exists, it parses the configurations and injects each configuration into the input controller
       * for the corresponding gamepad or device key. The method then returns `true` to indicate success.
       */
      loadMappingConfigs(): boolean;
      resetMappingToFactory(): boolean;
      /**
       * Saves a gamepad setting to localStorage.
       *
       * @param setting - The gamepad setting to save.
       * @param valueIndex - The index of the value to set for the gamepad setting.
       * @returns `true` if the setting is successfully saved.
       *
       * @remarks
       * This method initializes an empty object for gamepad settings if none exist in localStorage.
       * It then updates the setting in the current scene and iterates over the default gamepad settings
       * to update the specified setting with the new value. Finally, it saves the updated settings back
       * to localStorage and returns `true` to indicate success.
       */
      saveControlSetting(device: PokeRogue.enums.Device, localStoragePropertyName: string, setting: PokeRogue.system.settings.SettingGamepad | SettingKeyboard, settingDefaults: any, valueIndex: integer): boolean;
      /**
       * Loads Settings from local storage if available
       * @returns true if succesful, false if not
       */
      public loadSettings;
      public loadGamepadSettings;
      saveTutorialFlag(tutorial: PokeRogue.Tutorial, flag: boolean): boolean;
      getTutorialFlags(): TutorialFlags;
      saveSeenDialogue(dialogue: string): boolean;
      getSeenDialogues(): SeenDialogues;
      getSessionSaveData(scene: PokeRogue.BattleScene): SessionSaveData;
      getSession(slotId: integer): Promise<SessionSaveData | null>;
      loadSession(scene: PokeRogue.BattleScene, slotId: integer, sessionData?: SessionSaveData): Promise<boolean>;
      deleteSession(slotId: integer): Promise<boolean>;
      offlineNewClear(scene: PokeRogue.BattleScene): Promise<boolean>;
      tryClearSession(scene: PokeRogue.BattleScene, slotId: integer): Promise<[success: boolean, newClear: boolean]>;
      parseSessionData(dataStr: string): SessionSaveData;
      saveAll(scene: PokeRogue.BattleScene, skipVerification?: boolean, sync?: boolean, useCachedSession?: boolean, useCachedSystem?: boolean): Promise<boolean>;
      tryExportData(dataType: PokeRogue.enums.GameDataType, slotId?: integer): Promise<boolean>;
      importData(dataType: PokeRogue.enums.GameDataType, slotId?: integer): void;
      public initDexData;
      public initStarterData;
      setPokemonSeen(pokemon: PokeRogue.field.Pokemon, incrementCount?: boolean, trainer?: boolean): void;
      setPokemonCaught(pokemon: PokeRogue.field.Pokemon, incrementCount?: boolean, fromEgg?: boolean, showMessage?: boolean): Promise<void>;
      setPokemonSpeciesCaught(pokemon: PokeRogue.field.Pokemon, species: PokeRogue.data.PokemonSpecies, incrementCount?: boolean, fromEgg?: boolean, showMessage?: boolean): Promise<void>;
      incrementRibbonCount(species: PokeRogue.data.PokemonSpecies, forStarter?: boolean): integer;
      addStarterCandy(species: PokeRogue.data.PokemonSpecies, count: integer): void;
      setEggMoveUnlocked(species: PokeRogue.data.PokemonSpecies, eggMoveIndex: integer, showMessage?: boolean): Promise<boolean>;
      updateSpeciesDexIvs(speciesId: PokeRogue.enums.Species, ivs: integer[]): void;
      getSpeciesCount(dexEntryPredicate: (entry: DexEntry) => boolean): integer;
      getStarterCount(dexEntryPredicate: (entry: DexEntry) => boolean): integer;
      getSpeciesDefaultDexAttr(species: PokeRogue.data.PokemonSpecies, forSeen?: boolean, optimistic?: boolean): bigint;
      getSpeciesDexAttrProps(species: PokeRogue.data.PokemonSpecies, dexAttr: bigint): DexAttrProps;
      getStarterSpeciesDefaultAbilityIndex(species: PokeRogue.data.PokemonSpecies): integer;
      getSpeciesDefaultNature(species: PokeRogue.data.PokemonSpecies): Nature;
      getSpeciesDefaultNatureAttr(species: PokeRogue.data.PokemonSpecies): integer;
      getDexAttrLuck(dexAttr: bigint): integer;
      getNaturesForAttr(natureAttr?: integer): Nature[];
      getSpeciesStarterValue(speciesId: PokeRogue.enums.Species): number;
      getFormIndex(attr: bigint): integer;
      getFormAttr(formIndex: integer): bigint;
      consolidateDexData(dexData: DexData): void;
      migrateStarterAbilities(systemData: SystemSaveData, initialStarterData?: StarterData): void;
  }
  export {};
  
}

declare namespace PokeRogue.system {
  export declare function initGameSpeed(): void;
  
}

declare namespace PokeRogue.system {
  export declare class GameStats {
      playTime: integer;
      battles: integer;
      classicSessionsPlayed: integer;
      sessionsWon: integer;
      ribbonsOwned: integer;
      dailyRunSessionsPlayed: integer;
      dailyRunSessionsWon: integer;
      endlessSessionsPlayed: integer;
      highestEndlessWave: integer;
      highestLevel: integer;
      highestMoney: integer;
      highestDamage: integer;
      highestHeal: integer;
      pokemonSeen: integer;
      pokemonDefeated: integer;
      pokemonCaught: integer;
      pokemonHatched: integer;
      subLegendaryPokemonSeen: integer;
      subLegendaryPokemonCaught: integer;
      subLegendaryPokemonHatched: integer;
      legendaryPokemonSeen: integer;
      legendaryPokemonCaught: integer;
      legendaryPokemonHatched: integer;
      mythicalPokemonSeen: integer;
      mythicalPokemonCaught: integer;
      mythicalPokemonHatched: integer;
      shinyPokemonSeen: integer;
      shinyPokemonCaught: integer;
      shinyPokemonHatched: integer;
      pokemonFused: integer;
      trainersDefeated: integer;
      eggsPulled: integer;
      rareEggsPulled: integer;
      epicEggsPulled: integer;
      legendaryEggsPulled: integer;
      manaphyEggsPulled: integer;
      constructor(source?: any);
  }
  
}

declare namespace PokeRogue.system {
  //import BattleScene from "../battle-scene";
  //import { PersistentModifier } from "../modifier/modifier";
  export class ModifierData {
      player: boolean;
      typeId: string;
      typePregenArgs: any[];
      args: any[];
      stackCount: integer;
      className: string;
      constructor(source: PokeRogue.modifier.PersistentModifier | any, player: boolean);
      toModifier(scene: PokeRogue.BattleScene, constructor: any): PersistentModifier | null;
  }
  
}

declare namespace PokeRogue.system {
  //import { BattleType } from "../battle";
  //import BattleScene from "../battle-scene";
  //import { Gender } from "../data/gender";
  //import { Nature } from "../data/nature";
  //import { PokeballType } from "../data/pokeball";
  //import { Status } from "../data/status-effect";
  //import Pokemon, { PokemonMove, PokemonSummonData } from "../field/pokemon";
  //import { Variant } from "#app/data/variant";
  //import { Biome } from "#enums/biome";
  //import { Moves } from "#enums/moves";
  //import { Species } from "#enums/species";
  export class PokemonData {
      id: integer;
      player: boolean;
      species: PokeRogue.enums.Species;
      nickname: string;
      formIndex: integer;
      abilityIndex: integer;
      passive: boolean;
      shiny: boolean;
      variant: PokeRogue.data.Variant;
      pokeball: PokeRogue.data.PokeballType;
      level: integer;
      exp: integer;
      levelExp: integer;
      gender: PokeRogue.data.Gender;
      hp: integer;
      stats: integer[];
      ivs: integer[];
      nature: PokeRogue.data.Nature;
      natureOverride: PokeRogue.data.Nature | -1;
      moveset: (PokemonMove | null)[];
      status: PokeRogue.data.Status | null;
      friendship: integer;
      metLevel: integer;
      metBiome: PokeRogue.enums.Biome | -1;
      metSpecies: PokeRogue.enums.Species;
      luck: integer;
      pauseEvolutions: boolean;
      pokerus: boolean;
      usedTMs: PokeRogue.enums.Moves[];
      fusionSpecies: PokeRogue.enums.Species;
      fusionFormIndex: integer;
      fusionAbilityIndex: integer;
      fusionShiny: boolean;
      fusionVariant: PokeRogue.data.Variant;
      fusionGender: PokeRogue.data.Gender;
      fusionLuck: integer;
      boss: boolean;
      bossSegments?: integer;
      summonData: PokeRogue.field.PokemonSummonData;
      constructor(source: PokeRogue.field.Pokemon | any, forHistory?: boolean);
      toPokemon(scene: PokeRogue.BattleScene, battleType?: BattleType, partyMemberIndex?: integer, double?: boolean): Pokemon;
  }
  
}

declare namespace PokeRogue.system {
  //import { GameModes } from "../game-mode";
  //import PokemonData from "./pokemon-data";
  //import PersistentModifierData from "./modifier-data";
  export declare enum SessionHistoryResult {
      ACTIVE = 0,
      WIN = 1,
      LOSS = 2
  }
  export interface SessionHistory {
      seed: string;
      playTime: integer;
      result: SessionHistoryResult;
      gameMode: PokeRogue.GameModes;
      party: PokeRogue.system.PokemonData[];
      modifiers: PokeRogue.system.PersistentModifierData[];
      money: integer;
      waveIndex: integer;
      gameVersion: string;
      timestamp: integer;
  }
  
}

declare namespace PokeRogue.system.settings {
  //import BattleScene from "../../battle-scene";
  //import { SettingKeyboard } from "#app/system/settings/settings-keyboard";
  export declare enum SettingGamepad {
      Controller = "CONTROLLER",
      Gamepad_Support = "GAMEPAD_SUPPORT",
      Button_Up = "BUTTON_UP",
      Button_Down = "BUTTON_DOWN",
      Button_Left = "BUTTON_LEFT",
      Button_Right = "BUTTON_RIGHT",
      Button_Action = "BUTTON_ACTION",
      Button_Cancel = "BUTTON_CANCEL",
      Button_Menu = "BUTTON_MENU",
      Button_Stats = "BUTTON_STATS",
      Button_Cycle_Form = "BUTTON_CYCLE_FORM",
      Button_Cycle_Shiny = "BUTTON_CYCLE_SHINY",
      Button_Cycle_Gender = "BUTTON_CYCLE_GENDER",
      Button_Cycle_Ability = "BUTTON_CYCLE_ABILITY",
      Button_Cycle_Nature = "BUTTON_CYCLE_NATURE",
      Button_Cycle_Variant = "BUTTON_CYCLE_VARIANT",
      Button_Speed_Up = "BUTTON_SPEED_UP",
      Button_Slow_Down = "BUTTON_SLOW_DOWN",
      Button_Submit = "BUTTON_SUBMIT"
  }
  export declare const settingGamepadOptions: {
      CONTROLLER: string[];
      GAMEPAD_SUPPORT: string[];
      BUTTON_UP: string[];
      BUTTON_DOWN: string[];
      BUTTON_LEFT: string[];
      BUTTON_RIGHT: string[];
      BUTTON_ACTION: string[];
      BUTTON_CANCEL: string[];
      BUTTON_MENU: string[];
      BUTTON_STATS: string[];
      BUTTON_CYCLE_FORM: string[];
      BUTTON_CYCLE_SHINY: string[];
      BUTTON_CYCLE_GENDER: string[];
      BUTTON_CYCLE_ABILITY: string[];
      BUTTON_CYCLE_NATURE: string[];
      BUTTON_CYCLE_VARIANT: string[];
      BUTTON_SPEED_UP: string[];
      BUTTON_SLOW_DOWN: string[];
      BUTTON_SUBMIT: string[];
  };
  export declare const settingGamepadDefaults: {
      CONTROLLER: number;
      GAMEPAD_SUPPORT: number;
      BUTTON_UP: number;
      BUTTON_DOWN: number;
      BUTTON_LEFT: number;
      BUTTON_RIGHT: number;
      BUTTON_ACTION: number;
      BUTTON_CANCEL: number;
      BUTTON_MENU: number;
      BUTTON_STATS: number;
      BUTTON_CYCLE_FORM: number;
      BUTTON_CYCLE_SHINY: number;
      BUTTON_CYCLE_GENDER: number;
      BUTTON_CYCLE_ABILITY: number;
      BUTTON_CYCLE_NATURE: number;
      BUTTON_CYCLE_VARIANT: number;
      BUTTON_SPEED_UP: number;
      BUTTON_SLOW_DOWN: number;
      BUTTON_SUBMIT: number;
  };
  export declare const settingGamepadBlackList: PokeRogue.system.settings.SettingKeyboard[];
  export declare function setSettingGamepad(scene: PokeRogue.BattleScene, setting: SettingGamepad, value: integer): boolean;
  
}

declare namespace PokeRogue.system.settings {
  //import BattleScene from "#app/battle-scene";
  export declare enum SettingKeyboard {
      Button_Up = "BUTTON_UP",
      Alt_Button_Up = "ALT_BUTTON_UP",
      Button_Down = "BUTTON_DOWN",
      Alt_Button_Down = "ALT_BUTTON_DOWN",
      Button_Left = "BUTTON_LEFT",
      Alt_Button_Left = "ALT_BUTTON_LEFT",
      Button_Right = "BUTTON_RIGHT",
      Alt_Button_Right = "ALT_BUTTON_RIGHT",
      Button_Action = "BUTTON_ACTION",
      Alt_Button_Action = "ALT_BUTTON_ACTION",
      Button_Cancel = "BUTTON_CANCEL",
      Alt_Button_Cancel = "ALT_BUTTON_CANCEL",
      Button_Menu = "BUTTON_MENU",
      Alt_Button_Menu = "ALT_BUTTON_MENU",
      Button_Stats = "BUTTON_STATS",
      Alt_Button_Stats = "ALT_BUTTON_STATS",
      Button_Cycle_Form = "BUTTON_CYCLE_FORM",
      Alt_Button_Cycle_Form = "ALT_BUTTON_CYCLE_FORM",
      Button_Cycle_Shiny = "BUTTON_CYCLE_SHINY",
      Alt_Button_Cycle_Shiny = "ALT_BUTTON_CYCLE_SHINY",
      Button_Cycle_Gender = "BUTTON_CYCLE_GENDER",
      Alt_Button_Cycle_Gender = "ALT_BUTTON_CYCLE_GENDER",
      Button_Cycle_Ability = "BUTTON_CYCLE_ABILITY",
      Alt_Button_Cycle_Ability = "ALT_BUTTON_CYCLE_ABILITY",
      Button_Cycle_Nature = "BUTTON_CYCLE_NATURE",
      Alt_Button_Cycle_Nature = "ALT_BUTTON_CYCLE_NATURE",
      Button_Cycle_Variant = "BUTTON_CYCLE_VARIANT",
      Alt_Button_Cycle_Variant = "ALT_BUTTON_CYCLE_VARIANT",
      Button_Speed_Up = "BUTTON_SPEED_UP",
      Alt_Button_Speed_Up = "ALT_BUTTON_SPEED_UP",
      Button_Slow_Down = "BUTTON_SLOW_DOWN",
      Alt_Button_Slow_Down = "ALT_BUTTON_SLOW_DOWN",
      Button_Submit = "BUTTON_SUBMIT",
      Alt_Button_Submit = "ALT_BUTTON_SUBMIT"
  }
  export declare const settingKeyboardOptions: {
      BUTTON_UP: string[];
      BUTTON_DOWN: string[];
      ALT_BUTTON_UP: string[];
      BUTTON_LEFT: string[];
      BUTTON_RIGHT: string[];
      BUTTON_ACTION: string[];
      BUTTON_MENU: string[];
      BUTTON_SUBMIT: string[];
      ALT_BUTTON_DOWN: string[];
      ALT_BUTTON_LEFT: string[];
      ALT_BUTTON_RIGHT: string[];
      ALT_BUTTON_ACTION: string[];
      BUTTON_CANCEL: string[];
      ALT_BUTTON_CANCEL: string[];
      ALT_BUTTON_MENU: string[];
      BUTTON_STATS: string[];
      ALT_BUTTON_STATS: string[];
      BUTTON_CYCLE_FORM: string[];
      ALT_BUTTON_CYCLE_FORM: string[];
      BUTTON_CYCLE_SHINY: string[];
      ALT_BUTTON_CYCLE_SHINY: string[];
      BUTTON_CYCLE_GENDER: string[];
      ALT_BUTTON_CYCLE_GENDER: string[];
      BUTTON_CYCLE_ABILITY: string[];
      ALT_BUTTON_CYCLE_ABILITY: string[];
      BUTTON_CYCLE_NATURE: string[];
      ALT_BUTTON_CYCLE_NATURE: string[];
      BUTTON_CYCLE_VARIANT: string[];
      ALT_BUTTON_CYCLE_VARIANT: string[];
      BUTTON_SPEED_UP: string[];
      ALT_BUTTON_SPEED_UP: string[];
      BUTTON_SLOW_DOWN: string[];
      ALT_BUTTON_SLOW_DOWN: string[];
      ALT_BUTTON_SUBMIT: string[];
  };
  export declare const settingKeyboardDefaults: {
      BUTTON_UP: number;
      BUTTON_DOWN: number;
      BUTTON_LEFT: number;
      BUTTON_RIGHT: number;
      BUTTON_ACTION: number;
      BUTTON_MENU: number;
      BUTTON_SUBMIT: number;
      ALT_BUTTON_UP: number;
      ALT_BUTTON_DOWN: number;
      ALT_BUTTON_LEFT: number;
      ALT_BUTTON_RIGHT: number;
      ALT_BUTTON_ACTION: number;
      BUTTON_CANCEL: number;
      ALT_BUTTON_CANCEL: number;
      ALT_BUTTON_MENU: number;
      BUTTON_STATS: number;
      ALT_BUTTON_STATS: number;
      BUTTON_CYCLE_FORM: number;
      ALT_BUTTON_CYCLE_FORM: number;
      BUTTON_CYCLE_SHINY: number;
      ALT_BUTTON_CYCLE_SHINY: number;
      BUTTON_CYCLE_GENDER: number;
      ALT_BUTTON_CYCLE_GENDER: number;
      BUTTON_CYCLE_ABILITY: number;
      ALT_BUTTON_CYCLE_ABILITY: number;
      BUTTON_CYCLE_NATURE: number;
      ALT_BUTTON_CYCLE_NATURE: number;
      BUTTON_CYCLE_VARIANT: number;
      ALT_BUTTON_CYCLE_VARIANT: number;
      BUTTON_SPEED_UP: number;
      ALT_BUTTON_SPEED_UP: number;
      BUTTON_SLOW_DOWN: number;
      ALT_BUTTON_SLOW_DOWN: number;
      ALT_BUTTON_SUBMIT: number;
  };
  export declare const settingKeyboardBlackList: SettingKeyboard[];
  export declare function setSettingKeyboard(scene: PokeRogue.BattleScene, setting: SettingKeyboard, value: integer): boolean;
  
}

declare namespace PokeRogue.system.settings {
  //import BattleScene from "../../battle-scene";
  /**
   * Types for helping separate settings to different menus
   */
  export declare enum SettingType {
      GENERAL = 0,
      DISPLAY = 1,
      AUDIO = 2
  }
  type SettingOption = {
      value: string;
      label: string;
  };
  export interface Setting {
      key: string;
      label: string;
      options: SettingOption[];
      default: number;
      type: SettingType;
      requireReload?: boolean;
      /** Whether the setting can be activated or not */
      activatable?: boolean;
      /** Determines whether the setting should be hidden from the UI */
      isHidden?: () => boolean;
  }
  /**
   * Setting Keys for existing settings
   * to be used when trying to find or update Settings
   */
  export declare const SettingKeys: {
      Game_Speed: string;
      HP_Bar_Speed: string;
      EXP_Gains_Speed: string;
      EXP_Party_Display: string;
      Skip_Seen_Dialogues: string;
      Battle_Style: string;
      Enable_Retries: string;
      Hide_IVs: string;
      Tutorials: string;
      Touch_Controls: string;
      Vibration: string;
      Language: string;
      UI_Theme: string;
      Window_Type: string;
      Money_Format: string;
      Damage_Numbers: string;
      Move_Animations: string;
      Show_Stats_on_Level_Up: string;
      Shop_Cursor_Target: string;
      Candy_Upgrade_Notification: string;
      Candy_Upgrade_Display: string;
      Move_Info: string;
      Show_Moveset_Flyout: string;
      Show_Arena_Flyout: string;
      Show_Time_Of_Day_Widget: string;
      Time_Of_Day_Animation: string;
      Sprite_Set: string;
      Fusion_Palette_Swaps: string;
      Player_Gender: string;
      Type_Hints: string;
      Master_Volume: string;
      BGM_Volume: string;
      Field_Volume: string;
      SE_Volume: string;
      UI_Volume: string;
      Music_Preference: string;
      Show_BGM_Bar: string;
      Move_Touch_Controls: string;
      Shop_Overlay_Opacity: string;
  };
  /**
   * All Settings not related to controls
   */
  export declare const Setting: Array<Setting>;
  /**
   * Return the index of a Setting
   * @param key SettingKey
   * @returns index or -1 if doesn't exist
   */
  export declare function settingIndex(key: string): number;
  /**
   * Resets all settings to their defaults
   * @param scene current BattleScene
   */
  export declare function resetSettings(scene: PokeRogue.BattleScene): void;
  /**
   * Updates a setting for current BattleScene
   * @param scene current BattleScene
   * @param setting string ideally from SettingKeys
   * @param value value to update setting with
   * @returns true if successful, false if not
   */
  export declare function setSetting(scene: PokeRogue.BattleScene, setting: string, value: integer): boolean;
  export {};
  
}

declare namespace PokeRogue.system {
  //import BattleScene from "../battle-scene";
  //import { TrainerType } from "#enums/trainer-type";
  //import Trainer, { TrainerVariant } from "../field/trainer";
  export class TrainerData {
      trainerType: PokeRogue.enums.TrainerType;
      variant: PokeRogue.field.TrainerVariant;
      partyTemplateIndex: integer;
      name: string;
      partnerName: string;
      constructor(source: PokeRogue.field.Trainer | any);
      toTrainer(scene: PokeRogue.BattleScene): Trainer;
  }
  
}

declare namespace PokeRogue.system {
  export declare enum Unlockables {
      ENDLESS_MODE = 0,
      MINI_BLACK_HOLE = 1,
      SPLICED_ENDLESS_MODE = 2,
      EVIOLITE = 3
  }
  export declare function getUnlockableName(unlockable: Unlockables): string;
  
}

declare namespace PokeRogue.system {
  //import { SessionSaveData, SystemSaveData } from "./game-data";
  export declare function applySessionDataPatches(data: PokeRogue.system.SessionSaveData): void;
  export declare function applySystemDataPatches(data: PokeRogue.system.SystemSaveData): void;
  export declare function applySettingsDataPatches(settings: Object): void;
  
}

declare namespace PokeRogue.system {
  //import BattleScene from "../battle-scene";
  //import { AchvTier } from "./achv";
  //import { PlayerGender } from "#enums/player-gender";
  //import { ConditionFn } from "#app/@types/common.js";
  export declare enum VoucherType {
      REGULAR = 0,
      PLUS = 1,
      PREMIUM = 2,
      GOLDEN = 3
  }
  export declare class Voucher {
      id: string;
      voucherType: VoucherType;
      description: string;
      public conditionFunc;
      constructor(voucherType: VoucherType, description: string, conditionFunc?: ConditionFn);
      validate(scene: PokeRogue.BattleScene, args?: any[]): boolean;
      /**
       * Get the name of the voucher
       * @param playerGender - this is ignored here. It's only there to match the signature of the function in the Achv class
       * @returns the name of the voucher
       */
      getName(playerGender: PokeRogue.enums.PlayerGender): string;
      getIconImage(): string;
      getTier(): AchvTier;
  }
  export declare function getVoucherTypeName(voucherType: VoucherType): string;
  export declare function getVoucherTypeIcon(voucherType: VoucherType): string;
  export interface Vouchers {
      [key: string]: Voucher;
  }
  export declare const vouchers: Vouchers;
  export declare function initVouchers(): void;
  
}

declare namespace PokeRogue {
  //import BattleScene from "#app/battle-scene";
  export declare enum EventType {
      SHINY = 0,
      GENERIC = 1
  }
  interface EventBanner {
      bannerKey?: string;
      xPosition?: number;
      yPosition?: number;
      scale?: number;
      availableLangs?: string[];
  }
  interface TimedEvent extends EventBanner {
      name: string;
      eventType: EventType;
      shinyMultiplier?: number;
      startDate: Date;
      endDate: Date;
  }
  export declare class TimedEventManager {
      constructor();
      isActive(event: TimedEvent): boolean;
      activeEvent(): TimedEvent | undefined;
      isEventActive(): boolean;
      activeEventHasBanner(): boolean;
      getShinyMultiplier(): number;
      getEventBannerFilename(): string;
  }
  export declare class TimedEventDisplay extends Phaser.GameObjects.Container {
      public event;
      public eventTimerText;
      public banner;
      public bannerShadow;
      public eventTimer;
      constructor(scene: PokeRogue.BattleScene, x: number, y: number, event?: TimedEvent);
      setup(): void;
      show(): void;
      clear(): void;
      public timeToGo;
      updateCountdown(): void;
  }
  export {};
  
}

declare namespace PokeRogue {
  //import EventEmitter = Phaser.Events.EventEmitter;
  import BattleScene from "./battle-scene";
  export class TouchControl {
      events: EventEmitter;
      public buttonLock;
      public inputInterval;
      /** Whether touch controls are disabled */
      public disabled;
      /** Whether the last touch event has finished before disabling */
      public finishedLastTouch;
      constructor(scene: BattleScene);
      /**
       * Disable touch controls
       */
      disable(): void;
      /**
       * Enable touch controls
         */
      enable(): void;
      /**
       * Initialize touch controls by binding keys to buttons.
       */
      init(): void;
      /**
       * Binds a node to a specific key to simulate keyboard events on touch.
       *
       * @param node - The DOM element to bind the key to.
       * @param key - The key to simulate.
       * @param events - The event emitter for handling input events.
       *
       * @remarks
       * This function binds touch events to a node to simulate 'keydown' and 'keyup' keyboard events.
       * It adds the key to the keys map and tracks the keydown state. When a touch starts, it simulates
       * a 'keydown' event and adds an 'active' class to the node. When the touch ends, it simulates a 'keyup'
       * event, removes the keydown state, and removes the 'active' class from the node and the last touched element.
       */
      bindKey(node: HTMLElement, key: string): void;
      touchButtonDown(node: HTMLElement, key: string): void;
      touchButtonUp(node: HTMLElement, key: string, id: string): void;
      /**
       * Simulates a keyboard event on the canvas if the button is not disabled.
       *
       * @param eventType - The type of the keyboard event ('keydown' or 'keyup').
       * @param key - The key to simulate.
       * @returns Whether the simulation was successful.
       * @remarks
       * This function checks if the key exists in the Button enum. If it does, it retrieves the corresponding button
       * and emits the appropriate event ('input_down' or 'input_up') based on the event type.
       */
      simulateKeyboardEvent(eventType: string, key: string): boolean;
      /**
       * {@link https://stackoverflow.com/a/39778831/4622620|Source}
       *
       * Prevent zoom on specified element
       * @param {HTMLElement} element
       */
      preventElementZoom(element: HTMLElement | null): void;
      /**
         * Deactivates all currently pressed keys.
         */
      deactivatePressedKey(): void;
  }
  /**
   * Check if the device has a touchscreen.
   *
   * @returns `true` if the device has a touchscreen, otherwise `false`.
   */
  export declare function hasTouchscreen(): boolean;
  /**
   * Check if the device is a mobile device.
   *
   * @returns `true` if the device is a mobile device, otherwise `false`.
   */
  export declare function isMobile(): boolean;
  
}

declare namespace PokeRogue {
  //import BattleScene from "./battle-scene";
  export declare enum Tutorial {
      Intro = "INTRO",
      Access_Menu = "ACCESS_MENU",
      Menu = "MENU",
      Starter_Select = "STARTER_SELECT",
      Pokerus = "POKERUS",
      Stat_Change = "STAT_CHANGE",
      Select_Item = "SELECT_ITEM",
      Egg_Gacha = "EGG_GACHA"
  }
  export declare function handleTutorial(scene: PokeRogue.BattleScene, tutorial: Tutorial): Promise<boolean>;
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import Pokemon from "../field/pokemon";
  export class AbilityBar extends Phaser.GameObjects.Container {
      public bg;
      public abilityBarText;
      public tween;
      public autoHideTimer;
      shown: boolean;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      showAbility(pokemon: PokeRogue.field.Pokemon, passive?: boolean): void;
      hide(): void;
      resetAutoHideTimer(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { Mode } from "./ui";
  //import UiHandler from "./ui-handler";
  //import { Button } from "#enums/buttons";
  export interface OptionSelectConfig {
      xOffset?: number;
      yOffset?: number;
      options: OptionSelectItem[];
      maxOptions?: integer;
      delay?: integer;
      noCancel?: boolean;
      supportHover?: boolean;
  }
  export interface OptionSelectItem {
      label: string;
      handler: () => boolean;
      onHover?: () => void;
      keepOpen?: boolean;
      overrideSound?: boolean;
      item?: string;
      itemArgs?: any[];
  }
  export abstract class AbstractOptionSelectUiHandler extends PokeRogue.ui.UiHandler {
      protected optionSelectContainer: Phaser.GameObjects.Container;
      protected optionSelectBg: Phaser.GameObjects.NineSlice;
      protected optionSelectText: Phaser.GameObjects.Text;
      protected optionSelectIcons: Phaser.GameObjects.Sprite[];
      protected config: OptionSelectConfig | null;
      protected blockInput: boolean;
      protected scrollCursor: integer;
      protected scale: number;
      public cursorObj;
      constructor(scene: PokeRogue.BattleScene, mode: PokeRogue.ui.Mode | null);
      abstract getWindowWidth(): integer;
      getWindowHeight(): integer;
      setup(): void;
      protected setupOptions(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      unblockInput(): void;
      getOptionsWithScroll(): OptionSelectItem[];
      setCursor(cursor: integer): boolean;
      clear(): void;
      eraseCursor(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { Achv } from "../system/achv";
  //import { Voucher } from "../system/voucher";
  //import { PlayerGender } from "#enums/player-gender";
  export class AchvBar extends Phaser.GameObjects.Container {
      public defaultWidth;
      public defaultHeight;
      public bg;
      public icon;
      public titleText;
      public scoreText;
      public descriptionText;
      public queue;
      public playerGender;
      shown: boolean;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      showAchv(achv: PokeRogue.system.Achv | Voucher): void;
      protected hide(playerGender: PokeRogue.enums.PlayerGender): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { Button } from "#enums/buttons";
  //import { Achv } from "../system/achv";
  //import { Voucher } from "../system/voucher";
  //import MessageUiHandler from "./message-ui-handler";
  //import { Mode } from "./ui";
  export class AchvsUiHandler extends PokeRogue.ui.MessageUiHandler {
      public readonly ROWS;
      public readonly COLS;
      public mainContainer;
      public iconsContainer;
      public headerBg;
      public headerText;
      public headerActionText;
      public headerActionButton;
      public headerBgX;
      public iconsBg;
      public icons;
      public titleText;
      public scoreText;
      public unlockText;
      public achvsName;
      public achvsTotal;
      public vouchersName;
      public vouchersTotal;
      public currentTotal;
      public scrollCursor;
      public cursorObj;
      public currentPage;
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
      setup(): void;
      show(args: any[]): boolean;
      protected showAchv(achv: PokeRogue.system.Achv): void;
      protected showVoucher(voucher: PokeRogue.system.Voucher): void;
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(cursor: integer, pageChange?: boolean): boolean;
      /**
       * setScrollCursor(scrollCursor: integer) : boolean
       * scrollCursor refers to the page's position within the entire sum of the data, unlike cursor, which refers to a user's position within displayed data
       * @param takes a scrollCursor that has been updated based on user behavior
       * @returns returns a boolean that indicates whether the updated scrollCursor led to an update in the data displayed.
       */
      setScrollCursor(scrollCursor: integer): boolean;
      /**
       * updateAchvIcons(): void
       * Determines what data is to be displayed on the UI and updates it accordingly based on the current value of this.scrollCursor
       */
      updateAchvIcons(): void;
      /**
       * updateVoucherIcons(): void
       * Determines what data is to be displayed on the UI and updates it accordingly based on the current value of this.scrollCursor
       */
      updateVoucherIcons(): void;
      clear(): void;
      eraseCursor(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "#app/battle-scene.js";
  //import { ModalConfig } from "./modal-ui-handler";
  //import { Mode } from "./ui";
  //import { FormModalUiHandler } from "./form-modal-ui-handler";
  //import { Button } from "#app/enums/buttons.js";
  export class AdminUiHandler extends PokeRogue.ui.FormModalUiHandler {
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
      setup(): void;
      getModalTitle(config?: ModalConfig): string;
      getFields(config?: ModalConfig): string[];
      getWidth(config?: ModalConfig): number;
      getMargin(config?: ModalConfig): [number, number, number, number];
      getButtonLabels(config?: ModalConfig): string[];
      processInput(button: PokeRogue.enums.Button): boolean;
      show(args: any[]): boolean;
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui {
  export declare function getFieldEffectText(arenaTagType: string): string;
  export declare class ArenaFlyout extends Phaser.GameObjects.Container {
      /** An alias for the scene typecast to a {@linkcode BattleScene} */
      public battleScene;
      /** The restricted width of the flyout which should be drawn to */
      public flyoutWidth;
      /** The restricted height of the flyout which should be drawn to */
      public flyoutHeight;
      /** The amount of translation animation on the x-axis */
      public translationX;
      /** The x-axis point where the flyout should sit when activated */
      public anchorX;
      /** The y-axis point where the flyout should sit when activated */
      public anchorY;
      /** The initial container which defines where the flyout should be attached */
      public flyoutParent;
      /** The container which defines the drawable dimensions of the flyout */
      public flyoutContainer;
      /** The background {@linkcode Phaser.GameObjects.NineSlice} window for the flyout */
      public flyoutWindow;
      /** The header {@linkcode Phaser.GameObjects.NineSlice} window for the flyout */
      public flyoutWindowHeader;
      /** The {@linkcode Phaser.GameObjects.Text} that goes inside of the header */
      public flyoutTextHeader;
      public timeOfDayWidget;
      /** The {@linkcode Phaser.GameObjects.Text} header used to indicate the player's effects */
      public flyoutTextHeaderPlayer;
      /** The {@linkcode Phaser.GameObjects.Text} header used to indicate the enemy's effects */
      public flyoutTextHeaderEnemy;
      /** The {@linkcode Phaser.GameObjects.Text} header used to indicate neutral effects */
      public flyoutTextHeaderField;
      /** The {@linkcode Phaser.GameObjects.Text} used to indicate the player's effects */
      public flyoutTextPlayer;
      /** The {@linkcode Phaser.GameObjects.Text} used to indicate the enemy's effects */
      public flyoutTextEnemy;
      /** The {@linkcode Phaser.GameObjects.Text} used to indicate neutral effects */
      public flyoutTextField;
      /** Container for all field effects observed by this object */
      public readonly fieldEffectInfo;
      public readonly onNewArenaEvent;
      public readonly onTurnEndEvent;
      public readonly onFieldEffectChangedEvent;
      constructor(scene: Phaser.Scene);
      public onNewArena;
      /** Clears out the current string stored in all arena effect texts */
      public clearText;
      /** Parses through all set Arena Effects and puts them into the proper {@linkcode Phaser.GameObjects.Text} object */
      public updateFieldText;
      /**
       * Parses the {@linkcode Event} being passed and updates the state of the fieldEffectInfo array
       * @param event {@linkcode Event} being sent
       */
      public onFieldEffectChanged;
      /**
       * Iterates through the fieldEffectInfo array and decrements the duration of each item
       * @param event {@linkcode Event} being sent
       */
      public onTurnEnd;
      /**
       * Animates the flyout to either show or hide it by applying a fade and translation
       * @param visible Should the flyout be shown?
       */
      toggleFlyout(visible: boolean): void;
      destroy(fromScene?: boolean): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import { Button } from "#enums/buttons";
  //import BattleScene from "../battle-scene";
  //import AbstractOptionSelectUiHandler from "./abstact-option-select-ui-handler";
  //import { Mode } from "./ui";
  export class AutoCompleteUiHandler extends PokeRogue.ui.AbstractOptionSelectUiHandler {
      modalContainer: Phaser.GameObjects.Container;
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      getWindowWidth(): integer;
      show(args: any[]): boolean;
      protected setupOptions(): void;
      processInput(button: PokeRogue.enums.Button): boolean;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { Mode } from "./ui";
  //import UiHandler from "./ui-handler";
  //import { Button } from "#enums/buttons";
  export abstract class AwaitableUiHandler extends PokeRogue.ui.UiHandler {
      protected awaitingActionInput: boolean;
      protected onActionInput: Function | null;
      tutorialActive: boolean;
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
      processTutorialInput(button: PokeRogue.enums.Button): boolean;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import UiHandler from "./ui-handler";
  //import { Button } from "#enums/buttons";
  export class BallUiHandler extends PokeRogue.ui.UiHandler {
      public pokeballSelectContainer;
      public pokeballSelectBg;
      public countsText;
      public cursorObj;
      public scale;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      updateCounts(): void;
      setCursor(cursor: integer): boolean;
      clear(): void;
      eraseCursor(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import { default as Pokemon } from "../field/pokemon";
  /** A Flyout Menu attached to each {@linkcode BattleInfo} object on the field UI */
  export class BattleFlyout extends Phaser.GameObjects.Container {
      /** An alias for the scene typecast to a {@linkcode BattleScene} */
      public battleScene;
      /** Is this object linked to a player's Pokemon? */
      public player;
      /** The Pokemon this object is linked to */
      public pokemon;
      /** The restricted width of the flyout which should be drawn to */
      public flyoutWidth;
      /** The restricted height of the flyout which should be drawn to */
      public flyoutHeight;
      /** The amount of translation animation on the x-axis */
      public translationX;
      /** The x-axis point where the flyout should sit when activated */
      public anchorX;
      /** The y-axis point where the flyout should sit when activated */
      public anchorY;
      /** The initial container which defines where the flyout should be attached */
      public flyoutParent;
      /** The background {@linkcode Phaser.GameObjects.Sprite;} for the flyout */
      public flyoutBackground;
      /** The container which defines the drawable dimensions of the flyout */
      public flyoutContainer;
      /** The array of {@linkcode Phaser.GameObjects.Text} objects which are drawn on the flyout */
      public flyoutText;
      /** The array of {@linkcode MoveInfo} used to track moves for the {@linkcode Pokemon} linked to the flyout */
      public moveInfo;
      /** Current state of the flyout's visibility */
      flyoutVisible: boolean;
      public readonly onMoveUsedEvent;
      public readonly onBerryUsedEvent;
      constructor(scene: Phaser.Scene, player: boolean);
      /**
       * Links the given {@linkcode Pokemon} and subscribes to the {@linkcode BattleSceneEventType.MOVE_USED} event
       * @param pokemon {@linkcode Pokemon} to link to this flyout
       */
      initInfo(pokemon: PokeRogue.field.Pokemon): void;
      /** Sets and formats the text property for all {@linkcode Phaser.GameObjects.Text} in the flyoutText array */
      public setText;
      /** Updates all of the {@linkcode MoveInfo} objects in the moveInfo array */
      public onMoveUsed;
      public onBerryUsed;
      /** Animates the flyout to either show or hide it by applying a fade and translation */
      toggleFlyout(visible: boolean): void;
      destroy(fromScene?: boolean): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import { EnemyPokemon, default as Pokemon } from "../field/pokemon";
  //import BattleFlyout from "./battle-flyout";
  export class BattleInfo extends Phaser.GameObjects.Container {
      public baseY;
      public player;
      public mini;
      public boss;
      public bossSegments;
      public offset;
      public lastName;
      public lastTeraType;
      public lastStatus;
      public lastHp;
      public lastMaxHp;
      public lastHpFrame;
      public lastExp;
      public lastLevelExp;
      public lastLevel;
      public lastLevelCapped;
      public lastStats;
      public box;
      public nameText;
      public genderText;
      public ownedIcon;
      public championRibbon;
      public teraIcon;
      public shinyIcon;
      public fusionShinyIcon;
      public splicedIcon;
      public statusIndicator;
      public levelContainer;
      public hpBar;
      public hpBarSegmentDividers;
      public levelNumbersContainer;
      public hpNumbersContainer;
      public type1Icon;
      public type2Icon;
      public type3Icon;
      public expBar;
      public effectivenessContainer;
      public effectivenessWindow;
      public effectivenessText;
      public currentEffectiveness?;
      expMaskRect: Phaser.GameObjects.Graphics;
      public statsContainer;
      public statsBox;
      public statValuesContainer;
      public statNumbers;
      flyoutMenu?: BattleFlyout;
      public statOrder;
      public readonly statOrderPlayer;
      public readonly statOrderEnemy;
      constructor(scene: Phaser.Scene, x: number, y: number, player: boolean);
      getStatsValueContainer(): Phaser.GameObjects.Container;
      initInfo(pokemon: PokeRogue.field.Pokemon): void;
      getTextureName(): string;
      setMini(mini: boolean): void;
      toggleStats(visible: boolean): void;
      updateBossSegments(pokemon: PokeRogue.field.EnemyPokemon): void;
      updateBossSegmentDividers(pokemon: PokeRogue.field.EnemyPokemon): void;
      setOffset(offset: boolean): void;
      updateInfo(pokemon: PokeRogue.field.Pokemon, instant?: boolean): Promise<void>;
      updateNameText(pokemon: PokeRogue.field.Pokemon): void;
      updatePokemonExp(pokemon: PokeRogue.field.Pokemon, instant?: boolean, levelDurationMultiplier?: number): Promise<void>;
      setLevel(level: integer): void;
      setHpNumbers(hp: integer, maxHp: integer): void;
      updateStats(stats: integer[]): void;
      /**
       * Request the flyoutMenu to toggle if available and hides or shows the effectiveness window where necessary
       */
      toggleFlyout(visible: boolean): void;
      /**
       * Show or hide the type effectiveness multiplier window
       * Passing undefined will hide the window
       */
      updateEffectiveness(effectiveness?: string): void;
      getBaseY(): number;
      resetY(): void;
  }
  export declare class PlayerBattleInfo extends BattleInfo {
      constructor(scene: Phaser.Scene);
  }
  export declare class EnemyBattleInfo extends BattleInfo {
      constructor(scene: Phaser.Scene);
      setMini(mini: boolean): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import MessageUiHandler from "./message-ui-handler";
  //import { Button } from "#enums/buttons";
  //import { Stat } from "#app/enums/stat";
  export class BattleMessageUiHandler extends PokeRogue.ui.MessageUiHandler {
      public levelUpStatsContainer;
      public levelUpStatsIncrContent;
      public levelUpStatsValuesContent;
      public nameBox;
      public nameText;
      bg: Phaser.GameObjects.Sprite;
      commandWindow: Phaser.GameObjects.NineSlice;
      movesWindowContainer: Phaser.GameObjects.Container;
      nameBoxContainer: Phaser.GameObjects.Container;
      readonly wordWrapWidth: number;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      clear(): void;
      showText(text: string, delay?: integer | null, callback?: Function | null, callbackDelay?: integer | null, prompt?: boolean | null, promptDelay?: integer | null): void;
      showDialogue(text: string, name?: string, delay?: integer | null, callback?: Function, callbackDelay?: integer, prompt?: boolean, promptDelay?: integer): void;
      promptLevelUpStats(partyMemberIndex: integer, prevStats: integer[], showTotals: boolean): Promise<void>;
      promptIvs(pokemonId: integer, ivs: integer[], shownIvsCount: integer): Promise<void>;
      getTopIvs(ivs: integer[], shownIvsCount: integer): Stat[];
      getIvDescriptor(value: integer, typeIv: integer, pokemonId: integer): string;
      showNameText(name: string): void;
      hideNameText(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  export class BgmBar extends Phaser.GameObjects.Container {
      public defaultWidth;
      public defaultHeight;
      public bg;
      public musicText;
      shown: boolean;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      setBgmToBgmBar(bgmName: string): void;
      toggleBgmBar(visible: boolean): void;
      getRealBgmName(bgmName: string): string;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { Species } from "#enums/species";
  export class CandyBar extends Phaser.GameObjects.Container {
      public bg;
      public candyIcon;
      public candyOverlayIcon;
      public countText;
      public speciesId;
      public tween;
      public autoHideTimer;
      shown: boolean;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      showStarterSpeciesCandy(starterSpeciesId: PokeRogue.enums.Species, count: integer): Promise<void>;
      hide(): Promise<void>;
      resetAutoHideTimer(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { Mode } from "./ui";
  //import UiHandler from "./ui-handler";
  //import { Button } from "#enums/buttons";
  //import { Challenge } from "#app/data/challenge";
  /**
   * Handles all the UI for choosing optional challenges.
   */
  export class GameChallengesUiHandler extends PokeRogue.ui.UiHandler {
      public challengesContainer;
      public valuesContainer;
      public scrollCursor;
      public optionsBg;
      public descriptionText;
      public challengeLabels;
      public monoTypeValue;
      public cursorObj;
      public startBg;
      public startCursor;
      public startText;
      public hasSelectedChallenge;
      public optionsWidth;
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
      setup(): void;
      /**
       * Adds the default text color to the description text
       * @param text text to set to the BBCode description
       */
      setDescription(text: string): void;
      /**
       * initLabels
       * init all challenge labels
       */
      initLabels(): void;
      /**
       * update the text the cursor is on
       */
      updateText(): void;
      show(args: any[]): boolean;
      /**
       * Processes input from a specified button.
       * This method handles navigation through a UI menu, including movement through menu items
       * and handling special actions like cancellation. Each button press may adjust the cursor
       * position or the menu scroll, and plays a sound effect if the action was successful.
       *
       * @param button - The button pressed by the user.
       * @returns `true` if the action associated with the button was successfully processed, `false` otherwise.
       */
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(cursor: integer): boolean;
      setScrollCursor(scrollCursor: integer): boolean;
      getActiveChallenge(): Challenge;
      clear(): void;
      eraseCursor(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  export class CharSprite extends Phaser.GameObjects.Container {
      public sprite;
      public transitionSprite;
      key: string;
      variant: string;
      shown: boolean;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      showCharacter(key: string, variant: string): Promise<void>;
      setVariant(variant: string): Promise<void>;
      hide(): Promise<void>;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import UiHandler from "./ui-handler";
  //import { Button } from "#enums/buttons";
  export declare enum Command {
      FIGHT = 0,
      BALL = 1,
      POKEMON = 2,
      RUN = 3
  }
  export class CommandUiHandler extends PokeRogue.ui.UiHandler {
      public commandsContainer;
      public cursorObj;
      protected fieldIndex: integer;
      protected cursor2: integer;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      getCursor(): integer;
      setCursor(cursor: integer): boolean;
      clear(): void;
      eraseCursor(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import AbstractOptionSelectUiHandler from "./abstact-option-select-ui-handler";
  //import { Button } from "#enums/buttons";
  export class ConfirmUiHandler extends PokeRogue.ui.AbstractOptionSelectUiHandler {
      static readonly windowWidth: integer;
      public switchCheck;
      public switchCheckCursor;
      constructor(scene: PokeRogue.BattleScene);
      getWindowWidth(): integer;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(cursor: integer): boolean;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  interface RankingEntry {
      rank: integer;
      username: string;
      score: integer;
      wave: integer;
  }
  declare enum ScoreboardCategory {
      DAILY = 0,
      WEEKLY = 1
  }
  export declare class DailyRunScoreboard extends Phaser.GameObjects.Container {
      public loadingLabel;
      public titleLabel;
      public rankingsContainer;
      public prevCategoryButton;
      public nextCategoryButton;
      public prevPageButton;
      public pageNumberLabel;
      public nextPageButton;
      public pageCount;
      public page;
      public category;
      public _isUpdating;
      constructor(scene: PokeRogue.BattleScene, x: number, y: number);
      /**
       * Sets the updating state and updates button states accordingly.
       * If value is true (updating), disables the buttons; if false, enables the buttons.
       * @param {boolean} value - The new updating state.
       */
      set isUpdating(value: boolean);
      /**
       * Gets the current updating state.
       * @returns {boolean} - The current updating state.
       */
      get isUpdating(): boolean;
      setup(): void;
      updateRankings(rankings: RankingEntry[]): void;
      /**
       * Updates the scoreboard rankings based on the selected category and page.
       *
       * If the update process is already ongoing, the method exits early. Otherwise, it begins the update process by clearing
       * the current rankings and showing a loading label. If the category changes, the page is reset to 1.
       *
       * The method fetches the total page count if necessary, followed by fetching the rankings for the specified category
       * and page. It updates the UI with the fetched rankings or shows an appropriate message if no rankings are found.
       *
       * @param {ScoreboardCategory} [category=this.category] - The category to fetch rankings for. Defaults to the current category.
       * @param {number} [page=this.page] - The page number to fetch. Defaults to the current page.
      */
      update(category?: ScoreboardCategory, page?: integer): void;
      /**
       * Sets the state of the navigation buttons.
       * @param {boolean} [enabled=true] - Whether the buttons should be enabled or disabled.
       */
      setButtonsState(enabled?: boolean): void;
  }
  export interface DailyRunScoreboard {
      scene: PokeRogue.BattleScene;
  }
  export {};
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "#app/battle-scene.js";
  //import { SceneBase } from "#app/scene-base.js";
  export declare enum DropDownState {
      ON = 0,
      OFF = 1,
      EXCLUDE = 2,
      UNLOCKABLE = 3
  }
  export declare enum DropDownType {
      SINGLE = 0,
      MULTI = 1,
      HYBRID = 2,
      RADIAL = 3
  }
  export declare enum SortDirection {
      ASC = -1,
      DESC = 1
  }
  export declare enum SortCriteria {
      NUMBER = 0,
      COST = 1,
      CANDY = 2,
      IV = 3,
      NAME = 4
  }
  export declare class DropDownLabel {
      state: DropDownState;
      text: string;
      sprite?: Phaser.GameObjects.Sprite;
      constructor(label: string, sprite?: Phaser.GameObjects.Sprite, state?: DropDownState);
  }
  export declare class DropDownOption extends Phaser.GameObjects.Container {
      state: DropDownState;
      toggle: Phaser.GameObjects.Sprite;
      text: Phaser.GameObjects.Text;
      val: any;
      dir: SortDirection;
      public currentLabelIndex;
      public labels;
      public onColor;
      public offColor;
      public excludeColor;
      public unlockableColor;
      constructor(scene: PokeRogue.SceneBase, val: any, labels: DropDownLabel | DropDownLabel[]);
      /**
       * Initialize the toggle icon based on the provided DropDownType
       * For DropDownType.SINGLE: uses a cursor arrow icon
       * For other types: uses a candy icon
       * @param type the DropDownType to use
       * @param visible whether the icon should be visible or not
       */
      setupToggleIcon(type: DropDownType, visible: boolean): void;
      /**
       * Set the toggle icon color based on the current state
       */
      public updateToggleIconColor;
      /**
       * Switch the option to its next state and update visuals
       * If only ON/OFF are possible, toggle between the two
       * For radials, move to the next state in the list
       * @returns the updated DropDownState
       */
      toggleOptionState(): DropDownState;
      /**
       * Set the option to the given state and update visuals
       * @param newState the state to switch to
       * @returns the new DropDownState
       */
      setOptionState(newState: DropDownState): DropDownState;
      /**
       * Change the option state to the one at the given index and update visuals
       * @param index index of the state to switch to
       * @returns the new DropDownState
       */
      public setCurrentLabel;
      /**
       * Set the current SortDirection to the provided value and update icon accordingly
       * @param SortDirection the new SortDirection to use
       */
      setDirection(dir: SortDirection): void;
      /**
       * Toggle the current SortDirection value
       */
      toggleDirection(): void;
      /**
       * Place the label elements (text and sprite if there is one) to the provided x and y position
       * @param x the horizontal position
       * @param y the vertical position
       */
      setLabelPosition(x: number, y: number): void;
      /**
       * Place the toggle icon at the provided position
       * @param x the horizontal position
       * @param y the vertical position
       */
      setTogglePosition(x: number, y: number): void;
      /**
       * @returns the x position to use for the current label depending on if it has a sprite or not
       */
      getCurrentLabelX(): number | undefined;
      /**
       * @returns max width needed to display all of the labels
       */
      getWidth(): number;
  }
  export declare class DropDown extends Phaser.GameObjects.Container {
      options: DropDownOption[];
      public window;
      public cursorObj;
      dropDownType: DropDownType;
      cursor: number;
      public lastCursor;
      defaultCursor: number;
      public onChange;
      public lastDir;
      public defaultSettings;
      constructor(scene: PokeRogue.BattleScene, x: number, y: number, options: DropDownOption[], onChange: () => void, type?: DropDownType, optionSpacing?: number);
      getWidth(): number;
      toggleVisibility(): void;
      setVisible(value: boolean): this;
      resetCursor(): boolean;
      setCursor(cursor: integer): boolean;
      /**
       * Switch the option at the provided index to its next state and update visuals
       * Update accordingly the other options if needed:
       *  - if "all" is toggled, also update all other options
       *  - for DropDownType.SINGLE, unselect the previously selected option if applicable
       * @param index the index of the option for which to update the state
       */
      toggleOptionState(index?: number): void;
      /**
       * Check whether all options except the "ALL" one are ON
       * @returns true if all options are set to DropDownState.ON, false otherwise
       */
      checkForAllOn(): boolean;
      /**
       * Check whether all options except the "ALL" one are OFF
       * @returns true if all options are set to DropDownState.OFF, false otherwise
       */
      checkForAllOff(): boolean;
      /**
       * Get the current selected values for each option
       * @returns an array of values, depending on the DropDownType
       *  - if MULTI or HYBRID, an array of all the values of the options set to ON (except the ALL one)
       *  - if RADIAL, an array where the value for each option is of the form { val: any, state: DropDownState }
       *  - if SINGLE, a single object of the form { val: any, state: SortDirection }
       */
      getVals(): any[];
      /**
       * Get the current selected settings dictionary for each option
       * @returns an array of dictionaries with the current state of each option
       * - the settings dictionary is like this { val: any, state: DropDownState, cursor: boolean, dir: SortDirection }
       */
      public getSettings;
      /**
       * Check whether the values of all options are the same as the default ones
       * @returns true if they are the same, false otherwise
       */
      hasDefaultValues(): boolean;
      /**
       * Set all values to their default state
       */
      resetToDefault(): void;
      /**
       * Set all options to a specific state
       * @param state the DropDownState to assign to each option
       */
      public setAllOptions;
      /**
       * Set all options to their ON state
       */
      selectAllOptions(): void;
      /**
       * Set all options to their OFF state
       */
      unselectAllOptions(): void;
      /**
       * Automatically set the width and position based on the size of options
       */
      autoSize(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "#app/battle-scene.js";
  /**
   * A container that displays the count of hatching eggs.
   * Extends Phaser.GameObjects.Container.
   */
  export class EggCounterContainer extends Phaser.GameObjects.Container {
      public readonly WINDOW_DEFAULT_WIDTH;
      public readonly WINDOW_MEDIUM_WIDTH;
      public readonly WINDOW_HEIGHT;
      public readonly onEggCountChangedEvent;
      public battleScene;
      public eggCount;
      public eggCountWindow;
      eggCountText: Phaser.GameObjects.Text;
      /**
       * @param {BattleScene} scene - The scene to which this container belongs.
       * @param {number} eggCount - The number of eggs to hatch.
       */
      constructor(scene: PokeRogue.BattleScene, eggCount: integer);
      /**
       * Sets up the container, creating the window, egg sprite, and egg count text.
       */
      public setup;
      /**
       * Resets the window size to the default width and height.
       */
      public setWindowToDefaultSize;
      /**
       * Handles window size, the egg count to show, and whether it should be displayed.
       *
       * @param event {@linkcode Event} being sent
       * @returns void
       */
      public onEggCountChanged;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import MessageUiHandler from "./message-ui-handler";
  //import { Egg } from "../data/egg";
  //import { VoucherType } from "../system/voucher";
  //import { Button } from "#enums/buttons";
  //import { GachaType } from "#app/enums/gacha-types";
  //import { EggTier } from "#enums/egg-type";
  export class EggGachaUiHandler extends PokeRogue.ui.MessageUiHandler {
      public eggGachaContainer;
      public eggGachaMessageBox;
      public eggGachaOptionsContainer;
      public eggGachaOptionSelectBg;
      public gachaContainers;
      public gachaKnobs;
      public gachaHatches;
      public gachaInfoContainers;
      public eggGachaOverlay;
      public eggGachaSummaryContainer;
      public voucherCountLabels;
      public gachaCursor;
      public cursorObj;
      public transitioning;
      public transitionCancelled;
      public defaultText;
      public scale;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      getDelayValue(delay: integer): number;
      pull(pullCount?: integer, count?: integer, eggs?: Egg[]): void;
      getGuaranteedEggTierFromPullCount(pullCount: number): EggTier;
      showSummary(eggs: PokeRogue.data.Egg[]): void;
      hideSummary(): void;
      updateGachaInfo(gachaType: PokeRogue.enums.GachaType): void;
      consumeVouchers(voucherType: PokeRogue.system.VoucherType, count: integer): void;
      updateVoucherCounts(): void;
      showText(text: string, delay?: number, callback?: Function, callbackDelay?: number, prompt?: boolean, promptDelay?: number): void;
      showError(text: string): void;
      setTransitioning(transitioning: boolean): void;
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(cursor: integer): boolean;
      setGachaCursor(cursor: integer): boolean;
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import UiHandler from "./ui-handler";
  //import { Button } from "#enums/buttons";
  export class EggHatchSceneHandler extends PokeRogue.ui.UiHandler {
      eggHatchContainer: Phaser.GameObjects.Container;
      /**
       * Allows subscribers to listen for events
       *
       * Current Events:
       * - {@linkcode EggEventType.EGG_COUNT_CHANGED} {@linkcode EggCountChangedEvent}
       */
      readonly eventTarget: EventTarget;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(_args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(_cursor: integer): boolean;
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import MessageUiHandler from "./message-ui-handler";
  //import { Egg } from "../data/egg";
  //import { Button } from "#enums/buttons";
  export class EggListUiHandler extends PokeRogue.ui.MessageUiHandler {
      public eggListContainer;
      public eggListIconContainer;
      public eggSprite;
      public eggNameText;
      public eggDateText;
      public eggHatchWavesText;
      public eggGachaInfoText;
      public eggListMessageBoxContainer;
      public cursorObj;
      public iconAnimHandler;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      setEggDetails(egg: PokeRogue.data.Egg): void;
      setCursor(cursor: integer): boolean;
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import MessageUiHandler from "./message-ui-handler";
  //import { Button } from "#enums/buttons";
  //import { EggHatchData } from "#app/data/egg-hatch-data";
  /**
   * UI Handler for the egg summary.
   * Handles navigation and display of each pokemon as a list
   * Also handles display of the pokemon-hatch-info-container
   */
  export class EggSummaryUiHandler extends PokeRogue.ui.MessageUiHandler {
      /** holds all elements in the scene */
      public eggHatchContainer;
      /** holds the icon containers and info container */
      public summaryContainer;
      /** container for the mini pokemon sprites */
      public pokemonIconSpritesContainer;
      /** container for the icons displayed alongside the mini icons (e.g. shiny, HA capsule) */
      public pokemonIconsContainer;
      /** hatch info container that displays the current pokemon / hatch (main element on left hand side) */
      public infoContainer;
      /** handles jumping animations for the pokemon sprite icons */
      public iconAnimHandler;
      public eggHatchBg;
      public cursorObj;
      public eggHatchData;
      /**
       * Allows subscribers to listen for events
       *
       * Current Events:
       * - {@linkcode EggEventType.EGG_COUNT_CHANGED} {@linkcode EggCountChangedEvent}
       */
      readonly eventTarget: EventTarget;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      clear(): void;
      /**
       * @param args EggHatchData[][]
       * args[0]: list of EggHatchData for each egg/pokemon hatched
       */
      show(args: PokeRogue.data.EggHatchData[][]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(cursor: number): boolean;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import MessageUiHandler from "./message-ui-handler";
  //import { Button } from "#enums/buttons";
  export class EvolutionSceneHandler extends PokeRogue.ui.MessageUiHandler {
      evolutionContainer: Phaser.GameObjects.Container;
      messageBg: Phaser.GameObjects.Image;
      messageContainer: Phaser.GameObjects.Container;
      canCancel: boolean;
      cancelled: boolean;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(_args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(_cursor: integer): boolean;
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import UiHandler from "./ui-handler";
  //import { Button } from "#enums/buttons";
  export class FightUiHandler extends PokeRogue.ui.UiHandler {
      static readonly MOVES_CONTAINER_NAME = "moves";
      public movesContainer;
      public moveInfoContainer;
      public typeIcon;
      public ppLabel;
      public ppText;
      public powerLabel;
      public powerText;
      public accuracyLabel;
      public accuracyText;
      public cursorObj;
      public moveCategoryIcon;
      protected fieldIndex: integer;
      protected cursor2: integer;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      getCursor(): integer;
      setCursor(cursor: integer): boolean;
      /**
       * Gets multiplier text for a pokemon's move against a specific opponent
       * Returns undefined if it's a status move
       */
      public getEffectivenessText;
      displayMoves(): void;
      /**
       * Returns a specific move's color based on its type effectiveness against opponents
       * If there are multiple opponents, the highest effectiveness' color is returned
       * @returns A color or undefined if the default color should be used
       */
      public getMoveColor;
      clear(): void;
      clearMoves(): void;
      eraseCursor(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "#app/battle-scene.js";
  //import { DropDown } from "./dropdown";
  //import { StarterContainer } from "./starter-container";
  export declare enum DropDownColumn {
      GEN = 0,
      TYPES = 1,
      CAUGHT = 2,
      UNLOCKS = 3,
      MISC = 4,
      SORT = 5
  }
  export declare class FilterBar extends Phaser.GameObjects.Container {
      public window;
      public labels;
      public dropDowns;
      public columns;
      cursorObj: Phaser.GameObjects.Image;
      numFilters: number;
      openDropDown: boolean;
      public lastCursor;
      public uiTheme;
      constructor(scene: PokeRogue.BattleScene, x: number, y: number, width: number, height: number);
      /**
       * Add a new filter to the FilterBar, as long that a unique DropDownColumn is provided
       * @param column  the DropDownColumn that will be used to access the filter values
       * @param title   the string that will get displayed in the filter bar
       * @param dropDown the DropDown with all options for this filter
       * @returns true if successful, false if the provided column was already in use for another filter
       */
      addFilter(column: DropDownColumn, title: string, dropDown: PokeRogue.ui.DropDown): boolean;
      /**
       * Get the DropDown associated to a given filter
       * @param col the DropDownColumn used to register the filter to retrieve
       * @returns the associated DropDown if it exists, undefined otherwise
       */
      getFilter(col: DropDownColumn): DropDown;
      /**
       * Highlight the labels of the FilterBar if the filters are different from their default values
       */
      updateFilterLabels(): void;
      /**
       * Position the filter dropdowns evenly across the width of the container
       */
      public calcFilterPositions;
      /**
       * Move the leftmost dropdown to the left of the FilterBar instead of below it
       */
      offsetHybridFilters(): void;
      setCursor(cursor: number): void;
      toggleDropDown(index: number): void;
      hideDropDowns(): void;
      incDropDownCursor(): boolean;
      decDropDownCursor(): boolean;
      toggleOptionState(): void;
      getVals(col: DropDownColumn): any[];
      setValsToDefault(): void;
      /**
       * Find the nearest filter to the provided container
       * @param container the StarterContainer to compare position against
       * @returns the index of the closest filter
       */
      getNearestFilter(container: PokeRogue.ui.StarterContainer): number;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { ModalConfig, ModalUiHandler } from "./modal-ui-handler";
  //import { Mode } from "./ui";
  import InputText from "phaser3-rex-plugins/plugins/inputtext";
  //import { Button } from "#enums/buttons";
  export interface FormModalConfig extends PokeRogue.ui.ModalConfig {
      errorMessage?: string;
  }
  export declare abstract class FormModalUiHandler extends PokeRogue.ui.ModalUiHandler {
      protected editing: boolean;
      protected inputContainers: Phaser.GameObjects.Container[];
      protected inputs: InputText[];
      protected errorMessage: Phaser.GameObjects.Text;
      protected submitAction: Function | null;
      protected tween: Phaser.Tweens.Tween;
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
      abstract getFields(): string[];
      getHeight(config?: ModalConfig): number;
      getReadableErrorMessage(error: string): string;
      setup(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      sanitizeInputs(): void;
      updateContainer(config?: ModalConfig): void;
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { Mode } from "./ui";
  //import UiHandler from "./ui-handler";
  //import { Button } from "#enums/buttons";
  export class GameStatsUiHandler extends PokeRogue.ui.UiHandler {
      public gameStatsContainer;
      public statsContainer;
      public statLabels;
      public statValues;
      public arrowUp;
      public arrowDown;
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
      setup(): void;
      show(args: any[]): boolean;
      updateStats(): void;
      /**
       * Show arrows at the top / bottom of the page if it's possible to scroll in that direction
       */
      updateArrows(): void;
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(cursor: integer): boolean;
      clear(): void;
  }
  export declare function initStatsKeys(): void;
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { ModalUiHandler } from "./modal-ui-handler";
  //import { Mode } from "./ui";
  export class LoadingModalUiHandler extends PokeRogue.ui.ModalUiHandler {
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
      getModalTitle(): string;
      getWidth(): number;
      getHeight(): number;
      getMargin(): [number, number, number, number];
      getButtonLabels(): string[];
      setup(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import { FormModalUiHandler } from "./form-modal-ui-handler";
  //import { ModalConfig } from "./modal-ui-handler";
  //import { Mode } from "./ui";
  //import BattleScene from "#app/battle-scene";
  export class LoginFormUiHandler extends PokeRogue.ui.FormModalUiHandler {
      public readonly ERR_USERNAME;
      public readonly ERR_PASSWORD;
      public readonly ERR_ACCOUNT_EXIST;
      public readonly ERR_PASSWORD_MATCH;
      public readonly ERR_NO_SAVES;
      public readonly ERR_TOO_MANY_SAVES;
      public googleImage;
      public discordImage;
      public usernameInfoImage;
      public externalPartyContainer;
      public infoContainer;
      public externalPartyBg;
      public externalPartyTitle;
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
      setup(): void;
      public buildExternalPartyContainer;
      getModalTitle(_config?: ModalConfig): string;
      getFields(_config?: ModalConfig): string[];
      getWidth(_config?: ModalConfig): number;
      getMargin(_config?: ModalConfig): [number, number, number, number];
      getButtonLabels(_config?: ModalConfig): string[];
      getReadableErrorMessage(error: string): string;
      show(args: any[]): boolean;
      clear(): void;
      public processExternalProvider;
      public buildInteractableImage;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from '../battle-scene';
  //import { Mode } from './ui';
  //import MessageUiHandler from './message-ui-handler';
  //import { OptionSelectConfig } from './abstact-option-select-ui-handler';
  //import { Button } from '#enums/buttons';
  //import BgmBar from '#app/ui/bgm-bar';
  export class MenuUiHandler extends PokeRogue.ui.MessageUiHandler {
      public readonly textPadding;
      public readonly defaultMessageBoxWidth;
      public readonly defaultWordWrapWidth;
      public menuContainer;
      public menuMessageBoxContainer;
      public menuOverlay;
      public menuBg;
      protected optionSelectText: Phaser.GameObjects.Text;
      public cursorObj;
      public excludedMenus;
      public menuOptions;
      protected manageDataConfig: PokeRogue.ui.OptionSelectConfig;
      protected communityConfig: PokeRogue.ui.OptionSelectConfig;
      public menuMessageBox;
      public dialogueMessageBox;
      protected scale: number;
      bgmBar: PokeRogue.ui.BgmBar;
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
      setup(): void;
      render(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      /**
       * Switch the message window style and size when we are replaying dialog for debug purposes
       * In "dialog test mode", the window takes the whole width of the screen and the text
       * is set up to wrap around the same way as the dialogue during the game
       * @param isDialogMode whether to use the dialog test
       */
      setDialogTestMode(isDialogMode: boolean): void;
      showText(text: string, delay?: number, callback?: Function, callbackDelay?: number, prompt?: boolean, promptDelay?: number): void;
      setCursor(cursor: integer): boolean;
      clear(): void;
      eraseCursor(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import AwaitableUiHandler from "./awaitable-ui-handler";
  //import { Mode } from "./ui";
  export abstract class MessageUiHandler extends PokeRogue.ui.AwaitableUiHandler {
      protected textTimer: Phaser.Time.TimerEvent | null;
      protected textCallbackTimer: Phaser.Time.TimerEvent | null;
      pendingPrompt: boolean;
      message: Phaser.GameObjects.Text;
      prompt: Phaser.GameObjects.Sprite;
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
      showText(text: string, delay?: integer | null, callback?: Function | null, callbackDelay?: integer | null, prompt?: boolean | null, promptDelay?: integer | null): void;
      showDialogue(text: string, name?: string, delay?: integer | null, callback?: Function | null, callbackDelay?: integer | null, prompt?: boolean | null, promptDelay?: integer | null): void;
      public showTextInternal;
      showPrompt(callback?: Function | null, callbackDelay?: integer | null): void;
      clearText(): void;
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { Mode } from "./ui";
  //import UiHandler from "./ui-handler";
  //import { Button } from "#enums/buttons";
  export interface ModalConfig {
      buttonActions: Function[];
  }
  export declare abstract class ModalUiHandler extends PokeRogue.ui.UiHandler {
      protected modalContainer: Phaser.GameObjects.Container;
      protected modalBg: Phaser.GameObjects.NineSlice;
      protected titleText: Phaser.GameObjects.Text;
      protected buttonContainers: Phaser.GameObjects.Container[];
      protected buttonBgs: Phaser.GameObjects.NineSlice[];
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
      abstract getModalTitle(config?: ModalConfig): string;
      abstract getWidth(config?: ModalConfig): number;
      abstract getHeight(config?: ModalConfig): number;
      abstract getMargin(config?: ModalConfig): [number, number, number, number];
      abstract getButtonLabels(config?: ModalConfig): string[];
      getButtonTopMargin(): number;
      setup(): void;
      public addButton;
      show(args: any[]): boolean;
      updateContainer(config?: ModalConfig): void;
      processInput(button: PokeRogue.enums.Button): boolean;
      clear(): void;
      /**
       * Adds a hover effect to a game object which changes the cursor to a `pointer` and tints it slighly
       * @param gameObject the game object to add hover events/effects to
       */
      protected addInteractionHoverEffect(gameObject: Phaser.GameObjects.Image | Phaser.GameObjects.NineSlice | Phaser.GameObjects.Sprite): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { ModifierTypeOption } from "../modifier/modifier-type";
  //import AwaitableUiHandler from "./awaitable-ui-handler";
  //import { Button } from "#enums/buttons";
  export declare const SHOP_OPTIONS_ROW_LIMIT = 6;
  export class ModifierSelectUiHandler extends PokeRogue.ui.AwaitableUiHandler {
      public modifierContainer;
      public rerollButtonContainer;
      public lockRarityButtonContainer;
      public transferButtonContainer;
      public checkButtonContainer;
      public rerollCostText;
      public lockRarityButtonText;
      public moveInfoOverlay;
      public moveInfoOverlayActive;
      public rowCursor;
      public player;
      public rerollCost;
      public transferButtonWidth;
      public checkButtonWidth;
      options: ModifierOption[];
      shopOptionsRows: ModifierOption[][];
      public cursorObj;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(cursor: integer): boolean;
      setRowCursor(rowCursor: integer): boolean;
      public getRowItems;
      setRerollCost(rerollCost: integer): void;
      updateCostText(): void;
      updateRerollCostText(): void;
      updateLockRaritiesText(): void;
      clear(): void;
      eraseCursor(): void;
  }
  declare class ModifierOption extends Phaser.GameObjects.Container {
      modifierTypeOption: PokeRogue.modifier.ModifierTypeOption;
      public pb;
      public pbTint;
      public itemContainer;
      public item;
      public itemTint;
      public itemText;
      public itemCostText;
      constructor(scene: PokeRogue.BattleScene, x: number, y: number, modifierTypeOption: PokeRogue.modifier.ModifierTypeOption);
      setup(): void;
      show(remainingDuration: integer, upgradeCountOffset: integer): void;
      getPbAtlasKey(tierOffset?: integer): string;
      updateCostText(): void;
  }
  export {};
  
}

declare namespace PokeRogue.ui {
  //import BattleScene, { InfoToggle } from "../battle-scene";
  //import Move from "../data/move";
  export interface MoveInfoOverlaySettings {
      delayVisibility?: boolean;
      scale?: number;
      top?: boolean;
      right?: boolean;
      onSide?: boolean;
      x?: number;
      y?: number;
      width?: number;
  }
  export class MoveInfoOverlay extends Phaser.GameObjects.Container implements InfoToggle {
      active: boolean;
      public move;
      public desc;
      public descScroll;
      public val;
      public pp;
      public pow;
      public acc;
      public typ;
      public cat;
      public options;
      constructor(scene: PokeRogue.BattleScene, options?: MoveInfoOverlaySettings);
      show(move: PokeRogue.data.Move): boolean;
      clear(): void;
      toggleInfo(force?: boolean): void;
      isActive(): boolean;
      static getWidth(scale: number, scene: PokeRogue.BattleScene): number;
      static getHeight(scale: number, onSide?: boolean): number;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { ModalUiHandler } from "./modal-ui-handler";
  //import { Mode } from "./ui";
  export class OutdatedModalUiHandler extends PokeRogue.ui.ModalUiHandler {
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
      getModalTitle(): string;
      getWidth(): number;
      getHeight(): number;
      getMargin(): [number, number, number, number];
      getButtonLabels(): string[];
      setup(): void;
      show(args: any[]): boolean;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import Pokemon from "../field/pokemon";
  export class PartyExpBar extends Phaser.GameObjects.Container {
      public bg;
      public pokemonIcon;
      public expText;
      public tween;
      shown: boolean;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      showPokemonExp(pokemon: PokeRogue.field.Pokemon, expValue: integer, showOnlyLevelUp: boolean, newLevel: number): Promise<void>;
      hide(): Promise<void>;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import Pokemon, { PlayerPokemon, PokemonMove } from "../field/pokemon";
  //import MessageUiHandler from "./message-ui-handler";
  //import { PokemonFormChangeItemModifier, PokemonHeldItemModifier } from "../modifier/modifier";
  //import { Button } from "#enums/buttons";
  /**
   * Indicates the reason why the party UI is being opened.
   */
  export declare enum PartyUiMode {
      /**
       * Indicates that the party UI is open because of a user-opted switch.  This
       * type of switch can be cancelled.
       */
      SWITCH = 0,
      /**
       * Indicates that the party UI is open because of a faint or other forced
       * switch (eg, move effect). This type of switch cannot be cancelled.
       */
      FAINT_SWITCH = 1,
      /**
       * Indicates that the party UI is open because of a start-of-encounter optional
       * switch. This type of switch can be cancelled.
       */
      POST_BATTLE_SWITCH = 2,
      /**
       * Indicates that the party UI is open because of the move Revival Blessing.
       * This selection cannot be cancelled.
       */
      REVIVAL_BLESSING = 3,
      /**
       * Indicates that the party UI is open to select a mon to apply a modifier to.
       * This type of selection can be cancelled.
       */
      MODIFIER = 4,
      /**
       * Indicates that the party UI is open to select a mon to apply a move
       * modifier to (such as an Ether or PP Up).  This type of selection can be cancelled.
       */
      MOVE_MODIFIER = 5,
      /**
       * Indicates that the party UI is open to select a mon to teach a TM.  This
       * type of selection can be cancelled.
       */
      TM_MODIFIER = 6,
      /**
       * Indicates that the party UI is open to select a mon to remember a move.
       * This type of selection can be cancelled.
       */
      REMEMBER_MOVE_MODIFIER = 7,
      /**
       * Indicates that the party UI is open to transfer items between mons.  This
       * type of selection can be cancelled.
       */
      MODIFIER_TRANSFER = 8,
      /**
       * Indicates that the party UI is open because of a DNA Splicer.  This
       * type of selection can be cancelled.
       */
      SPLICE = 9,
      /**
       * Indicates that the party UI is open to release a party member.  This
       * type of selection can be cancelled.
       */
      RELEASE = 10,
      /**
       * Indicates that the party UI is open to check the team.  This
       * type of selection can be cancelled.
       */
      CHECK = 11
  }
  export declare enum PartyOption {
      CANCEL = -1,
      SEND_OUT = 0,
      PASS_BATON = 1,
      REVIVE = 2,
      APPLY = 3,
      TEACH = 4,
      TRANSFER = 5,
      SUMMARY = 6,
      UNPAUSE_EVOLUTION = 7,
      SPLICE = 8,
      UNSPLICE = 9,
      RELEASE = 10,
      RENAME = 11,
      SCROLL_UP = 1000,
      SCROLL_DOWN = 1001,
      FORM_CHANGE_ITEM = 2000,
      MOVE_1 = 3000,
      MOVE_2 = 3001,
      MOVE_3 = 3002,
      MOVE_4 = 3003,
      ALL = 4000
  }
  export type PartySelectCallback = (cursor: integer, option: PartyOption) => void;
  export type PartyModifierTransferSelectCallback = (fromCursor: integer, index: integer, itemQuantity?: integer, toCursor?: integer) => void;
  export type PartyModifierSpliceSelectCallback = (fromCursor: integer, toCursor?: integer) => void;
  export type PokemonSelectFilter = (pokemon: PokeRogue.field.PlayerPokemon) => string | null;
  export type PokemonModifierTransferSelectFilter = (pokemon: PokeRogue.field.PlayerPokemon, modifier: PokeRogue.modifier.PokemonHeldItemModifier) => string | null;
  export type PokemonMoveSelectFilter = (pokemonMove: PokeRogue.field.PokemonMove) => string | null;
  export class PartyUiHandler extends PokeRogue.ui.MessageUiHandler {
      public partyUiMode;
      public fieldIndex;
      public partyBg;
      public partyContainer;
      public partySlotsContainer;
      public partySlots;
      public partyCancelButton;
      public partyMessageBox;
      public moveInfoOverlay;
      public optionsMode;
      public optionsScroll;
      public optionsCursor;
      public optionsScrollCursor;
      public optionsScrollTotal;
      /** This is only public for test/ui/transfer-item.test.ts */
      optionsContainer: Phaser.GameObjects.Container;
      public optionsBg;
      public optionsCursorObj;
      public options;
      public transferMode;
      public transferOptionCursor;
      public transferCursor;
      /** Current quantity selection for every item held by the pokemon selected for the transfer */
      public transferQuantities;
      /** Stack size of every item that the selected pokemon is holding */
      public transferQuantitiesMax;
      /** Whether to transfer all items */
      public transferAll;
      public lastCursor;
      public selectCallback;
      public selectFilter;
      public moveSelectFilter;
      public tmMoveId;
      public showMovePp;
      public iconAnimHandler;
      public blockInput;
      public static FilterAll;
      static FilterNonFainted: (pokemon: PokeRogue.field.PlayerPokemon) => string;
      static FilterFainted: (pokemon: PokeRogue.field.PlayerPokemon) => string;
      /**
       * For consistency reasons, this looks like the above filters. However this is used only internally and is always enforced for switching.
       * @param pokemon The pokemon to check.
       * @returns
       */
      public FilterChallengeLegal;
      public static FilterAllMoves;
      static FilterItemMaxStacks: (pokemon: PokeRogue.field.PlayerPokemon, modifier: PokeRogue.modifier.PokemonHeldItemModifier) => string;
      static NoEffectMessage: string;
      public localizedOptions;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      populatePartySlots(): void;
      setCursor(cursor: integer): boolean;
      showText(text: string, delay?: integer | null, callback?: Function | null, callbackDelay?: integer | null, prompt?: boolean | null, promptDelay?: integer | null): void;
      showOptions(): void;
      updateOptions(): void;
      startTransfer(): void;
      clearTransfer(): void;
      doRelease(slotIndex: integer): void;
      getReleaseMessage(pokemonName: string): string;
      getFormChangeItemsModifiers(pokemon: PokeRogue.field.Pokemon): PokemonFormChangeItemModifier[];
      getOptionsCursorWithScroll(): integer;
      clearOptions(): void;
      eraseOptionsCursor(): void;
      clear(): void;
      clearPartySlots(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import Pokemon from "../field/pokemon";
  export class PokeballTray extends Phaser.GameObjects.Container {
      public player;
      public bg;
      public balls;
      shown: boolean;
      constructor(scene: PokeRogue.BattleScene, player: boolean);
      setup(): void;
      showPbTray(party: PokeRogue.field.Pokemon[]): Promise<void>;
      hide(): Promise<void>;
  }
  
}

declare namespace PokeRogue.ui {
  //import PokemonInfoContainer from "./pokemon-info-container";
  //import BattleScene from "../battle-scene";
  //import { EggHatchData } from "#app/data/egg-hatch-data";
  //import { PlayerPokemon } from "#app/field/pokemon";
  /**
   * Class for the hatch info summary of each pokemon
   * Holds an info container as well as an additional egg sprite, name, egg moves and main sprite
   */
  export class PokemonHatchInfoContainer extends PokeRogue.ui.PokemonInfoContainer {
      public currentPokemonSprite;
      public pokemonNumberText;
      public pokemonNameText;
      public pokemonEggMovesContainer;
      public pokemonEggMoveContainers;
      public pokemonEggMoveBgs;
      public pokemonEggMoveLabels;
      public pokemonHatchedIcon;
      public pokemonListContainer;
      public pokemonCandyIcon;
      public pokemonCandyOverlayIcon;
      public pokemonCandyCountText;
      constructor(scene: PokeRogue.BattleScene, listContainer: Phaser.GameObjects.Container, x?: number, y?: number);
      setup(): void;
      /**
       * Disable the sprite (and replace with substitute)
       */
      hideDisplayPokemon(): void;
      /**
       * Display a given pokemon sprite with animations
       * assumes the specific pokemon sprite has already been loaded
       */
      displayPokemon(pokemon: PokeRogue.field.PlayerPokemon): void;
      /**
       * Updates the info container with the appropriate dex data and starter entry from the hatchInfo
       * Also updates the displayed name, number, egg moves and main animated sprite for the pokemon
       * @param hatchInfo The EggHatchData of the pokemon / new hatch to show
       */
      showHatchInfo(hatchInfo: PokeRogue.data.EggHatchData): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  export declare enum PokemonIconAnimMode {
      NONE = 0,
      PASSIVE = 1,
      ACTIVE = 2
  }
  type PokemonIcon = Phaser.GameObjects.Container | Phaser.GameObjects.Sprite;
  export class PokemonIconAnimHandler {
      public icons;
      public toggled;
      setup(scene: PokeRogue.BattleScene): void;
      getModeYDelta(mode: PokemonIconAnimMode): number;
      addOrUpdate(icons: PokemonIcon | PokemonIcon[], mode: PokemonIconAnimMode): void;
      remove(icons: PokemonIcon | PokemonIcon[]): void;
      removeAll(): void;
  }
  export {};
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import Pokemon from "../field/pokemon";
  //import { DexEntry, StarterDataEntry } from "../system/game-data";
  //import { StatsContainer } from "./stats-container";
  export class PokemonInfoContainer extends Phaser.GameObjects.Container {
      public readonly infoWindowWidth;
      public pokemonFormLabelText;
      public pokemonFormText;
      public pokemonGenderText;
      public pokemonGenderNewText;
      public pokemonAbilityLabelText;
      public pokemonAbilityText;
      public pokemonNatureLabelText;
      public pokemonNatureText;
      public pokemonShinyIcon;
      public pokemonShinyNewIcon;
      public pokemonFusionShinyIcon;
      public pokemonMovesContainer;
      public pokemonMovesContainers;
      public pokemonMoveBgs;
      public pokemonMoveLabels;
      public infoBg;
      public numCharsBeforeCutoff;
      public initialX;
      public movesContainerInitialX;
      statsContainer: PokeRogue.ui.StatsContainer;
      shown: boolean;
      constructor(scene: PokeRogue.BattleScene, x?: number, y?: number);
      setup(): void;
      show(pokemon: PokeRogue.field.Pokemon, showMoves?: boolean, speedMultiplier?: number, dexEntry?: DexEntry, starterEntry?: StarterDataEntry, eggInfo?: boolean): Promise<void>;
      changeToEggSummaryLayout(): void;
      makeRoomForConfirmUi(speedMultiplier?: number, fromCatch?: boolean): Promise<void>;
      hide(speedMultiplier?: number): Promise<void>;
  }
  export interface PokemonInfoContainer {
      scene: PokeRogue.BattleScene;
  }
  
}

declare namespace PokeRogue.ui {
  //import { FormModalUiHandler } from "./form-modal-ui-handler";
  //import { ModalConfig } from "./modal-ui-handler";
  export class RegistrationFormUiHandler extends PokeRogue.ui.FormModalUiHandler {
      getModalTitle(config?: ModalConfig): string;
      getFields(config?: ModalConfig): string[];
      getWidth(config?: ModalConfig): number;
      getMargin(config?: ModalConfig): [number, number, number, number];
      getButtonTopMargin(): number;
      getButtonLabels(config?: ModalConfig): string[];
      getReadableErrorMessage(error: string): string;
      setup(): void;
      show(args: any[]): boolean;
  }
  
}

declare namespace PokeRogue.ui {
  //import { FormModalUiHandler } from "./form-modal-ui-handler";
  //import { ModalConfig } from "./modal-ui-handler";
  export class RenameFormUiHandler extends PokeRogue.ui.FormModalUiHandler {
      getModalTitle(config?: ModalConfig): string;
      getFields(config?: ModalConfig): string[];
      getWidth(config?: ModalConfig): number;
      getMargin(config?: ModalConfig): [number, number, number, number];
      getButtonLabels(config?: ModalConfig): string[];
      getReadableErrorMessage(error: string): string;
      show(args: any[]): boolean;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import MessageUiHandler from "./message-ui-handler";
  //import { Button } from "../enums/buttons";
  export type RunSelectCallback = (cursor: integer) => void;
  export declare const RUN_HISTORY_LIMIT: number;
  /**
   * RunHistoryUiHandler handles the UI of the Run History Menu
   * Run History itself is broken into an array of RunEntryContainer objects that can show the user basic details about their run and allow them to access more details about their run through cursor action.
   * It navigates similarly to the UI of the save slot select menu.
   * The only valid input buttons are Button.ACTION and Button.CANCEL.
   */
  export class RunHistoryUiHandler extends PokeRogue.ui.MessageUiHandler {
      public runSelectContainer;
      public runsContainer;
      public runSelectMessageBox;
      public runSelectMessageBoxContainer;
      public runs;
      public runSelectCallback;
      public scrollCursor;
      public cursorObj;
      public runContainerInitialY;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      /**
       * Performs a certain action based on the button pressed by the user
       * @param button
       * The user can navigate through the runs with Button.UP/Button.DOWN.
       * Button.ACTION allows the user to access more information about their runs.
       * Button.CANCEL allows the user to go back.
       */
      processInput(button: PokeRogue.enums.Button): boolean;
      /**
       * This retrieves the player's run history and facilitates the processes necessary for the output display.
       * @param scene: PokeRogue.BattleScene
       * Runs are displayed from newest --> oldest in descending order.
       * In the for loop, each run is processed to create an RunEntryContainer used to display and store the run's unique information
       */
      public populateRuns;
      /**
       * If the player has no runs saved so far, this creates a giant window labeled empty instead.
       */
      public showEmpty;
      setCursor(cursor: number): boolean;
      public setScrollCursor;
      /**
       * Called when the player returns back to the menu
       * Uses the functions clearCursor() and clearRuns()
       */
      clear(): void;
      public clearCursor;
      public clearRuns;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import UiHandler from "./ui-handler";
  //import { SessionSaveData } from "../system/game-data";
  //import { Button } from "../enums/buttons";
  /**
   * RunInfoUiMode indicates possible overlays of RunInfoUiHandler.
   * MAIN <-- default overlay that can return back to RunHistoryUiHandler + should eventually have its own enum once more pages are added to RunInfoUiHandler
   * HALL_OF_FAME, ENDING_ART, etc. <-- overlays that should return back to MAIN
   */
  declare enum RunInfoUiMode {
      MAIN = 0,
      HALL_OF_FAME = 1,
      ENDING_ART = 2
  }
  /**
   * Some variables are protected because this UI class will most likely be extended in the future to display more information.
   * These variables will most likely be shared across 'classes' aka pages.
   * I believe that it is possible that the contents/methods of the first page will be placed in their own class that is an extension of RunInfoUiHandler as more pages are added.
   * For now, I leave as is.
   */
  export class RunInfoUiHandler extends PokeRogue.ui.UiHandler {
      protected runInfo: PokeRogue.system.SessionSaveData;
      protected isVictory: boolean;
      protected pageMode: RunInfoUiMode;
      protected runContainer: Phaser.GameObjects.Container;
      public runResultContainer;
      public runInfoContainer;
      public partyContainer;
      public partyHeldItemsContainer;
      public statsBgWidth;
      public partyContainerHeight;
      public partyContainerWidth;
      public hallofFameContainer;
      public endCardContainer;
      public partyInfo;
      public partyVisibility;
      public modifiersModule;
      constructor(scene: PokeRogue.BattleScene);
      setup(): Promise<void>;
      /**
       * This takes a run's RunEntry and uses the information provided to display essential information about the player's run.
       * @param args[0] : a RunEntry object
       *
       * show() creates these UI objects in order -
       * A solid-color background used to hide RunHistoryUiHandler
       * Header: Page Title + Option to Display Modifiers
       * Run Result Container:
       * Party Container:
       * this.isVictory === true --> Hall of Fame Container:
       */
      show(args: any[]): boolean;
      /**
       * Creates and adds the header background, title text, and important buttons to RunInfoUiHandler
       * It does check if the run has modifiers before adding a button for the user to display their party's held items
       * It does not check if the run has any PokemonHeldItemModifiers though.
       */
      public addHeader;
      /**
       * Shows the run's end result
       *
       * Victory : The run will display options to allow the player to view the Hall of Fame + Ending Art
       * Defeat : The run will show the opposing Pokemon (+ Trainer) that the trainer was defeated by.
       * Defeat can call either parseWildSingleDefeat(), parseWildDoubleDefeat(), or parseTrainerDefeat()
       *
       */
      public parseRunResult;
      /**
       * This function is called to edit an enemyContainer to represent a loss from a defeat by a wild single Pokemon battle.
       * @param enemyContainer - container holding enemy visual and level information
       */
      public parseWildSingleDefeat;
      /**
       * This function is called to edit a container to represent a loss from a defeat by a wild double Pokemon battle.
       * This function and parseWildSingleDefeat can technically be merged, but I find it tricky to manipulate the different 'centers' a single battle / double battle container will hold.
       * @param enemyContainer - container holding enemy visuals and level information
       */
      public parseWildDoubleDefeat;
      /**
       * This edits a container to represent a loss from a defeat by a trainer battle.
       * @param enemyContainer - container holding enemy visuals and level information
       * The trainers are placed to the left of their party.
       * Depending on the trainer icon, there may be overlap between the edges of the box or their party. (Capes...)
       *
       * Party Pokemon have their icons, terastalization status, and level shown.
       */
      public parseTrainerDefeat;
      /**
       * Shows information about the run like the run's mode, duration, luck, money, and player held items
       * The values for luck and money are from the end of the run, not the player's luck at the start of the run.
       * @param windowX
       * @param windowY These two params are the coordinates of the window's bottom right corner. This is used to dynamically position Luck based on its length, creating a nice layout regardless of language / luck value.
       */
      public parseRunInfo;
      /**
       * This function parses the Challenges section of the Run Entry and returns a list of active challenge.
       * @return string[] of active challenge names
       */
      public challengeParser;
      /**
       * Parses and displays the run's player party.
       * Default Information: Icon, Level, Nature, Ability, Passive, Shiny Status, Fusion Status, Stats, and Moves.
       * B-Side Information: Icon + Held Items (Can be displayed to the user through pressing the abilityButton)
       */
      public parsePartyInfo;
      /**
       * Changes what is displayed of the Pokemon's held items
       * @param partyVisible {boolean}
       * True -> Shows the Pokemon's default information and hides held items
       * False -> Shows the Pokemon's held items and hides default information
       */
      public showParty;
      /**
       * Shows the ending art.
       */
      public createVictorySplash;
      /** createHallofFame() - if the run is victorious, this creates a hall of fame image for the player to view
       * Overlay created by Koda (Thank you!)
       * This could be adapted into a public-facing method for victory screens. Perhaps.
       */
      public createHallofFame;
      /**
       * Takes input from the user to perform a desired action.
       * @param button - Button object to be processed
       * Button.CANCEL - removes all containers related to RunInfo and returns the user to Run History
       * Button.CYCLE_FORM, Button.CYCLE_SHINY, Button.CYCLE_ABILITY - runs the function buttonCycleOption()
       */
      processInput(button: PokeRogue.enums.Button): boolean;
      /**
       * buttonCycleOption : takes a parameter button to execute different actions in the run-info page
       * The use of non-directional / A / B buttons is named in relation to functions used during starter-select.
       * Button.CYCLE_FORM (F key) --> displays ending art (victory only)
       * Button.CYCLE_SHINY (R key) --> displays hall of fame (victory only)
       * Button.CYCLE_ABILITY (E key) --> shows pokemon held items
       */
      public buttonCycleOption;
  }
  export {};
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { Button } from "#enums/buttons";
  //import MessageUiHandler from "./message-ui-handler";
  export declare enum SaveSlotUiMode {
      LOAD = 0,
      SAVE = 1
  }
  export type SaveSlotSelectCallback = (cursor: integer) => void;
  export class SaveSlotSelectUiHandler extends PokeRogue.ui.MessageUiHandler {
      public saveSlotSelectContainer;
      public sessionSlotsContainer;
      public saveSlotSelectMessageBox;
      public saveSlotSelectMessageBoxContainer;
      public sessionSlots;
      public uiMode;
      public saveSlotSelectCallback;
      public scrollCursor;
      public cursorObj;
      public sessionSlotsContainerInitialY;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      populateSessionSlots(): void;
      showText(text: string, delay?: integer, callback?: Function, callbackDelay?: integer, prompt?: boolean, promptDelay?: integer): void;
      setCursor(cursor: integer): boolean;
      setScrollCursor(scrollCursor: integer): boolean;
      clear(): void;
      eraseCursor(): void;
      clearSessionSlots(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "#app/battle-scene";
  export class SavingIconHandler extends Phaser.GameObjects.Container {
      public icon;
      public animActive;
      public shown;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(): void;
      hide(): void;
  }
  
}

declare namespace PokeRogue.ui {
  export declare class ScrollBar extends Phaser.GameObjects.Container {
      public bg;
      public handleBody;
      public handleBottom;
      public pages;
      public page;
      constructor(scene: Phaser.Scene, x: number, y: number, pages: number);
      setPage(page: number): void;
      setPages(pages: number): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { ModalUiHandler } from "./modal-ui-handler";
  //import { Mode } from "./ui";
  export class SessionReloadModalUiHandler extends PokeRogue.ui.ModalUiHandler {
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
      getModalTitle(): string;
      getWidth(): number;
      getHeight(): number;
      getMargin(): [number, number, number, number];
      getButtonLabels(): string[];
      setup(): void;
      show(args: any[]): boolean;
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import UiHandler from "../ui-handler";
  //import BattleScene from "../../battle-scene";
  //import { Mode } from "../ui";
  //import { Button } from "#enums/buttons";
  type CancelFn = (succes?: boolean) => boolean;
  /**
   * Abstract class for handling UI elements related to button bindings.
   */
  export abstract class AbstractBindingUiHandler extends PokeRogue.ui.UiHandler {
      protected optionSelectContainer: Phaser.GameObjects.Container;
      protected actionsContainer: Phaser.GameObjects.Container;
      protected titleBg: Phaser.GameObjects.NineSlice;
      protected actionBg: Phaser.GameObjects.NineSlice;
      protected optionSelectBg: Phaser.GameObjects.NineSlice;
      protected unlockText: Phaser.GameObjects.Text;
      protected timerText: Phaser.GameObjects.Text;
      protected swapText: Phaser.GameObjects.Text;
      protected actionLabel: Phaser.GameObjects.Text;
      protected cancelLabel: Phaser.GameObjects.Text;
      protected listening: boolean;
      protected buttonPressed: number | null;
      protected newButtonIcon: Phaser.GameObjects.Sprite;
      protected targetButtonIcon: Phaser.GameObjects.Sprite;
      protected cancelFn: CancelFn | null;
      abstract swapAction(): boolean;
      protected timeLeftAutoClose: number;
      protected countdownTimer: any;
      protected target: any;
      /**
         * Constructor for the AbstractBindingUiHandler.
         *
         * @param scene - The BattleScene instance.
         * @param mode - The UI mode.
         */
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
      /**
         * Setup UI elements.
         */
      setup(): void;
      manageAutoCloseTimer(): void;
      /**
         * Show the UI with the provided arguments.
         *
         * @param args - Arguments to be passed to the show method.
         * @returns `true` if successful.
         */
      show(args: any[]): boolean;
      /**
         * Get the width of the window.
         *
         * @returns The window width.
         */
      getWindowWidth(): number;
      /**
         * Get the height of the window.
         *
         * @returns The window height.
         */
      getWindowHeight(): number;
      /**
         * Process the input for the given button.
         *
         * @param button - The button to process.
         * @returns `true` if the input was processed successfully.
         */
      processInput(button: PokeRogue.enums.Button): boolean;
      /**
         * Set the cursor to the specified position.
         *
         * @param cursor - The cursor position to set.
         * @returns `true` if the cursor was set successfully.
         */
      setCursor(cursor: integer): boolean;
      /**
         * Clear the UI elements and state.
         */
      clear(): void;
      /**
         * Handle input down events.
         *
         * @param buttonIcon - The icon of the button that was pressed.
         * @param assignedButtonIcon - The icon of the button that is assigned.
         * @param type - The type of button press.
         */
      onInputDown(buttonIcon: string, assignedButtonIcon: string | null, type: string): void;
  }
  export {};
  
}

declare namespace PokeRogue.ui.settings {
  //import UiHandler from "../ui-handler";
  //import BattleScene from "../../battle-scene";
  //import { Mode } from "../ui";
  //import { InterfaceConfig } from "../../inputs-controller";
  //import NavigationMenu from "#app/ui/settings/navigationMenu";
  //import { Device } from "#enums/devices";
  //import { Button } from "#enums/buttons";
  export interface InputsIcons {
      [key: string]: Phaser.GameObjects.Sprite;
  }
  export interface LayoutConfig {
      optionsContainer: Phaser.GameObjects.Container;
      inputsIcons: InputsIcons;
      settingLabels: Phaser.GameObjects.Text[];
      optionValueLabels: Phaser.GameObjects.Text[][];
      optionCursors: integer[];
      keys: string[];
      bindingSettings: Array<String>;
  }
  /**
   * Abstract class for handling UI elements related to control settings.
   */
  export abstract class AbstractControlSettingsUiHandler extends PokeRogue.ui.UiHandler {
      protected settingsContainer: Phaser.GameObjects.Container;
      protected optionsContainer: Phaser.GameObjects.Container;
      protected navigationContainer: PokeRogue.ui.settings.NavigationMenu;
      protected scrollCursor: integer;
      protected optionCursors: integer[];
      protected cursorObj: Phaser.GameObjects.NineSlice | null;
      protected optionsBg: Phaser.GameObjects.NineSlice;
      protected actionsBg: Phaser.GameObjects.NineSlice;
      protected settingLabels: Phaser.GameObjects.Text[];
      protected optionValueLabels: Phaser.GameObjects.Text[][];
      protected layout: Map<string, LayoutConfig>;
      protected inputsIcons: InputsIcons;
      protected navigationIcons: InputsIcons;
      protected keys: Array<String>;
      protected bindingSettings: Array<String>;
      protected setting: any;
      protected settingBlacklisted: any;
      protected settingDeviceDefaults: any;
      protected settingDeviceOptions: any;
      protected configs: any;
      protected commonSettingsCount: any;
      protected textureOverride: any;
      protected titleSelected: any;
      protected localStoragePropertyName: any;
      protected rowsToDisplay: number;
      protected device: PokeRogue.enums.Device;
      abstract saveSettingToLocalStorage(setting: any, cursor: any): void;
      abstract setSetting(scene: PokeRogue.BattleScene, setting: any, value: integer): boolean;
      /**
       * Constructor for the AbstractSettingsUiHandler.
       *
       * @param scene - The BattleScene instance.
       * @param mode - The UI mode.
       */
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
      getLocalStorageSetting(): object;
      public camelize;
      /**
       * Setup UI elements.
       */
      setup(): void;
      /**
       * Get the active configuration.
       *
       * @returns The active configuration for current device
       */
      getActiveConfig(): InterfaceConfig;
      /**
       * Update the bindings for the current active device configuration.
       */
      updateBindings(): void;
      updateNavigationDisplay(): void;
      /**
       * Show the UI with the provided arguments.
       *
       * @param args - Arguments to be passed to the show method.
       * @returns `true` if successful.
       */
      show(args: any[]): boolean;
      /**
       * Set the UI layout for the active device configuration.
       *
       * @param activeConfig - The active device configuration.
       * @returns `true` if the layout was successfully applied, otherwise `false`.
       */
      setLayout(activeConfig: PokeRogue.InterfaceConfig): boolean;
      /**
       * Process the input for the given button.
       *
       * @param button - The button to process.
       * @returns `true` if the input was processed successfully.
       */
      processInput(button: PokeRogue.enums.Button): boolean;
      resetScroll(): void;
      /**
       * Set the cursor to the specified position.
       *
       * @param cursor - The cursor position to set.
       * @returns `true` if the cursor was set successfully.
       */
      setCursor(cursor: integer): boolean;
      /**
       * Set the scroll cursor to the specified position.
       *
       * @param scrollCursor - The scroll cursor position to set.
       * @returns `true` if the scroll cursor was set successfully.
       */
      setScrollCursor(scrollCursor: integer): boolean;
      /**
       * Set the option cursor to the specified position.
       *
       * @param settingIndex - The index of the setting.
       * @param cursor - The cursor position to set.
       * @param save - Whether to save the setting to local storage.
       * @returns `true` if the option cursor was set successfully.
       */
      setOptionCursor(settingIndex: integer, cursor: integer, save?: boolean): boolean;
      /**
       * Update the scroll position of the settings UI.
       */
      updateSettingsScroll(): void;
      /**
       * Clear the UI elements and state.
       */
      clear(): void;
      /**
       * Erase the cursor from the UI.
       */
      eraseCursor(): void;
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import BattleScene from "../../battle-scene";
  //import { Mode } from "../ui";
  //import UiHandler from "../ui-handler";
  //import { Button } from "#enums/buttons";
  //import { InputsIcons } from "#app/ui/settings/abstract-control-settings-ui-handler.js";
  //import { Setting, SettingType } from "#app/system/settings/settings";
  /**
   * Abstract class for handling UI elements related to settings.
   */
  export class AbstractSettingsUiHandler extends PokeRogue.ui.UiHandler {
      public settingsContainer;
      public optionsContainer;
      public navigationContainer;
      public scrollCursor;
      public optionsBg;
      public optionCursors;
      public settingLabels;
      public optionValueLabels;
      protected navigationIcons: PokeRogue.ui.settings.InputsIcons;
      public cursorObj;
      public reloadSettings;
      public reloadRequired;
      protected rowsToDisplay: number;
      protected title: string;
      protected settings: Array<Setting>;
      protected localStorageKey: string;
      constructor(scene: PokeRogue.BattleScene, type: PokeRogue.system.settings.SettingType, mode?: Mode | null);
      /**
       * Setup UI elements
       */
      setup(): void;
      /**
       * Update the bindings for the current active device configuration.
       */
      updateBindings(): void;
      /**
       * Show the UI with the provided arguments.
       *
       * @param args - Arguments to be passed to the show method.
       * @returns `true` if successful.
         */
      show(args: any[]): boolean;
      /**
       * Processes input from a specified button.
       * This method handles navigation through a UI menu, including movement through menu items
       * and handling special actions like cancellation. Each button press may adjust the cursor
       * position or the menu scroll, and plays a sound effect if the action was successful.
       *
       * @param button - The button pressed by the user.
       * @returns `true` if the action associated with the button was successfully processed, `false` otherwise.
       */
      processInput(button: PokeRogue.enums.Button): boolean;
      /**
       * Activate the specified setting if it is activatable.
       * @param setting The setting to activate.
       * @returns Whether the setting was successfully activated.
       */
      activateSetting(setting: PokeRogue.system.settings.Setting): boolean;
      /**
       * Set the cursor to the specified position.
       *
       * @param cursor - The cursor position to set.
       * @returns `true` if the cursor was set successfully.
       */
      setCursor(cursor: integer): boolean;
      /**
       * Set the option cursor to the specified position.
       *
       * @param settingIndex - The index of the setting.
       * @param cursor - The cursor position to set.
       * @param save - Whether to save the setting to local storage.
       * @returns `true` if the option cursor was set successfully.
       */
      setOptionCursor(settingIndex: integer, cursor: integer, save?: boolean): boolean;
      /**
       * Set the scroll cursor to the specified position.
       *
       * @param scrollCursor - The scroll cursor position to set.
       * @returns `true` if the scroll cursor was set successfully.
       */
      setScrollCursor(scrollCursor: integer): boolean;
      /**
       * Update the scroll position of the settings UI.
       */
      updateSettingsScroll(): void;
      /**
       * Clear the UI elements and state.
       */
      clear(): void;
      /**
       * Erase the cursor from the UI.
       */
      eraseCursor(): void;
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import BattleScene from "../../battle-scene";
  //import AbstractBindingUiHandler from "./abstract-binding-ui-handler";
  //import { Mode } from "../ui";
  export class GamepadBindingUiHandler extends PokeRogue.ui.settings.AbstractBindingUiHandler {
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
      setup(): void;
      getSelectedDevice(): any;
      gamepadButtonDown(pad: Phaser.Input.Gamepad.Gamepad, button: Phaser.Input.Gamepad.Button, value: number): void;
      swapAction(): boolean;
      /**
         * Clear the UI elements and state.
         */
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import BattleScene from "../../battle-scene";
  //import AbstractBindingUiHandler from "./abstract-binding-ui-handler";
  //import { Mode } from "../ui";
  export class KeyboardBindingUiHandler extends PokeRogue.ui.settings.AbstractBindingUiHandler {
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
      setup(): void;
      getSelectedDevice(): any;
      onKeyDown(event: any): void;
      swapAction(): boolean;
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import TouchControl from "#app/touch-controls.js";
  //import UI from "#app/ui/ui.js";
  import { Scene } from "phaser";
  export declare const TOUCH_CONTROL_POSITIONS_LANDSCAPE = "touchControlPositionsLandscape";
  export declare const TOUCH_CONTROL_POSITIONS_PORTRAIT = "touchControlPositionsPortrait";
  /**
   * Handles the dragging of touch controls around the screen.
   */
  export class MoveTouchControlsHandler {
      /** The element that is currently being dragged */
      public draggingElement;
      /**
       * Whether the user is currently configuring the touch controls.
       * When this is true, the touch controls can be dragged around the screen and the controls of the game are disabled.
       */
      inConfigurationMode: boolean;
      /**
       * The event listeners for the configuration mode.
       * These are used to remove the event listeners when the configuration mode is disabled.
       */
      public configurationEventListeners;
      public overlay;
      public isLandscapeMode;
      public touchControls;
      constructor(touchControls: PokeRogue.TouchControl);
      /**
       * Changes the state of the touch controls to the given orientation.
       * @param isLandscapeMode Whether the screen is in landscape mode.
       */
      public changeOrientation;
      public getScreenSize;
      /**
       * Creates the toolbar element for the configuration mode.
       * @returns A new div element that contains the toolbar for the configuration mode.
       */
      public createToolbarElement;
      /**
       * Initializes the toolbar of the configuration mode.
       * Places its elements at the top of the touch controls and adds event listeners to them.
       */
      public createToolbar;
      /**
       * Returns the references to the elements of the configuration toolbar.
       * @returns The references to the elements of the configuration toolbar
       *          or undefined if the elements can not be found (e.g. during tests)
       */
      public getConfigToolbarRefs;
      /**
       * Elements that are inside the left div are anchored to the left boundary of the screen.
       * The x value of the positions are considered offsets to their respective boundaries.
       * @param element Either an element in the left div or the right div.
       * @returns Whether the given element is inside the left div.
       */
      public isLeft;
      /**
       * Start dragging the given button.
       * @param controlGroup The button that is being dragged.
       * @param touch The touch event that started the drag.
       */
      public startDrag;
      /**
       * Drags the currently dragged element to the given touch position.
       * @param touch The touch event that is currently happening.
       * @param isLeft Whether the dragged element is a left button.
       */
      public drag;
      /**
       * Stops dragging the currently dragged element.
       */
      public stopDrag;
      /**
       * Returns the current positions of all touch controls that have moved from their default positions of this orientation.
       * @returns {ControlPosition[]} The current positions of all touch controls that have moved from their default positions of this orientation
       */
      public getModifiedCurrentPositions;
      /**
       * Returns the key of the local storage for the control positions data of this orientation
       */
      public getLocalStorageKey;
      /**
       * Returns the saved positions of the touch controls.
       * Filters result by the given orientation.
       * @returns The saved positions of the touch controls of this orientation
       */
      public getSavedPositionsOfCurrentOrientation;
      /**
       * Saves the current positions of the touch controls to the local storage.
       */
      public saveCurrentPositions;
      /**
       * Updates the positions of the touch controls.
       * @param positions The new positions of the touch controls.
       */
      public setPositions;
      /**
       * Sets a control element to the given position.
       * The x values are either offsets to the left or right boundary of the screen, depending on the side of the element.
       * E.g. For left elements, (0, 0) is the bottom left corner of the screen and
       * for right elements, (0, 0) is the bottom right corner of the screen.
       * @param controlElement
       * @param x Either an offset to the left or right boundary of the screen.
       * @param y An offset to the bottom boundary of the screen.
       */
      public setPosition;
      /**
       * Resets the positions of the touch controls to their default positions and clears the saved positions.
       * Does not save the changes.
       */
      public resetPositions;
      /**
       * Returns all control groups of the touch controls.
       * These are groups of buttons that can be dragged around the screen.
       * @returns All control groups of the touch controls.
       */
      public getControlGroupElements;
      /**
       * Creates the event listeners for the configuration mode.
       * @param controlGroups The elements that can be dragged around the screen.
       * @returns The event listeners for the configuration mode.
       */
      public createConfigurationEventListeners;
      /**
       * Creates an overlay that covers the screen and allows the user to drag the touch controls around.
       * Also enables the toolbar for saving, resetting, and canceling the changes.
       * @param ui The UI of the game.
       * @param scene The scene of the game.
       */
      public createOverlay;
      /**
      * Allows the user to configure the touch controls by dragging buttons around the screen.
      * @param ui The UI of the game.
      * @param scene The scene of the game.
      */
      enableConfigurationMode(ui: PokeRogue.ui.UI, scene: Scene): void;
      /**
       * Disables the configuration mode.
       */
      disableConfigurationMode(): void;
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import BattleScene from "#app/battle-scene";
  //import { Mode } from "#app/ui/ui";
  //import { Button } from "#enums/buttons";
  /**
   * Manages navigation and menus tabs within the setting menu.
   */
  export declare class NavigationManager {
      public static instance;
      modes: PokeRogue.ui.Mode[];
      selectedMode: PokeRogue.ui.Mode;
      navigationMenus: NavigationMenu[];
      labels: string[];
      /**
       * Creates an instance of NavigationManager.
       * To create a new tab in the menu, add the mode to the modes array and the label to the labels array.
       * and instantiate a new NavigationMenu instance in your handler
       * like: this.navigationContainer = new NavigationMenu(this.scene, 0, 0);
       */
      constructor();
      reset(): void;
      /**
       * Gets the singleton instance of the NavigationManager.
       * @returns The singleton instance of NavigationManager.
       */
      static getInstance(): NavigationManager;
      /**
       * Navigates modes based on given direction
       * @param scene The current BattleScene instance
       * @param direction LEFT or RIGHT
       */
      navigate(scene: any, direction: any): void;
      /**
       * Updates all navigation menus.
       */
      updateNavigationMenus(): void;
      /**
       * Updates icons for all navigation menus.
       */
      updateIcons(): void;
  }
  export class NavigationMenu extends Phaser.GameObjects.Container {
      public navigationIcons;
      scene: PokeRogue.BattleScene;
      protected headerTitles: Phaser.GameObjects.Text[];
      /**
       * Creates an instance of NavigationMenu.
       * @param scene The current BattleScene instance.
       * @param x The x position of the NavigationMenu.
       * @param y The y position of the NavigationMenu.
       */
      constructor(scene: PokeRogue.BattleScene, x: number, y: number);
      /**
       * Sets up the NavigationMenu by adding windows, icons, and labels.
       */
      setup(): void;
      /**
       * Updates the NavigationMenu's header titles based on the selected mode.
       */
      update(): void;
      /**
       * Updates the icons in the NavigationMenu based on the latest input recorded.
       */
      updateIcons(): void;
      /**
       * Handles navigation based on the button pressed.
       * @param button The button pressed for navigation.
       * @returns A boolean indicating if the navigation was handled.
       */
      navigate(button: PokeRogue.enums.Button): boolean;
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import BattleScene from "../../battle-scene";
  //import AbstractOptionSelectUiHandler from "../abstact-option-select-ui-handler";
  //import { Mode } from "../ui";
  export class OptionSelectUiHandler extends PokeRogue.ui.AbstractOptionSelectUiHandler {
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      getWindowWidth(): integer;
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import BattleScene from "../../battle-scene";
  //import { Mode } from "../ui";
  //import AbstractSettingsUiHandler from "./abstract-settings-ui-handler";
  export class SettingsAudioUiHandler extends PokeRogue.ui.settings.AbstractSettingsUiHandler {
      /**
       * Creates an instance of SettingsAudioUiHandler.
       *
       * @param scene - The BattleScene instance.
       * @param mode - The UI mode, optional.
       */
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import BattleScene from "../../battle-scene";
  //import { Mode } from "../ui";
  //import AbstractSettingsUiHandler from "./abstract-settings-ui-handler";
  export class SettingsDisplayUiHandler extends PokeRogue.ui.settings.AbstractSettingsUiHandler {
      /**
       * Creates an instance of SettingsGamepadUiHandler.
       *
       * @param scene - The BattleScene instance.
       * @param mode - The UI mode, optional.
       */
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import BattleScene from "../../battle-scene";
  //import { Mode } from "../ui";
  //import { setSettingGamepad } from "../../system/settings/settings-gamepad";
  //import { InterfaceConfig } from "#app/inputs-controller";
  //import AbstractControlSettingsUiHandler from "#app/ui/settings/abstract-control-settings-ui-handler.js";
  /**
   * Class representing the settings UI handler for gamepads.
   *
   * @extends PokeRogue.ui.settings.AbstractControlSettingsUiHandler
   */
  export class SettingsGamepadUiHandler extends PokeRogue.ui.settings.AbstractControlSettingsUiHandler {
      /**
         * Creates an instance of SettingsGamepadUiHandler.
         *
         * @param scene - The BattleScene instance.
         * @param mode - The UI mode, optional.
         */
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
      setSetting: typeof setSettingGamepad;
      /**
         * Setup UI elements.
         */
      setup(): void;
      /**
         * Set the layout for the active configuration.
         *
         * @param activeConfig - The active gamepad configuration.
         * @returns `true` if the layout was successfully applied, otherwise `false`.
         */
      setLayout(activeConfig: PokeRogue.InterfaceConfig): boolean;
      /**
         * Update the display of the chosen gamepad.
         */
      updateChosenGamepadDisplay(): void;
      /**
         * Save the setting to local storage.
         *
         * @param settingName - The setting to save.
         * @param cursor - The cursor position to save.
         */
      saveSettingToLocalStorage(settingName: any, cursor: any): void;
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import BattleScene from "../../battle-scene";
  //import { Mode } from "../ui";
  //import { setSettingKeyboard } from "#app/system/settings/settings-keyboard";
  //import AbstractControlSettingsUiHandler from "#app/ui/settings/abstract-control-settings-ui-handler.js";
  //import { InterfaceConfig } from "#app/inputs-controller";
  /**
   * Class representing the settings UI handler for keyboards.
   *
   * @extends PokeRogue.ui.settings.AbstractControlSettingsUiHandler
   */
  export class SettingsKeyboardUiHandler extends PokeRogue.ui.settings.AbstractControlSettingsUiHandler {
      /**
         * Creates an instance of SettingsKeyboardUiHandler.
         *
         * @param scene - The BattleScene instance.
         * @param mode - The UI mode, optional.
         */
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
      setSetting: typeof setSettingKeyboard;
      /**
         * Setup UI elements.
         */
      setup(): void;
      /**
         * Handle the home key press event.
         */
      onHomeDown(): void;
      /**
         * Handle the delete key press event.
         */
      onDeleteDown(): void;
      /**
         * Set the layout for the active configuration.
         *
         * @param activeConfig - The active keyboard configuration.
         * @returns `true` if the layout was successfully applied, otherwise `false`.
         */
      setLayout(activeConfig: PokeRogue.InterfaceConfig): boolean;
      /**
         * Update the display of the chosen keyboard layout.
         */
      updateChosenKeyboardDisplay(): void;
      /**
         * Save the custom keyboard mapping to local storage.
         *
         * @param config - The configuration to save.
         */
      saveCustomKeyboardMappingToLocalStorage(config: any): void;
      /**
         * Save the setting to local storage.
         *
         * @param settingName - The name of the setting to save.
         * @param cursor - The cursor position to save.
         */
      saveSettingToLocalStorage(settingName: any, cursor: any): void;
  }
  
}

declare namespace PokeRogue.ui.settings {
  //import BattleScene from "../../battle-scene";
  //import { Mode } from "../ui";
  //import AbstractSettingsUiHandler from "./abstract-settings-ui-handler";
  export class SettingsUiHandler extends PokeRogue.ui.settings.AbstractSettingsUiHandler {
      /**
       * Creates an instance of SettingsGamepadUiHandler.
       *
       * @param scene - The BattleScene instance.
       * @param mode - The UI mode, optional.
       */
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import PokemonSpecies from "../data/pokemon-species";
  export declare class StarterContainer extends Phaser.GameObjects.Container {
      scene: PokeRogue.BattleScene;
      species: PokeRogue.data.PokemonSpecies;
      icon: Phaser.GameObjects.Sprite;
      shinyIcons: Phaser.GameObjects.Image[];
      label: Phaser.GameObjects.Text;
      starterPassiveBgs: Phaser.GameObjects.Image;
      hiddenAbilityIcon: Phaser.GameObjects.Image;
      favoriteIcon: Phaser.GameObjects.Image;
      classicWinIcon: Phaser.GameObjects.Image;
      candyUpgradeIcon: Phaser.GameObjects.Image;
      candyUpgradeOverlayIcon: Phaser.GameObjects.Image;
      cost: number;
      constructor(scene: PokeRogue.BattleScene, species: PokeRogue.data.PokemonSpecies);
      checkIconId(female: any, formIndex: any, shiny: any, variant: any): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import { Variant } from "#app/data/variant";
  //import BattleScene from "../battle-scene";
  //import { Nature } from "../data/nature";
  //import PokemonSpecies from "../data/pokemon-species";
  //import { Type } from "../data/type";
  //import { StarterMoveset, StarterAttributes } from "../system/game-data";
  //import MessageUiHandler from "./message-ui-handler";
  //import { Moves } from "#enums/moves";
  //import { Button } from "#enums/buttons";
  //import { StarterContainer } from "./starter-container";
  export type StarterSelectCallback = (starters: Starter[]) => void;
  export interface Starter {
      species: PokeRogue.data.PokemonSpecies;
      dexAttr: bigint;
      abilityIndex: integer;
      passive: boolean;
      nature: PokeRogue.data.Nature;
      moveset?: StarterMoveset;
      pokerus: boolean;
      nickname?: string;
  }
  export class StarterSelectUiHandler extends PokeRogue.ui.MessageUiHandler {
      public starterSelectContainer;
      public starterSelectScrollBar;
      public filterBarContainer;
      public filterBar;
      public shinyOverlay;
      public starterContainers;
      public filteredStarterContainers;
      public validStarterContainers;
      public pokemonNumberText;
      public pokemonSprite;
      public pokemonNameText;
      public pokemonGrowthRateLabelText;
      public pokemonGrowthRateText;
      public type1Icon;
      public type2Icon;
      public pokemonLuckLabelText;
      public pokemonLuckText;
      public pokemonGenderText;
      public pokemonUncaughtText;
      public pokemonAbilityLabelText;
      public pokemonAbilityText;
      public pokemonPassiveLabelText;
      public pokemonPassiveText;
      public pokemonNatureLabelText;
      public pokemonNatureText;
      public pokemonMovesContainer;
      public pokemonMoveContainers;
      public pokemonMoveBgs;
      public pokemonMoveLabels;
      public pokemonAdditionalMoveCountLabel;
      public pokemonEggMovesContainer;
      public pokemonEggMoveContainers;
      public pokemonEggMoveBgs;
      public pokemonEggMoveLabels;
      public pokemonCandyIcon;
      public pokemonCandyDarknessOverlay;
      public pokemonCandyOverlayIcon;
      public pokemonCandyCountText;
      public pokemonCaughtHatchedContainer;
      public pokemonCaughtCountText;
      public pokemonHatchedIcon;
      public pokemonHatchedCountText;
      public pokemonShinyIcon;
      public pokemonPassiveDisabledIcon;
      public pokemonPassiveLockedIcon;
      public instructionsContainer;
      public filterInstructionsContainer;
      public shinyIconElement;
      public formIconElement;
      public abilityIconElement;
      public genderIconElement;
      public natureIconElement;
      public variantIconElement;
      public goFilterIconElement;
      public shinyLabel;
      public formLabel;
      public genderLabel;
      public abilityLabel;
      public natureLabel;
      public variantLabel;
      public goFilterLabel;
      public starterSelectMessageBox;
      public starterSelectMessageBoxContainer;
      public statsContainer;
      public pokemonFormText;
      public moveInfoOverlay;
      public statsMode;
      public starterIconsCursorXOffset;
      public starterIconsCursorYOffset;
      public starterIconsCursorIndex;
      public filterMode;
      public dexAttrCursor;
      public abilityCursor;
      public natureCursor;
      public filterBarCursor;
      public starterMoveset;
      public scrollCursor;
      public allSpecies;
      public lastSpecies;
      public speciesLoaded;
      starterSpecies: PokeRogue.data.PokemonSpecies[];
      public pokerusSpecies;
      public starterAttr;
      public starterAbilityIndexes;
      public starterNatures;
      public starterMovesets;
      public speciesStarterDexEntry;
      public speciesStarterMoves;
      public canCycleShiny;
      public canCycleForm;
      public canCycleGender;
      public canCycleAbility;
      public canCycleNature;
      public canCycleVariant;
      public value;
      public canAddParty;
      public assetLoadCancelled;
      cursorObj: Phaser.GameObjects.Image;
      public starterCursorObjs;
      public pokerusCursorObjs;
      public starterIcons;
      public starterIconsCursorObj;
      public valueLimitLabel;
      public startCursorObj;
      public iconAnimHandler;
      public instructionRowX;
      public instructionRowY;
      public instructionRowTextOffset;
      public filterInstructionRowX;
      public filterInstructionRowY;
      public starterSelectCallback;
      public starterPreferences;
      protected blockInput: boolean;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      /**
       * Get the starter attributes for the given PokemonSpecies, after sanitizing them.
       * If somehow a preference is set for a form, variant, gender, ability or nature
       * that wasn't actually unlocked or is invalid it will be cleared here
       *
       * @param species The species to get Starter Preferences for
       * @returns StarterAttributes for the species
       */
      initStarterPrefs(species: PokeRogue.data.PokemonSpecies): StarterAttributes;
      /**
       * Set the selections for all filters to their default starting value
       */
      resetFilters(): void;
      showText(text: string, delay?: integer, callback?: Function, callbackDelay?: integer, prompt?: boolean, promptDelay?: integer): void;
      /**
       * Determines if 'Icon' based upgrade notifications should be shown
       * @returns true if upgrade notifications are enabled and set to display an 'Icon'
       */
      isUpgradeIconEnabled(): boolean;
      /**
       * Determines if 'Animation' based upgrade notifications should be shown
       * @returns true if upgrade notifications are enabled and set to display an 'Animation'
       */
      isUpgradeAnimationEnabled(): boolean;
      /**
       * Determines if a passive upgrade is available for the given species ID
       * @param speciesId The ID of the species to check the passive of
       * @returns true if the user has enough candies and a passive has not been unlocked already
       */
      isPassiveAvailable(speciesId: number): boolean;
      /**
       * Determines if a value reduction upgrade is available for the given species ID
       * @param speciesId The ID of the species to check the value reduction of
       * @returns true if the user has enough candies and all value reductions have not been unlocked already
       */
      isValueReductionAvailable(speciesId: number): boolean;
      /**
       * Determines if an same species egg can be bought for the given species ID
       * @param speciesId The ID of the species to check the value reduction of
       * @returns true if the user has enough candies
       */
      isSameSpeciesEggAvailable(speciesId: number): boolean;
      /**
       * Sets a bounce animation if enabled and the Pokemon has an upgrade
       * @param icon {@linkcode Phaser.GameObjects.GameObject} to animate
       * @param species {@linkcode PokemonSpecies} of the icon used to check for upgrades
       * @param startPaused Should this animation be paused after it is added?
       */
      setUpgradeAnimation(icon: Phaser.GameObjects.Sprite, species: PokeRogue.data.PokemonSpecies, startPaused?: boolean): void;
      /**
       * Sets the visibility of a Candy Upgrade Icon
       */
      setUpgradeIcon(starter: PokeRogue.ui.StarterContainer): void;
      /**
       * Processes an {@linkcode CandyUpgradeNotificationChangedEvent} sent when the corresponding setting changes
       * @param event {@linkcode Event} sent by the callback
       */
      onCandyUpgradeDisplayChanged(event: Event): void;
      processInput(button: PokeRogue.enums.Button): boolean;
      isInParty(species: PokeRogue.data.PokemonSpecies): [boolean, number];
      addToParty(species: PokeRogue.data.PokemonSpecies, dexAttr: bigint, abilityIndex: integer, nature: PokeRogue.data.Nature, moveset: PokeRogue.system.StarterMoveset): void;
      updatePartyIcon(species: PokeRogue.data.PokemonSpecies, index: number): void;
      switchMoveHandler(i: number, newMove: PokeRogue.enums.Moves, move: PokeRogue.enums.Moves): void;
      updateButtonIcon(iconSetting: any, gamepadType: any, iconElement: any, controlLabel: any): void;
      updateFilterButtonIcon(iconSetting: any, gamepadType: any, iconElement: any, controlLabel: any): void;
      updateInstructions(): void;
      getValueLimit(): integer;
      updateStarters: () => void;
      updateScroll: () => void;
      setCursor(cursor: integer): boolean;
      setFilterMode(filterMode: boolean): boolean;
      moveStarterIconsCursor(index: number): void;
      setSpecies(species: PokeRogue.data.PokemonSpecies | null): void;
      setSpeciesDetails(species: PokeRogue.data.PokemonSpecies, shiny?: boolean, formIndex?: integer, female?: boolean, variant?: Variant, abilityIndex?: integer, natureIndex?: integer, forSeen?: boolean): void;
      setTypeIcons(type1: PokeRogue.data.Type, type2: PokeRogue.data.Type): void;
      popStarter(index: number): void;
      updateStarterValueLabel(starter: PokeRogue.ui.StarterContainer): void;
      tryUpdateValue(add?: integer, addingToParty?: boolean): boolean;
      tryExit(): boolean;
      tryStart(manualTrigger?: boolean): boolean;
      isPartyValid(): boolean;
      /**
       * Creates a temporary dex attr props that will be used to check whether a pokemon is valid for a challenge
       * and to display the correct shiny, variant, and form based on the StarterPreferences
       *
       * @param speciesId the id of the species to get props for
       * @returns the dex props
       */
      getCurrentDexProps(speciesId: number): bigint;
      toggleStatsMode(on?: boolean): void;
      showStats(): void;
      clearText(): void;
      hideInstructions(): void;
      clear(): void;
      checkIconId(icon: Phaser.GameObjects.Sprite, species: PokeRogue.data.PokemonSpecies, female: boolean, formIndex: number, shiny: boolean, variant: number): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  export declare class StatsContainer extends Phaser.GameObjects.Container {
      public showDiff;
      public statsIvsCache;
      public ivChart;
      public ivStatValueTexts;
      constructor(scene: PokeRogue.BattleScene, x: number, y: number, showDiff?: boolean);
      setup(): void;
      updateIvs(ivs: integer[], originalIvs?: integer[]): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import UiHandler from "./ui-handler";
  //import Move from "../data/move";
  //import { Button } from "#enums/buttons";
  declare enum Page {
      PROFILE = 0,
      STATS = 1,
      MOVES = 2
  }
  export declare enum SummaryUiMode {
      DEFAULT = 0,
      LEARN_MOVE = 1
  }
  export class SummaryUiHandler extends PokeRogue.ui.UiHandler {
      public summaryUiMode;
      public summaryContainer;
      public tabSprite;
      public shinyOverlay;
      public numberText;
      public pokemonSprite;
      public nameText;
      public splicedIcon;
      public pokeball;
      public levelText;
      public genderText;
      public shinyIcon;
      public fusionShinyIcon;
      public candyShadow;
      public candyIcon;
      public candyOverlay;
      public candyCountText;
      public championRibbon;
      public statusContainer;
      public status;
      /** The pixel button prompt indicating a passive is unlocked */
      public abilityPrompt;
      /** Object holding everything needed to display an ability */
      public abilityContainer;
      /** Object holding everything needed to display a passive */
      public passiveContainer;
      public summaryPageContainer;
      public movesContainer;
      public moveDescriptionText;
      public moveCursorObj;
      public selectedMoveCursorObj;
      public moveRowsContainer;
      public extraMoveRowContainer;
      public moveEffectContainer;
      public movePowerText;
      public moveAccuracyText;
      public moveCategoryIcon;
      public summaryPageTransitionContainer;
      public descriptionScrollTween;
      public moveCursorBlinkTimer;
      public pokemon;
      public playerParty;
      /**This is set to false when checking the summary of a freshly caught Pokemon as it is not part of a player's party yet but still needs to display its items**/
      public newMove;
      public moveSelectFunction;
      public transitioning;
      public statusVisible;
      public moveEffectsVisible;
      public moveSelect;
      public moveCursor;
      public selectedMoveIndex;
      public selectCallback;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      getPageKey(page?: integer): string;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(cursor: integer, overrideChanged?: boolean): boolean;
      populatePageContainer(pageContainer: Phaser.GameObjects.Container, page?: Page): void;
      showStatus(instant?: boolean): void;
      hideStatus(instant?: boolean): void;
      getSelectedMove(): Move | null;
      showMoveSelect(): void;
      hideMoveSelect(): void;
      destroyBlinkCursor(): void;
      showMoveEffect(instant?: boolean): void;
      hideMoveEffect(instant?: boolean): void;
      clear(): void;
  }
  export {};
  
}

declare namespace PokeRogue.ui {
  //import { BattlerIndex } from "../battle";
  //import BattleScene from "../battle-scene";
  //import UiHandler from "./ui-handler";
  //import { Button } from "#enums/buttons";
  export type TargetSelectCallback = (targets: PokeRogue.BattlerIndex[]) => void;
  export class TargetSelectUiHandler extends PokeRogue.ui.UiHandler {
      public fieldIndex;
      public move;
      public targetSelectCallback;
      public isMultipleTargets;
      public targets;
      public targetsHighlighted;
      public targetFlashTween;
      public enemyModifiers;
      public targetBattleInfoMoveTween;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      show(args: any[]): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      setCursor(cursor: integer): boolean;
      eraseCursor(): void;
      public highlightItems;
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import { FormModalUiHandler } from "./form-modal-ui-handler";
  //import { ModalConfig } from "./modal-ui-handler";
  export class TestDialogueUiHandler extends PokeRogue.ui.FormModalUiHandler {
      keys: string[];
      constructor(scene: any, mode: any);
      setup(): void;
      getModalTitle(config?: ModalConfig): string;
      getFields(config?: ModalConfig): string[];
      getWidth(config?: ModalConfig): number;
      getMargin(config?: ModalConfig): [number, number, number, number];
      getButtonLabels(config?: ModalConfig): string[];
      getReadableErrorMessage(error: string): string;
      show(args: any[]): boolean;
  }
  
}

declare namespace PokeRogue.ui {
  //import { EggTier } from "#enums/egg-type";
  //import { UiTheme } from "#enums/ui-theme";
  import Phaser from "phaser";
  import BBCodeText from "phaser3-rex-plugins/plugins/gameobjects/tagtext/bbcodetext/BBCodeText";
  import InputText from "phaser3-rex-plugins/plugins/inputtext";
  //import { ModifierTier } from "../modifier/modifier-tier";
  export declare enum TextStyle {
      MESSAGE = 0,
      WINDOW = 1,
      WINDOW_ALT = 2,
      BATTLE_INFO = 3,
      PARTY = 4,
      PARTY_RED = 5,
      SUMMARY = 6,
      SUMMARY_ALT = 7,
      SUMMARY_RED = 8,
      SUMMARY_BLUE = 9,
      SUMMARY_PINK = 10,
      SUMMARY_GOLD = 11,
      SUMMARY_GRAY = 12,
      SUMMARY_GREEN = 13,
      MONEY = 14,
      STATS_LABEL = 15,
      STATS_VALUE = 16,
      SETTINGS_VALUE = 17,
      SETTINGS_LABEL = 18,
      SETTINGS_SELECTED = 19,
      SETTINGS_LOCKED = 20,
      TOOLTIP_TITLE = 21,
      TOOLTIP_CONTENT = 22,
      MOVE_INFO_CONTENT = 23,
      MOVE_PP_FULL = 24,
      MOVE_PP_HALF_FULL = 25,
      MOVE_PP_NEAR_EMPTY = 26,
      MOVE_PP_EMPTY = 27,
      SMALLER_WINDOW_ALT = 28,
      BGM_BAR = 29,
      PERFECT_IV = 30
  }
  export interface TextStyleOptions {
      scale: number;
      styleOptions: Phaser.Types.GameObjects.Text.TextStyle | InputText.IConfig;
      shadowColor: string;
      shadowXpos: number;
      shadowYpos: number;
  }
  export declare function addTextObject(scene: Phaser.Scene, x: number, y: number, content: string, style: TextStyle, extraStyleOptions?: Phaser.Types.GameObjects.Text.TextStyle): Phaser.GameObjects.Text;
  export declare function setTextStyle(obj: Phaser.GameObjects.Text, scene: Phaser.Scene, style: TextStyle, extraStyleOptions?: Phaser.Types.GameObjects.Text.TextStyle): void;
  export declare function addBBCodeTextObject(scene: Phaser.Scene, x: number, y: number, content: string, style: TextStyle, extraStyleOptions?: Phaser.Types.GameObjects.Text.TextStyle): BBCodeText;
  export declare function addTextInputObject(scene: Phaser.Scene, x: number, y: number, width: number, height: number, style: TextStyle, extraStyleOptions?: InputText.IConfig): InputText;
  export declare function getTextStyleOptions(style: TextStyle, uiTheme: PokeRogue.enums.UiTheme, extraStyleOptions?: Phaser.Types.GameObjects.Text.TextStyle): TextStyleOptions;
  export declare function getBBCodeFrag(content: string, textStyle: TextStyle, uiTheme?: UiTheme): string;
  export declare function getTextColor(textStyle: TextStyle, shadow?: boolean, uiTheme?: UiTheme): string;
  export declare function getModifierTierTextTint(tier: PokeRogue.modifier.ModifierTier): integer;
  export declare function getEggTierTextTint(tier: PokeRogue.enums.EggTier): integer;
  
}

declare namespace PokeRogue.ui {
  /** A small self contained UI element that displays the time of day as an icon */
  export class TimeOfDayWidget extends Phaser.GameObjects.Container {
      /** An alias for the scene typecast to a {@linkcode BattleScene} */
      public battleScene;
      /** The {@linkcode Phaser.GameObjects.Sprite} that represents the foreground of the current time of day */
      public readonly timeOfDayIconFgs;
      /** The {@linkcode Phaser.GameObjects.Sprite} that represents the middle-ground of the current time of day */
      public readonly timeOfDayIconMgs;
      /** The {@linkcode Phaser.GameObjects.Sprite} that represents the background of the current time of day */
      public readonly timeOfDayIconBgs;
      /** An array containing all timeOfDayIcon objects for easier iteration */
      public timeOfDayIcons;
      /** A map containing all timeOfDayIcon arrays with a matching string key for easier iteration */
      public timeOfDayIconPairs;
      /** The current time of day */
      public currentTime;
      /** The previous time of day */
      public previousTime;
      public readonly onEncounterPhaseEvent;
      public _parentVisible;
      /** Is the parent object visible? */
      get parentVisible(): boolean;
      /** On set, resumes any paused tweens if true */
      set parentVisible(visible: boolean);
      constructor(scene: Phaser.Scene, x?: number, y?: number);
      /**
       * Creates a tween animation based on the 'Back' ease algorithm
       * @returns an array of all tweens in the animation
       */
      public getBackTween;
      /**
       * Creates a tween animation based on the 'Bounce' ease algorithm
       * @returns an array of all tweens in the animation
       */
      public getBounceTween;
      /** Resets all icons to the proper depth, texture, and alpha so they are ready to tween */
      public resetIcons;
      /** Adds the proper tween for all icons */
      public tweenTimeOfDayIcon;
      /**
       * Grabs the current time of day from the arena and calls {@linkcode tweenTimeOfDayIcon}
       * @param event {@linkcode Event} being sent
       */
      public onEncounterPhase;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import OptionSelectUiHandler from "./settings/option-select-ui-handler";
  //import { Mode } from "./ui";
  export class TitleUiHandler extends PokeRogue.ui.settings.OptionSelectUiHandler {
      public titleContainer;
      public playerCountLabel;
      public splashMessage;
      public splashMessageText;
      public eventDisplay;
      public titleStatsTimer;
      constructor(scene: PokeRogue.BattleScene, mode?: Mode);
      setup(): void;
      updateTitleStats(): void;
      show(args: any[]): boolean;
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { TextStyle } from "./text";
  //import { Mode } from "./ui";
  //import { Button } from "#enums/buttons";
  /**
   * A basic abstract class to act as a holder and processor for UI elements.
   */
  export abstract class UiHandler {
      protected scene: PokeRogue.BattleScene;
      protected mode: integer | null;
      protected cursor: integer;
      active: boolean;
      /**
       * @param {BattleScene} scene The same scene as everything else.
       * @param {Mode} mode The mode of the UI element. These should be unique.
       */
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
      abstract setup(): void;
      show(_args: any[]): boolean;
      abstract processInput(button: PokeRogue.enums.Button): boolean;
      getUi(): import("./ui").default;
      getTextColor(style: PokeRogue.ui.TextStyle, shadow?: boolean): string;
      getCursor(): integer;
      setCursor(cursor: integer): boolean;
      /**
       * Changes the style of the mouse cursor.
       * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/cursor}
       * @param cursorStyle cursor style to apply
       */
      protected setMouseCursorStyle(cursorStyle: "pointer" | "default"): void;
      clear(): void;
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  export declare enum WindowVariant {
      NORMAL = 0,
      THIN = 1,
      XTHIN = 2
  }
  export declare function getWindowVariantSuffix(windowVariant: WindowVariant): string;
  export declare function addWindow(scene: PokeRogue.BattleScene, x: number, y: number, width: number, height: number, mergeMaskTop?: boolean, mergeMaskLeft?: boolean, maskOffsetX?: number, maskOffsetY?: number, windowVariant?: WindowVariant): Phaser.GameObjects.NineSlice;
  export declare function updateWindowType(scene: PokeRogue.BattleScene, windowTypeIndex: integer): void;
  export declare function addUiThemeOverrides(scene: PokeRogue.BattleScene): void;
  
}

declare namespace PokeRogue.ui {
  //import { default as BattleScene } from "../battle-scene";
  //import UiHandler from "./ui-handler";
  //import BattleMessageUiHandler from "./battle-message-ui-handler";
  //import AchvBar from "./achv-bar";
  //import SavingIconHandler from "./saving-icon-handler";
  //import { Button } from "#enums/buttons";
  //import BgmBar from "#app/ui/bgm-bar";
  export declare enum Mode {
      MESSAGE = 0,
      TITLE = 1,
      COMMAND = 2,
      FIGHT = 3,
      BALL = 4,
      TARGET_SELECT = 5,
      MODIFIER_SELECT = 6,
      SAVE_SLOT = 7,
      PARTY = 8,
      SUMMARY = 9,
      STARTER_SELECT = 10,
      EVOLUTION_SCENE = 11,
      EGG_HATCH_SCENE = 12,
      EGG_HATCH_SUMMARY = 13,
      CONFIRM = 14,
      OPTION_SELECT = 15,
      MENU = 16,
      MENU_OPTION_SELECT = 17,
      SETTINGS = 18,
      SETTINGS_DISPLAY = 19,
      SETTINGS_AUDIO = 20,
      SETTINGS_GAMEPAD = 21,
      GAMEPAD_BINDING = 22,
      SETTINGS_KEYBOARD = 23,
      KEYBOARD_BINDING = 24,
      ACHIEVEMENTS = 25,
      GAME_STATS = 26,
      EGG_LIST = 27,
      EGG_GACHA = 28,
      LOGIN_FORM = 29,
      REGISTRATION_FORM = 30,
      LOADING = 31,
      SESSION_RELOAD = 32,
      UNAVAILABLE = 33,
      OUTDATED = 34,
      CHALLENGE_SELECT = 35,
      RENAME_POKEMON = 36,
      RUN_HISTORY = 37,
      RUN_INFO = 38,
      TEST_DIALOGUE = 39,
      AUTO_COMPLETE = 40,
      ADMIN = 41
  }
  export class UI extends Phaser.GameObjects.Container {
      public mode;
      public modeChain;
      handlers: PokeRogue.ui.UiHandler[];
      public overlay;
      achvBar: PokeRogue.ui.AchvBar;
      bgmBar: PokeRogue.ui.BgmBar;
      savingIcon: PokeRogue.ui.SavingIconHandler;
      public tooltipContainer;
      public tooltipBg;
      public tooltipTitle;
      public tooltipContent;
      public overlayActive;
      constructor(scene: PokeRogue.BattleScene);
      setup(): void;
      public setupTooltip;
      getHandler<H extends PokeRogue.ui.UiHandler = UiHandler>(): H;
      getMessageHandler(): BattleMessageUiHandler;
      processInfoButton(pressed: boolean): boolean;
      processInput(button: PokeRogue.enums.Button): boolean;
      showText(text: string, delay?: integer | null, callback?: Function | null, callbackDelay?: integer | null, prompt?: boolean | null, promptDelay?: integer | null): void;
      showDialogue(keyOrText: string, name: string | undefined, delay: integer | null, callback: Function, callbackDelay?: integer, promptDelay?: integer): void;
      shouldSkipDialogue(i18nKey: string): boolean;
      showTooltip(title: string, content: string, overlap?: boolean): void;
      hideTooltip(): void;
      update(): void;
      clearText(): void;
      setCursor(cursor: integer): boolean;
      playSelect(): void;
      playError(): void;
      fadeOut(duration: integer): Promise<void>;
      fadeIn(duration: integer): Promise<void>;
      public setModeInternal;
      getMode(): Mode;
      setMode(mode: Mode, ...args: any[]): Promise<void>;
      setModeForceTransition(mode: Mode, ...args: any[]): Promise<void>;
      setModeWithoutClear(mode: Mode, ...args: any[]): Promise<void>;
      setOverlayMode(mode: Mode, ...args: any[]): Promise<void>;
      resetModeChain(): void;
      revertMode(): Promise<boolean>;
      revertModes(): Promise<void>;
      getModeChain(): Mode[];
  }
  
}

declare namespace PokeRogue.ui {
  //import BattleScene from "../battle-scene";
  //import { ModalUiHandler } from "./modal-ui-handler";
  //import { Mode } from "./ui";
  export class UnavailableModalUiHandler extends PokeRogue.ui.ModalUiHandler {
      public reconnectTimer;
      public reconnectDuration;
      public reconnectCallback;
      public readonly minTime;
      public readonly maxTime;
      public readonly randVarianceTime;
      constructor(scene: PokeRogue.BattleScene, mode?: Mode | null);
      getModalTitle(): string;
      getWidth(): number;
      getHeight(): number;
      getMargin(): [number, number, number, number];
      getButtonLabels(): string[];
      setup(): void;
      tryReconnect(): void;
      show(args: any[]): boolean;
  }
  
}

declare namespace PokeRogue {
  //import { InputsController } from "./inputs-controller";
  //import { Button } from "#enums/buttons";
  //import BattleScene from "./battle-scene";
  type ActionKeys = Record<Button, () => void>;
  export declare class UiInputs {
      public scene;
      public events;
      public inputsController;
      constructor(scene: PokeRogue.BattleScene, inputsController: PokeRogue.InputsController);
      init(): void;
      detectInputMethod(evt: any): void;
      listenInputs(): void;
      doVibration(inputSuccess: boolean, vibrationLength: number): void;
      getActionsKeyDown(): ActionKeys;
      getActionsKeyUp(): ActionKeys;
      buttonDirection(direction: PokeRogue.enums.Button): void;
      buttonAb(button: PokeRogue.enums.Button): void;
      buttonTouch(): void;
      buttonStats(pressed?: boolean): void;
      buttonGoToFilter(button: PokeRogue.enums.Button): void;
      buttonInfo(pressed?: boolean): void;
      buttonMenu(): void;
      buttonCycleOption(button: PokeRogue.enums.Button): void;
      buttonSpeedChange(up?: boolean): void;
  }
  export {};
  
}

declare namespace PokeRogue {
  //import { MoneyFormat } from "#enums/money-format";
  export declare const MissingTextureKey = "__MISSING";
  export declare function toReadableString(str: string): string;
  export declare function randomString(length: integer, seeded?: boolean): string;
  export declare function shiftCharCodes(str: string, shiftCount: integer): string;
  export declare function clampInt(value: integer, min: integer, max: integer): integer;
  export declare function randGauss(stdev: number, mean?: number): number;
  export declare function randSeedGauss(stdev: number, mean?: number): number;
  export declare function padInt(value: integer, length: integer, padWith?: string): string;
  /**
   * Returns a random integer between min and min + range
   * @param range The amount of possible numbers
   * @param min The starting number
   */
  export declare function randInt(range: integer, min?: integer): integer;
  /**
   * Generates a random number using the global seed, or the current battle's seed if called via `Battle.randSeedInt`
   * @param range How large of a range of random numbers to choose from. If {@linkcode range} <= 1, returns {@linkcode min}
   * @param min The minimum integer to pick, default `0`
   * @returns A random integer between {@linkcode min} and ({@linkcode min} + {@linkcode range} - 1)
   */
  export declare function randSeedInt(range: integer, min?: integer): integer;
  /**
   * Returns a random integer between min and max (non-inclusive)
   * @param min The lowest number
   * @param max The highest number
   */
  export declare function randIntRange(min: integer, max: integer): integer;
  export declare function randItem<T>(items: T[]): T;
  export declare function randSeedItem<T>(items: T[]): T;
  export declare function randSeedWeightedItem<T>(items: T[]): T;
  export declare function randSeedEasedWeightedItem<T>(items: T[], easingFunction?: string): T | null;
  /**
   * Shuffle a list using the seeded rng. Utilises the Fisher-Yates algorithm.
   * @param {Array} items An array of items.
   * @returns {Array} A new shuffled array of items.
   */
  export declare function randSeedShuffle<T>(items: T[]): T[];
  export declare function getFrameMs(frameCount: integer): integer;
  export declare function getCurrentTime(): number;
  export declare function getPlayTimeString(totalSeconds: integer): string;
  /**
   * Generates IVs from a given {@linkcode id} by extracting 5 bits at a time
   * starting from the least significant bit up to the 30th most significant bit.
   * @param id 32-bit number
   * @returns An array of six numbers corresponding to 5-bit chunks from {@linkcode id}
   */
  export declare function getIvsFromId(id: number): number[];
  export declare function formatLargeNumber(count: integer, threshold: integer): string;
  export declare function formatFancyLargeNumber(number: number, rounded?: number): string;
  export declare function formatMoney(format: PokeRogue.enums.MoneyFormat, amount: number): string;
  export declare function formatStat(stat: integer, forHp?: boolean): string;
  export declare function getEnumKeys(enumType: any): string[];
  export declare function getEnumValues(enumType: any): integer[];
  export declare function executeIf<T>(condition: boolean, promiseFunc: () => Promise<T>): Promise<T | null>;
  export declare const sessionIdKey = "pokerogue_sessionId";
  export declare const isLocal: boolean;
  export declare const localServerUrl: string;
  export declare let apiUrl: string;
  export declare let isLocalServerConnected: boolean;
  export declare const isBeta: boolean;
  export declare function setCookie(cName: string, cValue: string): void;
  export declare function removeCookie(cName: string): void;
  export declare function getCookie(cName: string): string;
  /**
   * When locally running the game, "pings" the local server
   * with a GET request to verify if a server is running,
   * sets isLocalServerConnected based on results
   */
  export declare function localPing(): void;
  export declare function apiFetch(path: string, authed?: boolean): Promise<Response>;
  export declare function apiPost(path: string, data?: any, contentType?: string, authed?: boolean): Promise<Response>;
  /** Alias for the constructor of a class */
  export type Constructor<T> = new (...args: unknown[]) => T;
  export declare class BooleanHolder {
      value: boolean;
      constructor(value: boolean);
  }
  export declare class NumberHolder {
      value: number;
      constructor(value: number);
  }
  export declare class IntegerHolder extends NumberHolder {
      constructor(value: integer);
  }
  export declare class FixedInt extends IntegerHolder {
      constructor(value: integer);
  }
  export declare function fixedInt(value: integer): integer;
  /**
   * Formats a string to title case
   * @param unformattedText Text to be formatted
   * @returns the formatted string
   */
  export declare function formatText(unformattedText: string): string;
  export declare function toCamelCaseString(unformattedText: string): string;
  export declare function rgbToHsv(r: integer, g: integer, b: integer): number[];
  /**
   * Compare color difference in RGB
   * @param {Array} rgb1 First RGB color in array
   * @param {Array} rgb2 Second RGB color in array
   */
  export declare function deltaRgb(rgb1: integer[], rgb2: integer[]): integer;
  export declare function rgbHexToRgba(hex: string): {
      r: number;
      g: number;
      b: number;
      a: number;
  };
  export declare function rgbaToInt(rgba: integer[]): integer;
  /**
   * Provided valid HSV values, calculates and stitches together a string of that
   * HSV color's corresponding hex code.
   *
   * Sourced from {@link https://stackoverflow.com/a/44134328}.
   * @param h Hue in degrees, must be in a range of [0, 360]
   * @param s Saturation percentage, must be in a range of [0, 1]
   * @param l Ligthness percentage, must be in a range of [0, 1]
   * @returns a string of the corresponding color hex code with a "#" prefix
   */
  export declare function hslToHex(h: number, s: number, l: number): string;
  export declare function verifyLang(lang?: string): boolean;
  /**
   * Prints the type and name of all game objects in a container for debuggin purposes
   * @param container container with game objects inside it
   */
  export declare function printContainerList(container: Phaser.GameObjects.Container): void;
  /**
   * Truncate a string to a specified maximum length and add an ellipsis if it exceeds that length.
   *
   * @param str - The string to be truncated.
   * @param maxLength - The maximum length of the truncated string, defaults to 10.
   * @returns The truncated string with an ellipsis if it was longer than maxLength.
   */
  export declare function truncateString(str: String, maxLength?: number): string | String;
  /**
   * Perform a deep copy of an object.
   *
   * @param values - The object to be deep copied.
   * @returns A new object that is a deep copy of the input.
   */
  export declare function deepCopy(values: object): object;
  /**
   * Convert a space-separated string into a capitalized and underscored string.
   *
   * @param input - The string to be converted.
   * @returns The converted string with words capitalized and separated by underscores.
   */
  export declare function reverseValueToKeySetting(input: any): any;
  /**
   * Capitalize a string.
   *
   * @param str - The string to be capitalized.
   * @param sep - The separator between the words of the string.
   * @param lowerFirstChar - Whether the first character of the string should be lowercase or not.
   * @param returnWithSpaces - Whether the returned string should have spaces between the words or not.
   * @returns The capitalized string.
   */
  export declare function capitalizeString(str: string, sep: string, lowerFirstChar?: boolean, returnWithSpaces?: boolean): string;
  /**
   * Returns if an object is null or undefined
   * @param object
   */
  export declare function isNullOrUndefined(object: any): boolean;
  /**
   * This function is used in the context of a Pokémon battle game to calculate the actual integer damage value from a float result.
   * Many damage calculation formulas involve various parameters and result in float values.
   * The actual damage applied to a Pokémon's HP must be an integer.
   * This function helps in ensuring that by flooring the float value and enforcing a minimum damage value.
   *
   * @param value - The float value to convert.
   * @param minValue - The minimum integer value to return. Defaults to 1.
   * @returns The converted value as an integer.
   */
  export declare function toDmgValue(value: number, minValue?: number): number;
  /**
   * Helper method to localize a sprite key (e.g. for types)
   * @param baseKey the base key of the sprite (e.g. `type`)
   * @returns the localized sprite key
   */
  export declare function getLocalizedSpriteKey(baseKey: string): string;
  export declare function setApi(url: string): void;
  
}

declare namespace PokeRogue {
  export {};
  
}

